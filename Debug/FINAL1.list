
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800db88  0800db88  0000eb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4e0  0800e4e0  000101f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4e0  0800e4e0  000101f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4e0  0800e4e0  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4e0  0800e4e0  0000f4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4e4  0800e4e4  0000f4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e4e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e6dc  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e6dc  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9b7  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c5  00000000  00000000  0002abd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014be  00000000  00000000  00030f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c735  00000000  00000000  000323fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211fd  00000000  00000000  0004eb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948a7  00000000  00000000  0006fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001045d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f0  00000000  00000000  0010461c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0010ba0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800db70 	.word	0x0800db70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800db70 	.word	0x0800db70

0800014c <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f004 fa3d 	bl	80045d8 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	4619      	mov	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f005 f832 	bl	8005270 <HAL_I2C_Master_Transmit>
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	@ 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	@ 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	@ 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	@ 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	@ 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	@ 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3314      	adds	r3, #20
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3354      	adds	r3, #84	@ 0x54
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff fefa 	bl	8000166 <CLCD_WriteI2C>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	460b      	mov	r3, r1
 8000384:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f7ff feea 	bl	8000166 <CLCD_WriteI2C>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003a4:	e007      	b.n	80003b6 <CLCD_I2C_WriteString+0x1c>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	1c5a      	adds	r2, r3, #1
 80003aa:	603a      	str	r2, [r7, #0]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ffe2 	bl	800037a <CLCD_I2C_WriteChar>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f3      	bne.n	80003a6 <CLCD_I2C_WriteString+0xc>
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff fec6 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003da:	2005      	movs	r0, #5
 80003dc:	f7ff feb6 	bl	800014c <CLCD_Delay>
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	f7ff ffe7 	bl	80003c8 <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	f7ff ff78 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f7ff ffc7 	bl	800039a <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2100      	movs	r1, #0
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff6f 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffbe 	bl	800039a <CLCD_I2C_WriteString>
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000430:	2204      	movs	r2, #4
 8000432:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000436:	2204      	movs	r2, #4
 8000438:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	75fb      	strb	r3, [r7, #23]
 800043e:	e022      	b.n	8000486 <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 800044c:	7dfb      	ldrb	r3, [r7, #23]
 800044e:	4a23      	ldr	r2, [pc, #140]	@ (80004dc <KeyPad_Init+0xb4>)
 8000450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000454:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 8000456:	7dfb      	ldrb	r3, [r7, #23]
 8000458:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <KeyPad_Init+0xb8>)
 800045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f004 fbea 	bl	8004c3c <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	4a1d      	ldr	r2, [pc, #116]	@ (80004e0 <KeyPad_Init+0xb8>)
 800046c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	4a1a      	ldr	r2, [pc, #104]	@ (80004dc <KeyPad_Init+0xb4>)
 8000474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fd79 	bl	8004f72 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	3301      	adds	r3, #1
 8000484:	75fb      	strb	r3, [r7, #23]
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	7dfa      	ldrb	r2, [r7, #23]
 800048c:	429a      	cmp	r2, r3
 800048e:	d3d7      	bcc.n	8000440 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000490:	2300      	movs	r3, #0
 8000492:	75bb      	strb	r3, [r7, #22]
 8000494:	e016      	b.n	80004c4 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004a2:	7dbb      	ldrb	r3, [r7, #22]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <KeyPad_Init+0xbc>)
 80004a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004aa:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004ac:	7dbb      	ldrb	r3, [r7, #22]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <KeyPad_Init+0xc0>)
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	1d3a      	adds	r2, r7, #4
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f004 fbbf 	bl	8004c3c <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004be:	7dbb      	ldrb	r3, [r7, #22]
 80004c0:	3301      	adds	r3, #1
 80004c2:	75bb      	strb	r3, [r7, #22]
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <KeyPad_Init+0xb0>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	7dba      	ldrb	r2, [r7, #22]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3e3      	bcc.n	8000496 <KeyPad_Init+0x6e>
  }
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000214 	.word	0x20000214
 80004dc:	0800e484 	.word	0x0800e484
 80004e0:	20000000 	.word	0x20000000
 80004e4:	0800e48c 	.word	0x0800e48c
 80004e8:	20000010 	.word	0x20000010

080004ec <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	e07e      	b.n	80005fa <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	e00e      	b.n	8000520 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	4a42      	ldr	r2, [pc, #264]	@ (8000610 <KeyPad_Scan+0x124>)
 8000506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4a41      	ldr	r2, [pc, #260]	@ (8000614 <KeyPad_Scan+0x128>)
 800050e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	f004 fd2c 	bl	8004f72 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	3301      	adds	r3, #1
 800051e:	71bb      	strb	r3, [r7, #6]
 8000520:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <KeyPad_Scan+0x12c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	79ba      	ldrb	r2, [r7, #6]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3eb      	bcc.n	8000502 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4a38      	ldr	r2, [pc, #224]	@ (8000610 <KeyPad_Scan+0x124>)
 800052e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a37      	ldr	r2, [pc, #220]	@ (8000614 <KeyPad_Scan+0x128>)
 8000536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	f004 fd18 	bl	8004f72 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000542:	2005      	movs	r0, #5
 8000544:	f004 f848 	bl	80045d8 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000548:	2300      	movs	r3, #0
 800054a:	717b      	strb	r3, [r7, #5]
 800054c:	e04d      	b.n	80005ea <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 800054e:	797b      	ldrb	r3, [r7, #5]
 8000550:	4a32      	ldr	r2, [pc, #200]	@ (800061c <KeyPad_Scan+0x130>)
 8000552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	4931      	ldr	r1, [pc, #196]	@ (8000620 <KeyPad_Scan+0x134>)
 800055a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f004 fcef 	bl	8004f44 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d13b      	bne.n	80005e4 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800056c:	2014      	movs	r0, #20
 800056e:	f004 f833 	bl	80045d8 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <KeyPad_Scan+0x130>)
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	4928      	ldr	r1, [pc, #160]	@ (8000620 <KeyPad_Scan+0x134>)
 800057e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f004 fcdd 	bl	8004f44 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d129      	bne.n	80005e4 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2201      	movs	r2, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	b21a      	sxth	r2, r3
 800059a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	3308      	adds	r3, #8
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ba:	e002      	b.n	80005c2 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005bc:	2005      	movs	r0, #5
 80005be:	f004 f80b 	bl	80045d8 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <KeyPad_Scan+0x130>)
 80005c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ca:	797b      	ldrb	r3, [r7, #5]
 80005cc:	4914      	ldr	r1, [pc, #80]	@ (8000620 <KeyPad_Scan+0x134>)
 80005ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4610      	mov	r0, r2
 80005d6:	f004 fcb5 	bl	8004f44 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0ed      	beq.n	80005bc <KeyPad_Scan+0xd0>
          return key;
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	e011      	b.n	8000608 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	3301      	adds	r3, #1
 80005e8:	717b      	strb	r3, [r7, #5]
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	797a      	ldrb	r2, [r7, #5]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ac      	bcc.n	800054e <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3301      	adds	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	429a      	cmp	r2, r3
 8000602:	f4ff af7b 	bcc.w	80004fc <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 8000606:	887b      	ldrh	r3, [r7, #2]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	0800e484 	.word	0x0800e484
 8000618:	20000214 	.word	0x20000214
 800061c:	20000010 	.word	0x20000010
 8000620:	0800e48c 	.word	0x0800e48c

08000624 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 800062c:	e00e      	b.n	800064c <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 800062e:	f7ff ff5d 	bl	80004ec <KeyPad_Scan>
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000636:	897b      	ldrh	r3, [r7, #10]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 800063c:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800063e:	897b      	ldrh	r3, [r7, #10]
 8000640:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	e024      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000646:	2014      	movs	r0, #20
 8000648:	f003 ffc6 	bl	80045d8 <HAL_Delay>
  while(Timeout_ms==0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0ed      	beq.n	800062e <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000652:	f003 ffb7 	bl	80045c4 <HAL_GetTick>
 8000656:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000658:	e00e      	b.n	8000678 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800065a:	f7ff ff47 	bl	80004ec <KeyPad_Scan>
 800065e:	4603      	mov	r3, r0
 8000660:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	8053      	strh	r3, [r2, #2]
			return keyRead;
 800066e:	897b      	ldrh	r3, [r7, #10]
 8000670:	e00e      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000672:	2014      	movs	r0, #20
 8000674:	f003 ffb0 	bl	80045d8 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000678:	f003 ffa4 	bl	80045c4 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e8      	bhi.n	800065a <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	805a      	strh	r2, [r3, #2]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000214 	.word	0x20000214

0800069c <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffbd 	bl	8000624 <KeyPad_WaitForKey>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f640 0208 	movw	r2, #2056	@ 0x808
 80006b0:	4293      	cmp	r3, r2
 80006b2:	f300 809f 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ba:	dc1a      	bgt.n	80006f2 <KeyPad_WaitForKeyGetChar+0x56>
 80006bc:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006c0:	f300 8098 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006c8:	dc2a      	bgt.n	8000720 <KeyPad_WaitForKeyGetChar+0x84>
 80006ca:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006ce:	f300 8091 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006d6:	dc3b      	bgt.n	8000750 <KeyPad_WaitForKeyGetChar+0xb4>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d069      	beq.n	80007b0 <KeyPad_WaitForKeyGetChar+0x114>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f2c0 8089 	blt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006e2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006e6:	f300 8085 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006ee:	dc47      	bgt.n	8000780 <KeyPad_WaitForKeyGetChar+0xe4>
 80006f0:	e080      	b.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006f2:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d87c      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <KeyPad_WaitForKeyGetChar+0x64>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	080007c1 	.word	0x080007c1
 8000704:	080007d1 	.word	0x080007d1
 8000708:	080007f5 	.word	0x080007f5
 800070c:	080007e1 	.word	0x080007e1
 8000710:	080007f5 	.word	0x080007f5
 8000714:	080007f5 	.word	0x080007f5
 8000718:	080007f5 	.word	0x080007f5
 800071c:	080007f1 	.word	0x080007f1
 8000720:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000724:	2b07      	cmp	r3, #7
 8000726:	d865      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000728:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <KeyPad_WaitForKeyGetChar+0x94>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007cd 	.word	0x080007cd
 8000738:	080007f5 	.word	0x080007f5
 800073c:	080007dd 	.word	0x080007dd
 8000740:	080007f5 	.word	0x080007f5
 8000744:	080007f5 	.word	0x080007f5
 8000748:	080007f5 	.word	0x080007f5
 800074c:	080007ed 	.word	0x080007ed
 8000750:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000754:	2b07      	cmp	r3, #7
 8000756:	d84d      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000758:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <KeyPad_WaitForKeyGetChar+0xc4>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007c9 	.word	0x080007c9
 8000768:	080007f5 	.word	0x080007f5
 800076c:	080007d9 	.word	0x080007d9
 8000770:	080007f5 	.word	0x080007f5
 8000774:	080007f5 	.word	0x080007f5
 8000778:	080007f5 	.word	0x080007f5
 800077c:	080007e9 	.word	0x080007e9
 8000780:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000784:	2b07      	cmp	r3, #7
 8000786:	d835      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000788:	a201      	add	r2, pc, #4	@ (adr r2, 8000790 <KeyPad_WaitForKeyGetChar+0xf4>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007f5 	.word	0x080007f5
 800079c:	080007d5 	.word	0x080007d5
 80007a0:	080007f5 	.word	0x080007f5
 80007a4:	080007f5 	.word	0x080007f5
 80007a8:	080007f5 	.word	0x080007f5
 80007ac:	080007e5 	.word	0x080007e5
  {
    case 0x0000:
      return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e020      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007b4:	2331      	movs	r3, #49	@ 0x31
 80007b6:	e01e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007b8:	2332      	movs	r3, #50	@ 0x32
 80007ba:	e01c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007bc:	2333      	movs	r3, #51	@ 0x33
 80007be:	e01a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007c0:	2341      	movs	r3, #65	@ 0x41
 80007c2:	e018      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007c4:	2334      	movs	r3, #52	@ 0x34
 80007c6:	e016      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007c8:	2335      	movs	r3, #53	@ 0x35
 80007ca:	e014      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007cc:	2336      	movs	r3, #54	@ 0x36
 80007ce:	e012      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007d0:	2342      	movs	r3, #66	@ 0x42
 80007d2:	e010      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007d4:	2337      	movs	r3, #55	@ 0x37
 80007d6:	e00e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007d8:	2338      	movs	r3, #56	@ 0x38
 80007da:	e00c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007dc:	2339      	movs	r3, #57	@ 0x39
 80007de:	e00a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007e0:	2343      	movs	r3, #67	@ 0x43
 80007e2:	e008      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007e4:	232a      	movs	r3, #42	@ 0x2a
 80007e6:	e006      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007e8:	2330      	movs	r3, #48	@ 0x30
 80007ea:	e004      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 80007ec:	2323      	movs	r3, #35	@ 0x23
 80007ee:	e002      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 80007f0:	2344      	movs	r3, #68	@ 0x44
 80007f2:	e000      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 80007f4:	2300      	movs	r3, #0
	}
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop

08000800 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800080a:	1df9      	adds	r1, r7, #7
 800080c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000810:	2201      	movs	r2, #1
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <USART_SendByte+0x20>)
 8000814:	f007 ffa3 	bl	800875e <HAL_UART_Transmit>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000310 	.word	0x20000310

08000824 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 800082e:	bf00      	nop
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	b29a      	uxth	r2, r3
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <receive_finger+0x3c>)
 800083e:	f008 f820 	bl	8008882 <HAL_UART_Receive>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f3      	beq.n	8000830 <receive_finger+0xc>
	//HAL_UART_Receive(&huart1,D,len,500);
	p=D[len-3];
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	3b03      	subs	r3, #3
 800084c:	3318      	adds	r3, #24
 800084e:	443b      	add	r3, r7
 8000850:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000854:	75fb      	strb	r3, [r7, #23]
	return p;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000310 	.word	0x20000310

08000864 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,1000);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b29a      	uxth	r2, r3
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <receive_finger_match+0x34>)
 800087c:	f008 f801 	bl	8008882 <HAL_UART_Receive>
	p=D[len-5];
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b05      	subs	r3, #5
 8000884:	3318      	adds	r3, #24
 8000886:	443b      	add	r3, r7
 8000888:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800088c:	75fb      	strb	r3, [r7, #23]
	return p;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000310 	.word	0x20000310

0800089c <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,200);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	23c8      	movs	r3, #200	@ 0xc8
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <receive_finger_search+0x38>)
 80008b2:	f007 ffe6 	bl	8008882 <HAL_UART_Receive>
	p=D[len-7];
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3b07      	subs	r3, #7
 80008ba:	3320      	adds	r3, #32
 80008bc:	443b      	add	r3, r7
 80008be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008c2:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008c4:	7dfa      	ldrb	r2, [r7, #23]
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <receive_finger_search+0x3c>)
 80008c8:	701a      	strb	r2, [r3, #0]

	return p;
 80008ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000310 	.word	0x20000310
 80008d8:	20000218 	.word	0x20000218

080008dc <collect_finger>:
int collect_finger(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008e0:	20ef      	movs	r0, #239	@ 0xef
 80008e2:	f7ff ff8d 	bl	8000800 <USART_SendByte>
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff8a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80008ec:	20ff      	movs	r0, #255	@ 0xff
 80008ee:	f7ff ff87 	bl	8000800 <USART_SendByte>
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	f7ff ff84 	bl	8000800 <USART_SendByte>
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	f7ff ff81 	bl	8000800 <USART_SendByte>
 80008fe:	20ff      	movs	r0, #255	@ 0xff
 8000900:	f7ff ff7e 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff ff7b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff78 	bl	8000800 <USART_SendByte>
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff75 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff ff72 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff6f 	bl	8000800 <USART_SendByte>
 8000922:	2005      	movs	r0, #5
 8000924:	f7ff ff6c 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff7b 	bl	8000824 <receive_finger>
 800092e:	4603      	mov	r3, r0
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}

08000934 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3307      	adds	r3, #7
 8000946:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000948:	20ef      	movs	r0, #239	@ 0xef
 800094a:	f7ff ff59 	bl	8000800 <USART_SendByte>
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff56 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000954:	20ff      	movs	r0, #255	@ 0xff
 8000956:	f7ff ff53 	bl	8000800 <USART_SendByte>
 800095a:	20ff      	movs	r0, #255	@ 0xff
 800095c:	f7ff ff50 	bl	8000800 <USART_SendByte>
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	f7ff ff4d 	bl	8000800 <USART_SendByte>
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	f7ff ff4a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff47 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff44 	bl	8000800 <USART_SendByte>
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff ff41 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x02);
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff3e 	bl	8000800 <USART_SendByte>
   USART_SendByte(local);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff3a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff37 	bl	8000800 <USART_SendByte>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff32 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 800099c:	200c      	movs	r0, #12
 800099e:	f7ff ff41 	bl	8000824 <receive_finger>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009b0:	20ef      	movs	r0, #239	@ 0xef
 80009b2:	f7ff ff25 	bl	8000800 <USART_SendByte>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff22 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	f7ff ff1f 	bl	8000800 <USART_SendByte>
 80009c2:	20ff      	movs	r0, #255	@ 0xff
 80009c4:	f7ff ff1c 	bl	8000800 <USART_SendByte>
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	f7ff ff19 	bl	8000800 <USART_SendByte>
 80009ce:	20ff      	movs	r0, #255	@ 0xff
 80009d0:	f7ff ff16 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff13 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ff10 	bl	8000800 <USART_SendByte>
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff ff0d 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x03);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff ff0a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ff07 	bl	8000800 <USART_SendByte>
 80009f2:	2007      	movs	r0, #7
 80009f4:	f7ff ff04 	bl	8000800 <USART_SendByte>
   return receive_finger_match(14);
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff33 	bl	8000864 <receive_finger_match>
 80009fe:	4603      	mov	r3, r0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a08:	20ef      	movs	r0, #239	@ 0xef
 8000a0a:	f7ff fef9 	bl	8000800 <USART_SendByte>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef6 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a14:	20ff      	movs	r0, #255	@ 0xff
 8000a16:	f7ff fef3 	bl	8000800 <USART_SendByte>
 8000a1a:	20ff      	movs	r0, #255	@ 0xff
 8000a1c:	f7ff fef0 	bl	8000800 <USART_SendByte>
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	f7ff feed 	bl	8000800 <USART_SendByte>
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	f7ff feea 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fee7 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fee4 	bl	8000800 <USART_SendByte>
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fee1 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x05);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f7ff fede 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fedb 	bl	8000800 <USART_SendByte>
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f7ff fed8 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000a50:	200c      	movs	r0, #12
 8000a52:	f7ff fee7 	bl	8000824 <receive_finger>
 8000a56:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	330e      	adds	r3, #14
 8000a6a:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a6c:	20ef      	movs	r0, #239	@ 0xef
 8000a6e:	f7ff fec7 	bl	8000800 <USART_SendByte>
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fec4 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a78:	20ff      	movs	r0, #255	@ 0xff
 8000a7a:	f7ff fec1 	bl	8000800 <USART_SendByte>
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	f7ff febe 	bl	8000800 <USART_SendByte>
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	f7ff febb 	bl	8000800 <USART_SendByte>
 8000a8a:	20ff      	movs	r0, #255	@ 0xff
 8000a8c:	f7ff feb8 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff feb5 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff feb2 	bl	8000800 <USART_SendByte>
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff feaf 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x06);
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f7ff feac 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fea9 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fea6 	bl	8000800 <USART_SendByte>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fea2 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe9f 	bl	8000800 <USART_SendByte>
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe9b 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f7ff feaa 	bl	8000824 <receive_finger>
 8000ad0:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000ade:	20ef      	movs	r0, #239	@ 0xef
 8000ae0:	f7ff fe8e 	bl	8000800 <USART_SendByte>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe8b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000aea:	20ff      	movs	r0, #255	@ 0xff
 8000aec:	f7ff fe88 	bl	8000800 <USART_SendByte>
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	f7ff fe85 	bl	8000800 <USART_SendByte>
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	f7ff fe82 	bl	8000800 <USART_SendByte>
 8000afc:	20ff      	movs	r0, #255	@ 0xff
 8000afe:	f7ff fe7f 	bl	8000800 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe7c 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe79 	bl	8000800 <USART_SendByte>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	f7ff fe76 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x04);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fe73 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fe70 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fe6d 	bl	8000800 <USART_SendByte>
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe6a 	bl	8000800 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fe67 	bl	8000800 <USART_SendByte>
 8000b32:	20ff      	movs	r0, #255	@ 0xff
 8000b34:	f7ff fe64 	bl	8000800 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fe61 	bl	8000800 <USART_SendByte>
 8000b3e:	200d      	movs	r0, #13
 8000b40:	f7ff fe5e 	bl	8000800 <USART_SendByte>
   return receive_finger_search(16);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f7ff fea9 	bl	800089c <receive_finger_search>
 8000b4a:	4603      	mov	r3, r0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b58:	f003 fee0 	bl	800491c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000b6c:	f107 020c 	add.w	r2, r7, #12
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 ffb8 	bl	8004aec <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000b7c:	f003 fef4 	bl	8004968 <HAL_FLASH_Lock>
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000b94:	f003 fec2 	bl	800491c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f003 fe48 	bl	800483c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000bac:	f003 fedc 	bl	8004968 <HAL_FLASH_Lock>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}

08000bb8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000bc6:	f003 fea9 	bl	800491c <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	e00c      	b.n	8000bea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000bd0:	8afa      	ldrh	r2, [r7, #22]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	18d0      	adds	r0, r2, r3
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff ffd2 	bl	8000b88 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	3302      	adds	r3, #2
 8000be8:	82fb      	strh	r3, [r7, #22]
 8000bea:	8afa      	ldrh	r2, [r7, #22]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3ee      	bcc.n	8000bd0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000bf2:	f003 feb9 	bl	8004968 <HAL_FLASH_Lock>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
 8000c5a:	e00c      	b.n	8000c76 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000c5c:	8afa      	ldrh	r2, [r7, #22]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	8afb      	ldrh	r3, [r7, #22]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	780a      	ldrb	r2, [r1, #0]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3ee      	bcc.n	8000c5c <Flash_Read_Array+0x14>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000ca8:	e002      	b.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000020 	.word	0x20000020

08000cc0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000cc6:	f7ff fe09 	bl	80008dc <collect_finger>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <check_fingerprint_status+0x24>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    }
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000409 	.word	0x20000409

08000ce8 <process_fingerprint>:
void process_fingerprint()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000cfa:	f002 fd53 	bl	80037a4 <read_finger>
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000409 	.word	0x20000409

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f003 fc01 	bl	8004514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f8d3 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 fa09 	bl	800112c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d1a:	f000 f959 	bl	8000fd0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d1e:	f000 f929 	bl	8000f74 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d22:	f000 f9d9 	bl	80010d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d26:	f000 f989 	bl	800103c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d2a:	f00b fdc7 	bl	800c8bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000d2e:	f002 ff97 	bl	8003c60 <TM_MFRC522_Init>
  KeyPad_Init();
 8000d32:	f7ff fb79 	bl	8000428 <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000d36:	2302      	movs	r3, #2
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	224e      	movs	r2, #78	@ 0x4e
 8000d3e:	4955      	ldr	r1, [pc, #340]	@ (8000e94 <main+0x18c>)
 8000d40:	4855      	ldr	r0, [pc, #340]	@ (8000e98 <main+0x190>)
 8000d42:	f7ff fa67 	bl	8000214 <CLCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 8000d46:	4855      	ldr	r0, [pc, #340]	@ (8000e9c <main+0x194>)
 8000d48:	f007 f912 	bl	8007f70 <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 8000d4c:	f002 fa00 	bl	8003150 <checkcountUID>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <main+0x52>
	{
		startadd();
 8000d56:	f002 fb87 	bl	8003468 <startadd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	484e      	ldr	r0, [pc, #312]	@ (8000e98 <main+0x190>)
 8000d60:	f7ff fac8 	bl	80002f4 <CLCD_I2C_SetCursor>
      CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000d64:	494e      	ldr	r1, [pc, #312]	@ (8000ea0 <main+0x198>)
 8000d66:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <main+0x190>)
 8000d68:	f7ff fb17 	bl	800039a <CLCD_I2C_WriteString>

      char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f7ff fc95 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71bb      	strb	r3, [r7, #6]

      if (selected_key != 0)
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d056      	beq.n	8000e2a <main+0x122>
      {
          uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
          exitmenu = 15;
 8000d80:	4b48      	ldr	r3, [pc, #288]	@ (8000ea4 <main+0x19c>)
 8000d82:	220f      	movs	r2, #15
 8000d84:	701a      	strb	r2, [r3, #0]

          switch (selected_key)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	3b41      	subs	r3, #65	@ 0x41
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d87b      	bhi.n	8000e86 <main+0x17e>
          {
          case 'A': // RFID
          case 'B': // FACEID
          case 'C': // FINGER
          case 'D': // PASSWORD
              CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2100      	movs	r1, #0
 8000d92:	4841      	ldr	r0, [pc, #260]	@ (8000e98 <main+0x190>)
 8000d94:	f7ff faae 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000d98:	4943      	ldr	r1, [pc, #268]	@ (8000ea8 <main+0x1a0>)
 8000d9a:	483f      	ldr	r0, [pc, #252]	@ (8000e98 <main+0x190>)
 8000d9c:	f7ff fafd 	bl	800039a <CLCD_I2C_WriteString>

              while (exitmenu)
 8000da0:	e00e      	b.n	8000dc0 <main+0xb8>
              {
                  if (TM_MFRC522_Check(CardID) == MI_OK)
 8000da2:	4842      	ldr	r0, [pc, #264]	@ (8000eac <main+0x1a4>)
 8000da4:	f002 ff80 	bl	8003ca8 <TM_MFRC522_Check>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <main+0xb8>
                  {
                      key = CheckListUID(CardID);
 8000dae:	483f      	ldr	r0, [pc, #252]	@ (8000eac <main+0x1a4>)
 8000db0:	f002 f99e 	bl	80030f0 <CheckListUID>
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
                      key = key >> 4;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	71fb      	strb	r3, [r7, #7]
                      break;
 8000dbe:	e003      	b.n	8000dc8 <main+0xc0>
              while (exitmenu)
 8000dc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <main+0x19c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1ec      	bne.n	8000da2 <main+0x9a>
                  }
              }

              switch (key)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d117      	bne.n	8000dfe <main+0xf6>
              {
              case 1:
                  if (selected_key == 'A')
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b41      	cmp	r3, #65	@ 0x41
 8000dd2:	d102      	bne.n	8000dda <main+0xd2>
                      RFID();
 8000dd4:	f000 fa58 	bl	8001288 <RFID>
                      FACEID();
                  else if (selected_key == 'C')
                      FINGER();
                  else if (selected_key == 'D')
                      PASSWORD();
                  break;
 8000dd8:	e025      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'B')
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	2b42      	cmp	r3, #66	@ 0x42
 8000dde:	d102      	bne.n	8000de6 <main+0xde>
                      FACEID();
 8000de0:	f001 f93e 	bl	8002060 <FACEID>
                  break;
 8000de4:	e01f      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'C')
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b43      	cmp	r3, #67	@ 0x43
 8000dea:	d102      	bne.n	8000df2 <main+0xea>
                      FINGER();
 8000dec:	f002 f948 	bl	8003080 <FINGER>
                  break;
 8000df0:	e019      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'D')
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b44      	cmp	r3, #68	@ 0x44
 8000df6:	d116      	bne.n	8000e26 <main+0x11e>
                      PASSWORD();
 8000df8:	f002 f948 	bl	800308c <PASSWORD>
                  break;
 8000dfc:	e013      	b.n	8000e26 <main+0x11e>
              default:
                  CLCD_I2C_Clear(&LCD1);
 8000dfe:	4826      	ldr	r0, [pc, #152]	@ (8000e98 <main+0x190>)
 8000e00:	f7ff fae2 	bl	80003c8 <CLCD_I2C_Clear>
                  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	4823      	ldr	r0, [pc, #140]	@ (8000e98 <main+0x190>)
 8000e0a:	f7ff fa73 	bl	80002f4 <CLCD_I2C_SetCursor>
                  CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8000e0e:	4928      	ldr	r1, [pc, #160]	@ (8000eb0 <main+0x1a8>)
 8000e10:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <main+0x190>)
 8000e12:	f7ff fac2 	bl	800039a <CLCD_I2C_WriteString>
                  HAL_Delay(2000);
 8000e16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e1a:	f003 fbdd 	bl	80045d8 <HAL_Delay>
                  CLCD_I2C_Clear(&LCD1);
 8000e1e:	481e      	ldr	r0, [pc, #120]	@ (8000e98 <main+0x190>)
 8000e20:	f7ff fad2 	bl	80003c8 <CLCD_I2C_Clear>
                  break;
 8000e24:	e000      	b.n	8000e28 <main+0x120>
                  break;
 8000e26:	bf00      	nop
              }
              break;
 8000e28:	e02e      	b.n	8000e88 <main+0x180>

          default:
              break;
          }
      }
      else if (TM_MFRC522_Check(CardID) == MI_OK)
 8000e2a:	4820      	ldr	r0, [pc, #128]	@ (8000eac <main+0x1a4>)
 8000e2c:	f002 ff3c 	bl	8003ca8 <TM_MFRC522_Check>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d128      	bne.n	8000e88 <main+0x180>
      {
          if (CheckListUID(CardID) != 0)
 8000e36:	481d      	ldr	r0, [pc, #116]	@ (8000eac <main+0x1a4>)
 8000e38:	f002 f95a 	bl	80030f0 <CheckListUID>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <main+0x15c>
          {
              CLCD_I2C_Clear(&LCD1);
 8000e42:	4815      	ldr	r0, [pc, #84]	@ (8000e98 <main+0x190>)
 8000e44:	f7ff fac0 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <main+0x190>)
 8000e4e:	f7ff fa51 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8000e52:	4918      	ldr	r1, [pc, #96]	@ (8000eb4 <main+0x1ac>)
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <main+0x190>)
 8000e56:	f7ff faa0 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(500);
 8000e5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e5e:	f003 fbbb 	bl	80045d8 <HAL_Delay>
 8000e62:	e011      	b.n	8000e88 <main+0x180>
          }
          else
          {
              CLCD_I2C_Clear(&LCD1);
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <main+0x190>)
 8000e66:	f7ff faaf 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <main+0x190>)
 8000e70:	f7ff fa40 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <main+0x1b0>)
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <main+0x190>)
 8000e78:	f7ff fa8f 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(3000);
 8000e7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e80:	f003 fbaa 	bl	80045d8 <HAL_Delay>
 8000e84:	e000      	b.n	8000e88 <main+0x180>
              break;
 8000e86:	bf00      	nop
          }
      }

      // Kiểm tra trạng thái vân tay định kỳ
      check_fingerprint_status();
 8000e88:	f7ff ff1a 	bl	8000cc0 <check_fingerprint_status>

      // Xử lý vân tay nếu phát hiện
      process_fingerprint();
 8000e8c:	f7ff ff2c 	bl	8000ce8 <process_fingerprint>
  {
 8000e90:	e763      	b.n	8000d5a <main+0x52>
 8000e92:	bf00      	nop
 8000e94:	2000021c 	.word	0x2000021c
 8000e98:	200003d8 	.word	0x200003d8
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	0800db88 	.word	0x0800db88
 8000ea4:	20000020 	.word	0x20000020
 8000ea8:	0800db98 	.word	0x0800db98
 8000eac:	200003e4 	.word	0x200003e4
 8000eb0:	0800dba8 	.word	0x0800dba8
 8000eb4:	0800dbb8 	.word	0x0800dbb8
 8000eb8:	0800dbc4 	.word	0x0800dbc4

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec6:	2228      	movs	r2, #40	@ 0x28
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00c f9c0 	bl	800d250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efa:	2301      	movs	r3, #1
 8000efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 f840 	bl	8006f98 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f1e:	f002 fe71 	bl	8003c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f006 faac 	bl	800749c <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f4a:	f002 fe5b 	bl	8003c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fc36 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f66:	f002 fe4d 	bl	8003c04 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	@ 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f004 f819 	bl	8004fe8 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f002 fe22 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_SPI1_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001004:	2230      	movs	r2, #48	@ 0x30
 8001006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001022:	f006 fc89 	bl	8007938 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800102c:	f002 fdea 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000270 	.word	0x20000270
 8001038:	40013000 	.word	0x40013000

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001062:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001070:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001084:	f006 ff24 	bl	8007ed0 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800108e:	f002 fdb9 	bl	8003c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010a0:	f007 f8c0 	bl	8008224 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010aa:	f002 fdab 	bl	8003c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010bc:	f007 fa92 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f002 fd9d 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002c8 	.word	0x200002c8

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART1_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001110:	f007 fad8 	bl	80086c4 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f002 fd73 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000310 	.word	0x20000310
 8001128:	40013800 	.word	0x40013800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b4c      	ldr	r3, [pc, #304]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a4b      	ldr	r2, [pc, #300]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b49      	ldr	r3, [pc, #292]	@ (8001274 <MX_GPIO_Init+0x148>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <MX_GPIO_Init+0x148>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a45      	ldr	r2, [pc, #276]	@ (8001274 <MX_GPIO_Init+0x148>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b40      	ldr	r3, [pc, #256]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a3f      	ldr	r2, [pc, #252]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <MX_GPIO_Init+0x148>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <MX_GPIO_Init+0x148>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a39      	ldr	r2, [pc, #228]	@ (8001274 <MX_GPIO_Init+0x148>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|buzzer_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80011a6:	4834      	ldr	r0, [pc, #208]	@ (8001278 <MX_GPIO_Init+0x14c>)
 80011a8:	f003 fee3 	bl	8004f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24f 0108 	movw	r1, #61448	@ 0xf008
 80011b2:	4832      	ldr	r0, [pc, #200]	@ (800127c <MX_GPIO_Init+0x150>)
 80011b4:	f003 fedd 	bl	8004f72 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 80011b8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	482c      	ldr	r0, [pc, #176]	@ (8001280 <MX_GPIO_Init+0x154>)
 80011ce:	f003 fd35 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 80011d2:	2303      	movs	r3, #3
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <MX_GPIO_Init+0x14c>)
 80011e6:	f003 fd29 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = CS_Pin|buzzer_Pin;
 80011ea:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	481d      	ldr	r0, [pc, #116]	@ (8001278 <MX_GPIO_Init+0x14c>)
 8001204:	f003 fd1a 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001208:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <MX_GPIO_Init+0x150>)
 8001222:	f003 fd0b 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <MX_GPIO_Init+0x150>)
 800123e:	f003 fcfd 	bl	8004c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_GPIO_Init+0x158>)
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4809      	ldr	r0, [pc, #36]	@ (800127c <MX_GPIO_Init+0x150>)
 8001258:	f003 fcf0 	bl	8004c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	2017      	movs	r0, #23
 8001262:	f003 fab4 	bl	80047ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001266:	2017      	movs	r0, #23
 8001268:	f003 facd 	bl	8004806 <HAL_NVIC_EnableIRQ>

}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	10110000 	.word	0x10110000

08001288 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
	exitmenu = 15;
 800128e:	4ba3      	ldr	r3, [pc, #652]	@ (800151c <RFID+0x294>)
 8001290:	220f      	movs	r2, #15
 8001292:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8001294:	23ff      	movs	r3, #255	@ 0xff
 8001296:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press Down");
 8001298:	4aa1      	ldr	r2, [pc, #644]	@ (8001520 <RFID+0x298>)
 800129a:	49a2      	ldr	r1, [pc, #648]	@ (8001524 <RFID+0x29c>)
 800129c:	48a2      	ldr	r0, [pc, #648]	@ (8001528 <RFID+0x2a0>)
 800129e:	f7ff f8a3 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80012a2:	f000 bea0 	b.w	8001fe6 <RFID+0xd5e>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f7ff f9f8 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80012ac:	4603      	mov	r3, r0
 80012ae:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012b4:	d12e      	bne.n	8001314 <RFID+0x8c>
		{
			exitmenu = 15;
 80012b6:	4b99      	ldr	r3, [pc, #612]	@ (800151c <RFID+0x294>)
 80012b8:	220f      	movs	r2, #15
 80012ba:	701a      	strb	r2, [r3, #0]
			status++;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	3301      	adds	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d801      	bhi.n	80012cc <RFID+0x44>
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	e000      	b.n	80012ce <RFID+0x46>
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d012      	beq.n	80012fc <RFID+0x74>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc16      	bgt.n	8001308 <RFID+0x80>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <RFID+0x5c>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d006      	beq.n	80012f0 <RFID+0x68>
 80012e2:	e011      	b.n	8001308 <RFID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80012e4:	4a91      	ldr	r2, [pc, #580]	@ (800152c <RFID+0x2a4>)
 80012e6:	498f      	ldr	r1, [pc, #572]	@ (8001524 <RFID+0x29c>)
 80012e8:	488f      	ldr	r0, [pc, #572]	@ (8001528 <RFID+0x2a0>)
 80012ea:	f7ff f87d 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80012ee:	e011      	b.n	8001314 <RFID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80012f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001530 <RFID+0x2a8>)
 80012f2:	498c      	ldr	r1, [pc, #560]	@ (8001524 <RFID+0x29c>)
 80012f4:	488c      	ldr	r0, [pc, #560]	@ (8001528 <RFID+0x2a0>)
 80012f6:	f7ff f877 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80012fa:	e00b      	b.n	8001314 <RFID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80012fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001534 <RFID+0x2ac>)
 80012fe:	4989      	ldr	r1, [pc, #548]	@ (8001524 <RFID+0x29c>)
 8001300:	4889      	ldr	r0, [pc, #548]	@ (8001528 <RFID+0x2a0>)
 8001302:	f7ff f871 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001306:	e005      	b.n	8001314 <RFID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 8001308:	4a8b      	ldr	r2, [pc, #556]	@ (8001538 <RFID+0x2b0>)
 800130a:	4986      	ldr	r1, [pc, #536]	@ (8001524 <RFID+0x29c>)
 800130c:	4886      	ldr	r0, [pc, #536]	@ (8001528 <RFID+0x2a0>)
 800130e:	f7ff f86b 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001312:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	2b23      	cmp	r3, #35	@ 0x23
 8001318:	f040 8665 	bne.w	8001fe6 <RFID+0xd5e>
		{
			exitmenu = 15;
 800131c:	4b7f      	ldr	r3, [pc, #508]	@ (800151c <RFID+0x294>)
 800131e:	220f      	movs	r2, #15
 8001320:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b02      	cmp	r3, #2
 8001326:	f000 8652 	beq.w	8001fce <RFID+0xd46>
 800132a:	2b02      	cmp	r3, #2
 800132c:	f300 8657 	bgt.w	8001fde <RFID+0xd56>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <RFID+0xb6>
 8001334:	2b01      	cmp	r3, #1
 8001336:	f000 822d 	beq.w	8001794 <RFID+0x50c>
 800133a:	f000 be50 	b.w	8001fde <RFID+0xd56>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"CARD: ADD","Pls Press Down");
 800133e:	4a78      	ldr	r2, [pc, #480]	@ (8001520 <RFID+0x298>)
 8001340:	497e      	ldr	r1, [pc, #504]	@ (800153c <RFID+0x2b4>)
 8001342:	4879      	ldr	r0, [pc, #484]	@ (8001528 <RFID+0x2a0>)
 8001344:	f7ff f850 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001350:	e215      	b.n	800177e <RFID+0x4f6>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f7ff f9a2 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001358:	4603      	mov	r3, r0
 800135a:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800135c:	4b6f      	ldr	r3, [pc, #444]	@ (800151c <RFID+0x294>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <RFID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 8001364:	4870      	ldr	r0, [pc, #448]	@ (8001528 <RFID+0x2a0>)
 8001366:	f7ff f82f 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136e:	f003 f933 	bl	80045d8 <HAL_Delay>
						return;
 8001372:	f000 be44 	b.w	8001ffe <RFID+0xd76>
					}
					if (key_pressed =='*')
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	2b2a      	cmp	r3, #42	@ 0x2a
 800137a:	d124      	bne.n	80013c6 <RFID+0x13e>
					{
						exitmenu = 15;
 800137c:	4b67      	ldr	r3, [pc, #412]	@ (800151c <RFID+0x294>)
 800137e:	220f      	movs	r2, #15
 8001380:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	3301      	adds	r3, #1
 8001386:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d801      	bhi.n	8001392 <RFID+0x10a>
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	e000      	b.n	8001394 <RFID+0x10c>
 8001392:	2300      	movs	r3, #0
 8001394:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001396:	7dbb      	ldrb	r3, [r7, #22]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d002      	beq.n	80013a2 <RFID+0x11a>
 800139c:	2b02      	cmp	r3, #2
 800139e:	d006      	beq.n	80013ae <RFID+0x126>
 80013a0:	e00b      	b.n	80013ba <RFID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80013a2:	4a67      	ldr	r2, [pc, #412]	@ (8001540 <RFID+0x2b8>)
 80013a4:	4965      	ldr	r1, [pc, #404]	@ (800153c <RFID+0x2b4>)
 80013a6:	4860      	ldr	r0, [pc, #384]	@ (8001528 <RFID+0x2a0>)
 80013a8:	f7ff f81e 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013ac:	e00b      	b.n	80013c6 <RFID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80013ae:	4a65      	ldr	r2, [pc, #404]	@ (8001544 <RFID+0x2bc>)
 80013b0:	4962      	ldr	r1, [pc, #392]	@ (800153c <RFID+0x2b4>)
 80013b2:	485d      	ldr	r0, [pc, #372]	@ (8001528 <RFID+0x2a0>)
 80013b4:	f7ff f818 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013b8:	e005      	b.n	80013c6 <RFID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80013ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001538 <RFID+0x2b0>)
 80013bc:	495f      	ldr	r1, [pc, #380]	@ (800153c <RFID+0x2b4>)
 80013be:	485a      	ldr	r0, [pc, #360]	@ (8001528 <RFID+0x2a0>)
 80013c0:	f7ff f812 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013c4:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	2b23      	cmp	r3, #35	@ 0x23
 80013ca:	f040 81d8 	bne.w	800177e <RFID+0x4f6>
					{
						exitmenu = 15;
 80013ce:	4b53      	ldr	r3, [pc, #332]	@ (800151c <RFID+0x294>)
 80013d0:	220f      	movs	r2, #15
 80013d2:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d003      	beq.n	80013e2 <RFID+0x15a>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	f000 80fb 	beq.w	80015d6 <RFID+0x34e>
 80013e0:	e1ca      	b.n	8001778 <RFID+0x4f0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","Pls Press Down");
 80013e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <RFID+0x298>)
 80013e4:	4958      	ldr	r1, [pc, #352]	@ (8001548 <RFID+0x2c0>)
 80013e6:	4850      	ldr	r0, [pc, #320]	@ (8001528 <RFID+0x2a0>)
 80013e8:	f7fe fffe 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80013f4:	e0e5      	b.n	80015c2 <RFID+0x33a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80013f6:	200a      	movs	r0, #10
 80013f8:	f7ff f950 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80013fc:	4603      	mov	r3, r0
 80013fe:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001400:	4b46      	ldr	r3, [pc, #280]	@ (800151c <RFID+0x294>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <RFID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 8001408:	4847      	ldr	r0, [pc, #284]	@ (8001528 <RFID+0x2a0>)
 800140a:	f7fe ffdd 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001412:	f003 f8e1 	bl	80045d8 <HAL_Delay>
									return;
 8001416:	f000 bdf2 	b.w	8001ffe <RFID+0xd76>
								}
								if (key_pressed =='*')
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	2b2a      	cmp	r3, #42	@ 0x2a
 800141e:	d12e      	bne.n	800147e <RFID+0x1f6>
								{
									exitmenu = 15;
 8001420:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <RFID+0x294>)
 8001422:	220f      	movs	r2, #15
 8001424:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001426:	7d3b      	ldrb	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d801      	bhi.n	8001436 <RFID+0x1ae>
 8001432:	7d3b      	ldrb	r3, [r7, #20]
 8001434:	e000      	b.n	8001438 <RFID+0x1b0>
 8001436:	2300      	movs	r3, #0
 8001438:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d012      	beq.n	8001466 <RFID+0x1de>
 8001440:	2b03      	cmp	r3, #3
 8001442:	dc16      	bgt.n	8001472 <RFID+0x1ea>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <RFID+0x1c6>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d006      	beq.n	800145a <RFID+0x1d2>
 800144c:	e011      	b.n	8001472 <RFID+0x1ea>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 800144e:	4a3f      	ldr	r2, [pc, #252]	@ (800154c <RFID+0x2c4>)
 8001450:	493d      	ldr	r1, [pc, #244]	@ (8001548 <RFID+0x2c0>)
 8001452:	4835      	ldr	r0, [pc, #212]	@ (8001528 <RFID+0x2a0>)
 8001454:	f7fe ffc8 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001458:	e011      	b.n	800147e <RFID+0x1f6>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800145a:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <RFID+0x2c8>)
 800145c:	493a      	ldr	r1, [pc, #232]	@ (8001548 <RFID+0x2c0>)
 800145e:	4832      	ldr	r0, [pc, #200]	@ (8001528 <RFID+0x2a0>)
 8001460:	f7fe ffc2 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001464:	e00b      	b.n	800147e <RFID+0x1f6>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001466:	4a3b      	ldr	r2, [pc, #236]	@ (8001554 <RFID+0x2cc>)
 8001468:	4937      	ldr	r1, [pc, #220]	@ (8001548 <RFID+0x2c0>)
 800146a:	482f      	ldr	r0, [pc, #188]	@ (8001528 <RFID+0x2a0>)
 800146c:	f7fe ffbc 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001470:	e005      	b.n	800147e <RFID+0x1f6>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 8001472:	4a31      	ldr	r2, [pc, #196]	@ (8001538 <RFID+0x2b0>)
 8001474:	4934      	ldr	r1, [pc, #208]	@ (8001548 <RFID+0x2c0>)
 8001476:	482c      	ldr	r0, [pc, #176]	@ (8001528 <RFID+0x2a0>)
 8001478:	f7fe ffb6 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800147c:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	2b23      	cmp	r3, #35	@ 0x23
 8001482:	f040 809e 	bne.w	80015c2 <RFID+0x33a>
								{
									exitmenu = 15;
 8001486:	4b25      	ldr	r3, [pc, #148]	@ (800151c <RFID+0x294>)
 8001488:	220f      	movs	r2, #15
 800148a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800148c:	7dbb      	ldrb	r3, [r7, #22]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b2da      	uxtb	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 8001498:	7d3b      	ldrb	r3, [r7, #20]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d06e      	beq.n	800157c <RFID+0x2f4>
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f300 808c 	bgt.w	80015bc <RFID+0x334>
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <RFID+0x226>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d020      	beq.n	80014ee <RFID+0x266>
 80014ac:	e086      	b.n	80015bc <RFID+0x334>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 ff9d 	bl	80033f0 <CheckKey>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00e      	beq.n	80014da <RFID+0x252>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80014bc:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <RFID+0x2d0>)
 80014be:	4927      	ldr	r1, [pc, #156]	@ (800155c <RFID+0x2d4>)
 80014c0:	4819      	ldr	r0, [pc, #100]	@ (8001528 <RFID+0x2a0>)
 80014c2:	f7fe ff91 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ca:	f003 f885 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <RFID+0x2c4>)
 80014d0:	491d      	ldr	r1, [pc, #116]	@ (8001548 <RFID+0x2c0>)
 80014d2:	4815      	ldr	r0, [pc, #84]	@ (8001528 <RFID+0x2a0>)
 80014d4:	f7fe ff88 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80014d8:	e073      	b.n	80015c2 <RFID+0x33a>
											adduid(keyadd1);
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fe69 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014e2:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <RFID+0x2c4>)
 80014e4:	4918      	ldr	r1, [pc, #96]	@ (8001548 <RFID+0x2c0>)
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <RFID+0x2a0>)
 80014e8:	f7fe ff7e 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80014ec:	e069      	b.n	80015c2 <RFID+0x33a>
									case 2:
										if (CheckKey(keyadd1) != 0)
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 ff7d 	bl	80033f0 <CheckKey>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d035      	beq.n	8001568 <RFID+0x2e0>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 80014fc:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <RFID+0x2d8>)
 80014fe:	4919      	ldr	r1, [pc, #100]	@ (8001564 <RFID+0x2dc>)
 8001500:	4809      	ldr	r0, [pc, #36]	@ (8001528 <RFID+0x2a0>)
 8001502:	f7fe ff71 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150a:	f003 f865 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <RFID+0x2c8>)
 8001510:	490d      	ldr	r1, [pc, #52]	@ (8001548 <RFID+0x2c0>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <RFID+0x2a0>)
 8001514:	f7fe ff68 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001518:	e053      	b.n	80015c2 <RFID+0x33a>
 800151a:	bf00      	nop
 800151c:	20000020 	.word	0x20000020
 8001520:	0800dbd4 	.word	0x0800dbd4
 8001524:	0800dbe4 	.word	0x0800dbe4
 8001528:	200003d8 	.word	0x200003d8
 800152c:	0800dbf4 	.word	0x0800dbf4
 8001530:	0800dc00 	.word	0x0800dc00
 8001534:	0800dc10 	.word	0x0800dc10
 8001538:	0800dc20 	.word	0x0800dc20
 800153c:	0800dc28 	.word	0x0800dc28
 8001540:	0800dc34 	.word	0x0800dc34
 8001544:	0800dc44 	.word	0x0800dc44
 8001548:	0800dc54 	.word	0x0800dc54
 800154c:	0800dc64 	.word	0x0800dc64
 8001550:	0800dc78 	.word	0x0800dc78
 8001554:	0800dc8c 	.word	0x0800dc8c
 8001558:	0800dca0 	.word	0x0800dca0
 800155c:	0800dcb4 	.word	0x0800dcb4
 8001560:	0800dcc0 	.word	0x0800dcc0
 8001564:	0800dcd4 	.word	0x0800dcd4
											adduid(keyadd1);
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fe22 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001570:	4aa5      	ldr	r2, [pc, #660]	@ (8001808 <RFID+0x580>)
 8001572:	49a6      	ldr	r1, [pc, #664]	@ (800180c <RFID+0x584>)
 8001574:	48a6      	ldr	r0, [pc, #664]	@ (8001810 <RFID+0x588>)
 8001576:	f7fe ff37 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800157a:	e022      	b.n	80015c2 <RFID+0x33a>
									case 3:
										if (CheckKey(keyadd1) != 0)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ff36 	bl	80033f0 <CheckKey>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00e      	beq.n	80015a8 <RFID+0x320>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 800158a:	4aa2      	ldr	r2, [pc, #648]	@ (8001814 <RFID+0x58c>)
 800158c:	49a2      	ldr	r1, [pc, #648]	@ (8001818 <RFID+0x590>)
 800158e:	48a0      	ldr	r0, [pc, #640]	@ (8001810 <RFID+0x588>)
 8001590:	f7fe ff2a 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f003 f81e 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 800159c:	4a9f      	ldr	r2, [pc, #636]	@ (800181c <RFID+0x594>)
 800159e:	499b      	ldr	r1, [pc, #620]	@ (800180c <RFID+0x584>)
 80015a0:	489b      	ldr	r0, [pc, #620]	@ (8001810 <RFID+0x588>)
 80015a2:	f7fe ff21 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80015a6:	e00c      	b.n	80015c2 <RFID+0x33a>
											adduid(keyadd1);
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fe02 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015b0:	4a9a      	ldr	r2, [pc, #616]	@ (800181c <RFID+0x594>)
 80015b2:	4996      	ldr	r1, [pc, #600]	@ (800180c <RFID+0x584>)
 80015b4:	4896      	ldr	r0, [pc, #600]	@ (8001810 <RFID+0x588>)
 80015b6:	f7fe ff17 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80015ba:	e002      	b.n	80015c2 <RFID+0x33a>
									default:
										back11 = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	74fb      	strb	r3, [r7, #19]
										break;
 80015c0:	bf00      	nop
							while (back11 == 1)
 80015c2:	7cfb      	ldrb	r3, [r7, #19]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f43f af16 	beq.w	80013f6 <RFID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80015ca:	4a95      	ldr	r2, [pc, #596]	@ (8001820 <RFID+0x598>)
 80015cc:	4995      	ldr	r1, [pc, #596]	@ (8001824 <RFID+0x59c>)
 80015ce:	4890      	ldr	r0, [pc, #576]	@ (8001810 <RFID+0x588>)
 80015d0:	f7fe ff0a 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80015d4:	e0d3      	b.n	800177e <RFID+0x4f6>
						case 2:
							CLCD_I2C_Display(&LCD1,"MODE: ADD USER","Pls Press Down");
 80015d6:	4a94      	ldr	r2, [pc, #592]	@ (8001828 <RFID+0x5a0>)
 80015d8:	4994      	ldr	r1, [pc, #592]	@ (800182c <RFID+0x5a4>)
 80015da:	488d      	ldr	r0, [pc, #564]	@ (8001810 <RFID+0x588>)
 80015dc:	f7fe ff04 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80015e8:	e0bc      	b.n	8001764 <RFID+0x4dc>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f7ff f856 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80015f0:	4603      	mov	r3, r0
 80015f2:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80015f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001830 <RFID+0x5a8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <RFID+0x386>
								{
									CLCD_I2C_Clear(&LCD1);
 80015fc:	4884      	ldr	r0, [pc, #528]	@ (8001810 <RFID+0x588>)
 80015fe:	f7fe fee3 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001602:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001606:	f002 ffe7 	bl	80045d8 <HAL_Delay>
									return;
 800160a:	f000 bcf8 	b.w	8001ffe <RFID+0xd76>
								}
								if (key_pressed =='*')
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	2b2a      	cmp	r3, #42	@ 0x2a
 8001612:	d12e      	bne.n	8001672 <RFID+0x3ea>
								{
									exitmenu = 15;
 8001614:	4b86      	ldr	r3, [pc, #536]	@ (8001830 <RFID+0x5a8>)
 8001616:	220f      	movs	r2, #15
 8001618:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800161a:	7cbb      	ldrb	r3, [r7, #18]
 800161c:	3301      	adds	r3, #1
 800161e:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001620:	7cbb      	ldrb	r3, [r7, #18]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d801      	bhi.n	800162a <RFID+0x3a2>
 8001626:	7cbb      	ldrb	r3, [r7, #18]
 8001628:	e000      	b.n	800162c <RFID+0x3a4>
 800162a:	2300      	movs	r3, #0
 800162c:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 800162e:	7cbb      	ldrb	r3, [r7, #18]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d012      	beq.n	800165a <RFID+0x3d2>
 8001634:	2b03      	cmp	r3, #3
 8001636:	dc16      	bgt.n	8001666 <RFID+0x3de>
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <RFID+0x3ba>
 800163c:	2b02      	cmp	r3, #2
 800163e:	d006      	beq.n	800164e <RFID+0x3c6>
 8001640:	e011      	b.n	8001666 <RFID+0x3de>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001642:	4a7c      	ldr	r2, [pc, #496]	@ (8001834 <RFID+0x5ac>)
 8001644:	4979      	ldr	r1, [pc, #484]	@ (800182c <RFID+0x5a4>)
 8001646:	4872      	ldr	r0, [pc, #456]	@ (8001810 <RFID+0x588>)
 8001648:	f7fe fece 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800164c:	e011      	b.n	8001672 <RFID+0x3ea>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 800164e:	4a7a      	ldr	r2, [pc, #488]	@ (8001838 <RFID+0x5b0>)
 8001650:	4976      	ldr	r1, [pc, #472]	@ (800182c <RFID+0x5a4>)
 8001652:	486f      	ldr	r0, [pc, #444]	@ (8001810 <RFID+0x588>)
 8001654:	f7fe fec8 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001658:	e00b      	b.n	8001672 <RFID+0x3ea>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800165a:	4a78      	ldr	r2, [pc, #480]	@ (800183c <RFID+0x5b4>)
 800165c:	4973      	ldr	r1, [pc, #460]	@ (800182c <RFID+0x5a4>)
 800165e:	486c      	ldr	r0, [pc, #432]	@ (8001810 <RFID+0x588>)
 8001660:	f7fe fec2 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001664:	e005      	b.n	8001672 <RFID+0x3ea>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 8001666:	4a76      	ldr	r2, [pc, #472]	@ (8001840 <RFID+0x5b8>)
 8001668:	4970      	ldr	r1, [pc, #448]	@ (800182c <RFID+0x5a4>)
 800166a:	4869      	ldr	r0, [pc, #420]	@ (8001810 <RFID+0x588>)
 800166c:	f7fe febc 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001670:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	2b23      	cmp	r3, #35	@ 0x23
 8001676:	d175      	bne.n	8001764 <RFID+0x4dc>
								{
									exitmenu = 15;
 8001678:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <RFID+0x5a8>)
 800167a:	220f      	movs	r2, #15
 800167c:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800167e:	7dbb      	ldrb	r3, [r7, #22]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	b2da      	uxtb	r2, r3
 8001684:	7cbb      	ldrb	r3, [r7, #18]
 8001686:	4413      	add	r3, r2
 8001688:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 800168a:	7cbb      	ldrb	r3, [r7, #18]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d046      	beq.n	800171e <RFID+0x496>
 8001690:	2b03      	cmp	r3, #3
 8001692:	dc64      	bgt.n	800175e <RFID+0x4d6>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d002      	beq.n	800169e <RFID+0x416>
 8001698:	2b02      	cmp	r3, #2
 800169a:	d020      	beq.n	80016de <RFID+0x456>
 800169c:	e05f      	b.n	800175e <RFID+0x4d6>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 800169e:	78bb      	ldrb	r3, [r7, #2]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 fea5 	bl	80033f0 <CheckKey>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00e      	beq.n	80016ca <RFID+0x442>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80016ac:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <RFID+0x5bc>)
 80016ae:	4966      	ldr	r1, [pc, #408]	@ (8001848 <RFID+0x5c0>)
 80016b0:	4857      	ldr	r0, [pc, #348]	@ (8001810 <RFID+0x588>)
 80016b2:	f7fe fe99 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ba:	f002 ff8d 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016be:	4a5d      	ldr	r2, [pc, #372]	@ (8001834 <RFID+0x5ac>)
 80016c0:	495a      	ldr	r1, [pc, #360]	@ (800182c <RFID+0x5a4>)
 80016c2:	4853      	ldr	r0, [pc, #332]	@ (8001810 <RFID+0x588>)
 80016c4:	f7fe fe90 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80016c8:	e04c      	b.n	8001764 <RFID+0x4dc>
											adduid(keyadd2);
 80016ca:	78bb      	ldrb	r3, [r7, #2]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fd71 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016d2:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <RFID+0x5ac>)
 80016d4:	4955      	ldr	r1, [pc, #340]	@ (800182c <RFID+0x5a4>)
 80016d6:	484e      	ldr	r0, [pc, #312]	@ (8001810 <RFID+0x588>)
 80016d8:	f7fe fe86 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80016dc:	e042      	b.n	8001764 <RFID+0x4dc>
									case 2:
										if (CheckKey(keyadd2) != 0)
 80016de:	78bb      	ldrb	r3, [r7, #2]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fe85 	bl	80033f0 <CheckKey>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <RFID+0x482>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 80016ec:	4a57      	ldr	r2, [pc, #348]	@ (800184c <RFID+0x5c4>)
 80016ee:	4958      	ldr	r1, [pc, #352]	@ (8001850 <RFID+0x5c8>)
 80016f0:	4847      	ldr	r0, [pc, #284]	@ (8001810 <RFID+0x588>)
 80016f2:	f7fe fe79 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fa:	f002 ff6d 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 80016fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001838 <RFID+0x5b0>)
 8001700:	494a      	ldr	r1, [pc, #296]	@ (800182c <RFID+0x5a4>)
 8001702:	4843      	ldr	r0, [pc, #268]	@ (8001810 <RFID+0x588>)
 8001704:	f7fe fe70 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001708:	e02c      	b.n	8001764 <RFID+0x4dc>
											adduid(keyadd2);
 800170a:	78bb      	ldrb	r3, [r7, #2]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fd51 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001712:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <RFID+0x5b0>)
 8001714:	4945      	ldr	r1, [pc, #276]	@ (800182c <RFID+0x5a4>)
 8001716:	483e      	ldr	r0, [pc, #248]	@ (8001810 <RFID+0x588>)
 8001718:	f7fe fe66 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800171c:	e022      	b.n	8001764 <RFID+0x4dc>
									case 3:
										if (CheckKey(keyadd2) != 0)
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fe65 	bl	80033f0 <CheckKey>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00e      	beq.n	800174a <RFID+0x4c2>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 800172c:	4a39      	ldr	r2, [pc, #228]	@ (8001814 <RFID+0x58c>)
 800172e:	4949      	ldr	r1, [pc, #292]	@ (8001854 <RFID+0x5cc>)
 8001730:	4837      	ldr	r0, [pc, #220]	@ (8001810 <RFID+0x588>)
 8001732:	f7fe fe59 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800173a:	f002 ff4d 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800173e:	4a3f      	ldr	r2, [pc, #252]	@ (800183c <RFID+0x5b4>)
 8001740:	493a      	ldr	r1, [pc, #232]	@ (800182c <RFID+0x5a4>)
 8001742:	4833      	ldr	r0, [pc, #204]	@ (8001810 <RFID+0x588>)
 8001744:	f7fe fe50 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001748:	e00c      	b.n	8001764 <RFID+0x4dc>
											adduid(keyadd2);
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fd31 	bl	80031b4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001752:	4a3a      	ldr	r2, [pc, #232]	@ (800183c <RFID+0x5b4>)
 8001754:	4935      	ldr	r1, [pc, #212]	@ (800182c <RFID+0x5a4>)
 8001756:	482e      	ldr	r0, [pc, #184]	@ (8001810 <RFID+0x588>)
 8001758:	f7fe fe46 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800175c:	e002      	b.n	8001764 <RFID+0x4dc>
									default:
										back12 = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	747b      	strb	r3, [r7, #17]
										break;
 8001762:	bf00      	nop
							while (back12 == 1)
 8001764:	7c7b      	ldrb	r3, [r7, #17]
 8001766:	2b01      	cmp	r3, #1
 8001768:	f43f af3f 	beq.w	80015ea <RFID+0x362>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800176c:	4a3a      	ldr	r2, [pc, #232]	@ (8001858 <RFID+0x5d0>)
 800176e:	492d      	ldr	r1, [pc, #180]	@ (8001824 <RFID+0x59c>)
 8001770:	4827      	ldr	r0, [pc, #156]	@ (8001810 <RFID+0x588>)
 8001772:	f7fe fe39 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001776:	e002      	b.n	800177e <RFID+0x4f6>
						default:
							back = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	757b      	strb	r3, [r7, #21]
							break;
 800177c:	bf00      	nop
				while (back == 1)
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f43f ade6 	beq.w	8001352 <RFID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001786:	4a35      	ldr	r2, [pc, #212]	@ (800185c <RFID+0x5d4>)
 8001788:	4935      	ldr	r1, [pc, #212]	@ (8001860 <RFID+0x5d8>)
 800178a:	4821      	ldr	r0, [pc, #132]	@ (8001810 <RFID+0x588>)
 800178c:	f7fe fe2c 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001790:	f000 bc29 	b.w	8001fe6 <RFID+0xd5e>
			case 1:
				CLCD_I2C_Display(&LCD1,"CARD: REMOVE","Pls Press Down");
 8001794:	4a24      	ldr	r2, [pc, #144]	@ (8001828 <RFID+0x5a0>)
 8001796:	4933      	ldr	r1, [pc, #204]	@ (8001864 <RFID+0x5dc>)
 8001798:	481d      	ldr	r0, [pc, #116]	@ (8001810 <RFID+0x588>)
 800179a:	f7fe fe25 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 800179e:	23ff      	movs	r3, #255	@ 0xff
 80017a0:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80017a6:	f000 bc08 	b.w	8001fba <RFID+0xd32>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80017aa:	200a      	movs	r0, #10
 80017ac:	f7fe ff76 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80017b0:	4603      	mov	r3, r0
 80017b2:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <RFID+0x5a8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d108      	bne.n	80017ce <RFID+0x546>
					{
						CLCD_I2C_Clear(&LCD1);
 80017bc:	4814      	ldr	r0, [pc, #80]	@ (8001810 <RFID+0x588>)
 80017be:	f7fe fe03 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80017c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c6:	f002 ff07 	bl	80045d8 <HAL_Delay>
						return;
 80017ca:	f000 bc18 	b.w	8001ffe <RFID+0xd76>
					}
					if (key_pressed =='*')
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80017d2:	d157      	bne.n	8001884 <RFID+0x5fc>
					{
						exitmenu = 15;
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <RFID+0x5a8>)
 80017d6:	220f      	movs	r2, #15
 80017d8:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80017da:	7c3b      	ldrb	r3, [r7, #16]
 80017dc:	3301      	adds	r3, #1
 80017de:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d801      	bhi.n	80017ea <RFID+0x562>
 80017e6:	7c3b      	ldrb	r3, [r7, #16]
 80017e8:	e000      	b.n	80017ec <RFID+0x564>
 80017ea:	2300      	movs	r3, #0
 80017ec:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 80017ee:	7c3b      	ldrb	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <RFID+0x572>
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d039      	beq.n	800186c <RFID+0x5e4>
 80017f8:	e03e      	b.n	8001878 <RFID+0x5f0>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 80017fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <RFID+0x5e0>)
 80017fc:	4919      	ldr	r1, [pc, #100]	@ (8001864 <RFID+0x5dc>)
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <RFID+0x588>)
 8001800:	f7fe fdf2 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001804:	e03e      	b.n	8001884 <RFID+0x5fc>
 8001806:	bf00      	nop
 8001808:	0800dc78 	.word	0x0800dc78
 800180c:	0800dc54 	.word	0x0800dc54
 8001810:	200003d8 	.word	0x200003d8
 8001814:	0800dce0 	.word	0x0800dce0
 8001818:	0800dcf4 	.word	0x0800dcf4
 800181c:	0800dc8c 	.word	0x0800dc8c
 8001820:	0800dc34 	.word	0x0800dc34
 8001824:	0800dc28 	.word	0x0800dc28
 8001828:	0800dbd4 	.word	0x0800dbd4
 800182c:	0800dd00 	.word	0x0800dd00
 8001830:	20000020 	.word	0x20000020
 8001834:	0800dd10 	.word	0x0800dd10
 8001838:	0800dd20 	.word	0x0800dd20
 800183c:	0800dd30 	.word	0x0800dd30
 8001840:	0800dc20 	.word	0x0800dc20
 8001844:	0800dca0 	.word	0x0800dca0
 8001848:	0800dd40 	.word	0x0800dd40
 800184c:	0800dcc0 	.word	0x0800dcc0
 8001850:	0800dd4c 	.word	0x0800dd4c
 8001854:	0800dd58 	.word	0x0800dd58
 8001858:	0800dc44 	.word	0x0800dc44
 800185c:	0800dbf4 	.word	0x0800dbf4
 8001860:	0800dbe4 	.word	0x0800dbe4
 8001864:	0800dd64 	.word	0x0800dd64
 8001868:	0800dd74 	.word	0x0800dd74
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 800186c:	4a9a      	ldr	r2, [pc, #616]	@ (8001ad8 <RFID+0x850>)
 800186e:	499b      	ldr	r1, [pc, #620]	@ (8001adc <RFID+0x854>)
 8001870:	489b      	ldr	r0, [pc, #620]	@ (8001ae0 <RFID+0x858>)
 8001872:	f7fe fdb9 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001876:	e005      	b.n	8001884 <RFID+0x5fc>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001878:	4a9a      	ldr	r2, [pc, #616]	@ (8001ae4 <RFID+0x85c>)
 800187a:	4998      	ldr	r1, [pc, #608]	@ (8001adc <RFID+0x854>)
 800187c:	4898      	ldr	r0, [pc, #608]	@ (8001ae0 <RFID+0x858>)
 800187e:	f7fe fdb3 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001882:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	2b23      	cmp	r3, #35	@ 0x23
 8001888:	f040 8397 	bne.w	8001fba <RFID+0xd32>
					{
						CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","Pls Press Down");
 800188c:	4a96      	ldr	r2, [pc, #600]	@ (8001ae8 <RFID+0x860>)
 800188e:	4997      	ldr	r1, [pc, #604]	@ (8001aec <RFID+0x864>)
 8001890:	4893      	ldr	r0, [pc, #588]	@ (8001ae0 <RFID+0x858>)
 8001892:	f7fe fda9 	bl	80003e8 <CLCD_I2C_Display>
						exitmenu = 15;
 8001896:	4b96      	ldr	r3, [pc, #600]	@ (8001af0 <RFID+0x868>)
 8001898:	220f      	movs	r2, #15
 800189a:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 800189c:	7c3b      	ldrb	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <RFID+0x622>
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	f000 837e 	beq.w	8001fa4 <RFID+0xd1c>
 80018a8:	e384      	b.n	8001fb4 <RFID+0xd2c>
						{
						case 0:
							uint8_t statusrm1 = -1;
 80018aa:	23ff      	movs	r3, #255	@ 0xff
 80018ac:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 80018b2:	e36d      	b.n	8001f90 <RFID+0xd08>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7fe fef1 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80018ba:	4603      	mov	r3, r0
 80018bc:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80018be:	4b8c      	ldr	r3, [pc, #560]	@ (8001af0 <RFID+0x868>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <RFID+0x64e>
								{
									CLCD_I2C_Clear(&LCD1);
 80018c6:	4886      	ldr	r0, [pc, #536]	@ (8001ae0 <RFID+0x858>)
 80018c8:	f7fe fd7e 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80018cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d0:	f002 fe82 	bl	80045d8 <HAL_Delay>
									return;
 80018d4:	e393      	b.n	8001ffe <RFID+0xd76>
								}
								if (key_pressed =='*')
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80018da:	d121      	bne.n	8001920 <RFID+0x698>
								{
									statusrm1++;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	3301      	adds	r3, #1
 80018e0:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d801      	bhi.n	80018ec <RFID+0x664>
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	e000      	b.n	80018ee <RFID+0x666>
 80018ec:	2300      	movs	r3, #0
 80018ee:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <RFID+0x674>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d006      	beq.n	8001908 <RFID+0x680>
 80018fa:	e00b      	b.n	8001914 <RFID+0x68c>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 80018fc:	4a7d      	ldr	r2, [pc, #500]	@ (8001af4 <RFID+0x86c>)
 80018fe:	497b      	ldr	r1, [pc, #492]	@ (8001aec <RFID+0x864>)
 8001900:	4877      	ldr	r0, [pc, #476]	@ (8001ae0 <RFID+0x858>)
 8001902:	f7fe fd71 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001906:	e00b      	b.n	8001920 <RFID+0x698>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001908:	4a7b      	ldr	r2, [pc, #492]	@ (8001af8 <RFID+0x870>)
 800190a:	4978      	ldr	r1, [pc, #480]	@ (8001aec <RFID+0x864>)
 800190c:	4874      	ldr	r0, [pc, #464]	@ (8001ae0 <RFID+0x858>)
 800190e:	f7fe fd6b 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001912:	e005      	b.n	8001920 <RFID+0x698>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001914:	4a73      	ldr	r2, [pc, #460]	@ (8001ae4 <RFID+0x85c>)
 8001916:	4975      	ldr	r1, [pc, #468]	@ (8001aec <RFID+0x864>)
 8001918:	4871      	ldr	r0, [pc, #452]	@ (8001ae0 <RFID+0x858>)
 800191a:	f7fe fd65 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800191e:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	2b23      	cmp	r3, #35	@ 0x23
 8001924:	f040 8334 	bne.w	8001f90 <RFID+0xd08>
								{
									exitmenu = 15;
 8001928:	4b71      	ldr	r3, [pc, #452]	@ (8001af0 <RFID+0x868>)
 800192a:	220f      	movs	r2, #15
 800192c:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <RFID+0x6b4>
 8001934:	2b01      	cmp	r3, #1
 8001936:	f000 82cc 	beq.w	8001ed2 <RFID+0xc4a>
 800193a:	e326      	b.n	8001f8a <RFID+0xd02>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","Pls Press Down");
 800193c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae8 <RFID+0x860>)
 800193e:	496f      	ldr	r1, [pc, #444]	@ (8001afc <RFID+0x874>)
 8001940:	4867      	ldr	r0, [pc, #412]	@ (8001ae0 <RFID+0x858>)
 8001942:	f7fe fd51 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 800194e:	e2b6      	b.n	8001ebe <RFID+0xc36>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f7fe fea3 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001956:	4603      	mov	r3, r0
 8001958:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 800195a:	4b65      	ldr	r3, [pc, #404]	@ (8001af0 <RFID+0x868>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d107      	bne.n	8001972 <RFID+0x6ea>
											{
												CLCD_I2C_Clear(&LCD1);
 8001962:	485f      	ldr	r0, [pc, #380]	@ (8001ae0 <RFID+0x858>)
 8001964:	f7fe fd30 	bl	80003c8 <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800196c:	f002 fe34 	bl	80045d8 <HAL_Delay>
												return;
 8001970:	e345      	b.n	8001ffe <RFID+0xd76>
											}
											if (key_pressed =='*')
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	2b2a      	cmp	r3, #42	@ 0x2a
 8001976:	d124      	bne.n	80019c2 <RFID+0x73a>
											{
												exitmenu = 15;
 8001978:	4b5d      	ldr	r3, [pc, #372]	@ (8001af0 <RFID+0x868>)
 800197a:	220f      	movs	r2, #15
 800197c:	701a      	strb	r2, [r3, #0]
												statusadd++;
 800197e:	7b3b      	ldrb	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001984:	7b3b      	ldrb	r3, [r7, #12]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d801      	bhi.n	800198e <RFID+0x706>
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	e000      	b.n	8001990 <RFID+0x708>
 800198e:	2300      	movs	r3, #0
 8001990:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001992:	7b3b      	ldrb	r3, [r7, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d002      	beq.n	800199e <RFID+0x716>
 8001998:	2b02      	cmp	r3, #2
 800199a:	d006      	beq.n	80019aa <RFID+0x722>
 800199c:	e00b      	b.n	80019b6 <RFID+0x72e>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 800199e:	4a58      	ldr	r2, [pc, #352]	@ (8001b00 <RFID+0x878>)
 80019a0:	4956      	ldr	r1, [pc, #344]	@ (8001afc <RFID+0x874>)
 80019a2:	484f      	ldr	r0, [pc, #316]	@ (8001ae0 <RFID+0x858>)
 80019a4:	f7fe fd20 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019a8:	e00b      	b.n	80019c2 <RFID+0x73a>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 80019aa:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <RFID+0x87c>)
 80019ac:	4953      	ldr	r1, [pc, #332]	@ (8001afc <RFID+0x874>)
 80019ae:	484c      	ldr	r0, [pc, #304]	@ (8001ae0 <RFID+0x858>)
 80019b0:	f7fe fd1a 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019b4:	e005      	b.n	80019c2 <RFID+0x73a>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 80019b6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <RFID+0x85c>)
 80019b8:	4950      	ldr	r1, [pc, #320]	@ (8001afc <RFID+0x874>)
 80019ba:	4849      	ldr	r0, [pc, #292]	@ (8001ae0 <RFID+0x858>)
 80019bc:	f7fe fd14 	bl	80003e8 <CLCD_I2C_Display>
 80019c0:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	2b23      	cmp	r3, #35	@ 0x23
 80019c6:	f040 827a 	bne.w	8001ebe <RFID+0xc36>
											{
												exitmenu = 15;
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <RFID+0x868>)
 80019cc:	220f      	movs	r2, #15
 80019ce:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 80019d0:	7b3b      	ldrb	r3, [r7, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d003      	beq.n	80019de <RFID+0x756>
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	f000 8141 	beq.w	8001c5e <RFID+0x9d6>
 80019dc:	e26c      	b.n	8001eb8 <RFID+0xc30>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","Pls Press Down");
 80019de:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <RFID+0x860>)
 80019e0:	4949      	ldr	r1, [pc, #292]	@ (8001b08 <RFID+0x880>)
 80019e2:	483f      	ldr	r0, [pc, #252]	@ (8001ae0 <RFID+0x858>)
 80019e4:	f7fe fd00 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 80019f0:	e12b      	b.n	8001c4a <RFID+0x9c2>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 80019f2:	200a      	movs	r0, #10
 80019f4:	f7fe fe52 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80019f8:	4603      	mov	r3, r0
 80019fa:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 80019fc:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <RFID+0x868>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <RFID+0x78c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001a04:	4836      	ldr	r0, [pc, #216]	@ (8001ae0 <RFID+0x858>)
 8001a06:	f7fe fcdf 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0e:	f002 fde3 	bl	80045d8 <HAL_Delay>
															return;
 8001a12:	e2f4      	b.n	8001ffe <RFID+0xd76>
														}
														if (key_pressed =='*')
 8001a14:	797b      	ldrb	r3, [r7, #5]
 8001a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a18:	d12e      	bne.n	8001a78 <RFID+0x7f0>
														{
															exitmenu = 15;
 8001a1a:	4b35      	ldr	r3, [pc, #212]	@ (8001af0 <RFID+0x868>)
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001a20:	7abb      	ldrb	r3, [r7, #10]
 8001a22:	3301      	adds	r3, #1
 8001a24:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001a26:	7abb      	ldrb	r3, [r7, #10]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d801      	bhi.n	8001a30 <RFID+0x7a8>
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	e000      	b.n	8001a32 <RFID+0x7aa>
 8001a30:	2300      	movs	r3, #0
 8001a32:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001a34:	7abb      	ldrb	r3, [r7, #10]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d012      	beq.n	8001a60 <RFID+0x7d8>
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	dc16      	bgt.n	8001a6c <RFID+0x7e4>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <RFID+0x7c0>
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d006      	beq.n	8001a54 <RFID+0x7cc>
 8001a46:	e011      	b.n	8001a6c <RFID+0x7e4>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001a48:	4a30      	ldr	r2, [pc, #192]	@ (8001b0c <RFID+0x884>)
 8001a4a:	492f      	ldr	r1, [pc, #188]	@ (8001b08 <RFID+0x880>)
 8001a4c:	4824      	ldr	r0, [pc, #144]	@ (8001ae0 <RFID+0x858>)
 8001a4e:	f7fe fccb 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a52:	e011      	b.n	8001a78 <RFID+0x7f0>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001a54:	4a2e      	ldr	r2, [pc, #184]	@ (8001b10 <RFID+0x888>)
 8001a56:	492c      	ldr	r1, [pc, #176]	@ (8001b08 <RFID+0x880>)
 8001a58:	4821      	ldr	r0, [pc, #132]	@ (8001ae0 <RFID+0x858>)
 8001a5a:	f7fe fcc5 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a5e:	e00b      	b.n	8001a78 <RFID+0x7f0>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001a60:	4a2c      	ldr	r2, [pc, #176]	@ (8001b14 <RFID+0x88c>)
 8001a62:	4929      	ldr	r1, [pc, #164]	@ (8001b08 <RFID+0x880>)
 8001a64:	481e      	ldr	r0, [pc, #120]	@ (8001ae0 <RFID+0x858>)
 8001a66:	f7fe fcbf 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a6a:	e005      	b.n	8001a78 <RFID+0x7f0>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <RFID+0x85c>)
 8001a6e:	4926      	ldr	r1, [pc, #152]	@ (8001b08 <RFID+0x880>)
 8001a70:	481b      	ldr	r0, [pc, #108]	@ (8001ae0 <RFID+0x858>)
 8001a72:	f7fe fcb9 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a76:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	2b23      	cmp	r3, #35	@ 0x23
 8001a7c:	f040 80e5 	bne.w	8001c4a <RFID+0x9c2>
														{
															exitmenu = 15;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <RFID+0x868>)
 8001a82:	220f      	movs	r2, #15
 8001a84:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001a86:	7b3b      	ldrb	r3, [r7, #12]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	4413      	add	r3, r2
 8001a90:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001a92:	7abb      	ldrb	r3, [r7, #10]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	f000 809d 	beq.w	8001bd4 <RFID+0x94c>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	f300 80d2 	bgt.w	8001c44 <RFID+0x9bc>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d002      	beq.n	8001aaa <RFID+0x822>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d05d      	beq.n	8001b64 <RFID+0x8dc>
 8001aa8:	e0cc      	b.n	8001c44 <RFID+0x9bc>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fc9f 	bl	80033f0 <CheckKey>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d133      	bne.n	8001b20 <RFID+0x898>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "Do Not Exist");
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <RFID+0x890>)
 8001aba:	4918      	ldr	r1, [pc, #96]	@ (8001b1c <RFID+0x894>)
 8001abc:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <RFID+0x858>)
 8001abe:	f7fe fc93 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ac6:	f002 fd87 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001aca:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <RFID+0x884>)
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <RFID+0x880>)
 8001ace:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <RFID+0x858>)
 8001ad0:	f7fe fc8a 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001ad4:	e0b9      	b.n	8001c4a <RFID+0x9c2>
 8001ad6:	bf00      	nop
 8001ad8:	0800dd88 	.word	0x0800dd88
 8001adc:	0800dd64 	.word	0x0800dd64
 8001ae0:	200003d8 	.word	0x200003d8
 8001ae4:	0800dc20 	.word	0x0800dc20
 8001ae8:	0800dbd4 	.word	0x0800dbd4
 8001aec:	0800dd98 	.word	0x0800dd98
 8001af0:	20000020 	.word	0x20000020
 8001af4:	0800dda8 	.word	0x0800dda8
 8001af8:	0800ddb8 	.word	0x0800ddb8
 8001afc:	0800ddc8 	.word	0x0800ddc8
 8001b00:	0800ddd8 	.word	0x0800ddd8
 8001b04:	0800ddec 	.word	0x0800ddec
 8001b08:	0800ddfc 	.word	0x0800ddfc
 8001b0c:	0800de0c 	.word	0x0800de0c
 8001b10:	0800de1c 	.word	0x0800de1c
 8001b14:	0800de2c 	.word	0x0800de2c
 8001b18:	0800de3c 	.word	0x0800de3c
 8001b1c:	0800dcb4 	.word	0x0800dcb4
																	removeuid(CheckKey(keyadd1));
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fc64 	bl	80033f0 <CheckKey>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fc8e 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001b30:	4aab      	ldr	r2, [pc, #684]	@ (8001de0 <RFID+0xb58>)
 8001b32:	49ac      	ldr	r1, [pc, #688]	@ (8001de4 <RFID+0xb5c>)
 8001b34:	48ac      	ldr	r0, [pc, #688]	@ (8001de8 <RFID+0xb60>)
 8001b36:	f7fe fc57 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b3e:	f002 fd4b 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001b42:	f001 fb05 	bl	8003150 <checkcountUID>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <RFID+0x8d0>
																		startadd();
 8001b4c:	f001 fc8c 	bl	8003468 <startadd>
																		exitmenu = 0;
 8001b50:	4ba6      	ldr	r3, [pc, #664]	@ (8001dec <RFID+0xb64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
																break;
 8001b56:	e078      	b.n	8001c4a <RFID+0x9c2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001b58:	4aa5      	ldr	r2, [pc, #660]	@ (8001df0 <RFID+0xb68>)
 8001b5a:	49a6      	ldr	r1, [pc, #664]	@ (8001df4 <RFID+0xb6c>)
 8001b5c:	48a2      	ldr	r0, [pc, #648]	@ (8001de8 <RFID+0xb60>)
 8001b5e:	f7fe fc43 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001b62:	e072      	b.n	8001c4a <RFID+0x9c2>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fc42 	bl	80033f0 <CheckKey>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <RFID+0x908>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "Do Not Exist");
 8001b72:	4aa1      	ldr	r2, [pc, #644]	@ (8001df8 <RFID+0xb70>)
 8001b74:	49a1      	ldr	r1, [pc, #644]	@ (8001dfc <RFID+0xb74>)
 8001b76:	489c      	ldr	r0, [pc, #624]	@ (8001de8 <RFID+0xb60>)
 8001b78:	f7fe fc36 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b80:	f002 fd2a 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001b84:	4a9e      	ldr	r2, [pc, #632]	@ (8001e00 <RFID+0xb78>)
 8001b86:	499b      	ldr	r1, [pc, #620]	@ (8001df4 <RFID+0xb6c>)
 8001b88:	4897      	ldr	r0, [pc, #604]	@ (8001de8 <RFID+0xb60>)
 8001b8a:	f7fe fc2d 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001b8e:	e05c      	b.n	8001c4a <RFID+0x9c2>
																	removeuid(CheckKey(keyadd1));
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fc2c 	bl	80033f0 <CheckKey>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fc56 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001ba0:	4a8f      	ldr	r2, [pc, #572]	@ (8001de0 <RFID+0xb58>)
 8001ba2:	4998      	ldr	r1, [pc, #608]	@ (8001e04 <RFID+0xb7c>)
 8001ba4:	4890      	ldr	r0, [pc, #576]	@ (8001de8 <RFID+0xb60>)
 8001ba6:	f7fe fc1f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001baa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bae:	f002 fd13 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001bb2:	f001 facd 	bl	8003150 <checkcountUID>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <RFID+0x940>
																		startadd();
 8001bbc:	f001 fc54 	bl	8003468 <startadd>
																		exitmenu = 0;
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8001dec <RFID+0xb64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
																break;
 8001bc6:	e040      	b.n	8001c4a <RFID+0x9c2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001bc8:	4a8d      	ldr	r2, [pc, #564]	@ (8001e00 <RFID+0xb78>)
 8001bca:	498a      	ldr	r1, [pc, #552]	@ (8001df4 <RFID+0xb6c>)
 8001bcc:	4886      	ldr	r0, [pc, #536]	@ (8001de8 <RFID+0xb60>)
 8001bce:	f7fe fc0b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001bd2:	e03a      	b.n	8001c4a <RFID+0x9c2>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fc0a 	bl	80033f0 <CheckKey>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <RFID+0x978>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "Do Not Exist");
 8001be2:	4a85      	ldr	r2, [pc, #532]	@ (8001df8 <RFID+0xb70>)
 8001be4:	4988      	ldr	r1, [pc, #544]	@ (8001e08 <RFID+0xb80>)
 8001be6:	4880      	ldr	r0, [pc, #512]	@ (8001de8 <RFID+0xb60>)
 8001be8:	f7fe fbfe 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001bec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bf0:	f002 fcf2 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001bf4:	4a85      	ldr	r2, [pc, #532]	@ (8001e0c <RFID+0xb84>)
 8001bf6:	497f      	ldr	r1, [pc, #508]	@ (8001df4 <RFID+0xb6c>)
 8001bf8:	487b      	ldr	r0, [pc, #492]	@ (8001de8 <RFID+0xb60>)
 8001bfa:	f7fe fbf5 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001bfe:	e024      	b.n	8001c4a <RFID+0x9c2>
																	removeuid(CheckKey(keyadd1));
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fbf4 	bl	80033f0 <CheckKey>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fc1e 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001c10:	4a73      	ldr	r2, [pc, #460]	@ (8001de0 <RFID+0xb58>)
 8001c12:	497f      	ldr	r1, [pc, #508]	@ (8001e10 <RFID+0xb88>)
 8001c14:	4874      	ldr	r0, [pc, #464]	@ (8001de8 <RFID+0xb60>)
 8001c16:	f7fe fbe7 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1e:	f002 fcdb 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001c22:	f001 fa95 	bl	8003150 <checkcountUID>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <RFID+0x9b0>
																		startadd();
 8001c2c:	f001 fc1c 	bl	8003468 <startadd>
																		exitmenu = 0;
 8001c30:	4b6e      	ldr	r3, [pc, #440]	@ (8001dec <RFID+0xb64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
																break;
 8001c36:	e008      	b.n	8001c4a <RFID+0x9c2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c38:	4a74      	ldr	r2, [pc, #464]	@ (8001e0c <RFID+0xb84>)
 8001c3a:	496e      	ldr	r1, [pc, #440]	@ (8001df4 <RFID+0xb6c>)
 8001c3c:	486a      	ldr	r0, [pc, #424]	@ (8001de8 <RFID+0xb60>)
 8001c3e:	f7fe fbd3 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001c42:	e002      	b.n	8001c4a <RFID+0x9c2>
															default:
																back11 = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	727b      	strb	r3, [r7, #9]
																break;
 8001c48:	bf00      	nop
													while (back11 == 1)
 8001c4a:	7a7b      	ldrb	r3, [r7, #9]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f43f aed0 	beq.w	80019f2 <RFID+0x76a>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001c52:	4a70      	ldr	r2, [pc, #448]	@ (8001e14 <RFID+0xb8c>)
 8001c54:	4970      	ldr	r1, [pc, #448]	@ (8001e18 <RFID+0xb90>)
 8001c56:	4864      	ldr	r0, [pc, #400]	@ (8001de8 <RFID+0xb60>)
 8001c58:	f7fe fbc6 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001c5c:	e12f      	b.n	8001ebe <RFID+0xc36>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM USER","Pls Press Down");
 8001c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e1c <RFID+0xb94>)
 8001c60:	496f      	ldr	r1, [pc, #444]	@ (8001e20 <RFID+0xb98>)
 8001c62:	4861      	ldr	r0, [pc, #388]	@ (8001de8 <RFID+0xb60>)
 8001c64:	f7fe fbc0 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001c70:	e118      	b.n	8001ea4 <RFID+0xc1c>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001c72:	200a      	movs	r0, #10
 8001c74:	f7fe fd12 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <RFID+0xb64>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <RFID+0xa0c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001c84:	4858      	ldr	r0, [pc, #352]	@ (8001de8 <RFID+0xb60>)
 8001c86:	f7fe fb9f 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c8e:	f002 fca3 	bl	80045d8 <HAL_Delay>
															return;
 8001c92:	e1b4      	b.n	8001ffe <RFID+0xd76>
														}
														if (key_pressed =='*')
 8001c94:	797b      	ldrb	r3, [r7, #5]
 8001c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c98:	d12e      	bne.n	8001cf8 <RFID+0xa70>
														{
															exitmenu = 15;
 8001c9a:	4b54      	ldr	r3, [pc, #336]	@ (8001dec <RFID+0xb64>)
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001ca0:	7a3b      	ldrb	r3, [r7, #8]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001ca6:	7a3b      	ldrb	r3, [r7, #8]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d801      	bhi.n	8001cb0 <RFID+0xa28>
 8001cac:	7a3b      	ldrb	r3, [r7, #8]
 8001cae:	e000      	b.n	8001cb2 <RFID+0xa2a>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001cb4:	7a3b      	ldrb	r3, [r7, #8]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d012      	beq.n	8001ce0 <RFID+0xa58>
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	dc16      	bgt.n	8001cec <RFID+0xa64>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <RFID+0xa40>
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d006      	beq.n	8001cd4 <RFID+0xa4c>
 8001cc6:	e011      	b.n	8001cec <RFID+0xa64>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001cc8:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <RFID+0xb9c>)
 8001cca:	4955      	ldr	r1, [pc, #340]	@ (8001e20 <RFID+0xb98>)
 8001ccc:	4846      	ldr	r0, [pc, #280]	@ (8001de8 <RFID+0xb60>)
 8001cce:	f7fe fb8b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cd2:	e011      	b.n	8001cf8 <RFID+0xa70>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <RFID+0xba0>)
 8001cd6:	4952      	ldr	r1, [pc, #328]	@ (8001e20 <RFID+0xb98>)
 8001cd8:	4843      	ldr	r0, [pc, #268]	@ (8001de8 <RFID+0xb60>)
 8001cda:	f7fe fb85 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cde:	e00b      	b.n	8001cf8 <RFID+0xa70>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001ce0:	4a52      	ldr	r2, [pc, #328]	@ (8001e2c <RFID+0xba4>)
 8001ce2:	494f      	ldr	r1, [pc, #316]	@ (8001e20 <RFID+0xb98>)
 8001ce4:	4840      	ldr	r0, [pc, #256]	@ (8001de8 <RFID+0xb60>)
 8001ce6:	f7fe fb7f 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cea:	e005      	b.n	8001cf8 <RFID+0xa70>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8001cec:	4a50      	ldr	r2, [pc, #320]	@ (8001e30 <RFID+0xba8>)
 8001cee:	494c      	ldr	r1, [pc, #304]	@ (8001e20 <RFID+0xb98>)
 8001cf0:	483d      	ldr	r0, [pc, #244]	@ (8001de8 <RFID+0xb60>)
 8001cf2:	f7fe fb79 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cf6:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	2b23      	cmp	r3, #35	@ 0x23
 8001cfc:	f040 80d2 	bne.w	8001ea4 <RFID+0xc1c>
														{
															exitmenu = 15;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <RFID+0xb64>)
 8001d02:	220f      	movs	r2, #15
 8001d04:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	7a3b      	ldrb	r3, [r7, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8001d12:	7a3b      	ldrb	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	f000 8095 	beq.w	8001e44 <RFID+0xbbc>
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	f300 80bf 	bgt.w	8001e9e <RFID+0xc16>
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <RFID+0xaa2>
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d02d      	beq.n	8001d84 <RFID+0xafc>
 8001d28:	e0b9      	b.n	8001e9e <RFID+0xc16>
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001d2a:	793b      	ldrb	r3, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fb5f 	bl	80033f0 <CheckKey>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10e      	bne.n	8001d56 <RFID+0xace>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","Do Not Exist");
 8001d38:	4a2f      	ldr	r2, [pc, #188]	@ (8001df8 <RFID+0xb70>)
 8001d3a:	493e      	ldr	r1, [pc, #248]	@ (8001e34 <RFID+0xbac>)
 8001d3c:	482a      	ldr	r0, [pc, #168]	@ (8001de8 <RFID+0xb60>)
 8001d3e:	f7fe fb53 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d46:	f002 fc47 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001d4a:	4a36      	ldr	r2, [pc, #216]	@ (8001e24 <RFID+0xb9c>)
 8001d4c:	4934      	ldr	r1, [pc, #208]	@ (8001e20 <RFID+0xb98>)
 8001d4e:	4826      	ldr	r0, [pc, #152]	@ (8001de8 <RFID+0xb60>)
 8001d50:	f7fe fb4a 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8001d54:	e0a6      	b.n	8001ea4 <RFID+0xc1c>
																	removeuid(CheckKey(keyadd2));
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fb49 	bl	80033f0 <CheckKey>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fb73 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <RFID+0xb58>)
 8001d68:	4933      	ldr	r1, [pc, #204]	@ (8001e38 <RFID+0xbb0>)
 8001d6a:	481f      	ldr	r0, [pc, #124]	@ (8001de8 <RFID+0xb60>)
 8001d6c:	f7fe fb3c 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d74:	f002 fc30 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001d78:	4a2a      	ldr	r2, [pc, #168]	@ (8001e24 <RFID+0xb9c>)
 8001d7a:	4929      	ldr	r1, [pc, #164]	@ (8001e20 <RFID+0xb98>)
 8001d7c:	481a      	ldr	r0, [pc, #104]	@ (8001de8 <RFID+0xb60>)
 8001d7e:	f7fe fb33 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d82:	e08f      	b.n	8001ea4 <RFID+0xc1c>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8001d84:	793b      	ldrb	r3, [r7, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fb32 	bl	80033f0 <CheckKey>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10e      	bne.n	8001db0 <RFID+0xb28>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 2","Do Not Exist");
 8001d92:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <RFID+0xb70>)
 8001d94:	4929      	ldr	r1, [pc, #164]	@ (8001e3c <RFID+0xbb4>)
 8001d96:	4814      	ldr	r0, [pc, #80]	@ (8001de8 <RFID+0xb60>)
 8001d98:	f7fe fb26 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da0:	f002 fc1a 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <RFID+0xba0>)
 8001da6:	491e      	ldr	r1, [pc, #120]	@ (8001e20 <RFID+0xb98>)
 8001da8:	480f      	ldr	r0, [pc, #60]	@ (8001de8 <RFID+0xb60>)
 8001daa:	f7fe fb1d 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8001dae:	e079      	b.n	8001ea4 <RFID+0xc1c>
																	removeuid(CheckKey(keyadd2));
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fb1c 	bl	80033f0 <CheckKey>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb46 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <RFID+0xb58>)
 8001dc2:	491f      	ldr	r1, [pc, #124]	@ (8001e40 <RFID+0xbb8>)
 8001dc4:	4808      	ldr	r0, [pc, #32]	@ (8001de8 <RFID+0xb60>)
 8001dc6:	f7fe fb0f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dce:	f002 fc03 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001dd2:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <RFID+0xba0>)
 8001dd4:	4912      	ldr	r1, [pc, #72]	@ (8001e20 <RFID+0xb98>)
 8001dd6:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <RFID+0xb60>)
 8001dd8:	f7fe fb06 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001ddc:	e062      	b.n	8001ea4 <RFID+0xc1c>
 8001dde:	bf00      	nop
 8001de0:	0800de4c 	.word	0x0800de4c
 8001de4:	0800de5c 	.word	0x0800de5c
 8001de8:	200003d8 	.word	0x200003d8
 8001dec:	20000020 	.word	0x20000020
 8001df0:	0800de0c 	.word	0x0800de0c
 8001df4:	0800ddfc 	.word	0x0800ddfc
 8001df8:	0800de3c 	.word	0x0800de3c
 8001dfc:	0800dcd4 	.word	0x0800dcd4
 8001e00:	0800de1c 	.word	0x0800de1c
 8001e04:	0800de70 	.word	0x0800de70
 8001e08:	0800dcf4 	.word	0x0800dcf4
 8001e0c:	0800de2c 	.word	0x0800de2c
 8001e10:	0800de84 	.word	0x0800de84
 8001e14:	0800ddd8 	.word	0x0800ddd8
 8001e18:	0800ddc8 	.word	0x0800ddc8
 8001e1c:	0800dbd4 	.word	0x0800dbd4
 8001e20:	0800de98 	.word	0x0800de98
 8001e24:	0800dea8 	.word	0x0800dea8
 8001e28:	0800deb8 	.word	0x0800deb8
 8001e2c:	0800dec8 	.word	0x0800dec8
 8001e30:	0800dc20 	.word	0x0800dc20
 8001e34:	0800dd40 	.word	0x0800dd40
 8001e38:	0800ded8 	.word	0x0800ded8
 8001e3c:	0800dd4c 	.word	0x0800dd4c
 8001e40:	0800deec 	.word	0x0800deec
															case 3:
																if (CheckKey(keyadd2) == 0)
 8001e44:	793b      	ldrb	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fad2 	bl	80033f0 <CheckKey>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <RFID+0xbe8>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","Do Not Exist");
 8001e52:	4a6c      	ldr	r2, [pc, #432]	@ (8002004 <RFID+0xd7c>)
 8001e54:	496c      	ldr	r1, [pc, #432]	@ (8002008 <RFID+0xd80>)
 8001e56:	486d      	ldr	r0, [pc, #436]	@ (800200c <RFID+0xd84>)
 8001e58:	f7fe fac6 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e60:	f002 fbba 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001e64:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <RFID+0xd88>)
 8001e66:	496b      	ldr	r1, [pc, #428]	@ (8002014 <RFID+0xd8c>)
 8001e68:	4868      	ldr	r0, [pc, #416]	@ (800200c <RFID+0xd84>)
 8001e6a:	f7fe fabd 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8001e6e:	e019      	b.n	8001ea4 <RFID+0xc1c>
																	removeuid(CheckKey(keyadd2));
 8001e70:	793b      	ldrb	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 fabc 	bl	80033f0 <CheckKey>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 fae6 	bl	800344c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8001e80:	4a65      	ldr	r2, [pc, #404]	@ (8002018 <RFID+0xd90>)
 8001e82:	4966      	ldr	r1, [pc, #408]	@ (800201c <RFID+0xd94>)
 8001e84:	4861      	ldr	r0, [pc, #388]	@ (800200c <RFID+0xd84>)
 8001e86:	f7fe faaf 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e8e:	f002 fba3 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001e92:	4a5f      	ldr	r2, [pc, #380]	@ (8002010 <RFID+0xd88>)
 8001e94:	495f      	ldr	r1, [pc, #380]	@ (8002014 <RFID+0xd8c>)
 8001e96:	485d      	ldr	r0, [pc, #372]	@ (800200c <RFID+0xd84>)
 8001e98:	f7fe faa6 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001e9c:	e002      	b.n	8001ea4 <RFID+0xc1c>
															default:
																back12 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	71fb      	strb	r3, [r7, #7]
																break;
 8001ea2:	bf00      	nop
													while (back12 == 1)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f43f aee3 	beq.w	8001c72 <RFID+0x9ea>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001eac:	4a5c      	ldr	r2, [pc, #368]	@ (8002020 <RFID+0xd98>)
 8001eae:	495d      	ldr	r1, [pc, #372]	@ (8002024 <RFID+0xd9c>)
 8001eb0:	4856      	ldr	r0, [pc, #344]	@ (800200c <RFID+0xd84>)
 8001eb2:	f7fe fa99 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001eb6:	e002      	b.n	8001ebe <RFID+0xc36>
												default:
													backrm10 = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	72fb      	strb	r3, [r7, #11]
													break;
 8001ebc:	bf00      	nop
										while (backrm10 == 1)
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f43f ad45 	beq.w	8001950 <RFID+0x6c8>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ec6:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <RFID+0xda0>)
 8001ec8:	4958      	ldr	r1, [pc, #352]	@ (800202c <RFID+0xda4>)
 8001eca:	4850      	ldr	r0, [pc, #320]	@ (800200c <RFID+0xd84>)
 8001ecc:	f7fe fa8c 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001ed0:	e05e      	b.n	8001f90 <RFID+0xd08>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001ed2:	4a57      	ldr	r2, [pc, #348]	@ (8002030 <RFID+0xda8>)
 8001ed4:	4957      	ldr	r1, [pc, #348]	@ (8002034 <RFID+0xdac>)
 8001ed6:	484d      	ldr	r0, [pc, #308]	@ (800200c <RFID+0xd84>)
 8001ed8:	f7fe fa86 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001ee0:	e04a      	b.n	8001f78 <RFID+0xcf0>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ee2:	200a      	movs	r0, #10
 8001ee4:	f7fe fbda 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001eec:	4852      	ldr	r0, [pc, #328]	@ (8002038 <RFID+0xdb0>)
 8001eee:	f001 fedb 	bl	8003ca8 <TM_MFRC522_Check>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d13a      	bne.n	8001f6e <RFID+0xce6>
											{
												if (CheckListUID(CardID) != 0)
 8001ef8:	484f      	ldr	r0, [pc, #316]	@ (8002038 <RFID+0xdb0>)
 8001efa:	f001 f8f9 	bl	80030f0 <CheckListUID>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d026      	beq.n	8001f52 <RFID+0xcca>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001f04:	484c      	ldr	r0, [pc, #304]	@ (8002038 <RFID+0xdb0>)
 8001f06:	f001 f8f3 	bl	80030f0 <CheckListUID>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fa6f 	bl	80033f0 <CheckKey>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 fa99 	bl	800344c <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002018 <RFID+0xd90>)
 8001f1c:	4947      	ldr	r1, [pc, #284]	@ (800203c <RFID+0xdb4>)
 8001f1e:	483b      	ldr	r0, [pc, #236]	@ (800200c <RFID+0xd84>)
 8001f20:	f7fe fa62 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f28:	f002 fb56 	bl	80045d8 <HAL_Delay>
													if (checkcountUID() == 0)
 8001f2c:	f001 f910 	bl	8003150 <checkcountUID>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <RFID+0xcbe>
													{
														startadd();
 8001f36:	f001 fa97 	bl	8003468 <startadd>
														rmquet = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8001f3e:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <RFID+0xdb8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
														return;
 8001f44:	e05b      	b.n	8001ffe <RFID+0xd76>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f46:	4a3a      	ldr	r2, [pc, #232]	@ (8002030 <RFID+0xda8>)
 8001f48:	493a      	ldr	r1, [pc, #232]	@ (8002034 <RFID+0xdac>)
 8001f4a:	4830      	ldr	r0, [pc, #192]	@ (800200c <RFID+0xd84>)
 8001f4c:	f7fe fa4c 	bl	80003e8 <CLCD_I2C_Display>
 8001f50:	e00d      	b.n	8001f6e <RFID+0xce6>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","Do Not Exist");
 8001f52:	4a2c      	ldr	r2, [pc, #176]	@ (8002004 <RFID+0xd7c>)
 8001f54:	493b      	ldr	r1, [pc, #236]	@ (8002044 <RFID+0xdbc>)
 8001f56:	482d      	ldr	r0, [pc, #180]	@ (800200c <RFID+0xd84>)
 8001f58:	f7fe fa46 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f60:	f002 fb3a 	bl	80045d8 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f64:	4a32      	ldr	r2, [pc, #200]	@ (8002030 <RFID+0xda8>)
 8001f66:	4933      	ldr	r1, [pc, #204]	@ (8002034 <RFID+0xdac>)
 8001f68:	4828      	ldr	r0, [pc, #160]	@ (800200c <RFID+0xd84>)
 8001f6a:	f7fe fa3d 	bl	80003e8 <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001f6e:	797b      	ldrb	r3, [r7, #5]
 8001f70:	2b23      	cmp	r3, #35	@ 0x23
 8001f72:	d101      	bne.n	8001f78 <RFID+0xcf0>
											{
												rmquet = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1b1      	bne.n	8001ee2 <RFID+0xc5a>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001f7e:	4a32      	ldr	r2, [pc, #200]	@ (8002048 <RFID+0xdc0>)
 8001f80:	492a      	ldr	r1, [pc, #168]	@ (800202c <RFID+0xda4>)
 8001f82:	4822      	ldr	r0, [pc, #136]	@ (800200c <RFID+0xd84>)
 8001f84:	f7fe fa30 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001f88:	e002      	b.n	8001f90 <RFID+0xd08>
									default:
										backrm1 = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	737b      	strb	r3, [r7, #13]
										break;
 8001f8e:	bf00      	nop
							while (backrm1 == 1)
 8001f90:	7b7b      	ldrb	r3, [r7, #13]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	f43f ac8e 	beq.w	80018b4 <RFID+0x62c>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001f98:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <RFID+0xdc4>)
 8001f9a:	492d      	ldr	r1, [pc, #180]	@ (8002050 <RFID+0xdc8>)
 8001f9c:	481b      	ldr	r0, [pc, #108]	@ (800200c <RFID+0xd84>)
 8001f9e:	f7fe fa23 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001fa2:	e00a      	b.n	8001fba <RFID+0xd32>
						case 1:
							remoall();
 8001fa4:	f001 fad0 	bl	8003548 <remoall>
							startadd();
 8001fa8:	f001 fa5e 	bl	8003468 <startadd>
							exitmenu = 0;
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <RFID+0xdb8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
							break;
 8001fb2:	e002      	b.n	8001fba <RFID+0xd32>
						default:
							backrm = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
							break;
 8001fb8:	bf00      	nop
				while (backrm == 1)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f43f abf4 	beq.w	80017aa <RFID+0x522>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001fc2:	4a24      	ldr	r2, [pc, #144]	@ (8002054 <RFID+0xdcc>)
 8001fc4:	4924      	ldr	r1, [pc, #144]	@ (8002058 <RFID+0xdd0>)
 8001fc6:	4811      	ldr	r0, [pc, #68]	@ (800200c <RFID+0xd84>)
 8001fc8:	f7fe fa0e 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001fcc:	e00b      	b.n	8001fe6 <RFID+0xd5e>
			case 2:
				checkthe();
 8001fce:	f001 f961 	bl	8003294 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001fd2:	4a22      	ldr	r2, [pc, #136]	@ (800205c <RFID+0xdd4>)
 8001fd4:	4920      	ldr	r1, [pc, #128]	@ (8002058 <RFID+0xdd0>)
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <RFID+0xd84>)
 8001fd8:	f7fe fa06 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001fdc:	e003      	b.n	8001fe6 <RFID+0xd5e>
			default:
				exitmenu = 0;
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <RFID+0xdb8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
				break;
 8001fe4:	bf00      	nop
	while (exitmenu )
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <RFID+0xdb8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f a95b 	bne.w	80012a6 <RFID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8001ff0:	4806      	ldr	r0, [pc, #24]	@ (800200c <RFID+0xd84>)
 8001ff2:	f7fe f9e9 	bl	80003c8 <CLCD_I2C_Clear>
	HAL_Delay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffa:	f002 faed 	bl	80045d8 <HAL_Delay>
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800de3c 	.word	0x0800de3c
 8002008:	0800dd58 	.word	0x0800dd58
 800200c:	200003d8 	.word	0x200003d8
 8002010:	0800dec8 	.word	0x0800dec8
 8002014:	0800de98 	.word	0x0800de98
 8002018:	0800de4c 	.word	0x0800de4c
 800201c:	0800df00 	.word	0x0800df00
 8002020:	0800ddec 	.word	0x0800ddec
 8002024:	0800ddc8 	.word	0x0800ddc8
 8002028:	0800dda8 	.word	0x0800dda8
 800202c:	0800dd98 	.word	0x0800dd98
 8002030:	0800dc20 	.word	0x0800dc20
 8002034:	0800df14 	.word	0x0800df14
 8002038:	200003e4 	.word	0x200003e4
 800203c:	0800df24 	.word	0x0800df24
 8002040:	20000020 	.word	0x20000020
 8002044:	0800df34 	.word	0x0800df34
 8002048:	0800ddb8 	.word	0x0800ddb8
 800204c:	0800dd74 	.word	0x0800dd74
 8002050:	0800dd64 	.word	0x0800dd64
 8002054:	0800dc00 	.word	0x0800dc00
 8002058:	0800dbe4 	.word	0x0800dbe4
 800205c:	0800dc10 	.word	0x0800dc10

08002060 <FACEID>:
void FACEID(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8002066:	4ba0      	ldr	r3, [pc, #640]	@ (80022e8 <FACEID+0x288>)
 8002068:	2214      	movs	r2, #20
 800206a:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800206c:	23ff      	movs	r3, #255	@ 0xff
 800206e:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1, "     CARDID     ", "    THEM FACE    ");
 8002070:	4a9e      	ldr	r2, [pc, #632]	@ (80022ec <FACEID+0x28c>)
 8002072:	499f      	ldr	r1, [pc, #636]	@ (80022f0 <FACEID+0x290>)
 8002074:	489f      	ldr	r0, [pc, #636]	@ (80022f4 <FACEID+0x294>)
 8002076:	f7fe f9b7 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 800207a:	f000 bfe2 	b.w	8003042 <FACEID+0xfe2>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800207e:	200a      	movs	r0, #10
 8002080:	f7fe fb0c 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002084:	4603      	mov	r3, r0
 8002086:	717b      	strb	r3, [r7, #5]
		if (key_pressed == '*')
 8002088:	797b      	ldrb	r3, [r7, #5]
 800208a:	2b2a      	cmp	r3, #42	@ 0x2a
 800208c:	d12e      	bne.n	80020ec <FACEID+0x8c>
		{
			exitmenu = Delaymenu;
 800208e:	4b96      	ldr	r3, [pc, #600]	@ (80022e8 <FACEID+0x288>)
 8002090:	2214      	movs	r2, #20
 8002092:	701a      	strb	r2, [r3, #0]
			status++;
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	3301      	adds	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d801      	bhi.n	80020a4 <FACEID+0x44>
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	e000      	b.n	80020a6 <FACEID+0x46>
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d012      	beq.n	80020d4 <FACEID+0x74>
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	dc16      	bgt.n	80020e0 <FACEID+0x80>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <FACEID+0x5c>
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d006      	beq.n	80020c8 <FACEID+0x68>
 80020ba:	e011      	b.n	80020e0 <FACEID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1, "=>  THEM FACE", "    XOA FACE");
 80020bc:	4a8e      	ldr	r2, [pc, #568]	@ (80022f8 <FACEID+0x298>)
 80020be:	498f      	ldr	r1, [pc, #572]	@ (80022fc <FACEID+0x29c>)
 80020c0:	488c      	ldr	r0, [pc, #560]	@ (80022f4 <FACEID+0x294>)
 80020c2:	f7fe f991 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020c6:	e011      	b.n	80020ec <FACEID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1, "    THEM FACE", "=>  XOA FACE");
 80020c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002300 <FACEID+0x2a0>)
 80020ca:	498e      	ldr	r1, [pc, #568]	@ (8002304 <FACEID+0x2a4>)
 80020cc:	4889      	ldr	r0, [pc, #548]	@ (80022f4 <FACEID+0x294>)
 80020ce:	f7fe f98b 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020d2:	e00b      	b.n	80020ec <FACEID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1, "    XOA FACE", "=>  TRA FACE");
 80020d4:	4a8c      	ldr	r2, [pc, #560]	@ (8002308 <FACEID+0x2a8>)
 80020d6:	4988      	ldr	r1, [pc, #544]	@ (80022f8 <FACEID+0x298>)
 80020d8:	4886      	ldr	r0, [pc, #536]	@ (80022f4 <FACEID+0x294>)
 80020da:	f7fe f985 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020de:	e005      	b.n	80020ec <FACEID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1, "    TRA FACE", "=>  BACK");
 80020e0:	4a8a      	ldr	r2, [pc, #552]	@ (800230c <FACEID+0x2ac>)
 80020e2:	498b      	ldr	r1, [pc, #556]	@ (8002310 <FACEID+0x2b0>)
 80020e4:	4883      	ldr	r0, [pc, #524]	@ (80022f4 <FACEID+0x294>)
 80020e6:	f7fe f97f 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020ea:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 80020ec:	797b      	ldrb	r3, [r7, #5]
 80020ee:	2b23      	cmp	r3, #35	@ 0x23
 80020f0:	f040 87a7 	bne.w	8003042 <FACEID+0xfe2>
		{
			exitmenu = Delaymenu;
 80020f4:	4b7c      	ldr	r3, [pc, #496]	@ (80022e8 <FACEID+0x288>)
 80020f6:	2214      	movs	r2, #20
 80020f8:	701a      	strb	r2, [r3, #0]
			switch (status)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f000 8790 	beq.w	8003022 <FACEID+0xfc2>
 8002102:	2b02      	cmp	r3, #2
 8002104:	f300 8799 	bgt.w	800303a <FACEID+0xfda>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <FACEID+0xb6>
 800210c:	2b01      	cmp	r3, #1
 800210e:	f000 82c7 	beq.w	80026a0 <FACEID+0x640>
 8002112:	f000 bf92 	b.w	800303a <FACEID+0xfda>
			{
			case 0:
				CLCD_I2C_Display(&LCD1, "    SELECT ", "FACE NGUOI LON");
 8002116:	4a7f      	ldr	r2, [pc, #508]	@ (8002314 <FACEID+0x2b4>)
 8002118:	497f      	ldr	r1, [pc, #508]	@ (8002318 <FACEID+0x2b8>)
 800211a:	4876      	ldr	r0, [pc, #472]	@ (80022f4 <FACEID+0x294>)
 800211c:	f7fe f964 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8002128:	e2af      	b.n	800268a <FACEID+0x62a>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800212a:	200a      	movs	r0, #10
 800212c:	f7fe fab6 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002130:	4603      	mov	r3, r0
 8002132:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8002134:	4b6c      	ldr	r3, [pc, #432]	@ (80022e8 <FACEID+0x288>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <FACEID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 800213c:	486d      	ldr	r0, [pc, #436]	@ (80022f4 <FACEID+0x294>)
 800213e:	f7fe f943 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002142:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002146:	f002 fa47 	bl	80045d8 <HAL_Delay>
						return;
 800214a:	f000 bf82 	b.w	8003052 <FACEID+0xff2>
					}
					if (key_pressed == '*')
 800214e:	797b      	ldrb	r3, [r7, #5]
 8002150:	2b2a      	cmp	r3, #42	@ 0x2a
 8002152:	d124      	bne.n	800219e <FACEID+0x13e>
					{
						exitmenu = Delaymenu;
 8002154:	4b64      	ldr	r3, [pc, #400]	@ (80022e8 <FACEID+0x288>)
 8002156:	2214      	movs	r2, #20
 8002158:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800215a:	7dbb      	ldrb	r3, [r7, #22]
 800215c:	3301      	adds	r3, #1
 800215e:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8002160:	7dbb      	ldrb	r3, [r7, #22]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d801      	bhi.n	800216a <FACEID+0x10a>
 8002166:	7dbb      	ldrb	r3, [r7, #22]
 8002168:	e000      	b.n	800216c <FACEID+0x10c>
 800216a:	2300      	movs	r3, #0
 800216c:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800216e:	7dbb      	ldrb	r3, [r7, #22]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d002      	beq.n	800217a <FACEID+0x11a>
 8002174:	2b02      	cmp	r3, #2
 8002176:	d006      	beq.n	8002186 <FACEID+0x126>
 8002178:	e00b      	b.n	8002192 <FACEID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 800217a:	4a68      	ldr	r2, [pc, #416]	@ (800231c <FACEID+0x2bc>)
 800217c:	4968      	ldr	r1, [pc, #416]	@ (8002320 <FACEID+0x2c0>)
 800217e:	485d      	ldr	r0, [pc, #372]	@ (80022f4 <FACEID+0x294>)
 8002180:	f7fe f932 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002184:	e00b      	b.n	800219e <FACEID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 8002186:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <FACEID+0x2c4>)
 8002188:	4967      	ldr	r1, [pc, #412]	@ (8002328 <FACEID+0x2c8>)
 800218a:	485a      	ldr	r0, [pc, #360]	@ (80022f4 <FACEID+0x294>)
 800218c:	f7fe f92c 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002190:	e005      	b.n	800219e <FACEID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1, "  FACE TRE EM", "=> BACK");
 8002192:	4a66      	ldr	r2, [pc, #408]	@ (800232c <FACEID+0x2cc>)
 8002194:	4961      	ldr	r1, [pc, #388]	@ (800231c <FACEID+0x2bc>)
 8002196:	4857      	ldr	r0, [pc, #348]	@ (80022f4 <FACEID+0x294>)
 8002198:	f7fe f926 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800219c:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	2b23      	cmp	r3, #35	@ 0x23
 80021a2:	f040 8272 	bne.w	800268a <FACEID+0x62a>
					{
						exitmenu = Delaymenu;
 80021a6:	4b50      	ldr	r3, [pc, #320]	@ (80022e8 <FACEID+0x288>)
 80021a8:	2214      	movs	r2, #20
 80021aa:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80021ac:	7dbb      	ldrb	r3, [r7, #22]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d003      	beq.n	80021ba <FACEID+0x15a>
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f000 813f 	beq.w	8002436 <FACEID+0x3d6>
 80021b8:	e264      	b.n	8002684 <FACEID+0x624>
						{
						case 1:
							CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80021ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002330 <FACEID+0x2d0>)
 80021bc:	495d      	ldr	r1, [pc, #372]	@ (8002334 <FACEID+0x2d4>)
 80021be:	484d      	ldr	r0, [pc, #308]	@ (80022f4 <FACEID+0x294>)
 80021c0:	f7fe f912 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd1 = 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80021cc:	e129      	b.n	8002422 <FACEID+0x3c2>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f7fe fa64 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80021d4:	4603      	mov	r3, r0
 80021d6:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <FACEID+0x288>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <FACEID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 80021e0:	4844      	ldr	r0, [pc, #272]	@ (80022f4 <FACEID+0x294>)
 80021e2:	f7fe f8f1 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80021e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ea:	f002 f9f5 	bl	80045d8 <HAL_Delay>
									return;
 80021ee:	f000 bf30 	b.w	8003052 <FACEID+0xff2>
								}
								if (key_pressed == '*')
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80021f6:	d139      	bne.n	800226c <FACEID+0x20c>
								{
									exitmenu = Delaymenu;
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <FACEID+0x288>)
 80021fa:	2214      	movs	r2, #20
 80021fc:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 80021fe:	7d3b      	ldrb	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8002204:	7d3b      	ldrb	r3, [r7, #20]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d801      	bhi.n	800220e <FACEID+0x1ae>
 800220a:	7d3b      	ldrb	r3, [r7, #20]
 800220c:	e000      	b.n	8002210 <FACEID+0x1b0>
 800220e:	2300      	movs	r3, #0
 8002210:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8002212:	7d3b      	ldrb	r3, [r7, #20]
 8002214:	3b01      	subs	r3, #1
 8002216:	2b03      	cmp	r3, #3
 8002218:	d822      	bhi.n	8002260 <FACEID+0x200>
 800221a:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <FACEID+0x1c0>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	0800223d 	.word	0x0800223d
 8002228:	08002249 	.word	0x08002249
 800222c:	08002255 	.word	0x08002255
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002230:	4a3f      	ldr	r2, [pc, #252]	@ (8002330 <FACEID+0x2d0>)
 8002232:	4940      	ldr	r1, [pc, #256]	@ (8002334 <FACEID+0x2d4>)
 8002234:	482f      	ldr	r0, [pc, #188]	@ (80022f4 <FACEID+0x294>)
 8002236:	f7fe f8d7 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800223a:	e017      	b.n	800226c <FACEID+0x20c>
									case 2:
										CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 800223c:	4a3e      	ldr	r2, [pc, #248]	@ (8002338 <FACEID+0x2d8>)
 800223e:	493f      	ldr	r1, [pc, #252]	@ (800233c <FACEID+0x2dc>)
 8002240:	482c      	ldr	r0, [pc, #176]	@ (80022f4 <FACEID+0x294>)
 8002242:	f7fe f8d1 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002246:	e011      	b.n	800226c <FACEID+0x20c>
									case 3:
										CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002248:	4a3d      	ldr	r2, [pc, #244]	@ (8002340 <FACEID+0x2e0>)
 800224a:	493e      	ldr	r1, [pc, #248]	@ (8002344 <FACEID+0x2e4>)
 800224c:	4829      	ldr	r0, [pc, #164]	@ (80022f4 <FACEID+0x294>)
 800224e:	f7fe f8cb 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002252:	e00b      	b.n	800226c <FACEID+0x20c>
									case 4:
										CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002254:	4a3c      	ldr	r2, [pc, #240]	@ (8002348 <FACEID+0x2e8>)
 8002256:	493d      	ldr	r1, [pc, #244]	@ (800234c <FACEID+0x2ec>)
 8002258:	4826      	ldr	r0, [pc, #152]	@ (80022f4 <FACEID+0x294>)
 800225a:	f7fe f8c5 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800225e:	e005      	b.n	800226c <FACEID+0x20c>
									default:
										CLCD_I2C_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8002260:	4a3b      	ldr	r2, [pc, #236]	@ (8002350 <FACEID+0x2f0>)
 8002262:	4937      	ldr	r1, [pc, #220]	@ (8002340 <FACEID+0x2e0>)
 8002264:	4823      	ldr	r0, [pc, #140]	@ (80022f4 <FACEID+0x294>)
 8002266:	f7fe f8bf 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800226a:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 800226c:	797b      	ldrb	r3, [r7, #5]
 800226e:	2b23      	cmp	r3, #35	@ 0x23
 8002270:	f040 80d7 	bne.w	8002422 <FACEID+0x3c2>
								{
									exitmenu = Delaymenu;
 8002274:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <FACEID+0x288>)
 8002276:	2214      	movs	r2, #20
 8002278:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800227a:	7dbb      	ldrb	r3, [r7, #22]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	b2da      	uxtb	r2, r3
 8002280:	7d3b      	ldrb	r3, [r7, #20]
 8002282:	4413      	add	r3, r2
 8002284:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 8002286:	7d3b      	ldrb	r3, [r7, #20]
 8002288:	3b01      	subs	r3, #1
 800228a:	2b03      	cmp	r3, #3
 800228c:	f200 80c6 	bhi.w	800241c <FACEID+0x3bc>
 8002290:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <FACEID+0x238>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	0800235d 	.word	0x0800235d
 80022a0:	0800239d 	.word	0x0800239d
 80022a4:	080023dd 	.word	0x080023dd
									{
									case 1:
										if (checkfaceid(keyadd1) != 0)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fba0 	bl	80039f0 <checkfaceid>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <FACEID+0x274>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 1 ", "");
 80022b6:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <FACEID+0x2f4>)
 80022b8:	4927      	ldr	r1, [pc, #156]	@ (8002358 <FACEID+0x2f8>)
 80022ba:	480e      	ldr	r0, [pc, #56]	@ (80022f4 <FACEID+0x294>)
 80022bc:	f7fe f894 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80022c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c4:	f002 f988 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80022c8:	4a19      	ldr	r2, [pc, #100]	@ (8002330 <FACEID+0x2d0>)
 80022ca:	491a      	ldr	r1, [pc, #104]	@ (8002334 <FACEID+0x2d4>)
 80022cc:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <FACEID+0x294>)
 80022ce:	f7fe f88b 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd1);
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
										}
										break;
 80022d2:	e0a6      	b.n	8002422 <FACEID+0x3c2>
											addface(keyadd1);
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 faee 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <FACEID+0x2d0>)
 80022de:	4915      	ldr	r1, [pc, #84]	@ (8002334 <FACEID+0x2d4>)
 80022e0:	4804      	ldr	r0, [pc, #16]	@ (80022f4 <FACEID+0x294>)
 80022e2:	f7fe f881 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80022e6:	e09c      	b.n	8002422 <FACEID+0x3c2>
 80022e8:	20000020 	.word	0x20000020
 80022ec:	0800df44 	.word	0x0800df44
 80022f0:	0800df58 	.word	0x0800df58
 80022f4:	200003d8 	.word	0x200003d8
 80022f8:	0800df6c 	.word	0x0800df6c
 80022fc:	0800df7c 	.word	0x0800df7c
 8002300:	0800df8c 	.word	0x0800df8c
 8002304:	0800df9c 	.word	0x0800df9c
 8002308:	0800dfac 	.word	0x0800dfac
 800230c:	0800dfbc 	.word	0x0800dfbc
 8002310:	0800dfc8 	.word	0x0800dfc8
 8002314:	0800dfd8 	.word	0x0800dfd8
 8002318:	0800dfe8 	.word	0x0800dfe8
 800231c:	0800dff4 	.word	0x0800dff4
 8002320:	0800e004 	.word	0x0800e004
 8002324:	0800e018 	.word	0x0800e018
 8002328:	0800e028 	.word	0x0800e028
 800232c:	0800e03c 	.word	0x0800e03c
 8002330:	0800e044 	.word	0x0800e044
 8002334:	0800e050 	.word	0x0800e050
 8002338:	0800e05c 	.word	0x0800e05c
 800233c:	0800e068 	.word	0x0800e068
 8002340:	0800e074 	.word	0x0800e074
 8002344:	0800e080 	.word	0x0800e080
 8002348:	0800e08c 	.word	0x0800e08c
 800234c:	0800e098 	.word	0x0800e098
 8002350:	0800e0a4 	.word	0x0800e0a4
 8002354:	0800e0b0 	.word	0x0800e0b0
 8002358:	0800e0b4 	.word	0x0800e0b4
									case 2:
										if (checkfaceid(keyadd1) != 0)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fb46 	bl	80039f0 <checkfaceid>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00e      	beq.n	8002388 <FACEID+0x328>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 2 ", "");
 800236a:	4aae      	ldr	r2, [pc, #696]	@ (8002624 <FACEID+0x5c4>)
 800236c:	49ae      	ldr	r1, [pc, #696]	@ (8002628 <FACEID+0x5c8>)
 800236e:	48af      	ldr	r0, [pc, #700]	@ (800262c <FACEID+0x5cc>)
 8002370:	f7fe f83a 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002378:	f002 f92e 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 800237c:	4aac      	ldr	r2, [pc, #688]	@ (8002630 <FACEID+0x5d0>)
 800237e:	49ad      	ldr	r1, [pc, #692]	@ (8002634 <FACEID+0x5d4>)
 8002380:	48aa      	ldr	r0, [pc, #680]	@ (800262c <FACEID+0x5cc>)
 8002382:	f7fe f831 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd1);
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
										}
										break;
 8002386:	e04c      	b.n	8002422 <FACEID+0x3c2>
											addface(keyadd1);
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	4618      	mov	r0, r3
 800238c:	f001 fa94 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002390:	4aa7      	ldr	r2, [pc, #668]	@ (8002630 <FACEID+0x5d0>)
 8002392:	49a8      	ldr	r1, [pc, #672]	@ (8002634 <FACEID+0x5d4>)
 8002394:	48a5      	ldr	r0, [pc, #660]	@ (800262c <FACEID+0x5cc>)
 8002396:	f7fe f827 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800239a:	e042      	b.n	8002422 <FACEID+0x3c2>
									case 3:
										if (checkfaceid(keyadd1) != 0)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fb26 	bl	80039f0 <checkfaceid>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <FACEID+0x368>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 3 ", "");
 80023aa:	4a9e      	ldr	r2, [pc, #632]	@ (8002624 <FACEID+0x5c4>)
 80023ac:	49a2      	ldr	r1, [pc, #648]	@ (8002638 <FACEID+0x5d8>)
 80023ae:	489f      	ldr	r0, [pc, #636]	@ (800262c <FACEID+0x5cc>)
 80023b0:	f7fe f81a 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80023b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023b8:	f002 f90e 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80023bc:	4a9f      	ldr	r2, [pc, #636]	@ (800263c <FACEID+0x5dc>)
 80023be:	49a0      	ldr	r1, [pc, #640]	@ (8002640 <FACEID+0x5e0>)
 80023c0:	489a      	ldr	r0, [pc, #616]	@ (800262c <FACEID+0x5cc>)
 80023c2:	f7fe f811 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd1);
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
										}
										break;
 80023c6:	e02c      	b.n	8002422 <FACEID+0x3c2>
											addface(keyadd1);
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fa74 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80023d0:	4a9a      	ldr	r2, [pc, #616]	@ (800263c <FACEID+0x5dc>)
 80023d2:	499b      	ldr	r1, [pc, #620]	@ (8002640 <FACEID+0x5e0>)
 80023d4:	4895      	ldr	r0, [pc, #596]	@ (800262c <FACEID+0x5cc>)
 80023d6:	f7fe f807 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80023da:	e022      	b.n	8002422 <FACEID+0x3c2>
									case 4:
										if (checkfaceid(keyadd1) != 0)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 fb06 	bl	80039f0 <checkfaceid>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <FACEID+0x3a8>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 4 ", "");
 80023ea:	4a8e      	ldr	r2, [pc, #568]	@ (8002624 <FACEID+0x5c4>)
 80023ec:	4995      	ldr	r1, [pc, #596]	@ (8002644 <FACEID+0x5e4>)
 80023ee:	488f      	ldr	r0, [pc, #572]	@ (800262c <FACEID+0x5cc>)
 80023f0:	f7fd fffa 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80023f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023f8:	f002 f8ee 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 80023fc:	4a92      	ldr	r2, [pc, #584]	@ (8002648 <FACEID+0x5e8>)
 80023fe:	4993      	ldr	r1, [pc, #588]	@ (800264c <FACEID+0x5ec>)
 8002400:	488a      	ldr	r0, [pc, #552]	@ (800262c <FACEID+0x5cc>)
 8002402:	f7fd fff1 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd1);
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
										}
										break;
 8002406:	e00c      	b.n	8002422 <FACEID+0x3c2>
											addface(keyadd1);
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fa54 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002410:	4a8d      	ldr	r2, [pc, #564]	@ (8002648 <FACEID+0x5e8>)
 8002412:	498e      	ldr	r1, [pc, #568]	@ (800264c <FACEID+0x5ec>)
 8002414:	4885      	ldr	r0, [pc, #532]	@ (800262c <FACEID+0x5cc>)
 8002416:	f7fd ffe7 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800241a:	e002      	b.n	8002422 <FACEID+0x3c2>
									default:
										back11 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	74fb      	strb	r3, [r7, #19]
										break;
 8002420:	bf00      	nop
							while (back11 == 1)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b01      	cmp	r3, #1
 8002426:	f43f aed2 	beq.w	80021ce <FACEID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 800242a:	4a89      	ldr	r2, [pc, #548]	@ (8002650 <FACEID+0x5f0>)
 800242c:	4989      	ldr	r1, [pc, #548]	@ (8002654 <FACEID+0x5f4>)
 800242e:	487f      	ldr	r0, [pc, #508]	@ (800262c <FACEID+0x5cc>)
 8002430:	f7fd ffda 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002434:	e129      	b.n	800268a <FACEID+0x62a>
						case 2:
							CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002436:	4a88      	ldr	r2, [pc, #544]	@ (8002658 <FACEID+0x5f8>)
 8002438:	4988      	ldr	r1, [pc, #544]	@ (800265c <FACEID+0x5fc>)
 800243a:	487c      	ldr	r0, [pc, #496]	@ (800262c <FACEID+0x5cc>)
 800243c:	f7fd ffd4 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd2 = 1;
 8002440:	2301      	movs	r3, #1
 8002442:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8002448:	e113      	b.n	8002672 <FACEID+0x612>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800244a:	200a      	movs	r0, #10
 800244c:	f7fe f926 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002450:	4603      	mov	r3, r0
 8002452:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8002454:	4b82      	ldr	r3, [pc, #520]	@ (8002660 <FACEID+0x600>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d108      	bne.n	800246e <FACEID+0x40e>
								{
									CLCD_I2C_Clear(&LCD1);
 800245c:	4873      	ldr	r0, [pc, #460]	@ (800262c <FACEID+0x5cc>)
 800245e:	f7fd ffb3 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8002462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002466:	f002 f8b7 	bl	80045d8 <HAL_Delay>
									return;
 800246a:	f000 bdf2 	b.w	8003052 <FACEID+0xff2>
								}
								if (key_pressed == '*')
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	2b2a      	cmp	r3, #42	@ 0x2a
 8002472:	d139      	bne.n	80024e8 <FACEID+0x488>
								{
									exitmenu = Delaymenu;
 8002474:	4b7a      	ldr	r3, [pc, #488]	@ (8002660 <FACEID+0x600>)
 8002476:	2214      	movs	r2, #20
 8002478:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800247a:	7cbb      	ldrb	r3, [r7, #18]
 800247c:	3301      	adds	r3, #1
 800247e:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8002480:	7cbb      	ldrb	r3, [r7, #18]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d801      	bhi.n	800248a <FACEID+0x42a>
 8002486:	7cbb      	ldrb	r3, [r7, #18]
 8002488:	e000      	b.n	800248c <FACEID+0x42c>
 800248a:	2300      	movs	r3, #0
 800248c:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 800248e:	7cbb      	ldrb	r3, [r7, #18]
 8002490:	3b01      	subs	r3, #1
 8002492:	2b03      	cmp	r3, #3
 8002494:	d822      	bhi.n	80024dc <FACEID+0x47c>
 8002496:	a201      	add	r2, pc, #4	@ (adr r2, 800249c <FACEID+0x43c>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024c5 	.word	0x080024c5
 80024a8:	080024d1 	.word	0x080024d1
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80024ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002658 <FACEID+0x5f8>)
 80024ae:	496b      	ldr	r1, [pc, #428]	@ (800265c <FACEID+0x5fc>)
 80024b0:	485e      	ldr	r0, [pc, #376]	@ (800262c <FACEID+0x5cc>)
 80024b2:	f7fd ff99 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024b6:	e017      	b.n	80024e8 <FACEID+0x488>
									case 2:
										CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 80024b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002630 <FACEID+0x5d0>)
 80024ba:	495e      	ldr	r1, [pc, #376]	@ (8002634 <FACEID+0x5d4>)
 80024bc:	485b      	ldr	r0, [pc, #364]	@ (800262c <FACEID+0x5cc>)
 80024be:	f7fd ff93 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024c2:	e011      	b.n	80024e8 <FACEID+0x488>
									case 3:
										CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80024c4:	4a5d      	ldr	r2, [pc, #372]	@ (800263c <FACEID+0x5dc>)
 80024c6:	495e      	ldr	r1, [pc, #376]	@ (8002640 <FACEID+0x5e0>)
 80024c8:	4858      	ldr	r0, [pc, #352]	@ (800262c <FACEID+0x5cc>)
 80024ca:	f7fd ff8d 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024ce:	e00b      	b.n	80024e8 <FACEID+0x488>
									case 4:
										CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 80024d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002648 <FACEID+0x5e8>)
 80024d2:	495e      	ldr	r1, [pc, #376]	@ (800264c <FACEID+0x5ec>)
 80024d4:	4855      	ldr	r0, [pc, #340]	@ (800262c <FACEID+0x5cc>)
 80024d6:	f7fd ff87 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024da:	e005      	b.n	80024e8 <FACEID+0x488>
									default:
										CLCD_I2C_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 80024dc:	4a61      	ldr	r2, [pc, #388]	@ (8002664 <FACEID+0x604>)
 80024de:	4957      	ldr	r1, [pc, #348]	@ (800263c <FACEID+0x5dc>)
 80024e0:	4852      	ldr	r0, [pc, #328]	@ (800262c <FACEID+0x5cc>)
 80024e2:	f7fd ff81 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024e6:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 80024e8:	797b      	ldrb	r3, [r7, #5]
 80024ea:	2b23      	cmp	r3, #35	@ 0x23
 80024ec:	f040 80c1 	bne.w	8002672 <FACEID+0x612>
								{
									exitmenu = Delaymenu;
 80024f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <FACEID+0x600>)
 80024f2:	2214      	movs	r2, #20
 80024f4:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80024f6:	7dbb      	ldrb	r3, [r7, #22]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	7cbb      	ldrb	r3, [r7, #18]
 80024fe:	4413      	add	r3, r2
 8002500:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 8002502:	7cbb      	ldrb	r3, [r7, #18]
 8002504:	3b01      	subs	r3, #1
 8002506:	2b03      	cmp	r3, #3
 8002508:	f200 80b0 	bhi.w	800266c <FACEID+0x60c>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <FACEID+0x4b4>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002565 	.word	0x08002565
 800251c:	080025a5 	.word	0x080025a5
 8002520:	080025e5 	.word	0x080025e5
									{
									case 1:
										if (checkfaceid(keyadd2) != 0)
 8002524:	78bb      	ldrb	r3, [r7, #2]
 8002526:	4618      	mov	r0, r3
 8002528:	f001 fa62 	bl	80039f0 <checkfaceid>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <FACEID+0x4f0>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 1 ", "");
 8002532:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <FACEID+0x5c4>)
 8002534:	494c      	ldr	r1, [pc, #304]	@ (8002668 <FACEID+0x608>)
 8002536:	483d      	ldr	r0, [pc, #244]	@ (800262c <FACEID+0x5cc>)
 8002538:	f7fd ff56 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800253c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002540:	f002 f84a 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002544:	4a44      	ldr	r2, [pc, #272]	@ (8002658 <FACEID+0x5f8>)
 8002546:	4945      	ldr	r1, [pc, #276]	@ (800265c <FACEID+0x5fc>)
 8002548:	4838      	ldr	r0, [pc, #224]	@ (800262c <FACEID+0x5cc>)
 800254a:	f7fd ff4d 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd2);
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
										}
										break;
 800254e:	e090      	b.n	8002672 <FACEID+0x612>
											addface(keyadd2);
 8002550:	78bb      	ldrb	r3, [r7, #2]
 8002552:	4618      	mov	r0, r3
 8002554:	f001 f9b0 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002558:	4a3f      	ldr	r2, [pc, #252]	@ (8002658 <FACEID+0x5f8>)
 800255a:	4940      	ldr	r1, [pc, #256]	@ (800265c <FACEID+0x5fc>)
 800255c:	4833      	ldr	r0, [pc, #204]	@ (800262c <FACEID+0x5cc>)
 800255e:	f7fd ff43 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002562:	e086      	b.n	8002672 <FACEID+0x612>
									case 2:
										if (checkfaceid(keyadd2) != 0)
 8002564:	78bb      	ldrb	r3, [r7, #2]
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fa42 	bl	80039f0 <checkfaceid>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00e      	beq.n	8002590 <FACEID+0x530>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 2 ", "");
 8002572:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <FACEID+0x5c4>)
 8002574:	492c      	ldr	r1, [pc, #176]	@ (8002628 <FACEID+0x5c8>)
 8002576:	482d      	ldr	r0, [pc, #180]	@ (800262c <FACEID+0x5cc>)
 8002578:	f7fd ff36 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800257c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002580:	f002 f82a 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002584:	4a2a      	ldr	r2, [pc, #168]	@ (8002630 <FACEID+0x5d0>)
 8002586:	492b      	ldr	r1, [pc, #172]	@ (8002634 <FACEID+0x5d4>)
 8002588:	4828      	ldr	r0, [pc, #160]	@ (800262c <FACEID+0x5cc>)
 800258a:	f7fd ff2d 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd2);
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
										}
										break;
 800258e:	e070      	b.n	8002672 <FACEID+0x612>
											addface(keyadd2);
 8002590:	78bb      	ldrb	r3, [r7, #2]
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f990 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002598:	4a25      	ldr	r2, [pc, #148]	@ (8002630 <FACEID+0x5d0>)
 800259a:	4926      	ldr	r1, [pc, #152]	@ (8002634 <FACEID+0x5d4>)
 800259c:	4823      	ldr	r0, [pc, #140]	@ (800262c <FACEID+0x5cc>)
 800259e:	f7fd ff23 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80025a2:	e066      	b.n	8002672 <FACEID+0x612>
									case 3:
										if (checkfaceid(keyadd2) != 0)
 80025a4:	78bb      	ldrb	r3, [r7, #2]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fa22 	bl	80039f0 <checkfaceid>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <FACEID+0x570>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 3 ", "");
 80025b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002624 <FACEID+0x5c4>)
 80025b4:	4920      	ldr	r1, [pc, #128]	@ (8002638 <FACEID+0x5d8>)
 80025b6:	481d      	ldr	r0, [pc, #116]	@ (800262c <FACEID+0x5cc>)
 80025b8:	f7fd ff16 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80025bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025c0:	f002 f80a 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80025c4:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <FACEID+0x5dc>)
 80025c6:	491e      	ldr	r1, [pc, #120]	@ (8002640 <FACEID+0x5e0>)
 80025c8:	4818      	ldr	r0, [pc, #96]	@ (800262c <FACEID+0x5cc>)
 80025ca:	f7fd ff0d 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd2);
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
										}
										break;
 80025ce:	e050      	b.n	8002672 <FACEID+0x612>
											addface(keyadd2);
 80025d0:	78bb      	ldrb	r3, [r7, #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 f970 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80025d8:	4a18      	ldr	r2, [pc, #96]	@ (800263c <FACEID+0x5dc>)
 80025da:	4919      	ldr	r1, [pc, #100]	@ (8002640 <FACEID+0x5e0>)
 80025dc:	4813      	ldr	r0, [pc, #76]	@ (800262c <FACEID+0x5cc>)
 80025de:	f7fd ff03 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80025e2:	e046      	b.n	8002672 <FACEID+0x612>
									case 4:
										if (checkfaceid(keyadd2) != 0)
 80025e4:	78bb      	ldrb	r3, [r7, #2]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 fa02 	bl	80039f0 <checkfaceid>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <FACEID+0x5b0>
										{
											CLCD_I2C_Display(&LCD1, "  DA CO FACE 4 ", "");
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <FACEID+0x5c4>)
 80025f4:	4913      	ldr	r1, [pc, #76]	@ (8002644 <FACEID+0x5e4>)
 80025f6:	480d      	ldr	r0, [pc, #52]	@ (800262c <FACEID+0x5cc>)
 80025f8:	f7fd fef6 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80025fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002600:	f001 ffea 	bl	80045d8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002604:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <FACEID+0x5e8>)
 8002606:	4911      	ldr	r1, [pc, #68]	@ (800264c <FACEID+0x5ec>)
 8002608:	4808      	ldr	r0, [pc, #32]	@ (800262c <FACEID+0x5cc>)
 800260a:	f7fd feed 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											addface(keyadd2);
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
										}
										break;
 800260e:	e030      	b.n	8002672 <FACEID+0x612>
											addface(keyadd2);
 8002610:	78bb      	ldrb	r3, [r7, #2]
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f950 	bl	80038b8 <addface>
											CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <FACEID+0x5e8>)
 800261a:	490c      	ldr	r1, [pc, #48]	@ (800264c <FACEID+0x5ec>)
 800261c:	4803      	ldr	r0, [pc, #12]	@ (800262c <FACEID+0x5cc>)
 800261e:	f7fd fee3 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002622:	e026      	b.n	8002672 <FACEID+0x612>
 8002624:	0800e0b0 	.word	0x0800e0b0
 8002628:	0800e0c4 	.word	0x0800e0c4
 800262c:	200003d8 	.word	0x200003d8
 8002630:	0800e05c 	.word	0x0800e05c
 8002634:	0800e068 	.word	0x0800e068
 8002638:	0800e0d4 	.word	0x0800e0d4
 800263c:	0800e074 	.word	0x0800e074
 8002640:	0800e080 	.word	0x0800e080
 8002644:	0800e0e4 	.word	0x0800e0e4
 8002648:	0800e08c 	.word	0x0800e08c
 800264c:	0800e098 	.word	0x0800e098
 8002650:	0800dff4 	.word	0x0800dff4
 8002654:	0800e004 	.word	0x0800e004
 8002658:	0800e044 	.word	0x0800e044
 800265c:	0800e050 	.word	0x0800e050
 8002660:	20000020 	.word	0x20000020
 8002664:	0800e0a4 	.word	0x0800e0a4
 8002668:	0800e0b4 	.word	0x0800e0b4
									default:
										back12 = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	747b      	strb	r3, [r7, #17]
										break;
 8002670:	bf00      	nop
							while (back12 == 1)
 8002672:	7c7b      	ldrb	r3, [r7, #17]
 8002674:	2b01      	cmp	r3, #1
 8002676:	f43f aee8 	beq.w	800244a <FACEID+0x3ea>
									}
								}
							}
							CLCD_I2C_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 800267a:	4aa3      	ldr	r2, [pc, #652]	@ (8002908 <FACEID+0x8a8>)
 800267c:	49a3      	ldr	r1, [pc, #652]	@ (800290c <FACEID+0x8ac>)
 800267e:	48a4      	ldr	r0, [pc, #656]	@ (8002910 <FACEID+0x8b0>)
 8002680:	f7fd feb2 	bl	80003e8 <CLCD_I2C_Display>
						default:
							back = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	757b      	strb	r3, [r7, #21]
							break;
 8002688:	bf00      	nop
				while (back == 1)
 800268a:	7d7b      	ldrb	r3, [r7, #21]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f43f ad4c 	beq.w	800212a <FACEID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1, "=>  THEM FACE", "    XOA FACE");
 8002692:	4aa0      	ldr	r2, [pc, #640]	@ (8002914 <FACEID+0x8b4>)
 8002694:	49a0      	ldr	r1, [pc, #640]	@ (8002918 <FACEID+0x8b8>)
 8002696:	489e      	ldr	r0, [pc, #632]	@ (8002910 <FACEID+0x8b0>)
 8002698:	f7fd fea6 	bl	80003e8 <CLCD_I2C_Display>
				break;
 800269c:	f000 bcd1 	b.w	8003042 <FACEID+0xfe2>
			case 1:
				CLCD_I2C_Display(&LCD1, "     SELECT ", "   XOA 1 FACE");
 80026a0:	4a9e      	ldr	r2, [pc, #632]	@ (800291c <FACEID+0x8bc>)
 80026a2:	499f      	ldr	r1, [pc, #636]	@ (8002920 <FACEID+0x8c0>)
 80026a4:	489a      	ldr	r0, [pc, #616]	@ (8002910 <FACEID+0x8b0>)
 80026a6:	f7fd fe9f 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 80026aa:	23ff      	movs	r3, #255	@ 0xff
 80026ac:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80026b2:	f000 bcac 	b.w	800300e <FACEID+0xfae>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80026b6:	200a      	movs	r0, #10
 80026b8:	f7fd fff0 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80026bc:	4603      	mov	r3, r0
 80026be:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80026c0:	4b98      	ldr	r3, [pc, #608]	@ (8002924 <FACEID+0x8c4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <FACEID+0x67a>
					{
						CLCD_I2C_Clear(&LCD1);
 80026c8:	4891      	ldr	r0, [pc, #580]	@ (8002910 <FACEID+0x8b0>)
 80026ca:	f7fd fe7d 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80026ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026d2:	f001 ff81 	bl	80045d8 <HAL_Delay>
						return;
 80026d6:	f000 bcbc 	b.w	8003052 <FACEID+0xff2>
					}
					if (key_pressed == '*')
 80026da:	797b      	ldrb	r3, [r7, #5]
 80026dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80026de:	d139      	bne.n	8002754 <FACEID+0x6f4>
					{
						exitmenu = Delaymenu;
 80026e0:	4b90      	ldr	r3, [pc, #576]	@ (8002924 <FACEID+0x8c4>)
 80026e2:	2214      	movs	r2, #20
 80026e4:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80026e6:	7c3b      	ldrb	r3, [r7, #16]
 80026e8:	3301      	adds	r3, #1
 80026ea:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 80026ec:	7c3b      	ldrb	r3, [r7, #16]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d801      	bhi.n	80026f6 <FACEID+0x696>
 80026f2:	7c3b      	ldrb	r3, [r7, #16]
 80026f4:	e000      	b.n	80026f8 <FACEID+0x698>
 80026f6:	2300      	movs	r3, #0
 80026f8:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 80026fa:	7c3b      	ldrb	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <FACEID+0x6a6>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d006      	beq.n	8002712 <FACEID+0x6b2>
 8002704:	e020      	b.n	8002748 <FACEID+0x6e8>
						{
						case 0:
							CLCD_I2C_Display(&LCD1, "=> XOA 1 FACE", "   XOA TAT CA");
 8002706:	4a88      	ldr	r2, [pc, #544]	@ (8002928 <FACEID+0x8c8>)
 8002708:	4988      	ldr	r1, [pc, #544]	@ (800292c <FACEID+0x8cc>)
 800270a:	4881      	ldr	r0, [pc, #516]	@ (8002910 <FACEID+0x8b0>)
 800270c:	f7fd fe6c 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002710:	e020      	b.n	8002754 <FACEID+0x6f4>
						case 1:
							CLCD_I2C_Display(&LCD1, "   XOA 1 FACE", "=> XOA TAT CA");
 8002712:	4a87      	ldr	r2, [pc, #540]	@ (8002930 <FACEID+0x8d0>)
 8002714:	4981      	ldr	r1, [pc, #516]	@ (800291c <FACEID+0x8bc>)
 8002716:	487e      	ldr	r0, [pc, #504]	@ (8002910 <FACEID+0x8b0>)
 8002718:	f7fd fe66 	bl	80003e8 <CLCD_I2C_Display>
							CLCD_I2C_Clear(&LCD1);
 800271c:	487c      	ldr	r0, [pc, #496]	@ (8002910 <FACEID+0x8b0>)
 800271e:	f7fd fe53 	bl	80003c8 <CLCD_I2C_Clear>
							CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	487a      	ldr	r0, [pc, #488]	@ (8002910 <FACEID+0x8b0>)
 8002728:	f7fd fde4 	bl	80002f4 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, "   XOA 1 FACE");
 800272c:	497b      	ldr	r1, [pc, #492]	@ (800291c <FACEID+0x8bc>)
 800272e:	4878      	ldr	r0, [pc, #480]	@ (8002910 <FACEID+0x8b0>)
 8002730:	f7fd fe33 	bl	800039a <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002734:	2201      	movs	r2, #1
 8002736:	2100      	movs	r1, #0
 8002738:	4875      	ldr	r0, [pc, #468]	@ (8002910 <FACEID+0x8b0>)
 800273a:	f7fd fddb 	bl	80002f4 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, "=> XOA TAT CA");
 800273e:	497c      	ldr	r1, [pc, #496]	@ (8002930 <FACEID+0x8d0>)
 8002740:	4873      	ldr	r0, [pc, #460]	@ (8002910 <FACEID+0x8b0>)
 8002742:	f7fd fe2a 	bl	800039a <CLCD_I2C_WriteString>
							break;
 8002746:	e005      	b.n	8002754 <FACEID+0x6f4>
						default:
							CLCD_I2C_Display(&LCD1, "   XOA TAT CA", "=> BACK");
 8002748:	4a7a      	ldr	r2, [pc, #488]	@ (8002934 <FACEID+0x8d4>)
 800274a:	4977      	ldr	r1, [pc, #476]	@ (8002928 <FACEID+0x8c8>)
 800274c:	4870      	ldr	r0, [pc, #448]	@ (8002910 <FACEID+0x8b0>)
 800274e:	f7fd fe4b 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002752:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002754:	797b      	ldrb	r3, [r7, #5]
 8002756:	2b23      	cmp	r3, #35	@ 0x23
 8002758:	f040 8459 	bne.w	800300e <FACEID+0xfae>
					{
						exitmenu = Delaymenu;
 800275c:	4b71      	ldr	r3, [pc, #452]	@ (8002924 <FACEID+0x8c4>)
 800275e:	2214      	movs	r2, #20
 8002760:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8002762:	7c3b      	ldrb	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <FACEID+0x712>
 8002768:	2b01      	cmp	r3, #1
 800276a:	f000 83e3 	beq.w	8002f34 <FACEID+0xed4>
 800276e:	f000 bc4b 	b.w	8003008 <FACEID+0xfa8>
						{
						case 0:
							CLCD_I2C_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 8002772:	4a71      	ldr	r2, [pc, #452]	@ (8002938 <FACEID+0x8d8>)
 8002774:	4971      	ldr	r1, [pc, #452]	@ (800293c <FACEID+0x8dc>)
 8002776:	4866      	ldr	r0, [pc, #408]	@ (8002910 <FACEID+0x8b0>)
 8002778:	f7fd fe36 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8002784:	e3cc      	b.n	8002f20 <FACEID+0xec0>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002786:	200a      	movs	r0, #10
 8002788:	f7fd ff88 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800278c:	4603      	mov	r3, r0
 800278e:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8002790:	4b64      	ldr	r3, [pc, #400]	@ (8002924 <FACEID+0x8c4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <FACEID+0x74a>
								{
									CLCD_I2C_Clear(&LCD1);
 8002798:	485d      	ldr	r0, [pc, #372]	@ (8002910 <FACEID+0x8b0>)
 800279a:	f7fd fe15 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800279e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027a2:	f001 ff19 	bl	80045d8 <HAL_Delay>
									return;
 80027a6:	f000 bc54 	b.w	8003052 <FACEID+0xff2>
								}
								if (key_pressed == '*')
 80027aa:	797b      	ldrb	r3, [r7, #5]
 80027ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80027ae:	d121      	bne.n	80027f4 <FACEID+0x794>
								{
									statusrm1++;
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d801      	bhi.n	80027c0 <FACEID+0x760>
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	e000      	b.n	80027c2 <FACEID+0x762>
 80027c0:	2300      	movs	r3, #0
 80027c2:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <FACEID+0x770>
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d006      	beq.n	80027dc <FACEID+0x77c>
 80027ce:	e00b      	b.n	80027e8 <FACEID+0x788>
									{
									case 0:
										CLCD_I2C_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 80027d0:	4a59      	ldr	r2, [pc, #356]	@ (8002938 <FACEID+0x8d8>)
 80027d2:	495a      	ldr	r1, [pc, #360]	@ (800293c <FACEID+0x8dc>)
 80027d4:	484e      	ldr	r0, [pc, #312]	@ (8002910 <FACEID+0x8b0>)
 80027d6:	f7fd fe07 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80027da:	e00b      	b.n	80027f4 <FACEID+0x794>
									case 1:
										CLCD_I2C_Display(&LCD1, "   CHON FACE", "=> QUET FACE");
 80027dc:	4a58      	ldr	r2, [pc, #352]	@ (8002940 <FACEID+0x8e0>)
 80027de:	4959      	ldr	r1, [pc, #356]	@ (8002944 <FACEID+0x8e4>)
 80027e0:	484b      	ldr	r0, [pc, #300]	@ (8002910 <FACEID+0x8b0>)
 80027e2:	f7fd fe01 	bl	80003e8 <CLCD_I2C_Display>
										;
										break;
 80027e6:	e005      	b.n	80027f4 <FACEID+0x794>
									default:
										CLCD_I2C_Display(&LCD1, "   QUET FACE", "=> BACK");
 80027e8:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <FACEID+0x8d4>)
 80027ea:	4953      	ldr	r1, [pc, #332]	@ (8002938 <FACEID+0x8d8>)
 80027ec:	4848      	ldr	r0, [pc, #288]	@ (8002910 <FACEID+0x8b0>)
 80027ee:	f7fd fdfb 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80027f2:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 80027f4:	797b      	ldrb	r3, [r7, #5]
 80027f6:	2b23      	cmp	r3, #35	@ 0x23
 80027f8:	f040 8392 	bne.w	8002f20 <FACEID+0xec0>
								{
									exitmenu = Delaymenu;
 80027fc:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <FACEID+0x8c4>)
 80027fe:	2214      	movs	r2, #20
 8002800:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <FACEID+0x7b0>
 8002808:	2b01      	cmp	r3, #1
 800280a:	f000 834b 	beq.w	8002ea4 <FACEID+0xe44>
 800280e:	e384      	b.n	8002f1a <FACEID+0xeba>
									{
									case 0:
										CLCD_I2C_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8002810:	4a4d      	ldr	r2, [pc, #308]	@ (8002948 <FACEID+0x8e8>)
 8002812:	494e      	ldr	r1, [pc, #312]	@ (800294c <FACEID+0x8ec>)
 8002814:	483e      	ldr	r0, [pc, #248]	@ (8002910 <FACEID+0x8b0>)
 8002816:	f7fd fde7 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t statusadd = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8002822:	e335      	b.n	8002e90 <FACEID+0xe30>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002824:	200a      	movs	r0, #10
 8002826:	f7fd ff39 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800282a:	4603      	mov	r3, r0
 800282c:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 800282e:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <FACEID+0x8c4>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <FACEID+0x7e8>
											{
												CLCD_I2C_Clear(&LCD1);
 8002836:	4836      	ldr	r0, [pc, #216]	@ (8002910 <FACEID+0x8b0>)
 8002838:	f7fd fdc6 	bl	80003c8 <CLCD_I2C_Clear>
												HAL_Delay(1000);
 800283c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002840:	f001 feca 	bl	80045d8 <HAL_Delay>
												return;
 8002844:	f000 bc05 	b.w	8003052 <FACEID+0xff2>
											}
											if (key_pressed == '*')
 8002848:	797b      	ldrb	r3, [r7, #5]
 800284a:	2b2a      	cmp	r3, #42	@ 0x2a
 800284c:	d124      	bne.n	8002898 <FACEID+0x838>
											{
												exitmenu = Delaymenu;
 800284e:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <FACEID+0x8c4>)
 8002850:	2214      	movs	r2, #20
 8002852:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8002854:	7b3b      	ldrb	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 800285a:	7b3b      	ldrb	r3, [r7, #12]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d801      	bhi.n	8002864 <FACEID+0x804>
 8002860:	7b3b      	ldrb	r3, [r7, #12]
 8002862:	e000      	b.n	8002866 <FACEID+0x806>
 8002864:	2300      	movs	r3, #0
 8002866:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8002868:	7b3b      	ldrb	r3, [r7, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d002      	beq.n	8002874 <FACEID+0x814>
 800286e:	2b02      	cmp	r3, #2
 8002870:	d006      	beq.n	8002880 <FACEID+0x820>
 8002872:	e00b      	b.n	800288c <FACEID+0x82c>
												{
												case 1:
													CLCD_I2C_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <FACEID+0x8e8>)
 8002876:	4935      	ldr	r1, [pc, #212]	@ (800294c <FACEID+0x8ec>)
 8002878:	4825      	ldr	r0, [pc, #148]	@ (8002910 <FACEID+0x8b0>)
 800287a:	f7fd fdb5 	bl	80003e8 <CLCD_I2C_Display>
													break;
 800287e:	e00b      	b.n	8002898 <FACEID+0x838>
												case 2:
													CLCD_I2C_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 8002880:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <FACEID+0x8a8>)
 8002882:	4922      	ldr	r1, [pc, #136]	@ (800290c <FACEID+0x8ac>)
 8002884:	4822      	ldr	r0, [pc, #136]	@ (8002910 <FACEID+0x8b0>)
 8002886:	f7fd fdaf 	bl	80003e8 <CLCD_I2C_Display>
													break;
 800288a:	e005      	b.n	8002898 <FACEID+0x838>
												default:
													CLCD_I2C_Display(&LCD1, "  FACE TRE EM", "=> BACK");
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <FACEID+0x8d4>)
 800288e:	492e      	ldr	r1, [pc, #184]	@ (8002948 <FACEID+0x8e8>)
 8002890:	481f      	ldr	r0, [pc, #124]	@ (8002910 <FACEID+0x8b0>)
 8002892:	f7fd fda9 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8002896:	bf00      	nop
												}
											}
											if (key_pressed == '#')
 8002898:	797b      	ldrb	r3, [r7, #5]
 800289a:	2b23      	cmp	r3, #35	@ 0x23
 800289c:	f040 82f8 	bne.w	8002e90 <FACEID+0xe30>
											{
												exitmenu = Delaymenu;
 80028a0:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <FACEID+0x8c4>)
 80028a2:	2214      	movs	r2, #20
 80028a4:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 80028a6:	7b3b      	ldrb	r3, [r7, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d003      	beq.n	80028b4 <FACEID+0x854>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f000 818e 	beq.w	8002bce <FACEID+0xb6e>
 80028b2:	e2ea      	b.n	8002e8a <FACEID+0xe2a>
												{
												case 1:
													CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <FACEID+0x8f0>)
 80028b6:	4927      	ldr	r1, [pc, #156]	@ (8002954 <FACEID+0x8f4>)
 80028b8:	4815      	ldr	r0, [pc, #84]	@ (8002910 <FACEID+0x8b0>)
 80028ba:	f7fd fd95 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd1 = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 80028c6:	e178      	b.n	8002bba <FACEID+0xb5a>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 80028c8:	200a      	movs	r0, #10
 80028ca:	f7fd fee7 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80028ce:	4603      	mov	r3, r0
 80028d0:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <FACEID+0x8c4>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <FACEID+0x88a>
														{
															CLCD_I2C_Clear(&LCD1);
 80028da:	480d      	ldr	r0, [pc, #52]	@ (8002910 <FACEID+0x8b0>)
 80028dc:	f7fd fd74 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 80028e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028e4:	f001 fe78 	bl	80045d8 <HAL_Delay>
															return;
 80028e8:	e3b3      	b.n	8003052 <FACEID+0xff2>
														}
														if (key_pressed == '*')
 80028ea:	797b      	ldrb	r3, [r7, #5]
 80028ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ee:	d163      	bne.n	80029b8 <FACEID+0x958>
														{
															exitmenu = Delaymenu;
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <FACEID+0x8c4>)
 80028f2:	2214      	movs	r2, #20
 80028f4:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 80028f6:	7abb      	ldrb	r3, [r7, #10]
 80028f8:	3301      	adds	r3, #1
 80028fa:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 80028fc:	7abb      	ldrb	r3, [r7, #10]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d82a      	bhi.n	8002958 <FACEID+0x8f8>
 8002902:	7abb      	ldrb	r3, [r7, #10]
 8002904:	e029      	b.n	800295a <FACEID+0x8fa>
 8002906:	bf00      	nop
 8002908:	0800e018 	.word	0x0800e018
 800290c:	0800e028 	.word	0x0800e028
 8002910:	200003d8 	.word	0x200003d8
 8002914:	0800df6c 	.word	0x0800df6c
 8002918:	0800df7c 	.word	0x0800df7c
 800291c:	0800e0f4 	.word	0x0800e0f4
 8002920:	0800e104 	.word	0x0800e104
 8002924:	20000020 	.word	0x20000020
 8002928:	0800e114 	.word	0x0800e114
 800292c:	0800e124 	.word	0x0800e124
 8002930:	0800e134 	.word	0x0800e134
 8002934:	0800e03c 	.word	0x0800e03c
 8002938:	0800e144 	.word	0x0800e144
 800293c:	0800e154 	.word	0x0800e154
 8002940:	0800e164 	.word	0x0800e164
 8002944:	0800e174 	.word	0x0800e174
 8002948:	0800dff4 	.word	0x0800dff4
 800294c:	0800e004 	.word	0x0800e004
 8002950:	0800e044 	.word	0x0800e044
 8002954:	0800e050 	.word	0x0800e050
 8002958:	2300      	movs	r3, #0
 800295a:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 800295c:	7abb      	ldrb	r3, [r7, #10]
 800295e:	3b01      	subs	r3, #1
 8002960:	2b03      	cmp	r3, #3
 8002962:	d823      	bhi.n	80029ac <FACEID+0x94c>
 8002964:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <FACEID+0x90c>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	0800297d 	.word	0x0800297d
 8002970:	08002989 	.word	0x08002989
 8002974:	08002995 	.word	0x08002995
 8002978:	080029a1 	.word	0x080029a1
															{
															case 1:
																CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 800297c:	4ab1      	ldr	r2, [pc, #708]	@ (8002c44 <FACEID+0xbe4>)
 800297e:	49b2      	ldr	r1, [pc, #712]	@ (8002c48 <FACEID+0xbe8>)
 8002980:	48b2      	ldr	r0, [pc, #712]	@ (8002c4c <FACEID+0xbec>)
 8002982:	f7fd fd31 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002986:	e017      	b.n	80029b8 <FACEID+0x958>
															case 2:
																CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002988:	4ab1      	ldr	r2, [pc, #708]	@ (8002c50 <FACEID+0xbf0>)
 800298a:	49b2      	ldr	r1, [pc, #712]	@ (8002c54 <FACEID+0xbf4>)
 800298c:	48af      	ldr	r0, [pc, #700]	@ (8002c4c <FACEID+0xbec>)
 800298e:	f7fd fd2b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002992:	e011      	b.n	80029b8 <FACEID+0x958>
															case 3:
																CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002994:	4ab0      	ldr	r2, [pc, #704]	@ (8002c58 <FACEID+0xbf8>)
 8002996:	49b1      	ldr	r1, [pc, #708]	@ (8002c5c <FACEID+0xbfc>)
 8002998:	48ac      	ldr	r0, [pc, #688]	@ (8002c4c <FACEID+0xbec>)
 800299a:	f7fd fd25 	bl	80003e8 <CLCD_I2C_Display>
																break;
 800299e:	e00b      	b.n	80029b8 <FACEID+0x958>
															case 4:
																CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 80029a0:	4aaf      	ldr	r2, [pc, #700]	@ (8002c60 <FACEID+0xc00>)
 80029a2:	49b0      	ldr	r1, [pc, #704]	@ (8002c64 <FACEID+0xc04>)
 80029a4:	48a9      	ldr	r0, [pc, #676]	@ (8002c4c <FACEID+0xbec>)
 80029a6:	f7fd fd1f 	bl	80003e8 <CLCD_I2C_Display>
																break;
 80029aa:	e005      	b.n	80029b8 <FACEID+0x958>
															default:
																CLCD_I2C_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 80029ac:	4aae      	ldr	r2, [pc, #696]	@ (8002c68 <FACEID+0xc08>)
 80029ae:	49aa      	ldr	r1, [pc, #680]	@ (8002c58 <FACEID+0xbf8>)
 80029b0:	48a6      	ldr	r0, [pc, #664]	@ (8002c4c <FACEID+0xbec>)
 80029b2:	f7fd fd19 	bl	80003e8 <CLCD_I2C_Display>
																break;
 80029b6:	bf00      	nop
															}
														}
														if (key_pressed == '#')
 80029b8:	797b      	ldrb	r3, [r7, #5]
 80029ba:	2b23      	cmp	r3, #35	@ 0x23
 80029bc:	f040 80fd 	bne.w	8002bba <FACEID+0xb5a>
														{
															exitmenu = Delaymenu;
 80029c0:	4baa      	ldr	r3, [pc, #680]	@ (8002c6c <FACEID+0xc0c>)
 80029c2:	2214      	movs	r2, #20
 80029c4:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 80029c6:	7b3b      	ldrb	r3, [r7, #12]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	7abb      	ldrb	r3, [r7, #10]
 80029ce:	4413      	add	r3, r2
 80029d0:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 80029d2:	7abb      	ldrb	r3, [r7, #10]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	f200 80ec 	bhi.w	8002bb4 <FACEID+0xb54>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <FACEID+0x984>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a65 	.word	0x08002a65
 80029ec:	08002ad5 	.word	0x08002ad5
 80029f0:	08002b45 	.word	0x08002b45
															{
															case 1:
																if (checkfaceid(keyadd1) == 0)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fffa 	bl	80039f0 <checkfaceid>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <FACEID+0x9c0>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 1 ", "");
 8002a02:	4a9b      	ldr	r2, [pc, #620]	@ (8002c70 <FACEID+0xc10>)
 8002a04:	499b      	ldr	r1, [pc, #620]	@ (8002c74 <FACEID+0xc14>)
 8002a06:	4891      	ldr	r0, [pc, #580]	@ (8002c4c <FACEID+0xbec>)
 8002a08:	f7fd fcee 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a10:	f001 fde2 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002a14:	4a8b      	ldr	r2, [pc, #556]	@ (8002c44 <FACEID+0xbe4>)
 8002a16:	498c      	ldr	r1, [pc, #560]	@ (8002c48 <FACEID+0xbe8>)
 8002a18:	488c      	ldr	r0, [pc, #560]	@ (8002c4c <FACEID+0xbec>)
 8002a1a:	f7fd fce5 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
																	}
																}
																break;
 8002a1e:	e0cc      	b.n	8002bba <FACEID+0xb5a>
																	removeface(checkfaceid(keyadd1));
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 ffe4 	bl	80039f0 <checkfaceid>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 ff92 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002a30:	4a8f      	ldr	r2, [pc, #572]	@ (8002c70 <FACEID+0xc10>)
 8002a32:	4991      	ldr	r1, [pc, #580]	@ (8002c78 <FACEID+0xc18>)
 8002a34:	4885      	ldr	r0, [pc, #532]	@ (8002c4c <FACEID+0xbec>)
 8002a36:	f7fd fcd7 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a3e:	f001 fdcb 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002a42:	f000 fb85 	bl	8003150 <checkcountUID>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <FACEID+0x9f8>
																		startadd();
 8002a4c:	f000 fd0c 	bl	8003468 <startadd>
																		exitmenu = 0;
 8002a50:	4b86      	ldr	r3, [pc, #536]	@ (8002c6c <FACEID+0xc0c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
																break;
 8002a56:	e0b0      	b.n	8002bba <FACEID+0xb5a>
																		CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002a58:	4a7a      	ldr	r2, [pc, #488]	@ (8002c44 <FACEID+0xbe4>)
 8002a5a:	497b      	ldr	r1, [pc, #492]	@ (8002c48 <FACEID+0xbe8>)
 8002a5c:	487b      	ldr	r0, [pc, #492]	@ (8002c4c <FACEID+0xbec>)
 8002a5e:	f7fd fcc3 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002a62:	e0aa      	b.n	8002bba <FACEID+0xb5a>
															case 2:
																if (checkfaceid(keyadd1) == 0)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 ffc2 	bl	80039f0 <checkfaceid>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <FACEID+0xa30>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 2 ", "");
 8002a72:	4a7f      	ldr	r2, [pc, #508]	@ (8002c70 <FACEID+0xc10>)
 8002a74:	4981      	ldr	r1, [pc, #516]	@ (8002c7c <FACEID+0xc1c>)
 8002a76:	4875      	ldr	r0, [pc, #468]	@ (8002c4c <FACEID+0xbec>)
 8002a78:	f7fd fcb6 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002a7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a80:	f001 fdaa 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002a84:	4a72      	ldr	r2, [pc, #456]	@ (8002c50 <FACEID+0xbf0>)
 8002a86:	4973      	ldr	r1, [pc, #460]	@ (8002c54 <FACEID+0xbf4>)
 8002a88:	4870      	ldr	r0, [pc, #448]	@ (8002c4c <FACEID+0xbec>)
 8002a8a:	f7fd fcad 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
																	}
																}
																break;
 8002a8e:	e094      	b.n	8002bba <FACEID+0xb5a>
																	removeface(checkfaceid(keyadd1));
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 ffac 	bl	80039f0 <checkfaceid>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 ff5a 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002aa0:	4a73      	ldr	r2, [pc, #460]	@ (8002c70 <FACEID+0xc10>)
 8002aa2:	4975      	ldr	r1, [pc, #468]	@ (8002c78 <FACEID+0xc18>)
 8002aa4:	4869      	ldr	r0, [pc, #420]	@ (8002c4c <FACEID+0xbec>)
 8002aa6:	f7fd fc9f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aae:	f001 fd93 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002ab2:	f000 fb4d 	bl	8003150 <checkcountUID>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <FACEID+0xa68>
																		startadd();
 8002abc:	f000 fcd4 	bl	8003468 <startadd>
																		exitmenu = 0;
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <FACEID+0xc0c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
																break;
 8002ac6:	e078      	b.n	8002bba <FACEID+0xb5a>
																		CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002ac8:	4a61      	ldr	r2, [pc, #388]	@ (8002c50 <FACEID+0xbf0>)
 8002aca:	4962      	ldr	r1, [pc, #392]	@ (8002c54 <FACEID+0xbf4>)
 8002acc:	485f      	ldr	r0, [pc, #380]	@ (8002c4c <FACEID+0xbec>)
 8002ace:	f7fd fc8b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002ad2:	e072      	b.n	8002bba <FACEID+0xb5a>
															case 3:
																if (checkfaceid(keyadd1) == 0)
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 ff8a 	bl	80039f0 <checkfaceid>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <FACEID+0xaa0>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 3 ", "");
 8002ae2:	4a63      	ldr	r2, [pc, #396]	@ (8002c70 <FACEID+0xc10>)
 8002ae4:	4966      	ldr	r1, [pc, #408]	@ (8002c80 <FACEID+0xc20>)
 8002ae6:	4859      	ldr	r0, [pc, #356]	@ (8002c4c <FACEID+0xbec>)
 8002ae8:	f7fd fc7e 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002aec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002af0:	f001 fd72 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002af4:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <FACEID+0xbf8>)
 8002af6:	4959      	ldr	r1, [pc, #356]	@ (8002c5c <FACEID+0xbfc>)
 8002af8:	4854      	ldr	r0, [pc, #336]	@ (8002c4c <FACEID+0xbec>)
 8002afa:	f7fd fc75 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
																	}
																}
																break;
 8002afe:	e05c      	b.n	8002bba <FACEID+0xb5a>
																	removeface(checkfaceid(keyadd1));
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 ff74 	bl	80039f0 <checkfaceid>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 ff22 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <FACEID+0xc10>)
 8002b12:	4959      	ldr	r1, [pc, #356]	@ (8002c78 <FACEID+0xc18>)
 8002b14:	484d      	ldr	r0, [pc, #308]	@ (8002c4c <FACEID+0xbec>)
 8002b16:	f7fd fc67 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002b1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b1e:	f001 fd5b 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002b22:	f000 fb15 	bl	8003150 <checkcountUID>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <FACEID+0xad8>
																		startadd();
 8002b2c:	f000 fc9c 	bl	8003468 <startadd>
																		exitmenu = 0;
 8002b30:	4b4e      	ldr	r3, [pc, #312]	@ (8002c6c <FACEID+0xc0c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
																break;
 8002b36:	e040      	b.n	8002bba <FACEID+0xb5a>
																		CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002b38:	4a47      	ldr	r2, [pc, #284]	@ (8002c58 <FACEID+0xbf8>)
 8002b3a:	4948      	ldr	r1, [pc, #288]	@ (8002c5c <FACEID+0xbfc>)
 8002b3c:	4843      	ldr	r0, [pc, #268]	@ (8002c4c <FACEID+0xbec>)
 8002b3e:	f7fd fc53 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002b42:	e03a      	b.n	8002bba <FACEID+0xb5a>
															case 4:
																if (checkfaceid(keyadd1) == 0)
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff52 	bl	80039f0 <checkfaceid>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10e      	bne.n	8002b70 <FACEID+0xb10>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 4 ", "");
 8002b52:	4a47      	ldr	r2, [pc, #284]	@ (8002c70 <FACEID+0xc10>)
 8002b54:	494b      	ldr	r1, [pc, #300]	@ (8002c84 <FACEID+0xc24>)
 8002b56:	483d      	ldr	r0, [pc, #244]	@ (8002c4c <FACEID+0xbec>)
 8002b58:	f7fd fc46 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002b5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b60:	f001 fd3a 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002b64:	4a3e      	ldr	r2, [pc, #248]	@ (8002c60 <FACEID+0xc00>)
 8002b66:	493f      	ldr	r1, [pc, #252]	@ (8002c64 <FACEID+0xc04>)
 8002b68:	4838      	ldr	r0, [pc, #224]	@ (8002c4c <FACEID+0xbec>)
 8002b6a:	f7fd fc3d 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
																	}
																}
																break;
 8002b6e:	e024      	b.n	8002bba <FACEID+0xb5a>
																	removeface(checkfaceid(keyadd1));
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 ff3c 	bl	80039f0 <checkfaceid>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 feea 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <FACEID+0xc10>)
 8002b82:	493d      	ldr	r1, [pc, #244]	@ (8002c78 <FACEID+0xc18>)
 8002b84:	4831      	ldr	r0, [pc, #196]	@ (8002c4c <FACEID+0xbec>)
 8002b86:	f7fd fc2f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002b8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b8e:	f001 fd23 	bl	80045d8 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002b92:	f000 fadd 	bl	8003150 <checkcountUID>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <FACEID+0xb48>
																		startadd();
 8002b9c:	f000 fc64 	bl	8003468 <startadd>
																		exitmenu = 0;
 8002ba0:	4b32      	ldr	r3, [pc, #200]	@ (8002c6c <FACEID+0xc0c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
																break;
 8002ba6:	e008      	b.n	8002bba <FACEID+0xb5a>
																		CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c60 <FACEID+0xc00>)
 8002baa:	492e      	ldr	r1, [pc, #184]	@ (8002c64 <FACEID+0xc04>)
 8002bac:	4827      	ldr	r0, [pc, #156]	@ (8002c4c <FACEID+0xbec>)
 8002bae:	f7fd fc1b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002bb2:	e002      	b.n	8002bba <FACEID+0xb5a>
															default:
																back11 = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	727b      	strb	r3, [r7, #9]
																break;
 8002bb8:	bf00      	nop
													while (back11 == 1)
 8002bba:	7a7b      	ldrb	r3, [r7, #9]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	f43f ae83 	beq.w	80028c8 <FACEID+0x868>
															}
														}
													}
													CLCD_I2C_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8002bc2:	4a31      	ldr	r2, [pc, #196]	@ (8002c88 <FACEID+0xc28>)
 8002bc4:	4931      	ldr	r1, [pc, #196]	@ (8002c8c <FACEID+0xc2c>)
 8002bc6:	4821      	ldr	r0, [pc, #132]	@ (8002c4c <FACEID+0xbec>)
 8002bc8:	f7fd fc0e 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8002bcc:	e160      	b.n	8002e90 <FACEID+0xe30>
												case 2:
													CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002bce:	4a1d      	ldr	r2, [pc, #116]	@ (8002c44 <FACEID+0xbe4>)
 8002bd0:	491d      	ldr	r1, [pc, #116]	@ (8002c48 <FACEID+0xbe8>)
 8002bd2:	481e      	ldr	r0, [pc, #120]	@ (8002c4c <FACEID+0xbec>)
 8002bd4:	f7fd fc08 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd2 = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8002be0:	e149      	b.n	8002e76 <FACEID+0xe16>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002be2:	200a      	movs	r0, #10
 8002be4:	f7fd fd5a 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002be8:	4603      	mov	r3, r0
 8002bea:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8002bec:	4b1f      	ldr	r3, [pc, #124]	@ (8002c6c <FACEID+0xc0c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <FACEID+0xba4>
														{
															CLCD_I2C_Clear(&LCD1);
 8002bf4:	4815      	ldr	r0, [pc, #84]	@ (8002c4c <FACEID+0xbec>)
 8002bf6:	f7fd fbe7 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8002bfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bfe:	f001 fceb 	bl	80045d8 <HAL_Delay>
															return;
 8002c02:	e226      	b.n	8003052 <FACEID+0xff2>
														}
														if (key_pressed == '*')
 8002c04:	797b      	ldrb	r3, [r7, #5]
 8002c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c08:	d160      	bne.n	8002ccc <FACEID+0xc6c>
														{
															exitmenu = Delaymenu;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <FACEID+0xc0c>)
 8002c0c:	2214      	movs	r2, #20
 8002c0e:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002c10:	7a3b      	ldrb	r3, [r7, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8002c16:	7a3b      	ldrb	r3, [r7, #8]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d801      	bhi.n	8002c20 <FACEID+0xbc0>
 8002c1c:	7a3b      	ldrb	r3, [r7, #8]
 8002c1e:	e000      	b.n	8002c22 <FACEID+0xbc2>
 8002c20:	2300      	movs	r3, #0
 8002c22:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8002c24:	7a3b      	ldrb	r3, [r7, #8]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d849      	bhi.n	8002cc0 <FACEID+0xc60>
 8002c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <FACEID+0xbd4>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c91 	.word	0x08002c91
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002ca9 	.word	0x08002ca9
 8002c40:	08002cb5 	.word	0x08002cb5
 8002c44:	0800e044 	.word	0x0800e044
 8002c48:	0800e050 	.word	0x0800e050
 8002c4c:	200003d8 	.word	0x200003d8
 8002c50:	0800e05c 	.word	0x0800e05c
 8002c54:	0800e068 	.word	0x0800e068
 8002c58:	0800e074 	.word	0x0800e074
 8002c5c:	0800e080 	.word	0x0800e080
 8002c60:	0800e08c 	.word	0x0800e08c
 8002c64:	0800e098 	.word	0x0800e098
 8002c68:	0800e0a4 	.word	0x0800e0a4
 8002c6c:	20000020 	.word	0x20000020
 8002c70:	0800e0b0 	.word	0x0800e0b0
 8002c74:	0800e184 	.word	0x0800e184
 8002c78:	0800e194 	.word	0x0800e194
 8002c7c:	0800e1a4 	.word	0x0800e1a4
 8002c80:	0800e1b4 	.word	0x0800e1b4
 8002c84:	0800e1c4 	.word	0x0800e1c4
 8002c88:	0800dff4 	.word	0x0800dff4
 8002c8c:	0800e004 	.word	0x0800e004
															{
															case 1:
																CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002c90:	4ab1      	ldr	r2, [pc, #708]	@ (8002f58 <FACEID+0xef8>)
 8002c92:	49b2      	ldr	r1, [pc, #712]	@ (8002f5c <FACEID+0xefc>)
 8002c94:	48b2      	ldr	r0, [pc, #712]	@ (8002f60 <FACEID+0xf00>)
 8002c96:	f7fd fba7 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002c9a:	e017      	b.n	8002ccc <FACEID+0xc6c>
															case 2:
																CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002c9c:	4ab1      	ldr	r2, [pc, #708]	@ (8002f64 <FACEID+0xf04>)
 8002c9e:	49b2      	ldr	r1, [pc, #712]	@ (8002f68 <FACEID+0xf08>)
 8002ca0:	48af      	ldr	r0, [pc, #700]	@ (8002f60 <FACEID+0xf00>)
 8002ca2:	f7fd fba1 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002ca6:	e011      	b.n	8002ccc <FACEID+0xc6c>
															case 3:
																CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002ca8:	4ab0      	ldr	r2, [pc, #704]	@ (8002f6c <FACEID+0xf0c>)
 8002caa:	49b1      	ldr	r1, [pc, #708]	@ (8002f70 <FACEID+0xf10>)
 8002cac:	48ac      	ldr	r0, [pc, #688]	@ (8002f60 <FACEID+0xf00>)
 8002cae:	f7fd fb9b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002cb2:	e00b      	b.n	8002ccc <FACEID+0xc6c>
															case 4:
																CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002cb4:	4aaf      	ldr	r2, [pc, #700]	@ (8002f74 <FACEID+0xf14>)
 8002cb6:	49b0      	ldr	r1, [pc, #704]	@ (8002f78 <FACEID+0xf18>)
 8002cb8:	48a9      	ldr	r0, [pc, #676]	@ (8002f60 <FACEID+0xf00>)
 8002cba:	f7fd fb95 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002cbe:	e005      	b.n	8002ccc <FACEID+0xc6c>
															default:
																CLCD_I2C_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8002cc0:	4aae      	ldr	r2, [pc, #696]	@ (8002f7c <FACEID+0xf1c>)
 8002cc2:	49aa      	ldr	r1, [pc, #680]	@ (8002f6c <FACEID+0xf0c>)
 8002cc4:	48a6      	ldr	r0, [pc, #664]	@ (8002f60 <FACEID+0xf00>)
 8002cc6:	f7fd fb8f 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002cca:	bf00      	nop
															}
														}
														if (key_pressed == '#')
 8002ccc:	797b      	ldrb	r3, [r7, #5]
 8002cce:	2b23      	cmp	r3, #35	@ 0x23
 8002cd0:	f040 80d1 	bne.w	8002e76 <FACEID+0xe16>
														{
															exitmenu = Delaymenu;
 8002cd4:	4baa      	ldr	r3, [pc, #680]	@ (8002f80 <FACEID+0xf20>)
 8002cd6:	2214      	movs	r2, #20
 8002cd8:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8002cda:	7b3b      	ldrb	r3, [r7, #12]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	7a3b      	ldrb	r3, [r7, #8]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8002ce6:	7a3b      	ldrb	r3, [r7, #8]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	f200 80c0 	bhi.w	8002e70 <FACEID+0xe10>
 8002cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <FACEID+0xc98>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d63 	.word	0x08002d63
 8002d00:	08002dbd 	.word	0x08002dbd
 8002d04:	08002e17 	.word	0x08002e17
															{
															case 1:
																if (checkfaceid(keyadd2) == 0)
 8002d08:	793b      	ldrb	r3, [r7, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe70 	bl	80039f0 <checkfaceid>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <FACEID+0xcd4>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 1 ", "");
 8002d16:	4a9b      	ldr	r2, [pc, #620]	@ (8002f84 <FACEID+0xf24>)
 8002d18:	499b      	ldr	r1, [pc, #620]	@ (8002f88 <FACEID+0xf28>)
 8002d1a:	4891      	ldr	r0, [pc, #580]	@ (8002f60 <FACEID+0xf00>)
 8002d1c:	f7fd fb64 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002d20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d24:	f001 fc58 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002d28:	4a8b      	ldr	r2, [pc, #556]	@ (8002f58 <FACEID+0xef8>)
 8002d2a:	498c      	ldr	r1, [pc, #560]	@ (8002f5c <FACEID+0xefc>)
 8002d2c:	488c      	ldr	r0, [pc, #560]	@ (8002f60 <FACEID+0xf00>)
 8002d2e:	f7fd fb5b 	bl	80003e8 <CLCD_I2C_Display>
																	removeface(checkfaceid(keyadd2));
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
																}
																break;
 8002d32:	e0a0      	b.n	8002e76 <FACEID+0xe16>
																	removeface(checkfaceid(keyadd2));
 8002d34:	793b      	ldrb	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fe5a 	bl	80039f0 <checkfaceid>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fe08 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002d44:	4a8f      	ldr	r2, [pc, #572]	@ (8002f84 <FACEID+0xf24>)
 8002d46:	4991      	ldr	r1, [pc, #580]	@ (8002f8c <FACEID+0xf2c>)
 8002d48:	4885      	ldr	r0, [pc, #532]	@ (8002f60 <FACEID+0xf00>)
 8002d4a:	f7fd fb4d 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d52:	f001 fc41 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002d56:	4a80      	ldr	r2, [pc, #512]	@ (8002f58 <FACEID+0xef8>)
 8002d58:	4980      	ldr	r1, [pc, #512]	@ (8002f5c <FACEID+0xefc>)
 8002d5a:	4881      	ldr	r0, [pc, #516]	@ (8002f60 <FACEID+0xf00>)
 8002d5c:	f7fd fb44 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002d60:	e089      	b.n	8002e76 <FACEID+0xe16>
															case 2:
																if (checkfaceid(keyadd2) == 0)
 8002d62:	793b      	ldrb	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fe43 	bl	80039f0 <checkfaceid>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10e      	bne.n	8002d8e <FACEID+0xd2e>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 2 ", "");
 8002d70:	4a84      	ldr	r2, [pc, #528]	@ (8002f84 <FACEID+0xf24>)
 8002d72:	4987      	ldr	r1, [pc, #540]	@ (8002f90 <FACEID+0xf30>)
 8002d74:	487a      	ldr	r0, [pc, #488]	@ (8002f60 <FACEID+0xf00>)
 8002d76:	f7fd fb37 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d7e:	f001 fc2b 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002d82:	4a78      	ldr	r2, [pc, #480]	@ (8002f64 <FACEID+0xf04>)
 8002d84:	4978      	ldr	r1, [pc, #480]	@ (8002f68 <FACEID+0xf08>)
 8002d86:	4876      	ldr	r0, [pc, #472]	@ (8002f60 <FACEID+0xf00>)
 8002d88:	f7fd fb2e 	bl	80003e8 <CLCD_I2C_Display>
																	removeface(checkfaceid(keyadd2));
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
																}
																break;
 8002d8c:	e073      	b.n	8002e76 <FACEID+0xe16>
																	removeface(checkfaceid(keyadd2));
 8002d8e:	793b      	ldrb	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fe2d 	bl	80039f0 <checkfaceid>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fddb 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002d9e:	4a79      	ldr	r2, [pc, #484]	@ (8002f84 <FACEID+0xf24>)
 8002da0:	497a      	ldr	r1, [pc, #488]	@ (8002f8c <FACEID+0xf2c>)
 8002da2:	486f      	ldr	r0, [pc, #444]	@ (8002f60 <FACEID+0xf00>)
 8002da4:	f7fd fb20 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dac:	f001 fc14 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002db0:	4a6c      	ldr	r2, [pc, #432]	@ (8002f64 <FACEID+0xf04>)
 8002db2:	496d      	ldr	r1, [pc, #436]	@ (8002f68 <FACEID+0xf08>)
 8002db4:	486a      	ldr	r0, [pc, #424]	@ (8002f60 <FACEID+0xf00>)
 8002db6:	f7fd fb17 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002dba:	e05c      	b.n	8002e76 <FACEID+0xe16>
															case 3:
																if (checkfaceid(keyadd2) == 0)
 8002dbc:	793b      	ldrb	r3, [r7, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fe16 	bl	80039f0 <checkfaceid>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <FACEID+0xd88>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 3 ", "");
 8002dca:	4a6e      	ldr	r2, [pc, #440]	@ (8002f84 <FACEID+0xf24>)
 8002dcc:	4971      	ldr	r1, [pc, #452]	@ (8002f94 <FACEID+0xf34>)
 8002dce:	4864      	ldr	r0, [pc, #400]	@ (8002f60 <FACEID+0xf00>)
 8002dd0:	f7fd fb0a 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002dd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dd8:	f001 fbfe 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002ddc:	4a63      	ldr	r2, [pc, #396]	@ (8002f6c <FACEID+0xf0c>)
 8002dde:	4964      	ldr	r1, [pc, #400]	@ (8002f70 <FACEID+0xf10>)
 8002de0:	485f      	ldr	r0, [pc, #380]	@ (8002f60 <FACEID+0xf00>)
 8002de2:	f7fd fb01 	bl	80003e8 <CLCD_I2C_Display>
																	removeface(checkfaceid(keyadd2));
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
																}
																break;
 8002de6:	e046      	b.n	8002e76 <FACEID+0xe16>
																	removeface(checkfaceid(keyadd2));
 8002de8:	793b      	ldrb	r3, [r7, #4]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fe00 	bl	80039f0 <checkfaceid>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fdae 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002df8:	4a62      	ldr	r2, [pc, #392]	@ (8002f84 <FACEID+0xf24>)
 8002dfa:	4964      	ldr	r1, [pc, #400]	@ (8002f8c <FACEID+0xf2c>)
 8002dfc:	4858      	ldr	r0, [pc, #352]	@ (8002f60 <FACEID+0xf00>)
 8002dfe:	f7fd faf3 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002e02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e06:	f001 fbe7 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002e0a:	4a58      	ldr	r2, [pc, #352]	@ (8002f6c <FACEID+0xf0c>)
 8002e0c:	4958      	ldr	r1, [pc, #352]	@ (8002f70 <FACEID+0xf10>)
 8002e0e:	4854      	ldr	r0, [pc, #336]	@ (8002f60 <FACEID+0xf00>)
 8002e10:	f7fd faea 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002e14:	e02f      	b.n	8002e76 <FACEID+0xe16>
															case 4:
																if (checkfaceid(keyadd2) == 0)
 8002e16:	793b      	ldrb	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fde9 	bl	80039f0 <checkfaceid>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <FACEID+0xde2>
																{
																	CLCD_I2C_Display(&LCD1, "CHUA CO FACE 4 ", "");
 8002e24:	4a57      	ldr	r2, [pc, #348]	@ (8002f84 <FACEID+0xf24>)
 8002e26:	495c      	ldr	r1, [pc, #368]	@ (8002f98 <FACEID+0xf38>)
 8002e28:	484d      	ldr	r0, [pc, #308]	@ (8002f60 <FACEID+0xf00>)
 8002e2a:	f7fd fadd 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e32:	f001 fbd1 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002e36:	4a4f      	ldr	r2, [pc, #316]	@ (8002f74 <FACEID+0xf14>)
 8002e38:	494f      	ldr	r1, [pc, #316]	@ (8002f78 <FACEID+0xf18>)
 8002e3a:	4849      	ldr	r0, [pc, #292]	@ (8002f60 <FACEID+0xf00>)
 8002e3c:	f7fd fad4 	bl	80003e8 <CLCD_I2C_Display>
																	removeface(checkfaceid(keyadd2));
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
																}
																break;
 8002e40:	e019      	b.n	8002e76 <FACEID+0xe16>
																	removeface(checkfaceid(keyadd2));
 8002e42:	793b      	ldrb	r3, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fdd3 	bl	80039f0 <checkfaceid>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd81 	bl	8003954 <removeface>
																	CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002e52:	4a4c      	ldr	r2, [pc, #304]	@ (8002f84 <FACEID+0xf24>)
 8002e54:	494d      	ldr	r1, [pc, #308]	@ (8002f8c <FACEID+0xf2c>)
 8002e56:	4842      	ldr	r0, [pc, #264]	@ (8002f60 <FACEID+0xf00>)
 8002e58:	f7fd fac6 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e60:	f001 fbba 	bl	80045d8 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002e64:	4a43      	ldr	r2, [pc, #268]	@ (8002f74 <FACEID+0xf14>)
 8002e66:	4944      	ldr	r1, [pc, #272]	@ (8002f78 <FACEID+0xf18>)
 8002e68:	483d      	ldr	r0, [pc, #244]	@ (8002f60 <FACEID+0xf00>)
 8002e6a:	f7fd fabd 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8002e6e:	e002      	b.n	8002e76 <FACEID+0xe16>
															default:
																back12 = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	71fb      	strb	r3, [r7, #7]
																break;
 8002e74:	bf00      	nop
													while (back12 == 1)
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f43f aeb2 	beq.w	8002be2 <FACEID+0xb82>
															}
														}
													}
													CLCD_I2C_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 8002e7e:	4a47      	ldr	r2, [pc, #284]	@ (8002f9c <FACEID+0xf3c>)
 8002e80:	4947      	ldr	r1, [pc, #284]	@ (8002fa0 <FACEID+0xf40>)
 8002e82:	4837      	ldr	r0, [pc, #220]	@ (8002f60 <FACEID+0xf00>)
 8002e84:	f7fd fab0 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8002e88:	e002      	b.n	8002e90 <FACEID+0xe30>
												default:
													backrm10 = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	72fb      	strb	r3, [r7, #11]
													break;
 8002e8e:	bf00      	nop
										while (backrm10 == 1)
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f43f acc6 	beq.w	8002824 <FACEID+0x7c4>
												}
											}
										}
										CLCD_I2C_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 8002e98:	4a42      	ldr	r2, [pc, #264]	@ (8002fa4 <FACEID+0xf44>)
 8002e9a:	4943      	ldr	r1, [pc, #268]	@ (8002fa8 <FACEID+0xf48>)
 8002e9c:	4830      	ldr	r0, [pc, #192]	@ (8002f60 <FACEID+0xf00>)
 8002e9e:	f7fd faa3 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002ea2:	e03d      	b.n	8002f20 <FACEID+0xec0>
									case 1:
										CLCD_I2C_Display(&LCD1, "QUET FACE", "=>  BACK ");
 8002ea4:	4a35      	ldr	r2, [pc, #212]	@ (8002f7c <FACEID+0xf1c>)
 8002ea6:	4941      	ldr	r1, [pc, #260]	@ (8002fac <FACEID+0xf4c>)
 8002ea8:	482d      	ldr	r0, [pc, #180]	@ (8002f60 <FACEID+0xf00>)
 8002eaa:	f7fd fa9d 	bl	80003e8 <CLCD_I2C_Display>
										CDC_Transmit_FS("Rem.00", 6);
 8002eae:	2106      	movs	r1, #6
 8002eb0:	483f      	ldr	r0, [pc, #252]	@ (8002fb0 <FACEID+0xf50>)
 8002eb2:	f009 fdcf 	bl	800ca54 <CDC_Transmit_FS>
										uint8_t rmquet = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002eba:	e021      	b.n	8002f00 <FACEID+0xea0>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	f7fd fbed 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	717b      	strb	r3, [r7, #5]
											if( Rx_Buffer[0] == 'T'){
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <FACEID+0xf54>)
 8002ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8002ecc:	2b54      	cmp	r3, #84	@ 0x54
 8002ece:	d112      	bne.n	8002ef6 <FACEID+0xe96>
												CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <FACEID+0xf24>)
 8002ed2:	492e      	ldr	r1, [pc, #184]	@ (8002f8c <FACEID+0xf2c>)
 8002ed4:	4822      	ldr	r0, [pc, #136]	@ (8002f60 <FACEID+0xf00>)
 8002ed6:	f7fd fa87 	bl	80003e8 <CLCD_I2C_Display>
												HAL_Delay(2000);
 8002eda:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ede:	f001 fb7b 	bl	80045d8 <HAL_Delay>
												memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4833      	ldr	r0, [pc, #204]	@ (8002fb4 <FACEID+0xf54>)
 8002ee8:	f00a f9b2 	bl	800d250 <memset>
												CLCD_I2C_Display(&LCD1, "QUET FACE", "=>  BACK ");
 8002eec:	4a23      	ldr	r2, [pc, #140]	@ (8002f7c <FACEID+0xf1c>)
 8002eee:	492f      	ldr	r1, [pc, #188]	@ (8002fac <FACEID+0xf4c>)
 8002ef0:	481b      	ldr	r0, [pc, #108]	@ (8002f60 <FACEID+0xf00>)
 8002ef2:	f7fd fa79 	bl	80003e8 <CLCD_I2C_Display>
											}
											if (key_pressed == '#')
 8002ef6:	797b      	ldrb	r3, [r7, #5]
 8002ef8:	2b23      	cmp	r3, #35	@ 0x23
 8002efa:	d101      	bne.n	8002f00 <FACEID+0xea0>
											{
												rmquet = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1da      	bne.n	8002ebc <FACEID+0xe5c>
											}
										}
										CDC_Transmit_FS("Exit  ", 6);
 8002f06:	2106      	movs	r1, #6
 8002f08:	482b      	ldr	r0, [pc, #172]	@ (8002fb8 <FACEID+0xf58>)
 8002f0a:	f009 fda3 	bl	800ca54 <CDC_Transmit_FS>
										CLCD_I2C_Display(&LCD1, "   CHON FACE", "=> QUET FACE");;
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <FACEID+0xf5c>)
 8002f10:	492b      	ldr	r1, [pc, #172]	@ (8002fc0 <FACEID+0xf60>)
 8002f12:	4813      	ldr	r0, [pc, #76]	@ (8002f60 <FACEID+0xf00>)
 8002f14:	f7fd fa68 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002f18:	e002      	b.n	8002f20 <FACEID+0xec0>
									default:
										backrm1 = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	737b      	strb	r3, [r7, #13]
										break;
 8002f1e:	bf00      	nop
							while (backrm1 == 1)
 8002f20:	7b7b      	ldrb	r3, [r7, #13]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	f43f ac2f 	beq.w	8002786 <FACEID+0x726>
									}
								}
							}
							CLCD_I2C_Display(&LCD1, "=> XOA 1 FACE", "   XOA TAT CA");
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <FACEID+0xf64>)
 8002f2a:	4927      	ldr	r1, [pc, #156]	@ (8002fc8 <FACEID+0xf68>)
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <FACEID+0xf00>)
 8002f2e:	f7fd fa5b 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002f32:	e06c      	b.n	800300e <FACEID+0xfae>
						case 1:
							sprintf(Tx_Buffer , "Rem.99" );
 8002f34:	4925      	ldr	r1, [pc, #148]	@ (8002fcc <FACEID+0xf6c>)
 8002f36:	4826      	ldr	r0, [pc, #152]	@ (8002fd0 <FACEID+0xf70>)
 8002f38:	f00a f96a 	bl	800d210 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 6);
 8002f3c:	2106      	movs	r1, #6
 8002f3e:	4824      	ldr	r0, [pc, #144]	@ (8002fd0 <FACEID+0xf70>)
 8002f40:	f009 fd88 	bl	800ca54 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002f44:	4a0f      	ldr	r2, [pc, #60]	@ (8002f84 <FACEID+0xf24>)
 8002f46:	4923      	ldr	r1, [pc, #140]	@ (8002fd4 <FACEID+0xf74>)
 8002f48:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <FACEID+0xf00>)
 8002f4a:	f7fd fa4d 	bl	80003e8 <CLCD_I2C_Display>
							exitmenu = 60;
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <FACEID+0xf20>)
 8002f50:	223c      	movs	r2, #60	@ 0x3c
 8002f52:	701a      	strb	r2, [r3, #0]
							while(exitmenu != 0){
 8002f54:	e050      	b.n	8002ff8 <FACEID+0xf98>
 8002f56:	bf00      	nop
 8002f58:	0800e044 	.word	0x0800e044
 8002f5c:	0800e050 	.word	0x0800e050
 8002f60:	200003d8 	.word	0x200003d8
 8002f64:	0800e05c 	.word	0x0800e05c
 8002f68:	0800e068 	.word	0x0800e068
 8002f6c:	0800e074 	.word	0x0800e074
 8002f70:	0800e080 	.word	0x0800e080
 8002f74:	0800e08c 	.word	0x0800e08c
 8002f78:	0800e098 	.word	0x0800e098
 8002f7c:	0800e0a4 	.word	0x0800e0a4
 8002f80:	20000020 	.word	0x20000020
 8002f84:	0800e0b0 	.word	0x0800e0b0
 8002f88:	0800e184 	.word	0x0800e184
 8002f8c:	0800e194 	.word	0x0800e194
 8002f90:	0800e1a4 	.word	0x0800e1a4
 8002f94:	0800e1b4 	.word	0x0800e1b4
 8002f98:	0800e1c4 	.word	0x0800e1c4
 8002f9c:	0800e018 	.word	0x0800e018
 8002fa0:	0800e028 	.word	0x0800e028
 8002fa4:	0800e144 	.word	0x0800e144
 8002fa8:	0800e154 	.word	0x0800e154
 8002fac:	0800e1d4 	.word	0x0800e1d4
 8002fb0:	0800e1e0 	.word	0x0800e1e0
 8002fb4:	20000350 	.word	0x20000350
 8002fb8:	0800e1e8 	.word	0x0800e1e8
 8002fbc:	0800e164 	.word	0x0800e164
 8002fc0:	0800e174 	.word	0x0800e174
 8002fc4:	0800e114 	.word	0x0800e114
 8002fc8:	0800e124 	.word	0x0800e124
 8002fcc:	0800e1f0 	.word	0x0800e1f0
 8002fd0:	200003d0 	.word	0x200003d0
 8002fd4:	0800e1f8 	.word	0x0800e1f8
								if(Rx_Buffer[0] == 'T'){
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <FACEID+0xff8>)
 8002fda:	f993 3000 	ldrsb.w	r3, [r3]
 8002fde:	2b54      	cmp	r3, #84	@ 0x54
 8002fe0:	d10a      	bne.n	8002ff8 <FACEID+0xf98>
									CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800305c <FACEID+0xffc>)
 8002fe4:	491e      	ldr	r1, [pc, #120]	@ (8003060 <FACEID+0x1000>)
 8002fe6:	481f      	ldr	r0, [pc, #124]	@ (8003064 <FACEID+0x1004>)
 8002fe8:	f7fd f9fe 	bl	80003e8 <CLCD_I2C_Display>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002fec:	2280      	movs	r2, #128	@ 0x80
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4819      	ldr	r0, [pc, #100]	@ (8003058 <FACEID+0xff8>)
 8002ff2:	f00a f92d 	bl	800d250 <memset>
									break;
 8002ff6:	e003      	b.n	8003000 <FACEID+0xfa0>
							while(exitmenu != 0){
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <FACEID+0x1008>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1eb      	bne.n	8002fd8 <FACEID+0xf78>
								}
							}
							exitmenu = 0;
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <FACEID+0x1008>)
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
							break;
 8003006:	e002      	b.n	800300e <FACEID+0xfae>
						default:
							backrm = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
							break;
 800300c:	bf00      	nop
				while (backrm == 1)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b01      	cmp	r3, #1
 8003012:	f43f ab50 	beq.w	80026b6 <FACEID+0x656>
						}
					}
				}
				CLCD_I2C_Display(&LCD1, "    THEM FACE", "=>  XOA FACE");
 8003016:	4a15      	ldr	r2, [pc, #84]	@ (800306c <FACEID+0x100c>)
 8003018:	4915      	ldr	r1, [pc, #84]	@ (8003070 <FACEID+0x1010>)
 800301a:	4812      	ldr	r0, [pc, #72]	@ (8003064 <FACEID+0x1004>)
 800301c:	f7fd f9e4 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8003020:	e00f      	b.n	8003042 <FACEID+0xfe2>
			case 2:
				checkface();
 8003022:	f000 fd1b 	bl	8003a5c <checkface>
				CDC_Transmit_FS("Exit  ", 6);
 8003026:	2106      	movs	r1, #6
 8003028:	4812      	ldr	r0, [pc, #72]	@ (8003074 <FACEID+0x1014>)
 800302a:	f009 fd13 	bl	800ca54 <CDC_Transmit_FS>
				CLCD_I2C_Display(&LCD1, "    XOA FACE", "=>  TRA FACE");
 800302e:	4a12      	ldr	r2, [pc, #72]	@ (8003078 <FACEID+0x1018>)
 8003030:	4912      	ldr	r1, [pc, #72]	@ (800307c <FACEID+0x101c>)
 8003032:	480c      	ldr	r0, [pc, #48]	@ (8003064 <FACEID+0x1004>)
 8003034:	f7fd f9d8 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8003038:	e003      	b.n	8003042 <FACEID+0xfe2>
			default:
				exitmenu = 0;
 800303a:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <FACEID+0x1008>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
				break;
 8003040:	bf00      	nop
	while (exitmenu )
 8003042:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <FACEID+0x1008>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f a819 	bne.w	800207e <FACEID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800304c:	4805      	ldr	r0, [pc, #20]	@ (8003064 <FACEID+0x1004>)
 800304e:	f7fd f9bb 	bl	80003c8 <CLCD_I2C_Clear>
}void FINGER()
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000350 	.word	0x20000350
 800305c:	0800e0b0 	.word	0x0800e0b0
 8003060:	0800e194 	.word	0x0800e194
 8003064:	200003d8 	.word	0x200003d8
 8003068:	20000020 	.word	0x20000020
 800306c:	0800df8c 	.word	0x0800df8c
 8003070:	0800df9c 	.word	0x0800df9c
 8003074:	0800e1e8 	.word	0x0800e1e8
 8003078:	0800dfac 	.word	0x0800dfac
 800307c:	0800df6c 	.word	0x0800df6c

08003080 <FINGER>:
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	add_finger();
 8003084:	f000 fa86 	bl	8003594 <add_finger>
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <PASSWORD>:
void PASSWORD(){}
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 80030a2:	f107 030c 	add.w	r3, r7, #12
 80030a6:	2208      	movs	r2, #8
 80030a8:	4619      	mov	r1, r3
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f7fd fdcc 	bl	8000c48 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 80030b0:	7cbb      	ldrb	r3, [r7, #18]
 80030b2:	2bff      	cmp	r3, #255	@ 0xff
 80030b4:	d001      	beq.n	80030ba <CheckUID+0x22>
		return 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e016      	b.n	80030e8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
 80030be:	e00f      	b.n	80030e0 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	3318      	adds	r3, #24
 80030cc:	443b      	add	r3, r7
 80030ce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d001      	beq.n	80030da <CheckUID+0x42>
			return 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e006      	b.n	80030e8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	3301      	adds	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d9ec      	bls.n	80030c0 <CheckUID+0x28>
	}
	return 1;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <CheckListUID+0x5c>)
 80030fa:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80030fc:	e018      	b.n	8003130 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3306      	adds	r3, #6
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fd87 	bl	8000c16 <Flash_Read_2Byte>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003110:	429a      	cmp	r2, r3
 8003112:	d10a      	bne.n	800312a <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffbe 	bl	8003098 <CheckUID>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d103      	bne.n	800312a <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3305      	adds	r3, #5
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	e00b      	b.n	8003142 <CheckListUID+0x52>
		}
		pt = pt + 8;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3308      	adds	r3, #8
 800312e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3305      	adds	r3, #5
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fd62 	bl	8000bfe <Flash_Read_Byte>
 800313a:	4603      	mov	r3, r0
 800313c:	2bff      	cmp	r3, #255	@ 0xff
 800313e:	d1de      	bne.n	80030fe <CheckListUID+0xe>
	}
	return 0;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800f000 	.word	0x0800f000

08003150 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003156:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <checkcountUID+0x60>)
 8003158:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800315e:	e01a      	b.n	8003196 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3306      	adds	r3, #6
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fd56 	bl	8000c16 <Flash_Read_2Byte>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003172:	429a      	cmp	r2, r3
 8003174:	d10c      	bne.n	8003190 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3305      	adds	r3, #5
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fd3f 	bl	8000bfe <Flash_Read_Byte>
 8003180:	4603      	mov	r3, r0
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <checkcountUID+0x40>
			{
				count++;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	3301      	adds	r3, #1
 800318e:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3308      	adds	r3, #8
 8003194:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3305      	adds	r3, #5
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fd2f 	bl	8000bfe <Flash_Read_Byte>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2bff      	cmp	r3, #255	@ 0xff
 80031a4:	d1dc      	bne.n	8003160 <checkcountUID+0x10>
	}
	return count;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	0800f000 	.word	0x0800f000

080031b4 <adduid>:

void adduid(uint8_t key)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
	setaddress();
 80031be:	f000 f9a7 	bl	8003510 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80031c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003274 <adduid+0xc0>)
 80031c4:	492c      	ldr	r1, [pc, #176]	@ (8003278 <adduid+0xc4>)
 80031c6:	482d      	ldr	r0, [pc, #180]	@ (800327c <adduid+0xc8>)
 80031c8:	f7fd f90e 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu)
 80031cc:	e049      	b.n	8003262 <adduid+0xae>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80031ce:	482c      	ldr	r0, [pc, #176]	@ (8003280 <adduid+0xcc>)
 80031d0:	f000 fd6a 	bl	8003ca8 <TM_MFRC522_Check>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13d      	bne.n	8003256 <adduid+0xa2>
		{
			HAL_Delay(100);
 80031da:	2064      	movs	r0, #100	@ 0x64
 80031dc:	f001 f9fc 	bl	80045d8 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 80031e0:	4827      	ldr	r0, [pc, #156]	@ (8003280 <adduid+0xcc>)
 80031e2:	f7ff ff85 	bl	80030f0 <CheckListUID>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11f      	bne.n	800322c <adduid+0x78>
			{
				CardID[5] = key;
 80031ec:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <adduid+0xcc>)
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <adduid+0xd0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2206      	movs	r2, #6
 80031f8:	4921      	ldr	r1, [pc, #132]	@ (8003280 <adduid+0xcc>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fcdc 	bl	8000bb8 <Flash_Write_Array>
				AddressUID += 8;
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <adduid+0xd0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <adduid+0xd0>)
 8003208:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 800320a:	481c      	ldr	r0, [pc, #112]	@ (800327c <adduid+0xc8>)
 800320c:	f7fd f8dc 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	4819      	ldr	r0, [pc, #100]	@ (800327c <adduid+0xc8>)
 8003216:	f7fd f86d 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 800321a:	491b      	ldr	r1, [pc, #108]	@ (8003288 <adduid+0xd4>)
 800321c:	4817      	ldr	r0, [pc, #92]	@ (800327c <adduid+0xc8>)
 800321e:	f7fd f8bc 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8003222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003226:	f001 f9d7 	bl	80045d8 <HAL_Delay>
				return;
 800322a:	e020      	b.n	800326e <adduid+0xba>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 800322c:	4813      	ldr	r0, [pc, #76]	@ (800327c <adduid+0xc8>)
 800322e:	f7fd f8cb 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	4811      	ldr	r0, [pc, #68]	@ (800327c <adduid+0xc8>)
 8003238:	f7fd f85c 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 800323c:	4913      	ldr	r1, [pc, #76]	@ (800328c <adduid+0xd8>)
 800323e:	480f      	ldr	r0, [pc, #60]	@ (800327c <adduid+0xc8>)
 8003240:	f7fd f8ab 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8003244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003248:	f001 f9c6 	bl	80045d8 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800324c:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <adduid+0xc0>)
 800324e:	490a      	ldr	r1, [pc, #40]	@ (8003278 <adduid+0xc4>)
 8003250:	480a      	ldr	r0, [pc, #40]	@ (800327c <adduid+0xc8>)
 8003252:	f7fd f8c9 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8003256:	2064      	movs	r0, #100	@ 0x64
 8003258:	f7fd fa20 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800325c:	4603      	mov	r3, r0
 800325e:	2b23      	cmp	r3, #35	@ 0x23
 8003260:	d004      	beq.n	800326c <adduid+0xb8>
	while (exitmenu)
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <adduid+0xdc>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1b1      	bne.n	80031ce <adduid+0x1a>
 800326a:	e000      	b.n	800326e <adduid+0xba>
		{
			return;
 800326c:	bf00      	nop
		}
	}
}
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	0800dc20 	.word	0x0800dc20
 8003278:	0800e204 	.word	0x0800e204
 800327c:	200003d8 	.word	0x200003d8
 8003280:	200003e4 	.word	0x200003e4
 8003284:	20000024 	.word	0x20000024
 8003288:	0800e210 	.word	0x0800e210
 800328c:	0800e220 	.word	0x0800e220
 8003290:	20000020 	.word	0x20000020

08003294 <checkthe>:

void checkthe(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
	exitmenu = 30;
 800329a:	4b49      	ldr	r3, [pc, #292]	@ (80033c0 <checkthe+0x12c>)
 800329c:	221e      	movs	r2, #30
 800329e:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80032a0:	4a48      	ldr	r2, [pc, #288]	@ (80033c4 <checkthe+0x130>)
 80032a2:	4949      	ldr	r1, [pc, #292]	@ (80033c8 <checkthe+0x134>)
 80032a4:	4849      	ldr	r0, [pc, #292]	@ (80033cc <checkthe+0x138>)
 80032a6:	f7fd f89f 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80032aa:	e07e      	b.n	80033aa <checkthe+0x116>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80032ac:	4848      	ldr	r0, [pc, #288]	@ (80033d0 <checkthe+0x13c>)
 80032ae:	f000 fcfb 	bl	8003ca8 <TM_MFRC522_Check>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d172      	bne.n	800339e <checkthe+0x10a>
		{
			if (CheckListUID(CardID) == 0)
 80032b8:	4845      	ldr	r0, [pc, #276]	@ (80033d0 <checkthe+0x13c>)
 80032ba:	f7ff ff19 	bl	80030f0 <CheckListUID>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d119      	bne.n	80032f8 <checkthe+0x64>
			{
				CLCD_I2C_Clear(&LCD1);
 80032c4:	4841      	ldr	r0, [pc, #260]	@ (80033cc <checkthe+0x138>)
 80032c6:	f7fd f87f 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	483f      	ldr	r0, [pc, #252]	@ (80033cc <checkthe+0x138>)
 80032d0:	f7fd f810 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 80032d4:	493f      	ldr	r1, [pc, #252]	@ (80033d4 <checkthe+0x140>)
 80032d6:	483d      	ldr	r0, [pc, #244]	@ (80033cc <checkthe+0x138>)
 80032d8:	f7fd f85f 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 80032dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032e0:	f001 f97a 	bl	80045d8 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80032e4:	4a37      	ldr	r2, [pc, #220]	@ (80033c4 <checkthe+0x130>)
 80032e6:	4938      	ldr	r1, [pc, #224]	@ (80033c8 <checkthe+0x134>)
 80032e8:	4838      	ldr	r0, [pc, #224]	@ (80033cc <checkthe+0x138>)
 80032ea:	f7fd f87d 	bl	80003e8 <CLCD_I2C_Display>
				HAL_Delay(1000);
 80032ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032f2:	f001 f971 	bl	80045d8 <HAL_Delay>
 80032f6:	e052      	b.n	800339e <checkthe+0x10a>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 80032f8:	4835      	ldr	r0, [pc, #212]	@ (80033d0 <checkthe+0x13c>)
 80032fa:	f7ff fef9 	bl	80030f0 <CheckListUID>
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8003310:	482e      	ldr	r0, [pc, #184]	@ (80033cc <checkthe+0x138>)
 8003312:	f7fd f859 	bl	80003c8 <CLCD_I2C_Clear>
				switch (key1)
 8003316:	797b      	ldrb	r3, [r7, #5]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d109      	bne.n	8003330 <checkthe+0x9c>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	482a      	ldr	r0, [pc, #168]	@ (80033cc <checkthe+0x138>)
 8003322:	f7fc ffe7 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8003326:	492c      	ldr	r1, [pc, #176]	@ (80033d8 <checkthe+0x144>)
 8003328:	4828      	ldr	r0, [pc, #160]	@ (80033cc <checkthe+0x138>)
 800332a:	f7fd f836 	bl	800039a <CLCD_I2C_WriteString>
					break;
 800332e:	e009      	b.n	8003344 <checkthe+0xb0>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	4825      	ldr	r0, [pc, #148]	@ (80033cc <checkthe+0x138>)
 8003336:	f7fc ffdd 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 800333a:	4928      	ldr	r1, [pc, #160]	@ (80033dc <checkthe+0x148>)
 800333c:	4823      	ldr	r0, [pc, #140]	@ (80033cc <checkthe+0x138>)
 800333e:	f7fd f82c 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003342:	bf00      	nop
				}
				switch (key2)
 8003344:	79bb      	ldrb	r3, [r7, #6]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d002      	beq.n	8003350 <checkthe+0xbc>
 800334a:	2b02      	cmp	r3, #2
 800334c:	d00a      	beq.n	8003364 <checkthe+0xd0>
 800334e:	e013      	b.n	8003378 <checkthe+0xe4>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003350:	2201      	movs	r2, #1
 8003352:	2100      	movs	r1, #0
 8003354:	481d      	ldr	r0, [pc, #116]	@ (80033cc <checkthe+0x138>)
 8003356:	f7fc ffcd 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 800335a:	4921      	ldr	r1, [pc, #132]	@ (80033e0 <checkthe+0x14c>)
 800335c:	481b      	ldr	r0, [pc, #108]	@ (80033cc <checkthe+0x138>)
 800335e:	f7fd f81c 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003362:	e013      	b.n	800338c <checkthe+0xf8>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003364:	2201      	movs	r2, #1
 8003366:	2100      	movs	r1, #0
 8003368:	4818      	ldr	r0, [pc, #96]	@ (80033cc <checkthe+0x138>)
 800336a:	f7fc ffc3 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 800336e:	491d      	ldr	r1, [pc, #116]	@ (80033e4 <checkthe+0x150>)
 8003370:	4816      	ldr	r0, [pc, #88]	@ (80033cc <checkthe+0x138>)
 8003372:	f7fd f812 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003376:	e009      	b.n	800338c <checkthe+0xf8>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003378:	2201      	movs	r2, #1
 800337a:	2100      	movs	r1, #0
 800337c:	4813      	ldr	r0, [pc, #76]	@ (80033cc <checkthe+0x138>)
 800337e:	f7fc ffb9 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 8003382:	4919      	ldr	r1, [pc, #100]	@ (80033e8 <checkthe+0x154>)
 8003384:	4811      	ldr	r0, [pc, #68]	@ (80033cc <checkthe+0x138>)
 8003386:	f7fd f808 	bl	800039a <CLCD_I2C_WriteString>
					break;
 800338a:	bf00      	nop
				}
				HAL_Delay(1000);
 800338c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003390:	f001 f922 	bl	80045d8 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8003394:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <checkthe+0x130>)
 8003396:	4915      	ldr	r1, [pc, #84]	@ (80033ec <checkthe+0x158>)
 8003398:	480c      	ldr	r0, [pc, #48]	@ (80033cc <checkthe+0x138>)
 800339a:	f7fd f825 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 800339e:	2064      	movs	r0, #100	@ 0x64
 80033a0:	f7fd f97c 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b23      	cmp	r3, #35	@ 0x23
 80033a8:	d005      	beq.n	80033b6 <checkthe+0x122>
	while (exitmenu )
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <checkthe+0x12c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f47f af7c 	bne.w	80032ac <checkthe+0x18>
 80033b4:	e000      	b.n	80033b8 <checkthe+0x124>
		{
			return;
 80033b6:	bf00      	nop
		}
	}
}
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000020 	.word	0x20000020
 80033c4:	0800dc20 	.word	0x0800dc20
 80033c8:	0800e204 	.word	0x0800e204
 80033cc:	200003d8 	.word	0x200003d8
 80033d0:	200003e4 	.word	0x200003e4
 80033d4:	0800e230 	.word	0x0800e230
 80033d8:	0800e240 	.word	0x0800e240
 80033dc:	0800e24c 	.word	0x0800e24c
 80033e0:	0800e258 	.word	0x0800e258
 80033e4:	0800e260 	.word	0x0800e260
 80033e8:	0800e268 	.word	0x0800e268
 80033ec:	0800df14 	.word	0x0800df14

080033f0 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <CheckKey+0x58>)
 80033fc:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80033fe:	e015      	b.n	800342c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3306      	adds	r3, #6
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fc06 	bl	8000c16 <Flash_Read_2Byte>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003412:	429a      	cmp	r2, r3
 8003414:	d107      	bne.n	8003426 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3305      	adds	r3, #5
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	79fa      	ldrb	r2, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d101      	bne.n	8003426 <CheckKey+0x36>
				return pt;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	e00b      	b.n	800343e <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3308      	adds	r3, #8
 800342a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3305      	adds	r3, #5
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fbe4 	bl	8000bfe <Flash_Read_Byte>
 8003436:	4603      	mov	r3, r0
 8003438:	2bff      	cmp	r3, #255	@ 0xff
 800343a:	d1e1      	bne.n	8003400 <CheckKey+0x10>
	}
	return 0;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	0800f000 	.word	0x0800f000

0800344c <removeuid>:
void removeuid(uint32_t addressrm)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3306      	adds	r3, #6
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fb94 	bl	8000b88 <Flash_Write_2Byte>
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <startadd>:
void startadd(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <startadd+0x84>)
 800346e:	4920      	ldr	r1, [pc, #128]	@ (80034f0 <startadd+0x88>)
 8003470:	4820      	ldr	r0, [pc, #128]	@ (80034f4 <startadd+0x8c>)
 8003472:	f7fc ffb9 	bl	80003e8 <CLCD_I2C_Display>
	setaddress();
 8003476:	f000 f84b 	bl	8003510 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800347a:	481f      	ldr	r0, [pc, #124]	@ (80034f8 <startadd+0x90>)
 800347c:	f000 fc14 	bl	8003ca8 <TM_MFRC522_Check>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f9      	bne.n	800347a <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8003486:	481c      	ldr	r0, [pc, #112]	@ (80034f8 <startadd+0x90>)
 8003488:	f7ff fe32 	bl	80030f0 <CheckListUID>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8003492:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <startadd+0x90>)
 8003494:	2211      	movs	r2, #17
 8003496:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8003498:	4b18      	ldr	r3, [pc, #96]	@ (80034fc <startadd+0x94>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2206      	movs	r2, #6
 800349e:	4916      	ldr	r1, [pc, #88]	@ (80034f8 <startadd+0x90>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fb89 	bl	8000bb8 <Flash_Write_Array>
					AddressUID += 8;
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <startadd+0x94>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	4a13      	ldr	r2, [pc, #76]	@ (80034fc <startadd+0x94>)
 80034ae:	6013      	str	r3, [r2, #0]
					break;
 80034b0:	e00e      	b.n	80034d0 <startadd+0x68>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 80034b2:	4a13      	ldr	r2, [pc, #76]	@ (8003500 <startadd+0x98>)
 80034b4:	4913      	ldr	r1, [pc, #76]	@ (8003504 <startadd+0x9c>)
 80034b6:	480f      	ldr	r0, [pc, #60]	@ (80034f4 <startadd+0x8c>)
 80034b8:	f7fc ff96 	bl	80003e8 <CLCD_I2C_Display>
					HAL_Delay(1000);
 80034bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034c0:	f001 f88a 	bl	80045d8 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 80034c4:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <startadd+0x84>)
 80034c6:	490a      	ldr	r1, [pc, #40]	@ (80034f0 <startadd+0x88>)
 80034c8:	480a      	ldr	r0, [pc, #40]	@ (80034f4 <startadd+0x8c>)
 80034ca:	f7fc ff8d 	bl	80003e8 <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80034ce:	e7d4      	b.n	800347a <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <startadd+0xa0>)
 80034d2:	490e      	ldr	r1, [pc, #56]	@ (800350c <startadd+0xa4>)
 80034d4:	4807      	ldr	r0, [pc, #28]	@ (80034f4 <startadd+0x8c>)
 80034d6:	f7fc ff87 	bl	80003e8 <CLCD_I2C_Display>
	HAL_Delay(1000);
 80034da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034de:	f001 f87b 	bl	80045d8 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 80034e2:	4804      	ldr	r0, [pc, #16]	@ (80034f4 <startadd+0x8c>)
 80034e4:	f7fc ff70 	bl	80003c8 <CLCD_I2C_Clear>
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	0800e270 	.word	0x0800e270
 80034f0:	0800df14 	.word	0x0800df14
 80034f4:	200003d8 	.word	0x200003d8
 80034f8:	200003e4 	.word	0x200003e4
 80034fc:	20000024 	.word	0x20000024
 8003500:	0800e284 	.word	0x0800e284
 8003504:	0800e298 	.word	0x0800e298
 8003508:	0800e2a8 	.word	0x0800e2a8
 800350c:	0800e2b8 	.word	0x0800e2b8

08003510 <setaddress>:
void setaddress(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <setaddress+0x30>)
 8003518:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800351a:	e002      	b.n	8003522 <setaddress+0x12>
	{
		pt = pt + 8;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3308      	adds	r3, #8
 8003520:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3305      	adds	r3, #5
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fb69 	bl	8000bfe <Flash_Read_Byte>
 800352c:	4603      	mov	r3, r0
 800352e:	2bff      	cmp	r3, #255	@ 0xff
 8003530:	d1f4      	bne.n	800351c <setaddress+0xc>
	}
	AddressUID = pt;
 8003532:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <setaddress+0x34>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0800f000 	.word	0x0800f000
 8003544:	20000024 	.word	0x20000024

08003548 <remoall>:

void remoall(){
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800354e:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <remoall+0x44>)
 8003550:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8003552:	e00a      	b.n	800356a <remoall+0x22>
		Flash_Erase(pt);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fd fafb 	bl	8000b50 <Flash_Erase>
		pt = pt + 0x400;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003560:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <remoall+0x48>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fb5f 	bl	8000c2e <Flash_Read_8Byte>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	bf08      	it	eq
 800357a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800357e:	d1e9      	bne.n	8003554 <remoall+0xc>
			break;
	}
}
 8003580:	e000      	b.n	8003584 <remoall+0x3c>
			break;
 8003582:	bf00      	nop
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	0800f000 	.word	0x0800f000
 8003590:	0800fc00 	.word	0x0800fc00

08003594 <add_finger>:
	}
}

//---------- them van tay---------------
void add_finger()
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	vitri2:
	while(1)
	{
		collect_finger();
 8003598:	f7fd f9a0 	bl	80008dc <collect_finger>
		CLCD_I2C_Display(&LCD1, "  Them Van Tay!!     ", "Dat Van Tay!!     ");
 800359c:	4a76      	ldr	r2, [pc, #472]	@ (8003778 <add_finger+0x1e4>)
 800359e:	4977      	ldr	r1, [pc, #476]	@ (800377c <add_finger+0x1e8>)
 80035a0:	4877      	ldr	r0, [pc, #476]	@ (8003780 <add_finger+0x1ec>)
 80035a2:	f7fc ff21 	bl	80003e8 <CLCD_I2C_Display>
		HAL_Delay(1000);
 80035a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035aa:	f001 f815 	bl	80045d8 <HAL_Delay>
	// dat tay vao
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035ae:	2201      	movs	r2, #1
 80035b0:	2100      	movs	r1, #0
 80035b2:	4873      	ldr	r0, [pc, #460]	@ (8003780 <add_finger+0x1ec>)
 80035b4:	f7fc fe9e 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 80035b8:	4972      	ldr	r1, [pc, #456]	@ (8003784 <add_finger+0x1f0>)
 80035ba:	4871      	ldr	r0, [pc, #452]	@ (8003780 <add_finger+0x1ec>)
 80035bc:	f7fc feed 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 80035c0:	4b71      	ldr	r3, [pc, #452]	@ (8003788 <add_finger+0x1f4>)
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 80035c6:	e008      	b.n	80035da <add_finger+0x46>
			collect_finger();
 80035c8:	f7fd f988 	bl	80008dc <collect_finger>
			collect_finger();
 80035cc:	f7fd f986 	bl	80008dc <collect_finger>
			tmp= collect_finger();
 80035d0:	f7fd f984 	bl	80008dc <collect_finger>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003788 <add_finger+0x1f4>)
 80035d8:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 80035da:	4b6b      	ldr	r3, [pc, #428]	@ (8003788 <add_finger+0x1f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f2      	bne.n	80035c8 <add_finger+0x34>
		}
		tmp=0xff;
 80035e2:	4b69      	ldr	r3, [pc, #420]	@ (8003788 <add_finger+0x1f4>)
 80035e4:	22ff      	movs	r2, #255	@ 0xff
 80035e6:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2100      	movs	r1, #0
 80035ec:	4864      	ldr	r0, [pc, #400]	@ (8003780 <add_finger+0x1ec>)
 80035ee:	f7fc fe81 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 80035f2:	4966      	ldr	r1, [pc, #408]	@ (800378c <add_finger+0x1f8>)
 80035f4:	4862      	ldr	r0, [pc, #392]	@ (8003780 <add_finger+0x1ec>)
 80035f6:	f7fc fed0 	bl	800039a <CLCD_I2C_WriteString>
 80035fa:	2064      	movs	r0, #100	@ 0x64
 80035fc:	f000 ffec 	bl	80045d8 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003600:	2201      	movs	r2, #1
 8003602:	2100      	movs	r1, #0
 8003604:	485e      	ldr	r0, [pc, #376]	@ (8003780 <add_finger+0x1ec>)
 8003606:	f7fc fe75 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 800360a:	4961      	ldr	r1, [pc, #388]	@ (8003790 <add_finger+0x1fc>)
 800360c:	485c      	ldr	r0, [pc, #368]	@ (8003780 <add_finger+0x1ec>)
 800360e:	f7fc fec4 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8003612:	4b5d      	ldr	r3, [pc, #372]	@ (8003788 <add_finger+0x1f4>)
 8003614:	22ff      	movs	r2, #255	@ 0xff
 8003616:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 8003618:	e005      	b.n	8003626 <add_finger+0x92>
		tmp=img2tz(0x01);
 800361a:	2001      	movs	r0, #1
 800361c:	f7fd f98a 	bl	8000934 <img2tz>
 8003620:	4603      	mov	r3, r0
 8003622:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <add_finger+0x1f4>)
 8003624:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 8003626:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <add_finger+0x1f4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f5      	bne.n	800361a <add_finger+0x86>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800362e:	2201      	movs	r2, #1
 8003630:	2100      	movs	r1, #0
 8003632:	4853      	ldr	r0, [pc, #332]	@ (8003780 <add_finger+0x1ec>)
 8003634:	f7fc fe5e 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"dat lai van tay !!   ");HAL_Delay(100);
 8003638:	4956      	ldr	r1, [pc, #344]	@ (8003794 <add_finger+0x200>)
 800363a:	4851      	ldr	r0, [pc, #324]	@ (8003780 <add_finger+0x1ec>)
 800363c:	f7fc fead 	bl	800039a <CLCD_I2C_WriteString>
 8003640:	2064      	movs	r0, #100	@ 0x64
 8003642:	f000 ffc9 	bl	80045d8 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003646:	2201      	movs	r2, #1
 8003648:	2100      	movs	r1, #0
 800364a:	484d      	ldr	r0, [pc, #308]	@ (8003780 <add_finger+0x1ec>)
 800364c:	f7fc fe52 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8003650:	494c      	ldr	r1, [pc, #304]	@ (8003784 <add_finger+0x1f0>)
 8003652:	484b      	ldr	r0, [pc, #300]	@ (8003780 <add_finger+0x1ec>)
 8003654:	f7fc fea1 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8003658:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <add_finger+0x1f4>)
 800365a:	22ff      	movs	r2, #255	@ 0xff
 800365c:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00)	{
 800365e:	e008      	b.n	8003672 <add_finger+0xde>
			collect_finger();
 8003660:	f7fd f93c 	bl	80008dc <collect_finger>
			collect_finger();
 8003664:	f7fd f93a 	bl	80008dc <collect_finger>
			tmp=collect_finger();
 8003668:	f7fd f938 	bl	80008dc <collect_finger>
 800366c:	4603      	mov	r3, r0
 800366e:	4a46      	ldr	r2, [pc, #280]	@ (8003788 <add_finger+0x1f4>)
 8003670:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00)	{
 8003672:	4b45      	ldr	r3, [pc, #276]	@ (8003788 <add_finger+0x1f4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <add_finger+0xcc>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800367a:	2201      	movs	r2, #1
 800367c:	2100      	movs	r1, #0
 800367e:	4840      	ldr	r0, [pc, #256]	@ (8003780 <add_finger+0x1ec>)
 8003680:	f7fc fe38 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003684:	4941      	ldr	r1, [pc, #260]	@ (800378c <add_finger+0x1f8>)
 8003686:	483e      	ldr	r0, [pc, #248]	@ (8003780 <add_finger+0x1ec>)
 8003688:	f7fc fe87 	bl	800039a <CLCD_I2C_WriteString>
 800368c:	2064      	movs	r0, #100	@ 0x64
 800368e:	f000 ffa3 	bl	80045d8 <HAL_Delay>
		tmp=0xff;
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <add_finger+0x1f4>)
 8003694:	22ff      	movs	r2, #255	@ 0xff
 8003696:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003698:	2201      	movs	r2, #1
 800369a:	2100      	movs	r1, #0
 800369c:	4838      	ldr	r0, [pc, #224]	@ (8003780 <add_finger+0x1ec>)
 800369e:	f7fc fe29 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 80036a2:	493b      	ldr	r1, [pc, #236]	@ (8003790 <add_finger+0x1fc>)
 80036a4:	4836      	ldr	r0, [pc, #216]	@ (8003780 <add_finger+0x1ec>)
 80036a6:	f7fc fe78 	bl	800039a <CLCD_I2C_WriteString>
		while(tmp!=0x00)	{tmp=img2tz(0x02);}
 80036aa:	e005      	b.n	80036b8 <add_finger+0x124>
 80036ac:	2002      	movs	r0, #2
 80036ae:	f7fd f941 	bl	8000934 <img2tz>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4a34      	ldr	r2, [pc, #208]	@ (8003788 <add_finger+0x1f4>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <add_finger+0x1f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f5      	bne.n	80036ac <add_finger+0x118>
		tmp=0xff;
 80036c0:	4b31      	ldr	r3, [pc, #196]	@ (8003788 <add_finger+0x1f4>)
 80036c2:	22ff      	movs	r2, #255	@ 0xff
 80036c4:	601a      	str	r2, [r3, #0]
		// kiem tra 2 buff co trung nhau khong
		while(tmp!=0x00)
 80036c6:	e01a      	b.n	80036fe <add_finger+0x16a>
		{
			tmp=match();	//HAL_Delay(100);
 80036c8:	f7fd f970 	bl	80009ac <match>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003788 <add_finger+0x1f4>)
 80036d0:	6013      	str	r3, [r2, #0]
			if(tmp==0x08||tmp==0x01)
 80036d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <add_finger+0x1f4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d003      	beq.n	80036e2 <add_finger+0x14e>
 80036da:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <add_finger+0x1f4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10d      	bne.n	80036fe <add_finger+0x16a>
			{
				// loi, lam lai
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2100      	movs	r1, #0
 80036e6:	4826      	ldr	r0, [pc, #152]	@ (8003780 <add_finger+0x1ec>)
 80036e8:	f7fc fe04 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1,"LOI, Lam Lai!!   ");HAL_Delay(1500);
 80036ec:	492a      	ldr	r1, [pc, #168]	@ (8003798 <add_finger+0x204>)
 80036ee:	4824      	ldr	r0, [pc, #144]	@ (8003780 <add_finger+0x1ec>)
 80036f0:	f7fc fe53 	bl	800039a <CLCD_I2C_WriteString>
 80036f4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80036f8:	f000 ff6e 	bl	80045d8 <HAL_Delay>
				goto vitri2;
 80036fc:	e74c      	b.n	8003598 <add_finger+0x4>
		while(tmp!=0x00)
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <add_finger+0x1f4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e0      	bne.n	80036c8 <add_finger+0x134>
			}
		}
		tmp=0xff;
 8003706:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <add_finger+0x1f4>)
 8003708:	22ff      	movs	r2, #255	@ 0xff
 800370a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 800370c:	e007      	b.n	800371e <add_finger+0x18a>
 800370e:	f7fd f979 	bl	8000a04 <regmodel>
 8003712:	4603      	mov	r3, r0
 8003714:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <add_finger+0x1f4>)
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	2064      	movs	r0, #100	@ 0x64
 800371a:	f000 ff5d 	bl	80045d8 <HAL_Delay>
 800371e:	4b1a      	ldr	r3, [pc, #104]	@ (8003788 <add_finger+0x1f4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f3      	bne.n	800370e <add_finger+0x17a>
		tmp=0xff;
 8003726:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <add_finger+0x1f4>)
 8003728:	22ff      	movs	r2, #255	@ 0xff
 800372a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}			// luu id
 800372c:	e00a      	b.n	8003744 <add_finger+0x1b0>
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <add_finger+0x208>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd f992 	bl	8000a5c <store>
 8003738:	4603      	mov	r3, r0
 800373a:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <add_finger+0x1f4>)
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	2064      	movs	r0, #100	@ 0x64
 8003740:	f000 ff4a 	bl	80045d8 <HAL_Delay>
 8003744:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <add_finger+0x1f4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <add_finger+0x19a>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800374c:	2201      	movs	r2, #1
 800374e:	2100      	movs	r1, #0
 8003750:	480b      	ldr	r0, [pc, #44]	@ (8003780 <add_finger+0x1ec>)
 8003752:	f7fc fdcf 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8003756:	4912      	ldr	r1, [pc, #72]	@ (80037a0 <add_finger+0x20c>)
 8003758:	4809      	ldr	r0, [pc, #36]	@ (8003780 <add_finger+0x1ec>)
 800375a:	f7fc fe1e 	bl	800039a <CLCD_I2C_WriteString>
				/***************** DA LUU XONG**************************/
		HAL_Delay(1500);
 800375e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003762:	f000 ff39 	bl	80045d8 <HAL_Delay>
		tmp=0xff;
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <add_finger+0x1f4>)
 8003768:	22ff      	movs	r2, #255	@ 0xff
 800376a:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Clear(&LCD1);
 800376c:	4804      	ldr	r0, [pc, #16]	@ (8003780 <add_finger+0x1ec>)
 800376e:	f7fc fe2b 	bl	80003c8 <CLCD_I2C_Clear>
		break;
 8003772:	bf00      	nop
	}
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	0800e2c8 	.word	0x0800e2c8
 800377c:	0800e2dc 	.word	0x0800e2dc
 8003780:	200003d8 	.word	0x200003d8
 8003784:	0800e2f4 	.word	0x0800e2f4
 8003788:	20000404 	.word	0x20000404
 800378c:	0800e310 	.word	0x0800e310
 8003790:	0800e324 	.word	0x0800e324
 8003794:	0800e33c 	.word	0x0800e33c
 8003798:	0800e354 	.word	0x0800e354
 800379c:	20000408 	.word	0x20000408
 80037a0:	0800e368 	.word	0x0800e368

080037a4 <read_finger>:
						//----------end them van tay---------------
void read_finger()
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <read_finger+0xf4>)
 80037aa:	22ff      	movs	r2, #255	@ 0xff
 80037ac:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 80037ae:	f000 ff09 	bl	80045c4 <HAL_GetTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4a39      	ldr	r2, [pc, #228]	@ (800389c <read_finger+0xf8>)
 80037b6:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 80037b8:	e013      	b.n	80037e2 <read_finger+0x3e>
		tmp=collect_finger();
 80037ba:	f7fd f88f 	bl	80008dc <collect_finger>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <read_finger+0xf4>)
 80037c2:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 80037c4:	f000 fefe 	bl	80045c4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b34      	ldr	r3, [pc, #208]	@ (800389c <read_finger+0xf8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80037d4:	d305      	bcc.n	80037e2 <read_finger+0x3e>
		time_cho=HAL_GetTick();
 80037d6:	f000 fef5 	bl	80045c4 <HAL_GetTick>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a2f      	ldr	r2, [pc, #188]	@ (800389c <read_finger+0xf8>)
 80037de:	6013      	str	r3, [r2, #0]
		return;}
 80037e0:	e059      	b.n	8003896 <read_finger+0xf2>
	while(tmp!=0x00){
 80037e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <read_finger+0xf4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e7      	bne.n	80037ba <read_finger+0x16>

	}
	tmp=0xff;
 80037ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003898 <read_finger+0xf4>)
 80037ec:	22ff      	movs	r2, #255	@ 0xff
 80037ee:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 80037f0:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <read_finger+0xf4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <read_finger+0x60>
 80037f8:	2001      	movs	r0, #1
 80037fa:	f7fd f89b 	bl	8000934 <img2tz>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a25      	ldr	r2, [pc, #148]	@ (8003898 <read_finger+0xf4>)
 8003802:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <read_finger+0xf4>)
 8003806:	22ff      	movs	r2, #255	@ 0xff
 8003808:	601a      	str	r2, [r3, #0]
	tmp=search();
 800380a:	f7fd f966 	bl	8000ada <search>
 800380e:	4603      	mov	r3, r0
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <read_finger+0xf4>)
 8003812:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8003814:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <read_finger+0xf4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11d      	bne.n	8003858 <read_finger+0xb4>
	{
		tmp=0xff;	// co van tay
 800381c:	4b1e      	ldr	r3, [pc, #120]	@ (8003898 <read_finger+0xf4>)
 800381e:	22ff      	movs	r2, #255	@ 0xff
 8003820:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003822:	2201      	movs	r2, #1
 8003824:	2100      	movs	r1, #0
 8003826:	481e      	ldr	r0, [pc, #120]	@ (80038a0 <read_finger+0xfc>)
 8003828:	f7fc fd64 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Mo Cua!");
 800382c:	491d      	ldr	r1, [pc, #116]	@ (80038a4 <read_finger+0x100>)
 800382e:	481c      	ldr	r0, [pc, #112]	@ (80038a0 <read_finger+0xfc>)
 8003830:	f7fc fdb3 	bl	800039a <CLCD_I2C_WriteString>
		sprintf(mess," #id = %c  ",pID);
 8003834:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <read_finger+0x104>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	491c      	ldr	r1, [pc, #112]	@ (80038ac <read_finger+0x108>)
 800383c:	481c      	ldr	r0, [pc, #112]	@ (80038b0 <read_finger+0x10c>)
 800383e:	f009 fce7 	bl	800d210 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003842:	491b      	ldr	r1, [pc, #108]	@ (80038b0 <read_finger+0x10c>)
 8003844:	4816      	ldr	r0, [pc, #88]	@ (80038a0 <read_finger+0xfc>)
 8003846:	f7fc fda8 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 800384a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800384e:	f000 fec3 	bl	80045d8 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003852:	4813      	ldr	r0, [pc, #76]	@ (80038a0 <read_finger+0xfc>)
 8003854:	f7fc fdb8 	bl	80003c8 <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <read_finger+0xf4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b09      	cmp	r3, #9
 800385e:	d11a      	bne.n	8003896 <read_finger+0xf2>
	{
		tmp=0xff;
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <read_finger+0xf4>)
 8003862:	22ff      	movs	r2, #255	@ 0xff
 8003864:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003866:	2201      	movs	r2, #1
 8003868:	2100      	movs	r1, #0
 800386a:	480d      	ldr	r0, [pc, #52]	@ (80038a0 <read_finger+0xfc>)
 800386c:	f7fc fd42 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1," Van Tay Sai!!     "); HAL_Delay(1000);
 8003870:	4910      	ldr	r1, [pc, #64]	@ (80038b4 <read_finger+0x110>)
 8003872:	480b      	ldr	r0, [pc, #44]	@ (80038a0 <read_finger+0xfc>)
 8003874:	f7fc fd91 	bl	800039a <CLCD_I2C_WriteString>
 8003878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800387c:	f000 feac 	bl	80045d8 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003880:	490b      	ldr	r1, [pc, #44]	@ (80038b0 <read_finger+0x10c>)
 8003882:	4807      	ldr	r0, [pc, #28]	@ (80038a0 <read_finger+0xfc>)
 8003884:	f7fc fd89 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8003888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800388c:	f000 fea4 	bl	80045d8 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003890:	4803      	ldr	r0, [pc, #12]	@ (80038a0 <read_finger+0xfc>)
 8003892:	f7fc fd99 	bl	80003c8 <CLCD_I2C_Clear>
	}
}
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000404 	.word	0x20000404
 800389c:	200003f4 	.word	0x200003f4
 80038a0:	200003d8 	.word	0x200003d8
 80038a4:	0800e37c 	.word	0x0800e37c
 80038a8:	20000218 	.word	0x20000218
 80038ac:	0800e384 	.word	0x0800e384
 80038b0:	200003f8 	.word	0x200003f8
 80038b4:	0800e390 	.word	0x0800e390

080038b8 <addface>:
        CLCD_I2C_WriteString(&LCD1, "FALSE FACE");
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
}
void addface(uint8_t key)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Add.%2d", key );
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	461a      	mov	r2, r3
 80038c6:	491a      	ldr	r1, [pc, #104]	@ (8003930 <addface+0x78>)
 80038c8:	481a      	ldr	r0, [pc, #104]	@ (8003934 <addface+0x7c>)
 80038ca:	f009 fca1 	bl	800d210 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 80038ce:	2106      	movs	r1, #6
 80038d0:	4818      	ldr	r0, [pc, #96]	@ (8003934 <addface+0x7c>)
 80038d2:	f009 f8bf 	bl	800ca54 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <addface+0x80>)
 80038d8:	4918      	ldr	r1, [pc, #96]	@ (800393c <addface+0x84>)
 80038da:	4819      	ldr	r0, [pc, #100]	@ (8003940 <addface+0x88>)
 80038dc:	f7fc fd84 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <addface+0x8c>)
 80038e2:	223c      	movs	r2, #60	@ 0x3c
 80038e4:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80038e6:	e015      	b.n	8003914 <addface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 80038e8:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <addface+0x90>)
 80038ea:	f993 3000 	ldrsb.w	r3, [r3]
 80038ee:	2b54      	cmp	r3, #84	@ 0x54
 80038f0:	d105      	bne.n	80038fe <addface+0x46>
			CLCD_I2C_Display(&LCD1, "THEM THANH CONG", "");
 80038f2:	4a11      	ldr	r2, [pc, #68]	@ (8003938 <addface+0x80>)
 80038f4:	4915      	ldr	r1, [pc, #84]	@ (800394c <addface+0x94>)
 80038f6:	4812      	ldr	r0, [pc, #72]	@ (8003940 <addface+0x88>)
 80038f8:	f7fc fd76 	bl	80003e8 <CLCD_I2C_Display>
			break;
 80038fc:	e00e      	b.n	800391c <addface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <addface+0x90>)
 8003900:	f993 3000 	ldrsb.w	r3, [r3]
 8003904:	2b46      	cmp	r3, #70	@ 0x46
 8003906:	d105      	bne.n	8003914 <addface+0x5c>
			CLCD_I2C_Display(&LCD1, "FACE DA TON TAI", "");
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <addface+0x80>)
 800390a:	4911      	ldr	r1, [pc, #68]	@ (8003950 <addface+0x98>)
 800390c:	480c      	ldr	r0, [pc, #48]	@ (8003940 <addface+0x88>)
 800390e:	f7fc fd6b 	bl	80003e8 <CLCD_I2C_Display>
			break;
 8003912:	e003      	b.n	800391c <addface+0x64>
	while(exitmenu != 0){
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <addface+0x8c>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <addface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	2100      	movs	r1, #0
 8003920:	4809      	ldr	r0, [pc, #36]	@ (8003948 <addface+0x90>)
 8003922:	f009 fc95 	bl	800d250 <memset>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	0800e3b0 	.word	0x0800e3b0
 8003934:	200003d0 	.word	0x200003d0
 8003938:	0800e0b0 	.word	0x0800e0b0
 800393c:	0800e1f8 	.word	0x0800e1f8
 8003940:	200003d8 	.word	0x200003d8
 8003944:	20000020 	.word	0x20000020
 8003948:	20000350 	.word	0x20000350
 800394c:	0800e3b8 	.word	0x0800e3b8
 8003950:	0800e3c8 	.word	0x0800e3c8

08003954 <removeface>:
void removeface(uint8_t key)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Rem.%2d", key );
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	461a      	mov	r2, r3
 8003962:	491a      	ldr	r1, [pc, #104]	@ (80039cc <removeface+0x78>)
 8003964:	481a      	ldr	r0, [pc, #104]	@ (80039d0 <removeface+0x7c>)
 8003966:	f009 fc53 	bl	800d210 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 800396a:	2106      	movs	r1, #6
 800396c:	4818      	ldr	r0, [pc, #96]	@ (80039d0 <removeface+0x7c>)
 800396e:	f009 f871 	bl	800ca54 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <removeface+0x80>)
 8003974:	4918      	ldr	r1, [pc, #96]	@ (80039d8 <removeface+0x84>)
 8003976:	4819      	ldr	r0, [pc, #100]	@ (80039dc <removeface+0x88>)
 8003978:	f7fc fd36 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <removeface+0x8c>)
 800397e:	223c      	movs	r2, #60	@ 0x3c
 8003980:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003982:	e015      	b.n	80039b0 <removeface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 8003984:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <removeface+0x90>)
 8003986:	f993 3000 	ldrsb.w	r3, [r3]
 800398a:	2b54      	cmp	r3, #84	@ 0x54
 800398c:	d105      	bne.n	800399a <removeface+0x46>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 800398e:	4a11      	ldr	r2, [pc, #68]	@ (80039d4 <removeface+0x80>)
 8003990:	4915      	ldr	r1, [pc, #84]	@ (80039e8 <removeface+0x94>)
 8003992:	4812      	ldr	r0, [pc, #72]	@ (80039dc <removeface+0x88>)
 8003994:	f7fc fd28 	bl	80003e8 <CLCD_I2C_Display>
			break;
 8003998:	e00e      	b.n	80039b8 <removeface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <removeface+0x90>)
 800399c:	f993 3000 	ldrsb.w	r3, [r3]
 80039a0:	2b46      	cmp	r3, #70	@ 0x46
 80039a2:	d105      	bne.n	80039b0 <removeface+0x5c>
			CLCD_I2C_Display(&LCD1, "FACE CHUA THEM", "");
 80039a4:	4a0b      	ldr	r2, [pc, #44]	@ (80039d4 <removeface+0x80>)
 80039a6:	4911      	ldr	r1, [pc, #68]	@ (80039ec <removeface+0x98>)
 80039a8:	480c      	ldr	r0, [pc, #48]	@ (80039dc <removeface+0x88>)
 80039aa:	f7fc fd1d 	bl	80003e8 <CLCD_I2C_Display>
			break;
 80039ae:	e003      	b.n	80039b8 <removeface+0x64>
	while(exitmenu != 0){
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <removeface+0x8c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <removeface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80039b8:	2280      	movs	r2, #128	@ 0x80
 80039ba:	2100      	movs	r1, #0
 80039bc:	4809      	ldr	r0, [pc, #36]	@ (80039e4 <removeface+0x90>)
 80039be:	f009 fc47 	bl	800d250 <memset>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800e3d8 	.word	0x0800e3d8
 80039d0:	200003d0 	.word	0x200003d0
 80039d4:	0800e0b0 	.word	0x0800e0b0
 80039d8:	0800e1f8 	.word	0x0800e1f8
 80039dc:	200003d8 	.word	0x200003d8
 80039e0:	20000020 	.word	0x20000020
 80039e4:	20000350 	.word	0x20000350
 80039e8:	0800e194 	.word	0x0800e194
 80039ec:	0800e3e0 	.word	0x0800e3e0

080039f0 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Che.%2d", key );
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4912      	ldr	r1, [pc, #72]	@ (8003a48 <checkfaceid+0x58>)
 8003a00:	4812      	ldr	r0, [pc, #72]	@ (8003a4c <checkfaceid+0x5c>)
 8003a02:	f009 fc05 	bl	800d210 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 8003a06:	2106      	movs	r1, #6
 8003a08:	4810      	ldr	r0, [pc, #64]	@ (8003a4c <checkfaceid+0x5c>)
 8003a0a:	f009 f823 	bl	800ca54 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8003a0e:	e000      	b.n	8003a12 <checkfaceid+0x22>
		continue;
 8003a10:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8003a12:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <checkfaceid+0x60>)
 8003a14:	f993 3000 	ldrsb.w	r3, [r3]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f9      	beq.n	8003a10 <checkfaceid+0x20>
	}
	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a54 <checkfaceid+0x64>)
 8003a1e:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <checkfaceid+0x60>)
 8003a20:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <checkfaceid+0x68>)
 8003a22:	f7fc fce1 	bl	80003e8 <CLCD_I2C_Display>
	HAL_Delay(1000);
 8003a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a2a:	f000 fdd5 	bl	80045d8 <HAL_Delay>
	if(Rx_Buffer[0] == '0'){
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <checkfaceid+0x60>)
 8003a30:	f993 3000 	ldrsb.w	r3, [r3]
 8003a34:	2b30      	cmp	r3, #48	@ 0x30
 8003a36:	d101      	bne.n	8003a3c <checkfaceid+0x4c>
		return 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <checkfaceid+0x4e>
	}
	return key;
 8003a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	0800e3f0 	.word	0x0800e3f0
 8003a4c:	200003d0 	.word	0x200003d0
 8003a50:	20000350 	.word	0x20000350
 8003a54:	0800e0b0 	.word	0x0800e0b0
 8003a58:	200003d8 	.word	0x200003d8

08003a5c <checkface>:

void checkface(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
	CDC_Transmit_FS("Che.00", 6);
 8003a62:	2106      	movs	r1, #6
 8003a64:	4858      	ldr	r0, [pc, #352]	@ (8003bc8 <checkface+0x16c>)
 8003a66:	f008 fff5 	bl	800ca54 <CDC_Transmit_FS>
	exitmenu = 60;
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <checkface+0x170>)
 8003a6c:	223c      	movs	r2, #60	@ 0x3c
 8003a6e:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "QUET FACE", "=>  BACK");
 8003a70:	4a57      	ldr	r2, [pc, #348]	@ (8003bd0 <checkface+0x174>)
 8003a72:	4958      	ldr	r1, [pc, #352]	@ (8003bd4 <checkface+0x178>)
 8003a74:	4858      	ldr	r0, [pc, #352]	@ (8003bd8 <checkface+0x17c>)
 8003a76:	f7fc fcb7 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 8003a7a:	e096      	b.n	8003baa <checkface+0x14e>
	{
		if (Rx_Buffer[0] != 0)
 8003a7c:	4b57      	ldr	r3, [pc, #348]	@ (8003bdc <checkface+0x180>)
 8003a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 808b 	beq.w	8003b9e <checkface+0x142>
		{

			if (Rx_Buffer[0] == 'F')
 8003a88:	4b54      	ldr	r3, [pc, #336]	@ (8003bdc <checkface+0x180>)
 8003a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a8e:	2b46      	cmp	r3, #70	@ 0x46
 8003a90:	d112      	bne.n	8003ab8 <checkface+0x5c>
			{
				CLCD_I2C_Display(&LCD1, "FACE CHUA THEM", "");
 8003a92:	4a53      	ldr	r2, [pc, #332]	@ (8003be0 <checkface+0x184>)
 8003a94:	4953      	ldr	r1, [pc, #332]	@ (8003be4 <checkface+0x188>)
 8003a96:	4850      	ldr	r0, [pc, #320]	@ (8003bd8 <checkface+0x17c>)
 8003a98:	f7fc fca6 	bl	80003e8 <CLCD_I2C_Display>
				HAL_Delay(1000);
 8003a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003aa0:	f000 fd9a 	bl	80045d8 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "QUET FACE", "=>  BACK");
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd0 <checkface+0x174>)
 8003aa6:	494b      	ldr	r1, [pc, #300]	@ (8003bd4 <checkface+0x178>)
 8003aa8:	484b      	ldr	r0, [pc, #300]	@ (8003bd8 <checkface+0x17c>)
 8003aaa:	f7fc fc9d 	bl	80003e8 <CLCD_I2C_Display>
				HAL_Delay(1000);
 8003aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ab2:	f000 fd91 	bl	80045d8 <HAL_Delay>
 8003ab6:	e06d      	b.n	8003b94 <checkface+0x138>
			}
			else
			{
				uint8_t key = (Rx_Buffer[5] -48)*10 + (Rx_Buffer[6] -48) ;
 8003ab8:	4b48      	ldr	r3, [pc, #288]	@ (8003bdc <checkface+0x180>)
 8003aba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003abe:	3b30      	subs	r3, #48	@ 0x30
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <checkface+0x180>)
 8003ace:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3b30      	subs	r3, #48	@ 0x30
 8003ada:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8003aea:	483b      	ldr	r0, [pc, #236]	@ (8003bd8 <checkface+0x17c>)
 8003aec:	f7fc fc6c 	bl	80003c8 <CLCD_I2C_Clear>
				switch (key1)
 8003af0:	797b      	ldrb	r3, [r7, #5]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d109      	bne.n	8003b0a <checkface+0xae>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	4837      	ldr	r0, [pc, #220]	@ (8003bd8 <checkface+0x17c>)
 8003afc:	f7fc fbfa 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE NGUOI LON");
 8003b00:	4939      	ldr	r1, [pc, #228]	@ (8003be8 <checkface+0x18c>)
 8003b02:	4835      	ldr	r0, [pc, #212]	@ (8003bd8 <checkface+0x17c>)
 8003b04:	f7fc fc49 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b08:	e009      	b.n	8003b1e <checkface+0xc2>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4832      	ldr	r0, [pc, #200]	@ (8003bd8 <checkface+0x17c>)
 8003b10:	f7fc fbf0 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE TRE EM");
 8003b14:	4935      	ldr	r1, [pc, #212]	@ (8003bec <checkface+0x190>)
 8003b16:	4830      	ldr	r0, [pc, #192]	@ (8003bd8 <checkface+0x17c>)
 8003b18:	f7fc fc3f 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b1c:	bf00      	nop
				}
				switch (key2)
 8003b1e:	79bb      	ldrb	r3, [r7, #6]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d01a      	beq.n	8003b5a <checkface+0xfe>
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	dc22      	bgt.n	8003b6e <checkface+0x112>
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <checkface+0xd6>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d00a      	beq.n	8003b46 <checkface+0xea>
 8003b30:	e01d      	b.n	8003b6e <checkface+0x112>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003b32:	2201      	movs	r2, #1
 8003b34:	2100      	movs	r1, #0
 8003b36:	4828      	ldr	r0, [pc, #160]	@ (8003bd8 <checkface+0x17c>)
 8003b38:	f7fc fbdc 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE 1");
 8003b3c:	492c      	ldr	r1, [pc, #176]	@ (8003bf0 <checkface+0x194>)
 8003b3e:	4826      	ldr	r0, [pc, #152]	@ (8003bd8 <checkface+0x17c>)
 8003b40:	f7fc fc2b 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b44:	e01d      	b.n	8003b82 <checkface+0x126>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003b46:	2201      	movs	r2, #1
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4823      	ldr	r0, [pc, #140]	@ (8003bd8 <checkface+0x17c>)
 8003b4c:	f7fc fbd2 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE 2");
 8003b50:	4928      	ldr	r1, [pc, #160]	@ (8003bf4 <checkface+0x198>)
 8003b52:	4821      	ldr	r0, [pc, #132]	@ (8003bd8 <checkface+0x17c>)
 8003b54:	f7fc fc21 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b58:	e013      	b.n	8003b82 <checkface+0x126>
				case 3:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	481e      	ldr	r0, [pc, #120]	@ (8003bd8 <checkface+0x17c>)
 8003b60:	f7fc fbc8 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE 3");
 8003b64:	4924      	ldr	r1, [pc, #144]	@ (8003bf8 <checkface+0x19c>)
 8003b66:	481c      	ldr	r0, [pc, #112]	@ (8003bd8 <checkface+0x17c>)
 8003b68:	f7fc fc17 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b6c:	e009      	b.n	8003b82 <checkface+0x126>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2100      	movs	r1, #0
 8003b72:	4819      	ldr	r0, [pc, #100]	@ (8003bd8 <checkface+0x17c>)
 8003b74:	f7fc fbbe 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "FACE 4");
 8003b78:	4920      	ldr	r1, [pc, #128]	@ (8003bfc <checkface+0x1a0>)
 8003b7a:	4817      	ldr	r0, [pc, #92]	@ (8003bd8 <checkface+0x17c>)
 8003b7c:	f7fc fc0d 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8003b80:	bf00      	nop
				}
				HAL_Delay(2000);
 8003b82:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b86:	f000 fd27 	bl	80045d8 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "QUET FACE", "=>  BACK");
 8003b8a:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <checkface+0x174>)
 8003b8c:	4911      	ldr	r1, [pc, #68]	@ (8003bd4 <checkface+0x178>)
 8003b8e:	4812      	ldr	r0, [pc, #72]	@ (8003bd8 <checkface+0x17c>)
 8003b90:	f7fc fc2a 	bl	80003e8 <CLCD_I2C_Display>
			}
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	2100      	movs	r1, #0
 8003b98:	4810      	ldr	r0, [pc, #64]	@ (8003bdc <checkface+0x180>)
 8003b9a:	f009 fb59 	bl	800d250 <memset>
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8003b9e:	2064      	movs	r0, #100	@ 0x64
 8003ba0:	f7fc fd7c 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b23      	cmp	r3, #35	@ 0x23
 8003ba8:	d005      	beq.n	8003bb6 <checkface+0x15a>
	while (exitmenu )
 8003baa:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <checkface+0x170>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f af64 	bne.w	8003a7c <checkface+0x20>
 8003bb4:	e000      	b.n	8003bb8 <checkface+0x15c>
		{
			break;
 8003bb6:	bf00      	nop
		}
	}
	CDC_Transmit_FS("Exit  ", 6);
 8003bb8:	2106      	movs	r1, #6
 8003bba:	4811      	ldr	r0, [pc, #68]	@ (8003c00 <checkface+0x1a4>)
 8003bbc:	f008 ff4a 	bl	800ca54 <CDC_Transmit_FS>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0800e3f8 	.word	0x0800e3f8
 8003bcc:	20000020 	.word	0x20000020
 8003bd0:	0800dfbc 	.word	0x0800dfbc
 8003bd4:	0800e1d4 	.word	0x0800e1d4
 8003bd8:	200003d8 	.word	0x200003d8
 8003bdc:	20000350 	.word	0x20000350
 8003be0:	0800e0b0 	.word	0x0800e0b0
 8003be4:	0800e3e0 	.word	0x0800e3e0
 8003be8:	0800dfd8 	.word	0x0800dfd8
 8003bec:	0800e400 	.word	0x0800e400
 8003bf0:	0800e40c 	.word	0x0800e40c
 8003bf4:	0800e414 	.word	0x0800e414
 8003bf8:	0800e41c 	.word	0x0800e41c
 8003bfc:	0800e424 	.word	0x0800e424
 8003c00:	0800e1e8 	.word	0x0800e1e8

08003c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c08:	b672      	cpsid	i
}
 8003c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <Error_Handler+0x8>

08003c10 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003c1e:	bf00      	nop
 8003c20:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <TM_SPI_Send+0x4c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d1f8      	bne.n	8003c20 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003c2e:	f107 0208 	add.w	r2, r7, #8
 8003c32:	f107 010c 	add.w	r1, r7, #12
 8003c36:	230a      	movs	r3, #10
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4807      	ldr	r0, [pc, #28]	@ (8003c5c <TM_SPI_Send+0x4c>)
 8003c3e:	f003 feff 	bl	8007a40 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003c42:	bf00      	nop
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <TM_SPI_Send+0x4c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b80      	cmp	r3, #128	@ 0x80
 8003c50:	d0f8      	beq.n	8003c44 <TM_SPI_Send+0x34>
	return data_re[0];
 8003c52:	7a3b      	ldrb	r3, [r7, #8]

}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000270 	.word	0x20000270

08003c60 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003c64:	f000 f8d5 	bl	8003e12 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003c68:	218d      	movs	r1, #141	@ 0x8d
 8003c6a:	202a      	movs	r0, #42	@ 0x2a
 8003c6c:	f000 f836 	bl	8003cdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003c70:	213e      	movs	r1, #62	@ 0x3e
 8003c72:	202b      	movs	r0, #43	@ 0x2b
 8003c74:	f000 f832 	bl	8003cdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003c78:	211e      	movs	r1, #30
 8003c7a:	202d      	movs	r0, #45	@ 0x2d
 8003c7c:	f000 f82e 	bl	8003cdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003c80:	2100      	movs	r1, #0
 8003c82:	202c      	movs	r0, #44	@ 0x2c
 8003c84:	f000 f82a 	bl	8003cdc <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003c88:	2170      	movs	r1, #112	@ 0x70
 8003c8a:	2026      	movs	r0, #38	@ 0x26
 8003c8c:	f000 f826 	bl	8003cdc <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003c90:	2140      	movs	r1, #64	@ 0x40
 8003c92:	2015      	movs	r0, #21
 8003c94:	f000 f822 	bl	8003cdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003c98:	213d      	movs	r1, #61	@ 0x3d
 8003c9a:	2011      	movs	r0, #17
 8003c9c:	f000 f81e 	bl	8003cdc <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003ca0:	f000 f8a2 	bl	8003de8 <TM_MFRC522_AntennaOn>
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	2026      	movs	r0, #38	@ 0x26
 8003cb4:	f000 f8b5 	bl	8003e22 <TM_MFRC522_Request>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9a1 	bl	800400a <TM_MFRC522_Anticoll>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003ccc:	f000 fa23 	bl	8004116 <TM_MFRC522_Halt>
	return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	71fb      	strb	r3, [r7, #7]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003cec:	2200      	movs	r2, #0
 8003cee:	2110      	movs	r1, #16
 8003cf0:	480c      	ldr	r0, [pc, #48]	@ (8003d24 <TM_MFRC522_WriteRegister+0x48>)
 8003cf2:	f001 f93e 	bl	8004f72 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff84 	bl	8003c10 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003d08:	79bb      	ldrb	r3, [r7, #6]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff80 	bl	8003c10 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003d10:	2201      	movs	r2, #1
 8003d12:	2110      	movs	r1, #16
 8003d14:	4803      	ldr	r0, [pc, #12]	@ (8003d24 <TM_MFRC522_WriteRegister+0x48>)
 8003d16:	f001 f92c 	bl	8004f72 <HAL_GPIO_WritePin>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40010800 	.word	0x40010800

08003d28 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003d32:	2200      	movs	r2, #0
 8003d34:	2110      	movs	r1, #16
 8003d36:	480f      	ldr	r0, [pc, #60]	@ (8003d74 <TM_MFRC522_ReadRegister+0x4c>)
 8003d38:	f001 f91b 	bl	8004f72 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5d 	bl	8003c10 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003d56:	2000      	movs	r0, #0
 8003d58:	f7ff ff5a 	bl	8003c10 <TM_SPI_Send>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003d60:	2201      	movs	r2, #1
 8003d62:	2110      	movs	r1, #16
 8003d64:	4803      	ldr	r0, [pc, #12]	@ (8003d74 <TM_MFRC522_ReadRegister+0x4c>)
 8003d66:	f001 f904 	bl	8004f72 <HAL_GPIO_WritePin>

	return val;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40010800 	.word	0x40010800

08003d78 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	460a      	mov	r2, r1
 8003d82:	71fb      	strb	r3, [r7, #7]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ffcc 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	79bb      	ldrb	r3, [r7, #6]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff9c 	bl	8003cdc <TM_MFRC522_WriteRegister>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	460a      	mov	r2, r1
 8003db6:	71fb      	strb	r3, [r7, #7]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ffb2 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	b25a      	sxtb	r2, r3
 8003dc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff7e 	bl	8003cdc <TM_MFRC522_WriteRegister>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003dee:	2014      	movs	r0, #20
 8003df0:	f7ff ff9a 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003e02:	2103      	movs	r1, #3
 8003e04:	2014      	movs	r0, #20
 8003e06:	f7ff ffb7 	bl	8003d78 <TM_MFRC522_SetBitMask>
	}
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003e12:	b580      	push	{r7, lr}
 8003e14:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003e16:	210f      	movs	r1, #15
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7ff ff5f 	bl	8003cdc <TM_MFRC522_WriteRegister>
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af02      	add	r7, sp, #8
 8003e28:	4603      	mov	r3, r0
 8003e2a:	6039      	str	r1, [r7, #0]
 8003e2c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003e2e:	2107      	movs	r1, #7
 8003e30:	200d      	movs	r0, #13
 8003e32:	f7ff ff53 	bl	8003cdc <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	79fa      	ldrb	r2, [r7, #7]
 8003e3a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	200c      	movs	r0, #12
 8003e4a:	f000 f80f 	bl	8003e6c <TM_MFRC522_ToCard>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <TM_MFRC522_Request+0x3c>
 8003e58:	89bb      	ldrh	r3, [r7, #12]
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d001      	beq.n	8003e62 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	4603      	mov	r3, r0
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d006      	beq.n	8003e9e <TM_MFRC522_ToCard+0x32>
 8003e90:	2b0e      	cmp	r3, #14
 8003e92:	d109      	bne.n	8003ea8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003e94:	2312      	movs	r3, #18
 8003e96:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003e98:	2310      	movs	r3, #16
 8003e9a:	757b      	strb	r3, [r7, #21]
			break;
 8003e9c:	e005      	b.n	8003eaa <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003e9e:	2377      	movs	r3, #119	@ 0x77
 8003ea0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003ea2:	2330      	movs	r3, #48	@ 0x30
 8003ea4:	757b      	strb	r3, [r7, #21]
			break;
 8003ea6:	e000      	b.n	8003eaa <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003ea8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003eaa:	7dbb      	ldrb	r3, [r7, #22]
 8003eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f7ff ff11 	bl	8003cdc <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	2004      	movs	r0, #4
 8003ebe:	f7ff ff75 	bl	8003dac <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	200a      	movs	r0, #10
 8003ec6:	f7ff ff57 	bl	8003d78 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003eca:	2100      	movs	r1, #0
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7ff ff05 	bl	8003cdc <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	827b      	strh	r3, [r7, #18]
 8003ed6:	e00a      	b.n	8003eee <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003ed8:	8a7b      	ldrh	r3, [r7, #18]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	2009      	movs	r0, #9
 8003ee4:	f7ff fefa 	bl	8003cdc <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003ee8:	8a7b      	ldrh	r3, [r7, #18]
 8003eea:	3301      	adds	r3, #1
 8003eec:	827b      	strh	r3, [r7, #18]
 8003eee:	7bbb      	ldrb	r3, [r7, #14]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8a7a      	ldrh	r2, [r7, #18]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3ef      	bcc.n	8003ed8 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	4619      	mov	r1, r3
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7ff feed 	bl	8003cdc <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d103      	bne.n	8003f10 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003f08:	2180      	movs	r1, #128	@ 0x80
 8003f0a:	200d      	movs	r0, #13
 8003f0c:	f7ff ff34 	bl	8003d78 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003f10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003f14:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003f16:	2004      	movs	r0, #4
 8003f18:	f7ff ff06 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	753b      	strb	r3, [r7, #20]
		i--;
 8003f20:	8a7b      	ldrh	r3, [r7, #18]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003f26:	8a7b      	ldrh	r3, [r7, #18]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <TM_MFRC522_ToCard+0xd6>
 8003f2c:	7d3b      	ldrb	r3, [r7, #20]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <TM_MFRC522_ToCard+0xd6>
 8003f36:	7d3a      	ldrb	r2, [r7, #20]
 8003f38:	7d7b      	ldrb	r3, [r7, #21]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0e9      	beq.n	8003f16 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003f42:	2180      	movs	r1, #128	@ 0x80
 8003f44:	200d      	movs	r0, #13
 8003f46:	f7ff ff31 	bl	8003dac <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003f4a:	8a7b      	ldrh	r3, [r7, #18]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d057      	beq.n	8004000 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003f50:	2006      	movs	r0, #6
 8003f52:	f7ff fee9 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f003 031b 	and.w	r3, r3, #27
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d14d      	bne.n	8003ffc <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003f64:	7d3a      	ldrb	r2, [r7, #20]
 8003f66:	7dbb      	ldrb	r3, [r7, #22]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d140      	bne.n	8004000 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003f7e:	200a      	movs	r0, #10
 8003f80:	f7ff fed2 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003f84:	4603      	mov	r3, r0
 8003f86:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003f88:	200c      	movs	r0, #12
 8003f8a:	f7ff fecd 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003f96:	7c7b      	ldrb	r3, [r7, #17]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003f9c:	7d3b      	ldrb	r3, [r7, #20]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	7c7b      	ldrb	r3, [r7, #17]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	e005      	b.n	8003fc0 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003fb4:	7d3b      	ldrb	r3, [r7, #20]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003fc0:	7d3b      	ldrb	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003fca:	7d3b      	ldrb	r3, [r7, #20]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d901      	bls.n	8003fd4 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	827b      	strh	r3, [r7, #18]
 8003fd8:	e00a      	b.n	8003ff0 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003fda:	8a7b      	ldrh	r3, [r7, #18]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	18d4      	adds	r4, r2, r3
 8003fe0:	2009      	movs	r0, #9
 8003fe2:	f7ff fea1 	bl	8003d28 <TM_MFRC522_ReadRegister>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003fea:	8a7b      	ldrh	r3, [r7, #18]
 8003fec:	3301      	adds	r3, #1
 8003fee:	827b      	strh	r3, [r7, #18]
 8003ff0:	7d3b      	ldrb	r3, [r7, #20]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	8a7a      	ldrh	r2, [r7, #18]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3ef      	bcc.n	8003fda <TM_MFRC522_ToCard+0x16e>
 8003ffa:	e001      	b.n	8004000 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	bd90      	pop	{r4, r7, pc}

0800400a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af02      	add	r7, sp, #8
 8004010:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8004016:	2100      	movs	r1, #0
 8004018:	200d      	movs	r0, #13
 800401a:	f7ff fe5f 	bl	8003cdc <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2293      	movs	r2, #147	@ 0x93
 8004022:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3301      	adds	r3, #1
 8004028:	2220      	movs	r2, #32
 800402a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800402c:	f107 030a 	add.w	r3, r7, #10
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	200c      	movs	r0, #12
 800403a:	f7ff ff17 	bl	8003e6c <TM_MFRC522_ToCard>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d118      	bne.n	800407a <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8004048:	2300      	movs	r3, #0
 800404a:	73bb      	strb	r3, [r7, #14]
 800404c:	e009      	b.n	8004062 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800404e:	7bbb      	ldrb	r3, [r7, #14]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	7b7b      	ldrb	r3, [r7, #13]
 8004058:	4053      	eors	r3, r2
 800405a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	3301      	adds	r3, #1
 8004060:	73bb      	strb	r3, [r7, #14]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	2b03      	cmp	r3, #3
 8004066:	d9f2      	bls.n	800404e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	7b7a      	ldrb	r2, [r7, #13]
 8004072:	429a      	cmp	r2, r3
 8004074:	d001      	beq.n	800407a <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8004076:	2302      	movs	r3, #2
 8004078:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	460b      	mov	r3, r1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8004092:	2104      	movs	r1, #4
 8004094:	2005      	movs	r0, #5
 8004096:	f7ff fe89 	bl	8003dac <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 800409a:	2180      	movs	r1, #128	@ 0x80
 800409c:	200a      	movs	r0, #10
 800409e:	f7ff fe6b 	bl	8003d78 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]
 80040a6:	e00a      	b.n	80040be <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	2009      	movs	r0, #9
 80040b4:	f7ff fe12 	bl	8003cdc <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	3301      	adds	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
 80040be:	7dfa      	ldrb	r2, [r7, #23]
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3f0      	bcc.n	80040a8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80040c6:	2103      	movs	r1, #3
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7ff fe07 	bl	8003cdc <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80040ce:	23ff      	movs	r3, #255	@ 0xff
 80040d0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80040d2:	2005      	movs	r0, #5
 80040d4:	f7ff fe28 	bl	8003d28 <TM_MFRC522_ReadRegister>
 80040d8:	4603      	mov	r3, r0
 80040da:	75bb      	strb	r3, [r7, #22]
		i--;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	3b01      	subs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <TM_MFRC522_CalculateCRC+0x6e>
 80040e8:	7dbb      	ldrb	r3, [r7, #22]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ef      	beq.n	80040d2 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80040f2:	2022      	movs	r0, #34	@ 0x22
 80040f4:	f7ff fe18 	bl	8003d28 <TM_MFRC522_ReadRegister>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1c5c      	adds	r4, r3, #1
 8004104:	2021      	movs	r0, #33	@ 0x21
 8004106:	f7ff fe0f 	bl	8003d28 <TM_MFRC522_ReadRegister>
 800410a:	4603      	mov	r3, r0
 800410c:	7023      	strb	r3, [r4, #0]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd90      	pop	{r4, r7, pc}

08004116 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 800411c:	2350      	movs	r3, #80	@ 0x50
 800411e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8004124:	463b      	mov	r3, r7
 8004126:	1c9a      	adds	r2, r3, #2
 8004128:	463b      	mov	r3, r7
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ffa9 	bl	8004084 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8004132:	463a      	mov	r2, r7
 8004134:	4639      	mov	r1, r7
 8004136:	1dbb      	adds	r3, r7, #6
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	2204      	movs	r2, #4
 800413e:	200c      	movs	r0, #12
 8004140:	f7ff fe94 	bl	8003e6c <TM_MFRC522_ToCard>



}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <HAL_MspInit+0x5c>)
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <HAL_MspInit+0x5c>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6193      	str	r3, [r2, #24]
 800415e:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <HAL_MspInit+0x5c>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <HAL_MspInit+0x5c>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4a0e      	ldr	r2, [pc, #56]	@ (80041a8 <HAL_MspInit+0x5c>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004174:	61d3      	str	r3, [r2, #28]
 8004176:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <HAL_MspInit+0x5c>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <HAL_MspInit+0x60>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_MspInit+0x60>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40010000 	.word	0x40010000

080041b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 0310 	add.w	r3, r7, #16
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_I2C_MspInit+0x74>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d124      	bne.n	800421a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d0:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	6193      	str	r3, [r2, #24]
 80041dc:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ee:	2312      	movs	r3, #18
 80041f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041f2:	2303      	movs	r3, #3
 80041f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0310 	add.w	r3, r7, #16
 80041fa:	4619      	mov	r1, r3
 80041fc:	480b      	ldr	r0, [pc, #44]	@ (800422c <HAL_I2C_MspInit+0x7c>)
 80041fe:	f000 fd1d 	bl	8004c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004202:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 8004208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <HAL_I2C_MspInit+0x78>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800421a:	bf00      	nop
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40005800 	.word	0x40005800
 8004228:	40021000 	.word	0x40021000
 800422c:	40010c00 	.word	0x40010c00

08004230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0310 	add.w	r3, r7, #16
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1b      	ldr	r2, [pc, #108]	@ (80042b8 <HAL_SPI_MspInit+0x88>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d12f      	bne.n	80042b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004250:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a19      	ldr	r2, [pc, #100]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 8004256:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b17      	ldr	r3, [pc, #92]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a13      	ldr	r2, [pc, #76]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_SPI_MspInit+0x8c>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004280:	23a0      	movs	r3, #160	@ 0xa0
 8004282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	4619      	mov	r1, r3
 8004292:	480b      	ldr	r0, [pc, #44]	@ (80042c0 <HAL_SPI_MspInit+0x90>)
 8004294:	f000 fcd2 	bl	8004c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004298:	2340      	movs	r3, #64	@ 0x40
 800429a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a4:	f107 0310 	add.w	r3, r7, #16
 80042a8:	4619      	mov	r1, r3
 80042aa:	4805      	ldr	r0, [pc, #20]	@ (80042c0 <HAL_SPI_MspInit+0x90>)
 80042ac:	f000 fcc6 	bl	8004c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042b0:	bf00      	nop
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40013000 	.word	0x40013000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40010800 	.word	0x40010800

080042c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d4:	d113      	bne.n	80042fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <HAL_TIM_Base_MspInit+0x44>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4a0b      	ldr	r2, [pc, #44]	@ (8004308 <HAL_TIM_Base_MspInit+0x44>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	61d3      	str	r3, [r2, #28]
 80042e2:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_TIM_Base_MspInit+0x44>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	201c      	movs	r0, #28
 80042f4:	f000 fa6b 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042f8:	201c      	movs	r0, #28
 80042fa:	f000 fa84 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	@ 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a22      	ldr	r2, [pc, #136]	@ (80043b0 <HAL_UART_MspInit+0xa4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d13d      	bne.n	80043a8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 8004332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b1e      	ldr	r3, [pc, #120]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004344:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b18      	ldr	r3, [pc, #96]	@ (80043b4 <HAL_UART_MspInit+0xa8>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800435c:	2340      	movs	r3, #64	@ 0x40
 800435e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004360:	2302      	movs	r3, #2
 8004362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004368:	f107 0314 	add.w	r3, r7, #20
 800436c:	4619      	mov	r1, r3
 800436e:	4812      	ldr	r0, [pc, #72]	@ (80043b8 <HAL_UART_MspInit+0xac>)
 8004370:	f000 fc64 	bl	8004c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4619      	mov	r1, r3
 8004386:	480c      	ldr	r0, [pc, #48]	@ (80043b8 <HAL_UART_MspInit+0xac>)
 8004388:	f000 fc58 	bl	8004c3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_UART_MspInit+0xb0>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	4a06      	ldr	r2, [pc, #24]	@ (80043bc <HAL_UART_MspInit+0xb0>)
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043a8:	bf00      	nop
 80043aa:	3728      	adds	r7, #40	@ 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40013800 	.word	0x40013800
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40010c00 	.word	0x40010c00
 80043bc:	40010000 	.word	0x40010000

080043c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <NMI_Handler+0x4>

080043c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <MemManage_Handler+0x4>

080043d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <BusFault_Handler+0x4>

080043e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <UsageFault_Handler+0x4>

080043e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004410:	f000 f8c6 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}

08004418 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800441c:	4802      	ldr	r0, [pc, #8]	@ (8004428 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800441e:	f001 fb5e 	bl	8005ade <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200010d0 	.word	0x200010d0

0800442c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004430:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004434:	f000 fdb6 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}

0800443c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004440:	4802      	ldr	r0, [pc, #8]	@ (800444c <TIM2_IRQHandler+0x10>)
 8004442:	f003 fde7 	bl	8008014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200002c8 	.word	0x200002c8

08004450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004458:	4a14      	ldr	r2, [pc, #80]	@ (80044ac <_sbrk+0x5c>)
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <_sbrk+0x60>)
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004464:	4b13      	ldr	r3, [pc, #76]	@ (80044b4 <_sbrk+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800446c:	4b11      	ldr	r3, [pc, #68]	@ (80044b4 <_sbrk+0x64>)
 800446e:	4a12      	ldr	r2, [pc, #72]	@ (80044b8 <_sbrk+0x68>)
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <_sbrk+0x64>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d207      	bcs.n	8004490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004480:	f008 feee 	bl	800d260 <__errno>
 8004484:	4603      	mov	r3, r0
 8004486:	220c      	movs	r2, #12
 8004488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	e009      	b.n	80044a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004490:	4b08      	ldr	r3, [pc, #32]	@ (80044b4 <_sbrk+0x64>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004496:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <_sbrk+0x64>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <_sbrk+0x64>)
 80044a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20005000 	.word	0x20005000
 80044b0:	00000400 	.word	0x00000400
 80044b4:	2000040c 	.word	0x2000040c
 80044b8:	20001728 	.word	0x20001728

080044bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044ca:	e003      	b.n	80044d4 <LoopCopyDataInit>

080044cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80044d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80044d2:	3104      	adds	r1, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80044d4:	480a      	ldr	r0, [pc, #40]	@ (8004500 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80044d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80044da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80044dc:	d3f6      	bcc.n	80044cc <CopyDataInit>
  ldr r2, =_sbss
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80044e0:	e002      	b.n	80044e8 <LoopFillZerobss>

080044e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80044e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80044e4:	f842 3b04 	str.w	r3, [r2], #4

080044e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80044ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80044ec:	d3f9      	bcc.n	80044e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044ee:	f7ff ffe5 	bl	80044bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f2:	f008 febb 	bl	800d26c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044f6:	f7fc fc07 	bl	8000d08 <main>
  bx lr
 80044fa:	4770      	bx	lr
  ldr r3, =_sidata
 80044fc:	0800e4e8 	.word	0x0800e4e8
  ldr r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004504:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004508:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 800450c:	20001724 	.word	0x20001724

08004510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004510:	e7fe      	b.n	8004510 <ADC1_2_IRQHandler>
	...

08004514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <HAL_Init+0x28>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a07      	ldr	r2, [pc, #28]	@ (800453c <HAL_Init+0x28>)
 800451e:	f043 0310 	orr.w	r3, r3, #16
 8004522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004524:	2003      	movs	r0, #3
 8004526:	f000 f947 	bl	80047b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800452a:	2000      	movs	r0, #0
 800452c:	f000 f808 	bl	8004540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004530:	f7ff fe0c 	bl	800414c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_InitTick+0x54>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <HAL_InitTick+0x58>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f95f 	bl	8004822 <HAL_SYSTICK_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00e      	b.n	800458c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d80a      	bhi.n	800458a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004574:	2200      	movs	r2, #0
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f000 f927 	bl	80047ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004580:	4a06      	ldr	r2, [pc, #24]	@ (800459c <HAL_InitTick+0x5c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000028 	.word	0x20000028
 8004598:	20000030 	.word	0x20000030
 800459c:	2000002c 	.word	0x2000002c

080045a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_IncTick+0x1c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_IncTick+0x20>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	4a03      	ldr	r2, [pc, #12]	@ (80045c0 <HAL_IncTick+0x20>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	20000030 	.word	0x20000030
 80045c0:	20000410 	.word	0x20000410

080045c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return uwTick;
 80045c8:	4b02      	ldr	r3, [pc, #8]	@ (80045d4 <HAL_GetTick+0x10>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	20000410 	.word	0x20000410

080045d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d005      	beq.n	80045fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f2:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <HAL_Delay+0x44>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fe:	bf00      	nop
 8004600:	f7ff ffe0 	bl	80045c4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	429a      	cmp	r2, r3
 800460e:	d8f7      	bhi.n	8004600 <HAL_Delay+0x28>
  {
  }
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000030 	.word	0x20000030

08004620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004630:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800463c:	4013      	ands	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800464c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004652:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60d3      	str	r3, [r2, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <__NVIC_GetPriorityGrouping+0x18>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	f003 0307 	and.w	r3, r3, #7
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0b      	blt.n	80046ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4906      	ldr	r1, [pc, #24]	@ (80046b8 <__NVIC_EnableIRQ+0x34>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	e000e100 	.word	0xe000e100

080046bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db0a      	blt.n	80046e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	490c      	ldr	r1, [pc, #48]	@ (8004708 <__NVIC_SetPriority+0x4c>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	440b      	add	r3, r1
 80046e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e4:	e00a      	b.n	80046fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4908      	ldr	r1, [pc, #32]	@ (800470c <__NVIC_SetPriority+0x50>)
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3b04      	subs	r3, #4
 80046f4:	0112      	lsls	r2, r2, #4
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	440b      	add	r3, r1
 80046fa:	761a      	strb	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000e100 	.word	0xe000e100
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	@ 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f1c3 0307 	rsb	r3, r3, #7
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf28      	it	cs
 800472e:	2304      	movcs	r3, #4
 8004730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3304      	adds	r3, #4
 8004736:	2b06      	cmp	r3, #6
 8004738:	d902      	bls.n	8004740 <NVIC_EncodePriority+0x30>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3b03      	subs	r3, #3
 800473e:	e000      	b.n	8004742 <NVIC_EncodePriority+0x32>
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	401a      	ands	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004758:	f04f 31ff 	mov.w	r1, #4294967295
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	43d9      	mvns	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	4313      	orrs	r3, r2
         );
}
 800476a:	4618      	mov	r0, r3
 800476c:	3724      	adds	r7, #36	@ 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004784:	d301      	bcc.n	800478a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004786:	2301      	movs	r3, #1
 8004788:	e00f      	b.n	80047aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478a:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <SysTick_Config+0x40>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004792:	210f      	movs	r1, #15
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	f7ff ff90 	bl	80046bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <SysTick_Config+0x40>)
 800479e:	2200      	movs	r2, #0
 80047a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <SysTick_Config+0x40>)
 80047a4:	2207      	movs	r2, #7
 80047a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000e010 	.word	0xe000e010

080047b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff2d 	bl	8004620 <__NVIC_SetPriorityGrouping>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	4603      	mov	r3, r0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e0:	f7ff ff42 	bl	8004668 <__NVIC_GetPriorityGrouping>
 80047e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff ff90 	bl	8004710 <NVIC_EncodePriority>
 80047f0:	4602      	mov	r2, r0
 80047f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff5f 	bl	80046bc <__NVIC_SetPriority>
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff35 	bl	8004684 <__NVIC_EnableIRQ>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff ffa2 	bl	8004774 <SysTick_Config>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800483c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004856:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <HAL_FLASH_Program+0xd8>)
 8004858:	7e1b      	ldrb	r3, [r3, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_FLASH_Program+0x26>
 800485e:	2302      	movs	r3, #2
 8004860:	e054      	b.n	800490c <HAL_FLASH_Program+0xd0>
 8004862:	4b2c      	ldr	r3, [pc, #176]	@ (8004914 <HAL_FLASH_Program+0xd8>)
 8004864:	2201      	movs	r2, #1
 8004866:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004868:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800486c:	f000 f8a8 	bl	80049c0 <FLASH_WaitForLastOperation>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d144      	bne.n	8004904 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d102      	bne.n	8004886 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	757b      	strb	r3, [r7, #21]
 8004884:	e007      	b.n	8004896 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d102      	bne.n	8004892 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800488c:	2302      	movs	r3, #2
 800488e:	757b      	strb	r3, [r7, #21]
 8004890:	e001      	b.n	8004896 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004892:	2304      	movs	r3, #4
 8004894:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004896:	2300      	movs	r3, #0
 8004898:	75bb      	strb	r3, [r7, #22]
 800489a:	e02d      	b.n	80048f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800489c:	7dbb      	ldrb	r3, [r7, #22]
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	eb02 0c03 	add.w	ip, r2, r3
 80048a6:	7dbb      	ldrb	r3, [r7, #22]
 80048a8:	0119      	lsls	r1, r3, #4
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	f1c1 0620 	rsb	r6, r1, #32
 80048b2:	f1a1 0020 	sub.w	r0, r1, #32
 80048b6:	fa22 f401 	lsr.w	r4, r2, r1
 80048ba:	fa03 f606 	lsl.w	r6, r3, r6
 80048be:	4334      	orrs	r4, r6
 80048c0:	fa23 f000 	lsr.w	r0, r3, r0
 80048c4:	4304      	orrs	r4, r0
 80048c6:	fa23 f501 	lsr.w	r5, r3, r1
 80048ca:	b2a3      	uxth	r3, r4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4660      	mov	r0, ip
 80048d0:	f000 f85a 	bl	8004988 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048d8:	f000 f872 	bl	80049c0 <FLASH_WaitForLastOperation>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80048e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <HAL_FLASH_Program+0xdc>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004918 <HAL_FLASH_Program+0xdc>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80048f2:	7dbb      	ldrb	r3, [r7, #22]
 80048f4:	3301      	adds	r3, #1
 80048f6:	75bb      	strb	r3, [r7, #22]
 80048f8:	7dba      	ldrb	r2, [r7, #22]
 80048fa:	7d7b      	ldrb	r3, [r7, #21]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d3cd      	bcc.n	800489c <HAL_FLASH_Program+0x60>
 8004900:	e000      	b.n	8004904 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004902:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004904:	4b03      	ldr	r3, [pc, #12]	@ (8004914 <HAL_FLASH_Program+0xd8>)
 8004906:	2200      	movs	r2, #0
 8004908:	761a      	strb	r2, [r3, #24]

  return status;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004914:	20000418 	.word	0x20000418
 8004918:	40022000 	.word	0x40022000

0800491c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <HAL_FLASH_Unlock+0x40>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_FLASH_Unlock+0x40>)
 8004934:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <HAL_FLASH_Unlock+0x44>)
 8004936:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <HAL_FLASH_Unlock+0x40>)
 800493a:	4a0a      	ldr	r2, [pc, #40]	@ (8004964 <HAL_FLASH_Unlock+0x48>)
 800493c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800493e:	4b07      	ldr	r3, [pc, #28]	@ (800495c <HAL_FLASH_Unlock+0x40>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800494e:	79fb      	ldrb	r3, [r7, #7]
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	45670123 	.word	0x45670123
 8004964:	cdef89ab 	.word	0xcdef89ab

08004968 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_FLASH_Lock+0x1c>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <HAL_FLASH_Lock+0x1c>)
 8004972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004976:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40022000 	.word	0x40022000

08004988 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004994:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <FLASH_Program_HalfWord+0x30>)
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800499a:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <FLASH_Program_HalfWord+0x34>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	4a07      	ldr	r2, [pc, #28]	@ (80049bc <FLASH_Program_HalfWord+0x34>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	801a      	strh	r2, [r3, #0]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000418 	.word	0x20000418
 80049bc:	40022000 	.word	0x40022000

080049c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7ff fdfc 	bl	80045c4 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049ce:	e010      	b.n	80049f2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d00c      	beq.n	80049f2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <FLASH_WaitForLastOperation+0x2e>
 80049de:	f7ff fdf1 	bl	80045c4 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d201      	bcs.n	80049f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e025      	b.n	8004a3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049f2:	4b15      	ldr	r3, [pc, #84]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e8      	bne.n	80049d0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a10:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004a28:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <FLASH_WaitForLastOperation+0x88>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004a34:	f000 f80a 	bl	8004a4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40022000 	.word	0x40022000

08004a4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004a56:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004a62:	4b21      	ldr	r3, [pc, #132]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f043 0302 	orr.w	r3, r3, #2
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004a6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f043 0310 	orr.w	r3, r3, #16
 8004a74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004a76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004a82:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004a8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae8 <FLASH_SetErrorCode+0x9c>)
 8004aac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f240 1201 	movw	r2, #257	@ 0x101
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d106      	bne.n	8004ad2 <FLASH_SetErrorCode+0x86>
 8004ac4:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4a06      	ldr	r2, [pc, #24]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	61d3      	str	r3, [r2, #28]
}  
 8004ad0:	e002      	b.n	8004ad8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004ad2:	4a04      	ldr	r2, [pc, #16]	@ (8004ae4 <FLASH_SetErrorCode+0x98>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60d3      	str	r3, [r2, #12]
}  
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	20000418 	.word	0x20000418

08004aec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004afe:	4b2f      	ldr	r3, [pc, #188]	@ (8004bbc <HAL_FLASHEx_Erase+0xd0>)
 8004b00:	7e1b      	ldrb	r3, [r3, #24]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_FLASHEx_Erase+0x1e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e053      	b.n	8004bb2 <HAL_FLASHEx_Erase+0xc6>
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bbc <HAL_FLASHEx_Erase+0xd0>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d116      	bne.n	8004b46 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004b18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b1c:	f7ff ff50 	bl	80049c0 <FLASH_WaitForLastOperation>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d141      	bne.n	8004baa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004b26:	2001      	movs	r0, #1
 8004b28:	f000 f84c 	bl	8004bc4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b30:	f7ff ff46 	bl	80049c0 <FLASH_WaitForLastOperation>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <HAL_FLASHEx_Erase+0xd4>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <HAL_FLASHEx_Erase+0xd4>)
 8004b3e:	f023 0304 	bic.w	r3, r3, #4
 8004b42:	6113      	str	r3, [r2, #16]
 8004b44:	e031      	b.n	8004baa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004b46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b4a:	f7ff ff39 	bl	80049c0 <FLASH_WaitForLastOperation>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d12a      	bne.n	8004baa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	e019      	b.n	8004b98 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f000 f849 	bl	8004bfc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b6e:	f7ff ff27 	bl	80049c0 <FLASH_WaitForLastOperation>
 8004b72:	4603      	mov	r3, r0
 8004b74:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004b76:	4b12      	ldr	r3, [pc, #72]	@ (8004bc0 <HAL_FLASHEx_Erase+0xd4>)
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	4a11      	ldr	r2, [pc, #68]	@ (8004bc0 <HAL_FLASHEx_Erase+0xd4>)
 8004b7c:	f023 0302 	bic.w	r3, r3, #2
 8004b80:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	601a      	str	r2, [r3, #0]
            break;
 8004b8e:	e00c      	b.n	8004baa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b96:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	029a      	lsls	r2, r3, #10
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3dc      	bcc.n	8004b64 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <HAL_FLASHEx_Erase+0xd0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	761a      	strb	r2, [r3, #24]

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000418 	.word	0x20000418
 8004bc0:	40022000 	.word	0x40022000

08004bc4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <FLASH_MassErase+0x30>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004bd2:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <FLASH_MassErase+0x34>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4a08      	ldr	r2, [pc, #32]	@ (8004bf8 <FLASH_MassErase+0x34>)
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <FLASH_MassErase+0x34>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4a05      	ldr	r2, [pc, #20]	@ (8004bf8 <FLASH_MassErase+0x34>)
 8004be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000418 	.word	0x20000418
 8004bf8:	40022000 	.word	0x40022000

08004bfc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c04:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <FLASH_PageErase+0x38>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <FLASH_PageErase+0x3c>)
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <FLASH_PageErase+0x3c>)
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004c16:	4a08      	ldr	r2, [pc, #32]	@ (8004c38 <FLASH_PageErase+0x3c>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <FLASH_PageErase+0x3c>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <FLASH_PageErase+0x3c>)
 8004c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c26:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000418 	.word	0x20000418
 8004c38:	40022000 	.word	0x40022000

08004c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b08b      	sub	sp, #44	@ 0x2c
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c4e:	e169      	b.n	8004f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c50:	2201      	movs	r2, #1
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f040 8158 	bne.w	8004f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4a9a      	ldr	r2, [pc, #616]	@ (8004edc <HAL_GPIO_Init+0x2a0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d05e      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
 8004c78:	4a98      	ldr	r2, [pc, #608]	@ (8004edc <HAL_GPIO_Init+0x2a0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d875      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004c7e:	4a98      	ldr	r2, [pc, #608]	@ (8004ee0 <HAL_GPIO_Init+0x2a4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d058      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
 8004c84:	4a96      	ldr	r2, [pc, #600]	@ (8004ee0 <HAL_GPIO_Init+0x2a4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d86f      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004c8a:	4a96      	ldr	r2, [pc, #600]	@ (8004ee4 <HAL_GPIO_Init+0x2a8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d052      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
 8004c90:	4a94      	ldr	r2, [pc, #592]	@ (8004ee4 <HAL_GPIO_Init+0x2a8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d869      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004c96:	4a94      	ldr	r2, [pc, #592]	@ (8004ee8 <HAL_GPIO_Init+0x2ac>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d04c      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
 8004c9c:	4a92      	ldr	r2, [pc, #584]	@ (8004ee8 <HAL_GPIO_Init+0x2ac>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d863      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004ca2:	4a92      	ldr	r2, [pc, #584]	@ (8004eec <HAL_GPIO_Init+0x2b0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d046      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
 8004ca8:	4a90      	ldr	r2, [pc, #576]	@ (8004eec <HAL_GPIO_Init+0x2b0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d85d      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004cae:	2b12      	cmp	r3, #18
 8004cb0:	d82a      	bhi.n	8004d08 <HAL_GPIO_Init+0xcc>
 8004cb2:	2b12      	cmp	r3, #18
 8004cb4:	d859      	bhi.n	8004d6a <HAL_GPIO_Init+0x12e>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <HAL_GPIO_Init+0x80>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004d37 	.word	0x08004d37
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d23 	.word	0x08004d23
 8004cc8:	08004d65 	.word	0x08004d65
 8004ccc:	08004d6b 	.word	0x08004d6b
 8004cd0:	08004d6b 	.word	0x08004d6b
 8004cd4:	08004d6b 	.word	0x08004d6b
 8004cd8:	08004d6b 	.word	0x08004d6b
 8004cdc:	08004d6b 	.word	0x08004d6b
 8004ce0:	08004d6b 	.word	0x08004d6b
 8004ce4:	08004d6b 	.word	0x08004d6b
 8004ce8:	08004d6b 	.word	0x08004d6b
 8004cec:	08004d6b 	.word	0x08004d6b
 8004cf0:	08004d6b 	.word	0x08004d6b
 8004cf4:	08004d6b 	.word	0x08004d6b
 8004cf8:	08004d6b 	.word	0x08004d6b
 8004cfc:	08004d6b 	.word	0x08004d6b
 8004d00:	08004d19 	.word	0x08004d19
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	4a79      	ldr	r2, [pc, #484]	@ (8004ef0 <HAL_GPIO_Init+0x2b4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d0e:	e02c      	b.n	8004d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	623b      	str	r3, [r7, #32]
          break;
 8004d16:	e029      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	623b      	str	r3, [r7, #32]
          break;
 8004d20:	e024      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	3308      	adds	r3, #8
 8004d28:	623b      	str	r3, [r7, #32]
          break;
 8004d2a:	e01f      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	330c      	adds	r3, #12
 8004d32:	623b      	str	r3, [r7, #32]
          break;
 8004d34:	e01a      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d3e:	2304      	movs	r3, #4
 8004d40:	623b      	str	r3, [r7, #32]
          break;
 8004d42:	e013      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	611a      	str	r2, [r3, #16]
          break;
 8004d56:	e009      	b.n	8004d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d58:	2308      	movs	r3, #8
 8004d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	615a      	str	r2, [r3, #20]
          break;
 8004d62:	e003      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d64:	2300      	movs	r3, #0
 8004d66:	623b      	str	r3, [r7, #32]
          break;
 8004d68:	e000      	b.n	8004d6c <HAL_GPIO_Init+0x130>
          break;
 8004d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2bff      	cmp	r3, #255	@ 0xff
 8004d70:	d801      	bhi.n	8004d76 <HAL_GPIO_Init+0x13a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	e001      	b.n	8004d7a <HAL_GPIO_Init+0x13e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2bff      	cmp	r3, #255	@ 0xff
 8004d80:	d802      	bhi.n	8004d88 <HAL_GPIO_Init+0x14c>
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	e002      	b.n	8004d8e <HAL_GPIO_Init+0x152>
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	3b08      	subs	r3, #8
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	210f      	movs	r1, #15
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	401a      	ands	r2, r3
 8004da0:	6a39      	ldr	r1, [r7, #32]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	431a      	orrs	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80b1 	beq.w	8004f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef4 <HAL_GPIO_Init+0x2b8>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8004ef4 <HAL_GPIO_Init+0x2b8>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6193      	str	r3, [r2, #24]
 8004dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef4 <HAL_GPIO_Init+0x2b8>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004dd4:	4a48      	ldr	r2, [pc, #288]	@ (8004ef8 <HAL_GPIO_Init+0x2bc>)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	089b      	lsrs	r3, r3, #2
 8004dda:	3302      	adds	r3, #2
 8004ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a40      	ldr	r2, [pc, #256]	@ (8004efc <HAL_GPIO_Init+0x2c0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_GPIO_Init+0x1ec>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	@ (8004f00 <HAL_GPIO_Init+0x2c4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00d      	beq.n	8004e24 <HAL_GPIO_Init+0x1e8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8004f04 <HAL_GPIO_Init+0x2c8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <HAL_GPIO_Init+0x1e4>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3d      	ldr	r2, [pc, #244]	@ (8004f08 <HAL_GPIO_Init+0x2cc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_GPIO_Init+0x1e0>
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e006      	b.n	8004e2a <HAL_GPIO_Init+0x1ee>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e004      	b.n	8004e2a <HAL_GPIO_Init+0x1ee>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e002      	b.n	8004e2a <HAL_GPIO_Init+0x1ee>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_GPIO_Init+0x1ee>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2c:	f002 0203 	and.w	r2, r2, #3
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	4093      	lsls	r3, r2
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e3a:	492f      	ldr	r1, [pc, #188]	@ (8004ef8 <HAL_GPIO_Init+0x2bc>)
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e54:	4b2d      	ldr	r3, [pc, #180]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	492c      	ldr	r1, [pc, #176]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e62:	4b2a      	ldr	r3, [pc, #168]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	4928      	ldr	r1, [pc, #160]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d006      	beq.n	8004e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e7c:	4b23      	ldr	r3, [pc, #140]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4922      	ldr	r1, [pc, #136]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
 8004e88:	e006      	b.n	8004e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e8a:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	491e      	ldr	r1, [pc, #120]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ea4:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	4918      	ldr	r1, [pc, #96]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]
 8004eb0:	e006      	b.n	8004ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004eb2:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	4914      	ldr	r1, [pc, #80]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d021      	beq.n	8004f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <HAL_GPIO_Init+0x2d0>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60cb      	str	r3, [r1, #12]
 8004ed8:	e021      	b.n	8004f1e <HAL_GPIO_Init+0x2e2>
 8004eda:	bf00      	nop
 8004edc:	10320000 	.word	0x10320000
 8004ee0:	10310000 	.word	0x10310000
 8004ee4:	10220000 	.word	0x10220000
 8004ee8:	10210000 	.word	0x10210000
 8004eec:	10120000 	.word	0x10120000
 8004ef0:	10110000 	.word	0x10110000
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010800 	.word	0x40010800
 8004f00:	40010c00 	.word	0x40010c00
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_GPIO_Init+0x304>)
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	4909      	ldr	r1, [pc, #36]	@ (8004f40 <HAL_GPIO_Init+0x304>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	3301      	adds	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f47f ae8e 	bne.w	8004c50 <HAL_GPIO_Init+0x14>
  }
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	372c      	adds	r7, #44	@ 0x2c
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	40010400 	.word	0x40010400

08004f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e001      	b.n	8004f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	807b      	strh	r3, [r7, #2]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f82:	787b      	ldrb	r3, [r7, #1]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f88:	887a      	ldrh	r2, [r7, #2]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f8e:	e003      	b.n	8004f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	041a      	lsls	r2, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	611a      	str	r2, [r3, #16]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fae:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fba:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f806 	bl	8004fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e12b      	b.n	8005252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff f8ce 	bl	80041b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2224      	movs	r2, #36	@ 0x24
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800503a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800504a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800504c:	f002 fb78 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 8005050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a81      	ldr	r2, [pc, #516]	@ (800525c <HAL_I2C_Init+0x274>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d807      	bhi.n	800506c <HAL_I2C_Init+0x84>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a80      	ldr	r2, [pc, #512]	@ (8005260 <HAL_I2C_Init+0x278>)
 8005060:	4293      	cmp	r3, r2
 8005062:	bf94      	ite	ls
 8005064:	2301      	movls	r3, #1
 8005066:	2300      	movhi	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e006      	b.n	800507a <HAL_I2C_Init+0x92>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a7d      	ldr	r2, [pc, #500]	@ (8005264 <HAL_I2C_Init+0x27c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0e7      	b.n	8005252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a78      	ldr	r2, [pc, #480]	@ (8005268 <HAL_I2C_Init+0x280>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	0c9b      	lsrs	r3, r3, #18
 800508c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a6a      	ldr	r2, [pc, #424]	@ (800525c <HAL_I2C_Init+0x274>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <HAL_I2C_Init+0xd4>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3301      	adds	r3, #1
 80050ba:	e009      	b.n	80050d0 <HAL_I2C_Init+0xe8>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a69      	ldr	r2, [pc, #420]	@ (800526c <HAL_I2C_Init+0x284>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	3301      	adds	r3, #1
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	495c      	ldr	r1, [pc, #368]	@ (800525c <HAL_I2C_Init+0x274>)
 80050ec:	428b      	cmp	r3, r1
 80050ee:	d819      	bhi.n	8005124 <HAL_I2C_Init+0x13c>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e59      	subs	r1, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005104:	400b      	ands	r3, r1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_I2C_Init+0x138>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e59      	subs	r1, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fbb1 f3f3 	udiv	r3, r1, r3
 8005118:	3301      	adds	r3, #1
 800511a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511e:	e051      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 8005120:	2304      	movs	r3, #4
 8005122:	e04f      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d111      	bne.n	8005150 <HAL_I2C_Init+0x168>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e58      	subs	r0, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	440b      	add	r3, r1
 800513a:	fbb0 f3f3 	udiv	r3, r0, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e012      	b.n	8005176 <HAL_I2C_Init+0x18e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1e58      	subs	r0, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	0099      	lsls	r1, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	fbb0 f3f3 	udiv	r3, r0, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Init+0x196>
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10e      	bne.n	80051a4 <HAL_I2C_Init+0x1bc>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1e58      	subs	r0, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	440b      	add	r3, r1
 8005194:	fbb0 f3f3 	udiv	r3, r0, r3
 8005198:	3301      	adds	r3, #1
 800519a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a2:	e00f      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1e58      	subs	r0, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	0099      	lsls	r1, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	6809      	ldr	r1, [r1, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6911      	ldr	r1, [r2, #16]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	4311      	orrs	r1, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	000186a0 	.word	0x000186a0
 8005260:	001e847f 	.word	0x001e847f
 8005264:	003d08ff 	.word	0x003d08ff
 8005268:	431bde83 	.word	0x431bde83
 800526c:	10624dd3 	.word	0x10624dd3

08005270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	461a      	mov	r2, r3
 800527c:	460b      	mov	r3, r1
 800527e:	817b      	strh	r3, [r7, #10]
 8005280:	4613      	mov	r3, r2
 8005282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005284:	f7ff f99e 	bl	80045c4 <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b20      	cmp	r3, #32
 8005294:	f040 80e0 	bne.w	8005458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2319      	movs	r3, #25
 800529e:	2201      	movs	r2, #1
 80052a0:	4970      	ldr	r1, [pc, #448]	@ (8005464 <HAL_I2C_Master_Transmit+0x1f4>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f964 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0d3      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_I2C_Master_Transmit+0x50>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0cc      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d007      	beq.n	80052e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	@ 0x21
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2210      	movs	r2, #16
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	893a      	ldrh	r2, [r7, #8]
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a50      	ldr	r2, [pc, #320]	@ (8005468 <HAL_I2C_Master_Transmit+0x1f8>)
 8005326:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f89c 	bl	800546c <I2C_MasterRequestWrite>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e08d      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005354:	e066      	b.n	8005424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f9de 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_I2C_Master_Transmit+0x188>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	6a39      	ldr	r1, [r7, #32]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f9ce 	bl	800579e <I2C_WaitOnBTFFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	2b04      	cmp	r3, #4
 800540e:	d107      	bne.n	8005420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01a      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d194      	bne.n	8005356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000

0800546c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	460b      	mov	r3, r1
 800547a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d006      	beq.n	8005496 <I2C_MasterRequestWrite+0x2a>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d003      	beq.n	8005496 <I2C_MasterRequestWrite+0x2a>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005494:	d108      	bne.n	80054a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e00b      	b.n	80054c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	2b12      	cmp	r3, #18
 80054ae:	d107      	bne.n	80054c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f84f 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e6:	d103      	bne.n	80054f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e035      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054fc:	d108      	bne.n	8005510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800550c:	611a      	str	r2, [r3, #16]
 800550e:	e01b      	b.n	8005548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005510:	897b      	ldrh	r3, [r7, #10]
 8005512:	11db      	asrs	r3, r3, #7
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0306 	and.w	r3, r3, #6
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f063 030f 	orn	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	490e      	ldr	r1, [pc, #56]	@ (8005568 <I2C_MasterRequestWrite+0xfc>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f875 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e010      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4907      	ldr	r1, [pc, #28]	@ (800556c <I2C_MasterRequestWrite+0x100>)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f865 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	00010008 	.word	0x00010008
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e025      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7ff f81b 	bl	80045c4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e023      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10d      	bne.n	80055f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	e00c      	b.n	800560e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d0b6      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562c:	e051      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563c:	d123      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e046      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fe ff99 	bl	80045c4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e020      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10c      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e00b      	b.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d18d      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005728:	e02d      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f878 	bl	8005820 <I2C_IsAcknowledgeFailed>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e02d      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fe ff3f 	bl	80045c4 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e007      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005790:	2b80      	cmp	r3, #128	@ 0x80
 8005792:	d1ca      	bne.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057aa:	e02d      	b.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f837 	bl	8005820 <I2C_IsAcknowledgeFailed>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02d      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d021      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fe fefe 	bl	80045c4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d1ca      	bne.n	80057ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	d11b      	bne.n	8005870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f043 0204 	orr.w	r2, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800587c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587e:	b08b      	sub	sp, #44	@ 0x2c
 8005880:	af06      	add	r7, sp, #24
 8005882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0fd      	b.n	8005a8a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f007 fa0a 	bl	800ccbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2203      	movs	r2, #3
 80058ac:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f003 f981 	bl	8008bbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	687e      	ldr	r6, [r7, #4]
 80058c2:	466d      	mov	r5, sp
 80058c4:	f106 0410 	add.w	r4, r6, #16
 80058c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	1d33      	adds	r3, r6, #4
 80058d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d4:	6838      	ldr	r0, [r7, #0]
 80058d6:	f003 f94b 	bl	8008b70 <USB_CoreInit>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0ce      	b.n	8005a8a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f003 f97c 	bl	8008bf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e04c      	b.n	8005998 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	440b      	add	r3, r1
 800590e:	3301      	adds	r3, #1
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	440b      	add	r3, r1
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	b298      	uxth	r0, r3
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	3336      	adds	r3, #54	@ 0x36
 800593c:	4602      	mov	r2, r0
 800593e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	440b      	add	r3, r1
 8005950:	3303      	adds	r3, #3
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005956:	7bfa      	ldrb	r2, [r7, #15]
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3338      	adds	r3, #56	@ 0x38
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	333c      	adds	r3, #60	@ 0x3c
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	3340      	adds	r3, #64	@ 0x40
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	3301      	adds	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	7bfa      	ldrb	r2, [r7, #15]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3ad      	bcc.n	80058fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
 80059a6:	e044      	b.n	8005a32 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059be:	7bfa      	ldrb	r2, [r7, #15]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059d4:	7bfa      	ldrb	r2, [r7, #15]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059ea:	7bfa      	ldrb	r2, [r7, #15]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a00:	7bfa      	ldrb	r2, [r7, #15]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a16:	7bfa      	ldrb	r2, [r7, #15]
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d3b5      	bcc.n	80059a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	687e      	ldr	r6, [r7, #4]
 8005a44:	466d      	mov	r5, sp
 8005a46:	f106 0410 	add.w	r4, r6, #16
 8005a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	1d33      	adds	r3, r6, #4
 8005a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a56:	6838      	ldr	r0, [r7, #0]
 8005a58:	f003 f8d6 	bl	8008c08 <USB_DevInit>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e00d      	b.n	8005a8a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f005 faf7 	bl	800b076 <USB_DevDisconnect>

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_PCD_Start+0x16>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e016      	b.n	8005ad6 <HAL_PCD_Start+0x44>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f003 f86b 	bl	8008b90 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005aba:	2101      	movs	r1, #1
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f007 fb70 	bl	800d1a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f005 facb 	bl	800b062 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b088      	sub	sp, #32
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f005 facd 	bl	800b08a <USB_ReadInterrupts>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	d102      	bne.n	8005b02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb5f 	bl	80061c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f005 fabf 	bl	800b08a <USB_ReadInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b16:	d112      	bne.n	8005b3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f007 f93e 	bl	800cdb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b36:	2100      	movs	r1, #0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f923 	bl	8005d84 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f005 faa1 	bl	800b08a <USB_ReadInterrupts>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b52:	d10b      	bne.n	8005b6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b66:	b292      	uxth	r2, r2
 8005b68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f005 fa8a 	bl	800b08a <USB_ReadInterrupts>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b80:	d10b      	bne.n	8005b9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b94:	b292      	uxth	r2, r2
 8005b96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f005 fa73 	bl	800b08a <USB_ReadInterrupts>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	d126      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0208 	bic.w	r2, r2, #8
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f007 f91f 	bl	800ce24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f005 fa41 	bl	800b08a <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c12:	f040 8082 	bne.w	8005d1a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e010      	b.n	8005c3e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	7ffb      	ldrb	r3, [r7, #31]
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	3320      	adds	r3, #32
 8005c32:	443b      	add	r3, r7
 8005c34:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d9eb      	bls.n	8005c1c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	b292      	uxth	r2, r2
 8005c58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005c74:	bf00      	nop
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f6      	beq.n	8005c76 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e00f      	b.n	8005cc6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005ca6:	7ffb      	ldrb	r3, [r7, #31]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	4611      	mov	r1, r2
 8005cae:	7ffa      	ldrb	r2, [r7, #31]
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	440a      	add	r2, r1
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	3320      	adds	r3, #32
 8005cb8:	443b      	add	r3, r7
 8005cba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005cbe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005cc0:	7ffb      	ldrb	r3, [r7, #31]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	d9ec      	bls.n	8005ca6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	b292      	uxth	r2, r2
 8005ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0204 	orr.w	r2, r2, #4
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f007 f86b 	bl	800cdf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f005 f9b3 	bl	800b08a <USB_ReadInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d2e:	d10e      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d42:	b292      	uxth	r2, r2
 8005d44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f007 f824 	bl	800cd96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f005 f999 	bl	800b08a <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d62:	d10b      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d76:	b292      	uxth	r2, r2
 8005d78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_PCD_SetAddress+0x1a>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e013      	b.n	8005dc6 <HAL_PCD_SetAddress+0x42>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 f940 	bl	800b03c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	70fb      	strb	r3, [r7, #3]
 8005de0:	460b      	mov	r3, r1
 8005de2:	803b      	strh	r3, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da0e      	bge.n	8005e12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	705a      	strb	r2, [r3, #1]
 8005e10:	e00e      	b.n	8005e30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	f003 0207 	and.w	r2, r3, #7
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e3c:	883a      	ldrh	r2, [r7, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	78ba      	ldrb	r2, [r7, #2]
 8005e46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e5a:	78bb      	ldrb	r3, [r7, #2]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d102      	bne.n	8005e66 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_PCD_EP_Open+0xa6>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e00e      	b.n	8005e92 <HAL_PCD_EP_Open+0xc4>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68f9      	ldr	r1, [r7, #12]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f002 fee0 	bl	8008c48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005e90:	7afb      	ldrb	r3, [r7, #11]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da0e      	bge.n	8005ecc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	705a      	strb	r2, [r3, #1]
 8005eca:	e00e      	b.n	8005eea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	f003 0207 	and.w	r2, r3, #7
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_PCD_EP_Close+0x6a>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e00e      	b.n	8005f22 <HAL_PCD_EP_Close+0x88>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f003 fa02 	bl	800931c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	460b      	mov	r3, r1
 8005f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	f003 0207 	and.w	r2, r3, #7
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f003 fbb4 	bl	80096f4 <USB_EPStartXfer>
 8005f8c:	e005      	b.n	8005f9a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6979      	ldr	r1, [r7, #20]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f003 fbad 	bl	80096f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	f003 0207 	and.w	r2, r3, #7
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2201      	movs	r2, #1
 800601c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800601e:	7afb      	ldrb	r3, [r7, #11]
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	b2da      	uxtb	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	4618      	mov	r0, r3
 800603c:	f003 fb5a 	bl	80096f4 <USB_EPStartXfer>
 8006040:	e005      	b.n	800604e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6979      	ldr	r1, [r7, #20]
 8006048:	4618      	mov	r0, r3
 800604a:	f003 fb53 	bl	80096f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 0207 	and.w	r2, r3, #7
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d901      	bls.n	8006076 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e04c      	b.n	8006110 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da0e      	bge.n	800609c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	705a      	strb	r2, [r3, #1]
 800609a:	e00c      	b.n	80060b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_PCD_EP_SetStall+0x7e>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e01c      	b.n	8006110 <HAL_PCD_EP_SetStall+0xb8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f004 feac 	bl	800ae42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d108      	bne.n	8006106 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f004 ffd1 	bl	800b0a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d901      	bls.n	8006136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e040      	b.n	80061b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800613a:	2b00      	cmp	r3, #0
 800613c:	da0e      	bge.n	800615c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	705a      	strb	r2, [r3, #1]
 800615a:	e00e      	b.n	800617a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	f003 0207 	and.w	r2, r3, #7
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_PCD_EP_ClrStall+0x82>
 8006196:	2302      	movs	r3, #2
 8006198:	e00e      	b.n	80061b8 <HAL_PCD_EP_ClrStall+0xa0>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f004 fe9a 	bl	800aee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08e      	sub	sp, #56	@ 0x38
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061c8:	e2de      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80061d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80061d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 80061e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8157 	bne.w	8006498 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d151      	bne.n	8006298 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	81fb      	strh	r3, [r7, #14]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29b      	uxth	r3, r3
 8006216:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3328      	adds	r3, #40	@ 0x28
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	3302      	adds	r3, #2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	441a      	add	r2, r3
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f006 fd81 	bl	800cd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 828d 	beq.w	8006788 <PCD_EP_ISR_Handler+0x5c8>
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8288 	bne.w	8006788 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006296:	e277      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800629e:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80062a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d034      	beq.n	800631c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	3306      	adds	r3, #6
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f004 ff28 	bl	800b146 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006302:	4013      	ands	r3, r2
 8006304:	823b      	strh	r3, [r7, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	8a3a      	ldrh	r2, [r7, #16]
 800630c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006310:	b292      	uxth	r2, r2
 8006312:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f006 fcf7 	bl	800cd08 <HAL_PCD_SetupStageCallback>
 800631a:	e235      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800631c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006320:	2b00      	cmp	r3, #0
 8006322:	f280 8231 	bge.w	8006788 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006332:	4013      	ands	r3, r2
 8006334:	83bb      	strh	r3, [r7, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8bba      	ldrh	r2, [r7, #28]
 800633c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006340:	b292      	uxth	r2, r2
 8006342:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	3306      	adds	r3, #6
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d019      	beq.n	80063ac <PCD_EP_ISR_Handler+0x1ec>
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d015      	beq.n	80063ac <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	6959      	ldr	r1, [r3, #20]
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006390:	b29b      	uxth	r3, r3
 8006392:	f004 fed8 	bl	800b146 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	441a      	add	r2, r3
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f006 fcc0 	bl	800cd2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4413      	add	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d112      	bne.n	80063fa <PCD_EP_ISR_Handler+0x23a>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80063de:	b29a      	uxth	r2, r3
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e02f      	b.n	800645a <PCD_EP_ISR_Handler+0x29a>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006400:	d813      	bhi.n	800642a <PCD_EP_ISR_Handler+0x26a>
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	633b      	str	r3, [r7, #48]	@ 0x30
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <PCD_EP_ISR_Handler+0x25c>
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	3301      	adds	r3, #1
 800641a:	633b      	str	r3, [r7, #48]	@ 0x30
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	b29b      	uxth	r3, r3
 8006420:	029b      	lsls	r3, r3, #10
 8006422:	b29a      	uxth	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e017      	b.n	800645a <PCD_EP_ISR_Handler+0x29a>
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	633b      	str	r3, [r7, #48]	@ 0x30
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <PCD_EP_ISR_Handler+0x284>
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	3b01      	subs	r3, #1
 8006442:	633b      	str	r3, [r7, #48]	@ 0x30
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	b29b      	uxth	r3, r3
 8006448:	029b      	lsls	r3, r3, #10
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006454:	b29a      	uxth	r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646a:	827b      	strh	r3, [r7, #18]
 800646c:	8a7b      	ldrh	r3, [r7, #18]
 800646e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006472:	827b      	strh	r3, [r7, #18]
 8006474:	8a7b      	ldrh	r3, [r7, #18]
 8006476:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800647a:	827b      	strh	r3, [r7, #18]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	8a7b      	ldrh	r3, [r7, #18]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]
 8006496:	e177      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f280 80ea 	bge.w	8006688 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80064ca:	4013      	ands	r3, r2
 80064cc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80064de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064e2:	b292      	uxth	r2, r2
 80064e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80064e6:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d122      	bne.n	800654a <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650c:	b29b      	uxth	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	3306      	adds	r3, #6
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 800652e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8087 	beq.w	8006644 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	6959      	ldr	r1, [r3, #20]
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	88da      	ldrh	r2, [r3, #6]
 8006542:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006544:	f004 fdff 	bl	800b146 <USB_ReadPMA>
 8006548:	e07c      	b.n	8006644 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	78db      	ldrb	r3, [r3, #3]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d108      	bne.n	8006564 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006552:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006554:	461a      	mov	r2, r3
 8006556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f923 	bl	80067a4 <HAL_PCD_EP_DB_Receive>
 800655e:	4603      	mov	r3, r0
 8006560:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006562:	e06f      	b.n	8006644 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d021      	beq.n	8006602 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	3302      	adds	r3, #2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e6:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 80065e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02a      	beq.n	8006644 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	6959      	ldr	r1, [r3, #20]
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	891a      	ldrh	r2, [r3, #8]
 80065fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065fc:	f004 fda3 	bl	800b146 <USB_ReadPMA>
 8006600:	e020      	b.n	8006644 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	3306      	adds	r3, #6
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800662c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	6959      	ldr	r1, [r3, #20]
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	895a      	ldrh	r2, [r3, #10]
 800663e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006640:	f004 fd81 	bl	800b146 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800664a:	441a      	add	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006656:	441a      	add	r2, r3
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <PCD_EP_ISR_Handler+0x4ae>
 8006664:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d206      	bcs.n	800667c <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f006 fb59 	bl	800cd2c <HAL_PCD_DataOutStageCallback>
 800667a:	e005      	b.n	8006688 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006682:	4618      	mov	r0, r3
 8006684:	f003 f836 	bl	80096f4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006688:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800668a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d07a      	beq.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8006692:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80066bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c0:	843b      	strh	r3, [r7, #32]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	8c3b      	ldrh	r3, [r7, #32]
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	78db      	ldrb	r3, [r3, #3]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d108      	bne.n	80066f8 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d146      	bne.n	800677c <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80066ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d141      	bne.n	800677c <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	3302      	adds	r3, #2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006720:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	8bfb      	ldrh	r3, [r7, #30]
 8006728:	429a      	cmp	r2, r3
 800672a:	d906      	bls.n	800673a <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	8bfb      	ldrh	r3, [r7, #30]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	619a      	str	r2, [r3, #24]
 8006738:	e002      	b.n	8006740 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	2200      	movs	r2, #0
 800673e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f006 fb07 	bl	800cd62 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8006754:	e018      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	8bfb      	ldrh	r3, [r7, #30]
 800675c:	441a      	add	r2, r3
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	441a      	add	r2, r3
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f002 ffbd 	bl	80096f4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800677a:	e005      	b.n	8006788 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800677c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800677e:	461a      	mov	r2, r3
 8006780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f91b 	bl	80069be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006790:	b29b      	uxth	r3, r3
 8006792:	b21b      	sxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f6ff ad18 	blt.w	80061ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3738      	adds	r7, #56	@ 0x38
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d07e      	beq.n	80068ba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	4413      	add	r3, r2
 80067d0:	3302      	adds	r3, #2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	8b7b      	ldrh	r3, [r7, #26]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d306      	bcc.n	80067fe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	8b7b      	ldrh	r3, [r7, #26]
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	619a      	str	r2, [r3, #24]
 80067fc:	e002      	b.n	8006804 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d123      	bne.n	8006854 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006826:	833b      	strh	r3, [r7, #24]
 8006828:	8b3b      	ldrh	r3, [r7, #24]
 800682a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800682e:	833b      	strh	r3, [r7, #24]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	8b3b      	ldrh	r3, [r7, #24]
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01f      	beq.n	800689e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006878:	82fb      	strh	r3, [r7, #22]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	8afb      	ldrh	r3, [r7, #22]
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800689e:	8b7b      	ldrh	r3, [r7, #26]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8087 	beq.w	80069b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6959      	ldr	r1, [r3, #20]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	891a      	ldrh	r2, [r3, #8]
 80068b2:	8b7b      	ldrh	r3, [r7, #26]
 80068b4:	f004 fc47 	bl	800b146 <USB_ReadPMA>
 80068b8:	e07c      	b.n	80069b4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	3306      	adds	r3, #6
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	8b7b      	ldrh	r3, [r7, #26]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d306      	bcc.n	80068fc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	8b7b      	ldrh	r3, [r7, #26]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	619a      	str	r2, [r3, #24]
 80068fa:	e002      	b.n	8006902 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d123      	bne.n	8006952 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006924:	83fb      	strh	r3, [r7, #30]
 8006926:	8bfb      	ldrh	r3, [r7, #30]
 8006928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800692c:	83fb      	strh	r3, [r7, #30]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8bfb      	ldrh	r3, [r7, #30]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11f      	bne.n	800699c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	83bb      	strh	r3, [r7, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	8bbb      	ldrh	r3, [r7, #28]
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006994:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800699c:	8b7b      	ldrh	r3, [r7, #26]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	895a      	ldrh	r2, [r3, #10]
 80069ae:	8b7b      	ldrh	r3, [r7, #26]
 80069b0:	f004 fbc9 	bl	800b146 <USB_ReadPMA>
    }
  }

  return count;
 80069b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b094      	sub	sp, #80	@ 0x50
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8138 	beq.w	8006c48 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	3302      	adds	r3, #2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a00:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d907      	bls.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	619a      	str	r2, [r3, #24]
 8006a1e:	e002      	b.n	8006a26 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d12c      	bne.n	8006a88 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f006 f994 	bl	800cd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 823a 	beq.w	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	82fb      	strh	r3, [r7, #22]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
 8006a86:	e218      	b.n	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01f      	beq.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 81ee 	bne.w	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006af4:	441a      	add	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6a1a      	ldr	r2, [r3, #32]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d309      	bcc.n	8006b1a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	621a      	str	r2, [r3, #32]
 8006b18:	e015      	b.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006b22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b26:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006b30:	e009      	b.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d155      	bne.n	8006bfa <HAL_PCD_EP_DB_Transmit+0x23c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	011a      	lsls	r2, r3, #4
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d112      	bne.n	8006ba2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	801a      	strh	r2, [r3, #0]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e047      	b.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x274>
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ba6:	d811      	bhi.n	8006bcc <HAL_PCD_EP_DB_Transmit+0x20e>
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x200>
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	3301      	adds	r3, #1
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	029b      	lsls	r3, r3, #10
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	e032      	b.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x274>
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x224>
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	3b01      	subs	r3, #1
 8006be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	029b      	lsls	r3, r3, #10
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e01b      	b.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x274>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d117      	bne.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x274>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	4413      	add	r3, r2
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	011a      	lsls	r2, r3, #4
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	4413      	add	r3, r2
 8006c24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c28:	623b      	str	r3, [r7, #32]
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6959      	ldr	r1, [r3, #20]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	891a      	ldrh	r2, [r3, #8]
 8006c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f004 fa3c 	bl	800b0be <USB_WritePMA>
 8006c46:	e138      	b.n	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3306      	adds	r3, #6
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c70:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d307      	bcc.n	8006c90 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	619a      	str	r2, [r3, #24]
 8006c8e:	e002      	b.n	8006c96 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d12e      	bne.n	8006cfc <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f006 f85c 	bl	800cd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8102 	bne.w	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	441a      	add	r2, r3
 8006ce2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]
 8006cfa:	e0de      	b.n	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d11f      	bne.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d20:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 80b4 	bne.w	8006eba <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d68:	441a      	add	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d309      	bcc.n	8006d8e <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a1a      	ldr	r2, [r3, #32]
 8006d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	621a      	str	r2, [r3, #32]
 8006d8c:	e015      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006d96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d9a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006da4:	e009      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d155      	bne.n	8006e74 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	4413      	add	r3, r2
 8006dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	011a      	lsls	r2, r3, #4
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	4413      	add	r3, r2
 8006dea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d112      	bne.n	8006e1c <HAL_PCD_EP_DB_Transmit+0x45e>
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e044      	b.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e20:	d811      	bhi.n	8006e46 <HAL_PCD_EP_DB_Transmit+0x488>
 8006e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e34:	3301      	adds	r3, #1
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	029b      	lsls	r3, r3, #10
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e02f      	b.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <HAL_PCD_EP_DB_Transmit+0x49e>
 8006e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	029b      	lsls	r3, r3, #10
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	e018      	b.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d114      	bne.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8a:	4413      	add	r3, r2
 8006e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	011a      	lsls	r2, r3, #4
 8006e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e96:	4413      	add	r3, r2
 8006e98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6959      	ldr	r1, [r3, #20]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	895a      	ldrh	r2, [r3, #10]
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f004 f902 	bl	800b0be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed4:	82bb      	strh	r3, [r7, #20]
 8006ed6:	8abb      	ldrh	r3, [r7, #20]
 8006ed8:	f083 0310 	eor.w	r3, r3, #16
 8006edc:	82bb      	strh	r3, [r7, #20]
 8006ede:	8abb      	ldrh	r3, [r7, #20]
 8006ee0:	f083 0320 	eor.w	r3, r3, #32
 8006ee4:	82bb      	strh	r3, [r7, #20]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	441a      	add	r2, r3
 8006ef4:	8abb      	ldrh	r3, [r7, #20]
 8006ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3750      	adds	r7, #80	@ 0x50
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	817b      	strh	r3, [r7, #10]
 8006f22:	4613      	mov	r3, r2
 8006f24:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f32:	897b      	ldrh	r3, [r7, #10]
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e009      	b.n	8006f5e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f4a:	897a      	ldrh	r2, [r7, #10]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	80da      	strh	r2, [r3, #6]
 8006f72:	e00b      	b.n	8006f8c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2201      	movs	r2, #1
 8006f78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e272      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8087 	beq.w	80070c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fb8:	4b92      	ldr	r3, [pc, #584]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 030c 	and.w	r3, r3, #12
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d00c      	beq.n	8006fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 030c 	and.w	r3, r3, #12
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d112      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x5e>
 8006fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fdc:	d10b      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fde:	4b89      	ldr	r3, [pc, #548]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d06c      	beq.n	80070c4 <HAL_RCC_OscConfig+0x12c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d168      	bne.n	80070c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e24c      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ffe:	d106      	bne.n	800700e <HAL_RCC_OscConfig+0x76>
 8007000:	4b80      	ldr	r3, [pc, #512]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7f      	ldr	r2, [pc, #508]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e02e      	b.n	800706c <HAL_RCC_OscConfig+0xd4>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10c      	bne.n	8007030 <HAL_RCC_OscConfig+0x98>
 8007016:	4b7b      	ldr	r3, [pc, #492]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a7a      	ldr	r2, [pc, #488]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800701c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	4b78      	ldr	r3, [pc, #480]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a77      	ldr	r2, [pc, #476]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e01d      	b.n	800706c <HAL_RCC_OscConfig+0xd4>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007038:	d10c      	bne.n	8007054 <HAL_RCC_OscConfig+0xbc>
 800703a:	4b72      	ldr	r3, [pc, #456]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a71      	ldr	r2, [pc, #452]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b6f      	ldr	r3, [pc, #444]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a6e      	ldr	r2, [pc, #440]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e00b      	b.n	800706c <HAL_RCC_OscConfig+0xd4>
 8007054:	4b6b      	ldr	r3, [pc, #428]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6a      	ldr	r2, [pc, #424]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800705a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4b68      	ldr	r3, [pc, #416]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a67      	ldr	r2, [pc, #412]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d013      	beq.n	800709c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007074:	f7fd faa6 	bl	80045c4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800707c:	f7fd faa2 	bl	80045c4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b64      	cmp	r3, #100	@ 0x64
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e200      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	4b5d      	ldr	r3, [pc, #372]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0xe4>
 800709a:	e014      	b.n	80070c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709c:	f7fd fa92 	bl	80045c4 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a4:	f7fd fa8e 	bl	80045c4 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b64      	cmp	r3, #100	@ 0x64
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e1ec      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070b6:	4b53      	ldr	r3, [pc, #332]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x10c>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d063      	beq.n	800719a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 030c 	and.w	r3, r3, #12
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070de:	4b49      	ldr	r3, [pc, #292]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d11c      	bne.n	8007124 <HAL_RCC_OscConfig+0x18c>
 80070ea:	4b46      	ldr	r3, [pc, #280]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d116      	bne.n	8007124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070f6:	4b43      	ldr	r3, [pc, #268]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_RCC_OscConfig+0x176>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d001      	beq.n	800710e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e1c0      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710e:	4b3d      	ldr	r3, [pc, #244]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4939      	ldr	r1, [pc, #228]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	e03a      	b.n	800719a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d020      	beq.n	800716e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800712c:	4b36      	ldr	r3, [pc, #216]	@ (8007208 <HAL_RCC_OscConfig+0x270>)
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007132:	f7fd fa47 	bl	80045c4 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800713a:	f7fd fa43 	bl	80045c4 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e1a1      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800714c:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4927      	ldr	r1, [pc, #156]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	600b      	str	r3, [r1, #0]
 800716c:	e015      	b.n	800719a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800716e:	4b26      	ldr	r3, [pc, #152]	@ (8007208 <HAL_RCC_OscConfig+0x270>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fd fa26 	bl	80045c4 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800717c:	f7fd fa22 	bl	80045c4 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e180      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800718e:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d03a      	beq.n	800721c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d019      	beq.n	80071e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ae:	4b17      	ldr	r3, [pc, #92]	@ (800720c <HAL_RCC_OscConfig+0x274>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b4:	f7fd fa06 	bl	80045c4 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071bc:	f7fd fa02 	bl	80045c4 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e160      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <HAL_RCC_OscConfig+0x26c>)
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071da:	2001      	movs	r0, #1
 80071dc:	f000 fad8 	bl	8007790 <RCC_Delay>
 80071e0:	e01c      	b.n	800721c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e2:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <HAL_RCC_OscConfig+0x274>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e8:	f7fd f9ec 	bl	80045c4 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ee:	e00f      	b.n	8007210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f0:	f7fd f9e8 	bl	80045c4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d908      	bls.n	8007210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e146      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
 8007202:	bf00      	nop
 8007204:	40021000 	.word	0x40021000
 8007208:	42420000 	.word	0x42420000
 800720c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007210:	4b92      	ldr	r3, [pc, #584]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e9      	bne.n	80071f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80a6 	beq.w	8007376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800722e:	4b8b      	ldr	r3, [pc, #556]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10d      	bne.n	8007256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723a:	4b88      	ldr	r3, [pc, #544]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4a87      	ldr	r2, [pc, #540]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007244:	61d3      	str	r3, [r2, #28]
 8007246:	4b85      	ldr	r3, [pc, #532]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007256:	4b82      	ldr	r3, [pc, #520]	@ (8007460 <HAL_RCC_OscConfig+0x4c8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d118      	bne.n	8007294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007262:	4b7f      	ldr	r3, [pc, #508]	@ (8007460 <HAL_RCC_OscConfig+0x4c8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7e      	ldr	r2, [pc, #504]	@ (8007460 <HAL_RCC_OscConfig+0x4c8>)
 8007268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800726c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726e:	f7fd f9a9 	bl	80045c4 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007276:	f7fd f9a5 	bl	80045c4 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b64      	cmp	r3, #100	@ 0x64
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e103      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	4b75      	ldr	r3, [pc, #468]	@ (8007460 <HAL_RCC_OscConfig+0x4c8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f0      	beq.n	8007276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <HAL_RCC_OscConfig+0x312>
 800729c:	4b6f      	ldr	r3, [pc, #444]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	4a6e      	ldr	r2, [pc, #440]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	6213      	str	r3, [r2, #32]
 80072a8:	e02d      	b.n	8007306 <HAL_RCC_OscConfig+0x36e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10c      	bne.n	80072cc <HAL_RCC_OscConfig+0x334>
 80072b2:	4b6a      	ldr	r3, [pc, #424]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	4a69      	ldr	r2, [pc, #420]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	6213      	str	r3, [r2, #32]
 80072be:	4b67      	ldr	r3, [pc, #412]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	4a66      	ldr	r2, [pc, #408]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	6213      	str	r3, [r2, #32]
 80072ca:	e01c      	b.n	8007306 <HAL_RCC_OscConfig+0x36e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d10c      	bne.n	80072ee <HAL_RCC_OscConfig+0x356>
 80072d4:	4b61      	ldr	r3, [pc, #388]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	4a60      	ldr	r2, [pc, #384]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072da:	f043 0304 	orr.w	r3, r3, #4
 80072de:	6213      	str	r3, [r2, #32]
 80072e0:	4b5e      	ldr	r3, [pc, #376]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	4a5d      	ldr	r2, [pc, #372]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6213      	str	r3, [r2, #32]
 80072ec:	e00b      	b.n	8007306 <HAL_RCC_OscConfig+0x36e>
 80072ee:	4b5b      	ldr	r3, [pc, #364]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	4a5a      	ldr	r2, [pc, #360]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	6213      	str	r3, [r2, #32]
 80072fa:	4b58      	ldr	r3, [pc, #352]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4a57      	ldr	r2, [pc, #348]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d015      	beq.n	800733a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800730e:	f7fd f959 	bl	80045c4 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007314:	e00a      	b.n	800732c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007316:	f7fd f955 	bl	80045c4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0b1      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732c:	4b4b      	ldr	r3, [pc, #300]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0ee      	beq.n	8007316 <HAL_RCC_OscConfig+0x37e>
 8007338:	e014      	b.n	8007364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800733a:	f7fd f943 	bl	80045c4 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007340:	e00a      	b.n	8007358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007342:	f7fd f93f 	bl	80045c4 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007350:	4293      	cmp	r3, r2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e09b      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007358:	4b40      	ldr	r3, [pc, #256]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1ee      	bne.n	8007342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d105      	bne.n	8007376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800736a:	4b3c      	ldr	r3, [pc, #240]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	4a3b      	ldr	r2, [pc, #236]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8087 	beq.w	800748e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007380:	4b36      	ldr	r3, [pc, #216]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d061      	beq.n	8007450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d146      	bne.n	8007422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007394:	4b33      	ldr	r3, [pc, #204]	@ (8007464 <HAL_RCC_OscConfig+0x4cc>)
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739a:	f7fd f913 	bl	80045c4 <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a2:	f7fd f90f 	bl	80045c4 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e06d      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b4:	4b29      	ldr	r3, [pc, #164]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f0      	bne.n	80073a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c8:	d108      	bne.n	80073dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073ca:	4b24      	ldr	r3, [pc, #144]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	4921      	ldr	r1, [pc, #132]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073dc:	4b1f      	ldr	r3, [pc, #124]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a19      	ldr	r1, [r3, #32]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	430b      	orrs	r3, r1
 80073ee:	491b      	ldr	r1, [pc, #108]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007464 <HAL_RCC_OscConfig+0x4cc>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fa:	f7fd f8e3 	bl	80045c4 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007402:	f7fd f8df 	bl	80045c4 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e03d      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007414:	4b11      	ldr	r3, [pc, #68]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <HAL_RCC_OscConfig+0x46a>
 8007420:	e035      	b.n	800748e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <HAL_RCC_OscConfig+0x4cc>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007428:	f7fd f8cc 	bl	80045c4 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007430:	f7fd f8c8 	bl	80045c4 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e026      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007442:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_RCC_OscConfig+0x4c4>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x498>
 800744e:	e01e      	b.n	800748e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d107      	bne.n	8007468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e019      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
 800745c:	40021000 	.word	0x40021000
 8007460:	40007000 	.word	0x40007000
 8007464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <HAL_RCC_OscConfig+0x500>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	429a      	cmp	r2, r3
 800747a:	d106      	bne.n	800748a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007486:	429a      	cmp	r2, r3
 8007488:	d001      	beq.n	800748e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021000 	.word	0x40021000

0800749c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0d0      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074b0:	4b6a      	ldr	r3, [pc, #424]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d910      	bls.n	80074e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074be:	4b67      	ldr	r3, [pc, #412]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f023 0207 	bic.w	r2, r3, #7
 80074c6:	4965      	ldr	r1, [pc, #404]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ce:	4b63      	ldr	r3, [pc, #396]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d001      	beq.n	80074e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0b8      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d020      	beq.n	800752e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074f8:	4b59      	ldr	r3, [pc, #356]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4a58      	ldr	r2, [pc, #352]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007510:	4b53      	ldr	r3, [pc, #332]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a52      	ldr	r2, [pc, #328]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800751a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800751c:	4b50      	ldr	r3, [pc, #320]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	494d      	ldr	r1, [pc, #308]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 800752a:	4313      	orrs	r3, r2
 800752c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d040      	beq.n	80075bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007542:	4b47      	ldr	r3, [pc, #284]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d115      	bne.n	800757a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e07f      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d107      	bne.n	800756a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755a:	4b41      	ldr	r3, [pc, #260]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e073      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800756a:	4b3d      	ldr	r3, [pc, #244]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e06b      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f023 0203 	bic.w	r2, r3, #3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4936      	ldr	r1, [pc, #216]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	4313      	orrs	r3, r2
 800758a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800758c:	f7fd f81a 	bl	80045c4 <HAL_GetTick>
 8007590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007592:	e00a      	b.n	80075aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007594:	f7fd f816 	bl	80045c4 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e053      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f003 020c 	and.w	r2, r3, #12
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d1eb      	bne.n	8007594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075bc:	4b27      	ldr	r3, [pc, #156]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d210      	bcs.n	80075ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ca:	4b24      	ldr	r3, [pc, #144]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f023 0207 	bic.w	r2, r3, #7
 80075d2:	4922      	ldr	r1, [pc, #136]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075da:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_RCC_ClockConfig+0x1c0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d001      	beq.n	80075ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e032      	b.n	8007652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075f8:	4b19      	ldr	r3, [pc, #100]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4916      	ldr	r1, [pc, #88]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007616:	4b12      	ldr	r3, [pc, #72]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	490e      	ldr	r1, [pc, #56]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007626:	4313      	orrs	r3, r2
 8007628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800762a:	f000 f821 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 800762e:	4602      	mov	r2, r0
 8007630:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	490a      	ldr	r1, [pc, #40]	@ (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800763c:	5ccb      	ldrb	r3, [r1, r3]
 800763e:	fa22 f303 	lsr.w	r3, r2, r3
 8007642:	4a09      	ldr	r2, [pc, #36]	@ (8007668 <HAL_RCC_ClockConfig+0x1cc>)
 8007644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007646:	4b09      	ldr	r3, [pc, #36]	@ (800766c <HAL_RCC_ClockConfig+0x1d0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7fc ff78 	bl	8004540 <HAL_InitTick>

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40022000 	.word	0x40022000
 8007660:	40021000 	.word	0x40021000
 8007664:	0800e494 	.word	0x0800e494
 8007668:	20000028 	.word	0x20000028
 800766c:	2000002c 	.word	0x2000002c

08007670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007670:	b490      	push	{r4, r7}
 8007672:	b08a      	sub	sp, #40	@ 0x28
 8007674:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007676:	4b29      	ldr	r3, [pc, #164]	@ (800771c <HAL_RCC_GetSysClockFreq+0xac>)
 8007678:	1d3c      	adds	r4, r7, #4
 800767a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800767c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007680:	f240 2301 	movw	r3, #513	@ 0x201
 8007684:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	2300      	movs	r3, #0
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800769a:	4b21      	ldr	r3, [pc, #132]	@ (8007720 <HAL_RCC_GetSysClockFreq+0xb0>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d002      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x40>
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_GetSysClockFreq+0x46>
 80076ae:	e02b      	b.n	8007708 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80076b2:	623b      	str	r3, [r7, #32]
      break;
 80076b4:	e02b      	b.n	800770e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	0c9b      	lsrs	r3, r3, #18
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	3328      	adds	r3, #40	@ 0x28
 80076c0:	443b      	add	r3, r7
 80076c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80076c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d012      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076d2:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <HAL_RCC_GetSysClockFreq+0xb0>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	0c5b      	lsrs	r3, r3, #17
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	3328      	adds	r3, #40	@ 0x28
 80076de:	443b      	add	r3, r7
 80076e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80076e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007724 <HAL_RCC_GetSysClockFreq+0xb4>)
 80076ea:	fb03 f202 	mul.w	r2, r3, r2
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f6:	e004      	b.n	8007702 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	623b      	str	r3, [r7, #32]
      break;
 8007706:	e002      	b.n	800770e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007708:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <HAL_RCC_GetSysClockFreq+0xb4>)
 800770a:	623b      	str	r3, [r7, #32]
      break;
 800770c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800770e:	6a3b      	ldr	r3, [r7, #32]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3728      	adds	r7, #40	@ 0x28
 8007714:	46bd      	mov	sp, r7
 8007716:	bc90      	pop	{r4, r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	0800e42c 	.word	0x0800e42c
 8007720:	40021000 	.word	0x40021000
 8007724:	007a1200 	.word	0x007a1200
 8007728:	003d0900 	.word	0x003d0900

0800772c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007730:	4b02      	ldr	r3, [pc, #8]	@ (800773c <HAL_RCC_GetHCLKFreq+0x10>)
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	20000028 	.word	0x20000028

08007740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007744:	f7ff fff2 	bl	800772c <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4903      	ldr	r1, [pc, #12]	@ (8007764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800775c:	4618      	mov	r0, r3
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40021000 	.word	0x40021000
 8007764:	0800e4a4 	.word	0x0800e4a4

08007768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800776c:	f7ff ffde 	bl	800772c <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	0adb      	lsrs	r3, r3, #11
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4903      	ldr	r1, [pc, #12]	@ (800778c <HAL_RCC_GetPCLK2Freq+0x24>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40021000 	.word	0x40021000
 800778c:	0800e4a4 	.word	0x0800e4a4

08007790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <RCC_Delay+0x34>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a0a      	ldr	r2, [pc, #40]	@ (80077c8 <RCC_Delay+0x38>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0a5b      	lsrs	r3, r3, #9
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077ac:	bf00      	nop
  }
  while (Delay --);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f9      	bne.n	80077ac <RCC_Delay+0x1c>
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	20000028 	.word	0x20000028
 80077c8:	10624dd3 	.word	0x10624dd3

080077cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d07d      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80077e8:	2300      	movs	r3, #0
 80077ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ec:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f8:	4b4c      	ldr	r3, [pc, #304]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4a4b      	ldr	r2, [pc, #300]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007802:	61d3      	str	r3, [r2, #28]
 8007804:	4b49      	ldr	r3, [pc, #292]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007814:	4b46      	ldr	r3, [pc, #280]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d118      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007820:	4b43      	ldr	r3, [pc, #268]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a42      	ldr	r2, [pc, #264]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800782a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800782c:	f7fc feca 	bl	80045c4 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007832:	e008      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007834:	f7fc fec6 	bl	80045c4 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b64      	cmp	r3, #100	@ 0x64
 8007840:	d901      	bls.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e06d      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007846:	4b3a      	ldr	r3, [pc, #232]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007852:	4b36      	ldr	r3, [pc, #216]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02e      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	429a      	cmp	r2, r3
 800786e:	d027      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007870:	4b2e      	ldr	r3, [pc, #184]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007878:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800787a:	4b2e      	ldr	r3, [pc, #184]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007880:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007886:	4a29      	ldr	r2, [pc, #164]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d014      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007896:	f7fc fe95 	bl	80045c4 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789c:	e00a      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fc fe91 	bl	80045c4 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e036      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b4:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ee      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4917      	ldr	r1, [pc, #92]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d105      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078d8:	4b14      	ldr	r3, [pc, #80]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	4a13      	ldr	r2, [pc, #76]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078f0:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	490b      	ldr	r1, [pc, #44]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	d008      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800790e:	4b07      	ldr	r3, [pc, #28]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	4904      	ldr	r1, [pc, #16]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800791c:	4313      	orrs	r3, r2
 800791e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40021000 	.word	0x40021000
 8007930:	40007000 	.word	0x40007000
 8007934:	42420440 	.word	0x42420440

08007938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e076      	b.n	8007a38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d108      	bne.n	8007964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800795a:	d009      	beq.n	8007970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	61da      	str	r2, [r3, #28]
 8007962:	e005      	b.n	8007970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fc fc50 	bl	8004230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f4:	ea42 0103 	orr.w	r1, r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	0c1a      	lsrs	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f002 0204 	and.w	r2, r2, #4
 8007a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	@ 0x30
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x26>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e18a      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x33c>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a6e:	f7fc fda9 	bl	80045c4 <HAL_GetTick>
 8007a72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a84:	887b      	ldrh	r3, [r7, #2]
 8007a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d00f      	beq.n	8007ab0 <HAL_SPI_TransmitReceive+0x70>
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a96:	d107      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x68>
 8007aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d003      	beq.n	8007ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007aae:	e15b      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x82>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x82>
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007ac8:	e14e      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d003      	beq.n	8007ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	887a      	ldrh	r2, [r7, #2]
 8007b00:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	887a      	ldrh	r2, [r7, #2]
 8007b06:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1e:	2b40      	cmp	r3, #64	@ 0x40
 8007b20:	d007      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b3a:	d178      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0x10a>
 8007b44:	8b7b      	ldrh	r3, [r7, #26]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d166      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b6e:	e053      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d11b      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x176>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d016      	beq.n	8007bb6 <HAL_SPI_TransmitReceive+0x176>
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d113      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	881a      	ldrh	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9e:	1c9a      	adds	r2, r3, #2
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d119      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d014      	beq.n	8007bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd8:	b292      	uxth	r2, r2
 8007bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be0:	1c9a      	adds	r2, r3, #2
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bf8:	f7fc fce4 	bl	80045c4 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d807      	bhi.n	8007c18 <HAL_SPI_TransmitReceive+0x1d8>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d003      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007c16:	e0a7      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1a6      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x130>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1a1      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x130>
 8007c2c:	e07c      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_SPI_TransmitReceive+0x1fc>
 8007c36:	8b7b      	ldrh	r3, [r7, #26]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d16b      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c62:	e057      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d11c      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x26c>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <HAL_SPI_TransmitReceive+0x26c>
 8007c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d114      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	7812      	ldrb	r2, [r2, #0]
 8007c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d119      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x2ae>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d014      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cea:	2301      	movs	r3, #1
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cee:	f7fc fc69 	bl	80045c4 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d803      	bhi.n	8007d06 <HAL_SPI_TransmitReceive+0x2c6>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d102      	bne.n	8007d0c <HAL_SPI_TransmitReceive+0x2cc>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007d12:	e029      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1a2      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x224>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d19d      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f8b1 	bl	8007e94 <SPI_EndRxTxTransaction>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d006      	beq.n	8007d46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007d44:	e010      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	e000      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3730      	adds	r7, #48	@ 0x30
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	4613      	mov	r3, r2
 8007d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d94:	f7fc fc16 	bl	80045c4 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007da4:	f7fc fc0e 	bl	80045c4 <HAL_GetTick>
 8007da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007daa:	4b39      	ldr	r3, [pc, #228]	@ (8007e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	015b      	lsls	r3, r3, #5
 8007db0:	0d1b      	lsrs	r3, r3, #20
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	fb02 f303 	mul.w	r3, r2, r3
 8007db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dba:	e054      	b.n	8007e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d050      	beq.n	8007e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dc4:	f7fc fbfe 	bl	80045c4 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d902      	bls.n	8007dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d13d      	bne.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007df2:	d111      	bne.n	8007e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfc:	d004      	beq.n	8007e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e06:	d107      	bne.n	8007e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e20:	d10f      	bne.n	8007e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e017      	b.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d19b      	bne.n	8007dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000028 	.word	0x20000028

08007e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2180      	movs	r1, #128	@ 0x80
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff ff6a 	bl	8007d84 <SPI_WaitFlagStateUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e000      	b.n	8007ec8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e041      	b.n	8007f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fc f9e4 	bl	80042c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f000 fa70 	bl	80083f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d001      	beq.n	8007f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e03a      	b.n	8007ffe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a18      	ldr	r2, [pc, #96]	@ (8008008 <HAL_TIM_Base_Start_IT+0x98>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x58>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x58>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a14      	ldr	r2, [pc, #80]	@ (800800c <HAL_TIM_Base_Start_IT+0x9c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x58>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a13      	ldr	r2, [pc, #76]	@ (8008010 <HAL_TIM_Base_Start_IT+0xa0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d111      	bne.n	8007fec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d010      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0201 	orr.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	e007      	b.n	8007ffc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800

08008014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b02      	cmp	r3, #2
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b02      	cmp	r3, #2
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0202 	mvn.w	r2, #2
 8008040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9b1 	bl	80083be <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f9a4 	bl	80083ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f9b3 	bl	80083d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b04      	cmp	r3, #4
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0204 	mvn.w	r2, #4
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f987 	bl	80083be <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f97a 	bl	80083ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f989 	bl	80083d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0208 	mvn.w	r2, #8
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2204      	movs	r2, #4
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f95d 	bl	80083be <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f950 	bl	80083ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f95f 	bl	80083d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b10      	cmp	r3, #16
 8008124:	d122      	bne.n	800816c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b10      	cmp	r3, #16
 8008132:	d11b      	bne.n	800816c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0210 	mvn.w	r2, #16
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2208      	movs	r2, #8
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f933 	bl	80083be <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f926 	bl	80083ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f935 	bl	80083d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b01      	cmp	r3, #1
 8008178:	d10e      	bne.n	8008198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b01      	cmp	r3, #1
 8008186:	d107      	bne.n	8008198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0201 	mvn.w	r2, #1
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f8 fd7a 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081a2:	2b80      	cmp	r3, #128	@ 0x80
 80081a4:	d10e      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b0:	2b80      	cmp	r3, #128	@ 0x80
 80081b2:	d107      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa77 	bl	80086b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d10e      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d107      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f8f9 	bl	80083e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d10e      	bne.n	800821c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b20      	cmp	r3, #32
 800820a:	d107      	bne.n	800821c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0220 	mvn.w	r2, #32
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa42 	bl	80086a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_TIM_ConfigClockSource+0x18>
 8008238:	2302      	movs	r3, #2
 800823a:	e0b3      	b.n	80083a4 <HAL_TIM_ConfigClockSource+0x180>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800825a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008262:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008274:	d03e      	beq.n	80082f4 <HAL_TIM_ConfigClockSource+0xd0>
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800827a:	f200 8087 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x168>
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008282:	f000 8085 	beq.w	8008390 <HAL_TIM_ConfigClockSource+0x16c>
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800828a:	d87f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 800828c:	2b70      	cmp	r3, #112	@ 0x70
 800828e:	d01a      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0xa2>
 8008290:	2b70      	cmp	r3, #112	@ 0x70
 8008292:	d87b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 8008294:	2b60      	cmp	r3, #96	@ 0x60
 8008296:	d050      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x116>
 8008298:	2b60      	cmp	r3, #96	@ 0x60
 800829a:	d877      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 800829c:	2b50      	cmp	r3, #80	@ 0x50
 800829e:	d03c      	beq.n	800831a <HAL_TIM_ConfigClockSource+0xf6>
 80082a0:	2b50      	cmp	r3, #80	@ 0x50
 80082a2:	d873      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 80082a4:	2b40      	cmp	r3, #64	@ 0x40
 80082a6:	d058      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x136>
 80082a8:	2b40      	cmp	r3, #64	@ 0x40
 80082aa:	d86f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 80082ac:	2b30      	cmp	r3, #48	@ 0x30
 80082ae:	d064      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x156>
 80082b0:	2b30      	cmp	r3, #48	@ 0x30
 80082b2:	d86b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d060      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x156>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d867      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x168>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05c      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x156>
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d05a      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80082c4:	e062      	b.n	800838c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6899      	ldr	r1, [r3, #8]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f000 f966 	bl	80085a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	609a      	str	r2, [r3, #8]
      break;
 80082f2:	e04e      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6899      	ldr	r1, [r3, #8]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f000 f94f 	bl	80085a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008316:	609a      	str	r2, [r3, #8]
      break;
 8008318:	e03b      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 f8c6 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2150      	movs	r1, #80	@ 0x50
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f91d 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008338:	e02b      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6859      	ldr	r1, [r3, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	f000 f8e4 	bl	8008514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2160      	movs	r1, #96	@ 0x60
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f90d 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008358:	e01b      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6859      	ldr	r1, [r3, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	461a      	mov	r2, r3
 8008368:	f000 f8a6 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2140      	movs	r1, #64	@ 0x40
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f8fd 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008378:	e00b      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f000 f8f4 	bl	8008572 <TIM_ITRx_SetConfig>
        break;
 800838a:	e002      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800838c:	bf00      	nop
 800838e:	e000      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008390:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a29      	ldr	r2, [pc, #164]	@ (80084ac <TIM_Base_SetConfig+0xb8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0x30>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0x30>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a26      	ldr	r2, [pc, #152]	@ (80084b0 <TIM_Base_SetConfig+0xbc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0x30>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a25      	ldr	r2, [pc, #148]	@ (80084b4 <TIM_Base_SetConfig+0xc0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d108      	bne.n	8008436 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a1c      	ldr	r2, [pc, #112]	@ (80084ac <TIM_Base_SetConfig+0xb8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0x62>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0x62>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a19      	ldr	r2, [pc, #100]	@ (80084b0 <TIM_Base_SetConfig+0xbc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0x62>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a18      	ldr	r2, [pc, #96]	@ (80084b4 <TIM_Base_SetConfig+0xc0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a07      	ldr	r2, [pc, #28]	@ (80084ac <TIM_Base_SetConfig+0xb8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d103      	bne.n	800849c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	615a      	str	r2, [r3, #20]
}
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800

080084b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 030a 	bic.w	r3, r3, #10
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f023 0210 	bic.w	r2, r3, #16
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800853e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	031b      	lsls	r3, r3, #12
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	f043 0307 	orr.w	r3, r3, #7
 8008594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr

080085a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b087      	sub	sp, #28
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	021a      	lsls	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	609a      	str	r2, [r3, #8]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	bc80      	pop	{r7}
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e046      	b.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a16      	ldr	r2, [pc, #88]	@ (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00e      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008648:	d009      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a12      	ldr	r2, [pc, #72]	@ (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a10      	ldr	r2, [pc, #64]	@ (800869c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d10c      	bne.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4313      	orrs	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr
 8008694:	40012c00 	.word	0x40012c00
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800

080086a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e03f      	b.n	8008756 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fb fe0e 	bl	800430c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2224      	movs	r2, #36	@ 0x24
 80086f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f9a3 	bl	8008a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800871c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800872c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800873c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b08a      	sub	sp, #40	@ 0x28
 8008762:	af02      	add	r7, sp, #8
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b20      	cmp	r3, #32
 800877c:	d17c      	bne.n	8008878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_UART_Transmit+0x2c>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e075      	b.n	800887a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_UART_Transmit+0x3e>
 8008798:	2302      	movs	r3, #2
 800879a:	e06e      	b.n	800887a <HAL_UART_Transmit+0x11c>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2221      	movs	r2, #33	@ 0x21
 80087ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80087b2:	f7fb ff07 	bl	80045c4 <HAL_GetTick>
 80087b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	88fa      	ldrh	r2, [r7, #6]
 80087bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087cc:	d108      	bne.n	80087e0 <HAL_UART_Transmit+0x82>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e003      	b.n	80087e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80087f0:	e02a      	b.n	8008848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2200      	movs	r2, #0
 80087fa:	2180      	movs	r1, #128	@ 0x80
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f8df 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e036      	b.n	800887a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	3302      	adds	r3, #2
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	e007      	b.n	800883a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	3301      	adds	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800884c:	b29b      	uxth	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1cf      	bne.n	80087f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	2140      	movs	r1, #64	@ 0x40
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f8af 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e006      	b.n	800887a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	e000      	b.n	800887a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008878:	2302      	movs	r3, #2
  }
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b08a      	sub	sp, #40	@ 0x28
 8008886:	af02      	add	r7, sp, #8
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	f040 8089 	bne.w	80089b6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <HAL_UART_Receive+0x2e>
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e081      	b.n	80089b8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_UART_Receive+0x40>
 80088be:	2302      	movs	r3, #2
 80088c0:	e07a      	b.n	80089b8 <HAL_UART_Receive+0x136>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2222      	movs	r2, #34	@ 0x22
 80088d4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088d8:	f7fb fe74 	bl	80045c4 <HAL_GetTick>
 80088dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	88fa      	ldrh	r2, [r7, #6]
 80088e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f2:	d108      	bne.n	8008906 <HAL_UART_Receive+0x84>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d104      	bne.n	8008906 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	e003      	b.n	800890e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008916:	e043      	b.n	80089a0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	2120      	movs	r1, #32
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 f84c 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e042      	b.n	80089b8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10c      	bne.n	8008952 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008944:	b29a      	uxth	r2, r3
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	3302      	adds	r3, #2
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	e01f      	b.n	8008992 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895a:	d007      	beq.n	800896c <HAL_UART_Receive+0xea>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <HAL_UART_Receive+0xf8>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	e008      	b.n	800898c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008986:	b2da      	uxtb	r2, r3
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	3301      	adds	r3, #1
 8008990:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1b6      	bne.n	8008918 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e000      	b.n	80089b8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80089b6:	2302      	movs	r3, #2
  }
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d0:	e02c      	b.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d028      	beq.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089e0:	f7fb fdf0 	bl	80045c4 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d21d      	bcs.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80089fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695a      	ldr	r2, [r3, #20]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e00f      	b.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	4013      	ands	r3, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2301      	moveq	r3, #1
 8008a3e:	2300      	movne	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d0c3      	beq.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008a8e:	f023 030c 	bic.w	r3, r3, #12
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b68 <UART_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d103      	bne.n	8008ac4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008abc:	f7fe fe54 	bl	8007768 <HAL_RCC_GetPCLK2Freq>
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	e002      	b.n	8008aca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ac4:	f7fe fe3c 	bl	8007740 <HAL_RCC_GetPCLK1Freq>
 8008ac8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009a      	lsls	r2, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae0:	4a22      	ldr	r2, [pc, #136]	@ (8008b6c <UART_SetConfig+0x118>)
 8008ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	0119      	lsls	r1, r3, #4
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009a      	lsls	r2, r3, #2
 8008af4:	441a      	add	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b00:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <UART_SetConfig+0x118>)
 8008b02:	fba3 0302 	umull	r0, r3, r3, r2
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	2064      	movs	r0, #100	@ 0x64
 8008b0a:	fb00 f303 	mul.w	r3, r0, r3
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	3332      	adds	r3, #50	@ 0x32
 8008b14:	4a15      	ldr	r2, [pc, #84]	@ (8008b6c <UART_SetConfig+0x118>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b20:	4419      	add	r1, r3
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009a      	lsls	r2, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b38:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <UART_SetConfig+0x118>)
 8008b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	2064      	movs	r0, #100	@ 0x64
 8008b42:	fb00 f303 	mul.w	r3, r0, r3
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	3332      	adds	r3, #50	@ 0x32
 8008b4c:	4a07      	ldr	r2, [pc, #28]	@ (8008b6c <UART_SetConfig+0x118>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	f003 020f 	and.w	r2, r3, #15
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40013800 	.word	0x40013800
 8008b6c:	51eb851f 	.word	0x51eb851f

08008b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b70:	b084      	sub	sp, #16
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	f107 0014 	add.w	r0, r7, #20
 8008b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	b004      	add	sp, #16
 8008b8e:	4770      	bx	lr

08008b90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ba0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008bc4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008bc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4013      	ands	r3, r2
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr

08008c08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c08:	b084      	sub	sp, #16
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	f107 0014 	add.w	r0, r7, #20
 8008c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	b004      	add	sp, #16
 8008c46:	4770      	bx	lr

08008c48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b09b      	sub	sp, #108	@ 0x6c
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	78db      	ldrb	r3, [r3, #3]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d81f      	bhi.n	8008cba <USB_ActivateEndpoint+0x72>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <USB_ActivateEndpoint+0x38>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cc3 	.word	0x08008cc3
 8008c8c:	08008c9f 	.word	0x08008c9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008c94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008c98:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008c9c:	e012      	b.n	8008cc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008c9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008ca2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008ca6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008caa:	e00b      	b.n	8008cc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008cac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008cb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008cb4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008cb8:	e004      	b.n	8008cc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008cc0:	e000      	b.n	8008cc4 <USB_ActivateEndpoint+0x7c>
      break;
 8008cc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	441a      	add	r2, r3
 8008cce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	7b1b      	ldrb	r3, [r3, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 8149 	bne.w	8008fc6 <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8084 	beq.w	8008e46 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	4413      	add	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	011a      	lsls	r2, r3, #4
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88db      	ldrh	r3, [r3, #6]
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	81fb      	strh	r3, [r7, #14]
 8008d80:	89fb      	ldrh	r3, [r7, #14]
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01b      	beq.n	8008dc2 <USB_ActivateEndpoint+0x17a>
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	81bb      	strh	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	89bb      	ldrh	r3, [r7, #12]
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d020      	beq.n	8008e0c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de0:	813b      	strh	r3, [r7, #8]
 8008de2:	893b      	ldrh	r3, [r7, #8]
 8008de4:	f083 0320 	eor.w	r3, r3, #32
 8008de8:	813b      	strh	r3, [r7, #8]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	893b      	ldrh	r3, [r7, #8]
 8008df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	8013      	strh	r3, [r2, #0]
 8008e0a:	e27f      	b.n	800930c <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e22:	817b      	strh	r3, [r7, #10]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	441a      	add	r2, r3
 8008e2e:	897b      	ldrh	r3, [r7, #10]
 8008e30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]
 8008e44:	e262      	b.n	800930c <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	4413      	add	r3, r2
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	011a      	lsls	r2, r3, #4
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	4413      	add	r3, r2
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	011a      	lsls	r2, r3, #4
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d112      	bne.n	8008ecc <USB_ActivateEndpoint+0x284>
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	801a      	strh	r2, [r3, #0]
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	e02f      	b.n	8008f2c <USB_ActivateEndpoint+0x2e4>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ed2:	d813      	bhi.n	8008efc <USB_ActivateEndpoint+0x2b4>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	085b      	lsrs	r3, r3, #1
 8008eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <USB_ActivateEndpoint+0x2a6>
 8008ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eea:	3301      	adds	r3, #1
 8008eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	e017      	b.n	8008f2c <USB_ActivateEndpoint+0x2e4>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 031f 	and.w	r3, r3, #31
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <USB_ActivateEndpoint+0x2ce>
 8008f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f12:	3b01      	subs	r3, #1
 8008f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	029b      	lsls	r3, r3, #10
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	83fb      	strh	r3, [r7, #30]
 8008f3a:	8bfb      	ldrh	r3, [r7, #30]
 8008f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01b      	beq.n	8008f7c <USB_ActivateEndpoint+0x334>
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5a:	83bb      	strh	r3, [r7, #28]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	441a      	add	r2, r3
 8008f66:	8bbb      	ldrh	r3, [r7, #28]
 8008f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f92:	837b      	strh	r3, [r7, #26]
 8008f94:	8b7b      	ldrh	r3, [r7, #26]
 8008f96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f9a:	837b      	strh	r3, [r7, #26]
 8008f9c:	8b7b      	ldrh	r3, [r7, #26]
 8008f9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fa2:	837b      	strh	r3, [r7, #26]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	441a      	add	r2, r3
 8008fae:	8b7b      	ldrh	r3, [r7, #26]
 8008fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	8013      	strh	r3, [r2, #0]
 8008fc4:	e1a2      	b.n	800930c <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fdc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	441a      	add	r2, r3
 8008fea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ff6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800900c:	b29b      	uxth	r3, r3
 800900e:	461a      	mov	r2, r3
 8009010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009012:	4413      	add	r3, r2
 8009014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	011a      	lsls	r2, r3, #4
 800901c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800901e:	4413      	add	r3, r2
 8009020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009024:	657b      	str	r3, [r7, #84]	@ 0x54
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	891b      	ldrh	r3, [r3, #8]
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	b29b      	uxth	r3, r3
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	653b      	str	r3, [r7, #80]	@ 0x50
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009040:	b29b      	uxth	r3, r3
 8009042:	461a      	mov	r2, r3
 8009044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009046:	4413      	add	r3, r2
 8009048:	653b      	str	r3, [r7, #80]	@ 0x50
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	011a      	lsls	r2, r3, #4
 8009050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009052:	4413      	add	r3, r2
 8009054:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	895b      	ldrh	r3, [r3, #10]
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	b29b      	uxth	r3, r3
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009068:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 8091 	bne.w	8009196 <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009082:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01b      	beq.n	80090c4 <USB_ActivateEndpoint+0x47c>
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80090d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80090d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <USB_ActivateEndpoint+0x4cc>
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009110:	b29b      	uxth	r3, r3
 8009112:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800912c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800912e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009132:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009134:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009136:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800913a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	441a      	add	r2, r3
 8009146:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800914c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009158:	b29b      	uxth	r3, r3
 800915a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800916e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009172:	867b      	strh	r3, [r7, #50]	@ 0x32
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	441a      	add	r2, r3
 800917e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800918c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009190:	b29b      	uxth	r3, r3
 8009192:	8013      	strh	r3, [r2, #0]
 8009194:	e0ba      	b.n	800930c <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80091a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80091aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d01d      	beq.n	80091ee <USB_ActivateEndpoint+0x5a6>
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	441a      	add	r2, r3
 80091d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80091da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80091fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01d      	beq.n	8009246 <USB_ActivateEndpoint+0x5fe>
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009220:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	78db      	ldrb	r3, [r3, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d024      	beq.n	8009298 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29b      	uxth	r3, r3
 800925c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009264:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800926c:	f083 0320 	eor.w	r3, r3, #32
 8009270:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	441a      	add	r2, r3
 800927e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800928a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800928e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009292:	b29b      	uxth	r3, r3
 8009294:	8013      	strh	r3, [r2, #0]
 8009296:	e01d      	b.n	80092d4 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	441a      	add	r2, r3
 80092bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80092c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	441a      	add	r2, r3
 80092f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80092f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009308:	b29b      	uxth	r3, r3
 800930a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800930c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009310:	4618      	mov	r0, r3
 8009312:	376c      	adds	r7, #108	@ 0x6c
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop

0800931c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800931c:	b480      	push	{r7}
 800931e:	b08d      	sub	sp, #52	@ 0x34
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	7b1b      	ldrb	r3, [r3, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f040 808e 	bne.w	800944c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d044      	beq.n	80093c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	81bb      	strh	r3, [r7, #12]
 8009346:	89bb      	ldrh	r3, [r7, #12]
 8009348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01b      	beq.n	8009388 <USB_DeactivateEndpoint+0x6c>
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009366:	817b      	strh	r3, [r7, #10]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	441a      	add	r2, r3
 8009372:	897b      	ldrh	r3, [r7, #10]
 8009374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800937c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009380:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009384:	b29b      	uxth	r3, r3
 8009386:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800939e:	813b      	strh	r3, [r7, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	441a      	add	r2, r3
 80093aa:	893b      	ldrh	r3, [r7, #8]
 80093ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093bc:	b29b      	uxth	r3, r3
 80093be:	8013      	strh	r3, [r2, #0]
 80093c0:	e192      	b.n	80096e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	827b      	strh	r3, [r7, #18]
 80093d0:	8a7b      	ldrh	r3, [r7, #18]
 80093d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01b      	beq.n	8009412 <USB_DeactivateEndpoint+0xf6>
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f0:	823b      	strh	r3, [r7, #16]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	441a      	add	r2, r3
 80093fc:	8a3b      	ldrh	r3, [r7, #16]
 80093fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009406:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	b29b      	uxth	r3, r3
 8009410:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009428:	81fb      	strh	r3, [r7, #14]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	441a      	add	r2, r3
 8009434:	89fb      	ldrh	r3, [r7, #14]
 8009436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800943a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800943e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009446:	b29b      	uxth	r3, r3
 8009448:	8013      	strh	r3, [r2, #0]
 800944a:	e14d      	b.n	80096e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 80a5 	bne.w	80095a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	843b      	strh	r3, [r7, #32]
 8009464:	8c3b      	ldrh	r3, [r7, #32]
 8009466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01b      	beq.n	80094a6 <USB_DeactivateEndpoint+0x18a>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009484:	83fb      	strh	r3, [r7, #30]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	441a      	add	r2, r3
 8009490:	8bfb      	ldrh	r3, [r7, #30]
 8009492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800949e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	83bb      	strh	r3, [r7, #28]
 80094b4:	8bbb      	ldrh	r3, [r7, #28]
 80094b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01b      	beq.n	80094f6 <USB_DeactivateEndpoint+0x1da>
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d4:	837b      	strh	r3, [r7, #26]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	441a      	add	r2, r3
 80094e0:	8b7b      	ldrh	r3, [r7, #26]
 80094e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950c:	833b      	strh	r3, [r7, #24]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	441a      	add	r2, r3
 8009518:	8b3b      	ldrh	r3, [r7, #24]
 800951a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800951e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009526:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800952a:	b29b      	uxth	r3, r3
 800952c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009544:	82fb      	strh	r3, [r7, #22]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	441a      	add	r2, r3
 8009550:	8afb      	ldrh	r3, [r7, #22]
 8009552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800955a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800955e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009562:	b29b      	uxth	r3, r3
 8009564:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800957c:	82bb      	strh	r3, [r7, #20]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	441a      	add	r2, r3
 8009588:	8abb      	ldrh	r3, [r7, #20]
 800958a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800958e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800959a:	b29b      	uxth	r3, r3
 800959c:	8013      	strh	r3, [r2, #0]
 800959e:	e0a3      	b.n	80096e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80095ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80095b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01b      	beq.n	80095f0 <USB_DeactivateEndpoint+0x2d4>
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	441a      	add	r2, r3
 80095da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80095fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01b      	beq.n	8009640 <USB_DeactivateEndpoint+0x324>
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800961a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	441a      	add	r2, r3
 800962a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800962c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009638:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800963c:	b29b      	uxth	r3, r3
 800963e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009656:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	441a      	add	r2, r3
 8009662:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800966c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009674:	b29b      	uxth	r3, r3
 8009676:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29b      	uxth	r3, r3
 8009686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800968a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800968e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	441a      	add	r2, r3
 800969a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800969c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	441a      	add	r2, r3
 80096d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3734      	adds	r7, #52	@ 0x34
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b0c4      	sub	sp, #272	@ 0x110
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009702:	6018      	str	r0, [r3, #0]
 8009704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009708:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800970c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800970e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009712:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b01      	cmp	r3, #1
 800971c:	f040 86ec 	bne.w	800a4f8 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009724:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009730:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	429a      	cmp	r2, r3
 800973a:	d908      	bls.n	800974e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800973c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009740:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800974c:	e007      	b.n	800975e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800974e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009752:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800975e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009762:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	7b1b      	ldrb	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d142      	bne.n	80097f4 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800976e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009772:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6959      	ldr	r1, [r3, #20]
 800977a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800977e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	88da      	ldrh	r2, [r3, #6]
 8009786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800978a:	b29b      	uxth	r3, r3
 800978c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009790:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009794:	6800      	ldr	r0, [r0, #0]
 8009796:	f001 fc92 	bl	800b0be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800979a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800979e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4413      	add	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	011a      	lsls	r2, r3, #4
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4413      	add	r3, r2
 80097d0:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 80097d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	801a      	strh	r2, [r3, #0]
 80097f0:	f000 be34 	b.w	800a45c <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80097f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	2b02      	cmp	r3, #2
 8009802:	f040 843b 	bne.w	800a07c <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800980a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a1a      	ldr	r2, [r3, #32]
 8009812:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009816:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	f240 83b8 	bls.w	8009f94 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009828:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009832:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800984a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800984e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009852:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800985c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800986c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009874:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987c:	b29b      	uxth	r3, r3
 800987e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009884:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6a1a      	ldr	r2, [r3, #32]
 800988c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009890:	1ad2      	subs	r2, r2, r3
 8009892:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009896:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800989e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 81b4 	beq.w	8009c2e <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d16d      	bne.n	80099be <USB_EPStartXfer+0x2ca>
 80098e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009902:	4413      	add	r3, r2
 8009904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800990a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	011a      	lsls	r2, r3, #4
 8009914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009916:	4413      	add	r3, r2
 8009918:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800991c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800991e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d112      	bne.n	800994c <USB_EPStartXfer+0x258>
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009930:	b29a      	uxth	r2, r3
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009944:	b29a      	uxth	r2, r3
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	e05d      	b.n	8009a08 <USB_EPStartXfer+0x314>
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009950:	2b3e      	cmp	r3, #62	@ 0x3e
 8009952:	d817      	bhi.n	8009984 <USB_EPStartXfer+0x290>
 8009954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800995e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <USB_EPStartXfer+0x280>
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	3301      	adds	r3, #1
 8009970:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009978:	b29b      	uxth	r3, r3
 800997a:	029b      	lsls	r3, r3, #10
 800997c:	b29a      	uxth	r2, r3
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	801a      	strh	r2, [r3, #0]
 8009982:	e041      	b.n	8009a08 <USB_EPStartXfer+0x314>
 8009984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009988:	095b      	lsrs	r3, r3, #5
 800998a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009992:	f003 031f 	and.w	r3, r3, #31
 8009996:	2b00      	cmp	r3, #0
 8009998:	d104      	bne.n	80099a4 <USB_EPStartXfer+0x2b0>
 800999a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999e:	3b01      	subs	r3, #1
 80099a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	029b      	lsls	r3, r3, #10
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	801a      	strh	r2, [r3, #0]
 80099bc:	e024      	b.n	8009a08 <USB_EPStartXfer+0x314>
 80099be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d11c      	bne.n	8009a08 <USB_EPStartXfer+0x314>
 80099ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099dc:	b29b      	uxth	r3, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e2:	4413      	add	r3, r2
 80099e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	011a      	lsls	r2, r3, #4
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	4413      	add	r3, r2
 80099f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80099fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80099fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	895b      	ldrh	r3, [r3, #10]
 8009a14:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6959      	ldr	r1, [r3, #20]
 8009a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009a2e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009a32:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009a36:	6800      	ldr	r0, [r0, #0]
 8009a38:	f001 fb41 	bl	800b0be <USB_WritePMA>
            ep->xfer_buff += len;
 8009a3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695a      	ldr	r2, [r3, #20]
 8009a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4c:	441a      	add	r2, r3
 8009a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6a1a      	ldr	r2, [r3, #32]
 8009a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d90f      	bls.n	8009a96 <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8009a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	621a      	str	r2, [r3, #32]
 8009a94:	e00e      	b.n	8009ab4 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d16d      	bne.n	8009ba0 <USB_EPStartXfer+0x4ac>
 8009ac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	61fb      	str	r3, [r7, #28]
 8009ad0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	61fb      	str	r3, [r7, #28]
 8009ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	011a      	lsls	r2, r3, #4
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d112      	bne.n	8009b2e <USB_EPStartXfer+0x43a>
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e063      	b.n	8009bf6 <USB_EPStartXfer+0x502>
 8009b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b34:	d817      	bhi.n	8009b66 <USB_EPStartXfer+0x472>
 8009b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <USB_EPStartXfer+0x462>
 8009b4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009b50:	3301      	adds	r3, #1
 8009b52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b56:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e047      	b.n	8009bf6 <USB_EPStartXfer+0x502>
 8009b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6a:	095b      	lsrs	r3, r3, #5
 8009b6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b74:	f003 031f 	and.w	r3, r3, #31
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d104      	bne.n	8009b86 <USB_EPStartXfer+0x492>
 8009b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009b80:	3b01      	subs	r3, #1
 8009b82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	029b      	lsls	r3, r3, #10
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	e02a      	b.n	8009bf6 <USB_EPStartXfer+0x502>
 8009ba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d122      	bne.n	8009bf6 <USB_EPStartXfer+0x502>
 8009bb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd0:	4413      	add	r3, r2
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	011a      	lsls	r2, r3, #4
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009bea:	623b      	str	r3, [r7, #32]
 8009bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	891b      	ldrh	r3, [r3, #8]
 8009c02:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6959      	ldr	r1, [r3, #20]
 8009c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009c1c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009c20:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009c24:	6800      	ldr	r0, [r0, #0]
 8009c26:	f001 fa4a 	bl	800b0be <USB_WritePMA>
 8009c2a:	f000 bc17 	b.w	800a45c <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d16d      	bne.n	8009d1a <USB_EPStartXfer+0x626>
 8009c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c5e:	4413      	add	r3, r2
 8009c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	011a      	lsls	r2, r3, #4
 8009c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c72:	4413      	add	r3, r2
 8009c74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d112      	bne.n	8009ca8 <USB_EPStartXfer+0x5b4>
 8009c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e063      	b.n	8009d70 <USB_EPStartXfer+0x67c>
 8009ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cae:	d817      	bhi.n	8009ce0 <USB_EPStartXfer+0x5ec>
 8009cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <USB_EPStartXfer+0x5dc>
 8009cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cca:	3301      	adds	r3, #1
 8009ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	029b      	lsls	r3, r3, #10
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cdc:	801a      	strh	r2, [r3, #0]
 8009cde:	e047      	b.n	8009d70 <USB_EPStartXfer+0x67c>
 8009ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cee:	f003 031f 	and.w	r3, r3, #31
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d104      	bne.n	8009d00 <USB_EPStartXfer+0x60c>
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	029b      	lsls	r3, r3, #10
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d16:	801a      	strh	r2, [r3, #0]
 8009d18:	e02a      	b.n	8009d70 <USB_EPStartXfer+0x67c>
 8009d1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d122      	bne.n	8009d70 <USB_EPStartXfer+0x67c>
 8009d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	461a      	mov	r2, r3
 8009d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d4a:	4413      	add	r3, r2
 8009d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	011a      	lsls	r2, r3, #4
 8009d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5e:	4413      	add	r3, r2
 8009d60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d64:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	891b      	ldrh	r3, [r3, #8]
 8009d7c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6959      	ldr	r1, [r3, #20]
 8009d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009d96:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009d9a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009d9e:	6800      	ldr	r0, [r0, #0]
 8009da0:	f001 f98d 	bl	800b0be <USB_WritePMA>
            ep->xfer_buff += len;
 8009da4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009da8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	695a      	ldr	r2, [r3, #20]
 8009db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db4:	441a      	add	r2, r3
 8009db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009dc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dc6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6a1a      	ldr	r2, [r3, #32]
 8009dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d90f      	bls.n	8009dfe <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009de2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	621a      	str	r2, [r3, #32]
 8009dfc:	e00e      	b.n	8009e1c <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d16d      	bne.n	8009f14 <USB_EPStartXfer+0x820>
 8009e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e58:	4413      	add	r3, r2
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	011a      	lsls	r2, r3, #4
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d112      	bne.n	8009ea2 <USB_EPStartXfer+0x7ae>
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	801a      	strh	r2, [r3, #0]
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	e05d      	b.n	8009f5e <USB_EPStartXfer+0x86a>
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ea8:	d817      	bhi.n	8009eda <USB_EPStartXfer+0x7e6>
 8009eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eae:	085b      	lsrs	r3, r3, #1
 8009eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <USB_EPStartXfer+0x7d6>
 8009ec0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	029b      	lsls	r3, r3, #10
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	e041      	b.n	8009f5e <USB_EPStartXfer+0x86a>
 8009eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ede:	095b      	lsrs	r3, r3, #5
 8009ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee8:	f003 031f 	and.w	r3, r3, #31
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d104      	bne.n	8009efa <USB_EPStartXfer+0x806>
 8009ef0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	029b      	lsls	r3, r3, #10
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f10:	801a      	strh	r2, [r3, #0]
 8009f12:	e024      	b.n	8009f5e <USB_EPStartXfer+0x86a>
 8009f14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d11c      	bne.n	8009f5e <USB_EPStartXfer+0x86a>
 8009f24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	461a      	mov	r2, r3
 8009f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f38:	4413      	add	r3, r2
 8009f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	011a      	lsls	r2, r3, #4
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	895b      	ldrh	r3, [r3, #10]
 8009f6a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6959      	ldr	r1, [r3, #20]
 8009f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009f84:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009f88:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f001 f896 	bl	800b0be <USB_WritePMA>
 8009f92:	e263      	b.n	800a45c <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fb2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009fce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	441a      	add	r2, r3
 8009fe8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a000:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a004:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a00c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a020:	4413      	add	r3, r2
 800a022:	663b      	str	r3, [r7, #96]	@ 0x60
 800a024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a028:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	011a      	lsls	r2, r3, #4
 800a032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a034:	4413      	add	r3, r2
 800a036:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a03a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a040:	b29a      	uxth	r2, r3
 800a042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a044:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a04a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	891b      	ldrh	r3, [r3, #8]
 800a052:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a056:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a05a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6959      	ldr	r1, [r3, #20]
 800a062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a066:	b29b      	uxth	r3, r3
 800a068:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a06c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a070:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a074:	6800      	ldr	r0, [r0, #0]
 800a076:	f001 f822 	bl	800b0be <USB_WritePMA>
 800a07a:	e1ef      	b.n	800a45c <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a07c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a080:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a08a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80aa 	beq.w	800a1f8 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d16d      	bne.n	800a19c <USB_EPStartXfer+0xaa8>
 800a0c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0e0:	4413      	add	r3, r2
 800a0e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	011a      	lsls	r2, r3, #4
 800a0f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a0fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a100:	2b00      	cmp	r3, #0
 800a102:	d112      	bne.n	800a12a <USB_EPStartXfer+0xa36>
 800a104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a10e:	b29a      	uxth	r2, r3
 800a110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a11e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a122:	b29a      	uxth	r2, r3
 800a124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a126:	801a      	strh	r2, [r3, #0]
 800a128:	e05d      	b.n	800a1e6 <USB_EPStartXfer+0xaf2>
 800a12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a12e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a130:	d817      	bhi.n	800a162 <USB_EPStartXfer+0xa6e>
 800a132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a136:	085b      	lsrs	r3, r3, #1
 800a138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <USB_EPStartXfer+0xa5e>
 800a148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a14c:	3301      	adds	r3, #1
 800a14e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a156:	b29b      	uxth	r3, r3
 800a158:	029b      	lsls	r3, r3, #10
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a15e:	801a      	strh	r2, [r3, #0]
 800a160:	e041      	b.n	800a1e6 <USB_EPStartXfer+0xaf2>
 800a162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a166:	095b      	lsrs	r3, r3, #5
 800a168:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	2b00      	cmp	r3, #0
 800a176:	d104      	bne.n	800a182 <USB_EPStartXfer+0xa8e>
 800a178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a17c:	3b01      	subs	r3, #1
 800a17e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a186:	b29b      	uxth	r3, r3
 800a188:	029b      	lsls	r3, r3, #10
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a194:	b29a      	uxth	r2, r3
 800a196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a198:	801a      	strh	r2, [r3, #0]
 800a19a:	e024      	b.n	800a1e6 <USB_EPStartXfer+0xaf2>
 800a19c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d11c      	bne.n	800a1e6 <USB_EPStartXfer+0xaf2>
 800a1ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1c0:	4413      	add	r3, r2
 800a1c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	011a      	lsls	r2, r3, #4
 800a1d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1da:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a1e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	895b      	ldrh	r3, [r3, #10]
 800a1f2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800a1f6:	e0b2      	b.n	800a35e <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a1f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	785b      	ldrb	r3, [r3, #1]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d171      	bne.n	800a2ec <USB_EPStartXfer+0xbf8>
 800a208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a20c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a21a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a224:	b29b      	uxth	r3, r3
 800a226:	461a      	mov	r2, r3
 800a228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a22c:	4413      	add	r3, r2
 800a22e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a236:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	011a      	lsls	r2, r3, #4
 800a240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a244:	4413      	add	r3, r2
 800a246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a24a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d112      	bne.n	800a27a <USB_EPStartXfer+0xb86>
 800a254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a25e:	b29a      	uxth	r2, r3
 800a260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a262:	801a      	strh	r2, [r3, #0]
 800a264:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a26e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a272:	b29a      	uxth	r2, r3
 800a274:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a276:	801a      	strh	r2, [r3, #0]
 800a278:	e069      	b.n	800a34e <USB_EPStartXfer+0xc5a>
 800a27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a27e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a280:	d817      	bhi.n	800a2b2 <USB_EPStartXfer+0xbbe>
 800a282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a28c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d004      	beq.n	800a2a2 <USB_EPStartXfer+0xbae>
 800a298:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a29c:	3301      	adds	r3, #1
 800a29e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a2a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	029b      	lsls	r3, r3, #10
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	e04d      	b.n	800a34e <USB_EPStartXfer+0xc5a>
 800a2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b6:	095b      	lsrs	r3, r3, #5
 800a2b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a2bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c0:	f003 031f 	and.w	r3, r3, #31
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <USB_EPStartXfer+0xbde>
 800a2c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a2d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	029b      	lsls	r3, r3, #10
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2e8:	801a      	strh	r2, [r3, #0]
 800a2ea:	e030      	b.n	800a34e <USB_EPStartXfer+0xc5a>
 800a2ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d128      	bne.n	800a34e <USB_EPStartXfer+0xc5a>
 800a2fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a300:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a30a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a30e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a318:	b29b      	uxth	r3, r3
 800a31a:	461a      	mov	r2, r3
 800a31c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a320:	4413      	add	r3, r2
 800a322:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a32a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	011a      	lsls	r2, r3, #4
 800a334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a338:	4413      	add	r3, r2
 800a33a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a33e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a346:	b29a      	uxth	r2, r3
 800a348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a34c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a34e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a352:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	891b      	ldrh	r3, [r3, #8]
 800a35a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a35e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a362:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6959      	ldr	r1, [r3, #20]
 800a36a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a36e:	b29b      	uxth	r3, r3
 800a370:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a374:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a378:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f000 fe9e 	bl	800b0be <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a386:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d12e      	bne.n	800a3f0 <USB_EPStartXfer+0xcfc>
 800a392:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a3bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	441a      	add	r2, r3
 800a3d6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a3da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	8013      	strh	r3, [r2, #0]
 800a3ee:	e035      	b.n	800a45c <USB_EPStartXfer+0xd68>
 800a3f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	785b      	ldrb	r3, [r3, #1]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d12d      	bne.n	800a45c <USB_EPStartXfer+0xd68>
 800a400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a404:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a40e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a426:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a42a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a42e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	441a      	add	r2, r3
 800a444:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a44c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a458:	b29b      	uxth	r3, r3
 800a45a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a45c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a46a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a47e:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a48a:	8013      	strh	r3, [r2, #0]
 800a48c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a490:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a494:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a498:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a49c:	8812      	ldrh	r2, [r2, #0]
 800a49e:	f082 0210 	eor.w	r2, r2, #16
 800a4a2:	801a      	strh	r2, [r3, #0]
 800a4a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4a8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a4ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a4b0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a4b4:	8812      	ldrh	r2, [r2, #0]
 800a4b6:	f082 0220 	eor.w	r2, r2, #32
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	441a      	add	r2, r3
 800a4d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4da:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	8013      	strh	r3, [r2, #0]
 800a4f4:	f000 bc9f 	b.w	800ae36 <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a4f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	7b1b      	ldrb	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f040 80ae 	bne.w	800a666 <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a50a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	699a      	ldr	r2, [r3, #24]
 800a516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a51a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	429a      	cmp	r2, r3
 800a524:	d917      	bls.n	800a556 <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a52a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a536:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a53a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a54c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	619a      	str	r2, [r3, #24]
 800a554:	e00e      	b.n	800a574 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a55a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a56a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2200      	movs	r2, #0
 800a572:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a574:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a586:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a590:	b29b      	uxth	r3, r3
 800a592:	461a      	mov	r2, r3
 800a594:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a598:	4413      	add	r3, r2
 800a59a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a59e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	011a      	lsls	r2, r3, #4
 800a5ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a5b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d116      	bne.n	800a5f0 <USB_EPStartXfer+0xefc>
 800a5c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5d4:	801a      	strh	r2, [r3, #0]
 800a5d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5ec:	801a      	strh	r2, [r3, #0]
 800a5ee:	e3e8      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
 800a5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5f6:	d818      	bhi.n	800a62a <USB_EPStartXfer+0xf36>
 800a5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <USB_EPStartXfer+0xf24>
 800a60e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a618:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	029b      	lsls	r3, r3, #10
 800a620:	b29a      	uxth	r2, r3
 800a622:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	e3cb      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
 800a62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a62e:	095b      	lsrs	r3, r3, #5
 800a630:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <USB_EPStartXfer+0xf56>
 800a640:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a644:	3b01      	subs	r3, #1
 800a646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a64a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a64e:	b29b      	uxth	r3, r3
 800a650:	029b      	lsls	r3, r3, #10
 800a652:	b29b      	uxth	r3, r3
 800a654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e3ad      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a66a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	78db      	ldrb	r3, [r3, #3]
 800a672:	2b02      	cmp	r3, #2
 800a674:	f040 8200 	bne.w	800aa78 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a678:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a67c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 8091 	bne.w	800a7ac <USB_EPStartXfer+0x10b8>
 800a68a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a68e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a698:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a69c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	011a      	lsls	r2, r3, #4
 800a6c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d116      	bne.n	800a70e <USB_EPStartXfer+0x101a>
 800a6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f2:	801a      	strh	r2, [r3, #0]
 800a6f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a704:	b29a      	uxth	r2, r3
 800a706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a70a:	801a      	strh	r2, [r3, #0]
 800a70c:	e083      	b.n	800a816 <USB_EPStartXfer+0x1122>
 800a70e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a712:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a71c:	d820      	bhi.n	800a760 <USB_EPStartXfer+0x106c>
 800a71e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a722:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a730:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a734:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <USB_EPStartXfer+0x105a>
 800a744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a748:	3301      	adds	r3, #1
 800a74a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a74e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a752:	b29b      	uxth	r3, r3
 800a754:	029b      	lsls	r3, r3, #10
 800a756:	b29a      	uxth	r2, r3
 800a758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a75c:	801a      	strh	r2, [r3, #0]
 800a75e:	e05a      	b.n	800a816 <USB_EPStartXfer+0x1122>
 800a760:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a764:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	095b      	lsrs	r3, r3, #5
 800a76e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a772:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a776:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <USB_EPStartXfer+0x109c>
 800a786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a78a:	3b01      	subs	r3, #1
 800a78c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a794:	b29b      	uxth	r3, r3
 800a796:	029b      	lsls	r3, r3, #10
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	e034      	b.n	800a816 <USB_EPStartXfer+0x1122>
 800a7ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	785b      	ldrb	r3, [r3, #1]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d12c      	bne.n	800a816 <USB_EPStartXfer+0x1122>
 800a7bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	011a      	lsls	r2, r3, #4
 800a7f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a806:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	b29a      	uxth	r2, r3
 800a810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a814:	801a      	strh	r2, [r3, #0]
 800a816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a81a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	785b      	ldrb	r3, [r3, #1]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f040 8091 	bne.w	800a958 <USB_EPStartXfer+0x1264>
 800a836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a848:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a852:	b29b      	uxth	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a85a:	4413      	add	r3, r2
 800a85c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a860:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a864:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	011a      	lsls	r2, r3, #4
 800a86e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a872:	4413      	add	r3, r2
 800a874:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a87c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a880:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d116      	bne.n	800a8ba <USB_EPStartXfer+0x11c6>
 800a88c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a898:	b29a      	uxth	r2, r3
 800a89a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a89e:	801a      	strh	r2, [r3, #0]
 800a8a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	e07c      	b.n	800a9b4 <USB_EPStartXfer+0x12c0>
 800a8ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8c8:	d820      	bhi.n	800a90c <USB_EPStartXfer+0x1218>
 800a8ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	085b      	lsrs	r3, r3, #1
 800a8d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a8dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d004      	beq.n	800a8fa <USB_EPStartXfer+0x1206>
 800a8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	029b      	lsls	r3, r3, #10
 800a902:	b29a      	uxth	r2, r3
 800a904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e053      	b.n	800a9b4 <USB_EPStartXfer+0x12c0>
 800a90c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a910:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	095b      	lsrs	r3, r3, #5
 800a91a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a91e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a922:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <USB_EPStartXfer+0x1248>
 800a932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a936:	3b01      	subs	r3, #1
 800a938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a940:	b29b      	uxth	r3, r3
 800a942:	029b      	lsls	r3, r3, #10
 800a944:	b29b      	uxth	r3, r3
 800a946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94e:	b29a      	uxth	r2, r3
 800a950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e02d      	b.n	800a9b4 <USB_EPStartXfer+0x12c0>
 800a958:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a95c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d125      	bne.n	800a9b4 <USB_EPStartXfer+0x12c0>
 800a968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a96c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a976:	b29b      	uxth	r3, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a97e:	4413      	add	r3, r2
 800a980:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a988:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	011a      	lsls	r2, r3, #4
 800a992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a996:	4413      	add	r3, r2
 800a998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a99c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a9b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 81fe 	beq.w	800adc2 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a9c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a9ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d005      	beq.n	800a9fe <USB_EPStartXfer+0x130a>
 800a9f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10d      	bne.n	800aa1a <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9fe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800aa02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 81db 	bne.w	800adc2 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800aa10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f040 81d4 	bne.w	800adc2 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aa1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa40:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800aa44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	441a      	add	r2, r3
 800aa5e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800aa62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	8013      	strh	r3, [r2, #0]
 800aa76:	e1a4      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	78db      	ldrb	r3, [r3, #3]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	f040 819a 	bne.w	800adbe <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d917      	bls.n	800aad6 <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800aaa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800aab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	699a      	ldr	r2, [r3, #24]
 800aac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aacc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	619a      	str	r2, [r3, #24]
 800aad4:	e00e      	b.n	800aaf4 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800aad6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aada:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800aae6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aaf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d178      	bne.n	800abf6 <USB_EPStartXfer+0x1502>
 800ab04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ab28:	4413      	add	r3, r2
 800ab2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	011a      	lsls	r2, r3, #4
 800ab3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ab40:	4413      	add	r3, r2
 800ab42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ab46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d116      	bne.n	800ab80 <USB_EPStartXfer+0x148c>
 800ab52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab7c:	801a      	strh	r2, [r3, #0]
 800ab7e:	e06b      	b.n	800ac58 <USB_EPStartXfer+0x1564>
 800ab80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab84:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab86:	d818      	bhi.n	800abba <USB_EPStartXfer+0x14c6>
 800ab88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8c:	085b      	lsrs	r3, r3, #1
 800ab8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <USB_EPStartXfer+0x14b4>
 800ab9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aba2:	3301      	adds	r3, #1
 800aba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abac:	b29b      	uxth	r3, r3
 800abae:	029b      	lsls	r3, r3, #10
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800abb6:	801a      	strh	r2, [r3, #0]
 800abb8:	e04e      	b.n	800ac58 <USB_EPStartXfer+0x1564>
 800abba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abbe:	095b      	lsrs	r3, r3, #5
 800abc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc8:	f003 031f 	and.w	r3, r3, #31
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d104      	bne.n	800abda <USB_EPStartXfer+0x14e6>
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd4:	3b01      	subs	r3, #1
 800abd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abde:	b29b      	uxth	r3, r3
 800abe0:	029b      	lsls	r3, r3, #10
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abec:	b29a      	uxth	r2, r3
 800abee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e030      	b.n	800ac58 <USB_EPStartXfer+0x1564>
 800abf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d128      	bne.n	800ac58 <USB_EPStartXfer+0x1564>
 800ac06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	011a      	lsls	r2, r3, #4
 800ac3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac42:	4413      	add	r3, r2
 800ac44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d178      	bne.n	800ad68 <USB_EPStartXfer+0x1674>
 800ac76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	461a      	mov	r2, r3
 800ac96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aca0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aca4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	011a      	lsls	r2, r3, #4
 800acae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800acb2:	4413      	add	r3, r2
 800acb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800acb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800acbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d116      	bne.n	800acf2 <USB_EPStartXfer+0x15fe>
 800acc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acd6:	801a      	strh	r2, [r3, #0]
 800acd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace8:	b29a      	uxth	r2, r3
 800acea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acee:	801a      	strh	r2, [r3, #0]
 800acf0:	e067      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
 800acf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf6:	2b3e      	cmp	r3, #62	@ 0x3e
 800acf8:	d818      	bhi.n	800ad2c <USB_EPStartXfer+0x1638>
 800acfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <USB_EPStartXfer+0x1626>
 800ad10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad14:	3301      	adds	r3, #1
 800ad16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	029b      	lsls	r3, r3, #10
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ad28:	801a      	strh	r2, [r3, #0]
 800ad2a:	e04a      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
 800ad2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad30:	095b      	lsrs	r3, r3, #5
 800ad32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad3a:	f003 031f 	and.w	r3, r3, #31
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d104      	bne.n	800ad4c <USB_EPStartXfer+0x1658>
 800ad42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad46:	3b01      	subs	r3, #1
 800ad48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	029b      	lsls	r3, r3, #10
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ad64:	801a      	strh	r2, [r3, #0]
 800ad66:	e02c      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
 800ad68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d124      	bne.n	800adc2 <USB_EPStartXfer+0x16ce>
 800ad78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad8e:	4413      	add	r3, r2
 800ad90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	011a      	lsls	r2, r3, #4
 800ada2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ada6:	4413      	add	r3, r2
 800ada8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800adac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800adb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adba:	801a      	strh	r2, [r3, #0]
 800adbc:	e001      	b.n	800adc2 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e03a      	b.n	800ae38 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800add0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ade4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800adec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800adf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800adf4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800adf8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800adfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae00:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ae04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	441a      	add	r2, r3
 800ae1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ae22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b085      	sub	sp, #20
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d020      	beq.n	800ae96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae6a:	81bb      	strh	r3, [r7, #12]
 800ae6c:	89bb      	ldrh	r3, [r7, #12]
 800ae6e:	f083 0310 	eor.w	r3, r3, #16
 800ae72:	81bb      	strh	r3, [r7, #12]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	441a      	add	r2, r3
 800ae7e:	89bb      	ldrh	r3, [r7, #12]
 800ae80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	8013      	strh	r3, [r2, #0]
 800ae94:	e01f      	b.n	800aed6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeac:	81fb      	strh	r3, [r7, #14]
 800aeae:	89fb      	ldrh	r3, [r7, #14]
 800aeb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aeb4:	81fb      	strh	r3, [r7, #14]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	441a      	add	r2, r3
 800aec0:	89fb      	ldrh	r3, [r7, #14]
 800aec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b087      	sub	sp, #28
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	7b1b      	ldrb	r3, [r3, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f040 809d 	bne.w	800b030 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d04c      	beq.n	800af98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	823b      	strh	r3, [r7, #16]
 800af0c:	8a3b      	ldrh	r3, [r7, #16]
 800af0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d01b      	beq.n	800af4e <USB_EPClearStall+0x6c>
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	b29b      	uxth	r3, r3
 800af24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2c:	81fb      	strh	r3, [r7, #14]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	441a      	add	r2, r3
 800af38:	89fb      	ldrh	r3, [r7, #14]
 800af3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	78db      	ldrb	r3, [r3, #3]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d06c      	beq.n	800b030 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29b      	uxth	r3, r3
 800af64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af6c:	81bb      	strh	r3, [r7, #12]
 800af6e:	89bb      	ldrh	r3, [r7, #12]
 800af70:	f083 0320 	eor.w	r3, r3, #32
 800af74:	81bb      	strh	r3, [r7, #12]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	441a      	add	r2, r3
 800af80:	89bb      	ldrh	r3, [r7, #12]
 800af82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af92:	b29b      	uxth	r3, r3
 800af94:	8013      	strh	r3, [r2, #0]
 800af96:	e04b      	b.n	800b030 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	82fb      	strh	r3, [r7, #22]
 800afa6:	8afb      	ldrh	r3, [r7, #22]
 800afa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01b      	beq.n	800afe8 <USB_EPClearStall+0x106>
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afc6:	82bb      	strh	r3, [r7, #20]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	441a      	add	r2, r3
 800afd2:	8abb      	ldrh	r3, [r7, #20]
 800afd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800affa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800affe:	827b      	strh	r3, [r7, #18]
 800b000:	8a7b      	ldrh	r3, [r7, #18]
 800b002:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b006:	827b      	strh	r3, [r7, #18]
 800b008:	8a7b      	ldrh	r3, [r7, #18]
 800b00a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b00e:	827b      	strh	r3, [r7, #18]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	441a      	add	r2, r3
 800b01a:	8a7b      	ldrh	r3, [r7, #18]
 800b01c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr

0800b03c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b048:	78fb      	ldrb	r3, [r7, #3]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d103      	bne.n	800b056 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2280      	movs	r2, #128	@ 0x80
 800b052:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr

0800b062 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	bc80      	pop	{r7}
 800b074:	4770      	bx	lr

0800b076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	bc80      	pop	{r7}
 800b088:	4770      	bx	lr

0800b08a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b098:	b29b      	uxth	r3, r3
 800b09a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b09c:	68fb      	ldr	r3, [r7, #12]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bc80      	pop	{r7}
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bc80      	pop	{r7}
 800b0bc:	4770      	bx	lr

0800b0be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b08d      	sub	sp, #52	@ 0x34
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	80fb      	strh	r3, [r7, #6]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0d4:	88bb      	ldrh	r3, [r7, #4]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	085b      	lsrs	r3, r3, #1
 800b0da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	005a      	lsls	r2, r3, #1
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0f6:	e01d      	b.n	800b134 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	3301      	adds	r3, #1
 800b102:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	461a      	mov	r2, r3
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	4313      	orrs	r3, r2
 800b112:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	b29a      	uxth	r2, r3
 800b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11e:	3302      	adds	r3, #2
 800b120:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	3302      	adds	r3, #2
 800b126:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800b128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12a:	3301      	adds	r3, #1
 800b12c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	3b01      	subs	r3, #1
 800b132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1de      	bne.n	800b0f8 <USB_WritePMA+0x3a>
  }
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3734      	adds	r7, #52	@ 0x34
 800b140:	46bd      	mov	sp, r7
 800b142:	bc80      	pop	{r7}
 800b144:	4770      	bx	lr

0800b146 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b146:	b480      	push	{r7}
 800b148:	b08b      	sub	sp, #44	@ 0x2c
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	60f8      	str	r0, [r7, #12]
 800b14e:	60b9      	str	r1, [r7, #8]
 800b150:	4611      	mov	r1, r2
 800b152:	461a      	mov	r2, r3
 800b154:	460b      	mov	r3, r1
 800b156:	80fb      	strh	r3, [r7, #6]
 800b158:	4613      	mov	r3, r2
 800b15a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b15c:	88bb      	ldrh	r3, [r7, #4]
 800b15e:	085b      	lsrs	r3, r3, #1
 800b160:	b29b      	uxth	r3, r3
 800b162:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	005a      	lsls	r2, r3, #1
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b178:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b17e:	e01b      	b.n	800b1b8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	b29b      	uxth	r3, r3
 800b186:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	3302      	adds	r3, #2
 800b18c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	3301      	adds	r3, #1
 800b19a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	3302      	adds	r3, #2
 800b1b0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e0      	bne.n	800b180 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b1be:	88bb      	ldrh	r3, [r7, #4]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d007      	beq.n	800b1da <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	701a      	strb	r2, [r3, #0]
  }
}
 800b1da:	bf00      	nop
 800b1dc:	372c      	adds	r7, #44	@ 0x2c
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	7c1b      	ldrb	r3, [r3, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d115      	bne.n	800b228 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b200:	2202      	movs	r2, #2
 800b202:	2181      	movs	r1, #129	@ 0x81
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 fe90 	bl	800cf2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b214:	2202      	movs	r2, #2
 800b216:	2101      	movs	r1, #1
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f001 fe86 	bl	800cf2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b226:	e012      	b.n	800b24e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b228:	2340      	movs	r3, #64	@ 0x40
 800b22a:	2202      	movs	r2, #2
 800b22c:	2181      	movs	r1, #129	@ 0x81
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 fe7b 	bl	800cf2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b23a:	2340      	movs	r3, #64	@ 0x40
 800b23c:	2202      	movs	r2, #2
 800b23e:	2101      	movs	r1, #1
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fe72 	bl	800cf2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b24e:	2308      	movs	r3, #8
 800b250:	2203      	movs	r2, #3
 800b252:	2182      	movs	r1, #130	@ 0x82
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fe68 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b260:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b264:	f001 ff88 	bl	800d178 <USBD_static_malloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b27a:	2301      	movs	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]
 800b27e:	e026      	b.n	800b2ce <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b286:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	7c1b      	ldrb	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f001 ff28 	bl	800d10c <USBD_LL_PrepareReceive>
 800b2bc:	e007      	b.n	800b2ce <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2c4:	2340      	movs	r3, #64	@ 0x40
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 ff1f 	bl	800d10c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2e8:	2181      	movs	r1, #129	@ 0x81
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fe43 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 fe3c 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b306:	2182      	movs	r1, #130	@ 0x82
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 fe34 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00e      	beq.n	800b33c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 ff2e 	bl	800d190 <USBD_static_free>
    pdev->pClassData = NULL;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b356:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d039      	beq.n	800b3e4 <USBD_CDC_Setup+0x9e>
 800b370:	2b20      	cmp	r3, #32
 800b372:	d17f      	bne.n	800b474 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	88db      	ldrh	r3, [r3, #6]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d029      	beq.n	800b3d0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	b25b      	sxtb	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	da11      	bge.n	800b3aa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b392:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	88d2      	ldrh	r2, [r2, #6]
 800b398:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b39a:	6939      	ldr	r1, [r7, #16]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fa06 	bl	800c7b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b3a8:	e06b      	b.n	800b482 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	785a      	ldrb	r2, [r3, #1]
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	88db      	ldrh	r3, [r3, #6]
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b3c0:	6939      	ldr	r1, [r7, #16]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	88db      	ldrh	r3, [r3, #6]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 fa21 	bl	800c810 <USBD_CtlPrepareRx>
      break;
 800b3ce:	e058      	b.n	800b482 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	7850      	ldrb	r0, [r2, #1]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	4798      	blx	r3
      break;
 800b3e2:	e04e      	b.n	800b482 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	785b      	ldrb	r3, [r3, #1]
 800b3e8:	2b0b      	cmp	r3, #11
 800b3ea:	d02e      	beq.n	800b44a <USBD_CDC_Setup+0x104>
 800b3ec:	2b0b      	cmp	r3, #11
 800b3ee:	dc38      	bgt.n	800b462 <USBD_CDC_Setup+0x11c>
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <USBD_CDC_Setup+0xb4>
 800b3f4:	2b0a      	cmp	r3, #10
 800b3f6:	d014      	beq.n	800b422 <USBD_CDC_Setup+0xdc>
 800b3f8:	e033      	b.n	800b462 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b400:	2b03      	cmp	r3, #3
 800b402:	d107      	bne.n	800b414 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	2202      	movs	r2, #2
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 f9d1 	bl	800c7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b412:	e02e      	b.n	800b472 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 f962 	bl	800c6e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b41c:	2302      	movs	r3, #2
 800b41e:	75fb      	strb	r3, [r7, #23]
          break;
 800b420:	e027      	b.n	800b472 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d107      	bne.n	800b43c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b42c:	f107 030f 	add.w	r3, r7, #15
 800b430:	2201      	movs	r2, #1
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 f9bd 	bl	800c7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b43a:	e01a      	b.n	800b472 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f001 f94e 	bl	800c6e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b444:	2302      	movs	r3, #2
 800b446:	75fb      	strb	r3, [r7, #23]
          break;
 800b448:	e013      	b.n	800b472 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b450:	2b03      	cmp	r3, #3
 800b452:	d00d      	beq.n	800b470 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 f942 	bl	800c6e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b45c:	2302      	movs	r3, #2
 800b45e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b460:	e006      	b.n	800b470 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 f93b 	bl	800c6e0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b46a:	2302      	movs	r3, #2
 800b46c:	75fb      	strb	r3, [r7, #23]
          break;
 800b46e:	e000      	b.n	800b472 <USBD_CDC_Setup+0x12c>
          break;
 800b470:	bf00      	nop
      }
      break;
 800b472:	e006      	b.n	800b482 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 f932 	bl	800c6e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b47c:	2302      	movs	r3, #2
 800b47e:	75fb      	strb	r3, [r7, #23]
      break;
 800b480:	bf00      	nop
  }

  return ret;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b4a6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d03a      	beq.n	800b528 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	6879      	ldr	r1, [r7, #4]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	440b      	add	r3, r1
 800b4c0:	331c      	adds	r3, #28
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d029      	beq.n	800b51c <USBD_CDC_DataIn+0x90>
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	440b      	add	r3, r1
 800b4d6:	331c      	adds	r3, #28
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	78f9      	ldrb	r1, [r7, #3]
 800b4dc:	68b8      	ldr	r0, [r7, #8]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	440b      	add	r3, r1
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	4403      	add	r3, r0
 800b4e8:	3338      	adds	r3, #56	@ 0x38
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4f0:	fb01 f303 	mul.w	r3, r1, r3
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d110      	bne.n	800b51c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b4fa:	78fa      	ldrb	r2, [r7, #3]
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	331c      	adds	r3, #28
 800b50a:	2200      	movs	r2, #0
 800b50c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b50e:	78f9      	ldrb	r1, [r7, #3]
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 fdd6 	bl	800d0c6 <USBD_LL_Transmit>
 800b51a:	e003      	b.n	800b524 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	e000      	b.n	800b52a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b528:	2302      	movs	r3, #2
  }
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b544:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b546:	78fb      	ldrb	r3, [r7, #3]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f001 fe01 	bl	800d152 <USBD_LL_GetRxDataSize>
 800b550:	4602      	mov	r2, r0
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00d      	beq.n	800b57e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b576:	4611      	mov	r1, r2
 800b578:	4798      	blx	r3

    return USBD_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e000      	b.n	800b580 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b57e:	2302      	movs	r3, #2
  }
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b596:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <USBD_CDC_EP0_RxReady+0x44>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5a8:	2bff      	cmp	r3, #255	@ 0xff
 800b5aa:	d00f      	beq.n	800b5cc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b5ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	22ff      	movs	r2, #255	@ 0xff
 800b5c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2243      	movs	r2, #67	@ 0x43
 800b5e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b5e6:	4b03      	ldr	r3, [pc, #12]	@ (800b5f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	200000bc 	.word	0x200000bc

0800b5f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2243      	movs	r2, #67	@ 0x43
 800b604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b606:	4b03      	ldr	r3, [pc, #12]	@ (800b614 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20000078 	.word	0x20000078

0800b618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2243      	movs	r2, #67	@ 0x43
 800b624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b626:	4b03      	ldr	r3, [pc, #12]	@ (800b634 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b628:	4618      	mov	r0, r3
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bc80      	pop	{r7}
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	20000100 	.word	0x20000100

0800b638 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	220a      	movs	r2, #10
 800b644:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b646:	4b03      	ldr	r3, [pc, #12]	@ (800b654 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc80      	pop	{r7}
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	20000034 	.word	0x20000034

0800b658 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b662:	2302      	movs	r3, #2
 800b664:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d005      	beq.n	800b678 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b698:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b6a2:	88fa      	ldrh	r2, [r7, #6]
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	371c      	adds	r7, #28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bc80      	pop	{r7}
 800b6b4:	4770      	bx	lr

0800b6b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bc80      	pop	{r7}
 800b6da:	4770      	bx	lr

0800b6dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d01c      	beq.n	800b730 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d115      	bne.n	800b72c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2181      	movs	r1, #129	@ 0x81
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fccf 	bl	800d0c6 <USBD_LL_Transmit>

      return USBD_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	e002      	b.n	800b732 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e000      	b.n	800b732 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b730:	2302      	movs	r3, #2
  }
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b748:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d017      	beq.n	800b784 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7c1b      	ldrb	r3, [r3, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b766:	2101      	movs	r1, #1
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fccf 	bl	800d10c <USBD_LL_PrepareReceive>
 800b76e:	e007      	b.n	800b780 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b776:	2340      	movs	r3, #64	@ 0x40
 800b778:	2101      	movs	r1, #1
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fcc6 	bl	800d10c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	e000      	b.n	800b786 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b784:	2302      	movs	r3, #2
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	4613      	mov	r3, r2
 800b79a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e01a      	b.n	800b7dc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	79fa      	ldrb	r2, [r7, #7]
 800b7d2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f001 fb33 	bl	800ce40 <USBD_LL_Init>

  return USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	e001      	b.n	800b80a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b806:	2302      	movs	r3, #2
 800b808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	bc80      	pop	{r7}
 800b814:	4770      	bx	lr

0800b816 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f001 fb68 	bl	800cef4 <USBD_LL_Start>

  return USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bc80      	pop	{r7}
 800b840:	4770      	bx	lr

0800b842 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b84e:	2302      	movs	r3, #2
 800b850:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00c      	beq.n	800b876 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	78fa      	ldrb	r2, [r7, #3]
 800b866:	4611      	mov	r1, r2
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b876:	7bfb      	ldrb	r3, [r7, #15]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	78fa      	ldrb	r2, [r7, #3]
 800b896:	4611      	mov	r1, r2
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	4798      	blx	r3

  return USBD_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fed8 	bl	800c66e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b8da:	f003 031f 	and.w	r3, r3, #31
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d016      	beq.n	800b910 <USBD_LL_SetupStage+0x6a>
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d81c      	bhi.n	800b920 <USBD_LL_SetupStage+0x7a>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <USBD_LL_SetupStage+0x4a>
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d008      	beq.n	800b900 <USBD_LL_SetupStage+0x5a>
 800b8ee:	e017      	b.n	800b920 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f9cb 	bl	800bc94 <USBD_StdDevReq>
      break;
 800b8fe:	e01a      	b.n	800b936 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa2d 	bl	800bd68 <USBD_StdItfReq>
      break;
 800b90e:	e012      	b.n	800b936 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fa6d 	bl	800bdf8 <USBD_StdEPReq>
      break;
 800b91e:	e00a      	b.n	800b936 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b926:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fb40 	bl	800cfb4 <USBD_LL_StallEP>
      break;
 800b934:	bf00      	nop
  }

  return USBD_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	460b      	mov	r3, r1
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b94e:	7afb      	ldrb	r3, [r7, #11]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d14b      	bne.n	800b9ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b95a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b962:	2b03      	cmp	r3, #3
 800b964:	d134      	bne.n	800b9d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d919      	bls.n	800b9a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	1ad2      	subs	r2, r2, r3
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b988:	429a      	cmp	r2, r3
 800b98a:	d203      	bcs.n	800b994 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b990:	b29b      	uxth	r3, r3
 800b992:	e002      	b.n	800b99a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b998:	b29b      	uxth	r3, r3
 800b99a:	461a      	mov	r2, r3
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 ff54 	bl	800c84c <USBD_CtlContinueRx>
 800b9a4:	e038      	b.n	800ba18 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d105      	bne.n	800b9c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 ff51 	bl	800c870 <USBD_CtlSendStatus>
 800b9ce:	e023      	b.n	800ba18 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9d6:	2b05      	cmp	r3, #5
 800b9d8:	d11e      	bne.n	800ba18 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f001 fae5 	bl	800cfb4 <USBD_LL_StallEP>
 800b9ea:	e015      	b.n	800ba18 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00d      	beq.n	800ba14 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d108      	bne.n	800ba14 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	7afa      	ldrb	r2, [r7, #11]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	4798      	blx	r3
 800ba12:	e001      	b.n	800ba18 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba14:	2302      	movs	r3, #2
 800ba16:	e000      	b.n	800ba1a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b086      	sub	sp, #24
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d17f      	bne.n	800bb36 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3314      	adds	r3, #20
 800ba3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d15c      	bne.n	800bb00 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d915      	bls.n	800ba7e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	461a      	mov	r2, r3
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 febe 	bl	800c7ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba70:	2300      	movs	r3, #0
 800ba72:	2200      	movs	r2, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f001 fb48 	bl	800d10c <USBD_LL_PrepareReceive>
 800ba7c:	e04e      	b.n	800bb1c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	6912      	ldr	r2, [r2, #16]
 800ba86:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba8a:	fb01 f202 	mul.w	r2, r1, r2
 800ba8e:	1a9b      	subs	r3, r3, r2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d11c      	bne.n	800bace <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d316      	bcc.n	800bace <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800baaa:	429a      	cmp	r2, r3
 800baac:	d20f      	bcs.n	800bace <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fe9a 	bl	800c7ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bac0:	2300      	movs	r3, #0
 800bac2:	2200      	movs	r2, #0
 800bac4:	2100      	movs	r1, #0
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f001 fb20 	bl	800d10c <USBD_LL_PrepareReceive>
 800bacc:	e026      	b.n	800bb1c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d105      	bne.n	800baf0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800baf0:	2180      	movs	r1, #128	@ 0x80
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f001 fa5e 	bl	800cfb4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fecc 	bl	800c896 <USBD_CtlReceiveStatus>
 800bafe:	e00d      	b.n	800bb1c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d004      	beq.n	800bb14 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d103      	bne.n	800bb1c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bb14:	2180      	movs	r1, #128	@ 0x80
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 fa4c 	bl	800cfb4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d11d      	bne.n	800bb62 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff fe81 	bl	800b82e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb34:	e015      	b.n	800bb62 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00d      	beq.n	800bb5e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d108      	bne.n	800bb5e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	7afa      	ldrb	r2, [r7, #11]
 800bb56:	4611      	mov	r1, r2
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	4798      	blx	r3
 800bb5c:	e001      	b.n	800bb62 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e000      	b.n	800bb64 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb74:	2340      	movs	r3, #64	@ 0x40
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 f9d5 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2240      	movs	r2, #64	@ 0x40
 800bb8c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb90:	2340      	movs	r3, #64	@ 0x40
 800bb92:	2200      	movs	r2, #0
 800bb94:	2180      	movs	r1, #128	@ 0x80
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 f9c7 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2240      	movs	r2, #64	@ 0x40
 800bba6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	6852      	ldr	r2, [r2, #4]
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	4611      	mov	r1, r2
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	4798      	blx	r3
  }

  return USBD_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b083      	sub	sp, #12
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bc80      	pop	{r7}
 800bc0a:	4770      	bx	lr

0800bc0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bc80      	pop	{r7}
 800bc32:	4770      	bx	lr

0800bc34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d105      	bne.n	800bc52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d10b      	bne.n	800bc88 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcaa:	2b40      	cmp	r3, #64	@ 0x40
 800bcac:	d005      	beq.n	800bcba <USBD_StdDevReq+0x26>
 800bcae:	2b40      	cmp	r3, #64	@ 0x40
 800bcb0:	d84f      	bhi.n	800bd52 <USBD_StdDevReq+0xbe>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d009      	beq.n	800bcca <USBD_StdDevReq+0x36>
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d14b      	bne.n	800bd52 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
      break;
 800bcc8:	e048      	b.n	800bd5c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	2b09      	cmp	r3, #9
 800bcd0:	d839      	bhi.n	800bd46 <USBD_StdDevReq+0xb2>
 800bcd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd8 <USBD_StdDevReq+0x44>)
 800bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd8:	0800bd29 	.word	0x0800bd29
 800bcdc:	0800bd3d 	.word	0x0800bd3d
 800bce0:	0800bd47 	.word	0x0800bd47
 800bce4:	0800bd33 	.word	0x0800bd33
 800bce8:	0800bd47 	.word	0x0800bd47
 800bcec:	0800bd0b 	.word	0x0800bd0b
 800bcf0:	0800bd01 	.word	0x0800bd01
 800bcf4:	0800bd47 	.word	0x0800bd47
 800bcf8:	0800bd1f 	.word	0x0800bd1f
 800bcfc:	0800bd15 	.word	0x0800bd15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f9dc 	bl	800c0c0 <USBD_GetDescriptor>
          break;
 800bd08:	e022      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fb3f 	bl	800c390 <USBD_SetAddress>
          break;
 800bd12:	e01d      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb7e 	bl	800c418 <USBD_SetConfig>
          break;
 800bd1c:	e018      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fc07 	bl	800c534 <USBD_GetConfig>
          break;
 800bd26:	e013      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fc37 	bl	800c59e <USBD_GetStatus>
          break;
 800bd30:	e00e      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fc65 	bl	800c604 <USBD_SetFeature>
          break;
 800bd3a:	e009      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fc74 	bl	800c62c <USBD_ClrFeature>
          break;
 800bd44:	e004      	b.n	800bd50 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fcc9 	bl	800c6e0 <USBD_CtlError>
          break;
 800bd4e:	bf00      	nop
      }
      break;
 800bd50:	e004      	b.n	800bd5c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fcc3 	bl	800c6e0 <USBD_CtlError>
      break;
 800bd5a:	bf00      	nop
  }

  return ret;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop

0800bd68 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd7e:	2b40      	cmp	r3, #64	@ 0x40
 800bd80:	d005      	beq.n	800bd8e <USBD_StdItfReq+0x26>
 800bd82:	2b40      	cmp	r3, #64	@ 0x40
 800bd84:	d82e      	bhi.n	800bde4 <USBD_StdItfReq+0x7c>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <USBD_StdItfReq+0x26>
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d12a      	bne.n	800bde4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd94:	3b01      	subs	r3, #1
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d81d      	bhi.n	800bdd6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	889b      	ldrh	r3, [r3, #4]
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d813      	bhi.n	800bdcc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	88db      	ldrh	r3, [r3, #6]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d110      	bne.n	800bde0 <USBD_StdItfReq+0x78>
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10d      	bne.n	800bde0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fd53 	bl	800c870 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bdca:	e009      	b.n	800bde0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fc86 	bl	800c6e0 <USBD_CtlError>
          break;
 800bdd4:	e004      	b.n	800bde0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fc81 	bl	800c6e0 <USBD_CtlError>
          break;
 800bdde:	e000      	b.n	800bde2 <USBD_StdItfReq+0x7a>
          break;
 800bde0:	bf00      	nop
      }
      break;
 800bde2:	e004      	b.n	800bdee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fc7a 	bl	800c6e0 <USBD_CtlError>
      break;
 800bdec:	bf00      	nop
  }

  return USBD_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	889b      	ldrh	r3, [r3, #4]
 800be0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be14:	2b40      	cmp	r3, #64	@ 0x40
 800be16:	d007      	beq.n	800be28 <USBD_StdEPReq+0x30>
 800be18:	2b40      	cmp	r3, #64	@ 0x40
 800be1a:	f200 8146 	bhi.w	800c0aa <USBD_StdEPReq+0x2b2>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00a      	beq.n	800be38 <USBD_StdEPReq+0x40>
 800be22:	2b20      	cmp	r3, #32
 800be24:	f040 8141 	bne.w	800c0aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
      break;
 800be36:	e13d      	b.n	800c0b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be40:	2b20      	cmp	r3, #32
 800be42:	d10a      	bne.n	800be5a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4798      	blx	r3
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]

        return ret;
 800be56:	7bfb      	ldrb	r3, [r7, #15]
 800be58:	e12d      	b.n	800c0b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d007      	beq.n	800be72 <USBD_StdEPReq+0x7a>
 800be62:	2b03      	cmp	r3, #3
 800be64:	f300 811b 	bgt.w	800c09e <USBD_StdEPReq+0x2a6>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d072      	beq.n	800bf52 <USBD_StdEPReq+0x15a>
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d03a      	beq.n	800bee6 <USBD_StdEPReq+0xee>
 800be70:	e115      	b.n	800c09e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d002      	beq.n	800be82 <USBD_StdEPReq+0x8a>
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d015      	beq.n	800beac <USBD_StdEPReq+0xb4>
 800be80:	e02b      	b.n	800beda <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00c      	beq.n	800bea2 <USBD_StdEPReq+0xaa>
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	2b80      	cmp	r3, #128	@ 0x80
 800be8c:	d009      	beq.n	800bea2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f001 f88e 	bl	800cfb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800be98:	2180      	movs	r1, #128	@ 0x80
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f001 f88a 	bl	800cfb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bea0:	e020      	b.n	800bee4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fc1b 	bl	800c6e0 <USBD_CtlError>
              break;
 800beaa:	e01b      	b.n	800bee4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	885b      	ldrh	r3, [r3, #2]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10e      	bne.n	800bed2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <USBD_StdEPReq+0xda>
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b80      	cmp	r3, #128	@ 0x80
 800bebe:	d008      	beq.n	800bed2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	88db      	ldrh	r3, [r3, #6]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d104      	bne.n	800bed2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 f871 	bl	800cfb4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fccc 	bl	800c870 <USBD_CtlSendStatus>

              break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fbff 	bl	800c6e0 <USBD_CtlError>
              break;
 800bee2:	bf00      	nop
          }
          break;
 800bee4:	e0e0      	b.n	800c0a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beec:	2b02      	cmp	r3, #2
 800beee:	d002      	beq.n	800bef6 <USBD_StdEPReq+0xfe>
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d015      	beq.n	800bf20 <USBD_StdEPReq+0x128>
 800bef4:	e026      	b.n	800bf44 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00c      	beq.n	800bf16 <USBD_StdEPReq+0x11e>
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	2b80      	cmp	r3, #128	@ 0x80
 800bf00:	d009      	beq.n	800bf16 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 f854 	bl	800cfb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf0c:	2180      	movs	r1, #128	@ 0x80
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 f850 	bl	800cfb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf14:	e01c      	b.n	800bf50 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fbe1 	bl	800c6e0 <USBD_CtlError>
              break;
 800bf1e:	e017      	b.n	800bf50 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	885b      	ldrh	r3, [r3, #2]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d112      	bne.n	800bf4e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d004      	beq.n	800bf3c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f001 f85b 	bl	800cff2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fc97 	bl	800c870 <USBD_CtlSendStatus>
              }
              break;
 800bf42:	e004      	b.n	800bf4e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fbca 	bl	800c6e0 <USBD_CtlError>
              break;
 800bf4c:	e000      	b.n	800bf50 <USBD_StdEPReq+0x158>
              break;
 800bf4e:	bf00      	nop
          }
          break;
 800bf50:	e0aa      	b.n	800c0a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d002      	beq.n	800bf62 <USBD_StdEPReq+0x16a>
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d032      	beq.n	800bfc6 <USBD_StdEPReq+0x1ce>
 800bf60:	e097      	b.n	800c092 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <USBD_StdEPReq+0x180>
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	2b80      	cmp	r3, #128	@ 0x80
 800bf6c:	d004      	beq.n	800bf78 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fbb5 	bl	800c6e0 <USBD_CtlError>
                break;
 800bf76:	e091      	b.n	800c09c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	da0b      	bge.n	800bf98 <USBD_StdEPReq+0x1a0>
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf86:	4613      	mov	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	3310      	adds	r3, #16
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	4413      	add	r3, r2
 800bf94:	3304      	adds	r3, #4
 800bf96:	e00b      	b.n	800bfb0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	3304      	adds	r3, #4
 800bfb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fbf8 	bl	800c7b4 <USBD_CtlSendData>
              break;
 800bfc4:	e06a      	b.n	800c09c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	da11      	bge.n	800bff2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	3318      	adds	r3, #24
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d117      	bne.n	800c018 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fb78 	bl	800c6e0 <USBD_CtlError>
                  break;
 800bff0:	e054      	b.n	800c09c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d104      	bne.n	800c018 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fb65 	bl	800c6e0 <USBD_CtlError>
                  break;
 800c016:	e041      	b.n	800c09c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	da0b      	bge.n	800c038 <USBD_StdEPReq+0x240>
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	3310      	adds	r3, #16
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	4413      	add	r3, r2
 800c034:	3304      	adds	r3, #4
 800c036:	e00b      	b.n	800c050 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	3304      	adds	r3, #4
 800c050:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <USBD_StdEPReq+0x266>
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	2b80      	cmp	r3, #128	@ 0x80
 800c05c:	d103      	bne.n	800c066 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	e00e      	b.n	800c084 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 ffe0 	bl	800d030 <USBD_LL_IsStallEP>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d003      	beq.n	800c07e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2201      	movs	r2, #1
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	e002      	b.n	800c084 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2200      	movs	r2, #0
 800c082:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2202      	movs	r2, #2
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fb92 	bl	800c7b4 <USBD_CtlSendData>
              break;
 800c090:	e004      	b.n	800c09c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fb23 	bl	800c6e0 <USBD_CtlError>
              break;
 800c09a:	bf00      	nop
          }
          break;
 800c09c:	e004      	b.n	800c0a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fb1d 	bl	800c6e0 <USBD_CtlError>
          break;
 800c0a6:	bf00      	nop
      }
      break;
 800c0a8:	e004      	b.n	800c0b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fb17 	bl	800c6e0 <USBD_CtlError>
      break;
 800c0b2:	bf00      	nop
  }

  return ret;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	2b06      	cmp	r3, #6
 800c0e2:	f200 8128 	bhi.w	800c336 <USBD_GetDescriptor+0x276>
 800c0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ec <USBD_GetDescriptor+0x2c>)
 800c0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ec:	0800c109 	.word	0x0800c109
 800c0f0:	0800c121 	.word	0x0800c121
 800c0f4:	0800c161 	.word	0x0800c161
 800c0f8:	0800c337 	.word	0x0800c337
 800c0fc:	0800c337 	.word	0x0800c337
 800c100:	0800c2d7 	.word	0x0800c2d7
 800c104:	0800c303 	.word	0x0800c303
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	7c12      	ldrb	r2, [r2, #16]
 800c114:	f107 0108 	add.w	r1, r7, #8
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
 800c11c:	60f8      	str	r0, [r7, #12]
      break;
 800c11e:	e112      	b.n	800c346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7c1b      	ldrb	r3, [r3, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10d      	bne.n	800c144 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c130:	f107 0208 	add.w	r2, r7, #8
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
 800c138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	2202      	movs	r2, #2
 800c140:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c142:	e100      	b.n	800c346 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14c:	f107 0208 	add.w	r2, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3301      	adds	r3, #1
 800c15a:	2202      	movs	r2, #2
 800c15c:	701a      	strb	r2, [r3, #0]
      break;
 800c15e:	e0f2      	b.n	800c346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	885b      	ldrh	r3, [r3, #2]
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b05      	cmp	r3, #5
 800c168:	f200 80ac 	bhi.w	800c2c4 <USBD_GetDescriptor+0x204>
 800c16c:	a201      	add	r2, pc, #4	@ (adr r2, 800c174 <USBD_GetDescriptor+0xb4>)
 800c16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c172:	bf00      	nop
 800c174:	0800c18d 	.word	0x0800c18d
 800c178:	0800c1c1 	.word	0x0800c1c1
 800c17c:	0800c1f5 	.word	0x0800c1f5
 800c180:	0800c229 	.word	0x0800c229
 800c184:	0800c25d 	.word	0x0800c25d
 800c188:	0800c291 	.word	0x0800c291
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00b      	beq.n	800c1b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	7c12      	ldrb	r2, [r2, #16]
 800c1a4:	f107 0108 	add.w	r1, r7, #8
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4798      	blx	r3
 800c1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ae:	e091      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa94 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1be:	e089      	b.n	800c2d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00b      	beq.n	800c1e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	7c12      	ldrb	r2, [r2, #16]
 800c1d8:	f107 0108 	add.w	r1, r7, #8
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4798      	blx	r3
 800c1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1e2:	e077      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fa7a 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1f2:	e06f      	b.n	800c2d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c216:	e05d      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fa60 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c220:	7afb      	ldrb	r3, [r7, #11]
 800c222:	3301      	adds	r3, #1
 800c224:	72fb      	strb	r3, [r7, #11]
          break;
 800c226:	e055      	b.n	800c2d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c22e:	691b      	ldr	r3, [r3, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	7c12      	ldrb	r2, [r2, #16]
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
 800c248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24a:	e043      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fa46 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c254:	7afb      	ldrb	r3, [r7, #11]
 800c256:	3301      	adds	r3, #1
 800c258:	72fb      	strb	r3, [r7, #11]
          break;
 800c25a:	e03b      	b.n	800c2d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	7c12      	ldrb	r2, [r2, #16]
 800c274:	f107 0108 	add.w	r1, r7, #8
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c27e:	e029      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa2c 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	3301      	adds	r3, #1
 800c28c:	72fb      	strb	r3, [r7, #11]
          break;
 800c28e:	e021      	b.n	800c2d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7c12      	ldrb	r2, [r2, #16]
 800c2a8:	f107 0108 	add.w	r1, r7, #8
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3
 800c2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b2:	e00f      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fa12 	bl	800c6e0 <USBD_CtlError>
            err++;
 800c2bc:	7afb      	ldrb	r3, [r7, #11]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c2:	e007      	b.n	800c2d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fa0a 	bl	800c6e0 <USBD_CtlError>
          err++;
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c2d2:	e038      	b.n	800c346 <USBD_GetDescriptor+0x286>
 800c2d4:	e037      	b.n	800c346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7c1b      	ldrb	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d109      	bne.n	800c2f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2e6:	f107 0208 	add.w	r2, r7, #8
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	4798      	blx	r3
 800c2ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2f0:	e029      	b.n	800c346 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f9f3 	bl	800c6e0 <USBD_CtlError>
        err++;
 800c2fa:	7afb      	ldrb	r3, [r7, #11]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	72fb      	strb	r3, [r7, #11]
      break;
 800c300:	e021      	b.n	800c346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7c1b      	ldrb	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10d      	bne.n	800c326 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c312:	f107 0208 	add.w	r2, r7, #8
 800c316:	4610      	mov	r0, r2
 800c318:	4798      	blx	r3
 800c31a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	3301      	adds	r3, #1
 800c320:	2207      	movs	r2, #7
 800c322:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c324:	e00f      	b.n	800c346 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f9d9 	bl	800c6e0 <USBD_CtlError>
        err++;
 800c32e:	7afb      	ldrb	r3, [r7, #11]
 800c330:	3301      	adds	r3, #1
 800c332:	72fb      	strb	r3, [r7, #11]
      break;
 800c334:	e007      	b.n	800c346 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f9d1 	bl	800c6e0 <USBD_CtlError>
      err++;
 800c33e:	7afb      	ldrb	r3, [r7, #11]
 800c340:	3301      	adds	r3, #1
 800c342:	72fb      	strb	r3, [r7, #11]
      break;
 800c344:	bf00      	nop
  }

  if (err != 0U)
 800c346:	7afb      	ldrb	r3, [r7, #11]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d11c      	bne.n	800c386 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c34c:	893b      	ldrh	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d011      	beq.n	800c376 <USBD_GetDescriptor+0x2b6>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	88db      	ldrh	r3, [r3, #6]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00d      	beq.n	800c376 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	88da      	ldrh	r2, [r3, #6]
 800c35e:	893b      	ldrh	r3, [r7, #8]
 800c360:	4293      	cmp	r3, r2
 800c362:	bf28      	it	cs
 800c364:	4613      	movcs	r3, r2
 800c366:	b29b      	uxth	r3, r3
 800c368:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c36a:	893b      	ldrh	r3, [r7, #8]
 800c36c:	461a      	mov	r2, r3
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fa1f 	bl	800c7b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	88db      	ldrh	r3, [r3, #6]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d104      	bne.n	800c388 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa76 	bl	800c870 <USBD_CtlSendStatus>
 800c384:	e000      	b.n	800c388 <USBD_GetDescriptor+0x2c8>
    return;
 800c386:	bf00      	nop
    }
  }
}
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop

0800c390 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	889b      	ldrh	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d130      	bne.n	800c404 <USBD_SetAddress+0x74>
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	88db      	ldrh	r3, [r3, #6]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d12c      	bne.n	800c404 <USBD_SetAddress+0x74>
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	885b      	ldrh	r3, [r3, #2]
 800c3ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3b0:	d828      	bhi.n	800c404 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c4:	2b03      	cmp	r3, #3
 800c3c6:	d104      	bne.n	800c3d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f988 	bl	800c6e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d0:	e01d      	b.n	800c40e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	7bfa      	ldrb	r2, [r7, #15]
 800c3d6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fe52 	bl	800d088 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fa43 	bl	800c870 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f8:	e009      	b.n	800c40e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c402:	e004      	b.n	800c40e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f96a 	bl	800c6e0 <USBD_CtlError>
  }
}
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	885b      	ldrh	r3, [r3, #2]
 800c426:	b2da      	uxtb	r2, r3
 800c428:	4b41      	ldr	r3, [pc, #260]	@ (800c530 <USBD_SetConfig+0x118>)
 800c42a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c42c:	4b40      	ldr	r3, [pc, #256]	@ (800c530 <USBD_SetConfig+0x118>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d904      	bls.n	800c43e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f952 	bl	800c6e0 <USBD_CtlError>
 800c43c:	e075      	b.n	800c52a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c444:	2b02      	cmp	r3, #2
 800c446:	d002      	beq.n	800c44e <USBD_SetConfig+0x36>
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d023      	beq.n	800c494 <USBD_SetConfig+0x7c>
 800c44c:	e062      	b.n	800c514 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c44e:	4b38      	ldr	r3, [pc, #224]	@ (800c530 <USBD_SetConfig+0x118>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d01a      	beq.n	800c48c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c456:	4b36      	ldr	r3, [pc, #216]	@ (800c530 <USBD_SetConfig+0x118>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2203      	movs	r2, #3
 800c464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c468:	4b31      	ldr	r3, [pc, #196]	@ (800c530 <USBD_SetConfig+0x118>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff f9e7 	bl	800b842 <USBD_SetClassConfig>
 800c474:	4603      	mov	r3, r0
 800c476:	2b02      	cmp	r3, #2
 800c478:	d104      	bne.n	800c484 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f92f 	bl	800c6e0 <USBD_CtlError>
            return;
 800c482:	e052      	b.n	800c52a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f9f3 	bl	800c870 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c48a:	e04e      	b.n	800c52a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9ef 	bl	800c870 <USBD_CtlSendStatus>
        break;
 800c492:	e04a      	b.n	800c52a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c494:	4b26      	ldr	r3, [pc, #152]	@ (800c530 <USBD_SetConfig+0x118>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d112      	bne.n	800c4c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c4a4:	4b22      	ldr	r3, [pc, #136]	@ (800c530 <USBD_SetConfig+0x118>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c4ae:	4b20      	ldr	r3, [pc, #128]	@ (800c530 <USBD_SetConfig+0x118>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff f9e3 	bl	800b880 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9d8 	bl	800c870 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c4c0:	e033      	b.n	800c52a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c530 <USBD_SetConfig+0x118>)
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d01d      	beq.n	800c50c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff f9d1 	bl	800b880 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c4de:	4b14      	ldr	r3, [pc, #80]	@ (800c530 <USBD_SetConfig+0x118>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c4e8:	4b11      	ldr	r3, [pc, #68]	@ (800c530 <USBD_SetConfig+0x118>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff f9a7 	bl	800b842 <USBD_SetClassConfig>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d104      	bne.n	800c504 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f8ef 	bl	800c6e0 <USBD_CtlError>
            return;
 800c502:	e012      	b.n	800c52a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f9b3 	bl	800c870 <USBD_CtlSendStatus>
        break;
 800c50a:	e00e      	b.n	800c52a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f9af 	bl	800c870 <USBD_CtlSendStatus>
        break;
 800c512:	e00a      	b.n	800c52a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f8e2 	bl	800c6e0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c51c:	4b04      	ldr	r3, [pc, #16]	@ (800c530 <USBD_SetConfig+0x118>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff f9ac 	bl	800b880 <USBD_ClrClassConfig>
        break;
 800c528:	bf00      	nop
    }
  }
}
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20000438 	.word	0x20000438

0800c534 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	88db      	ldrh	r3, [r3, #6]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d004      	beq.n	800c550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f8c9 	bl	800c6e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c54e:	e022      	b.n	800c596 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c556:	2b02      	cmp	r3, #2
 800c558:	dc02      	bgt.n	800c560 <USBD_GetConfig+0x2c>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dc03      	bgt.n	800c566 <USBD_GetConfig+0x32>
 800c55e:	e015      	b.n	800c58c <USBD_GetConfig+0x58>
 800c560:	2b03      	cmp	r3, #3
 800c562:	d00b      	beq.n	800c57c <USBD_GetConfig+0x48>
 800c564:	e012      	b.n	800c58c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3308      	adds	r3, #8
 800c570:	2201      	movs	r2, #1
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f91d 	bl	800c7b4 <USBD_CtlSendData>
        break;
 800c57a:	e00c      	b.n	800c596 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3304      	adds	r3, #4
 800c580:	2201      	movs	r2, #1
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f915 	bl	800c7b4 <USBD_CtlSendData>
        break;
 800c58a:	e004      	b.n	800c596 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f8a6 	bl	800c6e0 <USBD_CtlError>
        break;
 800c594:	bf00      	nop
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d81e      	bhi.n	800c5f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	88db      	ldrh	r3, [r3, #6]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d004      	beq.n	800c5c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f88e 	bl	800c6e0 <USBD_CtlError>
        break;
 800c5c4:	e01a      	b.n	800c5fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f043 0202 	orr.w	r2, r3, #2
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	330c      	adds	r3, #12
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f8e2 	bl	800c7b4 <USBD_CtlSendData>
      break;
 800c5f0:	e004      	b.n	800c5fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f873 	bl	800c6e0 <USBD_CtlError>
      break;
 800c5fa:	bf00      	nop
  }
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	885b      	ldrh	r3, [r3, #2]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d106      	bne.n	800c624 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f926 	bl	800c870 <USBD_CtlSendStatus>
  }
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c63c:	3b01      	subs	r3, #1
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d80b      	bhi.n	800c65a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d10c      	bne.n	800c664 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f90c 	bl	800c870 <USBD_CtlSendStatus>
      }
      break;
 800c658:	e004      	b.n	800c664 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f83f 	bl	800c6e0 <USBD_CtlError>
      break;
 800c662:	e000      	b.n	800c666 <USBD_ClrFeature+0x3a>
      break;
 800c664:	bf00      	nop
  }
}
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	785a      	ldrb	r2, [r3, #1]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	3302      	adds	r3, #2
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	3303      	adds	r3, #3
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	021b      	lsls	r3, r3, #8
 800c698:	b29b      	uxth	r3, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	3305      	adds	r3, #5
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	4413      	add	r3, r2
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	3306      	adds	r3, #6
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	3307      	adds	r3, #7
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	4413      	add	r3, r2
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	80da      	strh	r2, [r3, #6]

}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bc80      	pop	{r7}
 800c6de:	4770      	bx	lr

0800c6e0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c6ea:	2180      	movs	r1, #128	@ 0x80
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fc61 	bl	800cfb4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fc5d 	bl	800cfb4 <USBD_LL_StallEP>
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b086      	sub	sp, #24
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d032      	beq.n	800c77e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f000 f834 	bl	800c786 <USBD_GetLen>
 800c71e:	4603      	mov	r3, r0
 800c720:	3301      	adds	r3, #1
 800c722:	b29b      	uxth	r3, r3
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	b29a      	uxth	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	75fa      	strb	r2, [r7, #23]
 800c732:	461a      	mov	r2, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4413      	add	r3, r2
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	7812      	ldrb	r2, [r2, #0]
 800c73c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	75fa      	strb	r2, [r7, #23]
 800c744:	461a      	mov	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	4413      	add	r3, r2
 800c74a:	2203      	movs	r2, #3
 800c74c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c74e:	e012      	b.n	800c776 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	60fa      	str	r2, [r7, #12]
 800c756:	7dfa      	ldrb	r2, [r7, #23]
 800c758:	1c51      	adds	r1, r2, #1
 800c75a:	75f9      	strb	r1, [r7, #23]
 800c75c:	4611      	mov	r1, r2
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	440a      	add	r2, r1
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	75fa      	strb	r2, [r7, #23]
 800c76c:	461a      	mov	r2, r3
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	4413      	add	r3, r2
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e8      	bne.n	800c750 <USBD_GetString+0x4e>
    }
  }
}
 800c77e:	bf00      	nop
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c786:	b480      	push	{r7}
 800c788:	b085      	sub	sp, #20
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c792:	e005      	b.n	800c7a0 <USBD_GetLen+0x1a>
  {
    len++;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	3301      	adds	r3, #1
 800c798:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3301      	adds	r3, #1
 800c79e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1f5      	bne.n	800c794 <USBD_GetLen+0xe>
  }

  return len;
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bc80      	pop	{r7}
 800c7b2:	4770      	bx	lr

0800c7b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c7ca:	88fa      	ldrh	r2, [r7, #6]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c7d0:	88fa      	ldrh	r2, [r7, #6]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7d6:	88fb      	ldrh	r3, [r7, #6]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	2100      	movs	r1, #0
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fc72 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	2100      	movs	r1, #0
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 fc60 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	4613      	mov	r3, r2
 800c81c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2203      	movs	r2, #3
 800c822:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c826:	88fa      	ldrh	r2, [r7, #6]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c82e:	88fa      	ldrh	r2, [r7, #6]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c836:	88fb      	ldrh	r3, [r7, #6]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	2100      	movs	r1, #0
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f000 fc65 	bl	800d10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	2100      	movs	r1, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 fc53 	bl	800d10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c880:	2300      	movs	r3, #0
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fc1d 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2205      	movs	r2, #5
 800c8a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fc2d 	bl	800d10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4912      	ldr	r1, [pc, #72]	@ (800c90c <MX_USB_DEVICE_Init+0x50>)
 800c8c4:	4812      	ldr	r0, [pc, #72]	@ (800c910 <MX_USB_DEVICE_Init+0x54>)
 800c8c6:	f7fe ff62 	bl	800b78e <USBD_Init>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c8d0:	f7f7 f998 	bl	8003c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c8d4:	490f      	ldr	r1, [pc, #60]	@ (800c914 <MX_USB_DEVICE_Init+0x58>)
 800c8d6:	480e      	ldr	r0, [pc, #56]	@ (800c910 <MX_USB_DEVICE_Init+0x54>)
 800c8d8:	f7fe ff84 	bl	800b7e4 <USBD_RegisterClass>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c8e2:	f7f7 f98f 	bl	8003c04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8e6:	490c      	ldr	r1, [pc, #48]	@ (800c918 <MX_USB_DEVICE_Init+0x5c>)
 800c8e8:	4809      	ldr	r0, [pc, #36]	@ (800c910 <MX_USB_DEVICE_Init+0x54>)
 800c8ea:	f7fe feb5 	bl	800b658 <USBD_CDC_RegisterInterface>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c8f4:	f7f7 f986 	bl	8003c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8f8:	4805      	ldr	r0, [pc, #20]	@ (800c910 <MX_USB_DEVICE_Init+0x54>)
 800c8fa:	f7fe ff8c 	bl	800b816 <USBD_Start>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c904:	f7f7 f97e 	bl	8003c04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c908:	bf00      	nop
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000154 	.word	0x20000154
 800c910:	2000043c 	.word	0x2000043c
 800c914:	20000040 	.word	0x20000040
 800c918:	20000144 	.word	0x20000144

0800c91c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c920:	2200      	movs	r2, #0
 800c922:	4905      	ldr	r1, [pc, #20]	@ (800c938 <CDC_Init_FS+0x1c>)
 800c924:	4805      	ldr	r0, [pc, #20]	@ (800c93c <CDC_Init_FS+0x20>)
 800c926:	f7fe fead 	bl	800b684 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c92a:	4905      	ldr	r1, [pc, #20]	@ (800c940 <CDC_Init_FS+0x24>)
 800c92c:	4803      	ldr	r0, [pc, #12]	@ (800c93c <CDC_Init_FS+0x20>)
 800c92e:	f7fe fec2 	bl	800b6b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c932:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c934:	4618      	mov	r0, r3
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20000ae8 	.word	0x20000ae8
 800c93c:	2000043c 	.word	0x2000043c
 800c940:	20000700 	.word	0x20000700

0800c944 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c944:	b480      	push	{r7}
 800c946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c948:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr
	...

0800c954 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	4603      	mov	r3, r0
 800c95c:	6039      	str	r1, [r7, #0]
 800c95e:	71fb      	strb	r3, [r7, #7]
 800c960:	4613      	mov	r3, r2
 800c962:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	2b23      	cmp	r3, #35	@ 0x23
 800c968:	d84a      	bhi.n	800ca00 <CDC_Control_FS+0xac>
 800c96a:	a201      	add	r2, pc, #4	@ (adr r2, 800c970 <CDC_Control_FS+0x1c>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800ca01 	.word	0x0800ca01
 800c974:	0800ca01 	.word	0x0800ca01
 800c978:	0800ca01 	.word	0x0800ca01
 800c97c:	0800ca01 	.word	0x0800ca01
 800c980:	0800ca01 	.word	0x0800ca01
 800c984:	0800ca01 	.word	0x0800ca01
 800c988:	0800ca01 	.word	0x0800ca01
 800c98c:	0800ca01 	.word	0x0800ca01
 800c990:	0800ca01 	.word	0x0800ca01
 800c994:	0800ca01 	.word	0x0800ca01
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800ca01 	.word	0x0800ca01
 800c9a0:	0800ca01 	.word	0x0800ca01
 800c9a4:	0800ca01 	.word	0x0800ca01
 800c9a8:	0800ca01 	.word	0x0800ca01
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800ca01 	.word	0x0800ca01
 800c9b4:	0800ca01 	.word	0x0800ca01
 800c9b8:	0800ca01 	.word	0x0800ca01
 800c9bc:	0800ca01 	.word	0x0800ca01
 800c9c0:	0800ca01 	.word	0x0800ca01
 800c9c4:	0800ca01 	.word	0x0800ca01
 800c9c8:	0800ca01 	.word	0x0800ca01
 800c9cc:	0800ca01 	.word	0x0800ca01
 800c9d0:	0800ca01 	.word	0x0800ca01
 800c9d4:	0800ca01 	.word	0x0800ca01
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca01 	.word	0x0800ca01
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800ca01 	.word	0x0800ca01
 800c9ec:	0800ca01 	.word	0x0800ca01
 800c9f0:	0800ca01 	.word	0x0800ca01
 800c9f4:	0800ca01 	.word	0x0800ca01
 800c9f8:	0800ca01 	.word	0x0800ca01
 800c9fc:	0800ca01 	.word	0x0800ca01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca00:	bf00      	nop
  }

  return (USBD_OK);
 800ca02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bc80      	pop	{r7}
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop

0800ca10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	480a      	ldr	r0, [pc, #40]	@ (800ca48 <CDC_Receive_FS+0x38>)
 800ca1e:	f7fe fe4a 	bl	800b6b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca22:	4809      	ldr	r0, [pc, #36]	@ (800ca48 <CDC_Receive_FS+0x38>)
 800ca24:	f7fe fe89 	bl	800b73a <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	4905      	ldr	r1, [pc, #20]	@ (800ca4c <CDC_Receive_FS+0x3c>)
 800ca38:	4805      	ldr	r0, [pc, #20]	@ (800ca50 <CDC_Receive_FS+0x40>)
 800ca3a:	f000 fc3d 	bl	800d2b8 <memcpy>
  }
  return (USBD_OK);
 800ca3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	2000043c 	.word	0x2000043c
 800ca4c:	20000700 	.word	0x20000700
 800ca50:	20000350 	.word	0x20000350

0800ca54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca64:	4b0d      	ldr	r3, [pc, #52]	@ (800ca9c <CDC_Transmit_FS+0x48>)
 800ca66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e00b      	b.n	800ca92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca7a:	887b      	ldrh	r3, [r7, #2]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	4806      	ldr	r0, [pc, #24]	@ (800ca9c <CDC_Transmit_FS+0x48>)
 800ca82:	f7fe fdff 	bl	800b684 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca86:	4805      	ldr	r0, [pc, #20]	@ (800ca9c <CDC_Transmit_FS+0x48>)
 800ca88:	f7fe fe28 	bl	800b6dc <USBD_CDC_TransmitPacket>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	2000043c 	.word	0x2000043c

0800caa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	6039      	str	r1, [r7, #0]
 800caaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2212      	movs	r2, #18
 800cab0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cab2:	4b03      	ldr	r3, [pc, #12]	@ (800cac0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	20000170 	.word	0x20000170

0800cac4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	4603      	mov	r3, r0
 800cacc:	6039      	str	r1, [r7, #0]
 800cace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2204      	movs	r2, #4
 800cad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cad6:	4b03      	ldr	r3, [pc, #12]	@ (800cae4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	bc80      	pop	{r7}
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20000184 	.word	0x20000184

0800cae8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	6039      	str	r1, [r7, #0]
 800caf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caf4:	79fb      	ldrb	r3, [r7, #7]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d105      	bne.n	800cb06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	4907      	ldr	r1, [pc, #28]	@ (800cb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800cafe:	4808      	ldr	r0, [pc, #32]	@ (800cb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb00:	f7ff fdff 	bl	800c702 <USBD_GetString>
 800cb04:	e004      	b.n	800cb10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	4904      	ldr	r1, [pc, #16]	@ (800cb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800cb0a:	4805      	ldr	r0, [pc, #20]	@ (800cb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb0c:	f7ff fdf9 	bl	800c702 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb10:	4b02      	ldr	r3, [pc, #8]	@ (800cb1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000ed0 	.word	0x20000ed0
 800cb20:	0800e43c 	.word	0x0800e43c

0800cb24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	6039      	str	r1, [r7, #0]
 800cb2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	4904      	ldr	r1, [pc, #16]	@ (800cb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb34:	4804      	ldr	r0, [pc, #16]	@ (800cb48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb36:	f7ff fde4 	bl	800c702 <USBD_GetString>
  return USBD_StrDesc;
 800cb3a:	4b02      	ldr	r3, [pc, #8]	@ (800cb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	20000ed0 	.word	0x20000ed0
 800cb48:	0800e454 	.word	0x0800e454

0800cb4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	6039      	str	r1, [r7, #0]
 800cb56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	221a      	movs	r2, #26
 800cb5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb5e:	f000 f843 	bl	800cbe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb62:	4b02      	ldr	r3, [pc, #8]	@ (800cb6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000188 	.word	0x20000188

0800cb70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	4603      	mov	r3, r0
 800cb78:	6039      	str	r1, [r7, #0]
 800cb7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d105      	bne.n	800cb8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	4907      	ldr	r1, [pc, #28]	@ (800cba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb86:	4808      	ldr	r0, [pc, #32]	@ (800cba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb88:	f7ff fdbb 	bl	800c702 <USBD_GetString>
 800cb8c:	e004      	b.n	800cb98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	4904      	ldr	r1, [pc, #16]	@ (800cba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb92:	4805      	ldr	r0, [pc, #20]	@ (800cba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb94:	f7ff fdb5 	bl	800c702 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb98:	4b02      	ldr	r3, [pc, #8]	@ (800cba4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000ed0 	.word	0x20000ed0
 800cba8:	0800e468 	.word	0x0800e468

0800cbac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	6039      	str	r1, [r7, #0]
 800cbb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	4907      	ldr	r1, [pc, #28]	@ (800cbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbc2:	4808      	ldr	r0, [pc, #32]	@ (800cbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbc4:	f7ff fd9d 	bl	800c702 <USBD_GetString>
 800cbc8:	e004      	b.n	800cbd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	4904      	ldr	r1, [pc, #16]	@ (800cbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbce:	4805      	ldr	r0, [pc, #20]	@ (800cbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbd0:	f7ff fd97 	bl	800c702 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbd4:	4b02      	ldr	r3, [pc, #8]	@ (800cbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000ed0 	.word	0x20000ed0
 800cbe4:	0800e474 	.word	0x0800e474

0800cbe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbee:	4b0f      	ldr	r3, [pc, #60]	@ (800cc2c <Get_SerialNum+0x44>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbf4:	4b0e      	ldr	r3, [pc, #56]	@ (800cc30 <Get_SerialNum+0x48>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbfa:	4b0e      	ldr	r3, [pc, #56]	@ (800cc34 <Get_SerialNum+0x4c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc0e:	2208      	movs	r2, #8
 800cc10:	4909      	ldr	r1, [pc, #36]	@ (800cc38 <Get_SerialNum+0x50>)
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f814 	bl	800cc40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc18:	2204      	movs	r2, #4
 800cc1a:	4908      	ldr	r1, [pc, #32]	@ (800cc3c <Get_SerialNum+0x54>)
 800cc1c:	68b8      	ldr	r0, [r7, #8]
 800cc1e:	f000 f80f 	bl	800cc40 <IntToUnicode>
  }
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	1ffff7e8 	.word	0x1ffff7e8
 800cc30:	1ffff7ec 	.word	0x1ffff7ec
 800cc34:	1ffff7f0 	.word	0x1ffff7f0
 800cc38:	2000018a 	.word	0x2000018a
 800cc3c:	2000019a 	.word	0x2000019a

0800cc40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc52:	2300      	movs	r3, #0
 800cc54:	75fb      	strb	r3, [r7, #23]
 800cc56:	e027      	b.n	800cca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	0f1b      	lsrs	r3, r3, #28
 800cc5c:	2b09      	cmp	r3, #9
 800cc5e:	d80b      	bhi.n	800cc78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	0f1b      	lsrs	r3, r3, #28
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	440b      	add	r3, r1
 800cc70:	3230      	adds	r2, #48	@ 0x30
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	701a      	strb	r2, [r3, #0]
 800cc76:	e00a      	b.n	800cc8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	0f1b      	lsrs	r3, r3, #28
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4619      	mov	r1, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	440b      	add	r3, r1
 800cc88:	3237      	adds	r2, #55	@ 0x37
 800cc8a:	b2d2      	uxtb	r2, r2
 800cc8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	3301      	adds	r3, #1
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	3301      	adds	r3, #1
 800cca6:	75fb      	strb	r3, [r7, #23]
 800cca8:	7dfa      	ldrb	r2, [r7, #23]
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d3d3      	bcc.n	800cc58 <IntToUnicode+0x18>
  }
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	371c      	adds	r7, #28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bc80      	pop	{r7}
 800ccba:	4770      	bx	lr

0800ccbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a0d      	ldr	r2, [pc, #52]	@ (800cd00 <HAL_PCD_MspInit+0x44>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d113      	bne.n	800ccf6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ccce:	4b0d      	ldr	r3, [pc, #52]	@ (800cd04 <HAL_PCD_MspInit+0x48>)
 800ccd0:	69db      	ldr	r3, [r3, #28]
 800ccd2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd04 <HAL_PCD_MspInit+0x48>)
 800ccd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ccd8:	61d3      	str	r3, [r2, #28]
 800ccda:	4b0a      	ldr	r3, [pc, #40]	@ (800cd04 <HAL_PCD_MspInit+0x48>)
 800ccdc:	69db      	ldr	r3, [r3, #28]
 800ccde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cce6:	2200      	movs	r2, #0
 800cce8:	2100      	movs	r1, #0
 800ccea:	2014      	movs	r0, #20
 800ccec:	f7f7 fd6f 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ccf0:	2014      	movs	r0, #20
 800ccf2:	f7f7 fd88 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ccf6:	bf00      	nop
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	40005c00 	.word	0x40005c00
 800cd04:	40021000 	.word	0x40021000

0800cd08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	f7fe fdc1 	bl	800b8a6 <USBD_LL_SetupStage>
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	4613      	mov	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	440b      	add	r3, r1
 800cd4c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	4619      	mov	r1, r3
 800cd56:	f7fe fdf3 	bl	800b940 <USBD_LL_DataOutStage>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	440b      	add	r3, r1
 800cd82:	333c      	adds	r3, #60	@ 0x3c
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	78fb      	ldrb	r3, [r7, #3]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7fe fe4a 	bl	800ba22 <USBD_LL_DataInStage>
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe ff5a 	bl	800bc5e <USBD_LL_SOF>
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d001      	beq.n	800cdca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cdc6:	f7f6 ff1d 	bl	8003c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cdd0:	7bfa      	ldrb	r2, [r7, #15]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe ff0a 	bl	800bbee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fec3 	bl	800bb6c <USBD_LL_Reset>
}
 800cde6:	bf00      	nop
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fe ff04 	bl	800bc0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d005      	beq.n	800ce18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce0c:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <HAL_PCD_SuspendCallback+0x30>)
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	4a03      	ldr	r2, [pc, #12]	@ (800ce20 <HAL_PCD_SuspendCallback+0x30>)
 800ce12:	f043 0306 	orr.w	r3, r3, #6
 800ce16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	e000ed00 	.word	0xe000ed00

0800ce24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fefe 	bl	800bc34 <USBD_LL_Resume>
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ce48:	4a28      	ldr	r2, [pc, #160]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a26      	ldr	r2, [pc, #152]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce54:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ce58:	4b24      	ldr	r3, [pc, #144]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce5a:	4a25      	ldr	r2, [pc, #148]	@ (800cef0 <USBD_LL_Init+0xb0>)
 800ce5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce5e:	4b23      	ldr	r3, [pc, #140]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce60:	2208      	movs	r2, #8
 800ce62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce64:	4b21      	ldr	r3, [pc, #132]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce66:	2202      	movs	r2, #2
 800ce68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce6a:	4b20      	ldr	r3, [pc, #128]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce70:	4b1e      	ldr	r3, [pc, #120]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce76:	4b1d      	ldr	r3, [pc, #116]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce7c:	481b      	ldr	r0, [pc, #108]	@ (800ceec <USBD_LL_Init+0xac>)
 800ce7e:	f7f8 fcfd 	bl	800587c <HAL_PCD_Init>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ce88:	f7f6 febc 	bl	8003c04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce92:	2318      	movs	r3, #24
 800ce94:	2200      	movs	r2, #0
 800ce96:	2100      	movs	r1, #0
 800ce98:	f7fa f83c 	bl	8006f14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cea2:	2358      	movs	r3, #88	@ 0x58
 800cea4:	2200      	movs	r2, #0
 800cea6:	2180      	movs	r1, #128	@ 0x80
 800cea8:	f7fa f834 	bl	8006f14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ceb2:	23c0      	movs	r3, #192	@ 0xc0
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2181      	movs	r1, #129	@ 0x81
 800ceb8:	f7fa f82c 	bl	8006f14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cec2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cec6:	2200      	movs	r2, #0
 800cec8:	2101      	movs	r1, #1
 800ceca:	f7fa f823 	bl	8006f14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ced4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ced8:	2200      	movs	r2, #0
 800ceda:	2182      	movs	r1, #130	@ 0x82
 800cedc:	f7fa f81a 	bl	8006f14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	200010d0 	.word	0x200010d0
 800cef0:	40005c00 	.word	0x40005c00

0800cef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f8 fdc1 	bl	8005a92 <HAL_PCD_Start>
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 f94e 	bl	800d1b8 <USBD_Get_USB_Status>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	4608      	mov	r0, r1
 800cf34:	4611      	mov	r1, r2
 800cf36:	461a      	mov	r2, r3
 800cf38:	4603      	mov	r3, r0
 800cf3a:	70fb      	strb	r3, [r7, #3]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70bb      	strb	r3, [r7, #2]
 800cf40:	4613      	mov	r3, r2
 800cf42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf52:	78bb      	ldrb	r3, [r7, #2]
 800cf54:	883a      	ldrh	r2, [r7, #0]
 800cf56:	78f9      	ldrb	r1, [r7, #3]
 800cf58:	f7f8 ff39 	bl	8005dce <HAL_PCD_EP_Open>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 f928 	bl	800d1b8 <USBD_Get_USB_Status>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	460b      	mov	r3, r1
 800cf80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf90:	78fa      	ldrb	r2, [r7, #3]
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f8 ff80 	bl	8005e9a <HAL_PCD_EP_Close>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 f909 	bl	800d1b8 <USBD_Get_USB_Status>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cfce:	78fa      	ldrb	r2, [r7, #3]
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7f9 f840 	bl	8006058 <HAL_PCD_EP_SetStall>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 f8ea 	bl	800d1b8 <USBD_Get_USB_Status>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d00c:	78fa      	ldrb	r2, [r7, #3]
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f7f9 f881 	bl	8006118 <HAL_PCD_EP_ClrStall>
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f8cb 	bl	800d1b8 <USBD_Get_USB_Status>
 800d022:	4603      	mov	r3, r0
 800d024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d026:	7bbb      	ldrb	r3, [r7, #14]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	da0c      	bge.n	800d066 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d04c:	78fb      	ldrb	r3, [r7, #3]
 800d04e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	4613      	mov	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	440b      	add	r3, r1
 800d060:	3302      	adds	r3, #2
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	e00b      	b.n	800d07e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d066:	78fb      	ldrb	r3, [r7, #3]
 800d068:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d06c:	68f9      	ldr	r1, [r7, #12]
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	440b      	add	r3, r1
 800d078:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d07c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	bc80      	pop	{r7}
 800d086:	4770      	bx	lr

0800d088 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0a2:	78fa      	ldrb	r2, [r7, #3]
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f8 fe6c 	bl	8005d84 <HAL_PCD_SetAddress>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f880 	bl	800d1b8 <USBD_Get_USB_Status>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b086      	sub	sp, #24
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	72fb      	strb	r3, [r7, #11]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0e8:	893b      	ldrh	r3, [r7, #8]
 800d0ea:	7af9      	ldrb	r1, [r7, #11]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	f7f8 ff70 	bl	8005fd2 <HAL_PCD_EP_Transmit>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 f85d 	bl	800d1b8 <USBD_Get_USB_Status>
 800d0fe:	4603      	mov	r3, r0
 800d100:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d102:	7dbb      	ldrb	r3, [r7, #22]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	607a      	str	r2, [r7, #4]
 800d116:	461a      	mov	r2, r3
 800d118:	460b      	mov	r3, r1
 800d11a:	72fb      	strb	r3, [r7, #11]
 800d11c:	4613      	mov	r3, r2
 800d11e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d12e:	893b      	ldrh	r3, [r7, #8]
 800d130:	7af9      	ldrb	r1, [r7, #11]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	f7f8 fef9 	bl	8005f2a <HAL_PCD_EP_Receive>
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 f83a 	bl	800d1b8 <USBD_Get_USB_Status>
 800d144:	4603      	mov	r3, r0
 800d146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d148:	7dbb      	ldrb	r3, [r7, #22]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d164:	78fa      	ldrb	r2, [r7, #3]
 800d166:	4611      	mov	r1, r2
 800d168:	4618      	mov	r0, r3
 800d16a:	f7f8 ff1b 	bl	8005fa4 <HAL_PCD_EP_GetRxCount>
 800d16e:	4603      	mov	r3, r0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d180:	4b02      	ldr	r3, [pc, #8]	@ (800d18c <USBD_static_malloc+0x14>)
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	bc80      	pop	{r7}
 800d18a:	4770      	bx	lr
 800d18c:	200013bc 	.word	0x200013bc

0800d190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bc80      	pop	{r7}
 800d1a0:	4770      	bx	lr

0800d1a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc80      	pop	{r7}
 800d1b6:	4770      	bx	lr

0800d1b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	2b03      	cmp	r3, #3
 800d1ca:	d817      	bhi.n	800d1fc <USBD_Get_USB_Status+0x44>
 800d1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d4 <USBD_Get_USB_Status+0x1c>)
 800d1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d2:	bf00      	nop
 800d1d4:	0800d1e5 	.word	0x0800d1e5
 800d1d8:	0800d1eb 	.word	0x0800d1eb
 800d1dc:	0800d1f1 	.word	0x0800d1f1
 800d1e0:	0800d1f7 	.word	0x0800d1f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e8:	e00b      	b.n	800d202 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ee:	e008      	b.n	800d202 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f4:	e005      	b.n	800d202 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1fa:	e002      	b.n	800d202 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d200:	bf00      	nop
  }
  return usb_status;
 800d202:	7bfb      	ldrb	r3, [r7, #15]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	bc80      	pop	{r7}
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop

0800d210 <siprintf>:
 800d210:	b40e      	push	{r1, r2, r3}
 800d212:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d216:	b500      	push	{lr}
 800d218:	b09c      	sub	sp, #112	@ 0x70
 800d21a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d21c:	9002      	str	r0, [sp, #8]
 800d21e:	9006      	str	r0, [sp, #24]
 800d220:	9107      	str	r1, [sp, #28]
 800d222:	9104      	str	r1, [sp, #16]
 800d224:	4808      	ldr	r0, [pc, #32]	@ (800d248 <siprintf+0x38>)
 800d226:	4909      	ldr	r1, [pc, #36]	@ (800d24c <siprintf+0x3c>)
 800d228:	f853 2b04 	ldr.w	r2, [r3], #4
 800d22c:	9105      	str	r1, [sp, #20]
 800d22e:	6800      	ldr	r0, [r0, #0]
 800d230:	a902      	add	r1, sp, #8
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	f000 f9a0 	bl	800d578 <_svfiprintf_r>
 800d238:	2200      	movs	r2, #0
 800d23a:	9b02      	ldr	r3, [sp, #8]
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	b01c      	add	sp, #112	@ 0x70
 800d240:	f85d eb04 	ldr.w	lr, [sp], #4
 800d244:	b003      	add	sp, #12
 800d246:	4770      	bx	lr
 800d248:	200001a4 	.word	0x200001a4
 800d24c:	ffff0208 	.word	0xffff0208

0800d250 <memset>:
 800d250:	4603      	mov	r3, r0
 800d252:	4402      	add	r2, r0
 800d254:	4293      	cmp	r3, r2
 800d256:	d100      	bne.n	800d25a <memset+0xa>
 800d258:	4770      	bx	lr
 800d25a:	f803 1b01 	strb.w	r1, [r3], #1
 800d25e:	e7f9      	b.n	800d254 <memset+0x4>

0800d260 <__errno>:
 800d260:	4b01      	ldr	r3, [pc, #4]	@ (800d268 <__errno+0x8>)
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	200001a4 	.word	0x200001a4

0800d26c <__libc_init_array>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	2600      	movs	r6, #0
 800d270:	4d0c      	ldr	r5, [pc, #48]	@ (800d2a4 <__libc_init_array+0x38>)
 800d272:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a8 <__libc_init_array+0x3c>)
 800d274:	1b64      	subs	r4, r4, r5
 800d276:	10a4      	asrs	r4, r4, #2
 800d278:	42a6      	cmp	r6, r4
 800d27a:	d109      	bne.n	800d290 <__libc_init_array+0x24>
 800d27c:	f000 fc78 	bl	800db70 <_init>
 800d280:	2600      	movs	r6, #0
 800d282:	4d0a      	ldr	r5, [pc, #40]	@ (800d2ac <__libc_init_array+0x40>)
 800d284:	4c0a      	ldr	r4, [pc, #40]	@ (800d2b0 <__libc_init_array+0x44>)
 800d286:	1b64      	subs	r4, r4, r5
 800d288:	10a4      	asrs	r4, r4, #2
 800d28a:	42a6      	cmp	r6, r4
 800d28c:	d105      	bne.n	800d29a <__libc_init_array+0x2e>
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f855 3b04 	ldr.w	r3, [r5], #4
 800d294:	4798      	blx	r3
 800d296:	3601      	adds	r6, #1
 800d298:	e7ee      	b.n	800d278 <__libc_init_array+0xc>
 800d29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29e:	4798      	blx	r3
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7f2      	b.n	800d28a <__libc_init_array+0x1e>
 800d2a4:	0800e4e0 	.word	0x0800e4e0
 800d2a8:	0800e4e0 	.word	0x0800e4e0
 800d2ac:	0800e4e0 	.word	0x0800e4e0
 800d2b0:	0800e4e4 	.word	0x0800e4e4

0800d2b4 <__retarget_lock_acquire_recursive>:
 800d2b4:	4770      	bx	lr

0800d2b6 <__retarget_lock_release_recursive>:
 800d2b6:	4770      	bx	lr

0800d2b8 <memcpy>:
 800d2b8:	440a      	add	r2, r1
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c0:	d100      	bne.n	800d2c4 <memcpy+0xc>
 800d2c2:	4770      	bx	lr
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d0:	d1f9      	bne.n	800d2c6 <memcpy+0xe>
 800d2d2:	bd10      	pop	{r4, pc}

0800d2d4 <_free_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	d040      	beq.n	800d35e <_free_r+0x8a>
 800d2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e0:	1f0c      	subs	r4, r1, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	bfb8      	it	lt
 800d2e6:	18e4      	addlt	r4, r4, r3
 800d2e8:	f000 f8de 	bl	800d4a8 <__malloc_lock>
 800d2ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d360 <_free_r+0x8c>)
 800d2ee:	6813      	ldr	r3, [r2, #0]
 800d2f0:	b933      	cbnz	r3, 800d300 <_free_r+0x2c>
 800d2f2:	6063      	str	r3, [r4, #4]
 800d2f4:	6014      	str	r4, [r2, #0]
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2fc:	f000 b8da 	b.w	800d4b4 <__malloc_unlock>
 800d300:	42a3      	cmp	r3, r4
 800d302:	d908      	bls.n	800d316 <_free_r+0x42>
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	1821      	adds	r1, r4, r0
 800d308:	428b      	cmp	r3, r1
 800d30a:	bf01      	itttt	eq
 800d30c:	6819      	ldreq	r1, [r3, #0]
 800d30e:	685b      	ldreq	r3, [r3, #4]
 800d310:	1809      	addeq	r1, r1, r0
 800d312:	6021      	streq	r1, [r4, #0]
 800d314:	e7ed      	b.n	800d2f2 <_free_r+0x1e>
 800d316:	461a      	mov	r2, r3
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	b10b      	cbz	r3, 800d320 <_free_r+0x4c>
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	d9fa      	bls.n	800d316 <_free_r+0x42>
 800d320:	6811      	ldr	r1, [r2, #0]
 800d322:	1850      	adds	r0, r2, r1
 800d324:	42a0      	cmp	r0, r4
 800d326:	d10b      	bne.n	800d340 <_free_r+0x6c>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	4401      	add	r1, r0
 800d32c:	1850      	adds	r0, r2, r1
 800d32e:	4283      	cmp	r3, r0
 800d330:	6011      	str	r1, [r2, #0]
 800d332:	d1e0      	bne.n	800d2f6 <_free_r+0x22>
 800d334:	6818      	ldr	r0, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4408      	add	r0, r1
 800d33a:	6010      	str	r0, [r2, #0]
 800d33c:	6053      	str	r3, [r2, #4]
 800d33e:	e7da      	b.n	800d2f6 <_free_r+0x22>
 800d340:	d902      	bls.n	800d348 <_free_r+0x74>
 800d342:	230c      	movs	r3, #12
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	e7d6      	b.n	800d2f6 <_free_r+0x22>
 800d348:	6820      	ldr	r0, [r4, #0]
 800d34a:	1821      	adds	r1, r4, r0
 800d34c:	428b      	cmp	r3, r1
 800d34e:	bf01      	itttt	eq
 800d350:	6819      	ldreq	r1, [r3, #0]
 800d352:	685b      	ldreq	r3, [r3, #4]
 800d354:	1809      	addeq	r1, r1, r0
 800d356:	6021      	streq	r1, [r4, #0]
 800d358:	6063      	str	r3, [r4, #4]
 800d35a:	6054      	str	r4, [r2, #4]
 800d35c:	e7cb      	b.n	800d2f6 <_free_r+0x22>
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20001720 	.word	0x20001720

0800d364 <sbrk_aligned>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	4e0f      	ldr	r6, [pc, #60]	@ (800d3a4 <sbrk_aligned+0x40>)
 800d368:	460c      	mov	r4, r1
 800d36a:	6831      	ldr	r1, [r6, #0]
 800d36c:	4605      	mov	r5, r0
 800d36e:	b911      	cbnz	r1, 800d376 <sbrk_aligned+0x12>
 800d370:	f000 fbaa 	bl	800dac8 <_sbrk_r>
 800d374:	6030      	str	r0, [r6, #0]
 800d376:	4621      	mov	r1, r4
 800d378:	4628      	mov	r0, r5
 800d37a:	f000 fba5 	bl	800dac8 <_sbrk_r>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	d103      	bne.n	800d38a <sbrk_aligned+0x26>
 800d382:	f04f 34ff 	mov.w	r4, #4294967295
 800d386:	4620      	mov	r0, r4
 800d388:	bd70      	pop	{r4, r5, r6, pc}
 800d38a:	1cc4      	adds	r4, r0, #3
 800d38c:	f024 0403 	bic.w	r4, r4, #3
 800d390:	42a0      	cmp	r0, r4
 800d392:	d0f8      	beq.n	800d386 <sbrk_aligned+0x22>
 800d394:	1a21      	subs	r1, r4, r0
 800d396:	4628      	mov	r0, r5
 800d398:	f000 fb96 	bl	800dac8 <_sbrk_r>
 800d39c:	3001      	adds	r0, #1
 800d39e:	d1f2      	bne.n	800d386 <sbrk_aligned+0x22>
 800d3a0:	e7ef      	b.n	800d382 <sbrk_aligned+0x1e>
 800d3a2:	bf00      	nop
 800d3a4:	2000171c 	.word	0x2000171c

0800d3a8 <_malloc_r>:
 800d3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	1ccd      	adds	r5, r1, #3
 800d3ae:	f025 0503 	bic.w	r5, r5, #3
 800d3b2:	3508      	adds	r5, #8
 800d3b4:	2d0c      	cmp	r5, #12
 800d3b6:	bf38      	it	cc
 800d3b8:	250c      	movcc	r5, #12
 800d3ba:	2d00      	cmp	r5, #0
 800d3bc:	4606      	mov	r6, r0
 800d3be:	db01      	blt.n	800d3c4 <_malloc_r+0x1c>
 800d3c0:	42a9      	cmp	r1, r5
 800d3c2:	d904      	bls.n	800d3ce <_malloc_r+0x26>
 800d3c4:	230c      	movs	r3, #12
 800d3c6:	6033      	str	r3, [r6, #0]
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4a4 <_malloc_r+0xfc>
 800d3d2:	f000 f869 	bl	800d4a8 <__malloc_lock>
 800d3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3da:	461c      	mov	r4, r3
 800d3dc:	bb44      	cbnz	r4, 800d430 <_malloc_r+0x88>
 800d3de:	4629      	mov	r1, r5
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7ff ffbf 	bl	800d364 <sbrk_aligned>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	d158      	bne.n	800d49e <_malloc_r+0xf6>
 800d3ec:	f8d8 4000 	ldr.w	r4, [r8]
 800d3f0:	4627      	mov	r7, r4
 800d3f2:	2f00      	cmp	r7, #0
 800d3f4:	d143      	bne.n	800d47e <_malloc_r+0xd6>
 800d3f6:	2c00      	cmp	r4, #0
 800d3f8:	d04b      	beq.n	800d492 <_malloc_r+0xea>
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	4630      	mov	r0, r6
 800d400:	eb04 0903 	add.w	r9, r4, r3
 800d404:	f000 fb60 	bl	800dac8 <_sbrk_r>
 800d408:	4581      	cmp	r9, r0
 800d40a:	d142      	bne.n	800d492 <_malloc_r+0xea>
 800d40c:	6821      	ldr	r1, [r4, #0]
 800d40e:	4630      	mov	r0, r6
 800d410:	1a6d      	subs	r5, r5, r1
 800d412:	4629      	mov	r1, r5
 800d414:	f7ff ffa6 	bl	800d364 <sbrk_aligned>
 800d418:	3001      	adds	r0, #1
 800d41a:	d03a      	beq.n	800d492 <_malloc_r+0xea>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	442b      	add	r3, r5
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	f8d8 3000 	ldr.w	r3, [r8]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	bb62      	cbnz	r2, 800d484 <_malloc_r+0xdc>
 800d42a:	f8c8 7000 	str.w	r7, [r8]
 800d42e:	e00f      	b.n	800d450 <_malloc_r+0xa8>
 800d430:	6822      	ldr	r2, [r4, #0]
 800d432:	1b52      	subs	r2, r2, r5
 800d434:	d420      	bmi.n	800d478 <_malloc_r+0xd0>
 800d436:	2a0b      	cmp	r2, #11
 800d438:	d917      	bls.n	800d46a <_malloc_r+0xc2>
 800d43a:	1961      	adds	r1, r4, r5
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	6025      	str	r5, [r4, #0]
 800d440:	bf18      	it	ne
 800d442:	6059      	strne	r1, [r3, #4]
 800d444:	6863      	ldr	r3, [r4, #4]
 800d446:	bf08      	it	eq
 800d448:	f8c8 1000 	streq.w	r1, [r8]
 800d44c:	5162      	str	r2, [r4, r5]
 800d44e:	604b      	str	r3, [r1, #4]
 800d450:	4630      	mov	r0, r6
 800d452:	f000 f82f 	bl	800d4b4 <__malloc_unlock>
 800d456:	f104 000b 	add.w	r0, r4, #11
 800d45a:	1d23      	adds	r3, r4, #4
 800d45c:	f020 0007 	bic.w	r0, r0, #7
 800d460:	1ac2      	subs	r2, r0, r3
 800d462:	bf1c      	itt	ne
 800d464:	1a1b      	subne	r3, r3, r0
 800d466:	50a3      	strne	r3, [r4, r2]
 800d468:	e7af      	b.n	800d3ca <_malloc_r+0x22>
 800d46a:	6862      	ldr	r2, [r4, #4]
 800d46c:	42a3      	cmp	r3, r4
 800d46e:	bf0c      	ite	eq
 800d470:	f8c8 2000 	streq.w	r2, [r8]
 800d474:	605a      	strne	r2, [r3, #4]
 800d476:	e7eb      	b.n	800d450 <_malloc_r+0xa8>
 800d478:	4623      	mov	r3, r4
 800d47a:	6864      	ldr	r4, [r4, #4]
 800d47c:	e7ae      	b.n	800d3dc <_malloc_r+0x34>
 800d47e:	463c      	mov	r4, r7
 800d480:	687f      	ldr	r7, [r7, #4]
 800d482:	e7b6      	b.n	800d3f2 <_malloc_r+0x4a>
 800d484:	461a      	mov	r2, r3
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	42a3      	cmp	r3, r4
 800d48a:	d1fb      	bne.n	800d484 <_malloc_r+0xdc>
 800d48c:	2300      	movs	r3, #0
 800d48e:	6053      	str	r3, [r2, #4]
 800d490:	e7de      	b.n	800d450 <_malloc_r+0xa8>
 800d492:	230c      	movs	r3, #12
 800d494:	4630      	mov	r0, r6
 800d496:	6033      	str	r3, [r6, #0]
 800d498:	f000 f80c 	bl	800d4b4 <__malloc_unlock>
 800d49c:	e794      	b.n	800d3c8 <_malloc_r+0x20>
 800d49e:	6005      	str	r5, [r0, #0]
 800d4a0:	e7d6      	b.n	800d450 <_malloc_r+0xa8>
 800d4a2:	bf00      	nop
 800d4a4:	20001720 	.word	0x20001720

0800d4a8 <__malloc_lock>:
 800d4a8:	4801      	ldr	r0, [pc, #4]	@ (800d4b0 <__malloc_lock+0x8>)
 800d4aa:	f7ff bf03 	b.w	800d2b4 <__retarget_lock_acquire_recursive>
 800d4ae:	bf00      	nop
 800d4b0:	20001718 	.word	0x20001718

0800d4b4 <__malloc_unlock>:
 800d4b4:	4801      	ldr	r0, [pc, #4]	@ (800d4bc <__malloc_unlock+0x8>)
 800d4b6:	f7ff befe 	b.w	800d2b6 <__retarget_lock_release_recursive>
 800d4ba:	bf00      	nop
 800d4bc:	20001718 	.word	0x20001718

0800d4c0 <__ssputs_r>:
 800d4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c4:	461f      	mov	r7, r3
 800d4c6:	688e      	ldr	r6, [r1, #8]
 800d4c8:	4682      	mov	sl, r0
 800d4ca:	42be      	cmp	r6, r7
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	4690      	mov	r8, r2
 800d4d0:	680b      	ldr	r3, [r1, #0]
 800d4d2:	d82d      	bhi.n	800d530 <__ssputs_r+0x70>
 800d4d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4dc:	d026      	beq.n	800d52c <__ssputs_r+0x6c>
 800d4de:	6965      	ldr	r5, [r4, #20]
 800d4e0:	6909      	ldr	r1, [r1, #16]
 800d4e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4e6:	eba3 0901 	sub.w	r9, r3, r1
 800d4ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4ee:	1c7b      	adds	r3, r7, #1
 800d4f0:	444b      	add	r3, r9
 800d4f2:	106d      	asrs	r5, r5, #1
 800d4f4:	429d      	cmp	r5, r3
 800d4f6:	bf38      	it	cc
 800d4f8:	461d      	movcc	r5, r3
 800d4fa:	0553      	lsls	r3, r2, #21
 800d4fc:	d527      	bpl.n	800d54e <__ssputs_r+0x8e>
 800d4fe:	4629      	mov	r1, r5
 800d500:	f7ff ff52 	bl	800d3a8 <_malloc_r>
 800d504:	4606      	mov	r6, r0
 800d506:	b360      	cbz	r0, 800d562 <__ssputs_r+0xa2>
 800d508:	464a      	mov	r2, r9
 800d50a:	6921      	ldr	r1, [r4, #16]
 800d50c:	f7ff fed4 	bl	800d2b8 <memcpy>
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	6126      	str	r6, [r4, #16]
 800d51e:	444e      	add	r6, r9
 800d520:	6026      	str	r6, [r4, #0]
 800d522:	463e      	mov	r6, r7
 800d524:	6165      	str	r5, [r4, #20]
 800d526:	eba5 0509 	sub.w	r5, r5, r9
 800d52a:	60a5      	str	r5, [r4, #8]
 800d52c:	42be      	cmp	r6, r7
 800d52e:	d900      	bls.n	800d532 <__ssputs_r+0x72>
 800d530:	463e      	mov	r6, r7
 800d532:	4632      	mov	r2, r6
 800d534:	4641      	mov	r1, r8
 800d536:	6820      	ldr	r0, [r4, #0]
 800d538:	f000 faac 	bl	800da94 <memmove>
 800d53c:	2000      	movs	r0, #0
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	1b9b      	subs	r3, r3, r6
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	4433      	add	r3, r6
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54e:	462a      	mov	r2, r5
 800d550:	f000 fad8 	bl	800db04 <_realloc_r>
 800d554:	4606      	mov	r6, r0
 800d556:	2800      	cmp	r0, #0
 800d558:	d1e0      	bne.n	800d51c <__ssputs_r+0x5c>
 800d55a:	4650      	mov	r0, sl
 800d55c:	6921      	ldr	r1, [r4, #16]
 800d55e:	f7ff feb9 	bl	800d2d4 <_free_r>
 800d562:	230c      	movs	r3, #12
 800d564:	f8ca 3000 	str.w	r3, [sl]
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f04f 30ff 	mov.w	r0, #4294967295
 800d56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	e7e9      	b.n	800d54a <__ssputs_r+0x8a>
	...

0800d578 <_svfiprintf_r>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	4698      	mov	r8, r3
 800d57e:	898b      	ldrh	r3, [r1, #12]
 800d580:	4607      	mov	r7, r0
 800d582:	061b      	lsls	r3, r3, #24
 800d584:	460d      	mov	r5, r1
 800d586:	4614      	mov	r4, r2
 800d588:	b09d      	sub	sp, #116	@ 0x74
 800d58a:	d510      	bpl.n	800d5ae <_svfiprintf_r+0x36>
 800d58c:	690b      	ldr	r3, [r1, #16]
 800d58e:	b973      	cbnz	r3, 800d5ae <_svfiprintf_r+0x36>
 800d590:	2140      	movs	r1, #64	@ 0x40
 800d592:	f7ff ff09 	bl	800d3a8 <_malloc_r>
 800d596:	6028      	str	r0, [r5, #0]
 800d598:	6128      	str	r0, [r5, #16]
 800d59a:	b930      	cbnz	r0, 800d5aa <_svfiprintf_r+0x32>
 800d59c:	230c      	movs	r3, #12
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a4:	b01d      	add	sp, #116	@ 0x74
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	2340      	movs	r3, #64	@ 0x40
 800d5ac:	616b      	str	r3, [r5, #20]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5b2:	2320      	movs	r3, #32
 800d5b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5b8:	2330      	movs	r3, #48	@ 0x30
 800d5ba:	f04f 0901 	mov.w	r9, #1
 800d5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d75c <_svfiprintf_r+0x1e4>
 800d5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ca:	4623      	mov	r3, r4
 800d5cc:	469a      	mov	sl, r3
 800d5ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d2:	b10a      	cbz	r2, 800d5d8 <_svfiprintf_r+0x60>
 800d5d4:	2a25      	cmp	r2, #37	@ 0x25
 800d5d6:	d1f9      	bne.n	800d5cc <_svfiprintf_r+0x54>
 800d5d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d5dc:	d00b      	beq.n	800d5f6 <_svfiprintf_r+0x7e>
 800d5de:	465b      	mov	r3, fp
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f7ff ff6b 	bl	800d4c0 <__ssputs_r>
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	f000 80a7 	beq.w	800d73e <_svfiprintf_r+0x1c6>
 800d5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5f2:	445a      	add	r2, fp
 800d5f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 809f 	beq.w	800d73e <_svfiprintf_r+0x1c6>
 800d600:	2300      	movs	r3, #0
 800d602:	f04f 32ff 	mov.w	r2, #4294967295
 800d606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d60a:	f10a 0a01 	add.w	sl, sl, #1
 800d60e:	9304      	str	r3, [sp, #16]
 800d610:	9307      	str	r3, [sp, #28]
 800d612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d616:	931a      	str	r3, [sp, #104]	@ 0x68
 800d618:	4654      	mov	r4, sl
 800d61a:	2205      	movs	r2, #5
 800d61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d620:	484e      	ldr	r0, [pc, #312]	@ (800d75c <_svfiprintf_r+0x1e4>)
 800d622:	f000 fa61 	bl	800dae8 <memchr>
 800d626:	9a04      	ldr	r2, [sp, #16]
 800d628:	b9d8      	cbnz	r0, 800d662 <_svfiprintf_r+0xea>
 800d62a:	06d0      	lsls	r0, r2, #27
 800d62c:	bf44      	itt	mi
 800d62e:	2320      	movmi	r3, #32
 800d630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d634:	0711      	lsls	r1, r2, #28
 800d636:	bf44      	itt	mi
 800d638:	232b      	movmi	r3, #43	@ 0x2b
 800d63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d63e:	f89a 3000 	ldrb.w	r3, [sl]
 800d642:	2b2a      	cmp	r3, #42	@ 0x2a
 800d644:	d015      	beq.n	800d672 <_svfiprintf_r+0xfa>
 800d646:	4654      	mov	r4, sl
 800d648:	2000      	movs	r0, #0
 800d64a:	f04f 0c0a 	mov.w	ip, #10
 800d64e:	9a07      	ldr	r2, [sp, #28]
 800d650:	4621      	mov	r1, r4
 800d652:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d656:	3b30      	subs	r3, #48	@ 0x30
 800d658:	2b09      	cmp	r3, #9
 800d65a:	d94b      	bls.n	800d6f4 <_svfiprintf_r+0x17c>
 800d65c:	b1b0      	cbz	r0, 800d68c <_svfiprintf_r+0x114>
 800d65e:	9207      	str	r2, [sp, #28]
 800d660:	e014      	b.n	800d68c <_svfiprintf_r+0x114>
 800d662:	eba0 0308 	sub.w	r3, r0, r8
 800d666:	fa09 f303 	lsl.w	r3, r9, r3
 800d66a:	4313      	orrs	r3, r2
 800d66c:	46a2      	mov	sl, r4
 800d66e:	9304      	str	r3, [sp, #16]
 800d670:	e7d2      	b.n	800d618 <_svfiprintf_r+0xa0>
 800d672:	9b03      	ldr	r3, [sp, #12]
 800d674:	1d19      	adds	r1, r3, #4
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	9103      	str	r1, [sp, #12]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	bfbb      	ittet	lt
 800d67e:	425b      	neglt	r3, r3
 800d680:	f042 0202 	orrlt.w	r2, r2, #2
 800d684:	9307      	strge	r3, [sp, #28]
 800d686:	9307      	strlt	r3, [sp, #28]
 800d688:	bfb8      	it	lt
 800d68a:	9204      	strlt	r2, [sp, #16]
 800d68c:	7823      	ldrb	r3, [r4, #0]
 800d68e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d690:	d10a      	bne.n	800d6a8 <_svfiprintf_r+0x130>
 800d692:	7863      	ldrb	r3, [r4, #1]
 800d694:	2b2a      	cmp	r3, #42	@ 0x2a
 800d696:	d132      	bne.n	800d6fe <_svfiprintf_r+0x186>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	3402      	adds	r4, #2
 800d69c:	1d1a      	adds	r2, r3, #4
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	9203      	str	r2, [sp, #12]
 800d6a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6a6:	9305      	str	r3, [sp, #20]
 800d6a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d760 <_svfiprintf_r+0x1e8>
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	7821      	ldrb	r1, [r4, #0]
 800d6b2:	f000 fa19 	bl	800dae8 <memchr>
 800d6b6:	b138      	cbz	r0, 800d6c8 <_svfiprintf_r+0x150>
 800d6b8:	2240      	movs	r2, #64	@ 0x40
 800d6ba:	9b04      	ldr	r3, [sp, #16]
 800d6bc:	eba0 000a 	sub.w	r0, r0, sl
 800d6c0:	4082      	lsls	r2, r0
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	3401      	adds	r4, #1
 800d6c6:	9304      	str	r3, [sp, #16]
 800d6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6cc:	2206      	movs	r2, #6
 800d6ce:	4825      	ldr	r0, [pc, #148]	@ (800d764 <_svfiprintf_r+0x1ec>)
 800d6d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6d4:	f000 fa08 	bl	800dae8 <memchr>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d036      	beq.n	800d74a <_svfiprintf_r+0x1d2>
 800d6dc:	4b22      	ldr	r3, [pc, #136]	@ (800d768 <_svfiprintf_r+0x1f0>)
 800d6de:	bb1b      	cbnz	r3, 800d728 <_svfiprintf_r+0x1b0>
 800d6e0:	9b03      	ldr	r3, [sp, #12]
 800d6e2:	3307      	adds	r3, #7
 800d6e4:	f023 0307 	bic.w	r3, r3, #7
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	9303      	str	r3, [sp, #12]
 800d6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ee:	4433      	add	r3, r6
 800d6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f2:	e76a      	b.n	800d5ca <_svfiprintf_r+0x52>
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6fc:	e7a8      	b.n	800d650 <_svfiprintf_r+0xd8>
 800d6fe:	2300      	movs	r3, #0
 800d700:	f04f 0c0a 	mov.w	ip, #10
 800d704:	4619      	mov	r1, r3
 800d706:	3401      	adds	r4, #1
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	4620      	mov	r0, r4
 800d70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d710:	3a30      	subs	r2, #48	@ 0x30
 800d712:	2a09      	cmp	r2, #9
 800d714:	d903      	bls.n	800d71e <_svfiprintf_r+0x1a6>
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0c6      	beq.n	800d6a8 <_svfiprintf_r+0x130>
 800d71a:	9105      	str	r1, [sp, #20]
 800d71c:	e7c4      	b.n	800d6a8 <_svfiprintf_r+0x130>
 800d71e:	4604      	mov	r4, r0
 800d720:	2301      	movs	r3, #1
 800d722:	fb0c 2101 	mla	r1, ip, r1, r2
 800d726:	e7f0      	b.n	800d70a <_svfiprintf_r+0x192>
 800d728:	ab03      	add	r3, sp, #12
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	462a      	mov	r2, r5
 800d72e:	4638      	mov	r0, r7
 800d730:	4b0e      	ldr	r3, [pc, #56]	@ (800d76c <_svfiprintf_r+0x1f4>)
 800d732:	a904      	add	r1, sp, #16
 800d734:	f3af 8000 	nop.w
 800d738:	1c42      	adds	r2, r0, #1
 800d73a:	4606      	mov	r6, r0
 800d73c:	d1d6      	bne.n	800d6ec <_svfiprintf_r+0x174>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	065b      	lsls	r3, r3, #25
 800d742:	f53f af2d 	bmi.w	800d5a0 <_svfiprintf_r+0x28>
 800d746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d748:	e72c      	b.n	800d5a4 <_svfiprintf_r+0x2c>
 800d74a:	ab03      	add	r3, sp, #12
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	462a      	mov	r2, r5
 800d750:	4638      	mov	r0, r7
 800d752:	4b06      	ldr	r3, [pc, #24]	@ (800d76c <_svfiprintf_r+0x1f4>)
 800d754:	a904      	add	r1, sp, #16
 800d756:	f000 f87d 	bl	800d854 <_printf_i>
 800d75a:	e7ed      	b.n	800d738 <_svfiprintf_r+0x1c0>
 800d75c:	0800e4ac 	.word	0x0800e4ac
 800d760:	0800e4b2 	.word	0x0800e4b2
 800d764:	0800e4b6 	.word	0x0800e4b6
 800d768:	00000000 	.word	0x00000000
 800d76c:	0800d4c1 	.word	0x0800d4c1

0800d770 <_printf_common>:
 800d770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	4616      	mov	r6, r2
 800d776:	4698      	mov	r8, r3
 800d778:	688a      	ldr	r2, [r1, #8]
 800d77a:	690b      	ldr	r3, [r1, #16]
 800d77c:	4607      	mov	r7, r0
 800d77e:	4293      	cmp	r3, r2
 800d780:	bfb8      	it	lt
 800d782:	4613      	movlt	r3, r2
 800d784:	6033      	str	r3, [r6, #0]
 800d786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d78a:	460c      	mov	r4, r1
 800d78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d790:	b10a      	cbz	r2, 800d796 <_printf_common+0x26>
 800d792:	3301      	adds	r3, #1
 800d794:	6033      	str	r3, [r6, #0]
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	0699      	lsls	r1, r3, #26
 800d79a:	bf42      	ittt	mi
 800d79c:	6833      	ldrmi	r3, [r6, #0]
 800d79e:	3302      	addmi	r3, #2
 800d7a0:	6033      	strmi	r3, [r6, #0]
 800d7a2:	6825      	ldr	r5, [r4, #0]
 800d7a4:	f015 0506 	ands.w	r5, r5, #6
 800d7a8:	d106      	bne.n	800d7b8 <_printf_common+0x48>
 800d7aa:	f104 0a19 	add.w	sl, r4, #25
 800d7ae:	68e3      	ldr	r3, [r4, #12]
 800d7b0:	6832      	ldr	r2, [r6, #0]
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	42ab      	cmp	r3, r5
 800d7b6:	dc2b      	bgt.n	800d810 <_printf_common+0xa0>
 800d7b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7bc:	6822      	ldr	r2, [r4, #0]
 800d7be:	3b00      	subs	r3, #0
 800d7c0:	bf18      	it	ne
 800d7c2:	2301      	movne	r3, #1
 800d7c4:	0692      	lsls	r2, r2, #26
 800d7c6:	d430      	bmi.n	800d82a <_printf_common+0xba>
 800d7c8:	4641      	mov	r1, r8
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7d0:	47c8      	blx	r9
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	d023      	beq.n	800d81e <_printf_common+0xae>
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	6922      	ldr	r2, [r4, #16]
 800d7da:	f003 0306 	and.w	r3, r3, #6
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	bf14      	ite	ne
 800d7e2:	2500      	movne	r5, #0
 800d7e4:	6833      	ldreq	r3, [r6, #0]
 800d7e6:	f04f 0600 	mov.w	r6, #0
 800d7ea:	bf08      	it	eq
 800d7ec:	68e5      	ldreq	r5, [r4, #12]
 800d7ee:	f104 041a 	add.w	r4, r4, #26
 800d7f2:	bf08      	it	eq
 800d7f4:	1aed      	subeq	r5, r5, r3
 800d7f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d7fa:	bf08      	it	eq
 800d7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d800:	4293      	cmp	r3, r2
 800d802:	bfc4      	itt	gt
 800d804:	1a9b      	subgt	r3, r3, r2
 800d806:	18ed      	addgt	r5, r5, r3
 800d808:	42b5      	cmp	r5, r6
 800d80a:	d11a      	bne.n	800d842 <_printf_common+0xd2>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e008      	b.n	800d822 <_printf_common+0xb2>
 800d810:	2301      	movs	r3, #1
 800d812:	4652      	mov	r2, sl
 800d814:	4641      	mov	r1, r8
 800d816:	4638      	mov	r0, r7
 800d818:	47c8      	blx	r9
 800d81a:	3001      	adds	r0, #1
 800d81c:	d103      	bne.n	800d826 <_printf_common+0xb6>
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d826:	3501      	adds	r5, #1
 800d828:	e7c1      	b.n	800d7ae <_printf_common+0x3e>
 800d82a:	2030      	movs	r0, #48	@ 0x30
 800d82c:	18e1      	adds	r1, r4, r3
 800d82e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d838:	4422      	add	r2, r4
 800d83a:	3302      	adds	r3, #2
 800d83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d840:	e7c2      	b.n	800d7c8 <_printf_common+0x58>
 800d842:	2301      	movs	r3, #1
 800d844:	4622      	mov	r2, r4
 800d846:	4641      	mov	r1, r8
 800d848:	4638      	mov	r0, r7
 800d84a:	47c8      	blx	r9
 800d84c:	3001      	adds	r0, #1
 800d84e:	d0e6      	beq.n	800d81e <_printf_common+0xae>
 800d850:	3601      	adds	r6, #1
 800d852:	e7d9      	b.n	800d808 <_printf_common+0x98>

0800d854 <_printf_i>:
 800d854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	7e0f      	ldrb	r7, [r1, #24]
 800d85a:	4691      	mov	r9, r2
 800d85c:	2f78      	cmp	r7, #120	@ 0x78
 800d85e:	4680      	mov	r8, r0
 800d860:	460c      	mov	r4, r1
 800d862:	469a      	mov	sl, r3
 800d864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d86a:	d807      	bhi.n	800d87c <_printf_i+0x28>
 800d86c:	2f62      	cmp	r7, #98	@ 0x62
 800d86e:	d80a      	bhi.n	800d886 <_printf_i+0x32>
 800d870:	2f00      	cmp	r7, #0
 800d872:	f000 80d3 	beq.w	800da1c <_printf_i+0x1c8>
 800d876:	2f58      	cmp	r7, #88	@ 0x58
 800d878:	f000 80ba 	beq.w	800d9f0 <_printf_i+0x19c>
 800d87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d884:	e03a      	b.n	800d8fc <_printf_i+0xa8>
 800d886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d88a:	2b15      	cmp	r3, #21
 800d88c:	d8f6      	bhi.n	800d87c <_printf_i+0x28>
 800d88e:	a101      	add	r1, pc, #4	@ (adr r1, 800d894 <_printf_i+0x40>)
 800d890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d894:	0800d8ed 	.word	0x0800d8ed
 800d898:	0800d901 	.word	0x0800d901
 800d89c:	0800d87d 	.word	0x0800d87d
 800d8a0:	0800d87d 	.word	0x0800d87d
 800d8a4:	0800d87d 	.word	0x0800d87d
 800d8a8:	0800d87d 	.word	0x0800d87d
 800d8ac:	0800d901 	.word	0x0800d901
 800d8b0:	0800d87d 	.word	0x0800d87d
 800d8b4:	0800d87d 	.word	0x0800d87d
 800d8b8:	0800d87d 	.word	0x0800d87d
 800d8bc:	0800d87d 	.word	0x0800d87d
 800d8c0:	0800da03 	.word	0x0800da03
 800d8c4:	0800d92b 	.word	0x0800d92b
 800d8c8:	0800d9bd 	.word	0x0800d9bd
 800d8cc:	0800d87d 	.word	0x0800d87d
 800d8d0:	0800d87d 	.word	0x0800d87d
 800d8d4:	0800da25 	.word	0x0800da25
 800d8d8:	0800d87d 	.word	0x0800d87d
 800d8dc:	0800d92b 	.word	0x0800d92b
 800d8e0:	0800d87d 	.word	0x0800d87d
 800d8e4:	0800d87d 	.word	0x0800d87d
 800d8e8:	0800d9c5 	.word	0x0800d9c5
 800d8ec:	6833      	ldr	r3, [r6, #0]
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	6032      	str	r2, [r6, #0]
 800d8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e09e      	b.n	800da3e <_printf_i+0x1ea>
 800d900:	6833      	ldr	r3, [r6, #0]
 800d902:	6820      	ldr	r0, [r4, #0]
 800d904:	1d19      	adds	r1, r3, #4
 800d906:	6031      	str	r1, [r6, #0]
 800d908:	0606      	lsls	r6, r0, #24
 800d90a:	d501      	bpl.n	800d910 <_printf_i+0xbc>
 800d90c:	681d      	ldr	r5, [r3, #0]
 800d90e:	e003      	b.n	800d918 <_printf_i+0xc4>
 800d910:	0645      	lsls	r5, r0, #25
 800d912:	d5fb      	bpl.n	800d90c <_printf_i+0xb8>
 800d914:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d918:	2d00      	cmp	r5, #0
 800d91a:	da03      	bge.n	800d924 <_printf_i+0xd0>
 800d91c:	232d      	movs	r3, #45	@ 0x2d
 800d91e:	426d      	negs	r5, r5
 800d920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d924:	230a      	movs	r3, #10
 800d926:	4859      	ldr	r0, [pc, #356]	@ (800da8c <_printf_i+0x238>)
 800d928:	e011      	b.n	800d94e <_printf_i+0xfa>
 800d92a:	6821      	ldr	r1, [r4, #0]
 800d92c:	6833      	ldr	r3, [r6, #0]
 800d92e:	0608      	lsls	r0, r1, #24
 800d930:	f853 5b04 	ldr.w	r5, [r3], #4
 800d934:	d402      	bmi.n	800d93c <_printf_i+0xe8>
 800d936:	0649      	lsls	r1, r1, #25
 800d938:	bf48      	it	mi
 800d93a:	b2ad      	uxthmi	r5, r5
 800d93c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d93e:	6033      	str	r3, [r6, #0]
 800d940:	bf14      	ite	ne
 800d942:	230a      	movne	r3, #10
 800d944:	2308      	moveq	r3, #8
 800d946:	4851      	ldr	r0, [pc, #324]	@ (800da8c <_printf_i+0x238>)
 800d948:	2100      	movs	r1, #0
 800d94a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d94e:	6866      	ldr	r6, [r4, #4]
 800d950:	2e00      	cmp	r6, #0
 800d952:	bfa8      	it	ge
 800d954:	6821      	ldrge	r1, [r4, #0]
 800d956:	60a6      	str	r6, [r4, #8]
 800d958:	bfa4      	itt	ge
 800d95a:	f021 0104 	bicge.w	r1, r1, #4
 800d95e:	6021      	strge	r1, [r4, #0]
 800d960:	b90d      	cbnz	r5, 800d966 <_printf_i+0x112>
 800d962:	2e00      	cmp	r6, #0
 800d964:	d04b      	beq.n	800d9fe <_printf_i+0x1aa>
 800d966:	4616      	mov	r6, r2
 800d968:	fbb5 f1f3 	udiv	r1, r5, r3
 800d96c:	fb03 5711 	mls	r7, r3, r1, r5
 800d970:	5dc7      	ldrb	r7, [r0, r7]
 800d972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d976:	462f      	mov	r7, r5
 800d978:	42bb      	cmp	r3, r7
 800d97a:	460d      	mov	r5, r1
 800d97c:	d9f4      	bls.n	800d968 <_printf_i+0x114>
 800d97e:	2b08      	cmp	r3, #8
 800d980:	d10b      	bne.n	800d99a <_printf_i+0x146>
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	07df      	lsls	r7, r3, #31
 800d986:	d508      	bpl.n	800d99a <_printf_i+0x146>
 800d988:	6923      	ldr	r3, [r4, #16]
 800d98a:	6861      	ldr	r1, [r4, #4]
 800d98c:	4299      	cmp	r1, r3
 800d98e:	bfde      	ittt	le
 800d990:	2330      	movle	r3, #48	@ 0x30
 800d992:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d99a:	1b92      	subs	r2, r2, r6
 800d99c:	6122      	str	r2, [r4, #16]
 800d99e:	464b      	mov	r3, r9
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f8cd a000 	str.w	sl, [sp]
 800d9a8:	aa03      	add	r2, sp, #12
 800d9aa:	f7ff fee1 	bl	800d770 <_printf_common>
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d14a      	bne.n	800da48 <_printf_i+0x1f4>
 800d9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b6:	b004      	add	sp, #16
 800d9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	f043 0320 	orr.w	r3, r3, #32
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	2778      	movs	r7, #120	@ 0x78
 800d9c6:	4832      	ldr	r0, [pc, #200]	@ (800da90 <_printf_i+0x23c>)
 800d9c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	6831      	ldr	r1, [r6, #0]
 800d9d0:	061f      	lsls	r7, r3, #24
 800d9d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9d6:	d402      	bmi.n	800d9de <_printf_i+0x18a>
 800d9d8:	065f      	lsls	r7, r3, #25
 800d9da:	bf48      	it	mi
 800d9dc:	b2ad      	uxthmi	r5, r5
 800d9de:	6031      	str	r1, [r6, #0]
 800d9e0:	07d9      	lsls	r1, r3, #31
 800d9e2:	bf44      	itt	mi
 800d9e4:	f043 0320 	orrmi.w	r3, r3, #32
 800d9e8:	6023      	strmi	r3, [r4, #0]
 800d9ea:	b11d      	cbz	r5, 800d9f4 <_printf_i+0x1a0>
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	e7ab      	b.n	800d948 <_printf_i+0xf4>
 800d9f0:	4826      	ldr	r0, [pc, #152]	@ (800da8c <_printf_i+0x238>)
 800d9f2:	e7e9      	b.n	800d9c8 <_printf_i+0x174>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	f023 0320 	bic.w	r3, r3, #32
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	e7f6      	b.n	800d9ec <_printf_i+0x198>
 800d9fe:	4616      	mov	r6, r2
 800da00:	e7bd      	b.n	800d97e <_printf_i+0x12a>
 800da02:	6833      	ldr	r3, [r6, #0]
 800da04:	6825      	ldr	r5, [r4, #0]
 800da06:	1d18      	adds	r0, r3, #4
 800da08:	6961      	ldr	r1, [r4, #20]
 800da0a:	6030      	str	r0, [r6, #0]
 800da0c:	062e      	lsls	r6, r5, #24
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	d501      	bpl.n	800da16 <_printf_i+0x1c2>
 800da12:	6019      	str	r1, [r3, #0]
 800da14:	e002      	b.n	800da1c <_printf_i+0x1c8>
 800da16:	0668      	lsls	r0, r5, #25
 800da18:	d5fb      	bpl.n	800da12 <_printf_i+0x1be>
 800da1a:	8019      	strh	r1, [r3, #0]
 800da1c:	2300      	movs	r3, #0
 800da1e:	4616      	mov	r6, r2
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	e7bc      	b.n	800d99e <_printf_i+0x14a>
 800da24:	6833      	ldr	r3, [r6, #0]
 800da26:	2100      	movs	r1, #0
 800da28:	1d1a      	adds	r2, r3, #4
 800da2a:	6032      	str	r2, [r6, #0]
 800da2c:	681e      	ldr	r6, [r3, #0]
 800da2e:	6862      	ldr	r2, [r4, #4]
 800da30:	4630      	mov	r0, r6
 800da32:	f000 f859 	bl	800dae8 <memchr>
 800da36:	b108      	cbz	r0, 800da3c <_printf_i+0x1e8>
 800da38:	1b80      	subs	r0, r0, r6
 800da3a:	6060      	str	r0, [r4, #4]
 800da3c:	6863      	ldr	r3, [r4, #4]
 800da3e:	6123      	str	r3, [r4, #16]
 800da40:	2300      	movs	r3, #0
 800da42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da46:	e7aa      	b.n	800d99e <_printf_i+0x14a>
 800da48:	4632      	mov	r2, r6
 800da4a:	4649      	mov	r1, r9
 800da4c:	4640      	mov	r0, r8
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	47d0      	blx	sl
 800da52:	3001      	adds	r0, #1
 800da54:	d0ad      	beq.n	800d9b2 <_printf_i+0x15e>
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	079b      	lsls	r3, r3, #30
 800da5a:	d413      	bmi.n	800da84 <_printf_i+0x230>
 800da5c:	68e0      	ldr	r0, [r4, #12]
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	4298      	cmp	r0, r3
 800da62:	bfb8      	it	lt
 800da64:	4618      	movlt	r0, r3
 800da66:	e7a6      	b.n	800d9b6 <_printf_i+0x162>
 800da68:	2301      	movs	r3, #1
 800da6a:	4632      	mov	r2, r6
 800da6c:	4649      	mov	r1, r9
 800da6e:	4640      	mov	r0, r8
 800da70:	47d0      	blx	sl
 800da72:	3001      	adds	r0, #1
 800da74:	d09d      	beq.n	800d9b2 <_printf_i+0x15e>
 800da76:	3501      	adds	r5, #1
 800da78:	68e3      	ldr	r3, [r4, #12]
 800da7a:	9903      	ldr	r1, [sp, #12]
 800da7c:	1a5b      	subs	r3, r3, r1
 800da7e:	42ab      	cmp	r3, r5
 800da80:	dcf2      	bgt.n	800da68 <_printf_i+0x214>
 800da82:	e7eb      	b.n	800da5c <_printf_i+0x208>
 800da84:	2500      	movs	r5, #0
 800da86:	f104 0619 	add.w	r6, r4, #25
 800da8a:	e7f5      	b.n	800da78 <_printf_i+0x224>
 800da8c:	0800e4bd 	.word	0x0800e4bd
 800da90:	0800e4ce 	.word	0x0800e4ce

0800da94 <memmove>:
 800da94:	4288      	cmp	r0, r1
 800da96:	b510      	push	{r4, lr}
 800da98:	eb01 0402 	add.w	r4, r1, r2
 800da9c:	d902      	bls.n	800daa4 <memmove+0x10>
 800da9e:	4284      	cmp	r4, r0
 800daa0:	4623      	mov	r3, r4
 800daa2:	d807      	bhi.n	800dab4 <memmove+0x20>
 800daa4:	1e43      	subs	r3, r0, #1
 800daa6:	42a1      	cmp	r1, r4
 800daa8:	d008      	beq.n	800dabc <memmove+0x28>
 800daaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dab2:	e7f8      	b.n	800daa6 <memmove+0x12>
 800dab4:	4601      	mov	r1, r0
 800dab6:	4402      	add	r2, r0
 800dab8:	428a      	cmp	r2, r1
 800daba:	d100      	bne.n	800dabe <memmove+0x2a>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dac6:	e7f7      	b.n	800dab8 <memmove+0x24>

0800dac8 <_sbrk_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	2300      	movs	r3, #0
 800dacc:	4d05      	ldr	r5, [pc, #20]	@ (800dae4 <_sbrk_r+0x1c>)
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	602b      	str	r3, [r5, #0]
 800dad4:	f7f6 fcbc 	bl	8004450 <_sbrk>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_sbrk_r+0x1a>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_sbrk_r+0x1a>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	20001714 	.word	0x20001714

0800dae8 <memchr>:
 800dae8:	4603      	mov	r3, r0
 800daea:	b510      	push	{r4, lr}
 800daec:	b2c9      	uxtb	r1, r1
 800daee:	4402      	add	r2, r0
 800daf0:	4293      	cmp	r3, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	d101      	bne.n	800dafa <memchr+0x12>
 800daf6:	2000      	movs	r0, #0
 800daf8:	e003      	b.n	800db02 <memchr+0x1a>
 800dafa:	7804      	ldrb	r4, [r0, #0]
 800dafc:	3301      	adds	r3, #1
 800dafe:	428c      	cmp	r4, r1
 800db00:	d1f6      	bne.n	800daf0 <memchr+0x8>
 800db02:	bd10      	pop	{r4, pc}

0800db04 <_realloc_r>:
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	4680      	mov	r8, r0
 800db0a:	4615      	mov	r5, r2
 800db0c:	460c      	mov	r4, r1
 800db0e:	b921      	cbnz	r1, 800db1a <_realloc_r+0x16>
 800db10:	4611      	mov	r1, r2
 800db12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db16:	f7ff bc47 	b.w	800d3a8 <_malloc_r>
 800db1a:	b92a      	cbnz	r2, 800db28 <_realloc_r+0x24>
 800db1c:	f7ff fbda 	bl	800d2d4 <_free_r>
 800db20:	2400      	movs	r4, #0
 800db22:	4620      	mov	r0, r4
 800db24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db28:	f000 f81a 	bl	800db60 <_malloc_usable_size_r>
 800db2c:	4285      	cmp	r5, r0
 800db2e:	4606      	mov	r6, r0
 800db30:	d802      	bhi.n	800db38 <_realloc_r+0x34>
 800db32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db36:	d8f4      	bhi.n	800db22 <_realloc_r+0x1e>
 800db38:	4629      	mov	r1, r5
 800db3a:	4640      	mov	r0, r8
 800db3c:	f7ff fc34 	bl	800d3a8 <_malloc_r>
 800db40:	4607      	mov	r7, r0
 800db42:	2800      	cmp	r0, #0
 800db44:	d0ec      	beq.n	800db20 <_realloc_r+0x1c>
 800db46:	42b5      	cmp	r5, r6
 800db48:	462a      	mov	r2, r5
 800db4a:	4621      	mov	r1, r4
 800db4c:	bf28      	it	cs
 800db4e:	4632      	movcs	r2, r6
 800db50:	f7ff fbb2 	bl	800d2b8 <memcpy>
 800db54:	4621      	mov	r1, r4
 800db56:	4640      	mov	r0, r8
 800db58:	f7ff fbbc 	bl	800d2d4 <_free_r>
 800db5c:	463c      	mov	r4, r7
 800db5e:	e7e0      	b.n	800db22 <_realloc_r+0x1e>

0800db60 <_malloc_usable_size_r>:
 800db60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db64:	1f18      	subs	r0, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	bfbc      	itt	lt
 800db6a:	580b      	ldrlt	r3, [r1, r0]
 800db6c:	18c0      	addlt	r0, r0, r3
 800db6e:	4770      	bx	lr

0800db70 <_init>:
 800db70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db72:	bf00      	nop
 800db74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db76:	bc08      	pop	{r3}
 800db78:	469e      	mov	lr, r3
 800db7a:	4770      	bx	lr

0800db7c <_fini>:
 800db7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7e:	bf00      	nop
 800db80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db82:	bc08      	pop	{r3}
 800db84:	469e      	mov	lr, r3
 800db86:	4770      	bx	lr

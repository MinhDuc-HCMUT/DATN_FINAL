
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  0800d9b4  0800d9b4  0000e9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e444  0800e444  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e444  0800e444  0000f444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e44c  0800e44c  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e44c  0800e44c  0000f44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e450  0800e450  0000f450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e454  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e648  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e648  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9db  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048cc  00000000  00000000  0002abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0002f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cf  00000000  00000000  00030fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  00032487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002108a  00000000  00000000  0004ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a6b  00000000  00000000  0006fc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001046d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007688  00000000  00000000  00104718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d99c 	.word	0x0800d99c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d99c 	.word	0x0800d99c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 f88d 	bl	800428c <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f004 fe82 	bl	8004f24 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fa3a 	bl	80048f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fbc9 	bl	8004c26 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fa0f 	bl	80048f0 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e2e8 	.word	0x0800e2e8
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e2f0 	.word	0x0800e2f0
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fb7c 	bl	8004c26 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fb68 	bl	8004c26 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f003 fe98 	bl	800428c <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fb3f 	bl	8004bf8 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f003 fe83 	bl	800428c <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fb2d 	bl	8004bf8 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f003 fe5b 	bl	800428c <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fb05 	bl	8004bf8 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e2e8 	.word	0x0800e2e8
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e2f0 	.word	0x0800e2f0

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f003 fe16 	bl	800428c <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f003 fe07 	bl	8004278 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f003 fe00 	bl	800428c <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f003 fdf4 	bl	8004278 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f007 fdf3 	bl	8008412 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f007 fe70 	bl	8008536 <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f007 fe51 	bl	8008536 <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f007 fe36 	bl	8008536 <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b68:	20ef      	movs	r0, #239	@ 0xef
 8000b6a:	f7ff fe53 	bl	8000814 <USART_SendByte>
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fe50 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b74:	20ff      	movs	r0, #255	@ 0xff
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x0D);
 8000b9e:	200d      	movs	r0, #13
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
 8000baa:	2011      	movs	r0, #17
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f7ff fe41 	bl	8000838 <receive_finger>
 8000bb6:	4603      	mov	r3, r0

}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3315      	adds	r3, #21
 8000bca:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bcc:	20ef      	movs	r0, #239	@ 0xef
 8000bce:	f7ff fe21 	bl	8000814 <USART_SendByte>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	f7ff fe1b 	bl	8000814 <USART_SendByte>
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	f7ff fe18 	bl	8000814 <USART_SendByte>
 8000be4:	20ff      	movs	r0, #255	@ 0xff
 8000be6:	f7ff fe15 	bl	8000814 <USART_SendByte>
 8000bea:	20ff      	movs	r0, #255	@ 0xff
 8000bec:	f7ff fe12 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fe0f 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe0c 	bl	8000814 <USART_SendByte>
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f7ff fe09 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f7ff fe06 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fe03 	bl	8000814 <USART_SendByte>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fdff 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdfc 	bl	8000814 <USART_SendByte>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff fdf9 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fdf6 	bl	8000814 <USART_SendByte>
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdf2 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000c30:	200c      	movs	r0, #12
 8000c32:	f7ff fe01 	bl	8000838 <receive_finger>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c48:	f003 fcc2 	bl	80045d0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fd9a 	bl	80047a0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c6c:	f003 fcd6 	bl	800461c <HAL_FLASH_Lock>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c84:	f003 fca4 	bl	80045d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	4615      	mov	r5, r2
 8000c90:	4622      	mov	r2, r4
 8000c92:	462b      	mov	r3, r5
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2001      	movs	r0, #1
 8000c98:	f003 fc2a 	bl	80044f0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c9c:	f003 fcbe 	bl	800461c <HAL_FLASH_Lock>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}

08000ca8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cb6:	f003 fc8b 	bl	80045d0 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	82fb      	strh	r3, [r7, #22]
 8000cbe:	e00c      	b.n	8000cda <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	18d0      	adds	r0, r2, r3
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ffd2 	bl	8000c78 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	82fb      	strh	r3, [r7, #22]
 8000cda:	8afa      	ldrh	r2, [r7, #22]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ee      	bcc.n	8000cc0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ce2:	f003 fc9b 	bl	800461c <HAL_FLASH_Lock>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <Flash_Read_Array>:
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
	return *(__IO uint64_t *)(address);
}
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d1e:	b480      	push	{r7}
 8000d20:	b087      	sub	sp, #28
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	82fb      	strh	r3, [r7, #22]
 8000d30:	e00c      	b.n	8000d4c <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d32:	8afa      	ldrh	r2, [r7, #22]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	8afb      	ldrh	r3, [r7, #22]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	780a      	ldrb	r2, [r1, #0]
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d46:	8afb      	ldrh	r3, [r7, #22]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	82fb      	strh	r3, [r7, #22]
 8000d4c:	8afa      	ldrh	r2, [r7, #22]
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d3ee      	bcc.n	8000d32 <Flash_Read_Array+0x14>
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d7c:	e002      	b.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000020 	.word	0x20000020

08000d94 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000d9a:	f7ff fda9 	bl	80008f0 <collect_finger>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <check_fingerprint_status+0x24>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
    }
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000040a 	.word	0x2000040a

08000dbc <process_fingerprint>:
void process_fingerprint()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <process_fingerprint+0x1c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <process_fingerprint+0x1c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dce:	f002 fa65 	bl	800329c <read_finger>
    }
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000040a 	.word	0x2000040a

08000ddc <InputID>:

uint8_t InputID(const char *prompt, uint8_t min, uint8_t max) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
 8000de8:	4613      	mov	r3, r2
 8000dea:	70bb      	strb	r3, [r7, #2]
    uint16_t id = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	83fb      	strh	r3, [r7, #30]
    char id_str[4] = {0};
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
    uint8_t index = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char display_prompt[16];
    snprintf(display_prompt, sizeof(display_prompt), "Enter ID (%d-%d):", min, max);
 8000dfa:	78fa      	ldrb	r2, [r7, #3]
 8000dfc:	78bb      	ldrb	r3, [r7, #2]
 8000dfe:	f107 0008 	add.w	r0, r7, #8
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <InputID+0x164>)
 8000e08:	2110      	movs	r1, #16
 8000e0a:	f00c f8e3 	bl	800cfd4 <sniprintf>
    CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4a4c      	ldr	r2, [pc, #304]	@ (8000f44 <InputID+0x168>)
 8000e14:	4619      	mov	r1, r3
 8000e16:	484c      	ldr	r0, [pc, #304]	@ (8000f48 <InputID+0x16c>)
 8000e18:	f7ff faf0 	bl	80003fc <CLCD_I2C_Display>
    uint32_t start_time = HAL_GetTick();
 8000e1c:	f003 fa2c 	bl	8004278 <HAL_GetTick>
 8000e20:	6238      	str	r0, [r7, #32]
    while (1) {
        if (HAL_GetTick() - start_time > 15000) { // 15 seconds timeout
 8000e22:	f003 fa29 	bl	8004278 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d910      	bls.n	8000e56 <InputID+0x7a>
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8000e34:	4a45      	ldr	r2, [pc, #276]	@ (8000f4c <InputID+0x170>)
 8000e36:	4946      	ldr	r1, [pc, #280]	@ (8000f50 <InputID+0x174>)
 8000e38:	4843      	ldr	r0, [pc, #268]	@ (8000f48 <InputID+0x16c>)
 8000e3a:	f7ff fadf 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8000e3e:	2005      	movs	r0, #5
 8000e40:	f002 fd16 	bl	8003870 <buzzer>
            HAL_Delay(2000);
 8000e44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e48:	f003 fa20 	bl	800428c <HAL_Delay>
            exitmenu = Delaymenu;
 8000e4c:	4b41      	ldr	r3, [pc, #260]	@ (8000f54 <InputID+0x178>)
 8000e4e:	2214      	movs	r2, #20
 8000e50:	701a      	strb	r2, [r3, #0]
            return 0; // Return 0 to indicate timeout
 8000e52:	2300      	movs	r3, #0
 8000e54:	e070      	b.n	8000f38 <InputID+0x15c>
        }
        char key = KeyPad_WaitForKeyGetChar(10);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f7ff fc2a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	777b      	strb	r3, [r7, #29]
        if (key >= '0' && key <= '9' && index < 3) {
 8000e60:	7f7b      	ldrb	r3, [r7, #29]
 8000e62:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e64:	d919      	bls.n	8000e9a <InputID+0xbe>
 8000e66:	7f7b      	ldrb	r3, [r7, #29]
 8000e68:	2b39      	cmp	r3, #57	@ 0x39
 8000e6a:	d816      	bhi.n	8000e9a <InputID+0xbe>
 8000e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d812      	bhi.n	8000e9a <InputID+0xbe>
            buzzer(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f002 fcfb 	bl	8003870 <buzzer>
            id_str[index++] = key;
 8000e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8000e84:	3328      	adds	r3, #40	@ 0x28
 8000e86:	443b      	add	r3, r7
 8000e88:	7f7a      	ldrb	r2, [r7, #29]
 8000e8a:	f803 2c10 	strb.w	r2, [r3, #-16]
            CLCD_I2C_WriteChar(&LCD1, key);
 8000e8e:	7f7b      	ldrb	r3, [r7, #29]
 8000e90:	4619      	mov	r1, r3
 8000e92:	482d      	ldr	r0, [pc, #180]	@ (8000f48 <InputID+0x16c>)
 8000e94:	f7ff fa7b 	bl	800038e <CLCD_I2C_WriteChar>
 8000e98:	e03c      	b.n	8000f14 <InputID+0x138>
        } else if (key == '#' && index > 0) {
 8000e9a:	7f7b      	ldrb	r3, [r7, #29]
 8000e9c:	2b23      	cmp	r3, #35	@ 0x23
 8000e9e:	d1c0      	bne.n	8000e22 <InputID+0x46>
 8000ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0bc      	beq.n	8000e22 <InputID+0x46>
            buzzer(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f002 fce1 	bl	8003870 <buzzer>
            id = atoi(id_str);
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00c f806 	bl	800cec4 <atoi>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	83fb      	strh	r3, [r7, #30]
            if (id >= min && id <= max) {
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	8bfa      	ldrh	r2, [r7, #30]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d304      	bcc.n	8000ed0 <InputID+0xf4>
 8000ec6:	78bb      	ldrb	r3, [r7, #2]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	8bfa      	ldrh	r2, [r7, #30]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d922      	bls.n	8000f16 <InputID+0x13a>
                break;
            } else {
                CLCD_I2C_Display(&LCD1, "Invalid ID", display_prompt);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4920      	ldr	r1, [pc, #128]	@ (8000f58 <InputID+0x17c>)
 8000ed8:	481b      	ldr	r0, [pc, #108]	@ (8000f48 <InputID+0x16c>)
 8000eda:	f7ff fa8f 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f002 fcc6 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8000ee4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ee8:	f003 f9d0 	bl	800428c <HAL_Delay>
                CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <InputID+0x168>)
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <InputID+0x16c>)
 8000ef6:	f7ff fa81 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	2204      	movs	r2, #4
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00c f8ba 	bl	800d07c <memset>
                index = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                start_time = HAL_GetTick(); // Reset the timer
 8000f0e:	f003 f9b3 	bl	8004278 <HAL_GetTick>
 8000f12:	6238      	str	r0, [r7, #32]
    while (1) {
 8000f14:	e785      	b.n	8000e22 <InputID+0x46>
            }
        }
    }
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2104      	movs	r1, #4
 8000f1a:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <InputID+0x16c>)
 8000f1c:	f7ff f9f4 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <InputID+0x16c>)
 8000f28:	f7ff fa41 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f30:	f003 f9ac 	bl	800428c <HAL_Delay>
    return id;
 8000f34:	8bfb      	ldrh	r3, [r7, #30]
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3728      	adds	r7, #40	@ 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	0800d9b4 	.word	0x0800d9b4
 8000f44:	0800d9c8 	.word	0x0800d9c8
 8000f48:	200003d8 	.word	0x200003d8
 8000f4c:	0800d9d0 	.word	0x0800d9d0
 8000f50:	0800d9dc 	.word	0x0800d9dc
 8000f54:	20000020 	.word	0x20000020
 8000f58:	0800d9e4 	.word	0x0800d9e4

08000f5c <InputID_ADMIN>:

uint8_t InputID_ADMIN() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    return InputID("Enter ID (1-28):", 1, 28);
 8000f60:	221c      	movs	r2, #28
 8000f62:	2101      	movs	r1, #1
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <InputID_ADMIN+0x14>)
 8000f66:	f7ff ff39 	bl	8000ddc <InputID>
 8000f6a:	4603      	mov	r3, r0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0800d9f0 	.word	0x0800d9f0

08000f74 <InputID_USER>:

uint8_t InputID_USER() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    return InputID("Enter ID (1-100):", 1, 100);
 8000f78:	2264      	movs	r2, #100	@ 0x64
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <InputID_USER+0x14>)
 8000f7e:	f7ff ff2d 	bl	8000ddc <InputID>
 8000f82:	4603      	mov	r3, r0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800da04 	.word	0x0800da04

08000f8c <InputID_FINGER>:

uint8_t InputID_FINGER() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    return InputID("Enter ID (1-127):", 1, 127);
 8000f90:	227f      	movs	r2, #127	@ 0x7f
 8000f92:	2101      	movs	r1, #1
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <InputID_FINGER+0x14>)
 8000f96:	f7ff ff21 	bl	8000ddc <InputID>
 8000f9a:	4603      	mov	r3, r0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	0800da18 	.word	0x0800da18

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	@ 0x40
 8000fa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f003 f90d 	bl	80041c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f9a7 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f000 fadd 	bl	8001570 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fb6:	f000 fa2d 	bl	8001414 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fba:	f000 f9fd 	bl	80013b8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fbe:	f000 faad 	bl	800151c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fc2:	f000 fa5d 	bl	8001480 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000fc6:	f00b fad3 	bl	800c570 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000fca:	f002 fca3 	bl	8003914 <TM_MFRC522_Init>
  KeyPad_Init();
 8000fce:	f7ff fa35 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	224e      	movs	r2, #78	@ 0x4e
 8000fda:	49b7      	ldr	r1, [pc, #732]	@ (80012b8 <main+0x314>)
 8000fdc:	48b7      	ldr	r0, [pc, #732]	@ (80012bc <main+0x318>)
 8000fde:	f7ff f923 	bl	8000228 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe8:	48b5      	ldr	r0, [pc, #724]	@ (80012c0 <main+0x31c>)
 8000fea:	f003 fe1c 	bl	8004c26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff4:	48b2      	ldr	r0, [pc, #712]	@ (80012c0 <main+0x31c>)
 8000ff6:	f003 fe16 	bl	8004c26 <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2100      	movs	r1, #0
 8001004:	460a      	mov	r2, r1
 8001006:	801a      	strh	r2, [r3, #0]
 8001008:	460a      	mov	r2, r1
 800100a:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	2206      	movs	r2, #6
 8001012:	4619      	mov	r1, r3
 8001014:	48ab      	ldr	r0, [pc, #684]	@ (80012c4 <main+0x320>)
 8001016:	f7ff fe82 	bl	8000d1e <Flash_Read_Array>
  stored_password[6] = '\0';
 800101a:	2300      	movs	r3, #0
 800101c:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
 8001026:	e00c      	b.n	8001042 <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8001028:	f107 0218 	add.w	r2, r7, #24
 800102c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2bff      	cmp	r3, #255	@ 0xff
 8001034:	d002      	beq.n	800103c <main+0x98>
          is_empty = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800103a:	e005      	b.n	8001048 <main+0xa4>
  for (int i = 0; i < 6; i++) {
 800103c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103e:	3301      	adds	r3, #1
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
 8001042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001044:	2b05      	cmp	r3, #5
 8001046:	ddef      	ble.n	8001028 <main+0x84>
      }
  }
  if (is_empty) {
 8001048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <main+0xae>
      set_default_password();
 800104e:	f002 fb7f 	bl	8003750 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001052:	489d      	ldr	r0, [pc, #628]	@ (80012c8 <main+0x324>)
 8001054:	f006 fde6 	bl	8007c24 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8001058:	f000 ff28 	bl	8001eac <checkcountUID>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <main+0xc2>
  {
      startadd();
 8001062:	f001 fd9b 	bl	8002b9c <startadd>
  }
  int incorrect_attempts = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 800106a:	4894      	ldr	r0, [pc, #592]	@ (80012bc <main+0x318>)
 800106c:	f7ff f9b6 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	4891      	ldr	r0, [pc, #580]	@ (80012bc <main+0x318>)
 8001076:	f7ff f947 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 800107a:	4994      	ldr	r1, [pc, #592]	@ (80012cc <main+0x328>)
 800107c:	488f      	ldr	r0, [pc, #572]	@ (80012bc <main+0x318>)
 800107e:	f7ff f996 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đ���n khi có phím nhấn.
 8001082:	200a      	movs	r0, #10
 8001084:	f7ff fb14 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 800108e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001092:	2b23      	cmp	r3, #35	@ 0x23
 8001094:	d166      	bne.n	8001164 <main+0x1c0>
    {
    	buzzer(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f002 fbea 	bl	8003870 <buzzer>
        char entered_password[7] = {0};
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2100      	movs	r1, #0
 80010a6:	460a      	mov	r2, r1
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	460a      	mov	r2, r1
 80010ac:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 80010ae:	4a88      	ldr	r2, [pc, #544]	@ (80012d0 <main+0x32c>)
 80010b0:	4988      	ldr	r1, [pc, #544]	@ (80012d4 <main+0x330>)
 80010b2:	4882      	ldr	r0, [pc, #520]	@ (80012bc <main+0x318>)
 80010b4:	f7ff f9a2 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fab3 	bl	8003628 <enter_password>
        if (check_password(entered_password)) {
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fb1a 	bl	8003700 <check_password>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 80010d2:	4a7f      	ldr	r2, [pc, #508]	@ (80012d0 <main+0x32c>)
 80010d4:	4980      	ldr	r1, [pc, #512]	@ (80012d8 <main+0x334>)
 80010d6:	4879      	ldr	r0, [pc, #484]	@ (80012bc <main+0x318>)
 80010d8:	f7ff f990 	bl	80003fc <CLCD_I2C_Display>
            opendoor();
 80010dc:	f002 fb78 	bl	80037d0 <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e4:	e036      	b.n	8001154 <main+0x1b0>
        } else {
            incorrect_attempts++;
 80010e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e8:	3301      	adds	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 80010ec:	4a78      	ldr	r2, [pc, #480]	@ (80012d0 <main+0x32c>)
 80010ee:	497b      	ldr	r1, [pc, #492]	@ (80012dc <main+0x338>)
 80010f0:	4872      	ldr	r0, [pc, #456]	@ (80012bc <main+0x318>)
 80010f2:	f7ff f983 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 80010f6:	2005      	movs	r0, #5
 80010f8:	f002 fbba 	bl	8003870 <buzzer>
            int delay_time = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8001100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <main+0x168>
                delay_time = 5;
 8001106:	2305      	movs	r3, #5
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800110a:	e00a      	b.n	8001122 <main+0x17e>
            } else if (incorrect_attempts == 2) {
 800110c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110e:	2b02      	cmp	r3, #2
 8001110:	d102      	bne.n	8001118 <main+0x174>
                delay_time = 10;
 8001112:	230a      	movs	r3, #10
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001116:	e004      	b.n	8001122 <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8001118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111a:	2b02      	cmp	r3, #2
 800111c:	dd01      	ble.n	8001122 <main+0x17e>
                delay_time = 20;
 800111e:	2314      	movs	r3, #20
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
 8001126:	e012      	b.n	800114e <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8001128:	4638      	mov	r0, r7
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	4a6c      	ldr	r2, [pc, #432]	@ (80012e0 <main+0x33c>)
 800112e:	2110      	movs	r1, #16
 8001130:	f00b ff50 	bl	800cfd4 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8001134:	463b      	mov	r3, r7
 8001136:	4a6b      	ldr	r2, [pc, #428]	@ (80012e4 <main+0x340>)
 8001138:	4619      	mov	r1, r3
 800113a:	4860      	ldr	r0, [pc, #384]	@ (80012bc <main+0x318>)
 800113c:	f7ff f95e 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001144:	f003 f8a2 	bl	800428c <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	3b01      	subs	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	dce9      	bgt.n	8001128 <main+0x184>
            }
        }
        HAL_Delay(2000);
 8001154:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001158:	f003 f898 	bl	800428c <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 800115c:	4857      	ldr	r0, [pc, #348]	@ (80012bc <main+0x318>)
 800115e:	f7ff f93d 	bl	80003dc <CLCD_I2C_Clear>
 8001162:	e0a3      	b.n	80012ac <main+0x308>
    }
    else if (selected_key != 0)
 8001164:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001168:	2b00      	cmp	r3, #0
 800116a:	d067      	beq.n	800123c <main+0x298>
    {
    	buzzer(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f002 fb7f 	bl	8003870 <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8001172:	2300      	movs	r3, #0
 8001174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8001178:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <main+0x344>)
 800117a:	220f      	movs	r2, #15
 800117c:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 800117e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001182:	3b41      	subs	r3, #65	@ 0x41
 8001184:	2b03      	cmp	r3, #3
 8001186:	f200 8090 	bhi.w	80012aa <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	2100      	movs	r1, #0
 800118e:	484b      	ldr	r0, [pc, #300]	@ (80012bc <main+0x318>)
 8001190:	f7ff f8ba 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8001194:	4955      	ldr	r1, [pc, #340]	@ (80012ec <main+0x348>)
 8001196:	4849      	ldr	r0, [pc, #292]	@ (80012bc <main+0x318>)
 8001198:	f7ff f909 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 800119c:	e011      	b.n	80011c2 <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 800119e:	4854      	ldr	r0, [pc, #336]	@ (80012f0 <main+0x34c>)
 80011a0:	f002 fbdc 	bl	800395c <TM_MFRC522_Check>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10b      	bne.n	80011c2 <main+0x21e>
                {
                    key = CheckListUID(CardID);
 80011aa:	4851      	ldr	r0, [pc, #324]	@ (80012f0 <main+0x34c>)
 80011ac:	f000 fe4e 	bl	8001e4c <CheckListUID>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 7;
 80011b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ba:	09db      	lsrs	r3, r3, #7
 80011bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 80011c0:	e003      	b.n	80011ca <main+0x226>
            while (exitmenu)
 80011c2:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <main+0x344>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1e9      	bne.n	800119e <main+0x1fa>
                }
            }

            switch (key)
 80011ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11b      	bne.n	800120a <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 80011d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011d6:	2b41      	cmp	r3, #65	@ 0x41
 80011d8:	d102      	bne.n	80011e0 <main+0x23c>
                    RFID();
 80011da:	f000 fa9b 	bl	8001714 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 80011de:	e02b      	b.n	8001238 <main+0x294>
                else if (selected_key == 'B')
 80011e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011e4:	2b42      	cmp	r3, #66	@ 0x42
 80011e6:	d102      	bne.n	80011ee <main+0x24a>
                    FACEID();
 80011e8:	f000 ffd4 	bl	8002194 <FACEID>
                break;
 80011ec:	e024      	b.n	8001238 <main+0x294>
                else if (selected_key == 'C')
 80011ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011f2:	2b43      	cmp	r3, #67	@ 0x43
 80011f4:	d102      	bne.n	80011fc <main+0x258>
                    FINGER();
 80011f6:	f001 fb87 	bl	8002908 <FINGER>
                break;
 80011fa:	e01d      	b.n	8001238 <main+0x294>
                else if (selected_key == 'D')
 80011fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001200:	2b44      	cmp	r3, #68	@ 0x44
 8001202:	d119      	bne.n	8001238 <main+0x294>
                    PASSWORD();
 8001204:	f001 fc14 	bl	8002a30 <PASSWORD>
                break;
 8001208:	e016      	b.n	8001238 <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 800120a:	482c      	ldr	r0, [pc, #176]	@ (80012bc <main+0x318>)
 800120c:	f7ff f8e6 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	4829      	ldr	r0, [pc, #164]	@ (80012bc <main+0x318>)
 8001216:	f7ff f877 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 800121a:	4936      	ldr	r1, [pc, #216]	@ (80012f4 <main+0x350>)
 800121c:	4827      	ldr	r0, [pc, #156]	@ (80012bc <main+0x318>)
 800121e:	f7ff f8c6 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(5);
 8001222:	2005      	movs	r0, #5
 8001224:	f002 fb24 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8001228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800122c:	f003 f82e 	bl	800428c <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001230:	4822      	ldr	r0, [pc, #136]	@ (80012bc <main+0x318>)
 8001232:	f7ff f8d3 	bl	80003dc <CLCD_I2C_Clear>
                break;
 8001236:	e000      	b.n	800123a <main+0x296>
                break;
 8001238:	bf00      	nop
            }
            break;
 800123a:	e037      	b.n	80012ac <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 800123c:	482c      	ldr	r0, [pc, #176]	@ (80012f0 <main+0x34c>)
 800123e:	f002 fb8d 	bl	800395c <TM_MFRC522_Check>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d128      	bne.n	800129a <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 8001248:	4829      	ldr	r0, [pc, #164]	@ (80012f0 <main+0x34c>)
 800124a:	f000 fdff 	bl	8001e4c <CheckListUID>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00e      	beq.n	8001272 <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 8001254:	4819      	ldr	r0, [pc, #100]	@ (80012bc <main+0x318>)
 8001256:	f7ff f8c1 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <main+0x318>)
 8001260:	f7ff f852 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8001264:	491c      	ldr	r1, [pc, #112]	@ (80012d8 <main+0x334>)
 8001266:	4815      	ldr	r0, [pc, #84]	@ (80012bc <main+0x318>)
 8001268:	f7ff f8a1 	bl	80003ae <CLCD_I2C_WriteString>
            opendoor();
 800126c:	f002 fab0 	bl	80037d0 <opendoor>
 8001270:	e01c      	b.n	80012ac <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 8001272:	4812      	ldr	r0, [pc, #72]	@ (80012bc <main+0x318>)
 8001274:	f7ff f8b2 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	480f      	ldr	r0, [pc, #60]	@ (80012bc <main+0x318>)
 800127e:	f7ff f843 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 8001282:	491d      	ldr	r1, [pc, #116]	@ (80012f8 <main+0x354>)
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <main+0x318>)
 8001286:	f7ff f892 	bl	80003ae <CLCD_I2C_WriteString>
            buzzer(5);
 800128a:	2005      	movs	r0, #5
 800128c:	f002 faf0 	bl	8003870 <buzzer>
            HAL_Delay(2000);
 8001290:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001294:	f002 fffa 	bl	800428c <HAL_Delay>
 8001298:	e008      	b.n	80012ac <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <main+0x358>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <main+0x308>
    {
        startface();
 80012a4:	f002 f988 	bl	80035b8 <startface>
 80012a8:	e000      	b.n	80012ac <main+0x308>
            break;
 80012aa:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 80012ac:	f7ff fd72 	bl	8000d94 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 80012b0:	f7ff fd84 	bl	8000dbc <process_fingerprint>
  {
 80012b4:	e6d9      	b.n	800106a <main+0xc6>
 80012b6:	bf00      	nop
 80012b8:	2000021c 	.word	0x2000021c
 80012bc:	200003d8 	.word	0x200003d8
 80012c0:	40010800 	.word	0x40010800
 80012c4:	0800f400 	.word	0x0800f400
 80012c8:	200002c8 	.word	0x200002c8
 80012cc:	0800da2c 	.word	0x0800da2c
 80012d0:	0800da3c 	.word	0x0800da3c
 80012d4:	0800da40 	.word	0x0800da40
 80012d8:	0800da50 	.word	0x0800da50
 80012dc:	0800da5c 	.word	0x0800da5c
 80012e0:	0800da6c 	.word	0x0800da6c
 80012e4:	0800da7c 	.word	0x0800da7c
 80012e8:	20000020 	.word	0x20000020
 80012ec:	0800da8c 	.word	0x0800da8c
 80012f0:	200003e4 	.word	0x200003e4
 80012f4:	0800da9c 	.word	0x0800da9c
 80012f8:	0800daac 	.word	0x0800daac
 80012fc:	20000350 	.word	0x20000350

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	@ 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	2228      	movs	r2, #40	@ 0x28
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00b feb4 	bl	800d07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133e:	2301      	movs	r3, #1
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001346:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800134c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fc78 	bl	8006c4c <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001362:	f002 faa9 	bl	80038b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001376:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2101      	movs	r1, #1
 8001382:	4618      	mov	r0, r3
 8001384:	f005 fee4 	bl	8007150 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800138e:	f002 fa93 	bl	80038b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001392:	2310      	movs	r3, #16
 8001394:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001396:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800139a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 f86e 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013aa:	f002 fa85 	bl	80038b8 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	@ 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <MX_I2C2_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_I2C2_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f6:	f003 fc51 	bl	8004c9c <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001400:	f002 fa5a 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000021c 	.word	0x2000021c
 800140c:	40005800 	.word	0x40005800
 8001410:	000186a0 	.word	0x000186a0

08001414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_SPI1_Init+0x64>)
 800141a:	4a18      	ldr	r2, [pc, #96]	@ (800147c <MX_SPI1_Init+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_SPI1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_SPI1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001448:	2230      	movs	r2, #48	@ 0x30
 800144a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001460:	220a      	movs	r2, #10
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_SPI1_Init+0x64>)
 8001466:	f006 f8c1 	bl	80075ec <HAL_SPI_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001470:	f002 fa22 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000270 	.word	0x20000270
 800147c:	40013000 	.word	0x40013000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_TIM2_Init+0x98>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014a6:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80014aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014b4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c6:	4814      	ldr	r0, [pc, #80]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014c8:	f006 fb5c 	bl	8007b84 <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014d2:	f002 f9f1 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_TIM2_Init+0x98>)
 80014e4:	f006 fcf8 	bl	8007ed8 <HAL_TIM_ConfigClockSource>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ee:	f002 f9e3 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	@ (8001518 <MX_TIM2_Init+0x98>)
 8001500:	f006 feca 	bl	8008298 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800150a:	f002 f9d5 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002c8 	.word	0x200002c8

0800151c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f006 ff10 	bl	8008378 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f002 f9ab 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000310 	.word	0x20000310
 800156c:	40013800 	.word	0x40013800

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <MX_GPIO_Init+0x190>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a5d      	ldr	r2, [pc, #372]	@ (8001700 <MX_GPIO_Init+0x190>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <MX_GPIO_Init+0x190>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <MX_GPIO_Init+0x190>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b52      	ldr	r3, [pc, #328]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a51      	ldr	r2, [pc, #324]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <MX_GPIO_Init+0x190>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015ea:	4846      	ldr	r0, [pc, #280]	@ (8001704 <MX_GPIO_Init+0x194>)
 80015ec:	f003 fb1b 	bl	8004c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80015f0:	2200      	movs	r2, #0
 80015f2:	f24f 0108 	movw	r1, #61448	@ 0xf008
 80015f6:	4844      	ldr	r0, [pc, #272]	@ (8001708 <MX_GPIO_Init+0x198>)
 80015f8:	f003 fb15 	bl	8004c26 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001602:	4840      	ldr	r0, [pc, #256]	@ (8001704 <MX_GPIO_Init+0x194>)
 8001604:	f003 fb0f 	bl	8004c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8001608:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	483b      	ldr	r0, [pc, #236]	@ (800170c <MX_GPIO_Init+0x19c>)
 800161e:	f003 f967 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8001622:	2303      	movs	r3, #3
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	4833      	ldr	r0, [pc, #204]	@ (8001704 <MX_GPIO_Init+0x194>)
 8001636:	f003 f95b 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800163a:	2310      	movs	r3, #16
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2302      	movs	r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	482c      	ldr	r0, [pc, #176]	@ (8001704 <MX_GPIO_Init+0x194>)
 8001652:	f003 f94d 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001656:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4826      	ldr	r0, [pc, #152]	@ (8001708 <MX_GPIO_Init+0x198>)
 8001670:	f003 f93e 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800167a:	2311      	movs	r3, #17
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	481d      	ldr	r0, [pc, #116]	@ (8001704 <MX_GPIO_Init+0x194>)
 800168e:	f003 f92f 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 8001692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4816      	ldr	r0, [pc, #88]	@ (8001704 <MX_GPIO_Init+0x194>)
 80016ac:	f003 f920 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 80016b0:	2308      	movs	r3, #8
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2302      	movs	r3, #2
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	4810      	ldr	r0, [pc, #64]	@ (8001708 <MX_GPIO_Init+0x198>)
 80016c8:	f003 f912 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_GPIO_Init+0x1a0>)
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_GPIO_Init+0x198>)
 80016e2:	f003 f905 	bl	80048f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	2017      	movs	r0, #23
 80016ec:	f002 fec9 	bl	8004482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016f0:	2017      	movs	r0, #23
 80016f2:	f002 fee2 	bl	80044ba <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00
 800170c:	40011000 	.word	0x40011000
 8001710:	10110000 	.word	0x10110000

08001714 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
	buzzer(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f002 f8a8 	bl	8003870 <buzzer>
	exitmenu = Delaymenu;
 8001720:	4ba3      	ldr	r3, [pc, #652]	@ (80019b0 <RFID+0x29c>)
 8001722:	2214      	movs	r2, #20
 8001724:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8001726:	23ff      	movs	r3, #255	@ 0xff
 8001728:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 800172a:	4aa2      	ldr	r2, [pc, #648]	@ (80019b4 <RFID+0x2a0>)
 800172c:	49a2      	ldr	r1, [pc, #648]	@ (80019b8 <RFID+0x2a4>)
 800172e:	48a3      	ldr	r0, [pc, #652]	@ (80019bc <RFID+0x2a8>)
 8001730:	f7fe fe64 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8001734:	e35e      	b.n	8001df4 <RFID+0x6e0>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001736:	200a      	movs	r0, #10
 8001738:	f7fe ffba 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800173c:	4603      	mov	r3, r0
 800173e:	737b      	strb	r3, [r7, #13]
		if (key_pressed =='*')
 8001740:	7b7b      	ldrb	r3, [r7, #13]
 8001742:	2b2a      	cmp	r3, #42	@ 0x2a
 8001744:	d131      	bne.n	80017aa <RFID+0x96>
		{
			buzzer(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f002 f892 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 800174c:	4b98      	ldr	r3, [pc, #608]	@ (80019b0 <RFID+0x29c>)
 800174e:	2214      	movs	r2, #20
 8001750:	701a      	strb	r2, [r3, #0]
			status++;
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	3301      	adds	r3, #1
 8001756:	75fb      	strb	r3, [r7, #23]
			status = (status > 2) ? (-1) : status;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d801      	bhi.n	8001762 <RFID+0x4e>
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	e000      	b.n	8001764 <RFID+0x50>
 8001762:	23ff      	movs	r3, #255	@ 0xff
 8001764:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d012      	beq.n	8001792 <RFID+0x7e>
 800176c:	2b02      	cmp	r3, #2
 800176e:	dc16      	bgt.n	800179e <RFID+0x8a>
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <RFID+0x66>
 8001774:	2b01      	cmp	r3, #1
 8001776:	d006      	beq.n	8001786 <RFID+0x72>
 8001778:	e011      	b.n	800179e <RFID+0x8a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 800177a:	4a91      	ldr	r2, [pc, #580]	@ (80019c0 <RFID+0x2ac>)
 800177c:	498e      	ldr	r1, [pc, #568]	@ (80019b8 <RFID+0x2a4>)
 800177e:	488f      	ldr	r0, [pc, #572]	@ (80019bc <RFID+0x2a8>)
 8001780:	f7fe fe3c 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001784:	e011      	b.n	80017aa <RFID+0x96>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001786:	4a8f      	ldr	r2, [pc, #572]	@ (80019c4 <RFID+0x2b0>)
 8001788:	498b      	ldr	r1, [pc, #556]	@ (80019b8 <RFID+0x2a4>)
 800178a:	488c      	ldr	r0, [pc, #560]	@ (80019bc <RFID+0x2a8>)
 800178c:	f7fe fe36 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001790:	e00b      	b.n	80017aa <RFID+0x96>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001792:	4a8d      	ldr	r2, [pc, #564]	@ (80019c8 <RFID+0x2b4>)
 8001794:	4988      	ldr	r1, [pc, #544]	@ (80019b8 <RFID+0x2a4>)
 8001796:	4889      	ldr	r0, [pc, #548]	@ (80019bc <RFID+0x2a8>)
 8001798:	f7fe fe30 	bl	80003fc <CLCD_I2C_Display>
				break;
 800179c:	e005      	b.n	80017aa <RFID+0x96>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 800179e:	4a8b      	ldr	r2, [pc, #556]	@ (80019cc <RFID+0x2b8>)
 80017a0:	4985      	ldr	r1, [pc, #532]	@ (80019b8 <RFID+0x2a4>)
 80017a2:	4886      	ldr	r0, [pc, #536]	@ (80019bc <RFID+0x2a8>)
 80017a4:	f7fe fe2a 	bl	80003fc <CLCD_I2C_Display>
				break;
 80017a8:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 80017aa:	7b7b      	ldrb	r3, [r7, #13]
 80017ac:	2b23      	cmp	r3, #35	@ 0x23
 80017ae:	f040 8321 	bne.w	8001df4 <RFID+0x6e0>
		{
			buzzer(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f002 f85c 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 80017b8:	4b7d      	ldr	r3, [pc, #500]	@ (80019b0 <RFID+0x29c>)
 80017ba:	2214      	movs	r2, #20
 80017bc:	701a      	strb	r2, [r3, #0]
			switch (status)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f000 830b 	beq.w	8001ddc <RFID+0x6c8>
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	f300 8310 	bgt.w	8001dec <RFID+0x6d8>
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <RFID+0xc4>
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f000 80ac 	beq.w	800192e <RFID+0x21a>
 80017d6:	e309      	b.n	8001dec <RFID+0x6d8>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80017d8:	4a7d      	ldr	r2, [pc, #500]	@ (80019d0 <RFID+0x2bc>)
 80017da:	497e      	ldr	r1, [pc, #504]	@ (80019d4 <RFID+0x2c0>)
 80017dc:	4877      	ldr	r0, [pc, #476]	@ (80019bc <RFID+0x2a8>)
 80017de:	f7fe fe0d 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = -1;
 80017e2:	23ff      	movs	r3, #255	@ 0xff
 80017e4:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 80017ea:	e096      	b.n	800191a <RFID+0x206>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80017ec:	200a      	movs	r0, #10
 80017ee:	f7fe ff5f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80017f2:	4603      	mov	r3, r0
 80017f4:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 80017f6:	4b6e      	ldr	r3, [pc, #440]	@ (80019b0 <RFID+0x29c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <RFID+0xfa>
					{
						CLCD_I2C_Clear(&LCD1);
 80017fe:	486f      	ldr	r0, [pc, #444]	@ (80019bc <RFID+0x2a8>)
 8001800:	f7fe fdec 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001808:	f002 fd40 	bl	800428c <HAL_Delay>
						return;
 800180c:	e2fa      	b.n	8001e04 <RFID+0x6f0>
					}
					if (key_pressed =='*')
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	2b2a      	cmp	r3, #42	@ 0x2a
 8001812:	d127      	bne.n	8001864 <RFID+0x150>
					{
						buzzer(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f002 f82b 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 800181a:	4b65      	ldr	r3, [pc, #404]	@ (80019b0 <RFID+0x29c>)
 800181c:	2214      	movs	r2, #20
 800181e:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	3301      	adds	r3, #1
 8001824:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 1) ? (-1) : statusadd;
 8001826:	7dbb      	ldrb	r3, [r7, #22]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d801      	bhi.n	8001830 <RFID+0x11c>
 800182c:	7dbb      	ldrb	r3, [r7, #22]
 800182e:	e000      	b.n	8001832 <RFID+0x11e>
 8001830:	23ff      	movs	r3, #255	@ 0xff
 8001832:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <RFID+0x12c>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d006      	beq.n	800184c <RFID+0x138>
 800183e:	e00b      	b.n	8001858 <RFID+0x144>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001840:	4a65      	ldr	r2, [pc, #404]	@ (80019d8 <RFID+0x2c4>)
 8001842:	4966      	ldr	r1, [pc, #408]	@ (80019dc <RFID+0x2c8>)
 8001844:	485d      	ldr	r0, [pc, #372]	@ (80019bc <RFID+0x2a8>)
 8001846:	f7fe fdd9 	bl	80003fc <CLCD_I2C_Display>
							break;
 800184a:	e00b      	b.n	8001864 <RFID+0x150>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800184c:	4a64      	ldr	r2, [pc, #400]	@ (80019e0 <RFID+0x2cc>)
 800184e:	4963      	ldr	r1, [pc, #396]	@ (80019dc <RFID+0x2c8>)
 8001850:	485a      	ldr	r0, [pc, #360]	@ (80019bc <RFID+0x2a8>)
 8001852:	f7fe fdd3 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001856:	e005      	b.n	8001864 <RFID+0x150>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 8001858:	4a5c      	ldr	r2, [pc, #368]	@ (80019cc <RFID+0x2b8>)
 800185a:	4960      	ldr	r1, [pc, #384]	@ (80019dc <RFID+0x2c8>)
 800185c:	4857      	ldr	r0, [pc, #348]	@ (80019bc <RFID+0x2a8>)
 800185e:	f7fe fdcd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001862:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001864:	7b7b      	ldrb	r3, [r7, #13]
 8001866:	2b23      	cmp	r3, #35	@ 0x23
 8001868:	d157      	bne.n	800191a <RFID+0x206>
					{
						buzzer(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f002 f800 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 8001870:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <RFID+0x29c>)
 8001872:	2214      	movs	r2, #20
 8001874:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8001876:	7dbb      	ldrb	r3, [r7, #22]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <RFID+0x16e>
 800187c:	2b01      	cmp	r3, #1
 800187e:	d025      	beq.n	80018cc <RFID+0x1b8>
 8001880:	e048      	b.n	8001914 <RFID+0x200>
						{
						case 0:
							uint8_t AdminID = InputID_ADMIN();
 8001882:	f7ff fb6b 	bl	8000f5c <InputID_ADMIN>
 8001886:	4603      	mov	r3, r0
 8001888:	71bb      	strb	r3, [r7, #6]
							uint8_t keyadd_admin = (1 << 7) + AdminID;
 800188a:	79bb      	ldrb	r3, [r7, #6]
 800188c:	3b80      	subs	r3, #128	@ 0x80
 800188e:	717b      	strb	r3, [r7, #5]
							if (CheckKey(keyadd_admin)!=0)
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fc50 	bl	8002138 <CheckKey>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <RFID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 800189e:	4a51      	ldr	r2, [pc, #324]	@ (80019e4 <RFID+0x2d0>)
 80018a0:	4951      	ldr	r1, [pc, #324]	@ (80019e8 <RFID+0x2d4>)
 80018a2:	4846      	ldr	r0, [pc, #280]	@ (80019bc <RFID+0x2a8>)
 80018a4:	f7fe fdaa 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f001 ffe1 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 80018ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b2:	f002 fceb 	bl	800428c <HAL_Delay>
 80018b6:	e003      	b.n	80018c0 <RFID+0x1ac>
							}
							else 
							{
								adduid(keyadd_admin);
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fb28 	bl	8001f10 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018c0:	4a45      	ldr	r2, [pc, #276]	@ (80019d8 <RFID+0x2c4>)
 80018c2:	4946      	ldr	r1, [pc, #280]	@ (80019dc <RFID+0x2c8>)
 80018c4:	483d      	ldr	r0, [pc, #244]	@ (80019bc <RFID+0x2a8>)
 80018c6:	f7fe fd99 	bl	80003fc <CLCD_I2C_Display>
							break;
 80018ca:	e026      	b.n	800191a <RFID+0x206>
						case 1:
							uint8_t UserID = InputID_USER();
 80018cc:	f7ff fb52 	bl	8000f74 <InputID_USER>
 80018d0:	4603      	mov	r3, r0
 80018d2:	723b      	strb	r3, [r7, #8]
							uint8_t keyadd_user = (0 << 7) + UserID;
 80018d4:	7a3b      	ldrb	r3, [r7, #8]
 80018d6:	71fb      	strb	r3, [r7, #7]
							if (CheckKey(keyadd_user)!=0)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fc2c 	bl	8002138 <CheckKey>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <RFID+0x1ec>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 80018e6:	4a3f      	ldr	r2, [pc, #252]	@ (80019e4 <RFID+0x2d0>)
 80018e8:	493f      	ldr	r1, [pc, #252]	@ (80019e8 <RFID+0x2d4>)
 80018ea:	4834      	ldr	r0, [pc, #208]	@ (80019bc <RFID+0x2a8>)
 80018ec:	f7fe fd86 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f001 ffbd 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 80018f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fa:	f002 fcc7 	bl	800428c <HAL_Delay>
 80018fe:	e003      	b.n	8001908 <RFID+0x1f4>
							}
							else 
							{
								adduid(keyadd_user);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fb04 	bl	8001f10 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001908:	4a35      	ldr	r2, [pc, #212]	@ (80019e0 <RFID+0x2cc>)
 800190a:	4934      	ldr	r1, [pc, #208]	@ (80019dc <RFID+0x2c8>)
 800190c:	482b      	ldr	r0, [pc, #172]	@ (80019bc <RFID+0x2a8>)
 800190e:	f7fe fd75 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001912:	e002      	b.n	800191a <RFID+0x206>
						default:
							back = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	757b      	strb	r3, [r7, #21]
							break;
 8001918:	bf00      	nop
				while (back == 1)
 800191a:	7d7b      	ldrb	r3, [r7, #21]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f43f af65 	beq.w	80017ec <RFID+0xd8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001922:	4a27      	ldr	r2, [pc, #156]	@ (80019c0 <RFID+0x2ac>)
 8001924:	4924      	ldr	r1, [pc, #144]	@ (80019b8 <RFID+0x2a4>)
 8001926:	4825      	ldr	r0, [pc, #148]	@ (80019bc <RFID+0x2a8>)
 8001928:	f7fe fd68 	bl	80003fc <CLCD_I2C_Display>
				break;
 800192c:	e262      	b.n	8001df4 <RFID+0x6e0>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <RFID+0x2bc>)
 8001930:	4928      	ldr	r1, [pc, #160]	@ (80019d4 <RFID+0x2c0>)
 8001932:	4822      	ldr	r0, [pc, #136]	@ (80019bc <RFID+0x2a8>)
 8001934:	f7fe fd62 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001938:	23ff      	movs	r3, #255	@ 0xff
 800193a:	753b      	strb	r3, [r7, #20]
				uint8_t backrm = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	74fb      	strb	r3, [r7, #19]
				while (backrm == 1)
 8001940:	e242      	b.n	8001dc8 <RFID+0x6b4>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f7fe feb4 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001948:	4603      	mov	r3, r0
 800194a:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <RFID+0x29c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <RFID+0x250>
					{
						CLCD_I2C_Clear(&LCD1);
 8001954:	4819      	ldr	r0, [pc, #100]	@ (80019bc <RFID+0x2a8>)
 8001956:	f7fe fd41 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195e:	f002 fc95 	bl	800428c <HAL_Delay>
						return;
 8001962:	e24f      	b.n	8001e04 <RFID+0x6f0>
					}
					if (key_pressed =='*')
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	2b2a      	cmp	r3, #42	@ 0x2a
 8001968:	d14c      	bne.n	8001a04 <RFID+0x2f0>
					{
						buzzer(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f001 ff80 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <RFID+0x29c>)
 8001972:	2214      	movs	r2, #20
 8001974:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001976:	7d3b      	ldrb	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	753b      	strb	r3, [r7, #20]
						statusremove = (statusremove > 1) ? (-1) : statusremove;
 800197c:	7d3b      	ldrb	r3, [r7, #20]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d801      	bhi.n	8001986 <RFID+0x272>
 8001982:	7d3b      	ldrb	r3, [r7, #20]
 8001984:	e000      	b.n	8001988 <RFID+0x274>
 8001986:	23ff      	movs	r3, #255	@ 0xff
 8001988:	753b      	strb	r3, [r7, #20]
						switch (statusremove)
 800198a:	7d3b      	ldrb	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <RFID+0x282>
 8001990:	2b01      	cmp	r3, #1
 8001992:	d006      	beq.n	80019a2 <RFID+0x28e>
 8001994:	e030      	b.n	80019f8 <RFID+0x2e4>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001996:	4a15      	ldr	r2, [pc, #84]	@ (80019ec <RFID+0x2d8>)
 8001998:	4915      	ldr	r1, [pc, #84]	@ (80019f0 <RFID+0x2dc>)
 800199a:	4808      	ldr	r0, [pc, #32]	@ (80019bc <RFID+0x2a8>)
 800199c:	f7fe fd2e 	bl	80003fc <CLCD_I2C_Display>
							break;
 80019a0:	e030      	b.n	8001a04 <RFID+0x2f0>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <RFID+0x2e0>)
 80019a4:	4912      	ldr	r1, [pc, #72]	@ (80019f0 <RFID+0x2dc>)
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <RFID+0x2a8>)
 80019a8:	f7fe fd28 	bl	80003fc <CLCD_I2C_Display>
							break;
 80019ac:	e02a      	b.n	8001a04 <RFID+0x2f0>
 80019ae:	bf00      	nop
 80019b0:	20000020 	.word	0x20000020
 80019b4:	0800dabc 	.word	0x0800dabc
 80019b8:	0800dacc 	.word	0x0800dacc
 80019bc:	200003d8 	.word	0x200003d8
 80019c0:	0800dadc 	.word	0x0800dadc
 80019c4:	0800dae8 	.word	0x0800dae8
 80019c8:	0800daf8 	.word	0x0800daf8
 80019cc:	0800db08 	.word	0x0800db08
 80019d0:	0800db10 	.word	0x0800db10
 80019d4:	0800db1c 	.word	0x0800db1c
 80019d8:	0800db2c 	.word	0x0800db2c
 80019dc:	0800db3c 	.word	0x0800db3c
 80019e0:	0800db48 	.word	0x0800db48
 80019e4:	0800db58 	.word	0x0800db58
 80019e8:	0800db6c 	.word	0x0800db6c
 80019ec:	0800db7c 	.word	0x0800db7c
 80019f0:	0800db90 	.word	0x0800db90
 80019f4:	0800dba0 	.word	0x0800dba0
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 80019f8:	4aa8      	ldr	r2, [pc, #672]	@ (8001c9c <RFID+0x588>)
 80019fa:	49a9      	ldr	r1, [pc, #676]	@ (8001ca0 <RFID+0x58c>)
 80019fc:	48a9      	ldr	r0, [pc, #676]	@ (8001ca4 <RFID+0x590>)
 80019fe:	f7fe fcfd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001a02:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	2b23      	cmp	r3, #35	@ 0x23
 8001a08:	f040 81de 	bne.w	8001dc8 <RFID+0x6b4>
					{
						buzzer(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f001 ff2f 	bl	8003870 <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a12:	4aa5      	ldr	r2, [pc, #660]	@ (8001ca8 <RFID+0x594>)
 8001a14:	49a5      	ldr	r1, [pc, #660]	@ (8001cac <RFID+0x598>)
 8001a16:	48a3      	ldr	r0, [pc, #652]	@ (8001ca4 <RFID+0x590>)
 8001a18:	f7fe fcf0 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = Delaymenu;
 8001a1c:	4ba4      	ldr	r3, [pc, #656]	@ (8001cb0 <RFID+0x59c>)
 8001a1e:	2214      	movs	r2, #20
 8001a20:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001a22:	7d3b      	ldrb	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <RFID+0x31c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	f000 81c2 	beq.w	8001db2 <RFID+0x69e>
 8001a2e:	e1c8      	b.n	8001dc2 <RFID+0x6ae>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001a30:	23ff      	movs	r3, #255	@ 0xff
 8001a32:	74bb      	strb	r3, [r7, #18]
							uint8_t backrm1 = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	747b      	strb	r3, [r7, #17]
							while (backrm1 == 1)
 8001a38:	e1b1      	b.n	8001d9e <RFID+0x68a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f7fe fe38 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001a40:	4603      	mov	r3, r0
 8001a42:	737b      	strb	r3, [r7, #13]
								if (exitmenu == 0)
 8001a44:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb0 <RFID+0x59c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <RFID+0x348>
								{
									CLCD_I2C_Clear(&LCD1);
 8001a4c:	4895      	ldr	r0, [pc, #596]	@ (8001ca4 <RFID+0x590>)
 8001a4e:	f7fe fcc5 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001a52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a56:	f002 fc19 	bl	800428c <HAL_Delay>
									return;
 8001a5a:	e1d3      	b.n	8001e04 <RFID+0x6f0>
								}
								if (key_pressed =='*')
 8001a5c:	7b7b      	ldrb	r3, [r7, #13]
 8001a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a60:	d124      	bne.n	8001aac <RFID+0x398>
								{
									buzzer(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f001 ff04 	bl	8003870 <buzzer>
									statusrm1++;
 8001a68:	7cbb      	ldrb	r3, [r7, #18]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	74bb      	strb	r3, [r7, #18]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001a6e:	7cbb      	ldrb	r3, [r7, #18]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d801      	bhi.n	8001a78 <RFID+0x364>
 8001a74:	7cbb      	ldrb	r3, [r7, #18]
 8001a76:	e000      	b.n	8001a7a <RFID+0x366>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	74bb      	strb	r3, [r7, #18]
									switch (statusrm1)
 8001a7c:	7cbb      	ldrb	r3, [r7, #18]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <RFID+0x374>
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d006      	beq.n	8001a94 <RFID+0x380>
 8001a86:	e00b      	b.n	8001aa0 <RFID+0x38c>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001a88:	4a8a      	ldr	r2, [pc, #552]	@ (8001cb4 <RFID+0x5a0>)
 8001a8a:	498b      	ldr	r1, [pc, #556]	@ (8001cb8 <RFID+0x5a4>)
 8001a8c:	4885      	ldr	r0, [pc, #532]	@ (8001ca4 <RFID+0x590>)
 8001a8e:	f7fe fcb5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a92:	e00b      	b.n	8001aac <RFID+0x398>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001a94:	4a89      	ldr	r2, [pc, #548]	@ (8001cbc <RFID+0x5a8>)
 8001a96:	4988      	ldr	r1, [pc, #544]	@ (8001cb8 <RFID+0x5a4>)
 8001a98:	4882      	ldr	r0, [pc, #520]	@ (8001ca4 <RFID+0x590>)
 8001a9a:	f7fe fcaf 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a9e:	e005      	b.n	8001aac <RFID+0x398>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001aa0:	4a7e      	ldr	r2, [pc, #504]	@ (8001c9c <RFID+0x588>)
 8001aa2:	4985      	ldr	r1, [pc, #532]	@ (8001cb8 <RFID+0x5a4>)
 8001aa4:	487f      	ldr	r0, [pc, #508]	@ (8001ca4 <RFID+0x590>)
 8001aa6:	f7fe fca9 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001aaa:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	2b23      	cmp	r3, #35	@ 0x23
 8001ab0:	f040 8175 	bne.w	8001d9e <RFID+0x68a>
								{
									buzzer(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f001 fedb 	bl	8003870 <buzzer>
									exitmenu = Delaymenu;
 8001aba:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb0 <RFID+0x59c>)
 8001abc:	2214      	movs	r2, #20
 8001abe:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <RFID+0x3ba>
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	f000 80e0 	beq.w	8001c8c <RFID+0x578>
 8001acc:	e164      	b.n	8001d98 <RFID+0x684>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001ace:	4a76      	ldr	r2, [pc, #472]	@ (8001ca8 <RFID+0x594>)
 8001ad0:	4976      	ldr	r1, [pc, #472]	@ (8001cac <RFID+0x598>)
 8001ad2:	4874      	ldr	r0, [pc, #464]	@ (8001ca4 <RFID+0x590>)
 8001ad4:	f7fe fc92 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = -1;
 8001ad8:	23ff      	movs	r3, #255	@ 0xff
 8001ada:	743b      	strb	r3, [r7, #16]
										uint8_t backrm10 = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
										while (backrm10 == 1)
 8001ae0:	e0ca      	b.n	8001c78 <RFID+0x564>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f7fe fde4 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	737b      	strb	r3, [r7, #13]
											if (exitmenu == 0)
 8001aec:	4b70      	ldr	r3, [pc, #448]	@ (8001cb0 <RFID+0x59c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <RFID+0x3f0>
											{
												CLCD_I2C_Clear(&LCD1);
 8001af4:	486b      	ldr	r0, [pc, #428]	@ (8001ca4 <RFID+0x590>)
 8001af6:	f7fe fc71 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f002 fbc5 	bl	800428c <HAL_Delay>
												return;
 8001b02:	e17f      	b.n	8001e04 <RFID+0x6f0>
											}
											if (key_pressed =='*')
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
 8001b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b08:	d127      	bne.n	8001b5a <RFID+0x446>
											{
												buzzer(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f001 feb0 	bl	8003870 <buzzer>
												exitmenu = Delaymenu;
 8001b10:	4b67      	ldr	r3, [pc, #412]	@ (8001cb0 <RFID+0x59c>)
 8001b12:	2214      	movs	r2, #20
 8001b14:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001b16:	7c3b      	ldrb	r3, [r7, #16]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	743b      	strb	r3, [r7, #16]
												statusadd = (statusadd > 1) ? (-1) : statusadd;
 8001b1c:	7c3b      	ldrb	r3, [r7, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d801      	bhi.n	8001b26 <RFID+0x412>
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	e000      	b.n	8001b28 <RFID+0x414>
 8001b26:	23ff      	movs	r3, #255	@ 0xff
 8001b28:	743b      	strb	r3, [r7, #16]
												switch (statusadd)
 8001b2a:	7c3b      	ldrb	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <RFID+0x422>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d006      	beq.n	8001b42 <RFID+0x42e>
 8001b34:	e00b      	b.n	8001b4e <RFID+0x43a>
												{
												case 0:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001b36:	4a62      	ldr	r2, [pc, #392]	@ (8001cc0 <RFID+0x5ac>)
 8001b38:	4962      	ldr	r1, [pc, #392]	@ (8001cc4 <RFID+0x5b0>)
 8001b3a:	485a      	ldr	r0, [pc, #360]	@ (8001ca4 <RFID+0x590>)
 8001b3c:	f7fe fc5e 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001b40:	e00b      	b.n	8001b5a <RFID+0x446>
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001b42:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <RFID+0x5b4>)
 8001b44:	495f      	ldr	r1, [pc, #380]	@ (8001cc4 <RFID+0x5b0>)
 8001b46:	4857      	ldr	r0, [pc, #348]	@ (8001ca4 <RFID+0x590>)
 8001b48:	f7fe fc58 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001b4c:	e005      	b.n	8001b5a <RFID+0x446>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");
 8001b4e:	4a53      	ldr	r2, [pc, #332]	@ (8001c9c <RFID+0x588>)
 8001b50:	495c      	ldr	r1, [pc, #368]	@ (8001cc4 <RFID+0x5b0>)
 8001b52:	4854      	ldr	r0, [pc, #336]	@ (8001ca4 <RFID+0x590>)
 8001b54:	f7fe fc52 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001b58:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	2b23      	cmp	r3, #35	@ 0x23
 8001b5e:	f040 808b 	bne.w	8001c78 <RFID+0x564>
											{
												buzzer(1);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f001 fe84 	bl	8003870 <buzzer>
												exitmenu = Delaymenu;
 8001b68:	4b51      	ldr	r3, [pc, #324]	@ (8001cb0 <RFID+0x59c>)
 8001b6a:	2214      	movs	r2, #20
 8001b6c:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <RFID+0x466>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d041      	beq.n	8001bfc <RFID+0x4e8>
 8001b78:	e07b      	b.n	8001c72 <RFID+0x55e>
												{
													case 0: 
														uint8_t AdminID = InputID_ADMIN();
 8001b7a:	f7ff f9ef 	bl	8000f5c <InputID_ADMIN>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	72bb      	strb	r3, [r7, #10]
														uint8_t keyadd_admin = (1 << 7) + AdminID;
 8001b82:	7abb      	ldrb	r3, [r7, #10]
 8001b84:	3b80      	subs	r3, #128	@ 0x80
 8001b86:	727b      	strb	r3, [r7, #9]
														if (CheckKey(keyadd_admin)==0)
 8001b88:	7a7b      	ldrb	r3, [r7, #9]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fad4 	bl	8002138 <CheckKey>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d111      	bne.n	8001bba <RFID+0x4a6>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001b96:	4a4d      	ldr	r2, [pc, #308]	@ (8001ccc <RFID+0x5b8>)
 8001b98:	494d      	ldr	r1, [pc, #308]	@ (8001cd0 <RFID+0x5bc>)
 8001b9a:	4842      	ldr	r0, [pc, #264]	@ (8001ca4 <RFID+0x590>)
 8001b9c:	f7fe fc2e 	bl	80003fc <CLCD_I2C_Display>
															buzzer(3);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f001 fe65 	bl	8003870 <buzzer>
															HAL_Delay(1000);
 8001ba6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001baa:	f002 fb6f 	bl	800428c <HAL_Delay>
															CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001bae:	4a44      	ldr	r2, [pc, #272]	@ (8001cc0 <RFID+0x5ac>)
 8001bb0:	4944      	ldr	r1, [pc, #272]	@ (8001cc4 <RFID+0x5b0>)
 8001bb2:	483c      	ldr	r0, [pc, #240]	@ (8001ca4 <RFID+0x590>)
 8001bb4:	f7fe fc22 	bl	80003fc <CLCD_I2C_Display>
 8001bb8:	e01a      	b.n	8001bf0 <RFID+0x4dc>
														}
														else 
														{
															removeuid(CheckKey(keyadd_admin));
 8001bba:	7a7b      	ldrb	r3, [r7, #9]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fabb 	bl	8002138 <CheckKey>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 ffdb 	bl	8002b80 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE ADMIN CARD","   SUCCESSFUL  ");
 8001bca:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <RFID+0x5c0>)
 8001bcc:	4942      	ldr	r1, [pc, #264]	@ (8001cd8 <RFID+0x5c4>)
 8001bce:	4835      	ldr	r0, [pc, #212]	@ (8001ca4 <RFID+0x590>)
 8001bd0:	f7fe fc14 	bl	80003fc <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd8:	f002 fb58 	bl	800428c <HAL_Delay>
															if (checkcountUID() == 0)
 8001bdc:	f000 f966 	bl	8001eac <checkcountUID>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <RFID+0x4dc>
															{
																startadd();
 8001be6:	f000 ffd9 	bl	8002b9c <startadd>
																exitmenu = 0;
 8001bea:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <RFID+0x59c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001bf0:	4a33      	ldr	r2, [pc, #204]	@ (8001cc0 <RFID+0x5ac>)
 8001bf2:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <RFID+0x5b0>)
 8001bf4:	482b      	ldr	r0, [pc, #172]	@ (8001ca4 <RFID+0x590>)
 8001bf6:	f7fe fc01 	bl	80003fc <CLCD_I2C_Display>
														break;
 8001bfa:	e03d      	b.n	8001c78 <RFID+0x564>
													case 1:
														uint8_t UserID = InputID_USER();
 8001bfc:	f7ff f9ba 	bl	8000f74 <InputID_USER>
 8001c00:	4603      	mov	r3, r0
 8001c02:	733b      	strb	r3, [r7, #12]
														uint8_t keyadd_user = (0 << 7) + UserID;
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	72fb      	strb	r3, [r7, #11]
														if (CheckKey(keyadd_user)==0)
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fa94 	bl	8002138 <CheckKey>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <RFID+0x51c>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001c16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <RFID+0x5b8>)
 8001c18:	492d      	ldr	r1, [pc, #180]	@ (8001cd0 <RFID+0x5bc>)
 8001c1a:	4822      	ldr	r0, [pc, #136]	@ (8001ca4 <RFID+0x590>)
 8001c1c:	f7fe fbee 	bl	80003fc <CLCD_I2C_Display>
															buzzer(3);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fe25 	bl	8003870 <buzzer>
															HAL_Delay(1000);
 8001c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c2a:	f002 fb2f 	bl	800428c <HAL_Delay>
 8001c2e:	e01a      	b.n	8001c66 <RFID+0x552>
														}
														else 
														{
															removeuid(CheckKey(keyadd_user));
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa80 	bl	8002138 <CheckKey>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 ffa0 	bl	8002b80 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE USER CARD","   SUCCESSFUL  ");
 8001c40:	4a24      	ldr	r2, [pc, #144]	@ (8001cd4 <RFID+0x5c0>)
 8001c42:	4926      	ldr	r1, [pc, #152]	@ (8001cdc <RFID+0x5c8>)
 8001c44:	4817      	ldr	r0, [pc, #92]	@ (8001ca4 <RFID+0x590>)
 8001c46:	f7fe fbd9 	bl	80003fc <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c4e:	f002 fb1d 	bl	800428c <HAL_Delay>
															if (checkcountUID() == 0)
 8001c52:	f000 f92b 	bl	8001eac <checkcountUID>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <RFID+0x552>
															{
																startadd();
 8001c5c:	f000 ff9e 	bl	8002b9c <startadd>
																exitmenu = 0;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <RFID+0x59c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001c66:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <RFID+0x5b4>)
 8001c68:	4916      	ldr	r1, [pc, #88]	@ (8001cc4 <RFID+0x5b0>)
 8001c6a:	480e      	ldr	r0, [pc, #56]	@ (8001ca4 <RFID+0x590>)
 8001c6c:	f7fe fbc6 	bl	80003fc <CLCD_I2C_Display>
														break;
 8001c70:	e002      	b.n	8001c78 <RFID+0x564>
													default:
														backrm10 = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
														break;
 8001c76:	bf00      	nop
										while (backrm10 == 1)
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	f43f af31 	beq.w	8001ae2 <RFID+0x3ce>
												}		
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <RFID+0x5a0>)
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <RFID+0x5a4>)
 8001c84:	4807      	ldr	r0, [pc, #28]	@ (8001ca4 <RFID+0x590>)
 8001c86:	f7fe fbb9 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c8a:	e088      	b.n	8001d9e <RFID+0x68a>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001c8c:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <RFID+0x588>)
 8001c8e:	4914      	ldr	r1, [pc, #80]	@ (8001ce0 <RFID+0x5cc>)
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <RFID+0x590>)
 8001c92:	f7fe fbb3 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001c9a:	e074      	b.n	8001d86 <RFID+0x672>
 8001c9c:	0800db08 	.word	0x0800db08
 8001ca0:	0800db90 	.word	0x0800db90
 8001ca4:	200003d8 	.word	0x200003d8
 8001ca8:	0800db10 	.word	0x0800db10
 8001cac:	0800db1c 	.word	0x0800db1c
 8001cb0:	20000020 	.word	0x20000020
 8001cb4:	0800dbb0 	.word	0x0800dbb0
 8001cb8:	0800dbc0 	.word	0x0800dbc0
 8001cbc:	0800dbd0 	.word	0x0800dbd0
 8001cc0:	0800dbe0 	.word	0x0800dbe0
 8001cc4:	0800dbf4 	.word	0x0800dbf4
 8001cc8:	0800dc04 	.word	0x0800dc04
 8001ccc:	0800db58 	.word	0x0800db58
 8001cd0:	0800dc14 	.word	0x0800dc14
 8001cd4:	0800dc24 	.word	0x0800dc24
 8001cd8:	0800dc34 	.word	0x0800dc34
 8001cdc:	0800dc48 	.word	0x0800dc48
 8001ce0:	0800dc5c 	.word	0x0800dc5c
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f7fe fce3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001cea:	4603      	mov	r3, r0
 8001cec:	737b      	strb	r3, [r7, #13]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001cee:	4847      	ldr	r0, [pc, #284]	@ (8001e0c <RFID+0x6f8>)
 8001cf0:	f001 fe34 	bl	800395c <TM_MFRC522_Check>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13d      	bne.n	8001d76 <RFID+0x662>
											{
												if (CheckListUID(CardID) != 0)
 8001cfa:	4844      	ldr	r0, [pc, #272]	@ (8001e0c <RFID+0x6f8>)
 8001cfc:	f000 f8a6 	bl	8001e4c <CheckListUID>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d026      	beq.n	8001d54 <RFID+0x640>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001d06:	4841      	ldr	r0, [pc, #260]	@ (8001e0c <RFID+0x6f8>)
 8001d08:	f000 f8a0 	bl	8001e4c <CheckListUID>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fa12 	bl	8002138 <CheckKey>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 ff32 	bl	8002b80 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e10 <RFID+0x6fc>)
 8001d1e:	493d      	ldr	r1, [pc, #244]	@ (8001e14 <RFID+0x700>)
 8001d20:	483d      	ldr	r0, [pc, #244]	@ (8001e18 <RFID+0x704>)
 8001d22:	f7fe fb6b 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001d26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d2a:	f002 faaf 	bl	800428c <HAL_Delay>
													if (checkcountUID() == 0)
 8001d2e:	f000 f8bd 	bl	8001eac <checkcountUID>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <RFID+0x634>
													{
														startadd();
 8001d38:	f000 ff30 	bl	8002b9c <startadd>
														rmquet = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73bb      	strb	r3, [r7, #14]
														exitmenu = 0;
 8001d40:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <RFID+0x708>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
														return;
 8001d46:	e05d      	b.n	8001e04 <RFID+0x6f0>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d48:	4a35      	ldr	r2, [pc, #212]	@ (8001e20 <RFID+0x70c>)
 8001d4a:	4936      	ldr	r1, [pc, #216]	@ (8001e24 <RFID+0x710>)
 8001d4c:	4832      	ldr	r0, [pc, #200]	@ (8001e18 <RFID+0x704>)
 8001d4e:	f7fe fb55 	bl	80003fc <CLCD_I2C_Display>
 8001d52:	e010      	b.n	8001d76 <RFID+0x662>
													}
												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   This card","  Do not exist");
 8001d54:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <RFID+0x714>)
 8001d56:	4935      	ldr	r1, [pc, #212]	@ (8001e2c <RFID+0x718>)
 8001d58:	482f      	ldr	r0, [pc, #188]	@ (8001e18 <RFID+0x704>)
 8001d5a:	f7fe fb4f 	bl	80003fc <CLCD_I2C_Display>
													buzzer(3);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f001 fd86 	bl	8003870 <buzzer>
													HAL_Delay(1000);
 8001d64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d68:	f002 fa90 	bl	800428c <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <RFID+0x70c>)
 8001d6e:	492d      	ldr	r1, [pc, #180]	@ (8001e24 <RFID+0x710>)
 8001d70:	4829      	ldr	r0, [pc, #164]	@ (8001e18 <RFID+0x704>)
 8001d72:	f7fe fb43 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001d76:	7b7b      	ldrb	r3, [r7, #13]
 8001d78:	2b23      	cmp	r3, #35	@ 0x23
 8001d7a:	d104      	bne.n	8001d86 <RFID+0x672>
											{
												buzzer(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f001 fd77 	bl	8003870 <buzzer>
												rmquet = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ab      	bne.n	8001ce4 <RFID+0x5d0>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001d8c:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <RFID+0x71c>)
 8001d8e:	4929      	ldr	r1, [pc, #164]	@ (8001e34 <RFID+0x720>)
 8001d90:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <RFID+0x704>)
 8001d92:	f7fe fb33 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001d96:	e002      	b.n	8001d9e <RFID+0x68a>
									default:
										backrm1 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	747b      	strb	r3, [r7, #17]
										break;
 8001d9c:	bf00      	nop
							while (backrm1 == 1)
 8001d9e:	7c7b      	ldrb	r3, [r7, #17]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f43f ae4a 	beq.w	8001a3a <RFID+0x326>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001da6:	4a24      	ldr	r2, [pc, #144]	@ (8001e38 <RFID+0x724>)
 8001da8:	4924      	ldr	r1, [pc, #144]	@ (8001e3c <RFID+0x728>)
 8001daa:	481b      	ldr	r0, [pc, #108]	@ (8001e18 <RFID+0x704>)
 8001dac:	f7fe fb26 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001db0:	e00a      	b.n	8001dc8 <RFID+0x6b4>
						case 1:
							remoall();
 8001db2:	f000 ff69 	bl	8002c88 <remoall>
							startadd();
 8001db6:	f000 fef1 	bl	8002b9c <startadd>
							exitmenu = 0;
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <RFID+0x708>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
							break;
 8001dc0:	e002      	b.n	8001dc8 <RFID+0x6b4>
						default:
							backrm = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	74fb      	strb	r3, [r7, #19]
							break;
 8001dc6:	bf00      	nop
				while (backrm == 1)
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	f43f adb9 	beq.w	8001942 <RFID+0x22e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e40 <RFID+0x72c>)
 8001dd2:	491c      	ldr	r1, [pc, #112]	@ (8001e44 <RFID+0x730>)
 8001dd4:	4810      	ldr	r0, [pc, #64]	@ (8001e18 <RFID+0x704>)
 8001dd6:	f7fe fb11 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001dda:	e00b      	b.n	8001df4 <RFID+0x6e0>
			case 2:
				checkthe();
 8001ddc:	f000 f910 	bl	8002000 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001de0:	4a19      	ldr	r2, [pc, #100]	@ (8001e48 <RFID+0x734>)
 8001de2:	4918      	ldr	r1, [pc, #96]	@ (8001e44 <RFID+0x730>)
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <RFID+0x704>)
 8001de6:	f7fe fb09 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001dea:	e003      	b.n	8001df4 <RFID+0x6e0>
			default:
				exitmenu = 0;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <RFID+0x708>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
				break;
 8001df2:	bf00      	nop
	while (exitmenu )
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <RFID+0x708>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f47f ac9c 	bne.w	8001736 <RFID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8001dfe:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <RFID+0x704>)
 8001e00:	f7fe faec 	bl	80003dc <CLCD_I2C_Clear>
}
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200003e4 	.word	0x200003e4
 8001e10:	0800dc24 	.word	0x0800dc24
 8001e14:	0800dc6c 	.word	0x0800dc6c
 8001e18:	200003d8 	.word	0x200003d8
 8001e1c:	20000020 	.word	0x20000020
 8001e20:	0800db08 	.word	0x0800db08
 8001e24:	0800dc5c 	.word	0x0800dc5c
 8001e28:	0800dc7c 	.word	0x0800dc7c
 8001e2c:	0800dc8c 	.word	0x0800dc8c
 8001e30:	0800dbd0 	.word	0x0800dbd0
 8001e34:	0800dbc0 	.word	0x0800dbc0
 8001e38:	0800db7c 	.word	0x0800db7c
 8001e3c:	0800db90 	.word	0x0800db90
 8001e40:	0800dae8 	.word	0x0800dae8
 8001e44:	0800dacc 	.word	0x0800dacc
 8001e48:	0800daf8 	.word	0x0800daf8

08001e4c <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    uint32_t pt = StartAddressUID;
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <CheckListUID+0x5c>)
 8001e56:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001e58:	e018      	b.n	8001e8c <CheckListUID+0x40>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ff51 	bl	8000d06 <Flash_Read_2Byte>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10a      	bne.n	8001e86 <CheckListUID+0x3a>
        {
            if (CheckUID(data, pt) == 1)
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fe58 	bl	8002b28 <CheckUID>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d103      	bne.n	8001e86 <CheckListUID+0x3a>
                return *(uint8_t *)(pt + 5);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3305      	adds	r3, #5
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	e00b      	b.n	8001e9e <CheckListUID+0x52>
        }
        pt = pt + 8;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3308      	adds	r3, #8
 8001e8a:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3305      	adds	r3, #5
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff2c 	bl	8000cee <Flash_Read_Byte>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2bff      	cmp	r3, #255	@ 0xff
 8001e9a:	d1de      	bne.n	8001e5a <CheckListUID+0xe>
    }
    return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	0800f000 	.word	0x0800f000

08001eac <checkcountUID>:

uint8_t checkcountUID(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
    uint32_t pt = StartAddressUID;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <checkcountUID+0x60>)
 8001eb4:	607b      	str	r3, [r7, #4]
    uint8_t count = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	70fb      	strb	r3, [r7, #3]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001eba:	e01a      	b.n	8001ef2 <checkcountUID+0x46>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe ff20 	bl	8000d06 <Flash_Read_2Byte>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d10c      	bne.n	8001eec <checkcountUID+0x40>
        {
            if ((Flash_Read_Byte(pt + 5) >> 7) == 1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3305      	adds	r3, #5
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ff09 	bl	8000cee <Flash_Read_Byte>
 8001edc:	4603      	mov	r3, r0
 8001ede:	09db      	lsrs	r3, r3, #7
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <checkcountUID+0x40>
            {
                count++;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	70fb      	strb	r3, [r7, #3]
            }
        }
        pt = pt + 8;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	607b      	str	r3, [r7, #4]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fef9 	bl	8000cee <Flash_Read_Byte>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2bff      	cmp	r3, #255	@ 0xff
 8001f00:	d1dc      	bne.n	8001ebc <checkcountUID+0x10>
    }
    return count;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0800f000 	.word	0x0800f000

08001f10 <adduid>:

void adduid(uint8_t key)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
    setaddress();
 8001f1a:	f000 fe99 	bl	8002c50 <setaddress>
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001f1e:	4a30      	ldr	r2, [pc, #192]	@ (8001fe0 <adduid+0xd0>)
 8001f20:	4930      	ldr	r1, [pc, #192]	@ (8001fe4 <adduid+0xd4>)
 8001f22:	4831      	ldr	r0, [pc, #196]	@ (8001fe8 <adduid+0xd8>)
 8001f24:	f7fe fa6a 	bl	80003fc <CLCD_I2C_Display>
    while (exitmenu)
 8001f28:	e053      	b.n	8001fd2 <adduid+0xc2>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8001f2a:	4830      	ldr	r0, [pc, #192]	@ (8001fec <adduid+0xdc>)
 8001f2c:	f001 fd16 	bl	800395c <TM_MFRC522_Check>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d143      	bne.n	8001fbe <adduid+0xae>
        {
            HAL_Delay(100);
 8001f36:	2064      	movs	r0, #100	@ 0x64
 8001f38:	f002 f9a8 	bl	800428c <HAL_Delay>
            if (CheckListUID(CardID) == 0)
 8001f3c:	482b      	ldr	r0, [pc, #172]	@ (8001fec <adduid+0xdc>)
 8001f3e:	f7ff ff85 	bl	8001e4c <CheckListUID>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d122      	bne.n	8001f8e <adduid+0x7e>
            {
                buzzer(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f001 fc91 	bl	8003870 <buzzer>
                CardID[5] = key;
 8001f4e:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <adduid+0xdc>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	7153      	strb	r3, [r2, #5]
                Flash_Write_Array(AddressUID, CardID, 6);
 8001f54:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <adduid+0xe0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	4924      	ldr	r1, [pc, #144]	@ (8001fec <adduid+0xdc>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fea3 	bl	8000ca8 <Flash_Write_Array>
                AddressUID += 8;
 8001f62:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <adduid+0xe0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3308      	adds	r3, #8
 8001f68:	4a21      	ldr	r2, [pc, #132]	@ (8001ff0 <adduid+0xe0>)
 8001f6a:	6013      	str	r3, [r2, #0]
                CLCD_I2C_Clear(&LCD1);
 8001f6c:	481e      	ldr	r0, [pc, #120]	@ (8001fe8 <adduid+0xd8>)
 8001f6e:	f7fe fa35 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	481c      	ldr	r0, [pc, #112]	@ (8001fe8 <adduid+0xd8>)
 8001f78:	f7fe f9c6 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8001f7c:	491d      	ldr	r1, [pc, #116]	@ (8001ff4 <adduid+0xe4>)
 8001f7e:	481a      	ldr	r0, [pc, #104]	@ (8001fe8 <adduid+0xd8>)
 8001f80:	f7fe fa15 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8001f84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f88:	f002 f980 	bl	800428c <HAL_Delay>
                return;
 8001f8c:	e025      	b.n	8001fda <adduid+0xca>
            }
            else
            {
                CLCD_I2C_Clear(&LCD1);
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <adduid+0xd8>)
 8001f90:	f7fe fa24 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	4813      	ldr	r0, [pc, #76]	@ (8001fe8 <adduid+0xd8>)
 8001f9a:	f7fe f9b5 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8001f9e:	4916      	ldr	r1, [pc, #88]	@ (8001ff8 <adduid+0xe8>)
 8001fa0:	4811      	ldr	r0, [pc, #68]	@ (8001fe8 <adduid+0xd8>)
 8001fa2:	f7fe fa04 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(3);
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	f001 fc62 	bl	8003870 <buzzer>
                HAL_Delay(1000);
 8001fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb0:	f002 f96c 	bl	800428c <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <adduid+0xd0>)
 8001fb6:	490b      	ldr	r1, [pc, #44]	@ (8001fe4 <adduid+0xd4>)
 8001fb8:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <adduid+0xd8>)
 8001fba:	f7fe fa1f 	bl	80003fc <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8001fbe:	2064      	movs	r0, #100	@ 0x64
 8001fc0:	f7fe fb76 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b23      	cmp	r3, #35	@ 0x23
 8001fc8:	d103      	bne.n	8001fd2 <adduid+0xc2>
        {
            buzzer(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f001 fc50 	bl	8003870 <buzzer>
            return;
 8001fd0:	e003      	b.n	8001fda <adduid+0xca>
    while (exitmenu)
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <adduid+0xec>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1a7      	bne.n	8001f2a <adduid+0x1a>
        }
    }
}
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800db08 	.word	0x0800db08
 8001fe4:	0800dc9c 	.word	0x0800dc9c
 8001fe8:	200003d8 	.word	0x200003d8
 8001fec:	200003e4 	.word	0x200003e4
 8001ff0:	20000024 	.word	0x20000024
 8001ff4:	0800dca8 	.word	0x0800dca8
 8001ff8:	0800dcb8 	.word	0x0800dcb8
 8001ffc:	20000020 	.word	0x20000020

08002000 <checkthe>:

void checkthe(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
    exitmenu = 30;
 8002006:	4b42      	ldr	r3, [pc, #264]	@ (8002110 <checkthe+0x110>)
 8002008:	221e      	movs	r2, #30
 800200a:	701a      	strb	r2, [r3, #0]
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800200c:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <checkthe+0x114>)
 800200e:	4942      	ldr	r1, [pc, #264]	@ (8002118 <checkthe+0x118>)
 8002010:	4842      	ldr	r0, [pc, #264]	@ (800211c <checkthe+0x11c>)
 8002012:	f7fe f9f3 	bl	80003fc <CLCD_I2C_Display>
    while (exitmenu)
 8002016:	e074      	b.n	8002102 <checkthe+0x102>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8002018:	4841      	ldr	r0, [pc, #260]	@ (8002120 <checkthe+0x120>)
 800201a:	f001 fc9f 	bl	800395c <TM_MFRC522_Check>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d164      	bne.n	80020ee <checkthe+0xee>
        {
            if (CheckListUID(CardID) == 0)
 8002024:	483e      	ldr	r0, [pc, #248]	@ (8002120 <checkthe+0x120>)
 8002026:	f7ff ff11 	bl	8001e4c <CheckListUID>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11c      	bne.n	800206a <checkthe+0x6a>
            {
                CLCD_I2C_Clear(&LCD1);
 8002030:	483a      	ldr	r0, [pc, #232]	@ (800211c <checkthe+0x11c>)
 8002032:	f7fe f9d3 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	4838      	ldr	r0, [pc, #224]	@ (800211c <checkthe+0x11c>)
 800203c:	f7fe f964 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002040:	4938      	ldr	r1, [pc, #224]	@ (8002124 <checkthe+0x124>)
 8002042:	4836      	ldr	r0, [pc, #216]	@ (800211c <checkthe+0x11c>)
 8002044:	f7fe f9b3 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(3);
 8002048:	2003      	movs	r0, #3
 800204a:	f001 fc11 	bl	8003870 <buzzer>
                HAL_Delay(1000);
 800204e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002052:	f002 f91b 	bl	800428c <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002056:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <checkthe+0x114>)
 8002058:	492f      	ldr	r1, [pc, #188]	@ (8002118 <checkthe+0x118>)
 800205a:	4830      	ldr	r0, [pc, #192]	@ (800211c <checkthe+0x11c>)
 800205c:	f7fe f9ce 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8002060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002064:	f002 f912 	bl	800428c <HAL_Delay>
 8002068:	e041      	b.n	80020ee <checkthe+0xee>
            }
            else
            {
                uint8_t key = CheckListUID(CardID);
 800206a:	482d      	ldr	r0, [pc, #180]	@ (8002120 <checkthe+0x120>)
 800206c:	f7ff feee 	bl	8001e4c <CheckListUID>
 8002070:	4603      	mov	r3, r0
 8002072:	75fb      	strb	r3, [r7, #23]
                uint8_t key2 = key & 0x7F;
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800207a:	75bb      	strb	r3, [r7, #22]
                uint8_t key1 = (key & 0x80) >> 7;
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	09db      	lsrs	r3, r3, #7
 8002080:	757b      	strb	r3, [r7, #21]
                CLCD_I2C_Clear(&LCD1);
 8002082:	4826      	ldr	r0, [pc, #152]	@ (800211c <checkthe+0x11c>)
 8002084:	f7fe f9aa 	bl	80003dc <CLCD_I2C_Clear>
                buzzer(1);
 8002088:	2001      	movs	r0, #1
 800208a:	f001 fbf1 	bl	8003870 <buzzer>
                switch (key1)
 800208e:	7d7b      	ldrb	r3, [r7, #21]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d109      	bne.n	80020a8 <checkthe+0xa8>
                {
                case 1:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	4820      	ldr	r0, [pc, #128]	@ (800211c <checkthe+0x11c>)
 800209a:	f7fe f935 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 800209e:	4922      	ldr	r1, [pc, #136]	@ (8002128 <checkthe+0x128>)
 80020a0:	481e      	ldr	r0, [pc, #120]	@ (800211c <checkthe+0x11c>)
 80020a2:	f7fe f984 	bl	80003ae <CLCD_I2C_WriteString>
                    break;
 80020a6:	e009      	b.n	80020bc <checkthe+0xbc>
                default:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	481b      	ldr	r0, [pc, #108]	@ (800211c <checkthe+0x11c>)
 80020ae:	f7fe f92b 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "USER CARD");
 80020b2:	491e      	ldr	r1, [pc, #120]	@ (800212c <checkthe+0x12c>)
 80020b4:	4819      	ldr	r0, [pc, #100]	@ (800211c <checkthe+0x11c>)
 80020b6:	f7fe f97a 	bl	80003ae <CLCD_I2C_WriteString>
                    break;
 80020ba:	bf00      	nop
                }
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "Card ID: %d", key2);
 80020bc:	7dbb      	ldrb	r3, [r7, #22]
 80020be:	1d38      	adds	r0, r7, #4
 80020c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <checkthe+0x130>)
 80020c2:	2110      	movs	r1, #16
 80020c4:	f00a ff86 	bl	800cfd4 <sniprintf>
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2100      	movs	r1, #0
 80020cc:	4813      	ldr	r0, [pc, #76]	@ (800211c <checkthe+0x11c>)
 80020ce:	f7fe f91b 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, buffer);
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4811      	ldr	r0, [pc, #68]	@ (800211c <checkthe+0x11c>)
 80020d8:	f7fe f969 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e0:	f002 f8d4 	bl	800428c <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 80020e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <checkthe+0x114>)
 80020e6:	4913      	ldr	r1, [pc, #76]	@ (8002134 <checkthe+0x134>)
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <checkthe+0x11c>)
 80020ea:	f7fe f987 	bl	80003fc <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 80020ee:	2064      	movs	r0, #100	@ 0x64
 80020f0:	f7fe fade 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b23      	cmp	r3, #35	@ 0x23
 80020f8:	d103      	bne.n	8002102 <checkthe+0x102>
        {
            buzzer(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f001 fbb8 	bl	8003870 <buzzer>
            return;
 8002100:	e003      	b.n	800210a <checkthe+0x10a>
    while (exitmenu)
 8002102:	4b03      	ldr	r3, [pc, #12]	@ (8002110 <checkthe+0x110>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d186      	bne.n	8002018 <checkthe+0x18>
        }
    }
}
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000020 	.word	0x20000020
 8002114:	0800db08 	.word	0x0800db08
 8002118:	0800dc9c 	.word	0x0800dc9c
 800211c:	200003d8 	.word	0x200003d8
 8002120:	200003e4 	.word	0x200003e4
 8002124:	0800dcc8 	.word	0x0800dcc8
 8002128:	0800dcd8 	.word	0x0800dcd8
 800212c:	0800dce4 	.word	0x0800dce4
 8002130:	0800dcf0 	.word	0x0800dcf0
 8002134:	0800dc5c 	.word	0x0800dc5c

08002138 <CheckKey>:

uint32_t CheckKey(uint8_t key)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
    uint32_t pt = StartAddressUID;
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <CheckKey+0x58>)
 8002144:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002146:	e015      	b.n	8002174 <CheckKey+0x3c>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3306      	adds	r3, #6
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fdda 	bl	8000d06 <Flash_Read_2Byte>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800215a:	429a      	cmp	r2, r3
 800215c:	d107      	bne.n	800216e <CheckKey+0x36>
        {
            if (*(uint8_t *)(pt + 5) == key)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3305      	adds	r3, #5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	429a      	cmp	r2, r3
 8002168:	d101      	bne.n	800216e <CheckKey+0x36>
                return pt;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	e00b      	b.n	8002186 <CheckKey+0x4e>
        }
        pt = pt + 8;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3308      	adds	r3, #8
 8002172:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3305      	adds	r3, #5
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fdb8 	bl	8000cee <Flash_Read_Byte>
 800217e:	4603      	mov	r3, r0
 8002180:	2bff      	cmp	r3, #255	@ 0xff
 8002182:	d1e1      	bne.n	8002148 <CheckKey+0x10>
    }
    return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	0800f000 	.word	0x0800f000

08002194 <FACEID>:

void FACEID(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
	buzzer(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f001 fb68 	bl	8003870 <buzzer>
	exitmenu = Delaymenu;
 80021a0:	4bae      	ldr	r3, [pc, #696]	@ (800245c <FACEID+0x2c8>)
 80021a2:	2214      	movs	r2, #20
 80021a4:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80021a6:	23ff      	movs	r3, #255	@ 0xff
 80021a8:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 80021aa:	4aad      	ldr	r2, [pc, #692]	@ (8002460 <FACEID+0x2cc>)
 80021ac:	49ad      	ldr	r1, [pc, #692]	@ (8002464 <FACEID+0x2d0>)
 80021ae:	48ae      	ldr	r0, [pc, #696]	@ (8002468 <FACEID+0x2d4>)
 80021b0:	f7fe f924 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80021b4:	e378      	b.n	80028a8 <FACEID+0x714>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f7fe fa7a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80021bc:	4603      	mov	r3, r0
 80021be:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 80021c0:	7a3b      	ldrb	r3, [r7, #8]
 80021c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80021c4:	d127      	bne.n	8002216 <FACEID+0x82>
		{
			buzzer(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f001 fb52 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 80021cc:	4ba3      	ldr	r3, [pc, #652]	@ (800245c <FACEID+0x2c8>)
 80021ce:	2214      	movs	r2, #20
 80021d0:	701a      	strb	r2, [r3, #0]
			status++;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	3301      	adds	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d801      	bhi.n	80021e2 <FACEID+0x4e>
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	e000      	b.n	80021e4 <FACEID+0x50>
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
			switch (status)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <FACEID+0x5e>
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d006      	beq.n	80021fe <FACEID+0x6a>
 80021f0:	e00b      	b.n	800220a <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80021f2:	4a9e      	ldr	r2, [pc, #632]	@ (800246c <FACEID+0x2d8>)
 80021f4:	499b      	ldr	r1, [pc, #620]	@ (8002464 <FACEID+0x2d0>)
 80021f6:	489c      	ldr	r0, [pc, #624]	@ (8002468 <FACEID+0x2d4>)
 80021f8:	f7fe f900 	bl	80003fc <CLCD_I2C_Display>
				break;
 80021fc:	e00b      	b.n	8002216 <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 80021fe:	4a9c      	ldr	r2, [pc, #624]	@ (8002470 <FACEID+0x2dc>)
 8002200:	4998      	ldr	r1, [pc, #608]	@ (8002464 <FACEID+0x2d0>)
 8002202:	4899      	ldr	r0, [pc, #612]	@ (8002468 <FACEID+0x2d4>)
 8002204:	f7fe f8fa 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002208:	e005      	b.n	8002216 <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 800220a:	4a9a      	ldr	r2, [pc, #616]	@ (8002474 <FACEID+0x2e0>)
 800220c:	4995      	ldr	r1, [pc, #596]	@ (8002464 <FACEID+0x2d0>)
 800220e:	4896      	ldr	r0, [pc, #600]	@ (8002468 <FACEID+0x2d4>)
 8002210:	f7fe f8f4 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002214:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002216:	7a3b      	ldrb	r3, [r7, #8]
 8002218:	2b23      	cmp	r3, #35	@ 0x23
 800221a:	f040 8345 	bne.w	80028a8 <FACEID+0x714>
		{
			buzzer(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f001 fb26 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 8002224:	4b8d      	ldr	r3, [pc, #564]	@ (800245c <FACEID+0x2c8>)
 8002226:	2214      	movs	r2, #20
 8002228:	701a      	strb	r2, [r3, #0]
			switch (status)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <FACEID+0xa4>
 8002230:	2b01      	cmp	r3, #1
 8002232:	f000 813f 	beq.w	80024b4 <FACEID+0x320>
 8002236:	e333      	b.n	80028a0 <FACEID+0x70c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002238:	4a8f      	ldr	r2, [pc, #572]	@ (8002478 <FACEID+0x2e4>)
 800223a:	4990      	ldr	r1, [pc, #576]	@ (800247c <FACEID+0x2e8>)
 800223c:	488a      	ldr	r0, [pc, #552]	@ (8002468 <FACEID+0x2d4>)
 800223e:	f7fe f8dd 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 800224a:	e0fc      	b.n	8002446 <FACEID+0x2b2>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800224c:	200a      	movs	r0, #10
 800224e:	f7fe fa2f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002252:	4603      	mov	r3, r0
 8002254:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002256:	4b81      	ldr	r3, [pc, #516]	@ (800245c <FACEID+0x2c8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <FACEID+0xda>
					{
						CLCD_I2C_Clear(&LCD1);
 800225e:	4882      	ldr	r0, [pc, #520]	@ (8002468 <FACEID+0x2d4>)
 8002260:	f7fe f8bc 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002264:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002268:	f002 f810 	bl	800428c <HAL_Delay>
						return;
 800226c:	e324      	b.n	80028b8 <FACEID+0x724>
					}
					if (key_pressed == '*')
 800226e:	7a3b      	ldrb	r3, [r7, #8]
 8002270:	2b2a      	cmp	r3, #42	@ 0x2a
 8002272:	d13d      	bne.n	80022f0 <FACEID+0x15c>
					{
						buzzer(1);
 8002274:	2001      	movs	r0, #1
 8002276:	f001 fafb 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 800227a:	4b78      	ldr	r3, [pc, #480]	@ (800245c <FACEID+0x2c8>)
 800227c:	2214      	movs	r2, #20
 800227e:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	3301      	adds	r3, #1
 8002284:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002286:	7bbb      	ldrb	r3, [r7, #14]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d801      	bhi.n	8002290 <FACEID+0xfc>
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	e000      	b.n	8002292 <FACEID+0xfe>
 8002290:	2300      	movs	r3, #0
 8002292:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	3b01      	subs	r3, #1
 8002298:	2b03      	cmp	r3, #3
 800229a:	d823      	bhi.n	80022e4 <FACEID+0x150>
 800229c:	a201      	add	r2, pc, #4	@ (adr r2, 80022a4 <FACEID+0x110>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022c1 	.word	0x080022c1
 80022ac:	080022cd 	.word	0x080022cd
 80022b0:	080022d9 	.word	0x080022d9
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80022b4:	4a72      	ldr	r2, [pc, #456]	@ (8002480 <FACEID+0x2ec>)
 80022b6:	4973      	ldr	r1, [pc, #460]	@ (8002484 <FACEID+0x2f0>)
 80022b8:	486b      	ldr	r0, [pc, #428]	@ (8002468 <FACEID+0x2d4>)
 80022ba:	f7fe f89f 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022be:	e017      	b.n	80022f0 <FACEID+0x15c>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80022c0:	4a71      	ldr	r2, [pc, #452]	@ (8002488 <FACEID+0x2f4>)
 80022c2:	4970      	ldr	r1, [pc, #448]	@ (8002484 <FACEID+0x2f0>)
 80022c4:	4868      	ldr	r0, [pc, #416]	@ (8002468 <FACEID+0x2d4>)
 80022c6:	f7fe f899 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022ca:	e011      	b.n	80022f0 <FACEID+0x15c>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80022cc:	4a6f      	ldr	r2, [pc, #444]	@ (800248c <FACEID+0x2f8>)
 80022ce:	496d      	ldr	r1, [pc, #436]	@ (8002484 <FACEID+0x2f0>)
 80022d0:	4865      	ldr	r0, [pc, #404]	@ (8002468 <FACEID+0x2d4>)
 80022d2:	f7fe f893 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022d6:	e00b      	b.n	80022f0 <FACEID+0x15c>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80022d8:	4a6d      	ldr	r2, [pc, #436]	@ (8002490 <FACEID+0x2fc>)
 80022da:	496a      	ldr	r1, [pc, #424]	@ (8002484 <FACEID+0x2f0>)
 80022dc:	4862      	ldr	r0, [pc, #392]	@ (8002468 <FACEID+0x2d4>)
 80022de:	f7fe f88d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022e2:	e005      	b.n	80022f0 <FACEID+0x15c>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 80022e4:	4a63      	ldr	r2, [pc, #396]	@ (8002474 <FACEID+0x2e0>)
 80022e6:	4967      	ldr	r1, [pc, #412]	@ (8002484 <FACEID+0x2f0>)
 80022e8:	485f      	ldr	r0, [pc, #380]	@ (8002468 <FACEID+0x2d4>)
 80022ea:	f7fe f887 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022ee:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80022f0:	7a3b      	ldrb	r3, [r7, #8]
 80022f2:	2b23      	cmp	r3, #35	@ 0x23
 80022f4:	f040 80a7 	bne.w	8002446 <FACEID+0x2b2>
					{
						buzzer(1);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f001 fab9 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <FACEID+0x2c8>)
 8002300:	2214      	movs	r2, #20
 8002302:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	3b01      	subs	r3, #1
 800230c:	2b03      	cmp	r3, #3
 800230e:	f200 8097 	bhi.w	8002440 <FACEID+0x2ac>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <FACEID+0x184>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	0800236f 	.word	0x0800236f
 8002320:	080023b5 	.word	0x080023b5
 8002324:	080023fb 	.word	0x080023fb
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fd90 	bl	8002e50 <checkfaceid>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d011      	beq.n	800235a <FACEID+0x1c6>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 8002336:	4a57      	ldr	r2, [pc, #348]	@ (8002494 <FACEID+0x300>)
 8002338:	4957      	ldr	r1, [pc, #348]	@ (8002498 <FACEID+0x304>)
 800233a:	484b      	ldr	r0, [pc, #300]	@ (8002468 <FACEID+0x2d4>)
 800233c:	f7fe f85e 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002340:	2003      	movs	r0, #3
 8002342:	f001 fa95 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 8002346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800234a:	f001 ff9f 	bl	800428c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 800234e:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <FACEID+0x2ec>)
 8002350:	494c      	ldr	r1, [pc, #304]	@ (8002484 <FACEID+0x2f0>)
 8002352:	4845      	ldr	r0, [pc, #276]	@ (8002468 <FACEID+0x2d4>)
 8002354:	f7fe f852 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 8002358:	e075      	b.n	8002446 <FACEID+0x2b2>
								addface(keyadd1);
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fcb5 	bl	8002ccc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002362:	4a47      	ldr	r2, [pc, #284]	@ (8002480 <FACEID+0x2ec>)
 8002364:	4947      	ldr	r1, [pc, #284]	@ (8002484 <FACEID+0x2f0>)
 8002366:	4840      	ldr	r0, [pc, #256]	@ (8002468 <FACEID+0x2d4>)
 8002368:	f7fe f848 	bl	80003fc <CLCD_I2C_Display>
							break;
 800236c:	e06b      	b.n	8002446 <FACEID+0x2b2>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fd6d 	bl	8002e50 <checkfaceid>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d011      	beq.n	80023a0 <FACEID+0x20c>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 800237c:	4a47      	ldr	r2, [pc, #284]	@ (800249c <FACEID+0x308>)
 800237e:	4948      	ldr	r1, [pc, #288]	@ (80024a0 <FACEID+0x30c>)
 8002380:	4839      	ldr	r0, [pc, #228]	@ (8002468 <FACEID+0x2d4>)
 8002382:	f7fe f83b 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002386:	2003      	movs	r0, #3
 8002388:	f001 fa72 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 800238c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002390:	f001 ff7c 	bl	800428c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002394:	4a3c      	ldr	r2, [pc, #240]	@ (8002488 <FACEID+0x2f4>)
 8002396:	493b      	ldr	r1, [pc, #236]	@ (8002484 <FACEID+0x2f0>)
 8002398:	4833      	ldr	r0, [pc, #204]	@ (8002468 <FACEID+0x2d4>)
 800239a:	f7fe f82f 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800239e:	e052      	b.n	8002446 <FACEID+0x2b2>
								addface(keyadd1);
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fc92 	bl	8002ccc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80023a8:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <FACEID+0x2f4>)
 80023aa:	4936      	ldr	r1, [pc, #216]	@ (8002484 <FACEID+0x2f0>)
 80023ac:	482e      	ldr	r0, [pc, #184]	@ (8002468 <FACEID+0x2d4>)
 80023ae:	f7fe f825 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023b2:	e048      	b.n	8002446 <FACEID+0x2b2>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 80023b4:	79bb      	ldrb	r3, [r7, #6]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fd4a 	bl	8002e50 <checkfaceid>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <FACEID+0x252>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 80023c2:	4a38      	ldr	r2, [pc, #224]	@ (80024a4 <FACEID+0x310>)
 80023c4:	4938      	ldr	r1, [pc, #224]	@ (80024a8 <FACEID+0x314>)
 80023c6:	4828      	ldr	r0, [pc, #160]	@ (8002468 <FACEID+0x2d4>)
 80023c8:	f7fe f818 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f001 fa4f 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 80023d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d6:	f001 ff59 	bl	800428c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80023da:	4a2c      	ldr	r2, [pc, #176]	@ (800248c <FACEID+0x2f8>)
 80023dc:	4929      	ldr	r1, [pc, #164]	@ (8002484 <FACEID+0x2f0>)
 80023de:	4822      	ldr	r0, [pc, #136]	@ (8002468 <FACEID+0x2d4>)
 80023e0:	f7fe f80c 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 80023e4:	e02f      	b.n	8002446 <FACEID+0x2b2>
								addface(keyadd1);
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fc6f 	bl	8002ccc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <FACEID+0x2f8>)
 80023f0:	4924      	ldr	r1, [pc, #144]	@ (8002484 <FACEID+0x2f0>)
 80023f2:	481d      	ldr	r0, [pc, #116]	@ (8002468 <FACEID+0x2d4>)
 80023f4:	f7fe f802 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023f8:	e025      	b.n	8002446 <FACEID+0x2b2>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd27 	bl	8002e50 <checkfaceid>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d011      	beq.n	800242c <FACEID+0x298>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002408:	4a28      	ldr	r2, [pc, #160]	@ (80024ac <FACEID+0x318>)
 800240a:	4929      	ldr	r1, [pc, #164]	@ (80024b0 <FACEID+0x31c>)
 800240c:	4816      	ldr	r0, [pc, #88]	@ (8002468 <FACEID+0x2d4>)
 800240e:	f7fd fff5 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002412:	2003      	movs	r0, #3
 8002414:	f001 fa2c 	bl	8003870 <buzzer>
								HAL_Delay(1000);
 8002418:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800241c:	f001 ff36 	bl	800428c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002420:	4a1b      	ldr	r2, [pc, #108]	@ (8002490 <FACEID+0x2fc>)
 8002422:	4918      	ldr	r1, [pc, #96]	@ (8002484 <FACEID+0x2f0>)
 8002424:	4810      	ldr	r0, [pc, #64]	@ (8002468 <FACEID+0x2d4>)
 8002426:	f7fd ffe9 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 800242a:	e00c      	b.n	8002446 <FACEID+0x2b2>
								addface(keyadd1);
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fc4c 	bl	8002ccc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002434:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <FACEID+0x2fc>)
 8002436:	4913      	ldr	r1, [pc, #76]	@ (8002484 <FACEID+0x2f0>)
 8002438:	480b      	ldr	r0, [pc, #44]	@ (8002468 <FACEID+0x2d4>)
 800243a:	f7fd ffdf 	bl	80003fc <CLCD_I2C_Display>
							break;
 800243e:	e002      	b.n	8002446 <FACEID+0x2b2>
						default:
							back = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	737b      	strb	r3, [r7, #13]
							break;
 8002444:	bf00      	nop
				while (back == 1)
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	2b01      	cmp	r3, #1
 800244a:	f43f aeff 	beq.w	800224c <FACEID+0xb8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <FACEID+0x2d8>)
 8002450:	4904      	ldr	r1, [pc, #16]	@ (8002464 <FACEID+0x2d0>)
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <FACEID+0x2d4>)
 8002454:	f7fd ffd2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002458:	e226      	b.n	80028a8 <FACEID+0x714>
 800245a:	bf00      	nop
 800245c:	20000020 	.word	0x20000020
 8002460:	0800dabc 	.word	0x0800dabc
 8002464:	0800dcfc 	.word	0x0800dcfc
 8002468:	200003d8 	.word	0x200003d8
 800246c:	0800dd10 	.word	0x0800dd10
 8002470:	0800dd20 	.word	0x0800dd20
 8002474:	0800db08 	.word	0x0800db08
 8002478:	0800db10 	.word	0x0800db10
 800247c:	0800db1c 	.word	0x0800db1c
 8002480:	0800dd34 	.word	0x0800dd34
 8002484:	0800dd40 	.word	0x0800dd40
 8002488:	0800dd4c 	.word	0x0800dd4c
 800248c:	0800dd58 	.word	0x0800dd58
 8002490:	0800dd64 	.word	0x0800dd64
 8002494:	0800dd70 	.word	0x0800dd70
 8002498:	0800dd84 	.word	0x0800dd84
 800249c:	0800dd94 	.word	0x0800dd94
 80024a0:	0800dda8 	.word	0x0800dda8
 80024a4:	0800ddb8 	.word	0x0800ddb8
 80024a8:	0800ddcc 	.word	0x0800ddcc
 80024ac:	0800dddc 	.word	0x0800dddc
 80024b0:	0800ddf0 	.word	0x0800ddf0
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80024b4:	4aa8      	ldr	r2, [pc, #672]	@ (8002758 <FACEID+0x5c4>)
 80024b6:	49a9      	ldr	r1, [pc, #676]	@ (800275c <FACEID+0x5c8>)
 80024b8:	48a9      	ldr	r0, [pc, #676]	@ (8002760 <FACEID+0x5cc>)
 80024ba:	f7fd ff9f 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 80024c6:	e1e1      	b.n	800288c <FACEID+0x6f8>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7fe f8f1 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80024ce:	4603      	mov	r3, r0
 80024d0:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 80024d2:	4ba4      	ldr	r3, [pc, #656]	@ (8002764 <FACEID+0x5d0>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <FACEID+0x356>
					{
						CLCD_I2C_Clear(&LCD1);
 80024da:	48a1      	ldr	r0, [pc, #644]	@ (8002760 <FACEID+0x5cc>)
 80024dc:	f7fd ff7e 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	f001 fed2 	bl	800428c <HAL_Delay>
						return;
 80024e8:	e1e6      	b.n	80028b8 <FACEID+0x724>
					}
					if (key_pressed == '*')
 80024ea:	7a3b      	ldrb	r3, [r7, #8]
 80024ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80024ee:	d127      	bne.n	8002540 <FACEID+0x3ac>
					{
						buzzer(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f001 f9bd 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 80024f6:	4b9b      	ldr	r3, [pc, #620]	@ (8002764 <FACEID+0x5d0>)
 80024f8:	2214      	movs	r2, #20
 80024fa:	701a      	strb	r2, [r3, #0]
						statusrm++;
 80024fc:	7b3b      	ldrb	r3, [r7, #12]
 80024fe:	3301      	adds	r3, #1
 8002500:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 8002502:	7b3b      	ldrb	r3, [r7, #12]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d801      	bhi.n	800250c <FACEID+0x378>
 8002508:	7b3b      	ldrb	r3, [r7, #12]
 800250a:	e000      	b.n	800250e <FACEID+0x37a>
 800250c:	2300      	movs	r3, #0
 800250e:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 8002510:	7b3b      	ldrb	r3, [r7, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d002      	beq.n	800251c <FACEID+0x388>
 8002516:	2b02      	cmp	r3, #2
 8002518:	d006      	beq.n	8002528 <FACEID+0x394>
 800251a:	e00b      	b.n	8002534 <FACEID+0x3a0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800251c:	4a92      	ldr	r2, [pc, #584]	@ (8002768 <FACEID+0x5d4>)
 800251e:	4993      	ldr	r1, [pc, #588]	@ (800276c <FACEID+0x5d8>)
 8002520:	488f      	ldr	r0, [pc, #572]	@ (8002760 <FACEID+0x5cc>)
 8002522:	f7fd ff6b 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002526:	e00b      	b.n	8002540 <FACEID+0x3ac>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 8002528:	4a91      	ldr	r2, [pc, #580]	@ (8002770 <FACEID+0x5dc>)
 800252a:	4990      	ldr	r1, [pc, #576]	@ (800276c <FACEID+0x5d8>)
 800252c:	488c      	ldr	r0, [pc, #560]	@ (8002760 <FACEID+0x5cc>)
 800252e:	f7fd ff65 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002532:	e005      	b.n	8002540 <FACEID+0x3ac>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 8002534:	4a8f      	ldr	r2, [pc, #572]	@ (8002774 <FACEID+0x5e0>)
 8002536:	498d      	ldr	r1, [pc, #564]	@ (800276c <FACEID+0x5d8>)
 8002538:	4889      	ldr	r0, [pc, #548]	@ (8002760 <FACEID+0x5cc>)
 800253a:	f7fd ff5f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800253e:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002540:	7a3b      	ldrb	r3, [r7, #8]
 8002542:	2b23      	cmp	r3, #35	@ 0x23
 8002544:	f040 81a2 	bne.w	800288c <FACEID+0x6f8>
					{
						buzzer(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f001 f991 	bl	8003870 <buzzer>
						exitmenu = Delaymenu;
 800254e:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <FACEID+0x5d0>)
 8002550:	2214      	movs	r2, #20
 8002552:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 8002554:	7b3b      	ldrb	r3, [r7, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d003      	beq.n	8002562 <FACEID+0x3ce>
 800255a:	2b02      	cmp	r3, #2
 800255c:	f000 8161 	beq.w	8002822 <FACEID+0x68e>
 8002560:	e191      	b.n	8002886 <FACEID+0x6f2>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002562:	4a7d      	ldr	r2, [pc, #500]	@ (8002758 <FACEID+0x5c4>)
 8002564:	497d      	ldr	r1, [pc, #500]	@ (800275c <FACEID+0x5c8>)
 8002566:	487e      	ldr	r0, [pc, #504]	@ (8002760 <FACEID+0x5cc>)
 8002568:	f7fd ff48 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 8002570:	2301      	movs	r3, #1
 8002572:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 8002574:	e14b      	b.n	800280e <FACEID+0x67a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002576:	200a      	movs	r0, #10
 8002578:	f7fe f89a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800257c:	4603      	mov	r3, r0
 800257e:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 8002580:	4b78      	ldr	r3, [pc, #480]	@ (8002764 <FACEID+0x5d0>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <FACEID+0x404>
								{
									CLCD_I2C_Clear(&LCD1);
 8002588:	4875      	ldr	r0, [pc, #468]	@ (8002760 <FACEID+0x5cc>)
 800258a:	f7fd ff27 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800258e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002592:	f001 fe7b 	bl	800428c <HAL_Delay>
									return;
 8002596:	e18f      	b.n	80028b8 <FACEID+0x724>
								}
								if (key_pressed == '*')
 8002598:	7a3b      	ldrb	r3, [r7, #8]
 800259a:	2b2a      	cmp	r3, #42	@ 0x2a
 800259c:	d13c      	bne.n	8002618 <FACEID+0x484>
								{
									buzzer(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f001 f966 	bl	8003870 <buzzer>
									exitmenu = Delaymenu;
 80025a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002764 <FACEID+0x5d0>)
 80025a6:	2214      	movs	r2, #20
 80025a8:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 80025aa:	7abb      	ldrb	r3, [r7, #10]
 80025ac:	3301      	adds	r3, #1
 80025ae:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d801      	bhi.n	80025ba <FACEID+0x426>
 80025b6:	7abb      	ldrb	r3, [r7, #10]
 80025b8:	e000      	b.n	80025bc <FACEID+0x428>
 80025ba:	2300      	movs	r3, #0
 80025bc:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 80025be:	7abb      	ldrb	r3, [r7, #10]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d822      	bhi.n	800260c <FACEID+0x478>
 80025c6:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <FACEID+0x438>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025f5 	.word	0x080025f5
 80025d8:	08002601 	.word	0x08002601
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80025dc:	4a66      	ldr	r2, [pc, #408]	@ (8002778 <FACEID+0x5e4>)
 80025de:	4967      	ldr	r1, [pc, #412]	@ (800277c <FACEID+0x5e8>)
 80025e0:	485f      	ldr	r0, [pc, #380]	@ (8002760 <FACEID+0x5cc>)
 80025e2:	f7fd ff0b 	bl	80003fc <CLCD_I2C_Display>
										break;
 80025e6:	e017      	b.n	8002618 <FACEID+0x484>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80025e8:	4a65      	ldr	r2, [pc, #404]	@ (8002780 <FACEID+0x5ec>)
 80025ea:	4964      	ldr	r1, [pc, #400]	@ (800277c <FACEID+0x5e8>)
 80025ec:	485c      	ldr	r0, [pc, #368]	@ (8002760 <FACEID+0x5cc>)
 80025ee:	f7fd ff05 	bl	80003fc <CLCD_I2C_Display>
										break;
 80025f2:	e011      	b.n	8002618 <FACEID+0x484>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80025f4:	4a63      	ldr	r2, [pc, #396]	@ (8002784 <FACEID+0x5f0>)
 80025f6:	4961      	ldr	r1, [pc, #388]	@ (800277c <FACEID+0x5e8>)
 80025f8:	4859      	ldr	r0, [pc, #356]	@ (8002760 <FACEID+0x5cc>)
 80025fa:	f7fd feff 	bl	80003fc <CLCD_I2C_Display>
										break;
 80025fe:	e00b      	b.n	8002618 <FACEID+0x484>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002600:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <FACEID+0x5f4>)
 8002602:	495e      	ldr	r1, [pc, #376]	@ (800277c <FACEID+0x5e8>)
 8002604:	4856      	ldr	r0, [pc, #344]	@ (8002760 <FACEID+0x5cc>)
 8002606:	f7fd fef9 	bl	80003fc <CLCD_I2C_Display>
										break;
 800260a:	e005      	b.n	8002618 <FACEID+0x484>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 800260c:	4a5f      	ldr	r2, [pc, #380]	@ (800278c <FACEID+0x5f8>)
 800260e:	495b      	ldr	r1, [pc, #364]	@ (800277c <FACEID+0x5e8>)
 8002610:	4853      	ldr	r0, [pc, #332]	@ (8002760 <FACEID+0x5cc>)
 8002612:	f7fd fef3 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002616:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 8002618:	7a3b      	ldrb	r3, [r7, #8]
 800261a:	2b23      	cmp	r3, #35	@ 0x23
 800261c:	f040 80f7 	bne.w	800280e <FACEID+0x67a>
								{
									buzzer(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f001 f925 	bl	8003870 <buzzer>
									exitmenu = Delaymenu;
 8002626:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <FACEID+0x5d0>)
 8002628:	2214      	movs	r2, #20
 800262a:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 800262c:	7abb      	ldrb	r3, [r7, #10]
 800262e:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	3b01      	subs	r3, #1
 8002634:	2b03      	cmp	r3, #3
 8002636:	f200 80e7 	bhi.w	8002808 <FACEID+0x674>
 800263a:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <FACEID+0x4ac>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	080026a9 	.word	0x080026a9
 8002648:	08002701 	.word	0x08002701
 800264c:	080027b1 	.word	0x080027b1
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fbfc 	bl	8002e50 <checkfaceid>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d111      	bne.n	8002682 <FACEID+0x4ee>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 800265e:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <FACEID+0x5fc>)
 8002660:	494c      	ldr	r1, [pc, #304]	@ (8002794 <FACEID+0x600>)
 8002662:	483f      	ldr	r0, [pc, #252]	@ (8002760 <FACEID+0x5cc>)
 8002664:	f7fd feca 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002668:	2003      	movs	r0, #3
 800266a:	f001 f901 	bl	8003870 <buzzer>
											HAL_Delay(1000);
 800266e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002672:	f001 fe0b 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002676:	4a40      	ldr	r2, [pc, #256]	@ (8002778 <FACEID+0x5e4>)
 8002678:	4940      	ldr	r1, [pc, #256]	@ (800277c <FACEID+0x5e8>)
 800267a:	4839      	ldr	r0, [pc, #228]	@ (8002760 <FACEID+0x5cc>)
 800267c:	f7fd febe 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 8002680:	e0c5      	b.n	800280e <FACEID+0x67a>
											removeface(keyrm1);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fb83 	bl	8002d90 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 800268a:	4a43      	ldr	r2, [pc, #268]	@ (8002798 <FACEID+0x604>)
 800268c:	4943      	ldr	r1, [pc, #268]	@ (800279c <FACEID+0x608>)
 800268e:	4834      	ldr	r0, [pc, #208]	@ (8002760 <FACEID+0x5cc>)
 8002690:	f7fd feb4 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002698:	f001 fdf8 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 800269c:	4a36      	ldr	r2, [pc, #216]	@ (8002778 <FACEID+0x5e4>)
 800269e:	4937      	ldr	r1, [pc, #220]	@ (800277c <FACEID+0x5e8>)
 80026a0:	482f      	ldr	r0, [pc, #188]	@ (8002760 <FACEID+0x5cc>)
 80026a2:	f7fd feab 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026a6:	e0b2      	b.n	800280e <FACEID+0x67a>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fbd0 	bl	8002e50 <checkfaceid>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d111      	bne.n	80026da <FACEID+0x546>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 80026b6:	4a36      	ldr	r2, [pc, #216]	@ (8002790 <FACEID+0x5fc>)
 80026b8:	4939      	ldr	r1, [pc, #228]	@ (80027a0 <FACEID+0x60c>)
 80026ba:	4829      	ldr	r0, [pc, #164]	@ (8002760 <FACEID+0x5cc>)
 80026bc:	f7fd fe9e 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f001 f8d5 	bl	8003870 <buzzer>
											HAL_Delay(1000);
 80026c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ca:	f001 fddf 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80026ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <FACEID+0x5ec>)
 80026d0:	492a      	ldr	r1, [pc, #168]	@ (800277c <FACEID+0x5e8>)
 80026d2:	4823      	ldr	r0, [pc, #140]	@ (8002760 <FACEID+0x5cc>)
 80026d4:	f7fd fe92 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 80026d8:	e099      	b.n	800280e <FACEID+0x67a>
											removeface(keyrm1);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fb57 	bl	8002d90 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 80026e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002798 <FACEID+0x604>)
 80026e4:	492f      	ldr	r1, [pc, #188]	@ (80027a4 <FACEID+0x610>)
 80026e6:	481e      	ldr	r0, [pc, #120]	@ (8002760 <FACEID+0x5cc>)
 80026e8:	f7fd fe88 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80026ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026f0:	f001 fdcc 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <FACEID+0x5ec>)
 80026f6:	4921      	ldr	r1, [pc, #132]	@ (800277c <FACEID+0x5e8>)
 80026f8:	4819      	ldr	r0, [pc, #100]	@ (8002760 <FACEID+0x5cc>)
 80026fa:	f7fd fe7f 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026fe:	e086      	b.n	800280e <FACEID+0x67a>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fba4 	bl	8002e50 <checkfaceid>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d111      	bne.n	8002732 <FACEID+0x59e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 800270e:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <FACEID+0x5fc>)
 8002710:	4925      	ldr	r1, [pc, #148]	@ (80027a8 <FACEID+0x614>)
 8002712:	4813      	ldr	r0, [pc, #76]	@ (8002760 <FACEID+0x5cc>)
 8002714:	f7fd fe72 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002718:	2003      	movs	r0, #3
 800271a:	f001 f8a9 	bl	8003870 <buzzer>
											HAL_Delay(1000);
 800271e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002722:	f001 fdb3 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <FACEID+0x5f0>)
 8002728:	4914      	ldr	r1, [pc, #80]	@ (800277c <FACEID+0x5e8>)
 800272a:	480d      	ldr	r0, [pc, #52]	@ (8002760 <FACEID+0x5cc>)
 800272c:	f7fd fe66 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 8002730:	e06d      	b.n	800280e <FACEID+0x67a>
											removeface(keyrm1);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fb2b 	bl	8002d90 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 800273a:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <FACEID+0x604>)
 800273c:	491b      	ldr	r1, [pc, #108]	@ (80027ac <FACEID+0x618>)
 800273e:	4808      	ldr	r0, [pc, #32]	@ (8002760 <FACEID+0x5cc>)
 8002740:	f7fd fe5c 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002748:	f001 fda0 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 800274c:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <FACEID+0x5f0>)
 800274e:	490b      	ldr	r1, [pc, #44]	@ (800277c <FACEID+0x5e8>)
 8002750:	4803      	ldr	r0, [pc, #12]	@ (8002760 <FACEID+0x5cc>)
 8002752:	f7fd fe53 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002756:	e05a      	b.n	800280e <FACEID+0x67a>
 8002758:	0800db10 	.word	0x0800db10
 800275c:	0800db1c 	.word	0x0800db1c
 8002760:	200003d8 	.word	0x200003d8
 8002764:	20000020 	.word	0x20000020
 8002768:	0800de00 	.word	0x0800de00
 800276c:	0800de14 	.word	0x0800de14
 8002770:	0800dba0 	.word	0x0800dba0
 8002774:	0800db08 	.word	0x0800db08
 8002778:	0800de24 	.word	0x0800de24
 800277c:	0800dbc0 	.word	0x0800dbc0
 8002780:	0800de38 	.word	0x0800de38
 8002784:	0800de4c 	.word	0x0800de4c
 8002788:	0800de60 	.word	0x0800de60
 800278c:	0800de74 	.word	0x0800de74
 8002790:	0800de80 	.word	0x0800de80
 8002794:	0800de90 	.word	0x0800de90
 8002798:	0800dc24 	.word	0x0800dc24
 800279c:	0800dea0 	.word	0x0800dea0
 80027a0:	0800deb0 	.word	0x0800deb0
 80027a4:	0800dec0 	.word	0x0800dec0
 80027a8:	0800ded0 	.word	0x0800ded0
 80027ac:	0800dee0 	.word	0x0800dee0
									case 4:
										if (checkfaceid(keyrm1) == 0)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fb4c 	bl	8002e50 <checkfaceid>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d111      	bne.n	80027e2 <FACEID+0x64e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 80027be:	4a40      	ldr	r2, [pc, #256]	@ (80028c0 <FACEID+0x72c>)
 80027c0:	4940      	ldr	r1, [pc, #256]	@ (80028c4 <FACEID+0x730>)
 80027c2:	4841      	ldr	r0, [pc, #260]	@ (80028c8 <FACEID+0x734>)
 80027c4:	f7fd fe1a 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80027c8:	2003      	movs	r0, #3
 80027ca:	f001 f851 	bl	8003870 <buzzer>
											HAL_Delay(1000);
 80027ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027d2:	f001 fd5b 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80027d6:	4a3d      	ldr	r2, [pc, #244]	@ (80028cc <FACEID+0x738>)
 80027d8:	493d      	ldr	r1, [pc, #244]	@ (80028d0 <FACEID+0x73c>)
 80027da:	483b      	ldr	r0, [pc, #236]	@ (80028c8 <FACEID+0x734>)
 80027dc:	f7fd fe0e 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 80027e0:	e015      	b.n	800280e <FACEID+0x67a>
											removeface(keyrm1);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fad3 	bl	8002d90 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 80027ea:	4a3a      	ldr	r2, [pc, #232]	@ (80028d4 <FACEID+0x740>)
 80027ec:	493a      	ldr	r1, [pc, #232]	@ (80028d8 <FACEID+0x744>)
 80027ee:	4836      	ldr	r0, [pc, #216]	@ (80028c8 <FACEID+0x734>)
 80027f0:	f7fd fe04 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80027f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027f8:	f001 fd48 	bl	800428c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80027fc:	4a33      	ldr	r2, [pc, #204]	@ (80028cc <FACEID+0x738>)
 80027fe:	4934      	ldr	r1, [pc, #208]	@ (80028d0 <FACEID+0x73c>)
 8002800:	4831      	ldr	r0, [pc, #196]	@ (80028c8 <FACEID+0x734>)
 8002802:	f7fd fdfb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002806:	e002      	b.n	800280e <FACEID+0x67a>
									default:
										backrm1 = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	727b      	strb	r3, [r7, #9]
										break;
 800280c:	bf00      	nop
							while (backrm1 == 1)
 800280e:	7a7b      	ldrb	r3, [r7, #9]
 8002810:	2b01      	cmp	r3, #1
 8002812:	f43f aeb0 	beq.w	8002576 <FACEID+0x3e2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002816:	4a31      	ldr	r2, [pc, #196]	@ (80028dc <FACEID+0x748>)
 8002818:	4931      	ldr	r1, [pc, #196]	@ (80028e0 <FACEID+0x74c>)
 800281a:	482b      	ldr	r0, [pc, #172]	@ (80028c8 <FACEID+0x734>)
 800281c:	f7fd fdee 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002820:	e034      	b.n	800288c <FACEID+0x6f8>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 8002822:	4930      	ldr	r1, [pc, #192]	@ (80028e4 <FACEID+0x750>)
 8002824:	4830      	ldr	r0, [pc, #192]	@ (80028e8 <FACEID+0x754>)
 8002826:	f00a fc09 	bl	800d03c <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 800282a:	2107      	movs	r1, #7
 800282c:	482e      	ldr	r0, [pc, #184]	@ (80028e8 <FACEID+0x754>)
 800282e:	f009 ff6b 	bl	800c708 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002832:	4a2e      	ldr	r2, [pc, #184]	@ (80028ec <FACEID+0x758>)
 8002834:	492e      	ldr	r1, [pc, #184]	@ (80028f0 <FACEID+0x75c>)
 8002836:	4824      	ldr	r0, [pc, #144]	@ (80028c8 <FACEID+0x734>)
 8002838:	f7fd fde0 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 800283c:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <FACEID+0x760>)
 800283e:	223c      	movs	r2, #60	@ 0x3c
 8002840:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	2100      	movs	r1, #0
 8002846:	482c      	ldr	r0, [pc, #176]	@ (80028f8 <FACEID+0x764>)
 8002848:	f00a fc18 	bl	800d07c <memset>
							while(exitmenu != 0){
 800284c:	e013      	b.n	8002876 <FACEID+0x6e2>
								if(Rx_Buffer[0] == 'T'){
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <FACEID+0x764>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	2b54      	cmp	r3, #84	@ 0x54
 8002856:	d10e      	bne.n	8002876 <FACEID+0x6e2>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 8002858:	4a1e      	ldr	r2, [pc, #120]	@ (80028d4 <FACEID+0x740>)
 800285a:	4928      	ldr	r1, [pc, #160]	@ (80028fc <FACEID+0x768>)
 800285c:	481a      	ldr	r0, [pc, #104]	@ (80028c8 <FACEID+0x734>)
 800285e:	f7fd fdcd 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002862:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002866:	f001 fd11 	bl	800428c <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	2100      	movs	r1, #0
 800286e:	4822      	ldr	r0, [pc, #136]	@ (80028f8 <FACEID+0x764>)
 8002870:	f00a fc04 	bl	800d07c <memset>
									break;
 8002874:	e003      	b.n	800287e <FACEID+0x6ea>
							while(exitmenu != 0){
 8002876:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <FACEID+0x760>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e7      	bne.n	800284e <FACEID+0x6ba>
								}
							}
							exitmenu = 0;
 800287e:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <FACEID+0x760>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002884:	e002      	b.n	800288c <FACEID+0x6f8>
						default:
							backrm=0;
 8002886:	2300      	movs	r3, #0
 8002888:	72fb      	strb	r3, [r7, #11]
							break;
 800288a:	bf00      	nop
				while (backrm == 1)
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f43f ae1a 	beq.w	80024c8 <FACEID+0x334>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002894:	4a1a      	ldr	r2, [pc, #104]	@ (8002900 <FACEID+0x76c>)
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <FACEID+0x770>)
 8002898:	480b      	ldr	r0, [pc, #44]	@ (80028c8 <FACEID+0x734>)
 800289a:	f7fd fdaf 	bl	80003fc <CLCD_I2C_Display>
				break;
 800289e:	e003      	b.n	80028a8 <FACEID+0x714>
			default:
				exitmenu=0;
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <FACEID+0x760>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
				break;
 80028a6:	bf00      	nop
	while (exitmenu )
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <FACEID+0x760>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f ac82 	bne.w	80021b6 <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <FACEID+0x734>)
 80028b4:	f7fd fd92 	bl	80003dc <CLCD_I2C_Clear>
}
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	0800de80 	.word	0x0800de80
 80028c4:	0800def0 	.word	0x0800def0
 80028c8:	200003d8 	.word	0x200003d8
 80028cc:	0800de60 	.word	0x0800de60
 80028d0:	0800dbc0 	.word	0x0800dbc0
 80028d4:	0800dc24 	.word	0x0800dc24
 80028d8:	0800df00 	.word	0x0800df00
 80028dc:	0800de00 	.word	0x0800de00
 80028e0:	0800de14 	.word	0x0800de14
 80028e4:	0800df10 	.word	0x0800df10
 80028e8:	200003d0 	.word	0x200003d0
 80028ec:	0800da3c 	.word	0x0800da3c
 80028f0:	0800df18 	.word	0x0800df18
 80028f4:	20000020 	.word	0x20000020
 80028f8:	20000350 	.word	0x20000350
 80028fc:	0800df24 	.word	0x0800df24
 8002900:	0800dd20 	.word	0x0800dd20
 8002904:	0800dcfc 	.word	0x0800dcfc

08002908 <FINGER>:
void FINGER(void) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	buzzer(1);
 800290e:	2001      	movs	r0, #1
 8002910:	f000 ffae 	bl	8003870 <buzzer>
	exitmenu = Delaymenu;
 8002914:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <FINGER+0x108>)
 8002916:	2214      	movs	r2, #20
 8002918:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800291a:	23ff      	movs	r3, #255	@ 0xff
 800291c:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 800291e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a14 <FINGER+0x10c>)
 8002920:	493d      	ldr	r1, [pc, #244]	@ (8002a18 <FINGER+0x110>)
 8002922:	483e      	ldr	r0, [pc, #248]	@ (8002a1c <FINGER+0x114>)
 8002924:	f7fd fd6a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002928:	e068      	b.n	80029fc <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800292a:	200a      	movs	r0, #10
 800292c:	f7fd fec0 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002930:	4603      	mov	r3, r0
 8002932:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	2b2a      	cmp	r3, #42	@ 0x2a
 8002938:	d131      	bne.n	800299e <FINGER+0x96>
		{
			buzzer(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 ff98 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <FINGER+0x108>)
 8002942:	2214      	movs	r2, #20
 8002944:	701a      	strb	r2, [r3, #0]
			status++;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	3301      	adds	r3, #1
 800294a:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d801      	bhi.n	8002956 <FINGER+0x4e>
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	e000      	b.n	8002958 <FINGER+0x50>
 8002956:	2300      	movs	r3, #0
 8002958:	71fb      	strb	r3, [r7, #7]
			switch (status)
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d012      	beq.n	8002986 <FINGER+0x7e>
 8002960:	2b02      	cmp	r3, #2
 8002962:	dc16      	bgt.n	8002992 <FINGER+0x8a>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <FINGER+0x66>
 8002968:	2b01      	cmp	r3, #1
 800296a:	d006      	beq.n	800297a <FINGER+0x72>
 800296c:	e011      	b.n	8002992 <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 800296e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <FINGER+0x118>)
 8002970:	4929      	ldr	r1, [pc, #164]	@ (8002a18 <FINGER+0x110>)
 8002972:	482a      	ldr	r0, [pc, #168]	@ (8002a1c <FINGER+0x114>)
 8002974:	f7fd fd42 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002978:	e011      	b.n	800299e <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 800297a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <FINGER+0x11c>)
 800297c:	4926      	ldr	r1, [pc, #152]	@ (8002a18 <FINGER+0x110>)
 800297e:	4827      	ldr	r0, [pc, #156]	@ (8002a1c <FINGER+0x114>)
 8002980:	f7fd fd3c 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002984:	e00b      	b.n	800299e <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002986:	4a28      	ldr	r2, [pc, #160]	@ (8002a28 <FINGER+0x120>)
 8002988:	4923      	ldr	r1, [pc, #140]	@ (8002a18 <FINGER+0x110>)
 800298a:	4824      	ldr	r0, [pc, #144]	@ (8002a1c <FINGER+0x114>)
 800298c:	f7fd fd36 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002990:	e005      	b.n	800299e <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002992:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <FINGER+0x124>)
 8002994:	4920      	ldr	r1, [pc, #128]	@ (8002a18 <FINGER+0x110>)
 8002996:	4821      	ldr	r0, [pc, #132]	@ (8002a1c <FINGER+0x114>)
 8002998:	f7fd fd30 	bl	80003fc <CLCD_I2C_Display>
				break;
 800299c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	2b23      	cmp	r3, #35	@ 0x23
 80029a2:	d12b      	bne.n	80029fc <FINGER+0xf4>
		{
			buzzer(1);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f000 ff63 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <FINGER+0x108>)
 80029ac:	2214      	movs	r2, #20
 80029ae:	701a      	strb	r2, [r3, #0]
			switch (status)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d016      	beq.n	80029e4 <FINGER+0xdc>
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	dc1c      	bgt.n	80029f4 <FINGER+0xec>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <FINGER+0xbc>
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d008      	beq.n	80029d4 <FINGER+0xcc>
 80029c2:	e017      	b.n	80029f4 <FINGER+0xec>
			{
			case 0:
                add_finger();
 80029c4:	f000 fa80 	bl	8002ec8 <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 80029c8:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <FINGER+0x118>)
 80029ca:	4913      	ldr	r1, [pc, #76]	@ (8002a18 <FINGER+0x110>)
 80029cc:	4813      	ldr	r0, [pc, #76]	@ (8002a1c <FINGER+0x114>)
 80029ce:	f7fd fd15 	bl	80003fc <CLCD_I2C_Display>
                break;
 80029d2:	e013      	b.n	80029fc <FINGER+0xf4>
            case 1:
                remove_id_finger();
 80029d4:	f000 fcec 	bl	80033b0 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 80029d8:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <FINGER+0x11c>)
 80029da:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <FINGER+0x110>)
 80029dc:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <FINGER+0x114>)
 80029de:	f7fd fd0d 	bl	80003fc <CLCD_I2C_Display>
                break;
 80029e2:	e00b      	b.n	80029fc <FINGER+0xf4>
            case 2:
                remove_all_finger();
 80029e4:	f000 fda2 	bl	800352c <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 80029e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <FINGER+0x120>)
 80029ea:	490b      	ldr	r1, [pc, #44]	@ (8002a18 <FINGER+0x110>)
 80029ec:	480b      	ldr	r0, [pc, #44]	@ (8002a1c <FINGER+0x114>)
 80029ee:	f7fd fd05 	bl	80003fc <CLCD_I2C_Display>
                break;
 80029f2:	e003      	b.n	80029fc <FINGER+0xf4>
            default:
                exitmenu = 0;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <FINGER+0x108>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
                break;
 80029fa:	bf00      	nop
	while (exitmenu )
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <FINGER+0x108>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d192      	bne.n	800292a <FINGER+0x22>
            }
        }
    }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000020 	.word	0x20000020
 8002a14:	0800dabc 	.word	0x0800dabc
 8002a18:	0800df34 	.word	0x0800df34
 8002a1c:	200003d8 	.word	0x200003d8
 8002a20:	0800df44 	.word	0x0800df44
 8002a24:	0800df54 	.word	0x0800df54
 8002a28:	0800df68 	.word	0x0800df68
 8002a2c:	0800db08 	.word	0x0800db08

08002a30 <PASSWORD>:


void PASSWORD(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
	buzzer(1);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f000 ff1a 	bl	8003870 <buzzer>
	exitmenu = Delaymenu;
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <PASSWORD+0xdc>)
 8002a3e:	2214      	movs	r2, #20
 8002a40:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002a42:	23ff      	movs	r3, #255	@ 0xff
 8002a44:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002a46:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <PASSWORD+0xe0>)
 8002a48:	4932      	ldr	r1, [pc, #200]	@ (8002b14 <PASSWORD+0xe4>)
 8002a4a:	4833      	ldr	r0, [pc, #204]	@ (8002b18 <PASSWORD+0xe8>)
 8002a4c:	f7fd fcd6 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002a50:	e052      	b.n	8002af8 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002a52:	200a      	movs	r0, #10
 8002a54:	f7fd fe2c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a60:	d127      	bne.n	8002ab2 <PASSWORD+0x82>
		{
			buzzer(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 ff04 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <PASSWORD+0xdc>)
 8002a6a:	2214      	movs	r2, #20
 8002a6c:	701a      	strb	r2, [r3, #0]
			status++;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	3301      	adds	r3, #1
 8002a72:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d801      	bhi.n	8002a7e <PASSWORD+0x4e>
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	e000      	b.n	8002a80 <PASSWORD+0x50>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <PASSWORD+0x5e>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d006      	beq.n	8002a9a <PASSWORD+0x6a>
 8002a8c:	e00b      	b.n	8002aa6 <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002a8e:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <PASSWORD+0xec>)
 8002a90:	4920      	ldr	r1, [pc, #128]	@ (8002b14 <PASSWORD+0xe4>)
 8002a92:	4821      	ldr	r0, [pc, #132]	@ (8002b18 <PASSWORD+0xe8>)
 8002a94:	f7fd fcb2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002a98:	e00b      	b.n	8002ab2 <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <PASSWORD+0xf0>)
 8002a9c:	491d      	ldr	r1, [pc, #116]	@ (8002b14 <PASSWORD+0xe4>)
 8002a9e:	481e      	ldr	r0, [pc, #120]	@ (8002b18 <PASSWORD+0xe8>)
 8002aa0:	f7fd fcac 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002aa4:	e005      	b.n	8002ab2 <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <PASSWORD+0xf4>)
 8002aa8:	491a      	ldr	r1, [pc, #104]	@ (8002b14 <PASSWORD+0xe4>)
 8002aaa:	481b      	ldr	r0, [pc, #108]	@ (8002b18 <PASSWORD+0xe8>)
 8002aac:	f7fd fca6 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002ab0:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	2b23      	cmp	r3, #35	@ 0x23
 8002ab6:	d11f      	bne.n	8002af8 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f000 fed9 	bl	8003870 <buzzer>
			exitmenu = Delaymenu;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <PASSWORD+0xdc>)
 8002ac0:	2214      	movs	r2, #20
 8002ac2:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <PASSWORD+0xa0>
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d008      	beq.n	8002ae0 <PASSWORD+0xb0>
 8002ace:	e00f      	b.n	8002af0 <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002ad0:	f000 fddc 	bl	800368c <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <PASSWORD+0xec>)
 8002ad6:	490f      	ldr	r1, [pc, #60]	@ (8002b14 <PASSWORD+0xe4>)
 8002ad8:	480f      	ldr	r0, [pc, #60]	@ (8002b18 <PASSWORD+0xe8>)
 8002ada:	f7fd fc8f 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002ade:	e00b      	b.n	8002af8 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002ae0:	f000 fe36 	bl	8003750 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b20 <PASSWORD+0xf0>)
 8002ae6:	490b      	ldr	r1, [pc, #44]	@ (8002b14 <PASSWORD+0xe4>)
 8002ae8:	480b      	ldr	r0, [pc, #44]	@ (8002b18 <PASSWORD+0xe8>)
 8002aea:	f7fd fc87 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002aee:	e003      	b.n	8002af8 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <PASSWORD+0xdc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
                break;
 8002af6:	bf00      	nop
	while (exitmenu )
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <PASSWORD+0xdc>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1a8      	bne.n	8002a52 <PASSWORD+0x22>
            }
        }
    }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000020 	.word	0x20000020
 8002b10:	0800dabc 	.word	0x0800dabc
 8002b14:	0800df78 	.word	0x0800df78
 8002b18:	200003d8 	.word	0x200003d8
 8002b1c:	0800df8c 	.word	0x0800df8c
 8002b20:	0800df9c 	.word	0x0800df9c
 8002b24:	0800db08 	.word	0x0800db08

08002b28 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	2208      	movs	r2, #8
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f7fe f8ef 	bl	8000d1e <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002b40:	7cbb      	ldrb	r3, [r7, #18]
 8002b42:	2bff      	cmp	r3, #255	@ 0xff
 8002b44:	d001      	beq.n	8002b4a <CheckUID+0x22>
		return 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e016      	b.n	8002b78 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75fb      	strb	r3, [r7, #23]
 8002b4e:	e00f      	b.n	8002b70 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	443b      	add	r3, r7
 8002b5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <CheckUID+0x42>
			return 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e006      	b.n	8002b78 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d9ec      	bls.n	8002b50 <CheckUID+0x28>
	}
	return 1;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <removeuid>:

void removeuid(uint32_t addressrm)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3306      	adds	r3, #6
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f872 	bl	8000c78 <Flash_Write_2Byte>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <startadd>:
void startadd(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <startadd+0x90>)
 8002ba2:	4923      	ldr	r1, [pc, #140]	@ (8002c30 <startadd+0x94>)
 8002ba4:	4823      	ldr	r0, [pc, #140]	@ (8002c34 <startadd+0x98>)
 8002ba6:	f7fd fc29 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 8002baa:	f000 f851 	bl	8002c50 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002bae:	4822      	ldr	r0, [pc, #136]	@ (8002c38 <startadd+0x9c>)
 8002bb0:	f000 fed4 	bl	800395c <TM_MFRC522_Check>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002bba:	481f      	ldr	r0, [pc, #124]	@ (8002c38 <startadd+0x9c>)
 8002bbc:	f7ff f946 	bl	8001e4c <CheckListUID>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <startadd+0x4a>
				{
					CardID[5] = 0x81;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <startadd+0x9c>)
 8002bc8:	2281      	movs	r2, #129	@ 0x81
 8002bca:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <startadd+0xa0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	4919      	ldr	r1, [pc, #100]	@ (8002c38 <startadd+0x9c>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f867 	bl	8000ca8 <Flash_Write_Array>
					AddressUID += 8;
 8002bda:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <startadd+0xa0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3308      	adds	r3, #8
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <startadd+0xa0>)
 8002be2:	6013      	str	r3, [r2, #0]
					break;
 8002be4:	e011      	b.n	8002c0a <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002be6:	4a16      	ldr	r2, [pc, #88]	@ (8002c40 <startadd+0xa4>)
 8002be8:	4916      	ldr	r1, [pc, #88]	@ (8002c44 <startadd+0xa8>)
 8002bea:	4812      	ldr	r0, [pc, #72]	@ (8002c34 <startadd+0x98>)
 8002bec:	f7fd fc06 	bl	80003fc <CLCD_I2C_Display>
					buzzer(5);
 8002bf0:	2005      	movs	r0, #5
 8002bf2:	f000 fe3d 	bl	8003870 <buzzer>
					HAL_Delay(1000);
 8002bf6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bfa:	f001 fb47 	bl	800428c <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <startadd+0x90>)
 8002c00:	490b      	ldr	r1, [pc, #44]	@ (8002c30 <startadd+0x94>)
 8002c02:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <startadd+0x98>)
 8002c04:	f7fd fbfa 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c08:	e7d1      	b.n	8002bae <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <startadd+0xac>)
 8002c0c:	490f      	ldr	r1, [pc, #60]	@ (8002c4c <startadd+0xb0>)
 8002c0e:	4809      	ldr	r0, [pc, #36]	@ (8002c34 <startadd+0x98>)
 8002c10:	f7fd fbf4 	bl	80003fc <CLCD_I2C_Display>
	buzzer(1);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f000 fe2b 	bl	8003870 <buzzer>
	HAL_Delay(1000);
 8002c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c1e:	f001 fb35 	bl	800428c <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002c22:	4804      	ldr	r0, [pc, #16]	@ (8002c34 <startadd+0x98>)
 8002c24:	f7fd fbda 	bl	80003dc <CLCD_I2C_Clear>
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	0800dfac 	.word	0x0800dfac
 8002c30:	0800dc5c 	.word	0x0800dc5c
 8002c34:	200003d8 	.word	0x200003d8
 8002c38:	200003e4 	.word	0x200003e4
 8002c3c:	20000024 	.word	0x20000024
 8002c40:	0800dfc0 	.word	0x0800dfc0
 8002c44:	0800dfd4 	.word	0x0800dfd4
 8002c48:	0800dfe4 	.word	0x0800dfe4
 8002c4c:	0800dff4 	.word	0x0800dff4

08002c50 <setaddress>:
void setaddress(void){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <setaddress+0x30>)
 8002c58:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c5a:	e002      	b.n	8002c62 <setaddress+0x12>
	{
		pt = pt + 8;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3305      	adds	r3, #5
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f841 	bl	8000cee <Flash_Read_Byte>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d1f4      	bne.n	8002c5c <setaddress+0xc>
	}
	AddressUID = pt;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <setaddress+0x34>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	0800f000 	.word	0x0800f000
 8002c84:	20000024 	.word	0x20000024

08002c88 <remoall>:

void remoall(){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <remoall+0x34>)
 8002c90:	607b      	str	r3, [r7, #4]
	Flash_Erase(pt);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd ffd4 	bl	8000c40 <Flash_Erase>
	set_default_password();
 8002c98:	f000 fd5a 	bl	8003750 <set_default_password>
	remove_all_finger();
 8002c9c:	f000 fc46 	bl	800352c <remove_all_finger>
	CLCD_I2C_Display(&LCD1, " REMOVE ALL CARD", "  SUCCESSFULLY");
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <remoall+0x38>)
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <remoall+0x3c>)
 8002ca4:	4808      	ldr	r0, [pc, #32]	@ (8002cc8 <remoall+0x40>)
 8002ca6:	f7fd fba9 	bl	80003fc <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002caa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cae:	f001 faed 	bl	800428c <HAL_Delay>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	0800f000 	.word	0x0800f000
 8002cc0:	0800e004 	.word	0x0800e004
 8002cc4:	0800e014 	.word	0x0800e014
 8002cc8:	200003d8 	.word	0x200003d8

08002ccc <addface>:

void addface(uint8_t key)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002cd6:	2280      	movs	r2, #128	@ 0x80
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4823      	ldr	r0, [pc, #140]	@ (8002d68 <addface+0x9c>)
 8002cdc:	f00a f9ce 	bl	800d07c <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4921      	ldr	r1, [pc, #132]	@ (8002d6c <addface+0xa0>)
 8002ce6:	4822      	ldr	r0, [pc, #136]	@ (8002d70 <addface+0xa4>)
 8002ce8:	f00a f9a8 	bl	800d03c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002cec:	2105      	movs	r1, #5
 8002cee:	4820      	ldr	r0, [pc, #128]	@ (8002d70 <addface+0xa4>)
 8002cf0:	f009 fd0a 	bl	800c708 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <addface+0xa8>)
 8002cf6:	4920      	ldr	r1, [pc, #128]	@ (8002d78 <addface+0xac>)
 8002cf8:	4820      	ldr	r0, [pc, #128]	@ (8002d7c <addface+0xb0>)
 8002cfa:	f7fd fb7f 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <addface+0xb4>)
 8002d00:	223c      	movs	r2, #60	@ 0x3c
 8002d02:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8002d04:	e023      	b.n	8002d4e <addface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <addface+0x9c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	2b54      	cmp	r3, #84	@ 0x54
 8002d0e:	d10c      	bne.n	8002d2a <addface+0x5e>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 8002d10:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <addface+0xb8>)
 8002d12:	491d      	ldr	r1, [pc, #116]	@ (8002d88 <addface+0xbc>)
 8002d14:	4819      	ldr	r0, [pc, #100]	@ (8002d7c <addface+0xb0>)
 8002d16:	f7fd fb71 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f000 fda8 	bl	8003870 <buzzer>
			HAL_Delay(2000);
 8002d20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d24:	f001 fab2 	bl	800428c <HAL_Delay>
			break;
 8002d28:	e015      	b.n	8002d56 <addface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <addface+0x9c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	2b46      	cmp	r3, #70	@ 0x46
 8002d32:	d10c      	bne.n	8002d4e <addface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8002d34:	4a0f      	ldr	r2, [pc, #60]	@ (8002d74 <addface+0xa8>)
 8002d36:	4915      	ldr	r1, [pc, #84]	@ (8002d8c <addface+0xc0>)
 8002d38:	4810      	ldr	r0, [pc, #64]	@ (8002d7c <addface+0xb0>)
 8002d3a:	f7fd fb5f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8002d3e:	2005      	movs	r0, #5
 8002d40:	f000 fd96 	bl	8003870 <buzzer>
			HAL_Delay(2000);
 8002d44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d48:	f001 faa0 	bl	800428c <HAL_Delay>
			break;
 8002d4c:	e003      	b.n	8002d56 <addface+0x8a>
	while(exitmenu != 0){
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <addface+0xb4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1d7      	bne.n	8002d06 <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4803      	ldr	r0, [pc, #12]	@ (8002d68 <addface+0x9c>)
 8002d5c:	f00a f98e 	bl	800d07c <memset>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000350 	.word	0x20000350
 8002d6c:	0800e028 	.word	0x0800e028
 8002d70:	200003d0 	.word	0x200003d0
 8002d74:	0800da3c 	.word	0x0800da3c
 8002d78:	0800df18 	.word	0x0800df18
 8002d7c:	200003d8 	.word	0x200003d8
 8002d80:	20000020 	.word	0x20000020
 8002d84:	0800dca8 	.word	0x0800dca8
 8002d88:	0800e030 	.word	0x0800e030
 8002d8c:	0800e040 	.word	0x0800e040

08002d90 <removeface>:
void removeface(uint8_t key)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4823      	ldr	r0, [pc, #140]	@ (8002e2c <removeface+0x9c>)
 8002da0:	f00a f96c 	bl	800d07c <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	461a      	mov	r2, r3
 8002da8:	4921      	ldr	r1, [pc, #132]	@ (8002e30 <removeface+0xa0>)
 8002daa:	4822      	ldr	r0, [pc, #136]	@ (8002e34 <removeface+0xa4>)
 8002dac:	f00a f946 	bl	800d03c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002db0:	2105      	movs	r1, #5
 8002db2:	4820      	ldr	r0, [pc, #128]	@ (8002e34 <removeface+0xa4>)
 8002db4:	f009 fca8 	bl	800c708 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002db8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <removeface+0xa8>)
 8002dba:	4920      	ldr	r1, [pc, #128]	@ (8002e3c <removeface+0xac>)
 8002dbc:	4820      	ldr	r0, [pc, #128]	@ (8002e40 <removeface+0xb0>)
 8002dbe:	f7fd fb1d 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <removeface+0xb4>)
 8002dc4:	223c      	movs	r2, #60	@ 0x3c
 8002dc6:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8002dc8:	e023      	b.n	8002e12 <removeface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <removeface+0x9c>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	2b54      	cmp	r3, #84	@ 0x54
 8002dd2:	d10c      	bne.n	8002dee <removeface+0x5e>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <removeface+0xa8>)
 8002dd6:	491c      	ldr	r1, [pc, #112]	@ (8002e48 <removeface+0xb8>)
 8002dd8:	4819      	ldr	r0, [pc, #100]	@ (8002e40 <removeface+0xb0>)
 8002dda:	f7fd fb0f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fd46 	bl	8003870 <buzzer>
			HAL_Delay(2000);
 8002de4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002de8:	f001 fa50 	bl	800428c <HAL_Delay>
			break;
 8002dec:	e015      	b.n	8002e1a <removeface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <removeface+0x9c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	2b46      	cmp	r3, #70	@ 0x46
 8002df6:	d10c      	bne.n	8002e12 <removeface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 8002df8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e38 <removeface+0xa8>)
 8002dfa:	4914      	ldr	r1, [pc, #80]	@ (8002e4c <removeface+0xbc>)
 8002dfc:	4810      	ldr	r0, [pc, #64]	@ (8002e40 <removeface+0xb0>)
 8002dfe:	f7fd fafd 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8002e02:	2005      	movs	r0, #5
 8002e04:	f000 fd34 	bl	8003870 <buzzer>
			HAL_Delay(2000);
 8002e08:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e0c:	f001 fa3e 	bl	800428c <HAL_Delay>
			break;
 8002e10:	e003      	b.n	8002e1a <removeface+0x8a>
	while(exitmenu != 0){
 8002e12:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <removeface+0xb4>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1d7      	bne.n	8002dca <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <removeface+0x9c>)
 8002e20:	f00a f92c 	bl	800d07c <memset>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000350 	.word	0x20000350
 8002e30:	0800e050 	.word	0x0800e050
 8002e34:	200003d0 	.word	0x200003d0
 8002e38:	0800da3c 	.word	0x0800da3c
 8002e3c:	0800df18 	.word	0x0800df18
 8002e40:	200003d8 	.word	0x200003d8
 8002e44:	20000020 	.word	0x20000020
 8002e48:	0800e058 	.word	0x0800e058
 8002e4c:	0800e068 	.word	0x0800e068

08002e50 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4817      	ldr	r0, [pc, #92]	@ (8002ebc <checkfaceid+0x6c>)
 8002e60:	f00a f90c 	bl	800d07c <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4915      	ldr	r1, [pc, #84]	@ (8002ec0 <checkfaceid+0x70>)
 8002e6a:	4816      	ldr	r0, [pc, #88]	@ (8002ec4 <checkfaceid+0x74>)
 8002e6c:	f00a f8e6 	bl	800d03c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002e70:	2105      	movs	r1, #5
 8002e72:	4814      	ldr	r0, [pc, #80]	@ (8002ec4 <checkfaceid+0x74>)
 8002e74:	f009 fc48 	bl	800c708 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8002e78:	e000      	b.n	8002e7c <checkfaceid+0x2c>
			continue;
 8002e7a:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <checkfaceid+0x6c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f9      	beq.n	8002e7a <checkfaceid+0x2a>
		}
	HAL_Delay(1000);
 8002e86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e8a:	f001 f9ff 	bl	800428c <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <checkfaceid+0x6c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	2b54      	cmp	r3, #84	@ 0x54
 8002e96:	d101      	bne.n	8002e9c <checkfaceid+0x4c>
		return key;
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	e00b      	b.n	8002eb4 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <checkfaceid+0x6c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	2b46      	cmp	r3, #70	@ 0x46
 8002ea4:	d101      	bne.n	8002eaa <checkfaceid+0x5a>
		return 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e004      	b.n	8002eb4 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	2100      	movs	r1, #0
 8002eae:	4803      	ldr	r0, [pc, #12]	@ (8002ebc <checkfaceid+0x6c>)
 8002eb0:	f00a f8e4 	bl	800d07c <memset>
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000350 	.word	0x20000350
 8002ec0:	0800e078 	.word	0x0800e078
 8002ec4:	200003d0 	.word	0x200003d0

08002ec8 <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
    ID = InputID_FINGER();
 8002ece:	f7fe f85d 	bl	8000f8c <InputID_FINGER>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4bab      	ldr	r3, [pc, #684]	@ (8003184 <add_finger+0x2bc>)
 8002ed8:	801a      	strh	r2, [r3, #0]
    uint32_t start_time_finger = HAL_GetTick();
 8002eda:	f001 f9cd 	bl	8004278 <HAL_GetTick>
 8002ede:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002ee0:	f001 f9ca 	bl	8004278 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d90c      	bls.n	8002f0c <add_finger+0x44>
        {
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002ef2:	4aa5      	ldr	r2, [pc, #660]	@ (8003188 <add_finger+0x2c0>)
 8002ef4:	49a5      	ldr	r1, [pc, #660]	@ (800318c <add_finger+0x2c4>)
 8002ef6:	48a6      	ldr	r0, [pc, #664]	@ (8003190 <add_finger+0x2c8>)
 8002ef8:	f7fd fa80 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8002efc:	2005      	movs	r0, #5
 8002efe:	f000 fcb7 	bl	8003870 <buzzer>
            HAL_Delay(2000);
 8002f02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f06:	f001 f9c1 	bl	800428c <HAL_Delay>
            return;
 8002f0a:	e1b5      	b.n	8003278 <add_finger+0x3b0>
        }

        collect_finger();
 8002f0c:	f7fd fcf0 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 8002f10:	4aa0      	ldr	r2, [pc, #640]	@ (8003194 <add_finger+0x2cc>)
 8002f12:	49a1      	ldr	r1, [pc, #644]	@ (8003198 <add_finger+0x2d0>)
 8002f14:	489e      	ldr	r0, [pc, #632]	@ (8003190 <add_finger+0x2c8>)
 8002f16:	f7fd fa71 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8002f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f1e:	f001 f9b5 	bl	800428c <HAL_Delay>

        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2100      	movs	r1, #0
 8002f26:	489a      	ldr	r0, [pc, #616]	@ (8003190 <add_finger+0x2c8>)
 8002f28:	f7fd f9ee 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002f2c:	499b      	ldr	r1, [pc, #620]	@ (800319c <add_finger+0x2d4>)
 8002f2e:	4898      	ldr	r0, [pc, #608]	@ (8003190 <add_finger+0x2c8>)
 8002f30:	f7fd fa3d 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8002f34:	4b9a      	ldr	r3, [pc, #616]	@ (80031a0 <add_finger+0x2d8>)
 8002f36:	22ff      	movs	r2, #255	@ 0xff
 8002f38:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002f3a:	e021      	b.n	8002f80 <add_finger+0xb8>
            collect_finger();
 8002f3c:	f7fd fcd8 	bl	80008f0 <collect_finger>
            collect_finger();
 8002f40:	f7fd fcd6 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8002f44:	f7fd fcd4 	bl	80008f0 <collect_finger>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4a95      	ldr	r2, [pc, #596]	@ (80031a0 <add_finger+0x2d8>)
 8002f4c:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002f4e:	f001 f993 	bl	8004278 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d90f      	bls.n	8002f80 <add_finger+0xb8>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002f60:	4a89      	ldr	r2, [pc, #548]	@ (8003188 <add_finger+0x2c0>)
 8002f62:	498a      	ldr	r1, [pc, #552]	@ (800318c <add_finger+0x2c4>)
 8002f64:	488a      	ldr	r0, [pc, #552]	@ (8003190 <add_finger+0x2c8>)
 8002f66:	f7fd fa49 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8002f6a:	2005      	movs	r0, #5
 8002f6c:	f000 fc80 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8002f70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f74:	f001 f98a 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 8002f78:	4b8a      	ldr	r3, [pc, #552]	@ (80031a4 <add_finger+0x2dc>)
 8002f7a:	2214      	movs	r2, #20
 8002f7c:	701a      	strb	r2, [r3, #0]
                return;
 8002f7e:	e17b      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00){
 8002f80:	4b87      	ldr	r3, [pc, #540]	@ (80031a0 <add_finger+0x2d8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1d9      	bne.n	8002f3c <add_finger+0x74>
            }
        }
        tmp=0xff;
 8002f88:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <add_finger+0x2d8>)
 8002f8a:	22ff      	movs	r2, #255	@ 0xff
 8002f8c:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2100      	movs	r1, #0
 8002f92:	487f      	ldr	r0, [pc, #508]	@ (8003190 <add_finger+0x2c8>)
 8002f94:	f7fd f9b8 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002f98:	4983      	ldr	r1, [pc, #524]	@ (80031a8 <add_finger+0x2e0>)
 8002f9a:	487d      	ldr	r0, [pc, #500]	@ (8003190 <add_finger+0x2c8>)
 8002f9c:	f7fd fa07 	bl	80003ae <CLCD_I2C_WriteString>
 8002fa0:	2064      	movs	r0, #100	@ 0x64
 8002fa2:	f001 f973 	bl	800428c <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4879      	ldr	r0, [pc, #484]	@ (8003190 <add_finger+0x2c8>)
 8002fac:	f7fd f9ac 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002fb0:	497e      	ldr	r1, [pc, #504]	@ (80031ac <add_finger+0x2e4>)
 8002fb2:	4877      	ldr	r0, [pc, #476]	@ (8003190 <add_finger+0x2c8>)
 8002fb4:	f7fd f9fb 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8002fb8:	4b79      	ldr	r3, [pc, #484]	@ (80031a0 <add_finger+0x2d8>)
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002fbe:	e01e      	b.n	8002ffe <add_finger+0x136>
            tmp=img2tz(0x01);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fd fcc1 	bl	8000948 <img2tz>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a75      	ldr	r2, [pc, #468]	@ (80031a0 <add_finger+0x2d8>)
 8002fca:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002fcc:	f001 f954 	bl	8004278 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90f      	bls.n	8002ffe <add_finger+0x136>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002fde:	4a6a      	ldr	r2, [pc, #424]	@ (8003188 <add_finger+0x2c0>)
 8002fe0:	496a      	ldr	r1, [pc, #424]	@ (800318c <add_finger+0x2c4>)
 8002fe2:	486b      	ldr	r0, [pc, #428]	@ (8003190 <add_finger+0x2c8>)
 8002fe4:	f7fd fa0a 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f000 fc41 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8002fee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ff2:	f001 f94b 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 8002ff6:	4b6b      	ldr	r3, [pc, #428]	@ (80031a4 <add_finger+0x2dc>)
 8002ff8:	2214      	movs	r2, #20
 8002ffa:	701a      	strb	r2, [r3, #0]
                return;
 8002ffc:	e13c      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00){
 8002ffe:	4b68      	ldr	r3, [pc, #416]	@ (80031a0 <add_finger+0x2d8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1dc      	bne.n	8002fc0 <add_finger+0xf8>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003006:	2201      	movs	r2, #1
 8003008:	2100      	movs	r1, #0
 800300a:	4861      	ldr	r0, [pc, #388]	@ (8003190 <add_finger+0x2c8>)
 800300c:	f7fd f97c 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 8003010:	4967      	ldr	r1, [pc, #412]	@ (80031b0 <add_finger+0x2e8>)
 8003012:	485f      	ldr	r0, [pc, #380]	@ (8003190 <add_finger+0x2c8>)
 8003014:	f7fd f9cb 	bl	80003ae <CLCD_I2C_WriteString>
 8003018:	2064      	movs	r0, #100	@ 0x64
 800301a:	f001 f937 	bl	800428c <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800301e:	2201      	movs	r2, #1
 8003020:	2100      	movs	r1, #0
 8003022:	485b      	ldr	r0, [pc, #364]	@ (8003190 <add_finger+0x2c8>)
 8003024:	f7fd f970 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8003028:	495c      	ldr	r1, [pc, #368]	@ (800319c <add_finger+0x2d4>)
 800302a:	4859      	ldr	r0, [pc, #356]	@ (8003190 <add_finger+0x2c8>)
 800302c:	f7fd f9bf 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003030:	4b5b      	ldr	r3, [pc, #364]	@ (80031a0 <add_finger+0x2d8>)
 8003032:	22ff      	movs	r2, #255	@ 0xff
 8003034:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 8003036:	e021      	b.n	800307c <add_finger+0x1b4>
            collect_finger();
 8003038:	f7fd fc5a 	bl	80008f0 <collect_finger>
            collect_finger();
 800303c:	f7fd fc58 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 8003040:	f7fd fc56 	bl	80008f0 <collect_finger>
 8003044:	4603      	mov	r3, r0
 8003046:	4a56      	ldr	r2, [pc, #344]	@ (80031a0 <add_finger+0x2d8>)
 8003048:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 800304a:	f001 f915 	bl	8004278 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003058:	4293      	cmp	r3, r2
 800305a:	d90f      	bls.n	800307c <add_finger+0x1b4>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 800305c:	4a4a      	ldr	r2, [pc, #296]	@ (8003188 <add_finger+0x2c0>)
 800305e:	494b      	ldr	r1, [pc, #300]	@ (800318c <add_finger+0x2c4>)
 8003060:	484b      	ldr	r0, [pc, #300]	@ (8003190 <add_finger+0x2c8>)
 8003062:	f7fd f9cb 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003066:	2005      	movs	r0, #5
 8003068:	f000 fc02 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 800306c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003070:	f001 f90c 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 8003074:	4b4b      	ldr	r3, [pc, #300]	@ (80031a4 <add_finger+0x2dc>)
 8003076:	2214      	movs	r2, #20
 8003078:	701a      	strb	r2, [r3, #0]
                return;
 800307a:	e0fd      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00)    {
 800307c:	4b48      	ldr	r3, [pc, #288]	@ (80031a0 <add_finger+0x2d8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1d9      	bne.n	8003038 <add_finger+0x170>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003084:	2201      	movs	r2, #1
 8003086:	2100      	movs	r1, #0
 8003088:	4841      	ldr	r0, [pc, #260]	@ (8003190 <add_finger+0x2c8>)
 800308a:	f7fd f93d 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 800308e:	4946      	ldr	r1, [pc, #280]	@ (80031a8 <add_finger+0x2e0>)
 8003090:	483f      	ldr	r0, [pc, #252]	@ (8003190 <add_finger+0x2c8>)
 8003092:	f7fd f98c 	bl	80003ae <CLCD_I2C_WriteString>
 8003096:	2064      	movs	r0, #100	@ 0x64
 8003098:	f001 f8f8 	bl	800428c <HAL_Delay>
        tmp=0xff;
 800309c:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <add_finger+0x2d8>)
 800309e:	22ff      	movs	r2, #255	@ 0xff
 80030a0:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030a2:	2201      	movs	r2, #1
 80030a4:	2100      	movs	r1, #0
 80030a6:	483a      	ldr	r0, [pc, #232]	@ (8003190 <add_finger+0x2c8>)
 80030a8:	f7fd f92e 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 80030ac:	493f      	ldr	r1, [pc, #252]	@ (80031ac <add_finger+0x2e4>)
 80030ae:	4838      	ldr	r0, [pc, #224]	@ (8003190 <add_finger+0x2c8>)
 80030b0:	f7fd f97d 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {
 80030b4:	e01e      	b.n	80030f4 <add_finger+0x22c>
            tmp=img2tz(0x02);
 80030b6:	2002      	movs	r0, #2
 80030b8:	f7fd fc46 	bl	8000948 <img2tz>
 80030bc:	4603      	mov	r3, r0
 80030be:	4a38      	ldr	r2, [pc, #224]	@ (80031a0 <add_finger+0x2d8>)
 80030c0:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 80030c2:	f001 f8d9 	bl	8004278 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d90f      	bls.n	80030f4 <add_finger+0x22c>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 80030d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <add_finger+0x2c0>)
 80030d6:	492d      	ldr	r1, [pc, #180]	@ (800318c <add_finger+0x2c4>)
 80030d8:	482d      	ldr	r0, [pc, #180]	@ (8003190 <add_finger+0x2c8>)
 80030da:	f7fd f98f 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 80030de:	2005      	movs	r0, #5
 80030e0:	f000 fbc6 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 80030e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030e8:	f001 f8d0 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <add_finger+0x2dc>)
 80030ee:	2214      	movs	r2, #20
 80030f0:	701a      	strb	r2, [r3, #0]
                return;
 80030f2:	e0c1      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00)    {
 80030f4:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <add_finger+0x2d8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1dc      	bne.n	80030b6 <add_finger+0x1ee>
            }
        }
        tmp=0xff;
 80030fc:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <add_finger+0x2d8>)
 80030fe:	22ff      	movs	r2, #255	@ 0xff
 8003100:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)
 8003102:	e036      	b.n	8003172 <add_finger+0x2aa>
        {
            tmp=match();
 8003104:	f7fd fc5c 	bl	80009c0 <match>
 8003108:	4603      	mov	r3, r0
 800310a:	4a25      	ldr	r2, [pc, #148]	@ (80031a0 <add_finger+0x2d8>)
 800310c:	6013      	str	r3, [r2, #0]
            if (tmp==0x08 || tmp==0x01)
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <add_finger+0x2d8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d003      	beq.n	800311e <add_finger+0x256>
 8003116:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <add_finger+0x2d8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d110      	bne.n	8003140 <add_finger+0x278>
            {
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800311e:	2201      	movs	r2, #1
 8003120:	2100      	movs	r1, #0
 8003122:	481b      	ldr	r0, [pc, #108]	@ (8003190 <add_finger+0x2c8>)
 8003124:	f7fd f8f0 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 8003128:	4922      	ldr	r1, [pc, #136]	@ (80031b4 <add_finger+0x2ec>)
 800312a:	4819      	ldr	r0, [pc, #100]	@ (8003190 <add_finger+0x2c8>)
 800312c:	f7fd f93f 	bl	80003ae <CLCD_I2C_WriteString>
 8003130:	2005      	movs	r0, #5
 8003132:	f000 fb9d 	bl	8003870 <buzzer>
 8003136:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800313a:	f001 f8a7 	bl	800428c <HAL_Delay>
                return;
 800313e:	e09b      	b.n	8003278 <add_finger+0x3b0>
            }
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8003140:	f001 f89a 	bl	8004278 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800314e:	4293      	cmp	r3, r2
 8003150:	d90f      	bls.n	8003172 <add_finger+0x2aa>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8003152:	4a0d      	ldr	r2, [pc, #52]	@ (8003188 <add_finger+0x2c0>)
 8003154:	490d      	ldr	r1, [pc, #52]	@ (800318c <add_finger+0x2c4>)
 8003156:	480e      	ldr	r0, [pc, #56]	@ (8003190 <add_finger+0x2c8>)
 8003158:	f7fd f950 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 800315c:	2005      	movs	r0, #5
 800315e:	f000 fb87 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8003162:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003166:	f001 f891 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <add_finger+0x2dc>)
 800316c:	2214      	movs	r2, #20
 800316e:	701a      	strb	r2, [r3, #0]
                return;
 8003170:	e082      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00)
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <add_finger+0x2d8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1c4      	bne.n	8003104 <add_finger+0x23c>
            }
        }
        tmp=0xff;
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <add_finger+0x2d8>)
 800317c:	22ff      	movs	r2, #255	@ 0xff
 800317e:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003180:	e038      	b.n	80031f4 <add_finger+0x32c>
 8003182:	bf00      	nop
 8003184:	20000408 	.word	0x20000408
 8003188:	0800d9d0 	.word	0x0800d9d0
 800318c:	0800d9dc 	.word	0x0800d9dc
 8003190:	200003d8 	.word	0x200003d8
 8003194:	0800e080 	.word	0x0800e080
 8003198:	0800e098 	.word	0x0800e098
 800319c:	0800e0ac 	.word	0x0800e0ac
 80031a0:	20000404 	.word	0x20000404
 80031a4:	20000020 	.word	0x20000020
 80031a8:	0800e0c8 	.word	0x0800e0c8
 80031ac:	0800e0dc 	.word	0x0800e0dc
 80031b0:	0800e0f4 	.word	0x0800e0f4
 80031b4:	0800e108 	.word	0x0800e108
            tmp=regmodel();
 80031b8:	f7fd fc2e 	bl	8000a18 <regmodel>
 80031bc:	4603      	mov	r3, r0
 80031be:	4a30      	ldr	r2, [pc, #192]	@ (8003280 <add_finger+0x3b8>)
 80031c0:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 80031c2:	f001 f859 	bl	8004278 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d90f      	bls.n	80031f4 <add_finger+0x32c>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 80031d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003284 <add_finger+0x3bc>)
 80031d6:	492c      	ldr	r1, [pc, #176]	@ (8003288 <add_finger+0x3c0>)
 80031d8:	482c      	ldr	r0, [pc, #176]	@ (800328c <add_finger+0x3c4>)
 80031da:	f7fd f90f 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 80031de:	2005      	movs	r0, #5
 80031e0:	f000 fb46 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 80031e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031e8:	f001 f850 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <add_finger+0x3c8>)
 80031ee:	2214      	movs	r2, #20
 80031f0:	701a      	strb	r2, [r3, #0]
                return;
 80031f2:	e041      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00){
 80031f4:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <add_finger+0x3b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1dd      	bne.n	80031b8 <add_finger+0x2f0>
            }
        }
        tmp=0xff;
 80031fc:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <add_finger+0x3b8>)
 80031fe:	22ff      	movs	r2, #255	@ 0xff
 8003200:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003202:	e021      	b.n	8003248 <add_finger+0x380>
            tmp=store(ID);
 8003204:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <add_finger+0x3cc>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fc30 	bl	8000a70 <store>
 8003210:	4603      	mov	r3, r0
 8003212:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <add_finger+0x3b8>)
 8003214:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8003216:	f001 f82f 	bl	8004278 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003224:	4293      	cmp	r3, r2
 8003226:	d90f      	bls.n	8003248 <add_finger+0x380>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <add_finger+0x3bc>)
 800322a:	4917      	ldr	r1, [pc, #92]	@ (8003288 <add_finger+0x3c0>)
 800322c:	4817      	ldr	r0, [pc, #92]	@ (800328c <add_finger+0x3c4>)
 800322e:	f7fd f8e5 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003232:	2005      	movs	r0, #5
 8003234:	f000 fb1c 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8003238:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800323c:	f001 f826 	bl	800428c <HAL_Delay>
                exitmenu = Delaymenu;
 8003240:	4b13      	ldr	r3, [pc, #76]	@ (8003290 <add_finger+0x3c8>)
 8003242:	2214      	movs	r2, #20
 8003244:	701a      	strb	r2, [r3, #0]
                return;
 8003246:	e017      	b.n	8003278 <add_finger+0x3b0>
        while(tmp!=0x00){
 8003248:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <add_finger+0x3b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1d9      	bne.n	8003204 <add_finger+0x33c>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003250:	2201      	movs	r2, #1
 8003252:	2100      	movs	r1, #0
 8003254:	480d      	ldr	r0, [pc, #52]	@ (800328c <add_finger+0x3c4>)
 8003256:	f7fd f857 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 800325a:	490f      	ldr	r1, [pc, #60]	@ (8003298 <add_finger+0x3d0>)
 800325c:	480b      	ldr	r0, [pc, #44]	@ (800328c <add_finger+0x3c4>)
 800325e:	f7fd f8a6 	bl	80003ae <CLCD_I2C_WriteString>
        buzzer(1);
 8003262:	2001      	movs	r0, #1
 8003264:	f000 fb04 	bl	8003870 <buzzer>
        HAL_Delay(1500);
 8003268:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800326c:	f001 f80e 	bl	800428c <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8003270:	4806      	ldr	r0, [pc, #24]	@ (800328c <add_finger+0x3c4>)
 8003272:	f7fd f8b3 	bl	80003dc <CLCD_I2C_Clear>
        break;
 8003276:	bf00      	nop
    }
}
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000404 	.word	0x20000404
 8003284:	0800d9d0 	.word	0x0800d9d0
 8003288:	0800d9dc 	.word	0x0800d9dc
 800328c:	200003d8 	.word	0x200003d8
 8003290:	20000020 	.word	0x20000020
 8003294:	20000408 	.word	0x20000408
 8003298:	0800e118 	.word	0x0800e118

0800329c <read_finger>:
//----------end them van tay---------------
void read_finger()
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 80032a0:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <read_finger+0xf0>)
 80032a2:	22ff      	movs	r2, #255	@ 0xff
 80032a4:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 80032a6:	f000 ffe7 	bl	8004278 <HAL_GetTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a38      	ldr	r2, [pc, #224]	@ (8003390 <read_finger+0xf4>)
 80032ae:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 80032b0:	e013      	b.n	80032da <read_finger+0x3e>
		tmp=collect_finger();
 80032b2:	f7fd fb1d 	bl	80008f0 <collect_finger>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a34      	ldr	r2, [pc, #208]	@ (800338c <read_finger+0xf0>)
 80032ba:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 80032bc:	f000 ffdc 	bl	8004278 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <read_finger+0xf4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80032cc:	d305      	bcc.n	80032da <read_finger+0x3e>
		time_cho=HAL_GetTick();
 80032ce:	f000 ffd3 	bl	8004278 <HAL_GetTick>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003390 <read_finger+0xf4>)
 80032d6:	6013      	str	r3, [r2, #0]
		return;}
 80032d8:	e056      	b.n	8003388 <read_finger+0xec>
	while(tmp!=0x00){
 80032da:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <read_finger+0xf0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e7      	bne.n	80032b2 <read_finger+0x16>

	}
	tmp=0xff;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <read_finger+0xf0>)
 80032e4:	22ff      	movs	r2, #255	@ 0xff
 80032e6:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <read_finger+0xf0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <read_finger+0x60>
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7fd fb29 	bl	8000948 <img2tz>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a24      	ldr	r2, [pc, #144]	@ (800338c <read_finger+0xf0>)
 80032fa:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 80032fc:	4b23      	ldr	r3, [pc, #140]	@ (800338c <read_finger+0xf0>)
 80032fe:	22ff      	movs	r2, #255	@ 0xff
 8003300:	601a      	str	r2, [r3, #0]
	tmp=search();
 8003302:	f7fd fbf4 	bl	8000aee <search>
 8003306:	4603      	mov	r3, r0
 8003308:	4a20      	ldr	r2, [pc, #128]	@ (800338c <read_finger+0xf0>)
 800330a:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 800330c:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <read_finger+0xf0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d117      	bne.n	8003344 <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <read_finger+0xf0>)
 8003316:	22ff      	movs	r2, #255	@ 0xff
 8003318:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 800331a:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <read_finger+0xf8>)
 800331c:	491e      	ldr	r1, [pc, #120]	@ (8003398 <read_finger+0xfc>)
 800331e:	481f      	ldr	r0, [pc, #124]	@ (800339c <read_finger+0x100>)
 8003320:	f7fd f86c 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess,"-ID = %d  ", pID); // Use %d for integer
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <read_finger+0x104>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	491e      	ldr	r1, [pc, #120]	@ (80033a4 <read_finger+0x108>)
 800332c:	481e      	ldr	r0, [pc, #120]	@ (80033a8 <read_finger+0x10c>)
 800332e:	f009 fe85 	bl	800d03c <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003332:	491d      	ldr	r1, [pc, #116]	@ (80033a8 <read_finger+0x10c>)
 8003334:	4819      	ldr	r0, [pc, #100]	@ (800339c <read_finger+0x100>)
 8003336:	f7fd f83a 	bl	80003ae <CLCD_I2C_WriteString>
		opendoor();
 800333a:	f000 fa49 	bl	80037d0 <opendoor>
		CLCD_I2C_Clear(&LCD1);
 800333e:	4817      	ldr	r0, [pc, #92]	@ (800339c <read_finger+0x100>)
 8003340:	f7fd f84c 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <read_finger+0xf0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b09      	cmp	r3, #9
 800334a:	d11d      	bne.n	8003388 <read_finger+0xec>
	{
		tmp=0xff;
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <read_finger+0xf0>)
 800334e:	22ff      	movs	r2, #255	@ 0xff
 8003350:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003352:	2201      	movs	r2, #1
 8003354:	2100      	movs	r1, #0
 8003356:	4811      	ldr	r0, [pc, #68]	@ (800339c <read_finger+0x100>)
 8003358:	f7fc ffd6 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 800335c:	4913      	ldr	r1, [pc, #76]	@ (80033ac <read_finger+0x110>)
 800335e:	480f      	ldr	r0, [pc, #60]	@ (800339c <read_finger+0x100>)
 8003360:	f7fd f825 	bl	80003ae <CLCD_I2C_WriteString>
 8003364:	2005      	movs	r0, #5
 8003366:	f000 fa83 	bl	8003870 <buzzer>
 800336a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800336e:	f000 ff8d 	bl	800428c <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003372:	490d      	ldr	r1, [pc, #52]	@ (80033a8 <read_finger+0x10c>)
 8003374:	4809      	ldr	r0, [pc, #36]	@ (800339c <read_finger+0x100>)
 8003376:	f7fd f81a 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 800337a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800337e:	f000 ff85 	bl	800428c <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003382:	4806      	ldr	r0, [pc, #24]	@ (800339c <read_finger+0x100>)
 8003384:	f7fd f82a 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000404 	.word	0x20000404
 8003390:	200003f4 	.word	0x200003f4
 8003394:	0800e12c 	.word	0x0800e12c
 8003398:	0800da50 	.word	0x0800da50
 800339c:	200003d8 	.word	0x200003d8
 80033a0:	20000218 	.word	0x20000218
 80033a4:	0800e134 	.word	0x0800e134
 80033a8:	200003f8 	.word	0x200003f8
 80033ac:	0800e140 	.word	0x0800e140

080033b0 <remove_id_finger>:
void remove_id_finger()
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	83bb      	strh	r3, [r7, #28]
    char id_str[4] = {0};
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
    uint8_t index = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 80033c2:	4a4e      	ldr	r2, [pc, #312]	@ (80034fc <remove_id_finger+0x14c>)
 80033c4:	494e      	ldr	r1, [pc, #312]	@ (8003500 <remove_id_finger+0x150>)
 80033c6:	484f      	ldr	r0, [pc, #316]	@ (8003504 <remove_id_finger+0x154>)
 80033c8:	f7fd f818 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 80033cc:	200a      	movs	r0, #10
 80033ce:	f7fd f96f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80033d2:	4603      	mov	r3, r0
 80033d4:	76fb      	strb	r3, [r7, #27]
        if (key >= '0' && key <= '9' && index < 3)
 80033d6:	7efb      	ldrb	r3, [r7, #27]
 80033d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80033da:	d916      	bls.n	800340a <remove_id_finger+0x5a>
 80033dc:	7efb      	ldrb	r3, [r7, #27]
 80033de:	2b39      	cmp	r3, #57	@ 0x39
 80033e0:	d813      	bhi.n	800340a <remove_id_finger+0x5a>
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d810      	bhi.n	800340a <remove_id_finger+0x5a>
        {
            buzzer(1);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f000 fa41 	bl	8003870 <buzzer>
            id_str[index++] = key;
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	77fa      	strb	r2, [r7, #31]
 80033f4:	3320      	adds	r3, #32
 80033f6:	443b      	add	r3, r7
 80033f8:	7efa      	ldrb	r2, [r7, #27]
 80033fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
            CLCD_I2C_WriteChar(&LCD1, key);
 80033fe:	7efb      	ldrb	r3, [r7, #27]
 8003400:	4619      	mov	r1, r3
 8003402:	4840      	ldr	r0, [pc, #256]	@ (8003504 <remove_id_finger+0x154>)
 8003404:	f7fc ffc3 	bl	800038e <CLCD_I2C_WriteChar>
 8003408:	e02f      	b.n	800346a <remove_id_finger+0xba>
        }
        else if (key == '#' && index > 0)
 800340a:	7efb      	ldrb	r3, [r7, #27]
 800340c:	2b23      	cmp	r3, #35	@ 0x23
 800340e:	d1dd      	bne.n	80033cc <remove_id_finger+0x1c>
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0da      	beq.n	80033cc <remove_id_finger+0x1c>
        {
            buzzer(1);
 8003416:	2001      	movs	r0, #1
 8003418:	f000 fa2a 	bl	8003870 <buzzer>
            id = atoi(id_str);
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4618      	mov	r0, r3
 8003422:	f009 fd4f 	bl	800cec4 <atoi>
 8003426:	4603      	mov	r3, r0
 8003428:	83bb      	strh	r3, [r7, #28]
            if (id >= 1 && id <= 162)
 800342a:	8bbb      	ldrh	r3, [r7, #28]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <remove_id_finger+0x86>
 8003430:	8bbb      	ldrh	r3, [r7, #28]
 8003432:	2ba2      	cmp	r3, #162	@ 0xa2
 8003434:	d91a      	bls.n	800346c <remove_id_finger+0xbc>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-162):");
 8003436:	4a34      	ldr	r2, [pc, #208]	@ (8003508 <remove_id_finger+0x158>)
 8003438:	4934      	ldr	r1, [pc, #208]	@ (800350c <remove_id_finger+0x15c>)
 800343a:	4832      	ldr	r0, [pc, #200]	@ (8003504 <remove_id_finger+0x154>)
 800343c:	f7fc ffde 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003440:	2005      	movs	r0, #5
 8003442:	f000 fa15 	bl	8003870 <buzzer>
                HAL_Delay(2000);
 8003446:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800344a:	f000 ff1f 	bl	800428c <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 800344e:	4a2b      	ldr	r2, [pc, #172]	@ (80034fc <remove_id_finger+0x14c>)
 8003450:	492b      	ldr	r1, [pc, #172]	@ (8003500 <remove_id_finger+0x150>)
 8003452:	482c      	ldr	r0, [pc, #176]	@ (8003504 <remove_id_finger+0x154>)
 8003454:	f7fc ffd2 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2204      	movs	r2, #4
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f009 fe0b 	bl	800d07c <memset>
                index = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	77fb      	strb	r3, [r7, #31]
    {
 800346a:	e7af      	b.n	80033cc <remove_id_finger+0x1c>
            }
        }
    }
    ID = id;
 800346c:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <remove_id_finger+0x160>)
 800346e:	8bbb      	ldrh	r3, [r7, #28]
 8003470:	8013      	strh	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003472:	2201      	movs	r2, #1
 8003474:	2104      	movs	r1, #4
 8003476:	4823      	ldr	r0, [pc, #140]	@ (8003504 <remove_id_finger+0x154>)
 8003478:	f7fc ff46 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4619      	mov	r1, r3
 8003482:	4820      	ldr	r0, [pc, #128]	@ (8003504 <remove_id_finger+0x154>)
 8003484:	f7fc ff93 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8003488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800348c:	f000 fefe 	bl	800428c <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 8003490:	4a20      	ldr	r2, [pc, #128]	@ (8003514 <remove_id_finger+0x164>)
 8003492:	4921      	ldr	r1, [pc, #132]	@ (8003518 <remove_id_finger+0x168>)
 8003494:	481b      	ldr	r0, [pc, #108]	@ (8003504 <remove_id_finger+0x154>)
 8003496:	f7fc ffb1 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_id_finger(ID);
 800349a:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <remove_id_finger+0x160>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fb8b 	bl	8000bbc <delete_id_finger>
 80034a6:	4603      	mov	r3, r0
 80034a8:	76bb      	strb	r3, [r7, #26]
    if (result == 0x00)
 80034aa:	7ebb      	ldrb	r3, [r7, #26]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <remove_id_finger+0x118>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 80034b0:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <remove_id_finger+0x16c>)
 80034b2:	491b      	ldr	r1, [pc, #108]	@ (8003520 <remove_id_finger+0x170>)
 80034b4:	4813      	ldr	r0, [pc, #76]	@ (8003504 <remove_id_finger+0x154>)
 80034b6:	f7fc ffa1 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f000 f9d8 	bl	8003870 <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <remove_id_finger+0x174>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e00e      	b.n	80034e6 <remove_id_finger+0x136>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80034c8:	7ebb      	ldrb	r3, [r7, #26]
 80034ca:	1d38      	adds	r0, r7, #4
 80034cc:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <remove_id_finger+0x178>)
 80034ce:	2110      	movs	r1, #16
 80034d0:	f009 fd80 	bl	800cfd4 <sniprintf>
        buzzer(5);
 80034d4:	2005      	movs	r0, #5
 80034d6:	f000 f9cb 	bl	8003870 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	461a      	mov	r2, r3
 80034de:	4910      	ldr	r1, [pc, #64]	@ (8003520 <remove_id_finger+0x170>)
 80034e0:	4808      	ldr	r0, [pc, #32]	@ (8003504 <remove_id_finger+0x154>)
 80034e2:	f7fc ff8b 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 80034e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034ea:	f000 fecf 	bl	800428c <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80034ee:	4805      	ldr	r0, [pc, #20]	@ (8003504 <remove_id_finger+0x154>)
 80034f0:	f7fc ff74 	bl	80003dc <CLCD_I2C_Clear>
}
 80034f4:	bf00      	nop
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	0800d9c8 	.word	0x0800d9c8
 8003500:	0800e154 	.word	0x0800e154
 8003504:	200003d8 	.word	0x200003d8
 8003508:	0800e168 	.word	0x0800e168
 800350c:	0800d9e4 	.word	0x0800d9e4
 8003510:	20000408 	.word	0x20000408
 8003514:	0800da3c 	.word	0x0800da3c
 8003518:	0800e17c 	.word	0x0800e17c
 800351c:	0800e18c 	.word	0x0800e18c
 8003520:	0800e19c 	.word	0x0800e19c
 8003524:	2000040a 	.word	0x2000040a
 8003528:	0800e1ac 	.word	0x0800e1ac

0800352c <remove_all_finger>:

void remove_all_finger()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <remove_all_finger+0x6c>)
 8003534:	4919      	ldr	r1, [pc, #100]	@ (800359c <remove_all_finger+0x70>)
 8003536:	481a      	ldr	r0, [pc, #104]	@ (80035a0 <remove_all_finger+0x74>)
 8003538:	f7fc ff60 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = empty();
 800353c:	f7fd fb12 	bl	8000b64 <empty>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <remove_all_finger+0x36>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 800354a:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <remove_all_finger+0x78>)
 800354c:	4916      	ldr	r1, [pc, #88]	@ (80035a8 <remove_all_finger+0x7c>)
 800354e:	4814      	ldr	r0, [pc, #80]	@ (80035a0 <remove_all_finger+0x74>)
 8003550:	f7fc ff54 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f000 f98b 	bl	8003870 <buzzer>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <remove_all_finger+0x80>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e00e      	b.n	8003580 <remove_all_finger+0x54>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	1d38      	adds	r0, r7, #4
 8003566:	4a12      	ldr	r2, [pc, #72]	@ (80035b0 <remove_all_finger+0x84>)
 8003568:	2110      	movs	r1, #16
 800356a:	f009 fd33 	bl	800cfd4 <sniprintf>
        buzzer(5);
 800356e:	2005      	movs	r0, #5
 8003570:	f000 f97e 	bl	8003870 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	461a      	mov	r2, r3
 8003578:	490e      	ldr	r1, [pc, #56]	@ (80035b4 <remove_all_finger+0x88>)
 800357a:	4809      	ldr	r0, [pc, #36]	@ (80035a0 <remove_all_finger+0x74>)
 800357c:	f7fc ff3e 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003580:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003584:	f000 fe82 	bl	800428c <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 8003588:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <remove_all_finger+0x74>)
 800358a:	f7fc ff27 	bl	80003dc <CLCD_I2C_Clear>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	0800e1c0 	.word	0x0800e1c0
 800359c:	0800e1d0 	.word	0x0800e1d0
 80035a0:	200003d8 	.word	0x200003d8
 80035a4:	0800e004 	.word	0x0800e004
 80035a8:	0800e1e0 	.word	0x0800e1e0
 80035ac:	2000040a 	.word	0x2000040a
 80035b0:	0800e1ac 	.word	0x0800e1ac
 80035b4:	0800e19c 	.word	0x0800e19c

080035b8 <startface>:

void startface(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 80035bc:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <startface+0x5c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	2b59      	cmp	r3, #89	@ 0x59
 80035c4:	d10e      	bne.n	80035e4 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 80035c6:	4814      	ldr	r0, [pc, #80]	@ (8003618 <startface+0x60>)
 80035c8:	f7fc ff08 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	4811      	ldr	r0, [pc, #68]	@ (8003618 <startface+0x60>)
 80035d2:	f7fc fe99 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80035d6:	4911      	ldr	r1, [pc, #68]	@ (800361c <startface+0x64>)
 80035d8:	480f      	ldr	r0, [pc, #60]	@ (8003618 <startface+0x60>)
 80035da:	f7fc fee8 	bl	80003ae <CLCD_I2C_WriteString>
        opendoor();
 80035de:	f000 f8f7 	bl	80037d0 <opendoor>
 80035e2:	e010      	b.n	8003606 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <startface+0x5c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80035ec:	d10b      	bne.n	8003606 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 80035ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <startface+0x68>)
 80035f0:	490c      	ldr	r1, [pc, #48]	@ (8003624 <startface+0x6c>)
 80035f2:	4809      	ldr	r0, [pc, #36]	@ (8003618 <startface+0x60>)
 80035f4:	f7fc ff02 	bl	80003fc <CLCD_I2C_Display>
		buzzer(5);
 80035f8:	2005      	movs	r0, #5
 80035fa:	f000 f939 	bl	8003870 <buzzer>
        HAL_Delay(2000);
 80035fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003602:	f000 fe43 	bl	800428c <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003606:	2280      	movs	r2, #128	@ 0x80
 8003608:	2100      	movs	r1, #0
 800360a:	4802      	ldr	r0, [pc, #8]	@ (8003614 <startface+0x5c>)
 800360c:	f009 fd36 	bl	800d07c <memset>
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000350 	.word	0x20000350
 8003618:	200003d8 	.word	0x200003d8
 800361c:	0800da50 	.word	0x0800da50
 8003620:	0800e1f0 	.word	0x0800e1f0
 8003624:	0800e200 	.word	0x0800e200

08003628 <enter_password>:

void enter_password(char *password) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e01c      	b.n	8003670 <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 8003636:	200a      	movs	r0, #10
 8003638:	f7fd f83a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800363c:	4603      	mov	r3, r0
 800363e:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f7      	beq.n	8003636 <enter_password+0xe>
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	2b2f      	cmp	r3, #47	@ 0x2f
 800364a:	d9f4      	bls.n	8003636 <enter_password+0xe>
 800364c:	7afb      	ldrb	r3, [r7, #11]
 800364e:	2b39      	cmp	r3, #57	@ 0x39
 8003650:	d8f1      	bhi.n	8003636 <enter_password+0xe>
        buzzer(1);
 8003652:	2001      	movs	r0, #1
 8003654:	f000 f90c 	bl	8003870 <buzzer>
        password[i] = key;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	7afa      	ldrb	r2, [r7, #11]
 8003660:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003662:	212a      	movs	r1, #42	@ 0x2a
 8003664:	4808      	ldr	r0, [pc, #32]	@ (8003688 <enter_password+0x60>)
 8003666:	f7fc fe92 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b05      	cmp	r3, #5
 8003674:	dddf      	ble.n	8003636 <enter_password+0xe>
    }
    password[6] = '\0';
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3306      	adds	r3, #6
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200003d8 	.word	0x200003d8

0800368c <change_password>:

void change_password(void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 8003692:	2300      	movs	r3, #0
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	2100      	movs	r1, #0
 800369a:	460a      	mov	r2, r1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	460a      	mov	r2, r1
 80036a0:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 80036a2:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <change_password+0x5c>)
 80036a4:	4911      	ldr	r1, [pc, #68]	@ (80036ec <change_password+0x60>)
 80036a6:	4812      	ldr	r0, [pc, #72]	@ (80036f0 <change_password+0x64>)
 80036a8:	f7fc fea8 	bl	80003fc <CLCD_I2C_Display>
    enter_password(new_password);
 80036ac:	463b      	mov	r3, r7
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ffba 	bl	8003628 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 80036b4:	480f      	ldr	r0, [pc, #60]	@ (80036f4 <change_password+0x68>)
 80036b6:	f7fd fac3 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 80036ba:	463b      	mov	r3, r7
 80036bc:	2206      	movs	r2, #6
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <change_password+0x68>)
 80036c2:	f7fd faf1 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 80036c6:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <change_password+0x6c>)
 80036c8:	490c      	ldr	r1, [pc, #48]	@ (80036fc <change_password+0x70>)
 80036ca:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <change_password+0x64>)
 80036cc:	f7fc fe96 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f000 f8cd 	bl	8003870 <buzzer>
    HAL_Delay(2000);
 80036d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80036da:	f000 fdd7 	bl	800428c <HAL_Delay>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	0800e210 	.word	0x0800e210
 80036ec:	0800e218 	.word	0x0800e218
 80036f0:	200003d8 	.word	0x200003d8
 80036f4:	0800f400 	.word	0x0800f400
 80036f8:	0800e004 	.word	0x0800e004
 80036fc:	0800e228 	.word	0x0800e228

08003700 <check_password>:

uint8_t check_password(char *password) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	2100      	movs	r1, #0
 8003712:	460a      	mov	r2, r1
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	460a      	mov	r2, r1
 8003718:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	2206      	movs	r2, #6
 8003720:	4619      	mov	r1, r3
 8003722:	480a      	ldr	r0, [pc, #40]	@ (800374c <check_password+0x4c>)
 8003724:	f7fd fafb 	bl	8000d1e <Flash_Read_Array>
    stored_password[6] = '\0';
 8003728:	2300      	movs	r3, #0
 800372a:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 800372c:	f107 0308 	add.w	r3, r7, #8
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fc fd0a 	bl	800014c <strcmp>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	0800f400 	.word	0x0800f400

08003750 <set_default_password>:

void set_default_password(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 8003756:	4a16      	ldr	r2, [pc, #88]	@ (80037b0 <set_default_password+0x60>)
 8003758:	463b      	mov	r3, r7
 800375a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800375e:	6018      	str	r0, [r3, #0]
 8003760:	3304      	adds	r3, #4
 8003762:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003764:	4813      	ldr	r0, [pc, #76]	@ (80037b4 <set_default_password+0x64>)
 8003766:	f7fd fa6b 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 800376a:	463b      	mov	r3, r7
 800376c:	2206      	movs	r2, #6
 800376e:	4619      	mov	r1, r3
 8003770:	4810      	ldr	r0, [pc, #64]	@ (80037b4 <set_default_password+0x64>)
 8003772:	f7fd fa99 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 8003776:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <set_default_password+0x68>)
 8003778:	4910      	ldr	r1, [pc, #64]	@ (80037bc <set_default_password+0x6c>)
 800377a:	4811      	ldr	r0, [pc, #68]	@ (80037c0 <set_default_password+0x70>)
 800377c:	f7fc fe3e 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003780:	2001      	movs	r0, #1
 8003782:	f000 f875 	bl	8003870 <buzzer>
    HAL_Delay(1500);
 8003786:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800378a:	f000 fd7f 	bl	800428c <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 800378e:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <set_default_password+0x74>)
 8003790:	490d      	ldr	r1, [pc, #52]	@ (80037c8 <set_default_password+0x78>)
 8003792:	480b      	ldr	r0, [pc, #44]	@ (80037c0 <set_default_password+0x70>)
 8003794:	f7fc fe32 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800379c:	f000 fd76 	bl	800428c <HAL_Delay>
    exitmenu=0;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <set_default_password+0x7c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	0800e268 	.word	0x0800e268
 80037b4:	0800f400 	.word	0x0800f400
 80037b8:	0800e004 	.word	0x0800e004
 80037bc:	0800e23c 	.word	0x0800e23c
 80037c0:	200003d8 	.word	0x200003d8
 80037c4:	0800e24c 	.word	0x0800e24c
 80037c8:	0800e258 	.word	0x0800e258
 80037cc:	20000020 	.word	0x20000020

080037d0 <opendoor>:

void opendoor(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
    buzzer(1);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f000 f84a 	bl	8003870 <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 80037dc:	2201      	movs	r2, #1
 80037de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037e2:	481e      	ldr	r0, [pc, #120]	@ (800385c <opendoor+0x8c>)
 80037e4:	f001 fa1f 	bl	8004c26 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 80037e8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80037ec:	f000 fd4e 	bl	800428c <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 80037f0:	f000 fd42 	bl	8004278 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 80037f6:	e01b      	b.n	8003830 <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 80037f8:	f000 fd3e 	bl	8004278 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <opendoor+0x90>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 8003810:	4638      	mov	r0, r7
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4a13      	ldr	r2, [pc, #76]	@ (8003864 <opendoor+0x94>)
 8003816:	2110      	movs	r1, #16
 8003818:	f009 fbdc 	bl	800cfd4 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 800381c:	463b      	mov	r3, r7
 800381e:	461a      	mov	r2, r3
 8003820:	4911      	ldr	r1, [pc, #68]	@ (8003868 <opendoor+0x98>)
 8003822:	4812      	ldr	r0, [pc, #72]	@ (800386c <opendoor+0x9c>)
 8003824:	f7fc fdea 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800382c:	f000 fd2e 	bl	800428c <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003830:	f000 fd22 	bl	8004278 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800383e:	4293      	cmp	r3, r2
 8003840:	d9da      	bls.n	80037f8 <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003848:	4804      	ldr	r0, [pc, #16]	@ (800385c <opendoor+0x8c>)
 800384a:	f001 f9ec 	bl	8004c26 <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 800384e:	4807      	ldr	r0, [pc, #28]	@ (800386c <opendoor+0x9c>)
 8003850:	f7fc fdc4 	bl	80003dc <CLCD_I2C_Clear>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40010800 	.word	0x40010800
 8003860:	10624dd3 	.word	0x10624dd3
 8003864:	0800e270 	.word	0x0800e270
 8003868:	0800e27c 	.word	0x0800e27c
 800386c:	200003d8 	.word	0x200003d8

08003870 <buzzer>:
void buzzer( uint8_t countbeep)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 800387a:	e011      	b.n	80038a0 <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003882:	480c      	ldr	r0, [pc, #48]	@ (80038b4 <buzzer+0x44>)
 8003884:	f001 f9cf 	bl	8004c26 <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8003888:	2078      	movs	r0, #120	@ 0x78
 800388a:	f000 fcff 	bl	800428c <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 800388e:	2201      	movs	r2, #1
 8003890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003894:	4807      	ldr	r0, [pc, #28]	@ (80038b4 <buzzer+0x44>)
 8003896:	f001 f9c6 	bl	8004c26 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800389a:	2032      	movs	r0, #50	@ 0x32
 800389c:	f000 fcf6 	bl	800428c <HAL_Delay>
	while(countbeep--)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	71fa      	strb	r2, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e8      	bne.n	800387c <buzzer+0xc>
	}
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40010800 	.word	0x40010800

080038b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038bc:	b672      	cpsid	i
}
 80038be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <Error_Handler+0x8>

080038c4 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 80038d2:	bf00      	nop
 80038d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <TM_SPI_Send+0x4c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d1f8      	bne.n	80038d4 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 80038e2:	f107 0208 	add.w	r2, r7, #8
 80038e6:	f107 010c 	add.w	r1, r7, #12
 80038ea:	230a      	movs	r3, #10
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2301      	movs	r3, #1
 80038f0:	4807      	ldr	r0, [pc, #28]	@ (8003910 <TM_SPI_Send+0x4c>)
 80038f2:	f003 feff 	bl	80076f4 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80038f6:	bf00      	nop
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <TM_SPI_Send+0x4c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d0f8      	beq.n	80038f8 <TM_SPI_Send+0x34>
	return data_re[0];
 8003906:	7a3b      	ldrb	r3, [r7, #8]

}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000270 	.word	0x20000270

08003914 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003918:	f000 f8d5 	bl	8003ac6 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800391c:	218d      	movs	r1, #141	@ 0x8d
 800391e:	202a      	movs	r0, #42	@ 0x2a
 8003920:	f000 f836 	bl	8003990 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003924:	213e      	movs	r1, #62	@ 0x3e
 8003926:	202b      	movs	r0, #43	@ 0x2b
 8003928:	f000 f832 	bl	8003990 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 800392c:	211e      	movs	r1, #30
 800392e:	202d      	movs	r0, #45	@ 0x2d
 8003930:	f000 f82e 	bl	8003990 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003934:	2100      	movs	r1, #0
 8003936:	202c      	movs	r0, #44	@ 0x2c
 8003938:	f000 f82a 	bl	8003990 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800393c:	2170      	movs	r1, #112	@ 0x70
 800393e:	2026      	movs	r0, #38	@ 0x26
 8003940:	f000 f826 	bl	8003990 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003944:	2140      	movs	r1, #64	@ 0x40
 8003946:	2015      	movs	r0, #21
 8003948:	f000 f822 	bl	8003990 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800394c:	213d      	movs	r1, #61	@ 0x3d
 800394e:	2011      	movs	r0, #17
 8003950:	f000 f81e 	bl	8003990 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003954:	f000 f8a2 	bl	8003a9c <TM_MFRC522_AntennaOn>
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}

0800395c <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	2026      	movs	r0, #38	@ 0x26
 8003968:	f000 f8b5 	bl	8003ad6 <TM_MFRC522_Request>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9a1 	bl	8003cbe <TM_MFRC522_Anticoll>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003980:	f000 fa23 	bl	8003dca <TM_MFRC522_Halt>
	return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	460a      	mov	r2, r1
 800399a:	71fb      	strb	r3, [r7, #7]
 800399c:	4613      	mov	r3, r2
 800399e:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80039a0:	2200      	movs	r2, #0
 80039a2:	2110      	movs	r1, #16
 80039a4:	480c      	ldr	r0, [pc, #48]	@ (80039d8 <TM_MFRC522_WriteRegister+0x48>)
 80039a6:	f001 f93e 	bl	8004c26 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff84 	bl	80038c4 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 80039bc:	79bb      	ldrb	r3, [r7, #6]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff80 	bl	80038c4 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 80039c4:	2201      	movs	r2, #1
 80039c6:	2110      	movs	r1, #16
 80039c8:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <TM_MFRC522_WriteRegister+0x48>)
 80039ca:	f001 f92c 	bl	8004c26 <HAL_GPIO_WritePin>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40010800 	.word	0x40010800

080039dc <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80039e6:	2200      	movs	r2, #0
 80039e8:	2110      	movs	r1, #16
 80039ea:	480f      	ldr	r0, [pc, #60]	@ (8003a28 <TM_MFRC522_ReadRegister+0x4c>)
 80039ec:	f001 f91b 	bl	8004c26 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7ff ff5a 	bl	80038c4 <TM_SPI_Send>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003a14:	2201      	movs	r2, #1
 8003a16:	2110      	movs	r1, #16
 8003a18:	4803      	ldr	r0, [pc, #12]	@ (8003a28 <TM_MFRC522_ReadRegister+0x4c>)
 8003a1a:	f001 f904 	bl	8004c26 <HAL_GPIO_WritePin>

	return val;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010800 	.word	0x40010800

08003a2c <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	460a      	mov	r2, r1
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ffcc 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	79bb      	ldrb	r3, [r7, #6]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff9c 	bl	8003990 <TM_MFRC522_WriteRegister>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	460a      	mov	r2, r1
 8003a6a:	71fb      	strb	r3, [r7, #7]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ffb2 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	b25a      	sxtb	r2, r3
 8003a7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	4013      	ands	r3, r2
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff7e 	bl	8003990 <TM_MFRC522_WriteRegister>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003aa2:	2014      	movs	r0, #20
 8003aa4:	f7ff ff9a 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003ab6:	2103      	movs	r1, #3
 8003ab8:	2014      	movs	r0, #20
 8003aba:	f7ff ffb7 	bl	8003a2c <TM_MFRC522_SetBitMask>
	}
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003aca:	210f      	movs	r1, #15
 8003acc:	2001      	movs	r0, #1
 8003ace:	f7ff ff5f 	bl	8003990 <TM_MFRC522_WriteRegister>
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af02      	add	r7, sp, #8
 8003adc:	4603      	mov	r3, r0
 8003ade:	6039      	str	r1, [r7, #0]
 8003ae0:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003ae2:	2107      	movs	r1, #7
 8003ae4:	200d      	movs	r0, #13
 8003ae6:	f7ff ff53 	bl	8003990 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	79fa      	ldrb	r2, [r7, #7]
 8003aee:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2201      	movs	r2, #1
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	200c      	movs	r0, #12
 8003afe:	f000 f80f 	bl	8003b20 <TM_MFRC522_ToCard>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <TM_MFRC522_Request+0x3c>
 8003b0c:	89bb      	ldrh	r3, [r7, #12]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d001      	beq.n	8003b16 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003b12:	2302      	movs	r3, #2
 8003b14:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003b32:	2302      	movs	r3, #2
 8003b34:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d006      	beq.n	8003b52 <TM_MFRC522_ToCard+0x32>
 8003b44:	2b0e      	cmp	r3, #14
 8003b46:	d109      	bne.n	8003b5c <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003b48:	2312      	movs	r3, #18
 8003b4a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	757b      	strb	r3, [r7, #21]
			break;
 8003b50:	e005      	b.n	8003b5e <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003b52:	2377      	movs	r3, #119	@ 0x77
 8003b54:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003b56:	2330      	movs	r3, #48	@ 0x30
 8003b58:	757b      	strb	r3, [r7, #21]
			break;
 8003b5a:	e000      	b.n	8003b5e <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003b5c:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003b5e:	7dbb      	ldrb	r3, [r7, #22]
 8003b60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	2002      	movs	r0, #2
 8003b6a:	f7ff ff11 	bl	8003990 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003b6e:	2180      	movs	r1, #128	@ 0x80
 8003b70:	2004      	movs	r0, #4
 8003b72:	f7ff ff75 	bl	8003a60 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	200a      	movs	r0, #10
 8003b7a:	f7ff ff57 	bl	8003a2c <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7ff ff05 	bl	8003990 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	827b      	strh	r3, [r7, #18]
 8003b8a:	e00a      	b.n	8003ba2 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003b8c:	8a7b      	ldrh	r3, [r7, #18]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	2009      	movs	r0, #9
 8003b98:	f7ff fefa 	bl	8003990 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003b9c:	8a7b      	ldrh	r3, [r7, #18]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	827b      	strh	r3, [r7, #18]
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8a7a      	ldrh	r2, [r7, #18]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3ef      	bcc.n	8003b8c <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7ff feed 	bl	8003990 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d103      	bne.n	8003bc4 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	200d      	movs	r0, #13
 8003bc0:	f7ff ff34 	bl	8003a2c <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003bc4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003bc8:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003bca:	2004      	movs	r0, #4
 8003bcc:	f7ff ff06 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	753b      	strb	r3, [r7, #20]
		i--;
 8003bd4:	8a7b      	ldrh	r3, [r7, #18]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003bda:	8a7b      	ldrh	r3, [r7, #18]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <TM_MFRC522_ToCard+0xd6>
 8003be0:	7d3b      	ldrb	r3, [r7, #20]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <TM_MFRC522_ToCard+0xd6>
 8003bea:	7d3a      	ldrb	r2, [r7, #20]
 8003bec:	7d7b      	ldrb	r3, [r7, #21]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0e9      	beq.n	8003bca <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003bf6:	2180      	movs	r1, #128	@ 0x80
 8003bf8:	200d      	movs	r0, #13
 8003bfa:	f7ff ff31 	bl	8003a60 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003bfe:	8a7b      	ldrh	r3, [r7, #18]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d057      	beq.n	8003cb4 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003c04:	2006      	movs	r0, #6
 8003c06:	f7ff fee9 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f003 031b 	and.w	r3, r3, #27
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d14d      	bne.n	8003cb0 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003c18:	7d3a      	ldrb	r2, [r7, #20]
 8003c1a:	7dbb      	ldrb	r3, [r7, #22]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d140      	bne.n	8003cb4 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003c32:	200a      	movs	r0, #10
 8003c34:	f7ff fed2 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003c3c:	200c      	movs	r0, #12
 8003c3e:	f7ff fecd 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003c4a:	7c7b      	ldrb	r3, [r7, #17]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003c50:	7d3b      	ldrb	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	7c7b      	ldrb	r3, [r7, #17]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e005      	b.n	8003c74 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003c68:	7d3b      	ldrb	r3, [r7, #20]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003c74:	7d3b      	ldrb	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003c7e:	7d3b      	ldrb	r3, [r7, #20]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d901      	bls.n	8003c88 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003c84:	2310      	movs	r3, #16
 8003c86:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003c88:	2300      	movs	r3, #0
 8003c8a:	827b      	strh	r3, [r7, #18]
 8003c8c:	e00a      	b.n	8003ca4 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003c8e:	8a7b      	ldrh	r3, [r7, #18]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	18d4      	adds	r4, r2, r3
 8003c94:	2009      	movs	r0, #9
 8003c96:	f7ff fea1 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003c9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	827b      	strh	r3, [r7, #18]
 8003ca4:	7d3b      	ldrb	r3, [r7, #20]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8a7a      	ldrh	r2, [r7, #18]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3ef      	bcc.n	8003c8e <TM_MFRC522_ToCard+0x16e>
 8003cae:	e001      	b.n	8003cb4 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af02      	add	r7, sp, #8
 8003cc4:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	200d      	movs	r0, #13
 8003cce:	f7ff fe5f 	bl	8003990 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2293      	movs	r2, #147	@ 0x93
 8003cd6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	2220      	movs	r2, #32
 8003cde:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003ce0:	f107 030a 	add.w	r3, r7, #10
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	200c      	movs	r0, #12
 8003cee:	f7ff ff17 	bl	8003b20 <TM_MFRC522_ToCard>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73bb      	strb	r3, [r7, #14]
 8003d00:	e009      	b.n	8003d16 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003d02:	7bbb      	ldrb	r3, [r7, #14]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	7b7b      	ldrb	r3, [r7, #13]
 8003d0c:	4053      	eors	r3, r2
 8003d0e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003d10:	7bbb      	ldrb	r3, [r7, #14]
 8003d12:	3301      	adds	r3, #1
 8003d14:	73bb      	strb	r3, [r7, #14]
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d9f2      	bls.n	8003d02 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	7b7a      	ldrb	r2, [r7, #13]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	460b      	mov	r3, r1
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003d46:	2104      	movs	r1, #4
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f7ff fe89 	bl	8003a60 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003d4e:	2180      	movs	r1, #128	@ 0x80
 8003d50:	200a      	movs	r0, #10
 8003d52:	f7ff fe6b 	bl	8003a2c <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
 8003d5a:	e00a      	b.n	8003d72 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	2009      	movs	r0, #9
 8003d68:	f7ff fe12 	bl	8003990 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
 8003d72:	7dfa      	ldrb	r2, [r7, #23]
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3f0      	bcc.n	8003d5c <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7ff fe07 	bl	8003990 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003d82:	23ff      	movs	r3, #255	@ 0xff
 8003d84:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003d86:	2005      	movs	r0, #5
 8003d88:	f7ff fe28 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75bb      	strb	r3, [r7, #22]
		i--;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <TM_MFRC522_CalculateCRC+0x6e>
 8003d9c:	7dbb      	ldrb	r3, [r7, #22]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ef      	beq.n	8003d86 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003da6:	2022      	movs	r0, #34	@ 0x22
 8003da8:	f7ff fe18 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1c5c      	adds	r4, r3, #1
 8003db8:	2021      	movs	r0, #33	@ 0x21
 8003dba:	f7ff fe0f 	bl	80039dc <TM_MFRC522_ReadRegister>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	7023      	strb	r3, [r4, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}

08003dca <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003dd0:	2350      	movs	r3, #80	@ 0x50
 8003dd2:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003dd8:	463b      	mov	r3, r7
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	463b      	mov	r3, r7
 8003dde:	2102      	movs	r1, #2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ffa9 	bl	8003d38 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003de6:	463a      	mov	r2, r7
 8003de8:	4639      	mov	r1, r7
 8003dea:	1dbb      	adds	r3, r7, #6
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	2204      	movs	r2, #4
 8003df2:	200c      	movs	r0, #12
 8003df4:	f7ff fe94 	bl	8003b20 <TM_MFRC522_ToCard>



}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e06:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6193      	str	r3, [r2, #24]
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	61d3      	str	r3, [r2, #28]
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <HAL_MspInit+0x5c>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_MspInit+0x60>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <HAL_MspInit+0x60>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40010000 	.word	0x40010000

08003e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_I2C_MspInit+0x74>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d124      	bne.n	8003ece <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003e8a:	f043 0308 	orr.w	r3, r3, #8
 8003e8e:	6193      	str	r3, [r2, #24]
 8003e90:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea2:	2312      	movs	r3, #18
 8003ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 0310 	add.w	r3, r7, #16
 8003eae:	4619      	mov	r1, r3
 8003eb0:	480b      	ldr	r0, [pc, #44]	@ (8003ee0 <HAL_I2C_MspInit+0x7c>)
 8003eb2:	f000 fd1d 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003ebc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ec0:	61d3      	str	r3, [r2, #28]
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_I2C_MspInit+0x78>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40005800 	.word	0x40005800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010c00 	.word	0x40010c00

08003ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <HAL_SPI_MspInit+0x88>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d12f      	bne.n	8003f64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f04:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4a19      	ldr	r2, [pc, #100]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f0e:	6193      	str	r3, [r2, #24]
 8003f10:	4b17      	ldr	r3, [pc, #92]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6193      	str	r3, [r2, #24]
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f34:	23a0      	movs	r3, #160	@ 0xa0
 8003f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	4619      	mov	r1, r3
 8003f46:	480b      	ldr	r0, [pc, #44]	@ (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f48:	f000 fcd2 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f4c:	2340      	movs	r3, #64	@ 0x40
 8003f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f107 0310 	add.w	r3, r7, #16
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4805      	ldr	r0, [pc, #20]	@ (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f60:	f000 fcc6 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40013000 	.word	0x40013000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010800 	.word	0x40010800

08003f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f88:	d113      	bne.n	8003fb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <HAL_TIM_Base_MspInit+0x44>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003fbc <HAL_TIM_Base_MspInit+0x44>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_TIM_Base_MspInit+0x44>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	201c      	movs	r0, #28
 8003fa8:	f000 fa6b 	bl	8004482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fac:	201c      	movs	r0, #28
 8003fae:	f000 fa84 	bl	80044ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <HAL_UART_MspInit+0xa4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d13d      	bne.n	800405c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe0:	4b21      	ldr	r3, [pc, #132]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8003fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fea:	6193      	str	r3, [r2, #24]
 8003fec:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8003ffe:	f043 0308 	orr.w	r3, r3, #8
 8004002:	6193      	str	r3, [r2, #24]
 8004004:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <HAL_UART_MspInit+0xa8>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004010:	2340      	movs	r3, #64	@ 0x40
 8004012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004018:	2303      	movs	r3, #3
 800401a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4619      	mov	r1, r3
 8004022:	4812      	ldr	r0, [pc, #72]	@ (800406c <HAL_UART_MspInit+0xac>)
 8004024:	f000 fc64 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4619      	mov	r1, r3
 800403a:	480c      	ldr	r0, [pc, #48]	@ (800406c <HAL_UART_MspInit+0xac>)
 800403c:	f000 fc58 	bl	80048f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_UART_MspInit+0xb0>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	4a06      	ldr	r2, [pc, #24]	@ (8004070 <HAL_UART_MspInit+0xb0>)
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	@ 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40013800 	.word	0x40013800
 8004068:	40021000 	.word	0x40021000
 800406c:	40010c00 	.word	0x40010c00
 8004070:	40010000 	.word	0x40010000

08004074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <NMI_Handler+0x4>

0800407c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <HardFault_Handler+0x4>

08004084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <MemManage_Handler+0x4>

0800408c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <BusFault_Handler+0x4>

08004094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <UsageFault_Handler+0x4>

0800409c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c4:	f000 f8c6 	bl	8004254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}

080040cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80040d0:	4802      	ldr	r0, [pc, #8]	@ (80040dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80040d2:	f001 fb5e 	bl	8005792 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200010d0 	.word	0x200010d0

080040e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80040e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80040e8:	f000 fdb6 	bl	8004c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <TIM2_IRQHandler+0x10>)
 80040f6:	f003 fde7 	bl	8007cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200002c8 	.word	0x200002c8

08004104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800410c:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <_sbrk+0x5c>)
 800410e:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <_sbrk+0x60>)
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004118:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <_sbrk+0x64>)
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <_sbrk+0x68>)
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004134:	f008 ffaa 	bl	800d08c <__errno>
 8004138:	4603      	mov	r3, r0
 800413a:	220c      	movs	r2, #12
 800413c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e009      	b.n	8004158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004144:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <_sbrk+0x64>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <_sbrk+0x64>)
 8004154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20005000 	.word	0x20005000
 8004164:	00000400 	.word	0x00000400
 8004168:	2000040c 	.word	0x2000040c
 800416c:	20001728 	.word	0x20001728

08004170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800417c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800417e:	e003      	b.n	8004188 <LoopCopyDataInit>

08004180 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004182:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004184:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004186:	3104      	adds	r1, #4

08004188 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004188:	480a      	ldr	r0, [pc, #40]	@ (80041b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800418c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800418e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004190:	d3f6      	bcc.n	8004180 <CopyDataInit>
  ldr r2, =_sbss
 8004192:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004194:	e002      	b.n	800419c <LoopFillZerobss>

08004196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004196:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004198:	f842 3b04 	str.w	r3, [r2], #4

0800419c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800419c:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800419e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80041a0:	d3f9      	bcc.n	8004196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041a2:	f7ff ffe5 	bl	8004170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a6:	f008 ff77 	bl	800d098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041aa:	f7fc fefb 	bl	8000fa4 <main>
  bx lr
 80041ae:	4770      	bx	lr
  ldr r3, =_sidata
 80041b0:	0800e454 	.word	0x0800e454
  ldr r0, =_sdata
 80041b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80041b8:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 80041bc:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80041c0:	20001724 	.word	0x20001724

080041c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041c4:	e7fe      	b.n	80041c4 <ADC1_2_IRQHandler>
	...

080041c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_Init+0x28>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_Init+0x28>)
 80041d2:	f043 0310 	orr.w	r3, r3, #16
 80041d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d8:	2003      	movs	r0, #3
 80041da:	f000 f947 	bl	800446c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041de:	2000      	movs	r0, #0
 80041e0:	f000 f808 	bl	80041f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e4:	f7ff fe0c 	bl	8003e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40022000 	.word	0x40022000

080041f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_InitTick+0x54>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b12      	ldr	r3, [pc, #72]	@ (800424c <HAL_InitTick+0x58>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800420a:	fbb3 f3f1 	udiv	r3, r3, r1
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f95f 	bl	80044d6 <HAL_SYSTICK_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00e      	b.n	8004240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d80a      	bhi.n	800423e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004228:	2200      	movs	r2, #0
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f000 f927 	bl	8004482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004234:	4a06      	ldr	r2, [pc, #24]	@ (8004250 <HAL_InitTick+0x5c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000028 	.word	0x20000028
 800424c:	20000030 	.word	0x20000030
 8004250:	2000002c 	.word	0x2000002c

08004254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_IncTick+0x1c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_IncTick+0x20>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a03      	ldr	r2, [pc, #12]	@ (8004274 <HAL_IncTick+0x20>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	20000030 	.word	0x20000030
 8004274:	20000410 	.word	0x20000410

08004278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return uwTick;
 800427c:	4b02      	ldr	r3, [pc, #8]	@ (8004288 <HAL_GetTick+0x10>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	20000410 	.word	0x20000410

0800428c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff fff0 	bl	8004278 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d005      	beq.n	80042b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <HAL_Delay+0x44>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042b2:	bf00      	nop
 80042b4:	f7ff ffe0 	bl	8004278 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d8f7      	bhi.n	80042b4 <HAL_Delay+0x28>
  {
  }
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000030 	.word	0x20000030

080042d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004306:	4a04      	ldr	r2, [pc, #16]	@ (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	60d3      	str	r3, [r2, #12]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004320:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <__NVIC_GetPriorityGrouping+0x18>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0307 	and.w	r3, r3, #7
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	2b00      	cmp	r3, #0
 8004348:	db0b      	blt.n	8004362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4906      	ldr	r1, [pc, #24]	@ (800436c <__NVIC_EnableIRQ+0x34>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2001      	movs	r0, #1
 800435a:	fa00 f202 	lsl.w	r2, r0, r2
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	@ (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	@ (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	@ 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b04      	cmp	r3, #4
 80043e0:	bf28      	it	cs
 80043e2:	2304      	movcs	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b03      	subs	r3, #3
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
         );
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	@ 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004438:	d301      	bcc.n	800443e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443a:	2301      	movs	r3, #1
 800443c:	e00f      	b.n	800445e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443e:	4a0a      	ldr	r2, [pc, #40]	@ (8004468 <SysTick_Config+0x40>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004446:	210f      	movs	r1, #15
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	f7ff ff90 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <SysTick_Config+0x40>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004456:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <SysTick_Config+0x40>)
 8004458:	2207      	movs	r2, #7
 800445a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	e000e010 	.word	0xe000e010

0800446c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ff2d 	bl	80042d4 <__NVIC_SetPriorityGrouping>
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004482:	b580      	push	{r7, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	4603      	mov	r3, r0
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004494:	f7ff ff42 	bl	800431c <__NVIC_GetPriorityGrouping>
 8004498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	f7ff ff90 	bl	80043c4 <NVIC_EncodePriority>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff5f 	bl	8004370 <__NVIC_SetPriority>
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff35 	bl	8004338 <__NVIC_EnableIRQ>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ffa2 	bl	8004428 <SysTick_Config>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800450a:	4b2f      	ldr	r3, [pc, #188]	@ (80045c8 <HAL_FLASH_Program+0xd8>)
 800450c:	7e1b      	ldrb	r3, [r3, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_FLASH_Program+0x26>
 8004512:	2302      	movs	r3, #2
 8004514:	e054      	b.n	80045c0 <HAL_FLASH_Program+0xd0>
 8004516:	4b2c      	ldr	r3, [pc, #176]	@ (80045c8 <HAL_FLASH_Program+0xd8>)
 8004518:	2201      	movs	r2, #1
 800451a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800451c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004520:	f000 f8a8 	bl	8004674 <FLASH_WaitForLastOperation>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d144      	bne.n	80045b8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d102      	bne.n	800453a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004534:	2301      	movs	r3, #1
 8004536:	757b      	strb	r3, [r7, #21]
 8004538:	e007      	b.n	800454a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d102      	bne.n	8004546 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004540:	2302      	movs	r3, #2
 8004542:	757b      	strb	r3, [r7, #21]
 8004544:	e001      	b.n	800454a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004546:	2304      	movs	r3, #4
 8004548:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800454a:	2300      	movs	r3, #0
 800454c:	75bb      	strb	r3, [r7, #22]
 800454e:	e02d      	b.n	80045ac <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004550:	7dbb      	ldrb	r3, [r7, #22]
 8004552:	005a      	lsls	r2, r3, #1
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	eb02 0c03 	add.w	ip, r2, r3
 800455a:	7dbb      	ldrb	r3, [r7, #22]
 800455c:	0119      	lsls	r1, r3, #4
 800455e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004562:	f1c1 0620 	rsb	r6, r1, #32
 8004566:	f1a1 0020 	sub.w	r0, r1, #32
 800456a:	fa22 f401 	lsr.w	r4, r2, r1
 800456e:	fa03 f606 	lsl.w	r6, r3, r6
 8004572:	4334      	orrs	r4, r6
 8004574:	fa23 f000 	lsr.w	r0, r3, r0
 8004578:	4304      	orrs	r4, r0
 800457a:	fa23 f501 	lsr.w	r5, r3, r1
 800457e:	b2a3      	uxth	r3, r4
 8004580:	4619      	mov	r1, r3
 8004582:	4660      	mov	r0, ip
 8004584:	f000 f85a 	bl	800463c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004588:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800458c:	f000 f872 	bl	8004674 <FLASH_WaitForLastOperation>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004594:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HAL_FLASH_Program+0xdc>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	4a0c      	ldr	r2, [pc, #48]	@ (80045cc <HAL_FLASH_Program+0xdc>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80045a6:	7dbb      	ldrb	r3, [r7, #22]
 80045a8:	3301      	adds	r3, #1
 80045aa:	75bb      	strb	r3, [r7, #22]
 80045ac:	7dba      	ldrb	r2, [r7, #22]
 80045ae:	7d7b      	ldrb	r3, [r7, #21]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d3cd      	bcc.n	8004550 <HAL_FLASH_Program+0x60>
 80045b4:	e000      	b.n	80045b8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80045b6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_FLASH_Program+0xd8>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	761a      	strb	r2, [r3, #24]

  return status;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c8:	20000418 	.word	0x20000418
 80045cc:	40022000 	.word	0x40022000

080045d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <HAL_FLASH_Unlock+0x40>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_FLASH_Unlock+0x40>)
 80045e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <HAL_FLASH_Unlock+0x44>)
 80045ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045ec:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_FLASH_Unlock+0x40>)
 80045ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004618 <HAL_FLASH_Unlock+0x48>)
 80045f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_FLASH_Unlock+0x40>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004602:	79fb      	ldrb	r3, [r7, #7]
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40022000 	.word	0x40022000
 8004614:	45670123 	.word	0x45670123
 8004618:	cdef89ab 	.word	0xcdef89ab

0800461c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_FLASH_Lock+0x1c>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	4a04      	ldr	r2, [pc, #16]	@ (8004638 <HAL_FLASH_Lock+0x1c>)
 8004626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40022000 	.word	0x40022000

0800463c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004648:	4b08      	ldr	r3, [pc, #32]	@ (800466c <FLASH_Program_HalfWord+0x30>)
 800464a:	2200      	movs	r2, #0
 800464c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800464e:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <FLASH_Program_HalfWord+0x34>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	4a07      	ldr	r2, [pc, #28]	@ (8004670 <FLASH_Program_HalfWord+0x34>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	801a      	strh	r2, [r3, #0]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000418 	.word	0x20000418
 8004670:	40022000 	.word	0x40022000

08004674 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800467c:	f7ff fdfc 	bl	8004278 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004682:	e010      	b.n	80046a6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d00c      	beq.n	80046a6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <FLASH_WaitForLastOperation+0x2e>
 8004692:	f7ff fdf1 	bl	8004278 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d201      	bcs.n	80046a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e025      	b.n	80046f2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80046a6:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e8      	bne.n	8004684 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80046be:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046c0:	2220      	movs	r2, #32
 80046c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046c4:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80046d0:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <FLASH_WaitForLastOperation+0x88>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046e8:	f000 f80a 	bl	8004700 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40022000 	.word	0x40022000

08004700 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800470a:	4b23      	ldr	r3, [pc, #140]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004716:	4b21      	ldr	r3, [pc, #132]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f043 0302 	orr.w	r3, r3, #2
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004720:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f043 0310 	orr.w	r3, r3, #16
 8004728:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800472a:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004736:	4b19      	ldr	r3, [pc, #100]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004740:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800474a:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004756:	4b11      	ldr	r3, [pc, #68]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	4a0f      	ldr	r2, [pc, #60]	@ (800479c <FLASH_SetErrorCode+0x9c>)
 8004760:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f240 1201 	movw	r2, #257	@ 0x101
 8004774:	4293      	cmp	r3, r2
 8004776:	d106      	bne.n	8004786 <FLASH_SetErrorCode+0x86>
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4a06      	ldr	r2, [pc, #24]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	61d3      	str	r3, [r2, #28]
}  
 8004784:	e002      	b.n	800478c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004786:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <FLASH_SetErrorCode+0x98>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60d3      	str	r3, [r2, #12]
}  
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000
 800479c:	20000418 	.word	0x20000418

080047a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004870 <HAL_FLASHEx_Erase+0xd0>)
 80047b4:	7e1b      	ldrb	r3, [r3, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_FLASHEx_Erase+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e053      	b.n	8004866 <HAL_FLASHEx_Erase+0xc6>
 80047be:	4b2c      	ldr	r3, [pc, #176]	@ (8004870 <HAL_FLASHEx_Erase+0xd0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d116      	bne.n	80047fa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80047cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047d0:	f7ff ff50 	bl	8004674 <FLASH_WaitForLastOperation>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d141      	bne.n	800485e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80047da:	2001      	movs	r0, #1
 80047dc:	f000 f84c 	bl	8004878 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047e4:	f7ff ff46 	bl	8004674 <FLASH_WaitForLastOperation>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80047ec:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <HAL_FLASHEx_Erase+0xd4>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	4a20      	ldr	r2, [pc, #128]	@ (8004874 <HAL_FLASHEx_Erase+0xd4>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6113      	str	r3, [r2, #16]
 80047f8:	e031      	b.n	800485e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80047fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047fe:	f7ff ff39 	bl	8004674 <FLASH_WaitForLastOperation>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d12a      	bne.n	800485e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	e019      	b.n	800484c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 f849 	bl	80048b0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800481e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004822:	f7ff ff27 	bl	8004674 <FLASH_WaitForLastOperation>
 8004826:	4603      	mov	r3, r0
 8004828:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800482a:	4b12      	ldr	r3, [pc, #72]	@ (8004874 <HAL_FLASHEx_Erase+0xd4>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	4a11      	ldr	r2, [pc, #68]	@ (8004874 <HAL_FLASHEx_Erase+0xd4>)
 8004830:	f023 0302 	bic.w	r3, r3, #2
 8004834:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	601a      	str	r2, [r3, #0]
            break;
 8004842:	e00c      	b.n	800485e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800484a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	029a      	lsls	r2, r3, #10
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4413      	add	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3dc      	bcc.n	8004818 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800485e:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <HAL_FLASHEx_Erase+0xd0>)
 8004860:	2200      	movs	r2, #0
 8004862:	761a      	strb	r2, [r3, #24]

  return status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000418 	.word	0x20000418
 8004874:	40022000 	.word	0x40022000

08004878 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004880:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <FLASH_MassErase+0x30>)
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004886:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <FLASH_MassErase+0x34>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <FLASH_MassErase+0x34>)
 800488c:	f043 0304 	orr.w	r3, r3, #4
 8004890:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <FLASH_MassErase+0x34>)
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	4a05      	ldr	r2, [pc, #20]	@ (80048ac <FLASH_MassErase+0x34>)
 8004898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800489c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	20000418 	.word	0x20000418
 80048ac:	40022000 	.word	0x40022000

080048b0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <FLASH_PageErase+0x38>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <FLASH_PageErase+0x3c>)
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <FLASH_PageErase+0x3c>)
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <FLASH_PageErase+0x3c>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80048d0:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <FLASH_PageErase+0x3c>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	4a05      	ldr	r2, [pc, #20]	@ (80048ec <FLASH_PageErase+0x3c>)
 80048d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000418 	.word	0x20000418
 80048ec:	40022000 	.word	0x40022000

080048f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08b      	sub	sp, #44	@ 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004902:	e169      	b.n	8004bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004904:	2201      	movs	r2, #1
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	429a      	cmp	r2, r3
 800491e:	f040 8158 	bne.w	8004bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a9a      	ldr	r2, [pc, #616]	@ (8004b90 <HAL_GPIO_Init+0x2a0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d05e      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
 800492c:	4a98      	ldr	r2, [pc, #608]	@ (8004b90 <HAL_GPIO_Init+0x2a0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d875      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 8004932:	4a98      	ldr	r2, [pc, #608]	@ (8004b94 <HAL_GPIO_Init+0x2a4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d058      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
 8004938:	4a96      	ldr	r2, [pc, #600]	@ (8004b94 <HAL_GPIO_Init+0x2a4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d86f      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 800493e:	4a96      	ldr	r2, [pc, #600]	@ (8004b98 <HAL_GPIO_Init+0x2a8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d052      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
 8004944:	4a94      	ldr	r2, [pc, #592]	@ (8004b98 <HAL_GPIO_Init+0x2a8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d869      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 800494a:	4a94      	ldr	r2, [pc, #592]	@ (8004b9c <HAL_GPIO_Init+0x2ac>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d04c      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
 8004950:	4a92      	ldr	r2, [pc, #584]	@ (8004b9c <HAL_GPIO_Init+0x2ac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d863      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 8004956:	4a92      	ldr	r2, [pc, #584]	@ (8004ba0 <HAL_GPIO_Init+0x2b0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d046      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
 800495c:	4a90      	ldr	r2, [pc, #576]	@ (8004ba0 <HAL_GPIO_Init+0x2b0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d85d      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 8004962:	2b12      	cmp	r3, #18
 8004964:	d82a      	bhi.n	80049bc <HAL_GPIO_Init+0xcc>
 8004966:	2b12      	cmp	r3, #18
 8004968:	d859      	bhi.n	8004a1e <HAL_GPIO_Init+0x12e>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <HAL_GPIO_Init+0x80>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049eb 	.word	0x080049eb
 8004974:	080049c5 	.word	0x080049c5
 8004978:	080049d7 	.word	0x080049d7
 800497c:	08004a19 	.word	0x08004a19
 8004980:	08004a1f 	.word	0x08004a1f
 8004984:	08004a1f 	.word	0x08004a1f
 8004988:	08004a1f 	.word	0x08004a1f
 800498c:	08004a1f 	.word	0x08004a1f
 8004990:	08004a1f 	.word	0x08004a1f
 8004994:	08004a1f 	.word	0x08004a1f
 8004998:	08004a1f 	.word	0x08004a1f
 800499c:	08004a1f 	.word	0x08004a1f
 80049a0:	08004a1f 	.word	0x08004a1f
 80049a4:	08004a1f 	.word	0x08004a1f
 80049a8:	08004a1f 	.word	0x08004a1f
 80049ac:	08004a1f 	.word	0x08004a1f
 80049b0:	08004a1f 	.word	0x08004a1f
 80049b4:	080049cd 	.word	0x080049cd
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	4a79      	ldr	r2, [pc, #484]	@ (8004ba4 <HAL_GPIO_Init+0x2b4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049c2:	e02c      	b.n	8004a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	623b      	str	r3, [r7, #32]
          break;
 80049ca:	e029      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	3304      	adds	r3, #4
 80049d2:	623b      	str	r3, [r7, #32]
          break;
 80049d4:	e024      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	3308      	adds	r3, #8
 80049dc:	623b      	str	r3, [r7, #32]
          break;
 80049de:	e01f      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	330c      	adds	r3, #12
 80049e6:	623b      	str	r3, [r7, #32]
          break;
 80049e8:	e01a      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049f2:	2304      	movs	r3, #4
 80049f4:	623b      	str	r3, [r7, #32]
          break;
 80049f6:	e013      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a00:	2308      	movs	r3, #8
 8004a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	611a      	str	r2, [r3, #16]
          break;
 8004a0a:	e009      	b.n	8004a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	615a      	str	r2, [r3, #20]
          break;
 8004a16:	e003      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
          break;
 8004a1c:	e000      	b.n	8004a20 <HAL_GPIO_Init+0x130>
          break;
 8004a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2bff      	cmp	r3, #255	@ 0xff
 8004a24:	d801      	bhi.n	8004a2a <HAL_GPIO_Init+0x13a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	e001      	b.n	8004a2e <HAL_GPIO_Init+0x13e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2bff      	cmp	r3, #255	@ 0xff
 8004a34:	d802      	bhi.n	8004a3c <HAL_GPIO_Init+0x14c>
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	e002      	b.n	8004a42 <HAL_GPIO_Init+0x152>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	3b08      	subs	r3, #8
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	210f      	movs	r1, #15
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	6a39      	ldr	r1, [r7, #32]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80b1 	beq.w	8004bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba8 <HAL_GPIO_Init+0x2b8>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba8 <HAL_GPIO_Init+0x2b8>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6193      	str	r3, [r2, #24]
 8004a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba8 <HAL_GPIO_Init+0x2b8>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a88:	4a48      	ldr	r2, [pc, #288]	@ (8004bac <HAL_GPIO_Init+0x2bc>)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	220f      	movs	r2, #15
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a40      	ldr	r2, [pc, #256]	@ (8004bb0 <HAL_GPIO_Init+0x2c0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_GPIO_Init+0x1ec>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <HAL_GPIO_Init+0x2c4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00d      	beq.n	8004ad8 <HAL_GPIO_Init+0x1e8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb8 <HAL_GPIO_Init+0x2c8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <HAL_GPIO_Init+0x1e4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bbc <HAL_GPIO_Init+0x2cc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d101      	bne.n	8004ad0 <HAL_GPIO_Init+0x1e0>
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <HAL_GPIO_Init+0x1ee>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	e004      	b.n	8004ade <HAL_GPIO_Init+0x1ee>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e002      	b.n	8004ade <HAL_GPIO_Init+0x1ee>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_GPIO_Init+0x1ee>
 8004adc:	2300      	movs	r3, #0
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	f002 0203 	and.w	r2, r2, #3
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	4093      	lsls	r3, r2
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004aee:	492f      	ldr	r1, [pc, #188]	@ (8004bac <HAL_GPIO_Init+0x2bc>)
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	3302      	adds	r3, #2
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b08:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	492c      	ldr	r1, [pc, #176]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]
 8004b14:	e006      	b.n	8004b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	4928      	ldr	r1, [pc, #160]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d006      	beq.n	8004b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b30:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4922      	ldr	r1, [pc, #136]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e006      	b.n	8004b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	491e      	ldr	r1, [pc, #120]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b58:	4b19      	ldr	r3, [pc, #100]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4918      	ldr	r1, [pc, #96]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]
 8004b64:	e006      	b.n	8004b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b66:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	4914      	ldr	r1, [pc, #80]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d021      	beq.n	8004bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b80:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	490e      	ldr	r1, [pc, #56]	@ (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60cb      	str	r3, [r1, #12]
 8004b8c:	e021      	b.n	8004bd2 <HAL_GPIO_Init+0x2e2>
 8004b8e:	bf00      	nop
 8004b90:	10320000 	.word	0x10320000
 8004b94:	10310000 	.word	0x10310000
 8004b98:	10220000 	.word	0x10220000
 8004b9c:	10210000 	.word	0x10210000
 8004ba0:	10120000 	.word	0x10120000
 8004ba4:	10110000 	.word	0x10110000
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40010800 	.word	0x40010800
 8004bb4:	40010c00 	.word	0x40010c00
 8004bb8:	40011000 	.word	0x40011000
 8004bbc:	40011400 	.word	0x40011400
 8004bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <HAL_GPIO_Init+0x304>)
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	4909      	ldr	r1, [pc, #36]	@ (8004bf4 <HAL_GPIO_Init+0x304>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f47f ae8e 	bne.w	8004904 <HAL_GPIO_Init+0x14>
  }
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	372c      	adds	r7, #44	@ 0x2c
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	e001      	b.n	8004c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	807b      	strh	r3, [r7, #2]
 8004c32:	4613      	mov	r3, r2
 8004c34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c36:	787b      	ldrb	r3, [r7, #1]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c3c:	887a      	ldrh	r2, [r7, #2]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c42:	e003      	b.n	8004c4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	041a      	lsls	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f806 	bl	8004c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40010400 	.word	0x40010400

08004c88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e12b      	b.n	8004f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff f8ce 	bl	8003e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	@ 0x24
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d00:	f002 fb78 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8004d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4a81      	ldr	r2, [pc, #516]	@ (8004f10 <HAL_I2C_Init+0x274>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d807      	bhi.n	8004d20 <HAL_I2C_Init+0x84>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a80      	ldr	r2, [pc, #512]	@ (8004f14 <HAL_I2C_Init+0x278>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bf94      	ite	ls
 8004d18:	2301      	movls	r3, #1
 8004d1a:	2300      	movhi	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e006      	b.n	8004d2e <HAL_I2C_Init+0x92>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a7d      	ldr	r2, [pc, #500]	@ (8004f18 <HAL_I2C_Init+0x27c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	bf94      	ite	ls
 8004d28:	2301      	movls	r3, #1
 8004d2a:	2300      	movhi	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0e7      	b.n	8004f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4a78      	ldr	r2, [pc, #480]	@ (8004f1c <HAL_I2C_Init+0x280>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	0c9b      	lsrs	r3, r3, #18
 8004d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a6a      	ldr	r2, [pc, #424]	@ (8004f10 <HAL_I2C_Init+0x274>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d802      	bhi.n	8004d70 <HAL_I2C_Init+0xd4>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	e009      	b.n	8004d84 <HAL_I2C_Init+0xe8>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	4a69      	ldr	r2, [pc, #420]	@ (8004f20 <HAL_I2C_Init+0x284>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	3301      	adds	r3, #1
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	495c      	ldr	r1, [pc, #368]	@ (8004f10 <HAL_I2C_Init+0x274>)
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d819      	bhi.n	8004dd8 <HAL_I2C_Init+0x13c>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1e59      	subs	r1, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004db8:	400b      	ands	r3, r1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_I2C_Init+0x138>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1e59      	subs	r1, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd2:	e051      	b.n	8004e78 <HAL_I2C_Init+0x1dc>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	e04f      	b.n	8004e78 <HAL_I2C_Init+0x1dc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d111      	bne.n	8004e04 <HAL_I2C_Init+0x168>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1e58      	subs	r0, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	440b      	add	r3, r1
 8004dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e012      	b.n	8004e2a <HAL_I2C_Init+0x18e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1e58      	subs	r0, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	0099      	lsls	r1, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Init+0x196>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e022      	b.n	8004e78 <HAL_I2C_Init+0x1dc>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10e      	bne.n	8004e58 <HAL_I2C_Init+0x1bc>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1e58      	subs	r0, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	440b      	add	r3, r1
 8004e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e56:	e00f      	b.n	8004e78 <HAL_I2C_Init+0x1dc>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1e58      	subs	r0, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	0099      	lsls	r1, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	6809      	ldr	r1, [r1, #0]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ea6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6911      	ldr	r1, [r2, #16]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68d2      	ldr	r2, [r2, #12]
 8004eb2:	4311      	orrs	r1, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	000186a0 	.word	0x000186a0
 8004f14:	001e847f 	.word	0x001e847f
 8004f18:	003d08ff 	.word	0x003d08ff
 8004f1c:	431bde83 	.word	0x431bde83
 8004f20:	10624dd3 	.word	0x10624dd3

08004f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	460b      	mov	r3, r1
 8004f32:	817b      	strh	r3, [r7, #10]
 8004f34:	4613      	mov	r3, r2
 8004f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f38:	f7ff f99e 	bl	8004278 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	f040 80e0 	bne.w	800510c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2319      	movs	r3, #25
 8004f52:	2201      	movs	r2, #1
 8004f54:	4970      	ldr	r1, [pc, #448]	@ (8005118 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f964 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0d3      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_Master_Transmit+0x50>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0cc      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d007      	beq.n	8004f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2221      	movs	r2, #33	@ 0x21
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	893a      	ldrh	r2, [r7, #8]
 8004fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a50      	ldr	r2, [pc, #320]	@ (800511c <HAL_I2C_Master_Transmit+0x1f8>)
 8004fda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fdc:	8979      	ldrh	r1, [r7, #10]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f89c 	bl	8005120 <I2C_MasterRequestWrite>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e08d      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005008:	e066      	b.n	80050d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	6a39      	ldr	r1, [r7, #32]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f9de 	bl	80053d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	2b04      	cmp	r3, #4
 8005020:	d107      	bne.n	8005032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06b      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d11b      	bne.n	80050ac <HAL_I2C_Master_Transmit+0x188>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6a39      	ldr	r1, [r7, #32]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f9ce 	bl	8005452 <I2C_WaitOnBTFFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d107      	bne.n	80050d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e01a      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d194      	bne.n	800500a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	00100002 	.word	0x00100002
 800511c:	ffff0000 	.word	0xffff0000

08005120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	460b      	mov	r3, r1
 800512e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d006      	beq.n	800514a <I2C_MasterRequestWrite+0x2a>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d003      	beq.n	800514a <I2C_MasterRequestWrite+0x2a>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005148:	d108      	bne.n	800515c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e00b      	b.n	8005174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	2b12      	cmp	r3, #18
 8005162:	d107      	bne.n	8005174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f84f 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519a:	d103      	bne.n	80051a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e035      	b.n	8005214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b0:	d108      	bne.n	80051c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051b2:	897b      	ldrh	r3, [r7, #10]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051c0:	611a      	str	r2, [r3, #16]
 80051c2:	e01b      	b.n	80051fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051c4:	897b      	ldrh	r3, [r7, #10]
 80051c6:	11db      	asrs	r3, r3, #7
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0306 	and.w	r3, r3, #6
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f063 030f 	orn	r3, r3, #15
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	490e      	ldr	r1, [pc, #56]	@ (800521c <I2C_MasterRequestWrite+0xfc>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f875 	bl	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e010      	b.n	8005214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4907      	ldr	r1, [pc, #28]	@ (8005220 <I2C_MasterRequestWrite+0x100>)
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f865 	bl	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	00010008 	.word	0x00010008
 8005220:	00010002 	.word	0x00010002

08005224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005234:	e025      	b.n	8005282 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d021      	beq.n	8005282 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7ff f81b 	bl	8004278 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d116      	bne.n	8005282 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e023      	b.n	80052ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	0c1b      	lsrs	r3, r3, #16
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d10d      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	e00c      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d0b6      	beq.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e0:	e051      	b.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f0:	d123      	bne.n	800533a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005300:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800530a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e046      	b.n	80053c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d021      	beq.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005342:	f7fe ff99 	bl	8004278 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e020      	b.n	80053c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10c      	bne.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	e00b      	b.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	43da      	mvns	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4013      	ands	r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d18d      	bne.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053dc:	e02d      	b.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f878 	bl	80054d4 <I2C_IsAcknowledgeFailed>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e02d      	b.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d021      	beq.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fe ff3f 	bl	8004278 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d116      	bne.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e007      	b.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b80      	cmp	r3, #128	@ 0x80
 8005446:	d1ca      	bne.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800545e:	e02d      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f837 	bl	80054d4 <I2C_IsAcknowledgeFailed>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e02d      	b.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d021      	beq.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005478:	f7fe fefe 	bl	8004278 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e007      	b.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d1ca      	bne.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d11b      	bne.n	8005524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f043 0204 	orr.w	r2, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b08b      	sub	sp, #44	@ 0x2c
 8005534:	af06      	add	r7, sp, #24
 8005536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0fd      	b.n	800573e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f007 fa0a 	bl	800c970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2203      	movs	r2, #3
 8005560:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f003 f981 	bl	8008870 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	687e      	ldr	r6, [r7, #4]
 8005576:	466d      	mov	r5, sp
 8005578:	f106 0410 	add.w	r4, r6, #16
 800557c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800557e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	1d33      	adds	r3, r6, #4
 8005586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f003 f94b 	bl	8008824 <USB_CoreInit>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0ce      	b.n	800573e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 f97c 	bl	80088a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e04c      	b.n	800564c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	3301      	adds	r3, #1
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	7bfa      	ldrb	r2, [r7, #15]
 80055da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	b298      	uxth	r0, r3
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	3336      	adds	r3, #54	@ 0x36
 80055f0:	4602      	mov	r2, r0
 80055f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	3303      	adds	r3, #3
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3338      	adds	r3, #56	@ 0x38
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	333c      	adds	r3, #60	@ 0x3c
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	3340      	adds	r3, #64	@ 0x40
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	3301      	adds	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	7bfa      	ldrb	r2, [r7, #15]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3ad      	bcc.n	80055b2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	440b      	add	r3, r1
 800566a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	440b      	add	r3, r1
 8005696:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800569e:	7bfa      	ldrb	r2, [r7, #15]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	440b      	add	r3, r1
 80056ac:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	440b      	add	r3, r1
 80056c2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056ca:	7bfa      	ldrb	r2, [r7, #15]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	440b      	add	r3, r1
 80056d8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	3301      	adds	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	7bfa      	ldrb	r2, [r7, #15]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d3b5      	bcc.n	800565c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	687e      	ldr	r6, [r7, #4]
 80056f8:	466d      	mov	r5, sp
 80056fa:	f106 0410 	add.w	r4, r6, #16
 80056fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	1d33      	adds	r3, r6, #4
 8005708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800570a:	6838      	ldr	r0, [r7, #0]
 800570c:	f003 f8d6 	bl	80088bc <USB_DevInit>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e00d      	b.n	800573e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f005 faf7 	bl	800ad2a <USB_DevDisconnect>

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005746 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_PCD_Start+0x16>
 8005758:	2302      	movs	r3, #2
 800575a:	e016      	b.n	800578a <HAL_PCD_Start+0x44>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f003 f86b 	bl	8008844 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800576e:	2101      	movs	r1, #1
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f007 fb70 	bl	800ce56 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f005 facb 	bl	800ad16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f005 facd 	bl	800ad3e <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ae:	d102      	bne.n	80057b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb5f 	bl	8005e74 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f005 fabf 	bl	800ad3e <USB_ReadInterrupts>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ca:	d112      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057de:	b292      	uxth	r2, r2
 80057e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f007 f93e 	bl	800ca66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80057ea:	2100      	movs	r1, #0
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f923 	bl	8005a38 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f005 faa1 	bl	800ad3e <USB_ReadInterrupts>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005806:	d10b      	bne.n	8005820 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800581a:	b292      	uxth	r2, r2
 800581c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f005 fa8a 	bl	800ad3e <USB_ReadInterrupts>
 800582a:	4603      	mov	r3, r0
 800582c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005834:	d10b      	bne.n	800584e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005848:	b292      	uxth	r2, r2
 800584a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f005 fa73 	bl	800ad3e <USB_ReadInterrupts>
 8005858:	4603      	mov	r3, r0
 800585a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005862:	d126      	bne.n	80058b2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	b292      	uxth	r2, r2
 8005878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0208 	bic.w	r2, r2, #8
 800588e:	b292      	uxth	r2, r2
 8005890:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f007 f91f 	bl	800cad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058ac:	b292      	uxth	r2, r2
 80058ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f005 fa41 	bl	800ad3e <USB_ReadInterrupts>
 80058bc:	4603      	mov	r3, r0
 80058be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c6:	f040 8082 	bne.w	80059ce <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e010      	b.n	80058f2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	b292      	uxth	r2, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	3320      	adds	r3, #32
 80058e6:	443b      	add	r3, r7
 80058e8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
 80058ee:	3301      	adds	r3, #1
 80058f0:	77fb      	strb	r3, [r7, #31]
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	2b07      	cmp	r3, #7
 80058f6:	d9eb      	bls.n	80058d0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	b292      	uxth	r2, r2
 800590c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	b292      	uxth	r2, r2
 8005924:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005928:	bf00      	nop
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005932:	b29b      	uxth	r3, r3
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f6      	beq.n	800592a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594e:	b292      	uxth	r2, r2
 8005950:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e00f      	b.n	800597a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	4611      	mov	r1, r2
 8005962:	7ffa      	ldrb	r2, [r7, #31]
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	440a      	add	r2, r1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	3320      	adds	r3, #32
 800596c:	443b      	add	r3, r7
 800596e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005972:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	3301      	adds	r3, #1
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	7ffb      	ldrb	r3, [r7, #31]
 800597c:	2b07      	cmp	r3, #7
 800597e:	d9ec      	bls.n	800595a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0208 	orr.w	r2, r2, #8
 8005992:	b292      	uxth	r2, r2
 8005994:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059aa:	b292      	uxth	r2, r2
 80059ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0204 	orr.w	r2, r2, #4
 80059c2:	b292      	uxth	r2, r2
 80059c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f007 f86b 	bl	800caa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f005 f9b3 	bl	800ad3e <USB_ReadInterrupts>
 80059d8:	4603      	mov	r3, r0
 80059da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e2:	d10e      	bne.n	8005a02 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059f6:	b292      	uxth	r2, r2
 80059f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f007 f824 	bl	800ca4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f005 f999 	bl	800ad3e <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	d10b      	bne.n	8005a30 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_PCD_SetAddress+0x1a>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e013      	b.n	8005a7a <HAL_PCD_SetAddress+0x42>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	78fa      	ldrb	r2, [r7, #3]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f005 f940 	bl	800acf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	70fb      	strb	r3, [r7, #3]
 8005a94:	460b      	mov	r3, r1
 8005a96:	803b      	strh	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da0e      	bge.n	8005ac6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	705a      	strb	r2, [r3, #1]
 8005ac4:	e00e      	b.n	8005ae4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 0207 	and.w	r2, r3, #7
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005af0:	883a      	ldrh	r2, [r7, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	78ba      	ldrb	r2, [r7, #2]
 8005afa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b0e:	78bb      	ldrb	r3, [r7, #2]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d102      	bne.n	8005b1a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_PCD_EP_Open+0xa6>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e00e      	b.n	8005b46 <HAL_PCD_EP_Open+0xc4>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 fee0 	bl	80088fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da0e      	bge.n	8005b80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	705a      	strb	r2, [r3, #1]
 8005b7e:	e00e      	b.n	8005b9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	f003 0207 	and.w	r2, r3, #7
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_PCD_EP_Close+0x6a>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e00e      	b.n	8005bd6 <HAL_PCD_EP_Close+0x88>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 fa02 	bl	8008fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	460b      	mov	r3, r1
 8005bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	f003 0207 	and.w	r2, r3, #7
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f003 fbb4 	bl	80093a8 <USB_EPStartXfer>
 8005c40:	e005      	b.n	8005c4e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 fbad 	bl	80093a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 0207 	and.w	r2, r3, #7
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	440b      	add	r3, r1
 8005c76:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	460b      	mov	r3, r1
 8005c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd2:	7afb      	ldrb	r3, [r7, #11]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f003 fb5a 	bl	80093a8 <USB_EPStartXfer>
 8005cf4:	e005      	b.n	8005d02 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6979      	ldr	r1, [r7, #20]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f003 fb53 	bl	80093a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 0207 	and.w	r2, r3, #7
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d901      	bls.n	8005d2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e04c      	b.n	8005dc4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da0e      	bge.n	8005d50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	705a      	strb	r2, [r3, #1]
 8005d4e:	e00c      	b.n	8005d6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d50:	78fa      	ldrb	r2, [r7, #3]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_PCD_EP_SetStall+0x7e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e01c      	b.n	8005dc4 <HAL_PCD_EP_SetStall+0xb8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 feac 	bl	800aaf6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f004 ffd1 	bl	800ad5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 020f 	and.w	r2, r3, #15
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d901      	bls.n	8005dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e040      	b.n	8005e6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da0e      	bge.n	8005e10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	705a      	strb	r2, [r3, #1]
 8005e0e:	e00e      	b.n	8005e2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_PCD_EP_ClrStall+0x82>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e00e      	b.n	8005e6c <HAL_PCD_EP_ClrStall+0xa0>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 fe9a 	bl	800ab96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08e      	sub	sp, #56	@ 0x38
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e7c:	e2de      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e86:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005e88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8005e94:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 8157 	bne.w	800614c <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005e9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d151      	bne.n	8005f4c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb8:	81fb      	strh	r3, [r7, #14]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3328      	adds	r3, #40	@ 0x28
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	441a      	add	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f006 fd81 	bl	800ca16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 828d 	beq.w	800643c <PCD_EP_ISR_Handler+0x5c8>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 8288 	bne.w	800643c <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f4a:	e277      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005f5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d034      	beq.n	8005fd0 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	3306      	adds	r3, #6
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f004 ff28 	bl	800adfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	823b      	strh	r3, [r7, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	8a3a      	ldrh	r2, [r7, #16]
 8005fc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f006 fcf7 	bl	800c9bc <HAL_PCD_SetupStageCallback>
 8005fce:	e235      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005fd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f280 8231 	bge.w	800643c <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	83bb      	strh	r3, [r7, #28]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	8bba      	ldrh	r2, [r7, #28]
 8005ff0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	3306      	adds	r3, #6
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d019      	beq.n	8006060 <PCD_EP_ISR_Handler+0x1ec>
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	6959      	ldr	r1, [r3, #20]
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006044:	b29b      	uxth	r3, r3
 8006046:	f004 fed8 	bl	800adfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	441a      	add	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006058:	2100      	movs	r1, #0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f006 fcc0 	bl	800c9e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4413      	add	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d112      	bne.n	80060ae <PCD_EP_ISR_Handler+0x23a>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006092:	b29a      	uxth	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e02f      	b.n	800610e <PCD_EP_ISR_Handler+0x29a>
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80060b4:	d813      	bhi.n	80060de <PCD_EP_ISR_Handler+0x26a>
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <PCD_EP_ISR_Handler+0x25c>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	3301      	adds	r3, #1
 80060ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	e017      	b.n	800610e <PCD_EP_ISR_Handler+0x29a>
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <PCD_EP_ISR_Handler+0x284>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	3b01      	subs	r3, #1
 80060f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	b29b      	uxth	r3, r3
 8006100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006108:	b29a      	uxth	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	827b      	strh	r3, [r7, #18]
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006126:	827b      	strh	r3, [r7, #18]
 8006128:	8a7b      	ldrh	r3, [r7, #18]
 800612a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800612e:	827b      	strh	r3, [r7, #18]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	8a7b      	ldrh	r3, [r7, #18]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	e177      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800615e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006162:	2b00      	cmp	r3, #0
 8006164:	f280 80ea 	bge.w	800633c <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29a      	uxth	r2, r3
 800617a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800617e:	4013      	ands	r3, r2
 8006180:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006192:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006196:	b292      	uxth	r2, r2
 8006198:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800619a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	7b1b      	ldrb	r3, [r3, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d122      	bne.n	80061fe <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	3306      	adds	r3, #6
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 80061e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8087 	beq.w	80062f8 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	88da      	ldrh	r2, [r3, #6]
 80061f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061f8:	f004 fdff 	bl	800adfa <USB_ReadPMA>
 80061fc:	e07c      	b.n	80062f8 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d108      	bne.n	8006218 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006206:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006208:	461a      	mov	r2, r3
 800620a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f923 	bl	8006458 <HAL_PCD_EP_DB_Receive>
 8006212:	4603      	mov	r3, r0
 8006214:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006216:	e06f      	b.n	80062f8 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800624c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d021      	beq.n	80062b6 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	3302      	adds	r3, #2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800629c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d02a      	beq.n	80062f8 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	6959      	ldr	r1, [r3, #20]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	891a      	ldrh	r2, [r3, #8]
 80062ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062b0:	f004 fda3 	bl	800adfa <USB_ReadPMA>
 80062b4:	e020      	b.n	80062f8 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	3306      	adds	r3, #6
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062de:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 80062e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	6959      	ldr	r1, [r3, #20]
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	895a      	ldrh	r2, [r3, #10]
 80062f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062f4:	f004 fd81 	bl	800adfa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062fe:	441a      	add	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800630a:	441a      	add	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <PCD_EP_ISR_Handler+0x4ae>
 8006318:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d206      	bcs.n	8006330 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f006 fb59 	bl	800c9e0 <HAL_PCD_DataOutStageCallback>
 800632e:	e005      	b.n	800633c <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006336:	4618      	mov	r0, r3
 8006338:	f003 f836 	bl	80093a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800633c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d07a      	beq.n	800643c <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8006346:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006374:	843b      	strh	r3, [r7, #32]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	441a      	add	r2, r3
 8006384:	8c3b      	ldrh	r3, [r7, #32]
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	78db      	ldrb	r3, [r3, #3]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d108      	bne.n	80063ac <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d146      	bne.n	8006430 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80063a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d141      	bne.n	8006430 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	3302      	adds	r3, #2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	8bfb      	ldrh	r3, [r7, #30]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d906      	bls.n	80063ee <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	8bfb      	ldrh	r3, [r7, #30]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	619a      	str	r2, [r3, #24]
 80063ec:	e002      	b.n	80063f4 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	2200      	movs	r2, #0
 80063f2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f006 fb07 	bl	800ca16 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8006408:	e018      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	8bfb      	ldrh	r3, [r7, #30]
 8006410:	441a      	add	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	8bfb      	ldrh	r3, [r7, #30]
 800641c:	441a      	add	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006428:	4618      	mov	r0, r3
 800642a:	f002 ffbd 	bl	80093a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800642e:	e005      	b.n	800643c <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006430:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006432:	461a      	mov	r2, r3
 8006434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f91b 	bl	8006672 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006444:	b29b      	uxth	r3, r3
 8006446:	b21b      	sxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	f6ff ad18 	blt.w	8005e7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3738      	adds	r7, #56	@ 0x38
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d07e      	beq.n	800656e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	3302      	adds	r3, #2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	8b7b      	ldrh	r3, [r7, #26]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d306      	bcc.n	80064b2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	8b7b      	ldrh	r3, [r7, #26]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	619a      	str	r2, [r3, #24]
 80064b0:	e002      	b.n	80064b8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d123      	bne.n	8006508 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064da:	833b      	strh	r3, [r7, #24]
 80064dc:	8b3b      	ldrh	r3, [r7, #24]
 80064de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064e2:	833b      	strh	r3, [r7, #24]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	8b3b      	ldrh	r3, [r7, #24]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01f      	beq.n	8006552 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652c:	82fb      	strh	r3, [r7, #22]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	441a      	add	r2, r3
 800653c:	8afb      	ldrh	r3, [r7, #22]
 800653e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800654e:	b29b      	uxth	r3, r3
 8006550:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006552:	8b7b      	ldrh	r3, [r7, #26]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8087 	beq.w	8006668 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6959      	ldr	r1, [r3, #20]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	891a      	ldrh	r2, [r3, #8]
 8006566:	8b7b      	ldrh	r3, [r7, #26]
 8006568:	f004 fc47 	bl	800adfa <USB_ReadPMA>
 800656c:	e07c      	b.n	8006668 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	3306      	adds	r3, #6
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006596:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	8b7b      	ldrh	r3, [r7, #26]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d306      	bcc.n	80065b0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	8b7b      	ldrh	r3, [r7, #26]
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	619a      	str	r2, [r3, #24]
 80065ae:	e002      	b.n	80065b6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d123      	bne.n	8006606 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	83fb      	strh	r3, [r7, #30]
 80065da:	8bfb      	ldrh	r3, [r7, #30]
 80065dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065e0:	83fb      	strh	r3, [r7, #30]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8bfb      	ldrh	r3, [r7, #30]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11f      	bne.n	8006650 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	83bb      	strh	r3, [r7, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	8bbb      	ldrh	r3, [r7, #28]
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006650:	8b7b      	ldrh	r3, [r7, #26]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6959      	ldr	r1, [r3, #20]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	895a      	ldrh	r2, [r3, #10]
 8006662:	8b7b      	ldrh	r3, [r7, #26]
 8006664:	f004 fbc9 	bl	800adfa <USB_ReadPMA>
    }
  }

  return count;
 8006668:	8b7b      	ldrh	r3, [r7, #26]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b094      	sub	sp, #80	@ 0x50
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	4613      	mov	r3, r2
 800667e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8138 	beq.w	80068fc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006694:	b29b      	uxth	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	4413      	add	r3, r2
 80066a0:	3302      	adds	r3, #2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d907      	bls.n	80066d4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	619a      	str	r2, [r3, #24]
 80066d2:	e002      	b.n	80066da <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d12c      	bne.n	800673c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f006 f994 	bl	800ca16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 823a 	beq.w	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006714:	82fb      	strh	r3, [r7, #22]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8afb      	ldrh	r3, [r7, #22]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
 800673a:	e218      	b.n	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01f      	beq.n	8006786 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006760:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800677e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 81ee 	bne.w	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800679a:	441a      	add	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80067a8:	441a      	add	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d309      	bcc.n	80067ce <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6a1a      	ldr	r2, [r3, #32]
 80067c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	621a      	str	r2, [r3, #32]
 80067cc:	e015      	b.n	80067fa <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80067d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80067da:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80067e4:	e009      	b.n	80067fa <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d155      	bne.n	80068ae <HAL_PCD_EP_DB_Transmit+0x23c>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006810:	b29b      	uxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	011a      	lsls	r2, r3, #4
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800682c:	2b00      	cmp	r3, #0
 800682e:	d112      	bne.n	8006856 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800683a:	b29a      	uxth	r2, r3
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684e:	b29a      	uxth	r2, r3
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	e047      	b.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x274>
 8006856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006858:	2b3e      	cmp	r3, #62	@ 0x3e
 800685a:	d811      	bhi.n	8006880 <HAL_PCD_EP_DB_Transmit+0x20e>
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_PCD_EP_DB_Transmit+0x200>
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	3301      	adds	r3, #1
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29a      	uxth	r2, r3
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	e032      	b.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x274>
 8006880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <HAL_PCD_EP_DB_Transmit+0x224>
 8006890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006892:	3b01      	subs	r3, #1
 8006894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	b29b      	uxth	r3, r3
 800689a:	029b      	lsls	r3, r3, #10
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	e01b      	b.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x274>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d117      	bne.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x274>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	4413      	add	r3, r2
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	011a      	lsls	r2, r3, #4
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6959      	ldr	r1, [r3, #20]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	891a      	ldrh	r2, [r3, #8]
 80068f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f004 fa3c 	bl	800ad72 <USB_WritePMA>
 80068fa:	e138      	b.n	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006904:	b29b      	uxth	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4413      	add	r3, r2
 8006910:	3306      	adds	r3, #6
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006924:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006930:	429a      	cmp	r2, r3
 8006932:	d307      	bcc.n	8006944 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	619a      	str	r2, [r3, #24]
 8006942:	e002      	b.n	800694a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d12e      	bne.n	80069b0 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f006 f85c 	bl	800ca16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8102 	bne.w	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006984:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800699a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]
 80069ae:	e0de      	b.n	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11f      	bne.n	80069fa <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	f040 80b4 	bne.w	8006b6e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a0e:	441a      	add	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d309      	bcc.n	8006a42 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6a1a      	ldr	r2, [r3, #32]
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	621a      	str	r2, [r3, #32]
 8006a40:	e015      	b.n	8006a6e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d107      	bne.n	8006a5a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006a4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a4e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006a58:	e009      	b.n	8006a6e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d155      	bne.n	8006b28 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	4413      	add	r3, r2
 8006a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	011a      	lsls	r2, r3, #4
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d112      	bne.n	8006ad0 <HAL_PCD_EP_DB_Transmit+0x45e>
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	e044      	b.n	8006b5a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ad4:	d811      	bhi.n	8006afa <HAL_PCD_EP_DB_Transmit+0x488>
 8006ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_PCD_EP_DB_Transmit+0x47a>
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae8:	3301      	adds	r3, #1
 8006aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e02f      	b.n	8006b5a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <HAL_PCD_EP_DB_Transmit+0x49e>
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e018      	b.n	8006b5a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d114      	bne.n	8006b5a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3e:	4413      	add	r3, r2
 8006b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	011a      	lsls	r2, r3, #4
 8006b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6959      	ldr	r1, [r3, #20]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	895a      	ldrh	r2, [r3, #10]
 8006b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f004 f902 	bl	800ad72 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b88:	82bb      	strh	r3, [r7, #20]
 8006b8a:	8abb      	ldrh	r3, [r7, #20]
 8006b8c:	f083 0310 	eor.w	r3, r3, #16
 8006b90:	82bb      	strh	r3, [r7, #20]
 8006b92:	8abb      	ldrh	r3, [r7, #20]
 8006b94:	f083 0320 	eor.w	r3, r3, #32
 8006b98:	82bb      	strh	r3, [r7, #20]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	8abb      	ldrh	r3, [r7, #20]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3750      	adds	r7, #80	@ 0x50
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	817b      	strh	r3, [r7, #10]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006bda:	897b      	ldrh	r3, [r7, #10]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e009      	b.n	8006c12 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bfe:	897a      	ldrh	r2, [r7, #10]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	80da      	strh	r2, [r3, #6]
 8006c26:	e00b      	b.n	8006c40 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr

08006c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e272      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8087 	beq.w	8006d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c6c:	4b92      	ldr	r3, [pc, #584]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f003 030c 	and.w	r3, r3, #12
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d00c      	beq.n	8006c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c78:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d112      	bne.n	8006caa <HAL_RCC_OscConfig+0x5e>
 8006c84:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c90:	d10b      	bne.n	8006caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c92:	4b89      	ldr	r3, [pc, #548]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d06c      	beq.n	8006d78 <HAL_RCC_OscConfig+0x12c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d168      	bne.n	8006d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e24c      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x76>
 8006cb4:	4b80      	ldr	r3, [pc, #512]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a7f      	ldr	r2, [pc, #508]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e02e      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x98>
 8006cca:	4b7b      	ldr	r3, [pc, #492]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7a      	ldr	r2, [pc, #488]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4b78      	ldr	r3, [pc, #480]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a77      	ldr	r2, [pc, #476]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e01d      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCC_OscConfig+0xbc>
 8006cee:	4b72      	ldr	r3, [pc, #456]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a71      	ldr	r2, [pc, #452]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e00b      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006d08:	4b6b      	ldr	r3, [pc, #428]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	4b68      	ldr	r3, [pc, #416]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a67      	ldr	r2, [pc, #412]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d013      	beq.n	8006d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d28:	f7fd faa6 	bl	8004278 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d30:	f7fd faa2 	bl	8004278 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	@ 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e200      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d42:	4b5d      	ldr	r3, [pc, #372]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0xe4>
 8006d4e:	e014      	b.n	8006d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fd fa92 	bl	8004278 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d58:	f7fd fa8e 	bl	8004278 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b64      	cmp	r3, #100	@ 0x64
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e1ec      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d6a:	4b53      	ldr	r3, [pc, #332]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x10c>
 8006d76:	e000      	b.n	8006d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d063      	beq.n	8006e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d86:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d92:	4b49      	ldr	r3, [pc, #292]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d11c      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x18c>
 8006d9e:	4b46      	ldr	r3, [pc, #280]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d116      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006daa:	4b43      	ldr	r3, [pc, #268]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x176>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e1c0      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4939      	ldr	r1, [pc, #228]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd6:	e03a      	b.n	8006e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d020      	beq.n	8006e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006de0:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <HAL_RCC_OscConfig+0x270>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7fd fa47 	bl	8004278 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dee:	f7fd fa43 	bl	8004278 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e1a1      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e00:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	4927      	ldr	r1, [pc, #156]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
 8006e20:	e015      	b.n	8006e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e22:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <HAL_RCC_OscConfig+0x270>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e28:	f7fd fa26 	bl	8004278 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e30:	f7fd fa22 	bl	8004278 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e180      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e42:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03a      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d019      	beq.n	8006e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e62:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <HAL_RCC_OscConfig+0x274>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e68:	f7fd fa06 	bl	8004278 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e70:	f7fd fa02 	bl	8004278 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e160      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 fad8 	bl	8007444 <RCC_Delay>
 8006e94:	e01c      	b.n	8006ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <HAL_RCC_OscConfig+0x274>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9c:	f7fd f9ec 	bl	8004278 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea2:	e00f      	b.n	8006ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea4:	f7fd f9e8 	bl	8004278 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d908      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e146      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
 8006eb6:	bf00      	nop
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	42420000 	.word	0x42420000
 8006ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec4:	4b92      	ldr	r3, [pc, #584]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e9      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80a6 	beq.w	800702a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10d      	bne.n	8006f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eee:	4b88      	ldr	r3, [pc, #544]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4a87      	ldr	r2, [pc, #540]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	61d3      	str	r3, [r2, #28]
 8006efa:	4b85      	ldr	r3, [pc, #532]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	60bb      	str	r3, [r7, #8]
 8006f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f0a:	4b82      	ldr	r3, [pc, #520]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d118      	bne.n	8006f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f16:	4b7f      	ldr	r3, [pc, #508]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f22:	f7fd f9a9 	bl	8004278 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f2a:	f7fd f9a5 	bl	8004278 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b64      	cmp	r3, #100	@ 0x64
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e103      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f3c:	4b75      	ldr	r3, [pc, #468]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_OscConfig+0x312>
 8006f50:	4b6f      	ldr	r3, [pc, #444]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	4a6e      	ldr	r2, [pc, #440]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	6213      	str	r3, [r2, #32]
 8006f5c:	e02d      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x334>
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4a69      	ldr	r2, [pc, #420]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	6213      	str	r3, [r2, #32]
 8006f72:	4b67      	ldr	r3, [pc, #412]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	4a66      	ldr	r2, [pc, #408]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	6213      	str	r3, [r2, #32]
 8006f7e:	e01c      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d10c      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x356>
 8006f88:	4b61      	ldr	r3, [pc, #388]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	4a60      	ldr	r2, [pc, #384]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f8e:	f043 0304 	orr.w	r3, r3, #4
 8006f92:	6213      	str	r3, [r2, #32]
 8006f94:	4b5e      	ldr	r3, [pc, #376]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	4a5d      	ldr	r2, [pc, #372]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6213      	str	r3, [r2, #32]
 8006fa0:	e00b      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	6213      	str	r3, [r2, #32]
 8006fae:	4b58      	ldr	r3, [pc, #352]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	4a57      	ldr	r2, [pc, #348]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fb4:	f023 0304 	bic.w	r3, r3, #4
 8006fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d015      	beq.n	8006fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc2:	f7fd f959 	bl	8004278 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fca:	f7fd f955 	bl	8004278 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e0b1      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ee      	beq.n	8006fca <HAL_RCC_OscConfig+0x37e>
 8006fec:	e014      	b.n	8007018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fee:	f7fd f943 	bl	8004278 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff4:	e00a      	b.n	800700c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff6:	f7fd f93f 	bl	8004278 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007004:	4293      	cmp	r3, r2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e09b      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700c:	4b40      	ldr	r3, [pc, #256]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ee      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701e:	4b3c      	ldr	r3, [pc, #240]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	4a3b      	ldr	r2, [pc, #236]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8087 	beq.w	8007142 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007034:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 030c 	and.w	r3, r3, #12
 800703c:	2b08      	cmp	r3, #8
 800703e:	d061      	beq.n	8007104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d146      	bne.n	80070d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007048:	4b33      	ldr	r3, [pc, #204]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fd f913 	bl	8004278 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007056:	f7fd f90f 	bl	8004278 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e06d      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007068:	4b29      	ldr	r3, [pc, #164]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f0      	bne.n	8007056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707c:	d108      	bne.n	8007090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800707e:	4b24      	ldr	r3, [pc, #144]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4921      	ldr	r1, [pc, #132]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007090:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a19      	ldr	r1, [r3, #32]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	430b      	orrs	r3, r1
 80070a2:	491b      	ldr	r1, [pc, #108]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ae:	f7fd f8e3 	bl	8004278 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b6:	f7fd f8df 	bl	8004278 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e03d      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0f0      	beq.n	80070b6 <HAL_RCC_OscConfig+0x46a>
 80070d4:	e035      	b.n	8007142 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d6:	4b10      	ldr	r3, [pc, #64]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070dc:	f7fd f8cc 	bl	8004278 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fd f8c8 	bl	8004278 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e026      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x498>
 8007102:	e01e      	b.n	8007142 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d107      	bne.n	800711c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e019      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
 8007110:	40021000 	.word	0x40021000
 8007114:	40007000 	.word	0x40007000
 8007118:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCC_OscConfig+0x500>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	429a      	cmp	r2, r3
 800712e:	d106      	bne.n	800713e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40021000 	.word	0x40021000

08007150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0d0      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007164:	4b6a      	ldr	r3, [pc, #424]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d910      	bls.n	8007194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b67      	ldr	r3, [pc, #412]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 0207 	bic.w	r2, r3, #7
 800717a:	4965      	ldr	r1, [pc, #404]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4313      	orrs	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007182:	4b63      	ldr	r3, [pc, #396]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e0b8      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d020      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071ac:	4b59      	ldr	r3, [pc, #356]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a58      	ldr	r2, [pc, #352]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c4:	4b53      	ldr	r3, [pc, #332]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4a52      	ldr	r2, [pc, #328]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80071ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d0:	4b50      	ldr	r3, [pc, #320]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	494d      	ldr	r1, [pc, #308]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d040      	beq.n	8007270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d107      	bne.n	8007206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f6:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e07f      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d107      	bne.n	800721e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800720e:	4b41      	ldr	r3, [pc, #260]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e073      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721e:	4b3d      	ldr	r3, [pc, #244]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e06b      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800722e:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f023 0203 	bic.w	r2, r3, #3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4936      	ldr	r1, [pc, #216]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007240:	f7fd f81a 	bl	8004278 <HAL_GetTick>
 8007244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007246:	e00a      	b.n	800725e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007248:	f7fd f816 	bl	8004278 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007256:	4293      	cmp	r3, r2
 8007258:	d901      	bls.n	800725e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e053      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725e:	4b2d      	ldr	r3, [pc, #180]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 020c 	and.w	r2, r3, #12
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	429a      	cmp	r2, r3
 800726e:	d1eb      	bne.n	8007248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007270:	4b27      	ldr	r3, [pc, #156]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d210      	bcs.n	80072a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 0207 	bic.w	r2, r3, #7
 8007286:	4922      	ldr	r1, [pc, #136]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728e:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e032      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072ac:	4b19      	ldr	r3, [pc, #100]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4916      	ldr	r1, [pc, #88]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072ca:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	490e      	ldr	r1, [pc, #56]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072de:	f000 f821 	bl	8007324 <HAL_RCC_GetSysClockFreq>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	490a      	ldr	r1, [pc, #40]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072f0:	5ccb      	ldrb	r3, [r1, r3]
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	4a09      	ldr	r2, [pc, #36]	@ (800731c <HAL_RCC_ClockConfig+0x1cc>)
 80072f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072fa:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <HAL_RCC_ClockConfig+0x1d0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fc ff78 	bl	80041f4 <HAL_InitTick>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40022000 	.word	0x40022000
 8007314:	40021000 	.word	0x40021000
 8007318:	0800e2f8 	.word	0x0800e2f8
 800731c:	20000028 	.word	0x20000028
 8007320:	2000002c 	.word	0x2000002c

08007324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007324:	b490      	push	{r4, r7}
 8007326:	b08a      	sub	sp, #40	@ 0x28
 8007328:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800732a:	4b29      	ldr	r3, [pc, #164]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800732c:	1d3c      	adds	r4, r7, #4
 800732e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007334:	f240 2301 	movw	r3, #513	@ 0x201
 8007338:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	2300      	movs	r3, #0
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800734e:	4b21      	ldr	r3, [pc, #132]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	2b04      	cmp	r3, #4
 800735c:	d002      	beq.n	8007364 <HAL_RCC_GetSysClockFreq+0x40>
 800735e:	2b08      	cmp	r3, #8
 8007360:	d003      	beq.n	800736a <HAL_RCC_GetSysClockFreq+0x46>
 8007362:	e02b      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007364:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007366:	623b      	str	r3, [r7, #32]
      break;
 8007368:	e02b      	b.n	80073c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	0c9b      	lsrs	r3, r3, #18
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	3328      	adds	r3, #40	@ 0x28
 8007374:	443b      	add	r3, r7
 8007376:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800737a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d012      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007386:	4b13      	ldr	r3, [pc, #76]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	0c5b      	lsrs	r3, r3, #17
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	3328      	adds	r3, #40	@ 0x28
 8007392:	443b      	add	r3, r7
 8007394:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007398:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4a0e      	ldr	r2, [pc, #56]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800739e:	fb03 f202 	mul.w	r2, r3, r2
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073aa:	e004      	b.n	80073b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4a0b      	ldr	r2, [pc, #44]	@ (80073dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80073b0:	fb02 f303 	mul.w	r3, r2, r3
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	623b      	str	r3, [r7, #32]
      break;
 80073ba:	e002      	b.n	80073c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073be:	623b      	str	r3, [r7, #32]
      break;
 80073c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3728      	adds	r7, #40	@ 0x28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc90      	pop	{r4, r7}
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	0800e290 	.word	0x0800e290
 80073d4:	40021000 	.word	0x40021000
 80073d8:	007a1200 	.word	0x007a1200
 80073dc:	003d0900 	.word	0x003d0900

080073e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e4:	4b02      	ldr	r3, [pc, #8]	@ (80073f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80073e6:	681b      	ldr	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr
 80073f0:	20000028 	.word	0x20000028

080073f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073f8:	f7ff fff2 	bl	80073e0 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	0a1b      	lsrs	r3, r3, #8
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4903      	ldr	r1, [pc, #12]	@ (8007418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	0800e308 	.word	0x0800e308

0800741c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007420:	f7ff ffde 	bl	80073e0 <HAL_RCC_GetHCLKFreq>
 8007424:	4602      	mov	r2, r0
 8007426:	4b05      	ldr	r3, [pc, #20]	@ (800743c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	0adb      	lsrs	r3, r3, #11
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	4903      	ldr	r1, [pc, #12]	@ (8007440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007432:	5ccb      	ldrb	r3, [r1, r3]
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40021000 	.word	0x40021000
 8007440:	0800e308 	.word	0x0800e308

08007444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800744c:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <RCC_Delay+0x34>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0a      	ldr	r2, [pc, #40]	@ (800747c <RCC_Delay+0x38>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	0a5b      	lsrs	r3, r3, #9
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007460:	bf00      	nop
  }
  while (Delay --);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	60fa      	str	r2, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f9      	bne.n	8007460 <RCC_Delay+0x1c>
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	20000028 	.word	0x20000028
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d07d      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800749c:	2300      	movs	r3, #0
 800749e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a0:	4b4f      	ldr	r3, [pc, #316]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10d      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ac:	4b4c      	ldr	r3, [pc, #304]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	4a4b      	ldr	r2, [pc, #300]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b6:	61d3      	str	r3, [r2, #28]
 80074b8:	4b49      	ldr	r3, [pc, #292]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c8:	4b46      	ldr	r3, [pc, #280]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d118      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d4:	4b43      	ldr	r3, [pc, #268]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a42      	ldr	r2, [pc, #264]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e0:	f7fc feca 	bl	8004278 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e6:	e008      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e8:	f7fc fec6 	bl	8004278 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b64      	cmp	r3, #100	@ 0x64
 80074f4:	d901      	bls.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e06d      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fa:	4b3a      	ldr	r3, [pc, #232]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f0      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007506:	4b36      	ldr	r3, [pc, #216]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800750e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d02e      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	429a      	cmp	r2, r3
 8007522:	d027      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007524:	4b2e      	ldr	r3, [pc, #184]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800752c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800752e:	4b2e      	ldr	r3, [pc, #184]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007534:	4b2c      	ldr	r3, [pc, #176]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800753a:	4a29      	ldr	r2, [pc, #164]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d014      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754a:	f7fc fe95 	bl	8004278 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007550:	e00a      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007552:	f7fc fe91 	bl	8004278 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007560:	4293      	cmp	r3, r2
 8007562:	d901      	bls.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e036      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007568:	4b1d      	ldr	r3, [pc, #116]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0ee      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4917      	ldr	r1, [pc, #92]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007582:	4313      	orrs	r3, r2
 8007584:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d105      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758c:	4b14      	ldr	r3, [pc, #80]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	4a13      	ldr	r2, [pc, #76]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007596:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075a4:	4b0e      	ldr	r3, [pc, #56]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	490b      	ldr	r1, [pc, #44]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075c2:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	4904      	ldr	r1, [pc, #16]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40021000 	.word	0x40021000
 80075e4:	40007000 	.word	0x40007000
 80075e8:	42420440 	.word	0x42420440

080075ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e076      	b.n	80076ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d108      	bne.n	8007618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800760e:	d009      	beq.n	8007624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	61da      	str	r2, [r3, #28]
 8007616:	e005      	b.n	8007624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fc fc50 	bl	8003ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800765a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a8:	ea42 0103 	orr.w	r1, r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	0c1a      	lsrs	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f002 0204 	and.w	r2, r2, #4
 80076ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	@ 0x30
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007702:	2301      	movs	r3, #1
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_SPI_TransmitReceive+0x26>
 8007716:	2302      	movs	r3, #2
 8007718:	e18a      	b.n	8007a30 <HAL_SPI_TransmitReceive+0x33c>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007722:	f7fc fda9 	bl	8004278 <HAL_GetTick>
 8007726:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007738:	887b      	ldrh	r3, [r7, #2]
 800773a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800773c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007740:	2b01      	cmp	r3, #1
 8007742:	d00f      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x70>
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800774a:	d107      	bne.n	800775c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <HAL_SPI_TransmitReceive+0x68>
 8007754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007758:	2b04      	cmp	r3, #4
 800775a:	d003      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800775c:	2302      	movs	r3, #2
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007762:	e15b      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x82>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x82>
 8007770:	887b      	ldrh	r3, [r7, #2]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d103      	bne.n	800777e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800777c:	e14e      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b04      	cmp	r3, #4
 8007788:	d003      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2205      	movs	r2, #5
 800778e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	887a      	ldrh	r2, [r7, #2]
 80077b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	887a      	ldrh	r2, [r7, #2]
 80077ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b40      	cmp	r3, #64	@ 0x40
 80077d4:	d007      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ee:	d178      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_SPI_TransmitReceive+0x10a>
 80077f8:	8b7b      	ldrh	r3, [r7, #26]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d166      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007802:	881a      	ldrh	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	1c9a      	adds	r2, r3, #2
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007822:	e053      	b.n	80078cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b02      	cmp	r3, #2
 8007830:	d11b      	bne.n	800786a <HAL_SPI_TransmitReceive+0x176>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d016      	beq.n	800786a <HAL_SPI_TransmitReceive+0x176>
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d113      	bne.n	800786a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	881a      	ldrh	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b01      	cmp	r3, #1
 8007876:	d119      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x1b8>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d014      	beq.n	80078ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788c:	b292      	uxth	r2, r2
 800788e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007894:	1c9a      	adds	r2, r3, #2
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078a8:	2301      	movs	r3, #1
 80078aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078ac:	f7fc fce4 	bl	8004278 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d807      	bhi.n	80078cc <HAL_SPI_TransmitReceive+0x1d8>
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d003      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80078ca:	e0a7      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1a6      	bne.n	8007824 <HAL_SPI_TransmitReceive+0x130>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1a1      	bne.n	8007824 <HAL_SPI_TransmitReceive+0x130>
 80078e0:	e07c      	b.n	80079dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0x1fc>
 80078ea:	8b7b      	ldrh	r3, [r7, #26]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d16b      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007916:	e057      	b.n	80079c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d11c      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x26c>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <HAL_SPI_TransmitReceive+0x26c>
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d114      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b01      	cmp	r3, #1
 800796c:	d119      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x2ae>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d014      	beq.n	80079a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800799e:	2301      	movs	r3, #1
 80079a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079a2:	f7fc fc69 	bl	8004278 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d803      	bhi.n	80079ba <HAL_SPI_TransmitReceive+0x2c6>
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d102      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x2cc>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80079c6:	e029      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1a2      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x224>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d19d      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f8b1 	bl	8007b48 <SPI_EndRxTxTransaction>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80079f8:	e010      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	e000      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3730      	adds	r7, #48	@ 0x30
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a48:	f7fc fc16 	bl	8004278 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a58:	f7fc fc0e 	bl	8004278 <HAL_GetTick>
 8007a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a5e:	4b39      	ldr	r3, [pc, #228]	@ (8007b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	015b      	lsls	r3, r3, #5
 8007a64:	0d1b      	lsrs	r3, r3, #20
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a6e:	e054      	b.n	8007b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d050      	beq.n	8007b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a78:	f7fc fbfe 	bl	8004278 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d902      	bls.n	8007a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d13d      	bne.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aa6:	d111      	bne.n	8007acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab0:	d004      	beq.n	8007abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aba:	d107      	bne.n	8007acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad4:	d10f      	bne.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e017      	b.n	8007b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4013      	ands	r3, r2
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	bf0c      	ite	eq
 8007b2a:	2301      	moveq	r3, #1
 8007b2c:	2300      	movne	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d19b      	bne.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000028 	.word	0x20000028

08007b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2180      	movs	r1, #128	@ 0x80
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff ff6a 	bl	8007a38 <SPI_WaitFlagStateUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6e:	f043 0220 	orr.w	r2, r3, #32
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e000      	b.n	8007b7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e041      	b.n	8007c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fc f9e4 	bl	8003f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f000 fa70 	bl	80080a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e03a      	b.n	8007cb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <HAL_TIM_Base_Start_IT+0x98>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x58>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d009      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x58>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a14      	ldr	r2, [pc, #80]	@ (8007cc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x58>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a13      	ldr	r2, [pc, #76]	@ (8007cc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d111      	bne.n	8007ca0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b06      	cmp	r3, #6
 8007c8c:	d010      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9e:	e007      	b.n	8007cb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800

08007cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d122      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d11b      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0202 	mvn.w	r2, #2
 8007cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f9b1 	bl	8008072 <HAL_TIM_IC_CaptureCallback>
 8007d10:	e005      	b.n	8007d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9a4 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9b3 	bl	8008084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d122      	bne.n	8007d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d11b      	bne.n	8007d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0204 	mvn.w	r2, #4
 8007d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f987 	bl	8008072 <HAL_TIM_IC_CaptureCallback>
 8007d64:	e005      	b.n	8007d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f97a 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f989 	bl	8008084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d122      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d11b      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0208 	mvn.w	r2, #8
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2204      	movs	r2, #4
 8007da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f95d 	bl	8008072 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f950 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f95f 	bl	8008084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d122      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d11b      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0210 	mvn.w	r2, #16
 8007df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2208      	movs	r2, #8
 8007df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f933 	bl	8008072 <HAL_TIM_IC_CaptureCallback>
 8007e0c:	e005      	b.n	8007e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f926 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f935 	bl	8008084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10e      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d107      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0201 	mvn.w	r2, #1
 8007e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7f8 ff8a 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d10e      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e64:	2b80      	cmp	r3, #128	@ 0x80
 8007e66:	d107      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa77 	bl	8008366 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e82:	2b40      	cmp	r3, #64	@ 0x40
 8007e84:	d10e      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e90:	2b40      	cmp	r3, #64	@ 0x40
 8007e92:	d107      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8f9 	bl	8008096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d10e      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d107      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0220 	mvn.w	r2, #32
 8007ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa42 	bl	8008354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIM_ConfigClockSource+0x18>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e0b3      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x180>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f28:	d03e      	beq.n	8007fa8 <HAL_TIM_ConfigClockSource+0xd0>
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2e:	f200 8087 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	f000 8085 	beq.w	8008044 <HAL_TIM_ConfigClockSource+0x16c>
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3e:	d87f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f40:	2b70      	cmp	r3, #112	@ 0x70
 8007f42:	d01a      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xa2>
 8007f44:	2b70      	cmp	r3, #112	@ 0x70
 8007f46:	d87b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f48:	2b60      	cmp	r3, #96	@ 0x60
 8007f4a:	d050      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0x116>
 8007f4c:	2b60      	cmp	r3, #96	@ 0x60
 8007f4e:	d877      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f50:	2b50      	cmp	r3, #80	@ 0x50
 8007f52:	d03c      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0xf6>
 8007f54:	2b50      	cmp	r3, #80	@ 0x50
 8007f56:	d873      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f58:	2b40      	cmp	r3, #64	@ 0x40
 8007f5a:	d058      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x136>
 8007f5c:	2b40      	cmp	r3, #64	@ 0x40
 8007f5e:	d86f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f60:	2b30      	cmp	r3, #48	@ 0x30
 8007f62:	d064      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x156>
 8007f64:	2b30      	cmp	r3, #48	@ 0x30
 8007f66:	d86b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d060      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x156>
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d867      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05c      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x156>
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d05a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f78:	e062      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6899      	ldr	r1, [r3, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f000 f966 	bl	800825a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	609a      	str	r2, [r3, #8]
      break;
 8007fa6:	e04e      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6899      	ldr	r1, [r3, #8]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f000 f94f 	bl	800825a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fca:	609a      	str	r2, [r3, #8]
      break;
 8007fcc:	e03b      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 f8c6 	bl	800816c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2150      	movs	r1, #80	@ 0x50
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f91d 	bl	8008226 <TIM_ITRx_SetConfig>
      break;
 8007fec:	e02b      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 f8e4 	bl	80081c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2160      	movs	r1, #96	@ 0x60
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f90d 	bl	8008226 <TIM_ITRx_SetConfig>
      break;
 800800c:	e01b      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	461a      	mov	r2, r3
 800801c:	f000 f8a6 	bl	800816c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2140      	movs	r1, #64	@ 0x40
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f8fd 	bl	8008226 <TIM_ITRx_SetConfig>
      break;
 800802c:	e00b      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f000 f8f4 	bl	8008226 <TIM_ITRx_SetConfig>
        break;
 800803e:	e002      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a29      	ldr	r2, [pc, #164]	@ (8008160 <TIM_Base_SetConfig+0xb8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00b      	beq.n	80080d8 <TIM_Base_SetConfig+0x30>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c6:	d007      	beq.n	80080d8 <TIM_Base_SetConfig+0x30>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a26      	ldr	r2, [pc, #152]	@ (8008164 <TIM_Base_SetConfig+0xbc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_Base_SetConfig+0x30>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a25      	ldr	r2, [pc, #148]	@ (8008168 <TIM_Base_SetConfig+0xc0>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d108      	bne.n	80080ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <TIM_Base_SetConfig+0xb8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00b      	beq.n	800810a <TIM_Base_SetConfig+0x62>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f8:	d007      	beq.n	800810a <TIM_Base_SetConfig+0x62>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a19      	ldr	r2, [pc, #100]	@ (8008164 <TIM_Base_SetConfig+0xbc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_Base_SetConfig+0x62>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <TIM_Base_SetConfig+0xc0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a07      	ldr	r2, [pc, #28]	@ (8008160 <TIM_Base_SetConfig+0xb8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d103      	bne.n	8008150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	615a      	str	r2, [r3, #20]
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800

0800816c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f023 0201 	bic.w	r2, r3, #1
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f023 030a 	bic.w	r3, r3, #10
 80081a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	f023 0210 	bic.w	r2, r3, #16
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	031b      	lsls	r3, r3, #12
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008204:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	621a      	str	r2, [r3, #32]
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	f043 0307 	orr.w	r3, r3, #7
 8008248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	609a      	str	r2, [r3, #8]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr

0800825a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800825a:	b480      	push	{r7}
 800825c:	b087      	sub	sp, #28
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008274:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	021a      	lsls	r2, r3, #8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	431a      	orrs	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4313      	orrs	r3, r2
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	609a      	str	r2, [r3, #8]
}
 800828e:	bf00      	nop
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e046      	b.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a16      	ldr	r2, [pc, #88]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fc:	d009      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a12      	ldr	r2, [pc, #72]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a10      	ldr	r2, [pc, #64]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10c      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4313      	orrs	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr
 8008348:	40012c00 	.word	0x40012c00
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800

08008354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr

08008366 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e03f      	b.n	800840a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fb fe0e 	bl	8003fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	@ 0x24
 80083a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f9a3 	bl	8008708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695a      	ldr	r2, [r3, #20]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b08a      	sub	sp, #40	@ 0x28
 8008416:	af02      	add	r7, sp, #8
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b20      	cmp	r3, #32
 8008430:	d17c      	bne.n	800852c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <HAL_UART_Transmit+0x2c>
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e075      	b.n	800852e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_UART_Transmit+0x3e>
 800844c:	2302      	movs	r3, #2
 800844e:	e06e      	b.n	800852e <HAL_UART_Transmit+0x11c>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2221      	movs	r2, #33	@ 0x21
 8008462:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008466:	f7fb ff07 	bl	8004278 <HAL_GetTick>
 800846a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	88fa      	ldrh	r2, [r7, #6]
 8008476:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008480:	d108      	bne.n	8008494 <HAL_UART_Transmit+0x82>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e003      	b.n	800849c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80084a4:	e02a      	b.n	80084fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2200      	movs	r2, #0
 80084ae:	2180      	movs	r1, #128	@ 0x80
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f8df 	bl	8008674 <UART_WaitOnFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e036      	b.n	800852e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	3302      	adds	r3, #2
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	e007      	b.n	80084ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1cf      	bne.n	80084a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	2140      	movs	r1, #64	@ 0x40
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f8af 	bl	8008674 <UART_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e006      	b.n	800852e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b08a      	sub	sp, #40	@ 0x28
 800853a:	af02      	add	r7, sp, #8
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b20      	cmp	r3, #32
 8008554:	f040 8089 	bne.w	800866a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <HAL_UART_Receive+0x2e>
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e081      	b.n	800866c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_UART_Receive+0x40>
 8008572:	2302      	movs	r3, #2
 8008574:	e07a      	b.n	800866c <HAL_UART_Receive+0x136>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2222      	movs	r2, #34	@ 0x22
 8008588:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800858c:	f7fb fe74 	bl	8004278 <HAL_GetTick>
 8008590:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	88fa      	ldrh	r2, [r7, #6]
 8008596:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	88fa      	ldrh	r2, [r7, #6]
 800859c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a6:	d108      	bne.n	80085ba <HAL_UART_Receive+0x84>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	e003      	b.n	80085c2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80085ca:	e043      	b.n	8008654 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2200      	movs	r2, #0
 80085d4:	2120      	movs	r1, #32
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f84c 	bl	8008674 <UART_WaitOnFlagUntilTimeout>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e042      	b.n	800866c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	3302      	adds	r3, #2
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e01f      	b.n	8008646 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800860e:	d007      	beq.n	8008620 <HAL_UART_Receive+0xea>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <HAL_UART_Receive+0xf8>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	e008      	b.n	8008640 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800863a:	b2da      	uxtb	r2, r3
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1b6      	bne.n	80085cc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800866a:	2302      	movs	r3, #2
  }
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008684:	e02c      	b.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d028      	beq.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008694:	f7fb fdf0 	bl	8004278 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d21d      	bcs.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80086b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695a      	ldr	r2, [r3, #20]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0201 	bic.w	r2, r2, #1
 80086c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e00f      	b.n	8008700 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4013      	ands	r3, r2
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	bf0c      	ite	eq
 80086f0:	2301      	moveq	r3, #1
 80086f2:	2300      	movne	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d0c3      	beq.n	8008686 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008742:	f023 030c 	bic.w	r3, r3, #12
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	430b      	orrs	r3, r1
 800874e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a2c      	ldr	r2, [pc, #176]	@ (800881c <UART_SetConfig+0x114>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d103      	bne.n	8008778 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008770:	f7fe fe54 	bl	800741c <HAL_RCC_GetPCLK2Freq>
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	e002      	b.n	800877e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fe fe3c 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 800877c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009a      	lsls	r2, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	fbb2 f3f3 	udiv	r3, r2, r3
 8008794:	4a22      	ldr	r2, [pc, #136]	@ (8008820 <UART_SetConfig+0x118>)
 8008796:	fba2 2303 	umull	r2, r3, r2, r3
 800879a:	095b      	lsrs	r3, r3, #5
 800879c:	0119      	lsls	r1, r3, #4
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009a      	lsls	r2, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80087b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008820 <UART_SetConfig+0x118>)
 80087b6:	fba3 0302 	umull	r0, r3, r3, r2
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	2064      	movs	r0, #100	@ 0x64
 80087be:	fb00 f303 	mul.w	r3, r0, r3
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	3332      	adds	r3, #50	@ 0x32
 80087c8:	4a15      	ldr	r2, [pc, #84]	@ (8008820 <UART_SetConfig+0x118>)
 80087ca:	fba2 2303 	umull	r2, r3, r2, r3
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80087d4:	4419      	add	r1, r3
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80087ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008820 <UART_SetConfig+0x118>)
 80087ee:	fba3 0302 	umull	r0, r3, r3, r2
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	2064      	movs	r0, #100	@ 0x64
 80087f6:	fb00 f303 	mul.w	r3, r0, r3
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	3332      	adds	r3, #50	@ 0x32
 8008800:	4a07      	ldr	r2, [pc, #28]	@ (8008820 <UART_SetConfig+0x118>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	f003 020f 	and.w	r2, r3, #15
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	440a      	add	r2, r1
 8008812:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40013800 	.word	0x40013800
 8008820:	51eb851f 	.word	0x51eb851f

08008824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008824:	b084      	sub	sp, #16
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	f107 0014 	add.w	r0, r7, #20
 8008832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	b004      	add	sp, #16
 8008842:	4770      	bx	lr

08008844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008854:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008858:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008878:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800887c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	b29b      	uxth	r3, r3
 800888a:	43db      	mvns	r3, r3
 800888c:	b29b      	uxth	r3, r3
 800888e:	4013      	ands	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr

080088bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088bc:	b084      	sub	sp, #16
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	f107 0014 	add.w	r0, r7, #20
 80088ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	b004      	add	sp, #16
 80088fa:	4770      	bx	lr

080088fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b09b      	sub	sp, #108	@ 0x6c
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800891e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008922:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	78db      	ldrb	r3, [r3, #3]
 800892a:	2b03      	cmp	r3, #3
 800892c:	d81f      	bhi.n	800896e <USB_ActivateEndpoint+0x72>
 800892e:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <USB_ActivateEndpoint+0x38>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008945 	.word	0x08008945
 8008938:	08008961 	.word	0x08008961
 800893c:	08008977 	.word	0x08008977
 8008940:	08008953 	.word	0x08008953
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008944:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800894c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008950:	e012      	b.n	8008978 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008952:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008956:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800895a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 800895e:	e00b      	b.n	8008978 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008960:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008964:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008968:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 800896c:	e004      	b.n	8008978 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008974:	e000      	b.n	8008978 <USB_ActivateEndpoint+0x7c>
      break;
 8008976:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	441a      	add	r2, r3
 8008982:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800898a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800898e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008996:	b29b      	uxth	r3, r3
 8008998:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80089ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089da:	b29b      	uxth	r3, r3
 80089dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	7b1b      	ldrb	r3, [r3, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8149 	bne.w	8008c7a <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8084 	beq.w	8008afa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	011a      	lsls	r2, r3, #4
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	81fb      	strh	r3, [r7, #14]
 8008a34:	89fb      	ldrh	r3, [r7, #14]
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01b      	beq.n	8008a76 <USB_ActivateEndpoint+0x17a>
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a54:	81bb      	strh	r3, [r7, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	89bb      	ldrh	r3, [r7, #12]
 8008a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	78db      	ldrb	r3, [r3, #3]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d020      	beq.n	8008ac0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a94:	813b      	strh	r3, [r7, #8]
 8008a96:	893b      	ldrh	r3, [r7, #8]
 8008a98:	f083 0320 	eor.w	r3, r3, #32
 8008a9c:	813b      	strh	r3, [r7, #8]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	893b      	ldrh	r3, [r7, #8]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]
 8008abe:	e27f      	b.n	8008fc0 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ad6:	817b      	strh	r3, [r7, #10]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	897b      	ldrh	r3, [r7, #10]
 8008ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	8013      	strh	r3, [r2, #0]
 8008af8:	e262      	b.n	8008fc0 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0a:	4413      	add	r3, r2
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	011a      	lsls	r2, r3, #4
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	4413      	add	r3, r2
 8008b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	011a      	lsls	r2, r3, #4
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b50:	623b      	str	r3, [r7, #32]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d112      	bne.n	8008b80 <USB_ActivateEndpoint+0x284>
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e02f      	b.n	8008be0 <USB_ActivateEndpoint+0x2e4>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b86:	d813      	bhi.n	8008bb0 <USB_ActivateEndpoint+0x2b4>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <USB_ActivateEndpoint+0x2a6>
 8008b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	029b      	lsls	r3, r3, #10
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e017      	b.n	8008be0 <USB_ActivateEndpoint+0x2e4>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <USB_ActivateEndpoint+0x2ce>
 8008bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	83fb      	strh	r3, [r7, #30]
 8008bee:	8bfb      	ldrh	r3, [r7, #30]
 8008bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01b      	beq.n	8008c30 <USB_ActivateEndpoint+0x334>
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c0e:	83bb      	strh	r3, [r7, #28]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	441a      	add	r2, r3
 8008c1a:	8bbb      	ldrh	r3, [r7, #28]
 8008c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c46:	837b      	strh	r3, [r7, #26]
 8008c48:	8b7b      	ldrh	r3, [r7, #26]
 8008c4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c4e:	837b      	strh	r3, [r7, #26]
 8008c50:	8b7b      	ldrh	r3, [r7, #26]
 8008c52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c56:	837b      	strh	r3, [r7, #26]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	441a      	add	r2, r3
 8008c62:	8b7b      	ldrh	r3, [r7, #26]
 8008c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	8013      	strh	r3, [r2, #0]
 8008c78:	e1a2      	b.n	8008fc0 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c90:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008caa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cc6:	4413      	add	r3, r2
 8008cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	011a      	lsls	r2, r3, #4
 8008cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	891b      	ldrh	r3, [r3, #8]
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cfa:	4413      	add	r3, r2
 8008cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	011a      	lsls	r2, r3, #4
 8008d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	895b      	ldrh	r3, [r3, #10]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f040 8091 	bne.w	8008e4a <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008d36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01b      	beq.n	8008d78 <USB_ActivateEndpoint+0x47c>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d56:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01b      	beq.n	8008dc8 <USB_ActivateEndpoint+0x4cc>
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	441a      	add	r2, r3
 8008db2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dde:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008de0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008de2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008de6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008de8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008dea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008dee:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	441a      	add	r2, r3
 8008dfa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e26:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	8013      	strh	r3, [r2, #0]
 8008e48:	e0ba      	b.n	8008fc0 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008e5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01d      	beq.n	8008ea2 <USB_ActivateEndpoint+0x5a6>
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	441a      	add	r2, r3
 8008e8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008eb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d01d      	beq.n	8008efa <USB_ActivateEndpoint+0x5fe>
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	78db      	ldrb	r3, [r3, #3]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d024      	beq.n	8008f4c <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008f1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008f20:	f083 0320 	eor.w	r3, r3, #32
 8008f24:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]
 8008f4a:	e01d      	b.n	8008f88 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008fc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	376c      	adds	r7, #108	@ 0x6c
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b08d      	sub	sp, #52	@ 0x34
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	7b1b      	ldrb	r3, [r3, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 808e 	bne.w	8009100 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d044      	beq.n	8009076 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	81bb      	strh	r3, [r7, #12]
 8008ffa:	89bb      	ldrh	r3, [r7, #12]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01b      	beq.n	800903c <USB_DeactivateEndpoint+0x6c>
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901a:	817b      	strh	r3, [r7, #10]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	441a      	add	r2, r3
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800902c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009034:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009038:	b29b      	uxth	r3, r3
 800903a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009052:	813b      	strh	r3, [r7, #8]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	893b      	ldrh	r3, [r7, #8]
 8009060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800906c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009070:	b29b      	uxth	r3, r3
 8009072:	8013      	strh	r3, [r2, #0]
 8009074:	e192      	b.n	800939c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	827b      	strh	r3, [r7, #18]
 8009084:	8a7b      	ldrh	r3, [r7, #18]
 8009086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01b      	beq.n	80090c6 <USB_DeactivateEndpoint+0xf6>
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a4:	823b      	strh	r3, [r7, #16]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	441a      	add	r2, r3
 80090b0:	8a3b      	ldrh	r3, [r7, #16]
 80090b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090dc:	81fb      	strh	r3, [r7, #14]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	89fb      	ldrh	r3, [r7, #14]
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]
 80090fe:	e14d      	b.n	800939c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	785b      	ldrb	r3, [r3, #1]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f040 80a5 	bne.w	8009254 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	843b      	strh	r3, [r7, #32]
 8009118:	8c3b      	ldrh	r3, [r7, #32]
 800911a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01b      	beq.n	800915a <USB_DeactivateEndpoint+0x18a>
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009138:	83fb      	strh	r3, [r7, #30]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	441a      	add	r2, r3
 8009144:	8bfb      	ldrh	r3, [r7, #30]
 8009146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800914a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800914e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009156:	b29b      	uxth	r3, r3
 8009158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	83bb      	strh	r3, [r7, #28]
 8009168:	8bbb      	ldrh	r3, [r7, #28]
 800916a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01b      	beq.n	80091aa <USB_DeactivateEndpoint+0x1da>
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009188:	837b      	strh	r3, [r7, #26]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	441a      	add	r2, r3
 8009194:	8b7b      	ldrh	r3, [r7, #26]
 8009196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800919a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800919e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c0:	833b      	strh	r3, [r7, #24]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	441a      	add	r2, r3
 80091cc:	8b3b      	ldrh	r3, [r7, #24]
 80091ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091de:	b29b      	uxth	r3, r3
 80091e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f8:	82fb      	strh	r3, [r7, #22]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	441a      	add	r2, r3
 8009204:	8afb      	ldrh	r3, [r7, #22]
 8009206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800920a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800920e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009216:	b29b      	uxth	r3, r3
 8009218:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800922c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009230:	82bb      	strh	r3, [r7, #20]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	441a      	add	r2, r3
 800923c:	8abb      	ldrh	r3, [r7, #20]
 800923e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800924a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924e:	b29b      	uxth	r3, r3
 8009250:	8013      	strh	r3, [r2, #0]
 8009252:	e0a3      	b.n	800939c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009262:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01b      	beq.n	80092a4 <USB_DeactivateEndpoint+0x2d4>
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800927e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009282:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800929c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80092b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80092b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01b      	beq.n	80092f4 <USB_DeactivateEndpoint+0x324>
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	441a      	add	r2, r3
 80092de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	b29b      	uxth	r3, r3
 8009302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800930a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	441a      	add	r2, r3
 8009316:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800931c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009328:	b29b      	uxth	r3, r3
 800932a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009342:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	441a      	add	r2, r3
 800934e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800935c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009360:	b29b      	uxth	r3, r3
 8009362:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	441a      	add	r2, r3
 8009386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800938c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009398:	b29b      	uxth	r3, r3
 800939a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3734      	adds	r7, #52	@ 0x34
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr

080093a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b0c4      	sub	sp, #272	@ 0x110
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093b6:	6018      	str	r0, [r3, #0]
 80093b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093c0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	f040 86ec 	bne.w	800a1ac <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d908      	bls.n	8009402 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009400:	e007      	b.n	8009412 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009406:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009416:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	7b1b      	ldrb	r3, [r3, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d142      	bne.n	80094a8 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009426:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6959      	ldr	r1, [r3, #20]
 800942e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009432:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	88da      	ldrh	r2, [r3, #6]
 800943a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943e:	b29b      	uxth	r3, r3
 8009440:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009444:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009448:	6800      	ldr	r0, [r0, #0]
 800944a:	f001 fc92 	bl	800ad72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800944e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009452:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800945e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009468:	b29b      	uxth	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	4413      	add	r3, r2
 8009470:	617b      	str	r3, [r7, #20]
 8009472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009476:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	011a      	lsls	r2, r3, #4
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	4413      	add	r3, r2
 8009484:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8009488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800948c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009496:	b29a      	uxth	r2, r3
 8009498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800949c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	f000 be34 	b.w	800a110 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80094a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	f040 843b 	bne.w	8009d30 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80094ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	f240 83b8 	bls.w	8009c48 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80094d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094fe:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009510:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	441a      	add	r2, r3
 800951c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009528:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800952c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009530:	b29b      	uxth	r3, r3
 8009532:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009538:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009544:	1ad2      	subs	r2, r2, r3
 8009546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800954a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009556:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 81b4 	beq.w	80098e2 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800957a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800957e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
 8009586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800958a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d16d      	bne.n	8009672 <USB_EPStartXfer+0x2ca>
 8009596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800959a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	4413      	add	r3, r2
 80095b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	011a      	lsls	r2, r3, #4
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	4413      	add	r3, r2
 80095cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80095d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d112      	bne.n	8009600 <USB_EPStartXfer+0x258>
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	801a      	strh	r2, [r3, #0]
 80095fe:	e05d      	b.n	80096bc <USB_EPStartXfer+0x314>
 8009600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009604:	2b3e      	cmp	r3, #62	@ 0x3e
 8009606:	d817      	bhi.n	8009638 <USB_EPStartXfer+0x290>
 8009608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800960c:	085b      	lsrs	r3, r3, #1
 800960e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <USB_EPStartXfer+0x280>
 800961e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009622:	3301      	adds	r3, #1
 8009624:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	b29b      	uxth	r3, r3
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	b29a      	uxth	r2, r3
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	e041      	b.n	80096bc <USB_EPStartXfer+0x314>
 8009638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009646:	f003 031f 	and.w	r3, r3, #31
 800964a:	2b00      	cmp	r3, #0
 800964c:	d104      	bne.n	8009658 <USB_EPStartXfer+0x2b0>
 800964e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009652:	3b01      	subs	r3, #1
 8009654:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965c:	b29b      	uxth	r3, r3
 800965e:	029b      	lsls	r3, r3, #10
 8009660:	b29b      	uxth	r3, r3
 8009662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966a:	b29a      	uxth	r2, r3
 800966c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e024      	b.n	80096bc <USB_EPStartXfer+0x314>
 8009672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009676:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d11c      	bne.n	80096bc <USB_EPStartXfer+0x314>
 8009682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009690:	b29b      	uxth	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009696:	4413      	add	r3, r2
 8009698:	637b      	str	r3, [r7, #52]	@ 0x34
 800969a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800969e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	011a      	lsls	r2, r3, #4
 80096a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096aa:	4413      	add	r3, r2
 80096ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	895b      	ldrh	r3, [r3, #10]
 80096c8:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6959      	ldr	r1, [r3, #20]
 80096d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096dc:	b29b      	uxth	r3, r3
 80096de:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80096e2:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80096e6:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	f001 fb41 	bl	800ad72 <USB_WritePMA>
            ep->xfer_buff += len;
 80096f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695a      	ldr	r2, [r3, #20]
 80096fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009700:	441a      	add	r2, r3
 8009702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009706:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800970e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009712:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6a1a      	ldr	r2, [r3, #32]
 800971a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800971e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	d90f      	bls.n	800974a <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 800972a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800972e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009740:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	621a      	str	r2, [r3, #32]
 8009748:	e00e      	b.n	8009768 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 800974a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800974e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 800975a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800975e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009768:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800976c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d16d      	bne.n	8009854 <USB_EPStartXfer+0x4ac>
 8009778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800977c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	61fb      	str	r3, [r7, #28]
 8009784:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009792:	b29b      	uxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	011a      	lsls	r2, r3, #4
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4413      	add	r3, r2
 80097ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097b2:	61bb      	str	r3, [r7, #24]
 80097b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d112      	bne.n	80097e2 <USB_EPStartXfer+0x43a>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097da:	b29a      	uxth	r2, r3
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	801a      	strh	r2, [r3, #0]
 80097e0:	e063      	b.n	80098aa <USB_EPStartXfer+0x502>
 80097e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80097e8:	d817      	bhi.n	800981a <USB_EPStartXfer+0x472>
 80097ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ee:	085b      	lsrs	r3, r3, #1
 80097f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80097f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <USB_EPStartXfer+0x462>
 8009800:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009804:	3301      	adds	r3, #1
 8009806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800980a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800980e:	b29b      	uxth	r3, r3
 8009810:	029b      	lsls	r3, r3, #10
 8009812:	b29a      	uxth	r2, r3
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e047      	b.n	80098aa <USB_EPStartXfer+0x502>
 800981a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <USB_EPStartXfer+0x492>
 8009830:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009834:	3b01      	subs	r3, #1
 8009836:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800983a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800983e:	b29b      	uxth	r3, r3
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	b29b      	uxth	r3, r3
 8009844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800984c:	b29a      	uxth	r2, r3
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e02a      	b.n	80098aa <USB_EPStartXfer+0x502>
 8009854:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009858:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d122      	bne.n	80098aa <USB_EPStartXfer+0x502>
 8009864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009870:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009874:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	4413      	add	r3, r2
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
 8009888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800988c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	011a      	lsls	r2, r3, #4
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	4413      	add	r3, r2
 800989a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800989e:	623b      	str	r3, [r7, #32]
 80098a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	891b      	ldrh	r3, [r3, #8]
 80098b6:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6959      	ldr	r1, [r3, #20]
 80098c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80098d0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80098d4:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80098d8:	6800      	ldr	r0, [r0, #0]
 80098da:	f001 fa4a 	bl	800ad72 <USB_WritePMA>
 80098de:	f000 bc17 	b.w	800a110 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d16d      	bne.n	80099ce <USB_EPStartXfer+0x626>
 80098f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009902:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800990c:	b29b      	uxth	r3, r3
 800990e:	461a      	mov	r2, r3
 8009910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009912:	4413      	add	r3, r2
 8009914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009916:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800991a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	011a      	lsls	r2, r3, #4
 8009924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009926:	4413      	add	r3, r2
 8009928:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800992c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800992e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d112      	bne.n	800995c <USB_EPStartXfer+0x5b4>
 8009936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009940:	b29a      	uxth	r2, r3
 8009942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009944:	801a      	strh	r2, [r3, #0]
 8009946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009954:	b29a      	uxth	r2, r3
 8009956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e063      	b.n	8009a24 <USB_EPStartXfer+0x67c>
 800995c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009960:	2b3e      	cmp	r3, #62	@ 0x3e
 8009962:	d817      	bhi.n	8009994 <USB_EPStartXfer+0x5ec>
 8009964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009968:	085b      	lsrs	r3, r3, #1
 800996a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800996e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <USB_EPStartXfer+0x5dc>
 800997a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800997e:	3301      	adds	r3, #1
 8009980:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009988:	b29b      	uxth	r3, r3
 800998a:	029b      	lsls	r3, r3, #10
 800998c:	b29a      	uxth	r2, r3
 800998e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	e047      	b.n	8009a24 <USB_EPStartXfer+0x67c>
 8009994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800999e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a2:	f003 031f 	and.w	r3, r3, #31
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d104      	bne.n	80099b4 <USB_EPStartXfer+0x60c>
 80099aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099ae:	3b01      	subs	r3, #1
 80099b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80099b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	029b      	lsls	r3, r3, #10
 80099bc:	b29b      	uxth	r3, r3
 80099be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	e02a      	b.n	8009a24 <USB_EPStartXfer+0x67c>
 80099ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d122      	bne.n	8009a24 <USB_EPStartXfer+0x67c>
 80099de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80099ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099fe:	4413      	add	r3, r2
 8009a00:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	011a      	lsls	r2, r3, #4
 8009a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a12:	4413      	add	r3, r2
 8009a14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	891b      	ldrh	r3, [r3, #8]
 8009a30:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6959      	ldr	r1, [r3, #20]
 8009a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009a4a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009a4e:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	f001 f98d 	bl	800ad72 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	695a      	ldr	r2, [r3, #20]
 8009a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a68:	441a      	add	r2, r3
 8009a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d90f      	bls.n	8009ab2 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a1a      	ldr	r2, [r3, #32]
 8009a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa2:	1ad2      	subs	r2, r2, r3
 8009aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aa8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	621a      	str	r2, [r3, #32]
 8009ab0:	e00e      	b.n	8009ad0 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ab6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ad0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8009adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d16d      	bne.n	8009bc8 <USB_EPStartXfer+0x820>
 8009aec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009afc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0c:	4413      	add	r3, r2
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	011a      	lsls	r2, r3, #4
 8009b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d112      	bne.n	8009b56 <USB_EPStartXfer+0x7ae>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	e05d      	b.n	8009c12 <USB_EPStartXfer+0x86a>
 8009b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b5c:	d817      	bhi.n	8009b8e <USB_EPStartXfer+0x7e6>
 8009b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <USB_EPStartXfer+0x7d6>
 8009b74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b78:	3301      	adds	r3, #1
 8009b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	029b      	lsls	r3, r3, #10
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	e041      	b.n	8009c12 <USB_EPStartXfer+0x86a>
 8009b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b9c:	f003 031f 	and.w	r3, r3, #31
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <USB_EPStartXfer+0x806>
 8009ba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	029b      	lsls	r3, r3, #10
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	801a      	strh	r2, [r3, #0]
 8009bc6:	e024      	b.n	8009c12 <USB_EPStartXfer+0x86a>
 8009bc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d11c      	bne.n	8009c12 <USB_EPStartXfer+0x86a>
 8009bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bec:	4413      	add	r3, r2
 8009bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	011a      	lsls	r2, r3, #4
 8009bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	895b      	ldrh	r3, [r3, #10]
 8009c1e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6959      	ldr	r1, [r3, #20]
 8009c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009c38:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009c3c:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009c40:	6800      	ldr	r0, [r0, #0]
 8009c42:	f001 f896 	bl	800ad72 <USB_WritePMA>
 8009c46:	e263      	b.n	800a110 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009c58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c7e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	441a      	add	r2, r3
 8009c9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cd4:	4413      	add	r3, r2
 8009cd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	011a      	lsls	r2, r3, #4
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	4413      	add	r3, r2
 8009cea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cfe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	891b      	ldrh	r3, [r3, #8]
 8009d06:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6959      	ldr	r1, [r3, #20]
 8009d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009d20:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009d24:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009d28:	6800      	ldr	r0, [r0, #0]
 8009d2a:	f001 f822 	bl	800ad72 <USB_WritePMA>
 8009d2e:	e1ef      	b.n	800a110 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80aa 	beq.w	8009eac <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	785b      	ldrb	r3, [r3, #1]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d16d      	bne.n	8009e50 <USB_EPStartXfer+0xaa8>
 8009d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d94:	4413      	add	r3, r2
 8009d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	011a      	lsls	r2, r3, #4
 8009da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009da8:	4413      	add	r3, r2
 8009daa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d112      	bne.n	8009dde <USB_EPStartXfer+0xa36>
 8009db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc6:	801a      	strh	r2, [r3, #0]
 8009dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e05d      	b.n	8009e9a <USB_EPStartXfer+0xaf2>
 8009dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009de4:	d817      	bhi.n	8009e16 <USB_EPStartXfer+0xa6e>
 8009de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dea:	085b      	lsrs	r3, r3, #1
 8009dec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <USB_EPStartXfer+0xa5e>
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e00:	3301      	adds	r3, #1
 8009e02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	e041      	b.n	8009e9a <USB_EPStartXfer+0xaf2>
 8009e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <USB_EPStartXfer+0xa8e>
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e30:	3b01      	subs	r3, #1
 8009e32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	e024      	b.n	8009e9a <USB_EPStartXfer+0xaf2>
 8009e50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d11c      	bne.n	8009e9a <USB_EPStartXfer+0xaf2>
 8009e60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e74:	4413      	add	r3, r2
 8009e76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	011a      	lsls	r2, r3, #4
 8009e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e88:	4413      	add	r3, r2
 8009e8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	895b      	ldrh	r3, [r3, #10]
 8009ea6:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8009eaa:	e0b2      	b.n	800a012 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009eac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d171      	bne.n	8009fa0 <USB_EPStartXfer+0xbf8>
 8009ebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ece:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	011a      	lsls	r2, r3, #4
 8009ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ef8:	4413      	add	r3, r2
 8009efa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d112      	bne.n	8009f2e <USB_EPStartXfer+0xb86>
 8009f08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e069      	b.n	800a002 <USB_EPStartXfer+0xc5a>
 8009f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f34:	d817      	bhi.n	8009f66 <USB_EPStartXfer+0xbbe>
 8009f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f3a:	085b      	lsrs	r3, r3, #1
 8009f3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <USB_EPStartXfer+0xbae>
 8009f4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f50:	3301      	adds	r3, #1
 8009f52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	029b      	lsls	r3, r3, #10
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f62:	801a      	strh	r2, [r3, #0]
 8009f64:	e04d      	b.n	800a002 <USB_EPStartXfer+0xc5a>
 8009f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <USB_EPStartXfer+0xbde>
 8009f7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f80:	3b01      	subs	r3, #1
 8009f82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	029b      	lsls	r3, r3, #10
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f9c:	801a      	strh	r2, [r3, #0]
 8009f9e:	e030      	b.n	800a002 <USB_EPStartXfer+0xc5a>
 8009fa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	785b      	ldrb	r3, [r3, #1]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d128      	bne.n	800a002 <USB_EPStartXfer+0xc5a>
 8009fb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	011a      	lsls	r2, r3, #4
 8009fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fec:	4413      	add	r3, r2
 8009fee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a000:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a006:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	891b      	ldrh	r3, [r3, #8]
 800a00e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a016:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6959      	ldr	r1, [r3, #20]
 800a01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a022:	b29b      	uxth	r3, r3
 800a024:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a028:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a02c:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a030:	6800      	ldr	r0, [r0, #0]
 800a032:	f000 fe9e 	bl	800ad72 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a03a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	785b      	ldrb	r3, [r3, #1]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d12e      	bne.n	800a0a4 <USB_EPStartXfer+0xcfc>
 800a046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a04a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a054:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	b29b      	uxth	r3, r3
 800a064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a070:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a074:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a07e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	441a      	add	r2, r3
 800a08a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a08e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a09a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	8013      	strh	r3, [r2, #0]
 800a0a2:	e035      	b.n	800a110 <USB_EPStartXfer+0xd68>
 800a0a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d12d      	bne.n	800a110 <USB_EPStartXfer+0xd68>
 800a0b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0da:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a0de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	441a      	add	r2, r3
 800a0f8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a0fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a110:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a114:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a11e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a132:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a13a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a13e:	8013      	strh	r3, [r2, #0]
 800a140:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a144:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a148:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a14c:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a150:	8812      	ldrh	r2, [r2, #0]
 800a152:	f082 0210 	eor.w	r2, r2, #16
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a15c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a160:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a164:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a168:	8812      	ldrh	r2, [r2, #0]
 800a16a:	f082 0220 	eor.w	r2, r2, #32
 800a16e:	801a      	strh	r2, [r3, #0]
 800a170:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a174:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a17e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	441a      	add	r2, r3
 800a18a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a18e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a19c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	8013      	strh	r3, [r2, #0]
 800a1a8:	f000 bc9f 	b.w	800aaea <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a1ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	7b1b      	ldrb	r3, [r3, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f040 80ae 	bne.w	800a31a <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d917      	bls.n	800a20a <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a1da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a1ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a200:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	619a      	str	r2, [r3, #24]
 800a208:	e00e      	b.n	800a228 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a20a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a20e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a21a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a21e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2200      	movs	r2, #0
 800a226:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a228:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a22c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a23a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a244:	b29b      	uxth	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a24c:	4413      	add	r3, r2
 800a24e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a256:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	011a      	lsls	r2, r3, #4
 800a260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a264:	4413      	add	r3, r2
 800a266:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a26a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d116      	bne.n	800a2a4 <USB_EPStartXfer+0xefc>
 800a276:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a282:	b29a      	uxth	r2, r3
 800a284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a288:	801a      	strh	r2, [r3, #0]
 800a28a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	e3e8      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
 800a2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2aa:	d818      	bhi.n	800a2de <USB_EPStartXfer+0xf36>
 800a2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b0:	085b      	lsrs	r3, r3, #1
 800a2b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <USB_EPStartXfer+0xf24>
 800a2c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	029b      	lsls	r3, r3, #10
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	e3cb      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
 800a2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e2:	095b      	lsrs	r3, r3, #5
 800a2e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ec:	f003 031f 	and.w	r3, r3, #31
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <USB_EPStartXfer+0xf56>
 800a2f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a302:	b29b      	uxth	r3, r3
 800a304:	029b      	lsls	r3, r3, #10
 800a306:	b29b      	uxth	r3, r3
 800a308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a310:	b29a      	uxth	r2, r3
 800a312:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	e3ad      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a31a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a31e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	78db      	ldrb	r3, [r3, #3]
 800a326:	2b02      	cmp	r3, #2
 800a328:	f040 8200 	bne.w	800a72c <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a32c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a330:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 8091 	bne.w	800a460 <USB_EPStartXfer+0x10b8>
 800a33e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a34c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a362:	4413      	add	r3, r2
 800a364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a368:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a36c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	011a      	lsls	r2, r3, #4
 800a376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a37a:	4413      	add	r3, r2
 800a37c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a384:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a388:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d116      	bne.n	800a3c2 <USB_EPStartXfer+0x101a>
 800a394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	e083      	b.n	800a4ca <USB_EPStartXfer+0x1122>
 800a3c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3d0:	d820      	bhi.n	800a414 <USB_EPStartXfer+0x106c>
 800a3d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <USB_EPStartXfer+0x105a>
 800a3f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a402:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a406:	b29b      	uxth	r3, r3
 800a408:	029b      	lsls	r3, r3, #10
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	e05a      	b.n	800a4ca <USB_EPStartXfer+0x1122>
 800a414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	095b      	lsrs	r3, r3, #5
 800a422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a42a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f003 031f 	and.w	r3, r3, #31
 800a436:	2b00      	cmp	r3, #0
 800a438:	d104      	bne.n	800a444 <USB_EPStartXfer+0x109c>
 800a43a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a43e:	3b01      	subs	r3, #1
 800a440:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a444:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a448:	b29b      	uxth	r3, r3
 800a44a:	029b      	lsls	r3, r3, #10
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a456:	b29a      	uxth	r2, r3
 800a458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a45c:	801a      	strh	r2, [r3, #0]
 800a45e:	e034      	b.n	800a4ca <USB_EPStartXfer+0x1122>
 800a460:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a464:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	785b      	ldrb	r3, [r3, #1]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d12c      	bne.n	800a4ca <USB_EPStartXfer+0x1122>
 800a470:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a474:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a47e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a482:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a494:	4413      	add	r3, r2
 800a496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a49a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	011a      	lsls	r2, r3, #4
 800a4a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 8091 	bne.w	800a60c <USB_EPStartXfer+0x1264>
 800a4ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a4f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a506:	b29b      	uxth	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a50e:	4413      	add	r3, r2
 800a510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a518:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	011a      	lsls	r2, r3, #4
 800a522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a526:	4413      	add	r3, r2
 800a528:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a52c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a530:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a534:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d116      	bne.n	800a56e <USB_EPStartXfer+0x11c6>
 800a540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a564:	b29a      	uxth	r2, r3
 800a566:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	e07c      	b.n	800a668 <USB_EPStartXfer+0x12c0>
 800a56e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a572:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a57c:	d820      	bhi.n	800a5c0 <USB_EPStartXfer+0x1218>
 800a57e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a582:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	085b      	lsrs	r3, r3, #1
 800a58c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a590:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a594:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <USB_EPStartXfer+0x1206>
 800a5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5bc:	801a      	strh	r2, [r3, #0]
 800a5be:	e053      	b.n	800a668 <USB_EPStartXfer+0x12c0>
 800a5c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	095b      	lsrs	r3, r3, #5
 800a5ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 031f 	and.w	r3, r3, #31
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d104      	bne.n	800a5f0 <USB_EPStartXfer+0x1248>
 800a5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	029b      	lsls	r3, r3, #10
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a602:	b29a      	uxth	r2, r3
 800a604:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a608:	801a      	strh	r2, [r3, #0]
 800a60a:	e02d      	b.n	800a668 <USB_EPStartXfer+0x12c0>
 800a60c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d125      	bne.n	800a668 <USB_EPStartXfer+0x12c0>
 800a61c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a620:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	461a      	mov	r2, r3
 800a62e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a632:	4413      	add	r3, r2
 800a634:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a63c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	011a      	lsls	r2, r3, #4
 800a646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a64a:	4413      	add	r3, r2
 800a64c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a654:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a658:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	b29a      	uxth	r2, r3
 800a662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a666:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a66c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 81fe 	beq.w	800aa76 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a67a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a67e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a688:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a69a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a69e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <USB_EPStartXfer+0x130a>
 800a6a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10d      	bne.n	800a6ce <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a6b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 81db 	bne.w	800aa76 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f040 81d4 	bne.w	800aa76 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a6ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a6f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a706:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	441a      	add	r2, r3
 800a712:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a71a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a71e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a722:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a726:	b29b      	uxth	r3, r3
 800a728:	8013      	strh	r3, [r2, #0]
 800a72a:	e1a4      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a72c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a730:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	78db      	ldrb	r3, [r3, #3]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	f040 819a 	bne.w	800aa72 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a73e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a742:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a74e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	429a      	cmp	r2, r3
 800a758:	d917      	bls.n	800a78a <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a75a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a75e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a76a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a76e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699a      	ldr	r2, [r3, #24]
 800a776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a77a:	1ad2      	subs	r2, r2, r3
 800a77c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	619a      	str	r2, [r3, #24]
 800a788:	e00e      	b.n	800a7a8 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a78a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a78e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a79a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a79e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	785b      	ldrb	r3, [r3, #1]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d178      	bne.n	800a8aa <USB_EPStartXfer+0x1502>
 800a7b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a7dc:	4413      	add	r3, r2
 800a7de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	011a      	lsls	r2, r3, #4
 800a7f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a7fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d116      	bne.n	800a834 <USB_EPStartXfer+0x148c>
 800a806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a812:	b29a      	uxth	r2, r3
 800a814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a818:	801a      	strh	r2, [r3, #0]
 800a81a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a830:	801a      	strh	r2, [r3, #0]
 800a832:	e06b      	b.n	800a90c <USB_EPStartXfer+0x1564>
 800a834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a838:	2b3e      	cmp	r3, #62	@ 0x3e
 800a83a:	d818      	bhi.n	800a86e <USB_EPStartXfer+0x14c6>
 800a83c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a840:	085b      	lsrs	r3, r3, #1
 800a842:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <USB_EPStartXfer+0x14b4>
 800a852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a856:	3301      	adds	r3, #1
 800a858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a860:	b29b      	uxth	r3, r3
 800a862:	029b      	lsls	r3, r3, #10
 800a864:	b29a      	uxth	r2, r3
 800a866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e04e      	b.n	800a90c <USB_EPStartXfer+0x1564>
 800a86e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a872:	095b      	lsrs	r3, r3, #5
 800a874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a87c:	f003 031f 	and.w	r3, r3, #31
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <USB_EPStartXfer+0x14e6>
 800a884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a888:	3b01      	subs	r3, #1
 800a88a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a892:	b29b      	uxth	r3, r3
 800a894:	029b      	lsls	r3, r3, #10
 800a896:	b29b      	uxth	r3, r3
 800a898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8a6:	801a      	strh	r2, [r3, #0]
 800a8a8:	e030      	b.n	800a90c <USB_EPStartXfer+0x1564>
 800a8aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d128      	bne.n	800a90c <USB_EPStartXfer+0x1564>
 800a8ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8de:	4413      	add	r3, r2
 800a8e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	011a      	lsls	r2, r3, #4
 800a8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a904:	b29a      	uxth	r2, r3
 800a906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a90a:	801a      	strh	r2, [r3, #0]
 800a90c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a910:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a91a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a91e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d178      	bne.n	800aa1c <USB_EPStartXfer+0x1674>
 800a92a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a92e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a938:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a93c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a946:	b29b      	uxth	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a94e:	4413      	add	r3, r2
 800a950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a958:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	011a      	lsls	r2, r3, #4
 800a962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a966:	4413      	add	r3, r2
 800a968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a96c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d116      	bne.n	800a9a6 <USB_EPStartXfer+0x15fe>
 800a978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a984:	b29a      	uxth	r2, r3
 800a986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a98a:	801a      	strh	r2, [r3, #0]
 800a98c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	b29b      	uxth	r3, r3
 800a994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e067      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
 800a9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9ac:	d818      	bhi.n	800a9e0 <USB_EPStartXfer+0x1638>
 800a9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <USB_EPStartXfer+0x1626>
 800a9c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	029b      	lsls	r3, r3, #10
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a9dc:	801a      	strh	r2, [r3, #0]
 800a9de:	e04a      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
 800a9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9e4:	095b      	lsrs	r3, r3, #5
 800a9e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <USB_EPStartXfer+0x1658>
 800a9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	029b      	lsls	r3, r3, #10
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	e02c      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
 800aa1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	785b      	ldrb	r3, [r3, #1]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d124      	bne.n	800aa76 <USB_EPStartXfer+0x16ce>
 800aa2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa42:	4413      	add	r3, r2
 800aa44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	011a      	lsls	r2, r3, #4
 800aa56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aa60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa6e:	801a      	strh	r2, [r3, #0]
 800aa70:	e001      	b.n	800aa76 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e03a      	b.n	800aaec <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800aaa0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aaa4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aaa8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800aaac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aab0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aab4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800aab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aabc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aac6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	441a      	add	r2, r3
 800aad2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d020      	beq.n	800ab4a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab1e:	81bb      	strh	r3, [r7, #12]
 800ab20:	89bb      	ldrh	r3, [r7, #12]
 800ab22:	f083 0310 	eor.w	r3, r3, #16
 800ab26:	81bb      	strh	r3, [r7, #12]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	441a      	add	r2, r3
 800ab32:	89bb      	ldrh	r3, [r7, #12]
 800ab34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	8013      	strh	r3, [r2, #0]
 800ab48:	e01f      	b.n	800ab8a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab60:	81fb      	strh	r3, [r7, #14]
 800ab62:	89fb      	ldrh	r3, [r7, #14]
 800ab64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab68:	81fb      	strh	r3, [r7, #14]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	441a      	add	r2, r3
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bc80      	pop	{r7}
 800ab94:	4770      	bx	lr

0800ab96 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b087      	sub	sp, #28
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	7b1b      	ldrb	r3, [r3, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f040 809d 	bne.w	800ace4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d04c      	beq.n	800ac4c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	823b      	strh	r3, [r7, #16]
 800abc0:	8a3b      	ldrh	r3, [r7, #16]
 800abc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d01b      	beq.n	800ac02 <USB_EPClearStall+0x6c>
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe0:	81fb      	strh	r3, [r7, #14]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	441a      	add	r2, r3
 800abec:	89fb      	ldrh	r3, [r7, #14]
 800abee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	78db      	ldrb	r3, [r3, #3]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d06c      	beq.n	800ace4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac20:	81bb      	strh	r3, [r7, #12]
 800ac22:	89bb      	ldrh	r3, [r7, #12]
 800ac24:	f083 0320 	eor.w	r3, r3, #32
 800ac28:	81bb      	strh	r3, [r7, #12]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	441a      	add	r2, r3
 800ac34:	89bb      	ldrh	r3, [r7, #12]
 800ac36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	8013      	strh	r3, [r2, #0]
 800ac4a:	e04b      	b.n	800ace4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	82fb      	strh	r3, [r7, #22]
 800ac5a:	8afb      	ldrh	r3, [r7, #22]
 800ac5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01b      	beq.n	800ac9c <USB_EPClearStall+0x106>
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac7a:	82bb      	strh	r3, [r7, #20]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	441a      	add	r2, r3
 800ac86:	8abb      	ldrh	r3, [r7, #20]
 800ac88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acb2:	827b      	strh	r3, [r7, #18]
 800acb4:	8a7b      	ldrh	r3, [r7, #18]
 800acb6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acba:	827b      	strh	r3, [r7, #18]
 800acbc:	8a7b      	ldrh	r3, [r7, #18]
 800acbe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800acc2:	827b      	strh	r3, [r7, #18]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	441a      	add	r2, r3
 800acce:	8a7b      	ldrh	r3, [r7, #18]
 800acd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr

0800acf0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d103      	bne.n	800ad0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2280      	movs	r2, #128	@ 0x80
 800ad06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bc80      	pop	{r7}
 800ad14:	4770      	bx	lr

0800ad16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b083      	sub	sp, #12
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bc80      	pop	{r7}
 800ad28:	4770      	bx	lr

0800ad2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr

0800ad3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b085      	sub	sp, #20
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bc80      	pop	{r7}
 800ad70:	4770      	bx	lr

0800ad72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b08d      	sub	sp, #52	@ 0x34
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	461a      	mov	r2, r3
 800ad80:	460b      	mov	r3, r1
 800ad82:	80fb      	strh	r3, [r7, #6]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad88:	88bb      	ldrh	r3, [r7, #4]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	085b      	lsrs	r3, r3, #1
 800ad8e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad98:	88fb      	ldrh	r3, [r7, #6]
 800ad9a:	005a      	lsls	r2, r3, #1
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ada4:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adaa:	e01d      	b.n	800ade8 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	3301      	adds	r3, #1
 800adb6:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	021b      	lsls	r3, r3, #8
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	461a      	mov	r2, r3
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	3302      	adds	r3, #2
 800add4:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800add6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add8:	3302      	adds	r3, #2
 800adda:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	3301      	adds	r3, #1
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800ade2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade4:	3b01      	subs	r3, #1
 800ade6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1de      	bne.n	800adac <USB_WritePMA+0x3a>
  }
}
 800adee:	bf00      	nop
 800adf0:	bf00      	nop
 800adf2:	3734      	adds	r7, #52	@ 0x34
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b08b      	sub	sp, #44	@ 0x2c
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	4611      	mov	r1, r2
 800ae06:	461a      	mov	r2, r3
 800ae08:	460b      	mov	r3, r1
 800ae0a:	80fb      	strh	r3, [r7, #6]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae10:	88bb      	ldrh	r3, [r7, #4]
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae20:	88fb      	ldrh	r3, [r7, #6]
 800ae22:	005a      	lsls	r2, r3, #1
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae2c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae32:	e01b      	b.n	800ae6c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	3302      	adds	r3, #2
 800ae40:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	0a1b      	lsrs	r3, r3, #8
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	3302      	adds	r3, #2
 800ae64:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1e0      	bne.n	800ae34 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	701a      	strb	r2, [r3, #0]
  }
}
 800ae8e:	bf00      	nop
 800ae90:	372c      	adds	r7, #44	@ 0x2c
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bc80      	pop	{r7}
 800ae96:	4770      	bx	lr

0800ae98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7c1b      	ldrb	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d115      	bne.n	800aedc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aeb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	2181      	movs	r1, #129	@ 0x81
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 fe90 	bl	800cbde <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec8:	2202      	movs	r2, #2
 800aeca:	2101      	movs	r1, #1
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 fe86 	bl	800cbde <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800aeda:	e012      	b.n	800af02 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aedc:	2340      	movs	r3, #64	@ 0x40
 800aede:	2202      	movs	r2, #2
 800aee0:	2181      	movs	r1, #129	@ 0x81
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f001 fe7b 	bl	800cbde <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeee:	2340      	movs	r3, #64	@ 0x40
 800aef0:	2202      	movs	r2, #2
 800aef2:	2101      	movs	r1, #1
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 fe72 	bl	800cbde <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af02:	2308      	movs	r3, #8
 800af04:	2203      	movs	r2, #3
 800af06:	2182      	movs	r1, #130	@ 0x82
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 fe68 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af18:	f001 ff88 	bl	800ce2c <USBD_static_malloc>
 800af1c:	4602      	mov	r2, r0
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800af2e:	2301      	movs	r3, #1
 800af30:	73fb      	strb	r3, [r7, #15]
 800af32:	e026      	b.n	800af82 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af3a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2200      	movs	r2, #0
 800af52:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7c1b      	ldrb	r3, [r3, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af68:	2101      	movs	r1, #1
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f001 ff28 	bl	800cdc0 <USBD_LL_PrepareReceive>
 800af70:	e007      	b.n	800af82 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af78:	2340      	movs	r3, #64	@ 0x40
 800af7a:	2101      	movs	r1, #1
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 ff1f 	bl	800cdc0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800af82:	7bfb      	ldrb	r3, [r7, #15]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af9c:	2181      	movs	r1, #129	@ 0x81
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 fe43 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800afaa:	2101      	movs	r1, #1
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fe3c 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800afba:	2182      	movs	r1, #130	@ 0x82
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 fe34 	bl	800cc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00e      	beq.n	800aff0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 ff2e 	bl	800ce44 <USBD_static_free>
    pdev->pClassData = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b020:	2b00      	cmp	r3, #0
 800b022:	d039      	beq.n	800b098 <USBD_CDC_Setup+0x9e>
 800b024:	2b20      	cmp	r3, #32
 800b026:	d17f      	bne.n	800b128 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d029      	beq.n	800b084 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b25b      	sxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	da11      	bge.n	800b05e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b046:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	88d2      	ldrh	r2, [r2, #6]
 800b04c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b04e:	6939      	ldr	r1, [r7, #16]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	88db      	ldrh	r3, [r3, #6]
 800b054:	461a      	mov	r2, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fa06 	bl	800c468 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b05c:	e06b      	b.n	800b136 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	785a      	ldrb	r2, [r3, #1]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	88db      	ldrh	r3, [r3, #6]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 fa21 	bl	800c4c4 <USBD_CtlPrepareRx>
      break;
 800b082:	e058      	b.n	800b136 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	7850      	ldrb	r0, [r2, #1]
 800b090:	2200      	movs	r2, #0
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	4798      	blx	r3
      break;
 800b096:	e04e      	b.n	800b136 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b0b      	cmp	r3, #11
 800b09e:	d02e      	beq.n	800b0fe <USBD_CDC_Setup+0x104>
 800b0a0:	2b0b      	cmp	r3, #11
 800b0a2:	dc38      	bgt.n	800b116 <USBD_CDC_Setup+0x11c>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <USBD_CDC_Setup+0xb4>
 800b0a8:	2b0a      	cmp	r3, #10
 800b0aa:	d014      	beq.n	800b0d6 <USBD_CDC_Setup+0xdc>
 800b0ac:	e033      	b.n	800b116 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d107      	bne.n	800b0c8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b0b8:	f107 030c 	add.w	r3, r7, #12
 800b0bc:	2202      	movs	r2, #2
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 f9d1 	bl	800c468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0c6:	e02e      	b.n	800b126 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 f962 	bl	800c394 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	75fb      	strb	r3, [r7, #23]
          break;
 800b0d4:	e027      	b.n	800b126 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d107      	bne.n	800b0f0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0e0:	f107 030f 	add.w	r3, r7, #15
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f9bd 	bl	800c468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0ee:	e01a      	b.n	800b126 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 f94e 	bl	800c394 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	75fb      	strb	r3, [r7, #23]
          break;
 800b0fc:	e013      	b.n	800b126 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b104:	2b03      	cmp	r3, #3
 800b106:	d00d      	beq.n	800b124 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 f942 	bl	800c394 <USBD_CtlError>
            ret = USBD_FAIL;
 800b110:	2302      	movs	r3, #2
 800b112:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b114:	e006      	b.n	800b124 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 f93b 	bl	800c394 <USBD_CtlError>
          ret = USBD_FAIL;
 800b11e:	2302      	movs	r3, #2
 800b120:	75fb      	strb	r3, [r7, #23]
          break;
 800b122:	e000      	b.n	800b126 <USBD_CDC_Setup+0x12c>
          break;
 800b124:	bf00      	nop
      }
      break;
 800b126:	e006      	b.n	800b136 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 f932 	bl	800c394 <USBD_CtlError>
      ret = USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	75fb      	strb	r3, [r7, #23]
      break;
 800b134:	bf00      	nop
  }

  return ret;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b152:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b15a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d03a      	beq.n	800b1dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b166:	78fa      	ldrb	r2, [r7, #3]
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	331c      	adds	r3, #28
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d029      	beq.n	800b1d0 <USBD_CDC_DataIn+0x90>
 800b17c:	78fa      	ldrb	r2, [r7, #3]
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	331c      	adds	r3, #28
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	78f9      	ldrb	r1, [r7, #3]
 800b190:	68b8      	ldr	r0, [r7, #8]
 800b192:	460b      	mov	r3, r1
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	440b      	add	r3, r1
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	4403      	add	r3, r0
 800b19c:	3338      	adds	r3, #56	@ 0x38
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d110      	bne.n	800b1d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b1ae:	78fa      	ldrb	r2, [r7, #3]
 800b1b0:	6879      	ldr	r1, [r7, #4]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	440b      	add	r3, r1
 800b1bc:	331c      	adds	r3, #28
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1c2:	78f9      	ldrb	r1, [r7, #3]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fdd6 	bl	800cd7a <USBD_LL_Transmit>
 800b1ce:	e003      	b.n	800b1d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b1dc:	2302      	movs	r3, #2
  }
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 fe01 	bl	800ce06 <USBD_LL_GetRxDataSize>
 800b204:	4602      	mov	r2, r0
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b22a:	4611      	mov	r1, r2
 800b22c:	4798      	blx	r3

    return USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	e000      	b.n	800b234 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b232:	2302      	movs	r3, #2
  }
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b24a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b252:	2b00      	cmp	r3, #0
 800b254:	d014      	beq.n	800b280 <USBD_CDC_EP0_RxReady+0x44>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b25c:	2bff      	cmp	r3, #255	@ 0xff
 800b25e:	d00f      	beq.n	800b280 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b26e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b276:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	22ff      	movs	r2, #255	@ 0xff
 800b27c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2243      	movs	r2, #67	@ 0x43
 800b298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b29a:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bc80      	pop	{r7}
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	200000bc 	.word	0x200000bc

0800b2ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2243      	movs	r2, #67	@ 0x43
 800b2b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b2ba:	4b03      	ldr	r3, [pc, #12]	@ (800b2c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	20000078 	.word	0x20000078

0800b2cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2243      	movs	r2, #67	@ 0x43
 800b2d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b2da:	4b03      	ldr	r3, [pc, #12]	@ (800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bc80      	pop	{r7}
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	20000100 	.word	0x20000100

0800b2ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	220a      	movs	r2, #10
 800b2f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	bc80      	pop	{r7}
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	20000034 	.word	0x20000034

0800b30c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b316:	2302      	movs	r3, #2
 800b318:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	bc80      	pop	{r7}
 800b336:	4770      	bx	lr

0800b338 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b34c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b356:	88fa      	ldrh	r2, [r7, #6]
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	371c      	adds	r7, #28
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr

0800b36a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b085      	sub	sp, #20
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bc80      	pop	{r7}
 800b38e:	4770      	bx	lr

0800b390 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b39e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d01c      	beq.n	800b3e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d115      	bne.n	800b3e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	2181      	movs	r1, #129	@ 0x81
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fccf 	bl	800cd7a <USBD_LL_Transmit>

      return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e002      	b.n	800b3e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e000      	b.n	800b3e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b3e4:	2302      	movs	r3, #2
  }
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d017      	beq.n	800b438 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	7c1b      	ldrb	r3, [r3, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d109      	bne.n	800b424 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b41a:	2101      	movs	r1, #1
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 fccf 	bl	800cdc0 <USBD_LL_PrepareReceive>
 800b422:	e007      	b.n	800b434 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b42a:	2340      	movs	r3, #64	@ 0x40
 800b42c:	2101      	movs	r1, #1
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f001 fcc6 	bl	800cdc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	e000      	b.n	800b43a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b438:	2302      	movs	r3, #2
  }
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	60f8      	str	r0, [r7, #12]
 800b44a:	60b9      	str	r1, [r7, #8]
 800b44c:	4613      	mov	r3, r2
 800b44e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b456:	2302      	movs	r3, #2
 800b458:	e01a      	b.n	800b490 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	79fa      	ldrb	r2, [r7, #7]
 800b486:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f001 fb33 	bl	800caf4 <USBD_LL_Init>

  return USBD_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d006      	beq.n	800b4ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]
 800b4b8:	e001      	b.n	800b4be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr

0800b4ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fb68 	bl	800cba8 <USBD_LL_Start>

  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr

0800b4f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b502:	2302      	movs	r3, #2
 800b504:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	78fa      	ldrb	r2, [r7, #3]
 800b51a:	4611      	mov	r1, r2
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	4798      	blx	r3
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	4611      	mov	r1, r2
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	4798      	blx	r3

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b082      	sub	sp, #8
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fed8 	bl	800c322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b580:	461a      	mov	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	2b02      	cmp	r3, #2
 800b594:	d016      	beq.n	800b5c4 <USBD_LL_SetupStage+0x6a>
 800b596:	2b02      	cmp	r3, #2
 800b598:	d81c      	bhi.n	800b5d4 <USBD_LL_SetupStage+0x7a>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <USBD_LL_SetupStage+0x4a>
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d008      	beq.n	800b5b4 <USBD_LL_SetupStage+0x5a>
 800b5a2:	e017      	b.n	800b5d4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f9cb 	bl	800b948 <USBD_StdDevReq>
      break;
 800b5b2:	e01a      	b.n	800b5ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fa2d 	bl	800ba1c <USBD_StdItfReq>
      break;
 800b5c2:	e012      	b.n	800b5ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fa6d 	bl	800baac <USBD_StdEPReq>
      break;
 800b5d2:	e00a      	b.n	800b5ea <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b5da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 fb40 	bl	800cc68 <USBD_LL_StallEP>
      break;
 800b5e8:	bf00      	nop
  }

  return USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b602:	7afb      	ldrb	r3, [r7, #11]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d14b      	bne.n	800b6a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b60e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b616:	2b03      	cmp	r3, #3
 800b618:	d134      	bne.n	800b684 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	d919      	bls.n	800b65a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d203      	bcs.n	800b648 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b644:	b29b      	uxth	r3, r3
 800b646:	e002      	b.n	800b64e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 ff54 	bl	800c500 <USBD_CtlContinueRx>
 800b658:	e038      	b.n	800b6cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d105      	bne.n	800b67c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 ff51 	bl	800c524 <USBD_CtlSendStatus>
 800b682:	e023      	b.n	800b6cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b68a:	2b05      	cmp	r3, #5
 800b68c:	d11e      	bne.n	800b6cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b696:	2100      	movs	r1, #0
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f001 fae5 	bl	800cc68 <USBD_LL_StallEP>
 800b69e:	e015      	b.n	800b6cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00d      	beq.n	800b6c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d108      	bne.n	800b6c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	7afa      	ldrb	r2, [r7, #11]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	4798      	blx	r3
 800b6c6:	e001      	b.n	800b6cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e000      	b.n	800b6ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	607a      	str	r2, [r7, #4]
 800b6e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d17f      	bne.n	800b7ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3314      	adds	r3, #20
 800b6ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d15c      	bne.n	800b7b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d915      	bls.n	800b732 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 febe 	bl	800c4a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b724:	2300      	movs	r3, #0
 800b726:	2200      	movs	r2, #0
 800b728:	2100      	movs	r1, #0
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f001 fb48 	bl	800cdc0 <USBD_LL_PrepareReceive>
 800b730:	e04e      	b.n	800b7d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	6912      	ldr	r2, [r2, #16]
 800b73a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b73e:	fb01 f202 	mul.w	r2, r1, r2
 800b742:	1a9b      	subs	r3, r3, r2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11c      	bne.n	800b782 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b750:	429a      	cmp	r2, r3
 800b752:	d316      	bcc.n	800b782 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	689a      	ldr	r2, [r3, #8]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b75e:	429a      	cmp	r2, r3
 800b760:	d20f      	bcs.n	800b782 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b762:	2200      	movs	r2, #0
 800b764:	2100      	movs	r1, #0
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f000 fe9a 	bl	800c4a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b774:	2300      	movs	r3, #0
 800b776:	2200      	movs	r2, #0
 800b778:	2100      	movs	r1, #0
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f001 fb20 	bl	800cdc0 <USBD_LL_PrepareReceive>
 800b780:	e026      	b.n	800b7d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b794:	2b03      	cmp	r3, #3
 800b796:	d105      	bne.n	800b7a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b7a4:	2180      	movs	r1, #128	@ 0x80
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f001 fa5e 	bl	800cc68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 fecc 	bl	800c54a <USBD_CtlReceiveStatus>
 800b7b2:	e00d      	b.n	800b7d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d004      	beq.n	800b7c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d103      	bne.n	800b7d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b7c8:	2180      	movs	r1, #128	@ 0x80
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f001 fa4c 	bl	800cc68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d11d      	bne.n	800b816 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7ff fe81 	bl	800b4e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7e8:	e015      	b.n	800b816 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00d      	beq.n	800b812 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d108      	bne.n	800b812 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	7afa      	ldrb	r2, [r7, #11]
 800b80a:	4611      	mov	r1, r2
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	4798      	blx	r3
 800b810:	e001      	b.n	800b816 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b812:	2302      	movs	r3, #2
 800b814:	e000      	b.n	800b818 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b828:	2340      	movs	r3, #64	@ 0x40
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 f9d5 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2240      	movs	r2, #64	@ 0x40
 800b840:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b844:	2340      	movs	r3, #64	@ 0x40
 800b846:	2200      	movs	r2, #0
 800b848:	2180      	movs	r1, #128	@ 0x80
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f001 f9c7 	bl	800cbde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2240      	movs	r2, #64	@ 0x40
 800b85a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b880:	2b00      	cmp	r3, #0
 800b882:	d009      	beq.n	800b898 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	6852      	ldr	r2, [r2, #4]
 800b890:	b2d2      	uxtb	r2, r2
 800b892:	4611      	mov	r1, r2
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
  }

  return USBD_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	78fa      	ldrb	r2, [r7, #3]
 800b8b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bc80      	pop	{r7}
 800b8be:	4770      	bx	lr

0800b8c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bc80      	pop	{r7}
 800b8e6:	4770      	bx	lr

0800b8e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d105      	bne.n	800b906 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bc80      	pop	{r7}
 800b910:	4770      	bx	lr

0800b912 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b920:	2b03      	cmp	r3, #3
 800b922:	d10b      	bne.n	800b93c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b92a:	69db      	ldr	r3, [r3, #28]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b95e:	2b40      	cmp	r3, #64	@ 0x40
 800b960:	d005      	beq.n	800b96e <USBD_StdDevReq+0x26>
 800b962:	2b40      	cmp	r3, #64	@ 0x40
 800b964:	d84f      	bhi.n	800ba06 <USBD_StdDevReq+0xbe>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d009      	beq.n	800b97e <USBD_StdDevReq+0x36>
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	d14b      	bne.n	800ba06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	4798      	blx	r3
      break;
 800b97c:	e048      	b.n	800ba10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	785b      	ldrb	r3, [r3, #1]
 800b982:	2b09      	cmp	r3, #9
 800b984:	d839      	bhi.n	800b9fa <USBD_StdDevReq+0xb2>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <USBD_StdDevReq+0x44>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b9dd 	.word	0x0800b9dd
 800b990:	0800b9f1 	.word	0x0800b9f1
 800b994:	0800b9fb 	.word	0x0800b9fb
 800b998:	0800b9e7 	.word	0x0800b9e7
 800b99c:	0800b9fb 	.word	0x0800b9fb
 800b9a0:	0800b9bf 	.word	0x0800b9bf
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9fb 	.word	0x0800b9fb
 800b9ac:	0800b9d3 	.word	0x0800b9d3
 800b9b0:	0800b9c9 	.word	0x0800b9c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f9dc 	bl	800bd74 <USBD_GetDescriptor>
          break;
 800b9bc:	e022      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fb3f 	bl	800c044 <USBD_SetAddress>
          break;
 800b9c6:	e01d      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fb7e 	bl	800c0cc <USBD_SetConfig>
          break;
 800b9d0:	e018      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fc07 	bl	800c1e8 <USBD_GetConfig>
          break;
 800b9da:	e013      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fc37 	bl	800c252 <USBD_GetStatus>
          break;
 800b9e4:	e00e      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fc65 	bl	800c2b8 <USBD_SetFeature>
          break;
 800b9ee:	e009      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fc74 	bl	800c2e0 <USBD_ClrFeature>
          break;
 800b9f8:	e004      	b.n	800ba04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fcc9 	bl	800c394 <USBD_CtlError>
          break;
 800ba02:	bf00      	nop
      }
      break;
 800ba04:	e004      	b.n	800ba10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fcc3 	bl	800c394 <USBD_CtlError>
      break;
 800ba0e:	bf00      	nop
  }

  return ret;
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop

0800ba1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba32:	2b40      	cmp	r3, #64	@ 0x40
 800ba34:	d005      	beq.n	800ba42 <USBD_StdItfReq+0x26>
 800ba36:	2b40      	cmp	r3, #64	@ 0x40
 800ba38:	d82e      	bhi.n	800ba98 <USBD_StdItfReq+0x7c>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <USBD_StdItfReq+0x26>
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	d12a      	bne.n	800ba98 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d81d      	bhi.n	800ba8a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	889b      	ldrh	r3, [r3, #4]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d813      	bhi.n	800ba80 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	4798      	blx	r3
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d110      	bne.n	800ba94 <USBD_StdItfReq+0x78>
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10d      	bne.n	800ba94 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fd53 	bl	800c524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba7e:	e009      	b.n	800ba94 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fc86 	bl	800c394 <USBD_CtlError>
          break;
 800ba88:	e004      	b.n	800ba94 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fc81 	bl	800c394 <USBD_CtlError>
          break;
 800ba92:	e000      	b.n	800ba96 <USBD_StdItfReq+0x7a>
          break;
 800ba94:	bf00      	nop
      }
      break;
 800ba96:	e004      	b.n	800baa2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fc7a 	bl	800c394 <USBD_CtlError>
      break;
 800baa0:	bf00      	nop
  }

  return USBD_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	889b      	ldrh	r3, [r3, #4]
 800babe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bac8:	2b40      	cmp	r3, #64	@ 0x40
 800baca:	d007      	beq.n	800badc <USBD_StdEPReq+0x30>
 800bacc:	2b40      	cmp	r3, #64	@ 0x40
 800bace:	f200 8146 	bhi.w	800bd5e <USBD_StdEPReq+0x2b2>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <USBD_StdEPReq+0x40>
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	f040 8141 	bne.w	800bd5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	4798      	blx	r3
      break;
 800baea:	e13d      	b.n	800bd68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	d10a      	bne.n	800bb0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	4798      	blx	r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	e12d      	b.n	800bd6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d007      	beq.n	800bb26 <USBD_StdEPReq+0x7a>
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	f300 811b 	bgt.w	800bd52 <USBD_StdEPReq+0x2a6>
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d072      	beq.n	800bc06 <USBD_StdEPReq+0x15a>
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d03a      	beq.n	800bb9a <USBD_StdEPReq+0xee>
 800bb24:	e115      	b.n	800bd52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d002      	beq.n	800bb36 <USBD_StdEPReq+0x8a>
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d015      	beq.n	800bb60 <USBD_StdEPReq+0xb4>
 800bb34:	e02b      	b.n	800bb8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00c      	beq.n	800bb56 <USBD_StdEPReq+0xaa>
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	2b80      	cmp	r3, #128	@ 0x80
 800bb40:	d009      	beq.n	800bb56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f001 f88e 	bl	800cc68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb4c:	2180      	movs	r1, #128	@ 0x80
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f001 f88a 	bl	800cc68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb54:	e020      	b.n	800bb98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fc1b 	bl	800c394 <USBD_CtlError>
              break;
 800bb5e:	e01b      	b.n	800bb98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10e      	bne.n	800bb86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00b      	beq.n	800bb86 <USBD_StdEPReq+0xda>
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b80      	cmp	r3, #128	@ 0x80
 800bb72:	d008      	beq.n	800bb86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	88db      	ldrh	r3, [r3, #6]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f001 f871 	bl	800cc68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fccc 	bl	800c524 <USBD_CtlSendStatus>

              break;
 800bb8c:	e004      	b.n	800bb98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fbff 	bl	800c394 <USBD_CtlError>
              break;
 800bb96:	bf00      	nop
          }
          break;
 800bb98:	e0e0      	b.n	800bd5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d002      	beq.n	800bbaa <USBD_StdEPReq+0xfe>
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d015      	beq.n	800bbd4 <USBD_StdEPReq+0x128>
 800bba8:	e026      	b.n	800bbf8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00c      	beq.n	800bbca <USBD_StdEPReq+0x11e>
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2b80      	cmp	r3, #128	@ 0x80
 800bbb4:	d009      	beq.n	800bbca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 f854 	bl	800cc68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bbc0:	2180      	movs	r1, #128	@ 0x80
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 f850 	bl	800cc68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbc8:	e01c      	b.n	800bc04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fbe1 	bl	800c394 <USBD_CtlError>
              break;
 800bbd2:	e017      	b.n	800bc04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	885b      	ldrh	r3, [r3, #2]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d112      	bne.n	800bc02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d004      	beq.n	800bbf0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 f85b 	bl	800cca6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fc97 	bl	800c524 <USBD_CtlSendStatus>
              }
              break;
 800bbf6:	e004      	b.n	800bc02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fbca 	bl	800c394 <USBD_CtlError>
              break;
 800bc00:	e000      	b.n	800bc04 <USBD_StdEPReq+0x158>
              break;
 800bc02:	bf00      	nop
          }
          break;
 800bc04:	e0aa      	b.n	800bd5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d002      	beq.n	800bc16 <USBD_StdEPReq+0x16a>
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d032      	beq.n	800bc7a <USBD_StdEPReq+0x1ce>
 800bc14:	e097      	b.n	800bd46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d007      	beq.n	800bc2c <USBD_StdEPReq+0x180>
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b80      	cmp	r3, #128	@ 0x80
 800bc20:	d004      	beq.n	800bc2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fbb5 	bl	800c394 <USBD_CtlError>
                break;
 800bc2a:	e091      	b.n	800bd50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da0b      	bge.n	800bc4c <USBD_StdEPReq+0x1a0>
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	3310      	adds	r3, #16
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	4413      	add	r3, r2
 800bc48:	3304      	adds	r3, #4
 800bc4a:	e00b      	b.n	800bc64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	3304      	adds	r3, #4
 800bc64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fbf8 	bl	800c468 <USBD_CtlSendData>
              break;
 800bc78:	e06a      	b.n	800bd50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	da11      	bge.n	800bca6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	f003 020f 	and.w	r2, r3, #15
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	440b      	add	r3, r1
 800bc94:	3318      	adds	r3, #24
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d117      	bne.n	800bccc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fb78 	bl	800c394 <USBD_CtlError>
                  break;
 800bca4:	e054      	b.n	800bd50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	f003 020f 	and.w	r2, r3, #15
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d104      	bne.n	800bccc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fb65 	bl	800c394 <USBD_CtlError>
                  break;
 800bcca:	e041      	b.n	800bd50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da0b      	bge.n	800bcec <USBD_StdEPReq+0x240>
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
 800bcd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	3310      	adds	r3, #16
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	4413      	add	r3, r2
 800bce8:	3304      	adds	r3, #4
 800bcea:	e00b      	b.n	800bd04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcec:	7bbb      	ldrb	r3, [r7, #14]
 800bcee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	4413      	add	r3, r2
 800bd02:	3304      	adds	r3, #4
 800bd04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <USBD_StdEPReq+0x266>
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b80      	cmp	r3, #128	@ 0x80
 800bd10:	d103      	bne.n	800bd1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	e00e      	b.n	800bd38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 ffe0 	bl	800cce4 <USBD_LL_IsStallEP>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	e002      	b.n	800bd38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fb92 	bl	800c468 <USBD_CtlSendData>
              break;
 800bd44:	e004      	b.n	800bd50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fb23 	bl	800c394 <USBD_CtlError>
              break;
 800bd4e:	bf00      	nop
          }
          break;
 800bd50:	e004      	b.n	800bd5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fb1d 	bl	800c394 <USBD_CtlError>
          break;
 800bd5a:	bf00      	nop
      }
      break;
 800bd5c:	e004      	b.n	800bd68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fb17 	bl	800c394 <USBD_CtlError>
      break;
 800bd66:	bf00      	nop
  }

  return ret;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	885b      	ldrh	r3, [r3, #2]
 800bd8e:	0a1b      	lsrs	r3, r3, #8
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b06      	cmp	r3, #6
 800bd96:	f200 8128 	bhi.w	800bfea <USBD_GetDescriptor+0x276>
 800bd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bda0 <USBD_GetDescriptor+0x2c>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800bdbd 	.word	0x0800bdbd
 800bda4:	0800bdd5 	.word	0x0800bdd5
 800bda8:	0800be15 	.word	0x0800be15
 800bdac:	0800bfeb 	.word	0x0800bfeb
 800bdb0:	0800bfeb 	.word	0x0800bfeb
 800bdb4:	0800bf8b 	.word	0x0800bf8b
 800bdb8:	0800bfb7 	.word	0x0800bfb7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7c12      	ldrb	r2, [r2, #16]
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
      break;
 800bdd2:	e112      	b.n	800bffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7c1b      	ldrb	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10d      	bne.n	800bdf8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde4:	f107 0208 	add.w	r2, r7, #8
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdf6:	e100      	b.n	800bffa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be00:	f107 0208 	add.w	r2, r7, #8
 800be04:	4610      	mov	r0, r2
 800be06:	4798      	blx	r3
 800be08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3301      	adds	r3, #1
 800be0e:	2202      	movs	r2, #2
 800be10:	701a      	strb	r2, [r3, #0]
      break;
 800be12:	e0f2      	b.n	800bffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	885b      	ldrh	r3, [r3, #2]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	f200 80ac 	bhi.w	800bf78 <USBD_GetDescriptor+0x204>
 800be20:	a201      	add	r2, pc, #4	@ (adr r2, 800be28 <USBD_GetDescriptor+0xb4>)
 800be22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be26:	bf00      	nop
 800be28:	0800be41 	.word	0x0800be41
 800be2c:	0800be75 	.word	0x0800be75
 800be30:	0800bea9 	.word	0x0800bea9
 800be34:	0800bedd 	.word	0x0800bedd
 800be38:	0800bf11 	.word	0x0800bf11
 800be3c:	0800bf45 	.word	0x0800bf45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00b      	beq.n	800be64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	7c12      	ldrb	r2, [r2, #16]
 800be58:	f107 0108 	add.w	r1, r7, #8
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
 800be60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be62:	e091      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa94 	bl	800c394 <USBD_CtlError>
            err++;
 800be6c:	7afb      	ldrb	r3, [r7, #11]
 800be6e:	3301      	adds	r3, #1
 800be70:	72fb      	strb	r3, [r7, #11]
          break;
 800be72:	e089      	b.n	800bf88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	7c12      	ldrb	r2, [r2, #16]
 800be8c:	f107 0108 	add.w	r1, r7, #8
 800be90:	4610      	mov	r0, r2
 800be92:	4798      	blx	r3
 800be94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be96:	e077      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fa7a 	bl	800c394 <USBD_CtlError>
            err++;
 800bea0:	7afb      	ldrb	r3, [r7, #11]
 800bea2:	3301      	adds	r3, #1
 800bea4:	72fb      	strb	r3, [r7, #11]
          break;
 800bea6:	e06f      	b.n	800bf88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00b      	beq.n	800becc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	7c12      	ldrb	r2, [r2, #16]
 800bec0:	f107 0108 	add.w	r1, r7, #8
 800bec4:	4610      	mov	r0, r2
 800bec6:	4798      	blx	r3
 800bec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beca:	e05d      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fa60 	bl	800c394 <USBD_CtlError>
            err++;
 800bed4:	7afb      	ldrb	r3, [r7, #11]
 800bed6:	3301      	adds	r3, #1
 800bed8:	72fb      	strb	r3, [r7, #11]
          break;
 800beda:	e055      	b.n	800bf88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00b      	beq.n	800bf00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	7c12      	ldrb	r2, [r2, #16]
 800bef4:	f107 0108 	add.w	r1, r7, #8
 800bef8:	4610      	mov	r0, r2
 800befa:	4798      	blx	r3
 800befc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befe:	e043      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fa46 	bl	800c394 <USBD_CtlError>
            err++;
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0e:	e03b      	b.n	800bf88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	7c12      	ldrb	r2, [r2, #16]
 800bf28:	f107 0108 	add.w	r1, r7, #8
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4798      	blx	r3
 800bf30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf32:	e029      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fa2c 	bl	800c394 <USBD_CtlError>
            err++;
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	72fb      	strb	r3, [r7, #11]
          break;
 800bf42:	e021      	b.n	800bf88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00b      	beq.n	800bf68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	7c12      	ldrb	r2, [r2, #16]
 800bf5c:	f107 0108 	add.w	r1, r7, #8
 800bf60:	4610      	mov	r0, r2
 800bf62:	4798      	blx	r3
 800bf64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf66:	e00f      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fa12 	bl	800c394 <USBD_CtlError>
            err++;
 800bf70:	7afb      	ldrb	r3, [r7, #11]
 800bf72:	3301      	adds	r3, #1
 800bf74:	72fb      	strb	r3, [r7, #11]
          break;
 800bf76:	e007      	b.n	800bf88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa0a 	bl	800c394 <USBD_CtlError>
          err++;
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	3301      	adds	r3, #1
 800bf84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bf86:	e038      	b.n	800bffa <USBD_GetDescriptor+0x286>
 800bf88:	e037      	b.n	800bffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7c1b      	ldrb	r3, [r3, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d109      	bne.n	800bfa6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf9a:	f107 0208 	add.w	r2, r7, #8
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4798      	blx	r3
 800bfa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfa4:	e029      	b.n	800bffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f9f3 	bl	800c394 <USBD_CtlError>
        err++;
 800bfae:	7afb      	ldrb	r3, [r7, #11]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfb4:	e021      	b.n	800bffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	7c1b      	ldrb	r3, [r3, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10d      	bne.n	800bfda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc6:	f107 0208 	add.w	r2, r7, #8
 800bfca:	4610      	mov	r0, r2
 800bfcc:	4798      	blx	r3
 800bfce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	2207      	movs	r2, #7
 800bfd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfd8:	e00f      	b.n	800bffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f9d9 	bl	800c394 <USBD_CtlError>
        err++;
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	72fb      	strb	r3, [r7, #11]
      break;
 800bfe8:	e007      	b.n	800bffa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f9d1 	bl	800c394 <USBD_CtlError>
      err++;
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	3301      	adds	r3, #1
 800bff6:	72fb      	strb	r3, [r7, #11]
      break;
 800bff8:	bf00      	nop
  }

  if (err != 0U)
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11c      	bne.n	800c03a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c000:	893b      	ldrh	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d011      	beq.n	800c02a <USBD_GetDescriptor+0x2b6>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	88db      	ldrh	r3, [r3, #6]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00d      	beq.n	800c02a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88da      	ldrh	r2, [r3, #6]
 800c012:	893b      	ldrh	r3, [r7, #8]
 800c014:	4293      	cmp	r3, r2
 800c016:	bf28      	it	cs
 800c018:	4613      	movcs	r3, r2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c01e:	893b      	ldrh	r3, [r7, #8]
 800c020:	461a      	mov	r2, r3
 800c022:	68f9      	ldr	r1, [r7, #12]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fa1f 	bl	800c468 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	88db      	ldrh	r3, [r3, #6]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa76 	bl	800c524 <USBD_CtlSendStatus>
 800c038:	e000      	b.n	800c03c <USBD_GetDescriptor+0x2c8>
    return;
 800c03a:	bf00      	nop
    }
  }
}
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop

0800c044 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	889b      	ldrh	r3, [r3, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d130      	bne.n	800c0b8 <USBD_SetAddress+0x74>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	88db      	ldrh	r3, [r3, #6]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d12c      	bne.n	800c0b8 <USBD_SetAddress+0x74>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	885b      	ldrh	r3, [r3, #2]
 800c062:	2b7f      	cmp	r3, #127	@ 0x7f
 800c064:	d828      	bhi.n	800c0b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	885b      	ldrh	r3, [r3, #2]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c070:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d104      	bne.n	800c086 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f988 	bl	800c394 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c084:	e01d      	b.n	800c0c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7bfa      	ldrb	r2, [r7, #15]
 800c08a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fe52 	bl	800cd3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa43 	bl	800c524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ac:	e009      	b.n	800c0c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b6:	e004      	b.n	800c0c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f96a 	bl	800c394 <USBD_CtlError>
  }
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	4b41      	ldr	r3, [pc, #260]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c0de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0e0:	4b40      	ldr	r3, [pc, #256]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d904      	bls.n	800c0f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f952 	bl	800c394 <USBD_CtlError>
 800c0f0:	e075      	b.n	800c1de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d002      	beq.n	800c102 <USBD_SetConfig+0x36>
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d023      	beq.n	800c148 <USBD_SetConfig+0x7c>
 800c100:	e062      	b.n	800c1c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c102:	4b38      	ldr	r3, [pc, #224]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d01a      	beq.n	800c140 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c10a:	4b36      	ldr	r3, [pc, #216]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2203      	movs	r2, #3
 800c118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c11c:	4b31      	ldr	r3, [pc, #196]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff f9e7 	bl	800b4f6 <USBD_SetClassConfig>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d104      	bne.n	800c138 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f92f 	bl	800c394 <USBD_CtlError>
            return;
 800c136:	e052      	b.n	800c1de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f9f3 	bl	800c524 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c13e:	e04e      	b.n	800c1de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f9ef 	bl	800c524 <USBD_CtlSendStatus>
        break;
 800c146:	e04a      	b.n	800c1de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c148:	4b26      	ldr	r3, [pc, #152]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d112      	bne.n	800c176 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c158:	4b22      	ldr	r3, [pc, #136]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c162:	4b20      	ldr	r3, [pc, #128]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff f9e3 	bl	800b534 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f9d8 	bl	800c524 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c174:	e033      	b.n	800c1de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c176:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d01d      	beq.n	800c1c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff f9d1 	bl	800b534 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c192:	4b14      	ldr	r3, [pc, #80]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c19c:	4b11      	ldr	r3, [pc, #68]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff f9a7 	bl	800b4f6 <USBD_SetClassConfig>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d104      	bne.n	800c1b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f8ef 	bl	800c394 <USBD_CtlError>
            return;
 800c1b6:	e012      	b.n	800c1de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f9b3 	bl	800c524 <USBD_CtlSendStatus>
        break;
 800c1be:	e00e      	b.n	800c1de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f9af 	bl	800c524 <USBD_CtlSendStatus>
        break;
 800c1c6:	e00a      	b.n	800c1de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f8e2 	bl	800c394 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c1d0:	4b04      	ldr	r3, [pc, #16]	@ (800c1e4 <USBD_SetConfig+0x118>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff f9ac 	bl	800b534 <USBD_ClrClassConfig>
        break;
 800c1dc:	bf00      	nop
    }
  }
}
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	20000438 	.word	0x20000438

0800c1e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	88db      	ldrh	r3, [r3, #6]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d004      	beq.n	800c204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f8c9 	bl	800c394 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c202:	e022      	b.n	800c24a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	dc02      	bgt.n	800c214 <USBD_GetConfig+0x2c>
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dc03      	bgt.n	800c21a <USBD_GetConfig+0x32>
 800c212:	e015      	b.n	800c240 <USBD_GetConfig+0x58>
 800c214:	2b03      	cmp	r3, #3
 800c216:	d00b      	beq.n	800c230 <USBD_GetConfig+0x48>
 800c218:	e012      	b.n	800c240 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3308      	adds	r3, #8
 800c224:	2201      	movs	r2, #1
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f91d 	bl	800c468 <USBD_CtlSendData>
        break;
 800c22e:	e00c      	b.n	800c24a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3304      	adds	r3, #4
 800c234:	2201      	movs	r2, #1
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f915 	bl	800c468 <USBD_CtlSendData>
        break;
 800c23e:	e004      	b.n	800c24a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f8a6 	bl	800c394 <USBD_CtlError>
        break;
 800c248:	bf00      	nop
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c262:	3b01      	subs	r3, #1
 800c264:	2b02      	cmp	r3, #2
 800c266:	d81e      	bhi.n	800c2a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	88db      	ldrh	r3, [r3, #6]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d004      	beq.n	800c27a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f88e 	bl	800c394 <USBD_CtlError>
        break;
 800c278:	e01a      	b.n	800c2b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c286:	2b00      	cmp	r3, #0
 800c288:	d005      	beq.n	800c296 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	f043 0202 	orr.w	r2, r3, #2
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	330c      	adds	r3, #12
 800c29a:	2202      	movs	r2, #2
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f8e2 	bl	800c468 <USBD_CtlSendData>
      break;
 800c2a4:	e004      	b.n	800c2b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f873 	bl	800c394 <USBD_CtlError>
      break;
 800c2ae:	bf00      	nop
  }
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	885b      	ldrh	r3, [r3, #2]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d106      	bne.n	800c2d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f926 	bl	800c524 <USBD_CtlSendStatus>
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d80b      	bhi.n	800c30e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d10c      	bne.n	800c318 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f90c 	bl	800c524 <USBD_CtlSendStatus>
      }
      break;
 800c30c:	e004      	b.n	800c318 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f83f 	bl	800c394 <USBD_CtlError>
      break;
 800c316:	e000      	b.n	800c31a <USBD_ClrFeature+0x3a>
      break;
 800c318:	bf00      	nop
  }
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781a      	ldrb	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	785a      	ldrb	r2, [r3, #1]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	3302      	adds	r3, #2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	3303      	adds	r3, #3
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	021b      	lsls	r3, r3, #8
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	4413      	add	r3, r2
 800c350:	b29a      	uxth	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	3304      	adds	r3, #4
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	3305      	adds	r3, #5
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	021b      	lsls	r3, r3, #8
 800c366:	b29b      	uxth	r3, r3
 800c368:	4413      	add	r3, r2
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	3306      	adds	r3, #6
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	3307      	adds	r3, #7
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	021b      	lsls	r3, r3, #8
 800c380:	b29b      	uxth	r3, r3
 800c382:	4413      	add	r3, r2
 800c384:	b29a      	uxth	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	80da      	strh	r2, [r3, #6]

}
 800c38a:	bf00      	nop
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	bc80      	pop	{r7}
 800c392:	4770      	bx	lr

0800c394 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c39e:	2180      	movs	r1, #128	@ 0x80
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc61 	bl	800cc68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fc5d 	bl	800cc68 <USBD_LL_StallEP>
}
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b086      	sub	sp, #24
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	60f8      	str	r0, [r7, #12]
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d032      	beq.n	800c432 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 f834 	bl	800c43a <USBD_GetLen>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	75fa      	strb	r2, [r7, #23]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	75fa      	strb	r2, [r7, #23]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	2203      	movs	r2, #3
 800c400:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c402:	e012      	b.n	800c42a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	60fa      	str	r2, [r7, #12]
 800c40a:	7dfa      	ldrb	r2, [r7, #23]
 800c40c:	1c51      	adds	r1, r2, #1
 800c40e:	75f9      	strb	r1, [r7, #23]
 800c410:	4611      	mov	r1, r2
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	440a      	add	r2, r1
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	75fa      	strb	r2, [r7, #23]
 800c420:	461a      	mov	r2, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e8      	bne.n	800c404 <USBD_GetString+0x4e>
    }
  }
}
 800c432:	bf00      	nop
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c446:	e005      	b.n	800c454 <USBD_GetLen+0x1a>
  {
    len++;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	3301      	adds	r3, #1
 800c44c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3301      	adds	r3, #1
 800c452:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1f5      	bne.n	800c448 <USBD_GetLen+0xe>
  }

  return len;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr

0800c468 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	4613      	mov	r3, r2
 800c474:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2202      	movs	r2, #2
 800c47a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c47e:	88fa      	ldrh	r2, [r7, #6]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c484:	88fa      	ldrh	r2, [r7, #6]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	2100      	movs	r1, #0
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 fc72 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 fc60 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4da:	88fa      	ldrh	r2, [r7, #6]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c4e2:	88fa      	ldrh	r2, [r7, #6]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4ea:	88fb      	ldrh	r3, [r7, #6]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 fc65 	bl	800cdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	2100      	movs	r1, #0
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 fc53 	bl	800cdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2204      	movs	r2, #4
 800c530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c534:	2300      	movs	r3, #0
 800c536:	2200      	movs	r2, #0
 800c538:	2100      	movs	r1, #0
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fc1d 	bl	800cd7a <USBD_LL_Transmit>

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2205      	movs	r2, #5
 800c556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c55a:	2300      	movs	r3, #0
 800c55c:	2200      	movs	r2, #0
 800c55e:	2100      	movs	r1, #0
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fc2d 	bl	800cdc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c574:	2200      	movs	r2, #0
 800c576:	4912      	ldr	r1, [pc, #72]	@ (800c5c0 <MX_USB_DEVICE_Init+0x50>)
 800c578:	4812      	ldr	r0, [pc, #72]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c57a:	f7fe ff62 	bl	800b442 <USBD_Init>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c584:	f7f7 f998 	bl	80038b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c588:	490f      	ldr	r1, [pc, #60]	@ (800c5c8 <MX_USB_DEVICE_Init+0x58>)
 800c58a:	480e      	ldr	r0, [pc, #56]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c58c:	f7fe ff84 	bl	800b498 <USBD_RegisterClass>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c596:	f7f7 f98f 	bl	80038b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c59a:	490c      	ldr	r1, [pc, #48]	@ (800c5cc <MX_USB_DEVICE_Init+0x5c>)
 800c59c:	4809      	ldr	r0, [pc, #36]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c59e:	f7fe feb5 	bl	800b30c <USBD_CDC_RegisterInterface>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5a8:	f7f7 f986 	bl	80038b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5ac:	4805      	ldr	r0, [pc, #20]	@ (800c5c4 <MX_USB_DEVICE_Init+0x54>)
 800c5ae:	f7fe ff8c 	bl	800b4ca <USBD_Start>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5b8:	f7f7 f97e 	bl	80038b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5bc:	bf00      	nop
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20000154 	.word	0x20000154
 800c5c4:	2000043c 	.word	0x2000043c
 800c5c8:	20000040 	.word	0x20000040
 800c5cc:	20000144 	.word	0x20000144

0800c5d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4905      	ldr	r1, [pc, #20]	@ (800c5ec <CDC_Init_FS+0x1c>)
 800c5d8:	4805      	ldr	r0, [pc, #20]	@ (800c5f0 <CDC_Init_FS+0x20>)
 800c5da:	f7fe fead 	bl	800b338 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5de:	4905      	ldr	r1, [pc, #20]	@ (800c5f4 <CDC_Init_FS+0x24>)
 800c5e0:	4803      	ldr	r0, [pc, #12]	@ (800c5f0 <CDC_Init_FS+0x20>)
 800c5e2:	f7fe fec2 	bl	800b36a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20000ae8 	.word	0x20000ae8
 800c5f0:	2000043c 	.word	0x2000043c
 800c5f4:	20000700 	.word	0x20000700

0800c5f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	46bd      	mov	sp, r7
 800c602:	bc80      	pop	{r7}
 800c604:	4770      	bx	lr
	...

0800c608 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	6039      	str	r1, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
 800c614:	4613      	mov	r3, r2
 800c616:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	2b23      	cmp	r3, #35	@ 0x23
 800c61c:	d84a      	bhi.n	800c6b4 <CDC_Control_FS+0xac>
 800c61e:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <CDC_Control_FS+0x1c>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c6b5 	.word	0x0800c6b5
 800c628:	0800c6b5 	.word	0x0800c6b5
 800c62c:	0800c6b5 	.word	0x0800c6b5
 800c630:	0800c6b5 	.word	0x0800c6b5
 800c634:	0800c6b5 	.word	0x0800c6b5
 800c638:	0800c6b5 	.word	0x0800c6b5
 800c63c:	0800c6b5 	.word	0x0800c6b5
 800c640:	0800c6b5 	.word	0x0800c6b5
 800c644:	0800c6b5 	.word	0x0800c6b5
 800c648:	0800c6b5 	.word	0x0800c6b5
 800c64c:	0800c6b5 	.word	0x0800c6b5
 800c650:	0800c6b5 	.word	0x0800c6b5
 800c654:	0800c6b5 	.word	0x0800c6b5
 800c658:	0800c6b5 	.word	0x0800c6b5
 800c65c:	0800c6b5 	.word	0x0800c6b5
 800c660:	0800c6b5 	.word	0x0800c6b5
 800c664:	0800c6b5 	.word	0x0800c6b5
 800c668:	0800c6b5 	.word	0x0800c6b5
 800c66c:	0800c6b5 	.word	0x0800c6b5
 800c670:	0800c6b5 	.word	0x0800c6b5
 800c674:	0800c6b5 	.word	0x0800c6b5
 800c678:	0800c6b5 	.word	0x0800c6b5
 800c67c:	0800c6b5 	.word	0x0800c6b5
 800c680:	0800c6b5 	.word	0x0800c6b5
 800c684:	0800c6b5 	.word	0x0800c6b5
 800c688:	0800c6b5 	.word	0x0800c6b5
 800c68c:	0800c6b5 	.word	0x0800c6b5
 800c690:	0800c6b5 	.word	0x0800c6b5
 800c694:	0800c6b5 	.word	0x0800c6b5
 800c698:	0800c6b5 	.word	0x0800c6b5
 800c69c:	0800c6b5 	.word	0x0800c6b5
 800c6a0:	0800c6b5 	.word	0x0800c6b5
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6b5 	.word	0x0800c6b5
 800c6ac:	0800c6b5 	.word	0x0800c6b5
 800c6b0:	0800c6b5 	.word	0x0800c6b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6b4:	bf00      	nop
  }

  return (USBD_OK);
 800c6b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bc80      	pop	{r7}
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop

0800c6c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	480a      	ldr	r0, [pc, #40]	@ (800c6fc <CDC_Receive_FS+0x38>)
 800c6d2:	f7fe fe4a 	bl	800b36a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6d6:	4809      	ldr	r0, [pc, #36]	@ (800c6fc <CDC_Receive_FS+0x38>)
 800c6d8:	f7fe fe89 	bl	800b3ee <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d006      	beq.n	800c6f2 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4905      	ldr	r1, [pc, #20]	@ (800c700 <CDC_Receive_FS+0x3c>)
 800c6ec:	4805      	ldr	r0, [pc, #20]	@ (800c704 <CDC_Receive_FS+0x40>)
 800c6ee:	f000 fcf9 	bl	800d0e4 <memcpy>
  }
  return (USBD_OK);
 800c6f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	2000043c 	.word	0x2000043c
 800c700:	20000700 	.word	0x20000700
 800c704:	20000350 	.word	0x20000350

0800c708 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c714:	2300      	movs	r3, #0
 800c716:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c718:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <CDC_Transmit_FS+0x48>)
 800c71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c71e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e00b      	b.n	800c746 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c72e:	887b      	ldrh	r3, [r7, #2]
 800c730:	461a      	mov	r2, r3
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	4806      	ldr	r0, [pc, #24]	@ (800c750 <CDC_Transmit_FS+0x48>)
 800c736:	f7fe fdff 	bl	800b338 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c73a:	4805      	ldr	r0, [pc, #20]	@ (800c750 <CDC_Transmit_FS+0x48>)
 800c73c:	f7fe fe28 	bl	800b390 <USBD_CDC_TransmitPacket>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c744:	7bfb      	ldrb	r3, [r7, #15]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	2000043c 	.word	0x2000043c

0800c754 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2212      	movs	r2, #18
 800c764:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c766:	4b03      	ldr	r3, [pc, #12]	@ (800c774 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20000170 	.word	0x20000170

0800c778 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	6039      	str	r1, [r7, #0]
 800c782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	2204      	movs	r2, #4
 800c788:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c78a:	4b03      	ldr	r3, [pc, #12]	@ (800c798 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20000184 	.word	0x20000184

0800c79c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d105      	bne.n	800c7ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	4907      	ldr	r1, [pc, #28]	@ (800c7d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c7b2:	4808      	ldr	r0, [pc, #32]	@ (800c7d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7b4:	f7ff fdff 	bl	800c3b6 <USBD_GetString>
 800c7b8:	e004      	b.n	800c7c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	4904      	ldr	r1, [pc, #16]	@ (800c7d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c7be:	4805      	ldr	r0, [pc, #20]	@ (800c7d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7c0:	f7ff fdf9 	bl	800c3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000ed0 	.word	0x20000ed0
 800c7d4:	0800e2a0 	.word	0x0800e2a0

0800c7d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	6039      	str	r1, [r7, #0]
 800c7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	4904      	ldr	r1, [pc, #16]	@ (800c7f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7e8:	4804      	ldr	r0, [pc, #16]	@ (800c7fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7ea:	f7ff fde4 	bl	800c3b6 <USBD_GetString>
  return USBD_StrDesc;
 800c7ee:	4b02      	ldr	r3, [pc, #8]	@ (800c7f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000ed0 	.word	0x20000ed0
 800c7fc:	0800e2b8 	.word	0x0800e2b8

0800c800 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	4603      	mov	r3, r0
 800c808:	6039      	str	r1, [r7, #0]
 800c80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	221a      	movs	r2, #26
 800c810:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c812:	f000 f843 	bl	800c89c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c816:	4b02      	ldr	r3, [pc, #8]	@ (800c820 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20000188 	.word	0x20000188

0800c824 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	4603      	mov	r3, r0
 800c82c:	6039      	str	r1, [r7, #0]
 800c82e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c830:	79fb      	ldrb	r3, [r7, #7]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d105      	bne.n	800c842 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	4907      	ldr	r1, [pc, #28]	@ (800c858 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c83a:	4808      	ldr	r0, [pc, #32]	@ (800c85c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c83c:	f7ff fdbb 	bl	800c3b6 <USBD_GetString>
 800c840:	e004      	b.n	800c84c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	4904      	ldr	r1, [pc, #16]	@ (800c858 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c846:	4805      	ldr	r0, [pc, #20]	@ (800c85c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c848:	f7ff fdb5 	bl	800c3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c84c:	4b02      	ldr	r3, [pc, #8]	@ (800c858 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20000ed0 	.word	0x20000ed0
 800c85c:	0800e2cc 	.word	0x0800e2cc

0800c860 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	4603      	mov	r3, r0
 800c868:	6039      	str	r1, [r7, #0]
 800c86a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d105      	bne.n	800c87e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	4907      	ldr	r1, [pc, #28]	@ (800c894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c876:	4808      	ldr	r0, [pc, #32]	@ (800c898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c878:	f7ff fd9d 	bl	800c3b6 <USBD_GetString>
 800c87c:	e004      	b.n	800c888 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	4904      	ldr	r1, [pc, #16]	@ (800c894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c882:	4805      	ldr	r0, [pc, #20]	@ (800c898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c884:	f7ff fd97 	bl	800c3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c888:	4b02      	ldr	r3, [pc, #8]	@ (800c894 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	20000ed0 	.word	0x20000ed0
 800c898:	0800e2d8 	.word	0x0800e2d8

0800c89c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e0 <Get_SerialNum+0x44>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e4 <Get_SerialNum+0x48>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e8 <Get_SerialNum+0x4c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d009      	beq.n	800c8d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8c2:	2208      	movs	r2, #8
 800c8c4:	4909      	ldr	r1, [pc, #36]	@ (800c8ec <Get_SerialNum+0x50>)
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f000 f814 	bl	800c8f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8cc:	2204      	movs	r2, #4
 800c8ce:	4908      	ldr	r1, [pc, #32]	@ (800c8f0 <Get_SerialNum+0x54>)
 800c8d0:	68b8      	ldr	r0, [r7, #8]
 800c8d2:	f000 f80f 	bl	800c8f4 <IntToUnicode>
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	1ffff7e8 	.word	0x1ffff7e8
 800c8e4:	1ffff7ec 	.word	0x1ffff7ec
 800c8e8:	1ffff7f0 	.word	0x1ffff7f0
 800c8ec:	2000018a 	.word	0x2000018a
 800c8f0:	2000019a 	.word	0x2000019a

0800c8f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	4613      	mov	r3, r2
 800c900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c906:	2300      	movs	r3, #0
 800c908:	75fb      	strb	r3, [r7, #23]
 800c90a:	e027      	b.n	800c95c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	0f1b      	lsrs	r3, r3, #28
 800c910:	2b09      	cmp	r3, #9
 800c912:	d80b      	bhi.n	800c92c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	0f1b      	lsrs	r3, r3, #28
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	4619      	mov	r1, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	440b      	add	r3, r1
 800c924:	3230      	adds	r2, #48	@ 0x30
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
 800c92a:	e00a      	b.n	800c942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	0f1b      	lsrs	r3, r3, #28
 800c930:	b2da      	uxtb	r2, r3
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	4619      	mov	r1, r3
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	440b      	add	r3, r1
 800c93c:	3237      	adds	r2, #55	@ 0x37
 800c93e:	b2d2      	uxtb	r2, r2
 800c940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	3301      	adds	r3, #1
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	3301      	adds	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
 800c95c:	7dfa      	ldrb	r2, [r7, #23]
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	429a      	cmp	r2, r3
 800c962:	d3d3      	bcc.n	800c90c <IntToUnicode+0x18>
  }
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bc80      	pop	{r7}
 800c96e:	4770      	bx	lr

0800c970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a0d      	ldr	r2, [pc, #52]	@ (800c9b4 <HAL_PCD_MspInit+0x44>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d113      	bne.n	800c9aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <HAL_PCD_MspInit+0x48>)
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	4a0c      	ldr	r2, [pc, #48]	@ (800c9b8 <HAL_PCD_MspInit+0x48>)
 800c988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c98c:	61d3      	str	r3, [r2, #28]
 800c98e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b8 <HAL_PCD_MspInit+0x48>)
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c99a:	2200      	movs	r2, #0
 800c99c:	2100      	movs	r1, #0
 800c99e:	2014      	movs	r0, #20
 800c9a0:	f7f7 fd6f 	bl	8004482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c9a4:	2014      	movs	r0, #20
 800c9a6:	f7f7 fd88 	bl	80044ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	40005c00 	.word	0x40005c00
 800c9b8:	40021000 	.word	0x40021000

0800c9bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	f7fe fdc1 	bl	800b55a <USBD_LL_SetupStage>
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c9f2:	78fa      	ldrb	r2, [r7, #3]
 800c9f4:	6879      	ldr	r1, [r7, #4]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4413      	add	r3, r2
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	440b      	add	r3, r1
 800ca00:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	f7fe fdf3 	bl	800b5f4 <USBD_LL_DataOutStage>
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ca28:	78fa      	ldrb	r2, [r7, #3]
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	440b      	add	r3, r1
 800ca36:	333c      	adds	r3, #60	@ 0x3c
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f7fe fe4a 	bl	800b6d6 <USBD_LL_DataInStage>
}
 800ca42:	bf00      	nop
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b082      	sub	sp, #8
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe ff5a 	bl	800b912 <USBD_LL_SOF>
}
 800ca5e:	bf00      	nop
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d001      	beq.n	800ca7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca7a:	f7f6 ff1d 	bl	80038b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ca84:	7bfa      	ldrb	r2, [r7, #15]
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe ff0a 	bl	800b8a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fec3 	bl	800b820 <USBD_LL_Reset>
}
 800ca9a:	bf00      	nop
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe ff04 	bl	800b8c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d005      	beq.n	800cacc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cac0:	4b04      	ldr	r3, [pc, #16]	@ (800cad4 <HAL_PCD_SuspendCallback+0x30>)
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	4a03      	ldr	r2, [pc, #12]	@ (800cad4 <HAL_PCD_SuspendCallback+0x30>)
 800cac6:	f043 0306 	orr.w	r3, r3, #6
 800caca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	e000ed00 	.word	0xe000ed00

0800cad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fefe 	bl	800b8e8 <USBD_LL_Resume>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cafc:	4a28      	ldr	r2, [pc, #160]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a26      	ldr	r2, [pc, #152]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb08:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cb0c:	4b24      	ldr	r3, [pc, #144]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb0e:	4a25      	ldr	r2, [pc, #148]	@ (800cba4 <USBD_LL_Init+0xb0>)
 800cb10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb12:	4b23      	ldr	r3, [pc, #140]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb14:	2208      	movs	r2, #8
 800cb16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb18:	4b21      	ldr	r3, [pc, #132]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb1e:	4b20      	ldr	r3, [pc, #128]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb24:	4b1e      	ldr	r3, [pc, #120]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb30:	481b      	ldr	r0, [pc, #108]	@ (800cba0 <USBD_LL_Init+0xac>)
 800cb32:	f7f8 fcfd 	bl	8005530 <HAL_PCD_Init>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cb3c:	f7f6 febc 	bl	80038b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb46:	2318      	movs	r3, #24
 800cb48:	2200      	movs	r2, #0
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f7fa f83c 	bl	8006bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb56:	2358      	movs	r3, #88	@ 0x58
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2180      	movs	r1, #128	@ 0x80
 800cb5c:	f7fa f834 	bl	8006bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb66:	23c0      	movs	r3, #192	@ 0xc0
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2181      	movs	r1, #129	@ 0x81
 800cb6c:	f7fa f82c 	bl	8006bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb76:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	f7fa f823 	bl	8006bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2182      	movs	r1, #130	@ 0x82
 800cb90:	f7fa f81a 	bl	8006bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	200010d0 	.word	0x200010d0
 800cba4:	40005c00 	.word	0x40005c00

0800cba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f8 fdc1 	bl	8005746 <HAL_PCD_Start>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f94e 	bl	800ce6c <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	461a      	mov	r2, r3
 800cbec:	4603      	mov	r3, r0
 800cbee:	70fb      	strb	r3, [r7, #3]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70bb      	strb	r3, [r7, #2]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc06:	78bb      	ldrb	r3, [r7, #2]
 800cc08:	883a      	ldrh	r2, [r7, #0]
 800cc0a:	78f9      	ldrb	r1, [r7, #3]
 800cc0c:	f7f8 ff39 	bl	8005a82 <HAL_PCD_EP_Open>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f928 	bl	800ce6c <USBD_Get_USB_Status>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	4611      	mov	r1, r2
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f8 ff80 	bl	8005b4e <HAL_PCD_EP_Close>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f909 	bl	800ce6c <USBD_Get_USB_Status>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f9 f840 	bl	8005d0c <HAL_PCD_EP_SetStall>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 f8ea 	bl	800ce6c <USBD_Get_USB_Status>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccc0:	78fa      	ldrb	r2, [r7, #3]
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7f9 f881 	bl	8005dcc <HAL_PCD_EP_ClrStall>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 f8cb 	bl	800ce6c <USBD_Get_USB_Status>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da0c      	bge.n	800cd1a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	440b      	add	r3, r1
 800cd14:	3302      	adds	r3, #2
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	e00b      	b.n	800cd32 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd20:	68f9      	ldr	r1, [r7, #12]
 800cd22:	4613      	mov	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	440b      	add	r3, r1
 800cd2c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800cd30:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bc80      	pop	{r7}
 800cd3a:	4770      	bx	lr

0800cd3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd56:	78fa      	ldrb	r2, [r7, #3]
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f8 fe6c 	bl	8005a38 <HAL_PCD_SetAddress>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f880 	bl	800ce6c <USBD_Get_USB_Status>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b086      	sub	sp, #24
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	461a      	mov	r2, r3
 800cd86:	460b      	mov	r3, r1
 800cd88:	72fb      	strb	r3, [r7, #11]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cd9c:	893b      	ldrh	r3, [r7, #8]
 800cd9e:	7af9      	ldrb	r1, [r7, #11]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	f7f8 ff70 	bl	8005c86 <HAL_PCD_EP_Transmit>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 f85d 	bl	800ce6c <USBD_Get_USB_Status>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	607a      	str	r2, [r7, #4]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	460b      	mov	r3, r1
 800cdce:	72fb      	strb	r3, [r7, #11]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cde2:	893b      	ldrh	r3, [r7, #8]
 800cde4:	7af9      	ldrb	r1, [r7, #11]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	f7f8 fef9 	bl	8005bde <HAL_PCD_EP_Receive>
 800cdec:	4603      	mov	r3, r0
 800cdee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 f83a 	bl	800ce6c <USBD_Get_USB_Status>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	460b      	mov	r3, r1
 800ce10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce18:	78fa      	ldrb	r2, [r7, #3]
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7f8 ff1b 	bl	8005c58 <HAL_PCD_EP_GetRxCount>
 800ce22:	4603      	mov	r3, r0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce34:	4b02      	ldr	r3, [pc, #8]	@ (800ce40 <USBD_static_malloc+0x14>)
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bc80      	pop	{r7}
 800ce3e:	4770      	bx	lr
 800ce40:	200013bc 	.word	0x200013bc

0800ce44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]

}
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bc80      	pop	{r7}
 800ce54:	4770      	bx	lr

0800ce56 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bc80      	pop	{r7}
 800ce6a:	4770      	bx	lr

0800ce6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce7a:	79fb      	ldrb	r3, [r7, #7]
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d817      	bhi.n	800ceb0 <USBD_Get_USB_Status+0x44>
 800ce80:	a201      	add	r2, pc, #4	@ (adr r2, 800ce88 <USBD_Get_USB_Status+0x1c>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800ce99 	.word	0x0800ce99
 800ce8c:	0800ce9f 	.word	0x0800ce9f
 800ce90:	0800cea5 	.word	0x0800cea5
 800ce94:	0800ceab 	.word	0x0800ceab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9c:	e00b      	b.n	800ceb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce9e:	2302      	movs	r3, #2
 800cea0:	73fb      	strb	r3, [r7, #15]
    break;
 800cea2:	e008      	b.n	800ceb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cea4:	2301      	movs	r3, #1
 800cea6:	73fb      	strb	r3, [r7, #15]
    break;
 800cea8:	e005      	b.n	800ceb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	73fb      	strb	r3, [r7, #15]
    break;
 800ceae:	e002      	b.n	800ceb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb4:	bf00      	nop
  }
  return usb_status;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bc80      	pop	{r7}
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop

0800cec4 <atoi>:
 800cec4:	220a      	movs	r2, #10
 800cec6:	2100      	movs	r1, #0
 800cec8:	f000 b87a 	b.w	800cfc0 <strtol>

0800cecc <_strtol_l.constprop.0>:
 800cecc:	2b24      	cmp	r3, #36	@ 0x24
 800cece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced2:	4686      	mov	lr, r0
 800ced4:	4690      	mov	r8, r2
 800ced6:	d801      	bhi.n	800cedc <_strtol_l.constprop.0+0x10>
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d106      	bne.n	800ceea <_strtol_l.constprop.0+0x1e>
 800cedc:	f000 f8d6 	bl	800d08c <__errno>
 800cee0:	2316      	movs	r3, #22
 800cee2:	6003      	str	r3, [r0, #0]
 800cee4:	2000      	movs	r0, #0
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	460d      	mov	r5, r1
 800ceec:	4833      	ldr	r0, [pc, #204]	@ (800cfbc <_strtol_l.constprop.0+0xf0>)
 800ceee:	462a      	mov	r2, r5
 800cef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cef4:	5d06      	ldrb	r6, [r0, r4]
 800cef6:	f016 0608 	ands.w	r6, r6, #8
 800cefa:	d1f8      	bne.n	800ceee <_strtol_l.constprop.0+0x22>
 800cefc:	2c2d      	cmp	r4, #45	@ 0x2d
 800cefe:	d12d      	bne.n	800cf5c <_strtol_l.constprop.0+0x90>
 800cf00:	2601      	movs	r6, #1
 800cf02:	782c      	ldrb	r4, [r5, #0]
 800cf04:	1c95      	adds	r5, r2, #2
 800cf06:	f033 0210 	bics.w	r2, r3, #16
 800cf0a:	d109      	bne.n	800cf20 <_strtol_l.constprop.0+0x54>
 800cf0c:	2c30      	cmp	r4, #48	@ 0x30
 800cf0e:	d12a      	bne.n	800cf66 <_strtol_l.constprop.0+0x9a>
 800cf10:	782a      	ldrb	r2, [r5, #0]
 800cf12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf16:	2a58      	cmp	r2, #88	@ 0x58
 800cf18:	d125      	bne.n	800cf66 <_strtol_l.constprop.0+0x9a>
 800cf1a:	2310      	movs	r3, #16
 800cf1c:	786c      	ldrb	r4, [r5, #1]
 800cf1e:	3502      	adds	r5, #2
 800cf20:	2200      	movs	r2, #0
 800cf22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cf26:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf2a:	fbbc f9f3 	udiv	r9, ip, r3
 800cf2e:	4610      	mov	r0, r2
 800cf30:	fb03 ca19 	mls	sl, r3, r9, ip
 800cf34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf38:	2f09      	cmp	r7, #9
 800cf3a:	d81b      	bhi.n	800cf74 <_strtol_l.constprop.0+0xa8>
 800cf3c:	463c      	mov	r4, r7
 800cf3e:	42a3      	cmp	r3, r4
 800cf40:	dd27      	ble.n	800cf92 <_strtol_l.constprop.0+0xc6>
 800cf42:	1c57      	adds	r7, r2, #1
 800cf44:	d007      	beq.n	800cf56 <_strtol_l.constprop.0+0x8a>
 800cf46:	4581      	cmp	r9, r0
 800cf48:	d320      	bcc.n	800cf8c <_strtol_l.constprop.0+0xc0>
 800cf4a:	d101      	bne.n	800cf50 <_strtol_l.constprop.0+0x84>
 800cf4c:	45a2      	cmp	sl, r4
 800cf4e:	db1d      	blt.n	800cf8c <_strtol_l.constprop.0+0xc0>
 800cf50:	2201      	movs	r2, #1
 800cf52:	fb00 4003 	mla	r0, r0, r3, r4
 800cf56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf5a:	e7eb      	b.n	800cf34 <_strtol_l.constprop.0+0x68>
 800cf5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf5e:	bf04      	itt	eq
 800cf60:	782c      	ldrbeq	r4, [r5, #0]
 800cf62:	1c95      	addeq	r5, r2, #2
 800cf64:	e7cf      	b.n	800cf06 <_strtol_l.constprop.0+0x3a>
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d1da      	bne.n	800cf20 <_strtol_l.constprop.0+0x54>
 800cf6a:	2c30      	cmp	r4, #48	@ 0x30
 800cf6c:	bf0c      	ite	eq
 800cf6e:	2308      	moveq	r3, #8
 800cf70:	230a      	movne	r3, #10
 800cf72:	e7d5      	b.n	800cf20 <_strtol_l.constprop.0+0x54>
 800cf74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf78:	2f19      	cmp	r7, #25
 800cf7a:	d801      	bhi.n	800cf80 <_strtol_l.constprop.0+0xb4>
 800cf7c:	3c37      	subs	r4, #55	@ 0x37
 800cf7e:	e7de      	b.n	800cf3e <_strtol_l.constprop.0+0x72>
 800cf80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf84:	2f19      	cmp	r7, #25
 800cf86:	d804      	bhi.n	800cf92 <_strtol_l.constprop.0+0xc6>
 800cf88:	3c57      	subs	r4, #87	@ 0x57
 800cf8a:	e7d8      	b.n	800cf3e <_strtol_l.constprop.0+0x72>
 800cf8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf90:	e7e1      	b.n	800cf56 <_strtol_l.constprop.0+0x8a>
 800cf92:	1c53      	adds	r3, r2, #1
 800cf94:	d108      	bne.n	800cfa8 <_strtol_l.constprop.0+0xdc>
 800cf96:	2322      	movs	r3, #34	@ 0x22
 800cf98:	4660      	mov	r0, ip
 800cf9a:	f8ce 3000 	str.w	r3, [lr]
 800cf9e:	f1b8 0f00 	cmp.w	r8, #0
 800cfa2:	d0a0      	beq.n	800cee6 <_strtol_l.constprop.0+0x1a>
 800cfa4:	1e69      	subs	r1, r5, #1
 800cfa6:	e006      	b.n	800cfb6 <_strtol_l.constprop.0+0xea>
 800cfa8:	b106      	cbz	r6, 800cfac <_strtol_l.constprop.0+0xe0>
 800cfaa:	4240      	negs	r0, r0
 800cfac:	f1b8 0f00 	cmp.w	r8, #0
 800cfb0:	d099      	beq.n	800cee6 <_strtol_l.constprop.0+0x1a>
 800cfb2:	2a00      	cmp	r2, #0
 800cfb4:	d1f6      	bne.n	800cfa4 <_strtol_l.constprop.0+0xd8>
 800cfb6:	f8c8 1000 	str.w	r1, [r8]
 800cfba:	e794      	b.n	800cee6 <_strtol_l.constprop.0+0x1a>
 800cfbc:	0800e311 	.word	0x0800e311

0800cfc0 <strtol>:
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	460a      	mov	r2, r1
 800cfc4:	4601      	mov	r1, r0
 800cfc6:	4802      	ldr	r0, [pc, #8]	@ (800cfd0 <strtol+0x10>)
 800cfc8:	6800      	ldr	r0, [r0, #0]
 800cfca:	f7ff bf7f 	b.w	800cecc <_strtol_l.constprop.0>
 800cfce:	bf00      	nop
 800cfd0:	200001a4 	.word	0x200001a4

0800cfd4 <sniprintf>:
 800cfd4:	b40c      	push	{r2, r3}
 800cfd6:	b530      	push	{r4, r5, lr}
 800cfd8:	4b17      	ldr	r3, [pc, #92]	@ (800d038 <sniprintf+0x64>)
 800cfda:	1e0c      	subs	r4, r1, #0
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	b09d      	sub	sp, #116	@ 0x74
 800cfe0:	da08      	bge.n	800cff4 <sniprintf+0x20>
 800cfe2:	238b      	movs	r3, #139	@ 0x8b
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	b01d      	add	sp, #116	@ 0x74
 800cfec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cff0:	b002      	add	sp, #8
 800cff2:	4770      	bx	lr
 800cff4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cff8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cffc:	bf0c      	ite	eq
 800cffe:	4623      	moveq	r3, r4
 800d000:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	9307      	str	r3, [sp, #28]
 800d008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d00c:	9002      	str	r0, [sp, #8]
 800d00e:	9006      	str	r0, [sp, #24]
 800d010:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d014:	4628      	mov	r0, r5
 800d016:	ab21      	add	r3, sp, #132	@ 0x84
 800d018:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d01a:	a902      	add	r1, sp, #8
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	f000 f9c1 	bl	800d3a4 <_svfiprintf_r>
 800d022:	1c43      	adds	r3, r0, #1
 800d024:	bfbc      	itt	lt
 800d026:	238b      	movlt	r3, #139	@ 0x8b
 800d028:	602b      	strlt	r3, [r5, #0]
 800d02a:	2c00      	cmp	r4, #0
 800d02c:	d0dd      	beq.n	800cfea <sniprintf+0x16>
 800d02e:	2200      	movs	r2, #0
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	701a      	strb	r2, [r3, #0]
 800d034:	e7d9      	b.n	800cfea <sniprintf+0x16>
 800d036:	bf00      	nop
 800d038:	200001a4 	.word	0x200001a4

0800d03c <siprintf>:
 800d03c:	b40e      	push	{r1, r2, r3}
 800d03e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d042:	b500      	push	{lr}
 800d044:	b09c      	sub	sp, #112	@ 0x70
 800d046:	ab1d      	add	r3, sp, #116	@ 0x74
 800d048:	9002      	str	r0, [sp, #8]
 800d04a:	9006      	str	r0, [sp, #24]
 800d04c:	9107      	str	r1, [sp, #28]
 800d04e:	9104      	str	r1, [sp, #16]
 800d050:	4808      	ldr	r0, [pc, #32]	@ (800d074 <siprintf+0x38>)
 800d052:	4909      	ldr	r1, [pc, #36]	@ (800d078 <siprintf+0x3c>)
 800d054:	f853 2b04 	ldr.w	r2, [r3], #4
 800d058:	9105      	str	r1, [sp, #20]
 800d05a:	6800      	ldr	r0, [r0, #0]
 800d05c:	a902      	add	r1, sp, #8
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	f000 f9a0 	bl	800d3a4 <_svfiprintf_r>
 800d064:	2200      	movs	r2, #0
 800d066:	9b02      	ldr	r3, [sp, #8]
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	b01c      	add	sp, #112	@ 0x70
 800d06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d070:	b003      	add	sp, #12
 800d072:	4770      	bx	lr
 800d074:	200001a4 	.word	0x200001a4
 800d078:	ffff0208 	.word	0xffff0208

0800d07c <memset>:
 800d07c:	4603      	mov	r3, r0
 800d07e:	4402      	add	r2, r0
 800d080:	4293      	cmp	r3, r2
 800d082:	d100      	bne.n	800d086 <memset+0xa>
 800d084:	4770      	bx	lr
 800d086:	f803 1b01 	strb.w	r1, [r3], #1
 800d08a:	e7f9      	b.n	800d080 <memset+0x4>

0800d08c <__errno>:
 800d08c:	4b01      	ldr	r3, [pc, #4]	@ (800d094 <__errno+0x8>)
 800d08e:	6818      	ldr	r0, [r3, #0]
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	200001a4 	.word	0x200001a4

0800d098 <__libc_init_array>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	2600      	movs	r6, #0
 800d09c:	4d0c      	ldr	r5, [pc, #48]	@ (800d0d0 <__libc_init_array+0x38>)
 800d09e:	4c0d      	ldr	r4, [pc, #52]	@ (800d0d4 <__libc_init_array+0x3c>)
 800d0a0:	1b64      	subs	r4, r4, r5
 800d0a2:	10a4      	asrs	r4, r4, #2
 800d0a4:	42a6      	cmp	r6, r4
 800d0a6:	d109      	bne.n	800d0bc <__libc_init_array+0x24>
 800d0a8:	f000 fc78 	bl	800d99c <_init>
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	4d0a      	ldr	r5, [pc, #40]	@ (800d0d8 <__libc_init_array+0x40>)
 800d0b0:	4c0a      	ldr	r4, [pc, #40]	@ (800d0dc <__libc_init_array+0x44>)
 800d0b2:	1b64      	subs	r4, r4, r5
 800d0b4:	10a4      	asrs	r4, r4, #2
 800d0b6:	42a6      	cmp	r6, r4
 800d0b8:	d105      	bne.n	800d0c6 <__libc_init_array+0x2e>
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c0:	4798      	blx	r3
 800d0c2:	3601      	adds	r6, #1
 800d0c4:	e7ee      	b.n	800d0a4 <__libc_init_array+0xc>
 800d0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ca:	4798      	blx	r3
 800d0cc:	3601      	adds	r6, #1
 800d0ce:	e7f2      	b.n	800d0b6 <__libc_init_array+0x1e>
 800d0d0:	0800e44c 	.word	0x0800e44c
 800d0d4:	0800e44c 	.word	0x0800e44c
 800d0d8:	0800e44c 	.word	0x0800e44c
 800d0dc:	0800e450 	.word	0x0800e450

0800d0e0 <__retarget_lock_acquire_recursive>:
 800d0e0:	4770      	bx	lr

0800d0e2 <__retarget_lock_release_recursive>:
 800d0e2:	4770      	bx	lr

0800d0e4 <memcpy>:
 800d0e4:	440a      	add	r2, r1
 800d0e6:	4291      	cmp	r1, r2
 800d0e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0ec:	d100      	bne.n	800d0f0 <memcpy+0xc>
 800d0ee:	4770      	bx	lr
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0fc:	d1f9      	bne.n	800d0f2 <memcpy+0xe>
 800d0fe:	bd10      	pop	{r4, pc}

0800d100 <_free_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4605      	mov	r5, r0
 800d104:	2900      	cmp	r1, #0
 800d106:	d040      	beq.n	800d18a <_free_r+0x8a>
 800d108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d10c:	1f0c      	subs	r4, r1, #4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfb8      	it	lt
 800d112:	18e4      	addlt	r4, r4, r3
 800d114:	f000 f8de 	bl	800d2d4 <__malloc_lock>
 800d118:	4a1c      	ldr	r2, [pc, #112]	@ (800d18c <_free_r+0x8c>)
 800d11a:	6813      	ldr	r3, [r2, #0]
 800d11c:	b933      	cbnz	r3, 800d12c <_free_r+0x2c>
 800d11e:	6063      	str	r3, [r4, #4]
 800d120:	6014      	str	r4, [r2, #0]
 800d122:	4628      	mov	r0, r5
 800d124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d128:	f000 b8da 	b.w	800d2e0 <__malloc_unlock>
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	d908      	bls.n	800d142 <_free_r+0x42>
 800d130:	6820      	ldr	r0, [r4, #0]
 800d132:	1821      	adds	r1, r4, r0
 800d134:	428b      	cmp	r3, r1
 800d136:	bf01      	itttt	eq
 800d138:	6819      	ldreq	r1, [r3, #0]
 800d13a:	685b      	ldreq	r3, [r3, #4]
 800d13c:	1809      	addeq	r1, r1, r0
 800d13e:	6021      	streq	r1, [r4, #0]
 800d140:	e7ed      	b.n	800d11e <_free_r+0x1e>
 800d142:	461a      	mov	r2, r3
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	b10b      	cbz	r3, 800d14c <_free_r+0x4c>
 800d148:	42a3      	cmp	r3, r4
 800d14a:	d9fa      	bls.n	800d142 <_free_r+0x42>
 800d14c:	6811      	ldr	r1, [r2, #0]
 800d14e:	1850      	adds	r0, r2, r1
 800d150:	42a0      	cmp	r0, r4
 800d152:	d10b      	bne.n	800d16c <_free_r+0x6c>
 800d154:	6820      	ldr	r0, [r4, #0]
 800d156:	4401      	add	r1, r0
 800d158:	1850      	adds	r0, r2, r1
 800d15a:	4283      	cmp	r3, r0
 800d15c:	6011      	str	r1, [r2, #0]
 800d15e:	d1e0      	bne.n	800d122 <_free_r+0x22>
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4408      	add	r0, r1
 800d166:	6010      	str	r0, [r2, #0]
 800d168:	6053      	str	r3, [r2, #4]
 800d16a:	e7da      	b.n	800d122 <_free_r+0x22>
 800d16c:	d902      	bls.n	800d174 <_free_r+0x74>
 800d16e:	230c      	movs	r3, #12
 800d170:	602b      	str	r3, [r5, #0]
 800d172:	e7d6      	b.n	800d122 <_free_r+0x22>
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	1821      	adds	r1, r4, r0
 800d178:	428b      	cmp	r3, r1
 800d17a:	bf01      	itttt	eq
 800d17c:	6819      	ldreq	r1, [r3, #0]
 800d17e:	685b      	ldreq	r3, [r3, #4]
 800d180:	1809      	addeq	r1, r1, r0
 800d182:	6021      	streq	r1, [r4, #0]
 800d184:	6063      	str	r3, [r4, #4]
 800d186:	6054      	str	r4, [r2, #4]
 800d188:	e7cb      	b.n	800d122 <_free_r+0x22>
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	20001720 	.word	0x20001720

0800d190 <sbrk_aligned>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4e0f      	ldr	r6, [pc, #60]	@ (800d1d0 <sbrk_aligned+0x40>)
 800d194:	460c      	mov	r4, r1
 800d196:	6831      	ldr	r1, [r6, #0]
 800d198:	4605      	mov	r5, r0
 800d19a:	b911      	cbnz	r1, 800d1a2 <sbrk_aligned+0x12>
 800d19c:	f000 fbaa 	bl	800d8f4 <_sbrk_r>
 800d1a0:	6030      	str	r0, [r6, #0]
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f000 fba5 	bl	800d8f4 <_sbrk_r>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	d103      	bne.n	800d1b6 <sbrk_aligned+0x26>
 800d1ae:	f04f 34ff 	mov.w	r4, #4294967295
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	1cc4      	adds	r4, r0, #3
 800d1b8:	f024 0403 	bic.w	r4, r4, #3
 800d1bc:	42a0      	cmp	r0, r4
 800d1be:	d0f8      	beq.n	800d1b2 <sbrk_aligned+0x22>
 800d1c0:	1a21      	subs	r1, r4, r0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f000 fb96 	bl	800d8f4 <_sbrk_r>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d1f2      	bne.n	800d1b2 <sbrk_aligned+0x22>
 800d1cc:	e7ef      	b.n	800d1ae <sbrk_aligned+0x1e>
 800d1ce:	bf00      	nop
 800d1d0:	2000171c 	.word	0x2000171c

0800d1d4 <_malloc_r>:
 800d1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d8:	1ccd      	adds	r5, r1, #3
 800d1da:	f025 0503 	bic.w	r5, r5, #3
 800d1de:	3508      	adds	r5, #8
 800d1e0:	2d0c      	cmp	r5, #12
 800d1e2:	bf38      	it	cc
 800d1e4:	250c      	movcc	r5, #12
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	db01      	blt.n	800d1f0 <_malloc_r+0x1c>
 800d1ec:	42a9      	cmp	r1, r5
 800d1ee:	d904      	bls.n	800d1fa <_malloc_r+0x26>
 800d1f0:	230c      	movs	r3, #12
 800d1f2:	6033      	str	r3, [r6, #0]
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2d0 <_malloc_r+0xfc>
 800d1fe:	f000 f869 	bl	800d2d4 <__malloc_lock>
 800d202:	f8d8 3000 	ldr.w	r3, [r8]
 800d206:	461c      	mov	r4, r3
 800d208:	bb44      	cbnz	r4, 800d25c <_malloc_r+0x88>
 800d20a:	4629      	mov	r1, r5
 800d20c:	4630      	mov	r0, r6
 800d20e:	f7ff ffbf 	bl	800d190 <sbrk_aligned>
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	4604      	mov	r4, r0
 800d216:	d158      	bne.n	800d2ca <_malloc_r+0xf6>
 800d218:	f8d8 4000 	ldr.w	r4, [r8]
 800d21c:	4627      	mov	r7, r4
 800d21e:	2f00      	cmp	r7, #0
 800d220:	d143      	bne.n	800d2aa <_malloc_r+0xd6>
 800d222:	2c00      	cmp	r4, #0
 800d224:	d04b      	beq.n	800d2be <_malloc_r+0xea>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	4639      	mov	r1, r7
 800d22a:	4630      	mov	r0, r6
 800d22c:	eb04 0903 	add.w	r9, r4, r3
 800d230:	f000 fb60 	bl	800d8f4 <_sbrk_r>
 800d234:	4581      	cmp	r9, r0
 800d236:	d142      	bne.n	800d2be <_malloc_r+0xea>
 800d238:	6821      	ldr	r1, [r4, #0]
 800d23a:	4630      	mov	r0, r6
 800d23c:	1a6d      	subs	r5, r5, r1
 800d23e:	4629      	mov	r1, r5
 800d240:	f7ff ffa6 	bl	800d190 <sbrk_aligned>
 800d244:	3001      	adds	r0, #1
 800d246:	d03a      	beq.n	800d2be <_malloc_r+0xea>
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	442b      	add	r3, r5
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	f8d8 3000 	ldr.w	r3, [r8]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	bb62      	cbnz	r2, 800d2b0 <_malloc_r+0xdc>
 800d256:	f8c8 7000 	str.w	r7, [r8]
 800d25a:	e00f      	b.n	800d27c <_malloc_r+0xa8>
 800d25c:	6822      	ldr	r2, [r4, #0]
 800d25e:	1b52      	subs	r2, r2, r5
 800d260:	d420      	bmi.n	800d2a4 <_malloc_r+0xd0>
 800d262:	2a0b      	cmp	r2, #11
 800d264:	d917      	bls.n	800d296 <_malloc_r+0xc2>
 800d266:	1961      	adds	r1, r4, r5
 800d268:	42a3      	cmp	r3, r4
 800d26a:	6025      	str	r5, [r4, #0]
 800d26c:	bf18      	it	ne
 800d26e:	6059      	strne	r1, [r3, #4]
 800d270:	6863      	ldr	r3, [r4, #4]
 800d272:	bf08      	it	eq
 800d274:	f8c8 1000 	streq.w	r1, [r8]
 800d278:	5162      	str	r2, [r4, r5]
 800d27a:	604b      	str	r3, [r1, #4]
 800d27c:	4630      	mov	r0, r6
 800d27e:	f000 f82f 	bl	800d2e0 <__malloc_unlock>
 800d282:	f104 000b 	add.w	r0, r4, #11
 800d286:	1d23      	adds	r3, r4, #4
 800d288:	f020 0007 	bic.w	r0, r0, #7
 800d28c:	1ac2      	subs	r2, r0, r3
 800d28e:	bf1c      	itt	ne
 800d290:	1a1b      	subne	r3, r3, r0
 800d292:	50a3      	strne	r3, [r4, r2]
 800d294:	e7af      	b.n	800d1f6 <_malloc_r+0x22>
 800d296:	6862      	ldr	r2, [r4, #4]
 800d298:	42a3      	cmp	r3, r4
 800d29a:	bf0c      	ite	eq
 800d29c:	f8c8 2000 	streq.w	r2, [r8]
 800d2a0:	605a      	strne	r2, [r3, #4]
 800d2a2:	e7eb      	b.n	800d27c <_malloc_r+0xa8>
 800d2a4:	4623      	mov	r3, r4
 800d2a6:	6864      	ldr	r4, [r4, #4]
 800d2a8:	e7ae      	b.n	800d208 <_malloc_r+0x34>
 800d2aa:	463c      	mov	r4, r7
 800d2ac:	687f      	ldr	r7, [r7, #4]
 800d2ae:	e7b6      	b.n	800d21e <_malloc_r+0x4a>
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	d1fb      	bne.n	800d2b0 <_malloc_r+0xdc>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	6053      	str	r3, [r2, #4]
 800d2bc:	e7de      	b.n	800d27c <_malloc_r+0xa8>
 800d2be:	230c      	movs	r3, #12
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	6033      	str	r3, [r6, #0]
 800d2c4:	f000 f80c 	bl	800d2e0 <__malloc_unlock>
 800d2c8:	e794      	b.n	800d1f4 <_malloc_r+0x20>
 800d2ca:	6005      	str	r5, [r0, #0]
 800d2cc:	e7d6      	b.n	800d27c <_malloc_r+0xa8>
 800d2ce:	bf00      	nop
 800d2d0:	20001720 	.word	0x20001720

0800d2d4 <__malloc_lock>:
 800d2d4:	4801      	ldr	r0, [pc, #4]	@ (800d2dc <__malloc_lock+0x8>)
 800d2d6:	f7ff bf03 	b.w	800d0e0 <__retarget_lock_acquire_recursive>
 800d2da:	bf00      	nop
 800d2dc:	20001718 	.word	0x20001718

0800d2e0 <__malloc_unlock>:
 800d2e0:	4801      	ldr	r0, [pc, #4]	@ (800d2e8 <__malloc_unlock+0x8>)
 800d2e2:	f7ff befe 	b.w	800d0e2 <__retarget_lock_release_recursive>
 800d2e6:	bf00      	nop
 800d2e8:	20001718 	.word	0x20001718

0800d2ec <__ssputs_r>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	461f      	mov	r7, r3
 800d2f2:	688e      	ldr	r6, [r1, #8]
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	42be      	cmp	r6, r7
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	4690      	mov	r8, r2
 800d2fc:	680b      	ldr	r3, [r1, #0]
 800d2fe:	d82d      	bhi.n	800d35c <__ssputs_r+0x70>
 800d300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d304:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d308:	d026      	beq.n	800d358 <__ssputs_r+0x6c>
 800d30a:	6965      	ldr	r5, [r4, #20]
 800d30c:	6909      	ldr	r1, [r1, #16]
 800d30e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d312:	eba3 0901 	sub.w	r9, r3, r1
 800d316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d31a:	1c7b      	adds	r3, r7, #1
 800d31c:	444b      	add	r3, r9
 800d31e:	106d      	asrs	r5, r5, #1
 800d320:	429d      	cmp	r5, r3
 800d322:	bf38      	it	cc
 800d324:	461d      	movcc	r5, r3
 800d326:	0553      	lsls	r3, r2, #21
 800d328:	d527      	bpl.n	800d37a <__ssputs_r+0x8e>
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7ff ff52 	bl	800d1d4 <_malloc_r>
 800d330:	4606      	mov	r6, r0
 800d332:	b360      	cbz	r0, 800d38e <__ssputs_r+0xa2>
 800d334:	464a      	mov	r2, r9
 800d336:	6921      	ldr	r1, [r4, #16]
 800d338:	f7ff fed4 	bl	800d0e4 <memcpy>
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d346:	81a3      	strh	r3, [r4, #12]
 800d348:	6126      	str	r6, [r4, #16]
 800d34a:	444e      	add	r6, r9
 800d34c:	6026      	str	r6, [r4, #0]
 800d34e:	463e      	mov	r6, r7
 800d350:	6165      	str	r5, [r4, #20]
 800d352:	eba5 0509 	sub.w	r5, r5, r9
 800d356:	60a5      	str	r5, [r4, #8]
 800d358:	42be      	cmp	r6, r7
 800d35a:	d900      	bls.n	800d35e <__ssputs_r+0x72>
 800d35c:	463e      	mov	r6, r7
 800d35e:	4632      	mov	r2, r6
 800d360:	4641      	mov	r1, r8
 800d362:	6820      	ldr	r0, [r4, #0]
 800d364:	f000 faac 	bl	800d8c0 <memmove>
 800d368:	2000      	movs	r0, #0
 800d36a:	68a3      	ldr	r3, [r4, #8]
 800d36c:	1b9b      	subs	r3, r3, r6
 800d36e:	60a3      	str	r3, [r4, #8]
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	4433      	add	r3, r6
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37a:	462a      	mov	r2, r5
 800d37c:	f000 fad8 	bl	800d930 <_realloc_r>
 800d380:	4606      	mov	r6, r0
 800d382:	2800      	cmp	r0, #0
 800d384:	d1e0      	bne.n	800d348 <__ssputs_r+0x5c>
 800d386:	4650      	mov	r0, sl
 800d388:	6921      	ldr	r1, [r4, #16]
 800d38a:	f7ff feb9 	bl	800d100 <_free_r>
 800d38e:	230c      	movs	r3, #12
 800d390:	f8ca 3000 	str.w	r3, [sl]
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	f04f 30ff 	mov.w	r0, #4294967295
 800d39a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	e7e9      	b.n	800d376 <__ssputs_r+0x8a>
	...

0800d3a4 <_svfiprintf_r>:
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	4698      	mov	r8, r3
 800d3aa:	898b      	ldrh	r3, [r1, #12]
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	061b      	lsls	r3, r3, #24
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	b09d      	sub	sp, #116	@ 0x74
 800d3b6:	d510      	bpl.n	800d3da <_svfiprintf_r+0x36>
 800d3b8:	690b      	ldr	r3, [r1, #16]
 800d3ba:	b973      	cbnz	r3, 800d3da <_svfiprintf_r+0x36>
 800d3bc:	2140      	movs	r1, #64	@ 0x40
 800d3be:	f7ff ff09 	bl	800d1d4 <_malloc_r>
 800d3c2:	6028      	str	r0, [r5, #0]
 800d3c4:	6128      	str	r0, [r5, #16]
 800d3c6:	b930      	cbnz	r0, 800d3d6 <_svfiprintf_r+0x32>
 800d3c8:	230c      	movs	r3, #12
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d0:	b01d      	add	sp, #116	@ 0x74
 800d3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d6:	2340      	movs	r3, #64	@ 0x40
 800d3d8:	616b      	str	r3, [r5, #20]
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3de:	2320      	movs	r3, #32
 800d3e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3e4:	2330      	movs	r3, #48	@ 0x30
 800d3e6:	f04f 0901 	mov.w	r9, #1
 800d3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d588 <_svfiprintf_r+0x1e4>
 800d3f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3f6:	4623      	mov	r3, r4
 800d3f8:	469a      	mov	sl, r3
 800d3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3fe:	b10a      	cbz	r2, 800d404 <_svfiprintf_r+0x60>
 800d400:	2a25      	cmp	r2, #37	@ 0x25
 800d402:	d1f9      	bne.n	800d3f8 <_svfiprintf_r+0x54>
 800d404:	ebba 0b04 	subs.w	fp, sl, r4
 800d408:	d00b      	beq.n	800d422 <_svfiprintf_r+0x7e>
 800d40a:	465b      	mov	r3, fp
 800d40c:	4622      	mov	r2, r4
 800d40e:	4629      	mov	r1, r5
 800d410:	4638      	mov	r0, r7
 800d412:	f7ff ff6b 	bl	800d2ec <__ssputs_r>
 800d416:	3001      	adds	r0, #1
 800d418:	f000 80a7 	beq.w	800d56a <_svfiprintf_r+0x1c6>
 800d41c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d41e:	445a      	add	r2, fp
 800d420:	9209      	str	r2, [sp, #36]	@ 0x24
 800d422:	f89a 3000 	ldrb.w	r3, [sl]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 809f 	beq.w	800d56a <_svfiprintf_r+0x1c6>
 800d42c:	2300      	movs	r3, #0
 800d42e:	f04f 32ff 	mov.w	r2, #4294967295
 800d432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d436:	f10a 0a01 	add.w	sl, sl, #1
 800d43a:	9304      	str	r3, [sp, #16]
 800d43c:	9307      	str	r3, [sp, #28]
 800d43e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d442:	931a      	str	r3, [sp, #104]	@ 0x68
 800d444:	4654      	mov	r4, sl
 800d446:	2205      	movs	r2, #5
 800d448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44c:	484e      	ldr	r0, [pc, #312]	@ (800d588 <_svfiprintf_r+0x1e4>)
 800d44e:	f000 fa61 	bl	800d914 <memchr>
 800d452:	9a04      	ldr	r2, [sp, #16]
 800d454:	b9d8      	cbnz	r0, 800d48e <_svfiprintf_r+0xea>
 800d456:	06d0      	lsls	r0, r2, #27
 800d458:	bf44      	itt	mi
 800d45a:	2320      	movmi	r3, #32
 800d45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d460:	0711      	lsls	r1, r2, #28
 800d462:	bf44      	itt	mi
 800d464:	232b      	movmi	r3, #43	@ 0x2b
 800d466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d46a:	f89a 3000 	ldrb.w	r3, [sl]
 800d46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d470:	d015      	beq.n	800d49e <_svfiprintf_r+0xfa>
 800d472:	4654      	mov	r4, sl
 800d474:	2000      	movs	r0, #0
 800d476:	f04f 0c0a 	mov.w	ip, #10
 800d47a:	9a07      	ldr	r2, [sp, #28]
 800d47c:	4621      	mov	r1, r4
 800d47e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d482:	3b30      	subs	r3, #48	@ 0x30
 800d484:	2b09      	cmp	r3, #9
 800d486:	d94b      	bls.n	800d520 <_svfiprintf_r+0x17c>
 800d488:	b1b0      	cbz	r0, 800d4b8 <_svfiprintf_r+0x114>
 800d48a:	9207      	str	r2, [sp, #28]
 800d48c:	e014      	b.n	800d4b8 <_svfiprintf_r+0x114>
 800d48e:	eba0 0308 	sub.w	r3, r0, r8
 800d492:	fa09 f303 	lsl.w	r3, r9, r3
 800d496:	4313      	orrs	r3, r2
 800d498:	46a2      	mov	sl, r4
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	e7d2      	b.n	800d444 <_svfiprintf_r+0xa0>
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	1d19      	adds	r1, r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	9103      	str	r1, [sp, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bfbb      	ittet	lt
 800d4aa:	425b      	neglt	r3, r3
 800d4ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d4b0:	9307      	strge	r3, [sp, #28]
 800d4b2:	9307      	strlt	r3, [sp, #28]
 800d4b4:	bfb8      	it	lt
 800d4b6:	9204      	strlt	r2, [sp, #16]
 800d4b8:	7823      	ldrb	r3, [r4, #0]
 800d4ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4bc:	d10a      	bne.n	800d4d4 <_svfiprintf_r+0x130>
 800d4be:	7863      	ldrb	r3, [r4, #1]
 800d4c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4c2:	d132      	bne.n	800d52a <_svfiprintf_r+0x186>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	3402      	adds	r4, #2
 800d4c8:	1d1a      	adds	r2, r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	9203      	str	r2, [sp, #12]
 800d4ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4d2:	9305      	str	r3, [sp, #20]
 800d4d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d58c <_svfiprintf_r+0x1e8>
 800d4d8:	2203      	movs	r2, #3
 800d4da:	4650      	mov	r0, sl
 800d4dc:	7821      	ldrb	r1, [r4, #0]
 800d4de:	f000 fa19 	bl	800d914 <memchr>
 800d4e2:	b138      	cbz	r0, 800d4f4 <_svfiprintf_r+0x150>
 800d4e4:	2240      	movs	r2, #64	@ 0x40
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	eba0 000a 	sub.w	r0, r0, sl
 800d4ec:	4082      	lsls	r2, r0
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	3401      	adds	r4, #1
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f8:	2206      	movs	r2, #6
 800d4fa:	4825      	ldr	r0, [pc, #148]	@ (800d590 <_svfiprintf_r+0x1ec>)
 800d4fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d500:	f000 fa08 	bl	800d914 <memchr>
 800d504:	2800      	cmp	r0, #0
 800d506:	d036      	beq.n	800d576 <_svfiprintf_r+0x1d2>
 800d508:	4b22      	ldr	r3, [pc, #136]	@ (800d594 <_svfiprintf_r+0x1f0>)
 800d50a:	bb1b      	cbnz	r3, 800d554 <_svfiprintf_r+0x1b0>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	3307      	adds	r3, #7
 800d510:	f023 0307 	bic.w	r3, r3, #7
 800d514:	3308      	adds	r3, #8
 800d516:	9303      	str	r3, [sp, #12]
 800d518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51a:	4433      	add	r3, r6
 800d51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d51e:	e76a      	b.n	800d3f6 <_svfiprintf_r+0x52>
 800d520:	460c      	mov	r4, r1
 800d522:	2001      	movs	r0, #1
 800d524:	fb0c 3202 	mla	r2, ip, r2, r3
 800d528:	e7a8      	b.n	800d47c <_svfiprintf_r+0xd8>
 800d52a:	2300      	movs	r3, #0
 800d52c:	f04f 0c0a 	mov.w	ip, #10
 800d530:	4619      	mov	r1, r3
 800d532:	3401      	adds	r4, #1
 800d534:	9305      	str	r3, [sp, #20]
 800d536:	4620      	mov	r0, r4
 800d538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d53c:	3a30      	subs	r2, #48	@ 0x30
 800d53e:	2a09      	cmp	r2, #9
 800d540:	d903      	bls.n	800d54a <_svfiprintf_r+0x1a6>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0c6      	beq.n	800d4d4 <_svfiprintf_r+0x130>
 800d546:	9105      	str	r1, [sp, #20]
 800d548:	e7c4      	b.n	800d4d4 <_svfiprintf_r+0x130>
 800d54a:	4604      	mov	r4, r0
 800d54c:	2301      	movs	r3, #1
 800d54e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d552:	e7f0      	b.n	800d536 <_svfiprintf_r+0x192>
 800d554:	ab03      	add	r3, sp, #12
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	462a      	mov	r2, r5
 800d55a:	4638      	mov	r0, r7
 800d55c:	4b0e      	ldr	r3, [pc, #56]	@ (800d598 <_svfiprintf_r+0x1f4>)
 800d55e:	a904      	add	r1, sp, #16
 800d560:	f3af 8000 	nop.w
 800d564:	1c42      	adds	r2, r0, #1
 800d566:	4606      	mov	r6, r0
 800d568:	d1d6      	bne.n	800d518 <_svfiprintf_r+0x174>
 800d56a:	89ab      	ldrh	r3, [r5, #12]
 800d56c:	065b      	lsls	r3, r3, #25
 800d56e:	f53f af2d 	bmi.w	800d3cc <_svfiprintf_r+0x28>
 800d572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d574:	e72c      	b.n	800d3d0 <_svfiprintf_r+0x2c>
 800d576:	ab03      	add	r3, sp, #12
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	462a      	mov	r2, r5
 800d57c:	4638      	mov	r0, r7
 800d57e:	4b06      	ldr	r3, [pc, #24]	@ (800d598 <_svfiprintf_r+0x1f4>)
 800d580:	a904      	add	r1, sp, #16
 800d582:	f000 f87d 	bl	800d680 <_printf_i>
 800d586:	e7ed      	b.n	800d564 <_svfiprintf_r+0x1c0>
 800d588:	0800e411 	.word	0x0800e411
 800d58c:	0800e417 	.word	0x0800e417
 800d590:	0800e41b 	.word	0x0800e41b
 800d594:	00000000 	.word	0x00000000
 800d598:	0800d2ed 	.word	0x0800d2ed

0800d59c <_printf_common>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	4698      	mov	r8, r3
 800d5a4:	688a      	ldr	r2, [r1, #8]
 800d5a6:	690b      	ldr	r3, [r1, #16]
 800d5a8:	4607      	mov	r7, r0
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	bfb8      	it	lt
 800d5ae:	4613      	movlt	r3, r2
 800d5b0:	6033      	str	r3, [r6, #0]
 800d5b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5bc:	b10a      	cbz	r2, 800d5c2 <_printf_common+0x26>
 800d5be:	3301      	adds	r3, #1
 800d5c0:	6033      	str	r3, [r6, #0]
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	0699      	lsls	r1, r3, #26
 800d5c6:	bf42      	ittt	mi
 800d5c8:	6833      	ldrmi	r3, [r6, #0]
 800d5ca:	3302      	addmi	r3, #2
 800d5cc:	6033      	strmi	r3, [r6, #0]
 800d5ce:	6825      	ldr	r5, [r4, #0]
 800d5d0:	f015 0506 	ands.w	r5, r5, #6
 800d5d4:	d106      	bne.n	800d5e4 <_printf_common+0x48>
 800d5d6:	f104 0a19 	add.w	sl, r4, #25
 800d5da:	68e3      	ldr	r3, [r4, #12]
 800d5dc:	6832      	ldr	r2, [r6, #0]
 800d5de:	1a9b      	subs	r3, r3, r2
 800d5e0:	42ab      	cmp	r3, r5
 800d5e2:	dc2b      	bgt.n	800d63c <_printf_common+0xa0>
 800d5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	3b00      	subs	r3, #0
 800d5ec:	bf18      	it	ne
 800d5ee:	2301      	movne	r3, #1
 800d5f0:	0692      	lsls	r2, r2, #26
 800d5f2:	d430      	bmi.n	800d656 <_printf_common+0xba>
 800d5f4:	4641      	mov	r1, r8
 800d5f6:	4638      	mov	r0, r7
 800d5f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5fc:	47c8      	blx	r9
 800d5fe:	3001      	adds	r0, #1
 800d600:	d023      	beq.n	800d64a <_printf_common+0xae>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	6922      	ldr	r2, [r4, #16]
 800d606:	f003 0306 	and.w	r3, r3, #6
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	bf14      	ite	ne
 800d60e:	2500      	movne	r5, #0
 800d610:	6833      	ldreq	r3, [r6, #0]
 800d612:	f04f 0600 	mov.w	r6, #0
 800d616:	bf08      	it	eq
 800d618:	68e5      	ldreq	r5, [r4, #12]
 800d61a:	f104 041a 	add.w	r4, r4, #26
 800d61e:	bf08      	it	eq
 800d620:	1aed      	subeq	r5, r5, r3
 800d622:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d626:	bf08      	it	eq
 800d628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d62c:	4293      	cmp	r3, r2
 800d62e:	bfc4      	itt	gt
 800d630:	1a9b      	subgt	r3, r3, r2
 800d632:	18ed      	addgt	r5, r5, r3
 800d634:	42b5      	cmp	r5, r6
 800d636:	d11a      	bne.n	800d66e <_printf_common+0xd2>
 800d638:	2000      	movs	r0, #0
 800d63a:	e008      	b.n	800d64e <_printf_common+0xb2>
 800d63c:	2301      	movs	r3, #1
 800d63e:	4652      	mov	r2, sl
 800d640:	4641      	mov	r1, r8
 800d642:	4638      	mov	r0, r7
 800d644:	47c8      	blx	r9
 800d646:	3001      	adds	r0, #1
 800d648:	d103      	bne.n	800d652 <_printf_common+0xb6>
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	3501      	adds	r5, #1
 800d654:	e7c1      	b.n	800d5da <_printf_common+0x3e>
 800d656:	2030      	movs	r0, #48	@ 0x30
 800d658:	18e1      	adds	r1, r4, r3
 800d65a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d65e:	1c5a      	adds	r2, r3, #1
 800d660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d664:	4422      	add	r2, r4
 800d666:	3302      	adds	r3, #2
 800d668:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d66c:	e7c2      	b.n	800d5f4 <_printf_common+0x58>
 800d66e:	2301      	movs	r3, #1
 800d670:	4622      	mov	r2, r4
 800d672:	4641      	mov	r1, r8
 800d674:	4638      	mov	r0, r7
 800d676:	47c8      	blx	r9
 800d678:	3001      	adds	r0, #1
 800d67a:	d0e6      	beq.n	800d64a <_printf_common+0xae>
 800d67c:	3601      	adds	r6, #1
 800d67e:	e7d9      	b.n	800d634 <_printf_common+0x98>

0800d680 <_printf_i>:
 800d680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d684:	7e0f      	ldrb	r7, [r1, #24]
 800d686:	4691      	mov	r9, r2
 800d688:	2f78      	cmp	r7, #120	@ 0x78
 800d68a:	4680      	mov	r8, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	469a      	mov	sl, r3
 800d690:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d696:	d807      	bhi.n	800d6a8 <_printf_i+0x28>
 800d698:	2f62      	cmp	r7, #98	@ 0x62
 800d69a:	d80a      	bhi.n	800d6b2 <_printf_i+0x32>
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	f000 80d3 	beq.w	800d848 <_printf_i+0x1c8>
 800d6a2:	2f58      	cmp	r7, #88	@ 0x58
 800d6a4:	f000 80ba 	beq.w	800d81c <_printf_i+0x19c>
 800d6a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6b0:	e03a      	b.n	800d728 <_printf_i+0xa8>
 800d6b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6b6:	2b15      	cmp	r3, #21
 800d6b8:	d8f6      	bhi.n	800d6a8 <_printf_i+0x28>
 800d6ba:	a101      	add	r1, pc, #4	@ (adr r1, 800d6c0 <_printf_i+0x40>)
 800d6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6c0:	0800d719 	.word	0x0800d719
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d6a9 	.word	0x0800d6a9
 800d6cc:	0800d6a9 	.word	0x0800d6a9
 800d6d0:	0800d6a9 	.word	0x0800d6a9
 800d6d4:	0800d6a9 	.word	0x0800d6a9
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d6a9 	.word	0x0800d6a9
 800d6e0:	0800d6a9 	.word	0x0800d6a9
 800d6e4:	0800d6a9 	.word	0x0800d6a9
 800d6e8:	0800d6a9 	.word	0x0800d6a9
 800d6ec:	0800d82f 	.word	0x0800d82f
 800d6f0:	0800d757 	.word	0x0800d757
 800d6f4:	0800d7e9 	.word	0x0800d7e9
 800d6f8:	0800d6a9 	.word	0x0800d6a9
 800d6fc:	0800d6a9 	.word	0x0800d6a9
 800d700:	0800d851 	.word	0x0800d851
 800d704:	0800d6a9 	.word	0x0800d6a9
 800d708:	0800d757 	.word	0x0800d757
 800d70c:	0800d6a9 	.word	0x0800d6a9
 800d710:	0800d6a9 	.word	0x0800d6a9
 800d714:	0800d7f1 	.word	0x0800d7f1
 800d718:	6833      	ldr	r3, [r6, #0]
 800d71a:	1d1a      	adds	r2, r3, #4
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6032      	str	r2, [r6, #0]
 800d720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d728:	2301      	movs	r3, #1
 800d72a:	e09e      	b.n	800d86a <_printf_i+0x1ea>
 800d72c:	6833      	ldr	r3, [r6, #0]
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	6031      	str	r1, [r6, #0]
 800d734:	0606      	lsls	r6, r0, #24
 800d736:	d501      	bpl.n	800d73c <_printf_i+0xbc>
 800d738:	681d      	ldr	r5, [r3, #0]
 800d73a:	e003      	b.n	800d744 <_printf_i+0xc4>
 800d73c:	0645      	lsls	r5, r0, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0xb8>
 800d740:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d744:	2d00      	cmp	r5, #0
 800d746:	da03      	bge.n	800d750 <_printf_i+0xd0>
 800d748:	232d      	movs	r3, #45	@ 0x2d
 800d74a:	426d      	negs	r5, r5
 800d74c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d750:	230a      	movs	r3, #10
 800d752:	4859      	ldr	r0, [pc, #356]	@ (800d8b8 <_printf_i+0x238>)
 800d754:	e011      	b.n	800d77a <_printf_i+0xfa>
 800d756:	6821      	ldr	r1, [r4, #0]
 800d758:	6833      	ldr	r3, [r6, #0]
 800d75a:	0608      	lsls	r0, r1, #24
 800d75c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d760:	d402      	bmi.n	800d768 <_printf_i+0xe8>
 800d762:	0649      	lsls	r1, r1, #25
 800d764:	bf48      	it	mi
 800d766:	b2ad      	uxthmi	r5, r5
 800d768:	2f6f      	cmp	r7, #111	@ 0x6f
 800d76a:	6033      	str	r3, [r6, #0]
 800d76c:	bf14      	ite	ne
 800d76e:	230a      	movne	r3, #10
 800d770:	2308      	moveq	r3, #8
 800d772:	4851      	ldr	r0, [pc, #324]	@ (800d8b8 <_printf_i+0x238>)
 800d774:	2100      	movs	r1, #0
 800d776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d77a:	6866      	ldr	r6, [r4, #4]
 800d77c:	2e00      	cmp	r6, #0
 800d77e:	bfa8      	it	ge
 800d780:	6821      	ldrge	r1, [r4, #0]
 800d782:	60a6      	str	r6, [r4, #8]
 800d784:	bfa4      	itt	ge
 800d786:	f021 0104 	bicge.w	r1, r1, #4
 800d78a:	6021      	strge	r1, [r4, #0]
 800d78c:	b90d      	cbnz	r5, 800d792 <_printf_i+0x112>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	d04b      	beq.n	800d82a <_printf_i+0x1aa>
 800d792:	4616      	mov	r6, r2
 800d794:	fbb5 f1f3 	udiv	r1, r5, r3
 800d798:	fb03 5711 	mls	r7, r3, r1, r5
 800d79c:	5dc7      	ldrb	r7, [r0, r7]
 800d79e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7a2:	462f      	mov	r7, r5
 800d7a4:	42bb      	cmp	r3, r7
 800d7a6:	460d      	mov	r5, r1
 800d7a8:	d9f4      	bls.n	800d794 <_printf_i+0x114>
 800d7aa:	2b08      	cmp	r3, #8
 800d7ac:	d10b      	bne.n	800d7c6 <_printf_i+0x146>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	07df      	lsls	r7, r3, #31
 800d7b2:	d508      	bpl.n	800d7c6 <_printf_i+0x146>
 800d7b4:	6923      	ldr	r3, [r4, #16]
 800d7b6:	6861      	ldr	r1, [r4, #4]
 800d7b8:	4299      	cmp	r1, r3
 800d7ba:	bfde      	ittt	le
 800d7bc:	2330      	movle	r3, #48	@ 0x30
 800d7be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7c6:	1b92      	subs	r2, r2, r6
 800d7c8:	6122      	str	r2, [r4, #16]
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	f8cd a000 	str.w	sl, [sp]
 800d7d4:	aa03      	add	r2, sp, #12
 800d7d6:	f7ff fee1 	bl	800d59c <_printf_common>
 800d7da:	3001      	adds	r0, #1
 800d7dc:	d14a      	bne.n	800d874 <_printf_i+0x1f4>
 800d7de:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e2:	b004      	add	sp, #16
 800d7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	f043 0320 	orr.w	r3, r3, #32
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	2778      	movs	r7, #120	@ 0x78
 800d7f2:	4832      	ldr	r0, [pc, #200]	@ (800d8bc <_printf_i+0x23c>)
 800d7f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	6831      	ldr	r1, [r6, #0]
 800d7fc:	061f      	lsls	r7, r3, #24
 800d7fe:	f851 5b04 	ldr.w	r5, [r1], #4
 800d802:	d402      	bmi.n	800d80a <_printf_i+0x18a>
 800d804:	065f      	lsls	r7, r3, #25
 800d806:	bf48      	it	mi
 800d808:	b2ad      	uxthmi	r5, r5
 800d80a:	6031      	str	r1, [r6, #0]
 800d80c:	07d9      	lsls	r1, r3, #31
 800d80e:	bf44      	itt	mi
 800d810:	f043 0320 	orrmi.w	r3, r3, #32
 800d814:	6023      	strmi	r3, [r4, #0]
 800d816:	b11d      	cbz	r5, 800d820 <_printf_i+0x1a0>
 800d818:	2310      	movs	r3, #16
 800d81a:	e7ab      	b.n	800d774 <_printf_i+0xf4>
 800d81c:	4826      	ldr	r0, [pc, #152]	@ (800d8b8 <_printf_i+0x238>)
 800d81e:	e7e9      	b.n	800d7f4 <_printf_i+0x174>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	f023 0320 	bic.w	r3, r3, #32
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	e7f6      	b.n	800d818 <_printf_i+0x198>
 800d82a:	4616      	mov	r6, r2
 800d82c:	e7bd      	b.n	800d7aa <_printf_i+0x12a>
 800d82e:	6833      	ldr	r3, [r6, #0]
 800d830:	6825      	ldr	r5, [r4, #0]
 800d832:	1d18      	adds	r0, r3, #4
 800d834:	6961      	ldr	r1, [r4, #20]
 800d836:	6030      	str	r0, [r6, #0]
 800d838:	062e      	lsls	r6, r5, #24
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	d501      	bpl.n	800d842 <_printf_i+0x1c2>
 800d83e:	6019      	str	r1, [r3, #0]
 800d840:	e002      	b.n	800d848 <_printf_i+0x1c8>
 800d842:	0668      	lsls	r0, r5, #25
 800d844:	d5fb      	bpl.n	800d83e <_printf_i+0x1be>
 800d846:	8019      	strh	r1, [r3, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	4616      	mov	r6, r2
 800d84c:	6123      	str	r3, [r4, #16]
 800d84e:	e7bc      	b.n	800d7ca <_printf_i+0x14a>
 800d850:	6833      	ldr	r3, [r6, #0]
 800d852:	2100      	movs	r1, #0
 800d854:	1d1a      	adds	r2, r3, #4
 800d856:	6032      	str	r2, [r6, #0]
 800d858:	681e      	ldr	r6, [r3, #0]
 800d85a:	6862      	ldr	r2, [r4, #4]
 800d85c:	4630      	mov	r0, r6
 800d85e:	f000 f859 	bl	800d914 <memchr>
 800d862:	b108      	cbz	r0, 800d868 <_printf_i+0x1e8>
 800d864:	1b80      	subs	r0, r0, r6
 800d866:	6060      	str	r0, [r4, #4]
 800d868:	6863      	ldr	r3, [r4, #4]
 800d86a:	6123      	str	r3, [r4, #16]
 800d86c:	2300      	movs	r3, #0
 800d86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d872:	e7aa      	b.n	800d7ca <_printf_i+0x14a>
 800d874:	4632      	mov	r2, r6
 800d876:	4649      	mov	r1, r9
 800d878:	4640      	mov	r0, r8
 800d87a:	6923      	ldr	r3, [r4, #16]
 800d87c:	47d0      	blx	sl
 800d87e:	3001      	adds	r0, #1
 800d880:	d0ad      	beq.n	800d7de <_printf_i+0x15e>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	079b      	lsls	r3, r3, #30
 800d886:	d413      	bmi.n	800d8b0 <_printf_i+0x230>
 800d888:	68e0      	ldr	r0, [r4, #12]
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	4298      	cmp	r0, r3
 800d88e:	bfb8      	it	lt
 800d890:	4618      	movlt	r0, r3
 800d892:	e7a6      	b.n	800d7e2 <_printf_i+0x162>
 800d894:	2301      	movs	r3, #1
 800d896:	4632      	mov	r2, r6
 800d898:	4649      	mov	r1, r9
 800d89a:	4640      	mov	r0, r8
 800d89c:	47d0      	blx	sl
 800d89e:	3001      	adds	r0, #1
 800d8a0:	d09d      	beq.n	800d7de <_printf_i+0x15e>
 800d8a2:	3501      	adds	r5, #1
 800d8a4:	68e3      	ldr	r3, [r4, #12]
 800d8a6:	9903      	ldr	r1, [sp, #12]
 800d8a8:	1a5b      	subs	r3, r3, r1
 800d8aa:	42ab      	cmp	r3, r5
 800d8ac:	dcf2      	bgt.n	800d894 <_printf_i+0x214>
 800d8ae:	e7eb      	b.n	800d888 <_printf_i+0x208>
 800d8b0:	2500      	movs	r5, #0
 800d8b2:	f104 0619 	add.w	r6, r4, #25
 800d8b6:	e7f5      	b.n	800d8a4 <_printf_i+0x224>
 800d8b8:	0800e422 	.word	0x0800e422
 800d8bc:	0800e433 	.word	0x0800e433

0800d8c0 <memmove>:
 800d8c0:	4288      	cmp	r0, r1
 800d8c2:	b510      	push	{r4, lr}
 800d8c4:	eb01 0402 	add.w	r4, r1, r2
 800d8c8:	d902      	bls.n	800d8d0 <memmove+0x10>
 800d8ca:	4284      	cmp	r4, r0
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	d807      	bhi.n	800d8e0 <memmove+0x20>
 800d8d0:	1e43      	subs	r3, r0, #1
 800d8d2:	42a1      	cmp	r1, r4
 800d8d4:	d008      	beq.n	800d8e8 <memmove+0x28>
 800d8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8de:	e7f8      	b.n	800d8d2 <memmove+0x12>
 800d8e0:	4601      	mov	r1, r0
 800d8e2:	4402      	add	r2, r0
 800d8e4:	428a      	cmp	r2, r1
 800d8e6:	d100      	bne.n	800d8ea <memmove+0x2a>
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8f2:	e7f7      	b.n	800d8e4 <memmove+0x24>

0800d8f4 <_sbrk_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	4d05      	ldr	r5, [pc, #20]	@ (800d910 <_sbrk_r+0x1c>)
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	4608      	mov	r0, r1
 800d8fe:	602b      	str	r3, [r5, #0]
 800d900:	f7f6 fc00 	bl	8004104 <_sbrk>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_sbrk_r+0x1a>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_sbrk_r+0x1a>
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	20001714 	.word	0x20001714

0800d914 <memchr>:
 800d914:	4603      	mov	r3, r0
 800d916:	b510      	push	{r4, lr}
 800d918:	b2c9      	uxtb	r1, r1
 800d91a:	4402      	add	r2, r0
 800d91c:	4293      	cmp	r3, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	d101      	bne.n	800d926 <memchr+0x12>
 800d922:	2000      	movs	r0, #0
 800d924:	e003      	b.n	800d92e <memchr+0x1a>
 800d926:	7804      	ldrb	r4, [r0, #0]
 800d928:	3301      	adds	r3, #1
 800d92a:	428c      	cmp	r4, r1
 800d92c:	d1f6      	bne.n	800d91c <memchr+0x8>
 800d92e:	bd10      	pop	{r4, pc}

0800d930 <_realloc_r>:
 800d930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d934:	4680      	mov	r8, r0
 800d936:	4615      	mov	r5, r2
 800d938:	460c      	mov	r4, r1
 800d93a:	b921      	cbnz	r1, 800d946 <_realloc_r+0x16>
 800d93c:	4611      	mov	r1, r2
 800d93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d942:	f7ff bc47 	b.w	800d1d4 <_malloc_r>
 800d946:	b92a      	cbnz	r2, 800d954 <_realloc_r+0x24>
 800d948:	f7ff fbda 	bl	800d100 <_free_r>
 800d94c:	2400      	movs	r4, #0
 800d94e:	4620      	mov	r0, r4
 800d950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d954:	f000 f81a 	bl	800d98c <_malloc_usable_size_r>
 800d958:	4285      	cmp	r5, r0
 800d95a:	4606      	mov	r6, r0
 800d95c:	d802      	bhi.n	800d964 <_realloc_r+0x34>
 800d95e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d962:	d8f4      	bhi.n	800d94e <_realloc_r+0x1e>
 800d964:	4629      	mov	r1, r5
 800d966:	4640      	mov	r0, r8
 800d968:	f7ff fc34 	bl	800d1d4 <_malloc_r>
 800d96c:	4607      	mov	r7, r0
 800d96e:	2800      	cmp	r0, #0
 800d970:	d0ec      	beq.n	800d94c <_realloc_r+0x1c>
 800d972:	42b5      	cmp	r5, r6
 800d974:	462a      	mov	r2, r5
 800d976:	4621      	mov	r1, r4
 800d978:	bf28      	it	cs
 800d97a:	4632      	movcs	r2, r6
 800d97c:	f7ff fbb2 	bl	800d0e4 <memcpy>
 800d980:	4621      	mov	r1, r4
 800d982:	4640      	mov	r0, r8
 800d984:	f7ff fbbc 	bl	800d100 <_free_r>
 800d988:	463c      	mov	r4, r7
 800d98a:	e7e0      	b.n	800d94e <_realloc_r+0x1e>

0800d98c <_malloc_usable_size_r>:
 800d98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d990:	1f18      	subs	r0, r3, #4
 800d992:	2b00      	cmp	r3, #0
 800d994:	bfbc      	itt	lt
 800d996:	580b      	ldrlt	r3, [r1, r0]
 800d998:	18c0      	addlt	r0, r0, r3
 800d99a:	4770      	bx	lr

0800d99c <_init>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	bf00      	nop
 800d9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a2:	bc08      	pop	{r3}
 800d9a4:	469e      	mov	lr, r3
 800d9a6:	4770      	bx	lr

0800d9a8 <_fini>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	bf00      	nop
 800d9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ae:	bc08      	pop	{r3}
 800d9b0:	469e      	mov	lr, r3
 800d9b2:	4770      	bx	lr

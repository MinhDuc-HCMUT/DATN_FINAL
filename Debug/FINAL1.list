
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  0800dd18  0800dd18  0000ed18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d4  0800e7d4  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d4  0800e7d4  0000f7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7dc  0800e7dc  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7dc  0800e7dc  0000f7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e7e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e9d8  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e9d8  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aae1  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e9  00000000  00000000  0002acfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d1  00000000  00000000  000310d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  000325a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021315  00000000  00000000  0004ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a73  00000000  00000000  00070017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104a8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007608  00000000  00000000  00104ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800dd00 	.word	0x0800dd00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800dd00 	.word	0x0800dd00

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 fac7 	bl	8004700 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f005 f8bc 	bl	8005398 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fc74 	bl	8004d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fe03 	bl	800509a <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fc49 	bl	8004d64 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e778 	.word	0x0800e778
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e780 	.word	0x0800e780
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fdb6 	bl	800509a <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fda2 	bl	800509a <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f004 f8d2 	bl	8004700 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fd79 	bl	800506c <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f004 f8bd 	bl	8004700 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fd67 	bl	800506c <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f004 f895 	bl	8004700 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fd3f 	bl	800506c <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e778 	.word	0x0800e778
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e780 	.word	0x0800e780

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f004 f850 	bl	8004700 <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f004 f841 	bl	80046ec <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f004 f83a 	bl	8004700 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f004 f82e 	bl	80046ec <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f008 f82d 	bl	8008886 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f008 f8aa 	bl	80089aa <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f008 f88b 	bl	80089aa <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f008 f870 	bl	80089aa <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <del>:
   USART_SendByte(0x00);USART_SendByte(0x11);
   return receive_finger(12);

}
int del(uint8_t id)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	3315      	adds	r3, #21
 8000b72:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b74:	20ef      	movs	r0, #239	@ 0xef
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
 8000b8c:	20ff      	movs	r0, #255	@ 0xff
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
 8000b92:	20ff      	movs	r0, #255	@ 0xff
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000baa:	200c      	movs	r0, #12
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe2f 	bl	8000814 <USART_SendByte>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe2b 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe28 	bl	8000814 <USART_SendByte>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fe25 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fe22 	bl	8000814 <USART_SendByte>
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff fe2d 	bl	8000838 <receive_finger>
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <delete_finger>:

uint8_t delete_finger(uint8_t id)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
    return del(id);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffb5 	bl	8000b64 <del>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c0e:	f003 ff19 	bl	8004a44 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fff1 	bl	8004c14 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c32:	f003 ff2d 	bl	8004a90 <HAL_FLASH_Lock>
}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c3e:	b5b0      	push	{r4, r5, r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c4a:	f003 fefb 	bl	8004a44 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	2200      	movs	r2, #0
 8000c52:	461c      	mov	r4, r3
 8000c54:	4615      	mov	r5, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	462b      	mov	r3, r5
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f003 fe81 	bl	8004964 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c62:	f003 ff15 	bl	8004a90 <HAL_FLASH_Lock>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}

08000c6e <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000c7c:	f003 fee2 	bl	8004a44 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000c80:	2300      	movs	r3, #0
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e00c      	b.n	8000ca0 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	18d0      	adds	r0, r2, r3
 8000c8c:	8afb      	ldrh	r3, [r7, #22]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	4413      	add	r3, r2
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ffd2 	bl	8000c3e <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	82fb      	strh	r3, [r7, #22]
 8000ca0:	8afa      	ldrh	r2, [r7, #22]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3ee      	bcc.n	8000c86 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ca8:	f003 fef2 	bl	8004a90 <HAL_FLASH_Lock>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	82fb      	strh	r3, [r7, #22]
 8000d10:	e00c      	b.n	8000d2c <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d12:	8afa      	ldrh	r2, [r7, #22]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	8afb      	ldrh	r3, [r7, #22]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	780a      	ldrb	r2, [r1, #0]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d26:	8afb      	ldrh	r3, [r7, #22]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	82fb      	strh	r3, [r7, #22]
 8000d2c:	8afa      	ldrh	r2, [r7, #22]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3ee      	bcc.n	8000d12 <Flash_Read_Array+0x14>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d5a:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d5c:	e002      	b.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000020 	.word	0x20000020

08000d74 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000d7a:	f7ff fdb9 	bl	80008f0 <collect_finger>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <check_fingerprint_status+0x24>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000409 	.word	0x20000409

08000d9c <process_fingerprint>:
void process_fingerprint()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <process_fingerprint+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <process_fingerprint+0x1c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dae:	f002 fcaf 	bl	8003710 <read_finger>
    }
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000409 	.word	0x20000409

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	@ 0x40
 8000dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f003 fc3b 	bl	800463c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f9a7 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 fadd 	bl	8001388 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dce:	f000 fa2d 	bl	800122c <MX_SPI1_Init>
  MX_I2C2_Init();
 8000dd2:	f000 f9fd 	bl	80011d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000dd6:	f000 faad 	bl	8001334 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000dda:	f000 fa5d 	bl	8001298 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000dde:	f00b fe01 	bl	800c9e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000de2:	f002 ffd1 	bl	8003d88 <TM_MFRC522_Init>
  KeyPad_Init();
 8000de6:	f7ff fb29 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000dea:	2302      	movs	r3, #2
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2310      	movs	r3, #16
 8000df0:	224e      	movs	r2, #78	@ 0x4e
 8000df2:	49b7      	ldr	r1, [pc, #732]	@ (80010d0 <main+0x314>)
 8000df4:	48b7      	ldr	r0, [pc, #732]	@ (80010d4 <main+0x318>)
 8000df6:	f7ff fa17 	bl	8000228 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e00:	48b5      	ldr	r0, [pc, #724]	@ (80010d8 <main+0x31c>)
 8000e02:	f004 f94a 	bl	800509a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0c:	48b2      	ldr	r0, [pc, #712]	@ (80010d8 <main+0x31c>)
 8000e0e:	f004 f944 	bl	800509a <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	801a      	strh	r2, [r3, #0]
 8000e20:	460a      	mov	r2, r1
 8000e22:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	2206      	movs	r2, #6
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	48ab      	ldr	r0, [pc, #684]	@ (80010dc <main+0x320>)
 8000e2e:	f7ff ff66 	bl	8000cfe <Flash_Read_Array>
  stored_password[6] = '\0';
 8000e32:	2300      	movs	r3, #0
 8000e34:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e3e:	e00c      	b.n	8000e5a <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2bff      	cmp	r3, #255	@ 0xff
 8000e4c:	d002      	beq.n	8000e54 <main+0x98>
          is_empty = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000e52:	e005      	b.n	8000e60 <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8000e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e56:	3301      	adds	r3, #1
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	ddef      	ble.n	8000e40 <main+0x84>
      }
  }
  if (is_empty) {
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <main+0xae>
      set_default_password();
 8000e66:	f002 fead 	bl	8003bc4 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e6a:	489d      	ldr	r0, [pc, #628]	@ (80010e0 <main+0x324>)
 8000e6c:	f007 f914 	bl	8008098 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000e70:	f001 ffd6 	bl	8002e20 <checkcountUID>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <main+0xc2>
  {
      startadd();
 8000e7a:	f002 f96d 	bl	8003158 <startadd>
  }
  int incorrect_attempts = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000e82:	4894      	ldr	r0, [pc, #592]	@ (80010d4 <main+0x318>)
 8000e84:	f7ff faaa 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4891      	ldr	r0, [pc, #580]	@ (80010d4 <main+0x318>)
 8000e8e:	f7ff fa3b 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000e92:	4994      	ldr	r1, [pc, #592]	@ (80010e4 <main+0x328>)
 8000e94:	488f      	ldr	r0, [pc, #572]	@ (80010d4 <main+0x318>)
 8000e96:	f7ff fa8a 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f7ff fc08 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000eaa:	2b23      	cmp	r3, #35	@ 0x23
 8000eac:	d166      	bne.n	8000f7c <main+0x1c0>
    {
    	buzzer(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f002 ff18 	bl	8003ce4 <buzzer>
        char entered_password[7] = {0};
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000ec6:	4a88      	ldr	r2, [pc, #544]	@ (80010e8 <main+0x32c>)
 8000ec8:	4988      	ldr	r1, [pc, #544]	@ (80010ec <main+0x330>)
 8000eca:	4882      	ldr	r0, [pc, #520]	@ (80010d4 <main+0x318>)
 8000ecc:	f7ff fa96 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fdb7 	bl	8003a48 <enter_password>
        if (check_password(entered_password)) {
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fe48 	bl	8003b74 <check_password>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d009      	beq.n	8000efe <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000eea:	4a7f      	ldr	r2, [pc, #508]	@ (80010e8 <main+0x32c>)
 8000eec:	4980      	ldr	r1, [pc, #512]	@ (80010f0 <main+0x334>)
 8000eee:	4879      	ldr	r0, [pc, #484]	@ (80010d4 <main+0x318>)
 8000ef0:	f7ff fa84 	bl	80003fc <CLCD_I2C_Display>
            opendoor();
 8000ef4:	f002 fea6 	bl	8003c44 <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000efc:	e036      	b.n	8000f6c <main+0x1b0>
        } else {
            incorrect_attempts++;
 8000efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f00:	3301      	adds	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000f04:	4a78      	ldr	r2, [pc, #480]	@ (80010e8 <main+0x32c>)
 8000f06:	497b      	ldr	r1, [pc, #492]	@ (80010f4 <main+0x338>)
 8000f08:	4872      	ldr	r0, [pc, #456]	@ (80010d4 <main+0x318>)
 8000f0a:	f7ff fa77 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f002 fee8 	bl	8003ce4 <buzzer>
            int delay_time = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <main+0x168>
                delay_time = 5;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	e00a      	b.n	8000f3a <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8000f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d102      	bne.n	8000f30 <main+0x174>
                delay_time = 10;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f2e:	e004      	b.n	8000f3a <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8000f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dd01      	ble.n	8000f3a <main+0x17e>
                delay_time = 20;
 8000f36:	2314      	movs	r3, #20
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3e:	e012      	b.n	8000f66 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000f40:	4638      	mov	r0, r7
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	4a6c      	ldr	r2, [pc, #432]	@ (80010f8 <main+0x33c>)
 8000f46:	2110      	movs	r1, #16
 8000f48:	f00c f9f6 	bl	800d338 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80010fc <main+0x340>)
 8000f50:	4619      	mov	r1, r3
 8000f52:	4860      	ldr	r0, [pc, #384]	@ (80010d4 <main+0x318>)
 8000f54:	f7ff fa52 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000f58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5c:	f003 fbd0 	bl	8004700 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	3b01      	subs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dce9      	bgt.n	8000f40 <main+0x184>
            }
        }
        HAL_Delay(2000);
 8000f6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f70:	f003 fbc6 	bl	8004700 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000f74:	4857      	ldr	r0, [pc, #348]	@ (80010d4 <main+0x318>)
 8000f76:	f7ff fa31 	bl	80003dc <CLCD_I2C_Clear>
 8000f7a:	e0a3      	b.n	80010c4 <main+0x308>
    }
    else if (selected_key != 0)
 8000f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d067      	beq.n	8001054 <main+0x298>
    {
    	buzzer(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 fead 	bl	8003ce4 <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000f90:	4b5b      	ldr	r3, [pc, #364]	@ (8001100 <main+0x344>)
 8000f92:	220f      	movs	r2, #15
 8000f94:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000f96:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f9a:	3b41      	subs	r3, #65	@ 0x41
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	f200 8090 	bhi.w	80010c2 <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	484b      	ldr	r0, [pc, #300]	@ (80010d4 <main+0x318>)
 8000fa8:	f7ff f9ae 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000fac:	4955      	ldr	r1, [pc, #340]	@ (8001104 <main+0x348>)
 8000fae:	4849      	ldr	r0, [pc, #292]	@ (80010d4 <main+0x318>)
 8000fb0:	f7ff f9fd 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000fb4:	e011      	b.n	8000fda <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000fb6:	4854      	ldr	r0, [pc, #336]	@ (8001108 <main+0x34c>)
 8000fb8:	f002 ff0a 	bl	8003dd0 <TM_MFRC522_Check>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10b      	bne.n	8000fda <main+0x21e>
                {
                    key = CheckListUID(CardID);
 8000fc2:	4851      	ldr	r0, [pc, #324]	@ (8001108 <main+0x34c>)
 8000fc4:	f001 fefc 	bl	8002dc0 <CheckListUID>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 4;
 8000fce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8000fd8:	e003      	b.n	8000fe2 <main+0x226>
            while (exitmenu)
 8000fda:	4b49      	ldr	r3, [pc, #292]	@ (8001100 <main+0x344>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1e9      	bne.n	8000fb6 <main+0x1fa>
                }
            }

            switch (key)
 8000fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d11b      	bne.n	8001022 <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 8000fea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fee:	2b41      	cmp	r3, #65	@ 0x41
 8000ff0:	d102      	bne.n	8000ff8 <main+0x23c>
                    RFID();
 8000ff2:	f000 fa9b 	bl	800152c <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8000ff6:	e02b      	b.n	8001050 <main+0x294>
                else if (selected_key == 'B')
 8000ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ffc:	2b42      	cmp	r3, #66	@ 0x42
 8000ffe:	d102      	bne.n	8001006 <main+0x24a>
                    FACEID();
 8001000:	f001 f9e8 	bl	80023d4 <FACEID>
                break;
 8001004:	e024      	b.n	8001050 <main+0x294>
                else if (selected_key == 'C')
 8001006:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800100a:	2b43      	cmp	r3, #67	@ 0x43
 800100c:	d102      	bne.n	8001014 <main+0x258>
                    FINGER();
 800100e:	f001 fd9b 	bl	8002b48 <FINGER>
                break;
 8001012:	e01d      	b.n	8001050 <main+0x294>
                else if (selected_key == 'D')
 8001014:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001018:	2b44      	cmp	r3, #68	@ 0x44
 800101a:	d119      	bne.n	8001050 <main+0x294>
                    PASSWORD();
 800101c:	f001 fe28 	bl	8002c70 <PASSWORD>
                break;
 8001020:	e016      	b.n	8001050 <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 8001022:	482c      	ldr	r0, [pc, #176]	@ (80010d4 <main+0x318>)
 8001024:	f7ff f9da 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	4829      	ldr	r0, [pc, #164]	@ (80010d4 <main+0x318>)
 800102e:	f7ff f96b 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8001032:	4936      	ldr	r1, [pc, #216]	@ (800110c <main+0x350>)
 8001034:	4827      	ldr	r0, [pc, #156]	@ (80010d4 <main+0x318>)
 8001036:	f7ff f9ba 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(5);
 800103a:	2005      	movs	r0, #5
 800103c:	f002 fe52 	bl	8003ce4 <buzzer>
                HAL_Delay(2000);
 8001040:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001044:	f003 fb5c 	bl	8004700 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001048:	4822      	ldr	r0, [pc, #136]	@ (80010d4 <main+0x318>)
 800104a:	f7ff f9c7 	bl	80003dc <CLCD_I2C_Clear>
                break;
 800104e:	e000      	b.n	8001052 <main+0x296>
                break;
 8001050:	bf00      	nop
            }
            break;
 8001052:	e037      	b.n	80010c4 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001054:	482c      	ldr	r0, [pc, #176]	@ (8001108 <main+0x34c>)
 8001056:	f002 febb 	bl	8003dd0 <TM_MFRC522_Check>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d128      	bne.n	80010b2 <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 8001060:	4829      	ldr	r0, [pc, #164]	@ (8001108 <main+0x34c>)
 8001062:	f001 fead 	bl	8002dc0 <CheckListUID>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00e      	beq.n	800108a <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 800106c:	4819      	ldr	r0, [pc, #100]	@ (80010d4 <main+0x318>)
 800106e:	f7ff f9b5 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	4817      	ldr	r0, [pc, #92]	@ (80010d4 <main+0x318>)
 8001078:	f7ff f946 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 800107c:	491c      	ldr	r1, [pc, #112]	@ (80010f0 <main+0x334>)
 800107e:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <main+0x318>)
 8001080:	f7ff f995 	bl	80003ae <CLCD_I2C_WriteString>
            opendoor();
 8001084:	f002 fdde 	bl	8003c44 <opendoor>
 8001088:	e01c      	b.n	80010c4 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 800108a:	4812      	ldr	r0, [pc, #72]	@ (80010d4 <main+0x318>)
 800108c:	f7ff f9a6 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	480f      	ldr	r0, [pc, #60]	@ (80010d4 <main+0x318>)
 8001096:	f7ff f937 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 800109a:	491d      	ldr	r1, [pc, #116]	@ (8001110 <main+0x354>)
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <main+0x318>)
 800109e:	f7ff f986 	bl	80003ae <CLCD_I2C_WriteString>
            buzzer(5);
 80010a2:	2005      	movs	r0, #5
 80010a4:	f002 fe1e 	bl	8003ce4 <buzzer>
            HAL_Delay(2000);
 80010a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ac:	f003 fb28 	bl	8004700 <HAL_Delay>
 80010b0:	e008      	b.n	80010c4 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <main+0x358>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <main+0x308>
    {
        startface();
 80010bc:	f002 fc8c 	bl	80039d8 <startface>
 80010c0:	e000      	b.n	80010c4 <main+0x308>
            break;
 80010c2:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 80010c4:	f7ff fe56 	bl	8000d74 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 80010c8:	f7ff fe68 	bl	8000d9c <process_fingerprint>
  {
 80010cc:	e6d9      	b.n	8000e82 <main+0xc6>
 80010ce:	bf00      	nop
 80010d0:	2000021c 	.word	0x2000021c
 80010d4:	200003d8 	.word	0x200003d8
 80010d8:	40010800 	.word	0x40010800
 80010dc:	0800f400 	.word	0x0800f400
 80010e0:	200002c8 	.word	0x200002c8
 80010e4:	0800dd18 	.word	0x0800dd18
 80010e8:	0800dd28 	.word	0x0800dd28
 80010ec:	0800dd2c 	.word	0x0800dd2c
 80010f0:	0800dd3c 	.word	0x0800dd3c
 80010f4:	0800dd48 	.word	0x0800dd48
 80010f8:	0800dd58 	.word	0x0800dd58
 80010fc:	0800dd68 	.word	0x0800dd68
 8001100:	20000020 	.word	0x20000020
 8001104:	0800dd78 	.word	0x0800dd78
 8001108:	200003e4 	.word	0x200003e4
 800110c:	0800dd88 	.word	0x0800dd88
 8001110:	0800dd98 	.word	0x0800dd98
 8001114:	20000350 	.word	0x20000350

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	@ 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001122:	2228      	movs	r2, #40	@ 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00c f95a 	bl	800d3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	2301      	movs	r3, #1
 8001158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001164:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116e:	4618      	mov	r0, r3
 8001170:	f005 ffa6 	bl	80070c0 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800117a:	f002 fdd7 	bl	8003d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800118e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fa12 	bl	80075c4 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011a6:	f002 fdc1 	bl	8003d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011aa:	2310      	movs	r3, #16
 80011ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011b2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 fb9c 	bl	80078f4 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011c2:	f002 fdb3 	bl	8003d2c <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	@ 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C2_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C2_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C2_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C2_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C2_Init+0x50>)
 800120e:	f003 ff7f 	bl	8005110 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001218:	f002 fd88 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000021c 	.word	0x2000021c
 8001224:	40005800 	.word	0x40005800
 8001228:	000186a0 	.word	0x000186a0

0800122c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <MX_SPI1_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001260:	2230      	movs	r2, #48	@ 0x30
 8001262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001278:	220a      	movs	r2, #10
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_SPI1_Init+0x64>)
 800127e:	f006 fbef 	bl	8007a60 <HAL_SPI_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001288:	f002 fd50 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000270 	.word	0x20000270
 8001294:	40013000 	.word	0x40013000

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012be:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012cc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012e0:	f006 fe8a 	bl	8007ff8 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ea:	f002 fd1f 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012fc:	f007 f826 	bl	800834c <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001306:	f002 fd11 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM2_Init+0x98>)
 8001318:	f007 f9f8 	bl	800870c <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001322:	f002 fd03 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002c8 	.word	0x200002c8

08001334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART1_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001340:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800136c:	f007 fa3e 	bl	80087ec <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f002 fcd9 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000310 	.word	0x20000310
 8001384:	40013800 	.word	0x40013800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b5e      	ldr	r3, [pc, #376]	@ (8001518 <MX_GPIO_Init+0x190>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b55      	ldr	r3, [pc, #340]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a51      	ldr	r2, [pc, #324]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b49      	ldr	r3, [pc, #292]	@ (8001518 <MX_GPIO_Init+0x190>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001402:	4846      	ldr	r0, [pc, #280]	@ (800151c <MX_GPIO_Init+0x194>)
 8001404:	f003 fe49 	bl	800509a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001408:	2200      	movs	r2, #0
 800140a:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800140e:	4844      	ldr	r0, [pc, #272]	@ (8001520 <MX_GPIO_Init+0x198>)
 8001410:	f003 fe43 	bl	800509a <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800141a:	4840      	ldr	r0, [pc, #256]	@ (800151c <MX_GPIO_Init+0x194>)
 800141c:	f003 fe3d 	bl	800509a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8001420:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4619      	mov	r1, r3
 8001434:	483b      	ldr	r0, [pc, #236]	@ (8001524 <MX_GPIO_Init+0x19c>)
 8001436:	f003 fc95 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800143a:	2303      	movs	r3, #3
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	4833      	ldr	r0, [pc, #204]	@ (800151c <MX_GPIO_Init+0x194>)
 800144e:	f003 fc89 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001452:	2310      	movs	r3, #16
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2302      	movs	r3, #2
 8001460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	@ (800151c <MX_GPIO_Init+0x194>)
 800146a:	f003 fc7b 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800146e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4826      	ldr	r0, [pc, #152]	@ (8001520 <MX_GPIO_Init+0x198>)
 8001488:	f003 fc6c 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800148c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001492:	2311      	movs	r3, #17
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	481d      	ldr	r0, [pc, #116]	@ (800151c <MX_GPIO_Init+0x194>)
 80014a6:	f003 fc5d 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80014aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4816      	ldr	r0, [pc, #88]	@ (800151c <MX_GPIO_Init+0x194>)
 80014c4:	f003 fc4e 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 80014c8:	2308      	movs	r3, #8
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4810      	ldr	r0, [pc, #64]	@ (8001520 <MX_GPIO_Init+0x198>)
 80014e0:	f003 fc40 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_GPIO_Init+0x1a0>)
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <MX_GPIO_Init+0x198>)
 80014fa:	f003 fc33 	bl	8004d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2101      	movs	r1, #1
 8001502:	2017      	movs	r0, #23
 8001504:	f003 f9f7 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001508:	2017      	movs	r0, #23
 800150a:	f003 fa10 	bl	800492e <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40011000 	.word	0x40011000
 8001528:	10110000 	.word	0x10110000

0800152c <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
	buzzer(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f002 fbd6 	bl	8003ce4 <buzzer>
	exitmenu = 15;
 8001538:	4ba2      	ldr	r3, [pc, #648]	@ (80017c4 <RFID+0x298>)
 800153a:	220f      	movs	r2, #15
 800153c:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800153e:	23ff      	movs	r3, #255	@ 0xff
 8001540:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 8001542:	4aa1      	ldr	r2, [pc, #644]	@ (80017c8 <RFID+0x29c>)
 8001544:	49a1      	ldr	r1, [pc, #644]	@ (80017cc <RFID+0x2a0>)
 8001546:	48a2      	ldr	r0, [pc, #648]	@ (80017d0 <RFID+0x2a4>)
 8001548:	f7fe ff58 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 800154c:	f000 befc 	b.w	8002348 <RFID+0xe1c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001550:	200a      	movs	r0, #10
 8001552:	f7ff f8ad 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001556:	4603      	mov	r3, r0
 8001558:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 800155a:	797b      	ldrb	r3, [r7, #5]
 800155c:	2b2a      	cmp	r3, #42	@ 0x2a
 800155e:	d131      	bne.n	80015c4 <RFID+0x98>
		{
			buzzer(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f002 fbbf 	bl	8003ce4 <buzzer>
			exitmenu = 15;
 8001566:	4b97      	ldr	r3, [pc, #604]	@ (80017c4 <RFID+0x298>)
 8001568:	220f      	movs	r2, #15
 800156a:	701a      	strb	r2, [r3, #0]
			status++;
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	3301      	adds	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d801      	bhi.n	800157c <RFID+0x50>
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	e000      	b.n	800157e <RFID+0x52>
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d012      	beq.n	80015ac <RFID+0x80>
 8001586:	2b02      	cmp	r3, #2
 8001588:	dc16      	bgt.n	80015b8 <RFID+0x8c>
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <RFID+0x68>
 800158e:	2b01      	cmp	r3, #1
 8001590:	d006      	beq.n	80015a0 <RFID+0x74>
 8001592:	e011      	b.n	80015b8 <RFID+0x8c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001594:	4a8f      	ldr	r2, [pc, #572]	@ (80017d4 <RFID+0x2a8>)
 8001596:	498d      	ldr	r1, [pc, #564]	@ (80017cc <RFID+0x2a0>)
 8001598:	488d      	ldr	r0, [pc, #564]	@ (80017d0 <RFID+0x2a4>)
 800159a:	f7fe ff2f 	bl	80003fc <CLCD_I2C_Display>
				break;
 800159e:	e011      	b.n	80015c4 <RFID+0x98>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80015a0:	4a8d      	ldr	r2, [pc, #564]	@ (80017d8 <RFID+0x2ac>)
 80015a2:	498a      	ldr	r1, [pc, #552]	@ (80017cc <RFID+0x2a0>)
 80015a4:	488a      	ldr	r0, [pc, #552]	@ (80017d0 <RFID+0x2a4>)
 80015a6:	f7fe ff29 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015aa:	e00b      	b.n	80015c4 <RFID+0x98>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80015ac:	4a8b      	ldr	r2, [pc, #556]	@ (80017dc <RFID+0x2b0>)
 80015ae:	4987      	ldr	r1, [pc, #540]	@ (80017cc <RFID+0x2a0>)
 80015b0:	4887      	ldr	r0, [pc, #540]	@ (80017d0 <RFID+0x2a4>)
 80015b2:	f7fe ff23 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015b6:	e005      	b.n	80015c4 <RFID+0x98>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80015b8:	4a89      	ldr	r2, [pc, #548]	@ (80017e0 <RFID+0x2b4>)
 80015ba:	4984      	ldr	r1, [pc, #528]	@ (80017cc <RFID+0x2a0>)
 80015bc:	4884      	ldr	r0, [pc, #528]	@ (80017d0 <RFID+0x2a4>)
 80015be:	f7fe ff1d 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015c2:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	2b23      	cmp	r3, #35	@ 0x23
 80015c8:	f040 86be 	bne.w	8002348 <RFID+0xe1c>
		{
			buzzer(1);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f002 fb89 	bl	8003ce4 <buzzer>
			exitmenu = 15;
 80015d2:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <RFID+0x298>)
 80015d4:	220f      	movs	r2, #15
 80015d6:	701a      	strb	r2, [r3, #0]
			switch (status)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f000 86a8 	beq.w	8002330 <RFID+0xe04>
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	f300 86ad 	bgt.w	8002340 <RFID+0xe14>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <RFID+0xc8>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f000 8252 	beq.w	8001a94 <RFID+0x568>
 80015f0:	f000 bea6 	b.w	8002340 <RFID+0xe14>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80015f4:	4a7b      	ldr	r2, [pc, #492]	@ (80017e4 <RFID+0x2b8>)
 80015f6:	497c      	ldr	r1, [pc, #496]	@ (80017e8 <RFID+0x2bc>)
 80015f8:	4875      	ldr	r0, [pc, #468]	@ (80017d0 <RFID+0x2a4>)
 80015fa:	f7fe feff 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001606:	e23a      	b.n	8001a7e <RFID+0x552>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f7ff f851 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800160e:	4603      	mov	r3, r0
 8001610:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8001612:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <RFID+0x298>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <RFID+0x100>
					{
						CLCD_I2C_Clear(&LCD1);
 800161a:	486d      	ldr	r0, [pc, #436]	@ (80017d0 <RFID+0x2a4>)
 800161c:	f7fe fede 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001624:	f003 f86c 	bl	8004700 <HAL_Delay>
						return;
 8001628:	f000 be96 	b.w	8002358 <RFID+0xe2c>
					}
					if (key_pressed =='*')
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001630:	d127      	bne.n	8001682 <RFID+0x156>
					{
						buzzer(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f002 fb56 	bl	8003ce4 <buzzer>
						exitmenu = 15;
 8001638:	4b62      	ldr	r3, [pc, #392]	@ (80017c4 <RFID+0x298>)
 800163a:	220f      	movs	r2, #15
 800163c:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800163e:	7dbb      	ldrb	r3, [r7, #22]
 8001640:	3301      	adds	r3, #1
 8001642:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001644:	7dbb      	ldrb	r3, [r7, #22]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d801      	bhi.n	800164e <RFID+0x122>
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	e000      	b.n	8001650 <RFID+0x124>
 800164e:	2300      	movs	r3, #0
 8001650:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001652:	7dbb      	ldrb	r3, [r7, #22]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d002      	beq.n	800165e <RFID+0x132>
 8001658:	2b02      	cmp	r3, #2
 800165a:	d006      	beq.n	800166a <RFID+0x13e>
 800165c:	e00b      	b.n	8001676 <RFID+0x14a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 800165e:	4a63      	ldr	r2, [pc, #396]	@ (80017ec <RFID+0x2c0>)
 8001660:	4963      	ldr	r1, [pc, #396]	@ (80017f0 <RFID+0x2c4>)
 8001662:	485b      	ldr	r0, [pc, #364]	@ (80017d0 <RFID+0x2a4>)
 8001664:	f7fe feca 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001668:	e00b      	b.n	8001682 <RFID+0x156>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800166a:	4a62      	ldr	r2, [pc, #392]	@ (80017f4 <RFID+0x2c8>)
 800166c:	4960      	ldr	r1, [pc, #384]	@ (80017f0 <RFID+0x2c4>)
 800166e:	4858      	ldr	r0, [pc, #352]	@ (80017d0 <RFID+0x2a4>)
 8001670:	f7fe fec4 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001674:	e005      	b.n	8001682 <RFID+0x156>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 8001676:	4a5a      	ldr	r2, [pc, #360]	@ (80017e0 <RFID+0x2b4>)
 8001678:	495d      	ldr	r1, [pc, #372]	@ (80017f0 <RFID+0x2c4>)
 800167a:	4855      	ldr	r0, [pc, #340]	@ (80017d0 <RFID+0x2a4>)
 800167c:	f7fe febe 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001680:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001682:	797b      	ldrb	r3, [r7, #5]
 8001684:	2b23      	cmp	r3, #35	@ 0x23
 8001686:	f040 81fa 	bne.w	8001a7e <RFID+0x552>
					{
						buzzer(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f002 fb2a 	bl	8003ce4 <buzzer>
						exitmenu = 15;
 8001690:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <RFID+0x298>)
 8001692:	220f      	movs	r2, #15
 8001694:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8001696:	7dbb      	ldrb	r3, [r7, #22]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <RFID+0x178>
 800169c:	2b02      	cmp	r3, #2
 800169e:	f000 810a 	beq.w	80018b6 <RFID+0x38a>
 80016a2:	e1e9      	b.n	8001a78 <RFID+0x54c>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80016a4:	4a4f      	ldr	r2, [pc, #316]	@ (80017e4 <RFID+0x2b8>)
 80016a6:	4950      	ldr	r1, [pc, #320]	@ (80017e8 <RFID+0x2bc>)
 80016a8:	4849      	ldr	r0, [pc, #292]	@ (80017d0 <RFID+0x2a4>)
 80016aa:	f7fe fea7 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80016b6:	e0f4      	b.n	80018a2 <RFID+0x376>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80016b8:	200a      	movs	r0, #10
 80016ba:	f7fe fff9 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80016be:	4603      	mov	r3, r0
 80016c0:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80016c2:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <RFID+0x298>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d108      	bne.n	80016dc <RFID+0x1b0>
								{
									CLCD_I2C_Clear(&LCD1);
 80016ca:	4841      	ldr	r0, [pc, #260]	@ (80017d0 <RFID+0x2a4>)
 80016cc:	f7fe fe86 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80016d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d4:	f003 f814 	bl	8004700 <HAL_Delay>
									return;
 80016d8:	f000 be3e 	b.w	8002358 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 80016dc:	797b      	ldrb	r3, [r7, #5]
 80016de:	2b2a      	cmp	r3, #42	@ 0x2a
 80016e0:	d131      	bne.n	8001746 <RFID+0x21a>
								{
									buzzer(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f002 fafe 	bl	8003ce4 <buzzer>
									exitmenu = 15;
 80016e8:	4b36      	ldr	r3, [pc, #216]	@ (80017c4 <RFID+0x298>)
 80016ea:	220f      	movs	r2, #15
 80016ec:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d801      	bhi.n	80016fe <RFID+0x1d2>
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	e000      	b.n	8001700 <RFID+0x1d4>
 80016fe:	2300      	movs	r3, #0
 8001700:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8001702:	7d3b      	ldrb	r3, [r7, #20]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d012      	beq.n	800172e <RFID+0x202>
 8001708:	2b03      	cmp	r3, #3
 800170a:	dc16      	bgt.n	800173a <RFID+0x20e>
 800170c:	2b01      	cmp	r3, #1
 800170e:	d002      	beq.n	8001716 <RFID+0x1ea>
 8001710:	2b02      	cmp	r3, #2
 8001712:	d006      	beq.n	8001722 <RFID+0x1f6>
 8001714:	e011      	b.n	800173a <RFID+0x20e>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 8001716:	4a38      	ldr	r2, [pc, #224]	@ (80017f8 <RFID+0x2cc>)
 8001718:	4938      	ldr	r1, [pc, #224]	@ (80017fc <RFID+0x2d0>)
 800171a:	482d      	ldr	r0, [pc, #180]	@ (80017d0 <RFID+0x2a4>)
 800171c:	f7fe fe6e 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001720:	e011      	b.n	8001746 <RFID+0x21a>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001722:	4a37      	ldr	r2, [pc, #220]	@ (8001800 <RFID+0x2d4>)
 8001724:	4935      	ldr	r1, [pc, #212]	@ (80017fc <RFID+0x2d0>)
 8001726:	482a      	ldr	r0, [pc, #168]	@ (80017d0 <RFID+0x2a4>)
 8001728:	f7fe fe68 	bl	80003fc <CLCD_I2C_Display>
										break;
 800172c:	e00b      	b.n	8001746 <RFID+0x21a>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 800172e:	4a35      	ldr	r2, [pc, #212]	@ (8001804 <RFID+0x2d8>)
 8001730:	4932      	ldr	r1, [pc, #200]	@ (80017fc <RFID+0x2d0>)
 8001732:	4827      	ldr	r0, [pc, #156]	@ (80017d0 <RFID+0x2a4>)
 8001734:	f7fe fe62 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001738:	e005      	b.n	8001746 <RFID+0x21a>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 800173a:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <RFID+0x2b4>)
 800173c:	492f      	ldr	r1, [pc, #188]	@ (80017fc <RFID+0x2d0>)
 800173e:	4824      	ldr	r0, [pc, #144]	@ (80017d0 <RFID+0x2a4>)
 8001740:	f7fe fe5c 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001744:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	2b23      	cmp	r3, #35	@ 0x23
 800174a:	f040 80aa 	bne.w	80018a2 <RFID+0x376>
								{
									buzzer(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f002 fac8 	bl	8003ce4 <buzzer>
									exitmenu = 15;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <RFID+0x298>)
 8001756:	220f      	movs	r2, #15
 8001758:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	b2da      	uxtb	r2, r3
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 8001766:	7d3b      	ldrb	r3, [r7, #20]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d074      	beq.n	8001856 <RFID+0x32a>
 800176c:	2b03      	cmp	r3, #3
 800176e:	f300 8095 	bgt.w	800189c <RFID+0x370>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <RFID+0x250>
 8001776:	2b02      	cmp	r3, #2
 8001778:	d04a      	beq.n	8001810 <RFID+0x2e4>
 800177a:	e08f      	b.n	800189c <RFID+0x370>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fcae 	bl	80030e0 <CheckKey>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d011      	beq.n	80017ae <RFID+0x282>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 800178a:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <RFID+0x2dc>)
 800178c:	491f      	ldr	r1, [pc, #124]	@ (800180c <RFID+0x2e0>)
 800178e:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <RFID+0x2a4>)
 8001790:	f7fe fe34 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001794:	2003      	movs	r0, #3
 8001796:	f002 faa5 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 800179a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179e:	f002 ffaf 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017a2:	4a15      	ldr	r2, [pc, #84]	@ (80017f8 <RFID+0x2cc>)
 80017a4:	4915      	ldr	r1, [pc, #84]	@ (80017fc <RFID+0x2d0>)
 80017a6:	480a      	ldr	r0, [pc, #40]	@ (80017d0 <RFID+0x2a4>)
 80017a8:	f7fe fe28 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80017ac:	e079      	b.n	80018a2 <RFID+0x376>
											adduid(keyadd1);
 80017ae:	787b      	ldrb	r3, [r7, #1]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fb67 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <RFID+0x2cc>)
 80017b8:	4910      	ldr	r1, [pc, #64]	@ (80017fc <RFID+0x2d0>)
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <RFID+0x2a4>)
 80017bc:	f7fe fe1e 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017c0:	e06f      	b.n	80018a2 <RFID+0x376>
 80017c2:	bf00      	nop
 80017c4:	20000020 	.word	0x20000020
 80017c8:	0800dda8 	.word	0x0800dda8
 80017cc:	0800ddb8 	.word	0x0800ddb8
 80017d0:	200003d8 	.word	0x200003d8
 80017d4:	0800ddc8 	.word	0x0800ddc8
 80017d8:	0800ddd4 	.word	0x0800ddd4
 80017dc:	0800dde4 	.word	0x0800dde4
 80017e0:	0800ddf4 	.word	0x0800ddf4
 80017e4:	0800ddfc 	.word	0x0800ddfc
 80017e8:	0800de08 	.word	0x0800de08
 80017ec:	0800de18 	.word	0x0800de18
 80017f0:	0800de28 	.word	0x0800de28
 80017f4:	0800de34 	.word	0x0800de34
 80017f8:	0800de44 	.word	0x0800de44
 80017fc:	0800de58 	.word	0x0800de58
 8001800:	0800de68 	.word	0x0800de68
 8001804:	0800de7c 	.word	0x0800de7c
 8001808:	0800de90 	.word	0x0800de90
 800180c:	0800dea4 	.word	0x0800dea4
									case 2:
										if (CheckKey(keyadd1) != 0)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fc64 	bl	80030e0 <CheckKey>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d011      	beq.n	8001842 <RFID+0x316>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 800181e:	4aac      	ldr	r2, [pc, #688]	@ (8001ad0 <RFID+0x5a4>)
 8001820:	49ac      	ldr	r1, [pc, #688]	@ (8001ad4 <RFID+0x5a8>)
 8001822:	48ad      	ldr	r0, [pc, #692]	@ (8001ad8 <RFID+0x5ac>)
 8001824:	f7fe fdea 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001828:	2003      	movs	r0, #3
 800182a:	f002 fa5b 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 800182e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001832:	f002 ff65 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001836:	4aa9      	ldr	r2, [pc, #676]	@ (8001adc <RFID+0x5b0>)
 8001838:	49a9      	ldr	r1, [pc, #676]	@ (8001ae0 <RFID+0x5b4>)
 800183a:	48a7      	ldr	r0, [pc, #668]	@ (8001ad8 <RFID+0x5ac>)
 800183c:	f7fe fdde 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001840:	e02f      	b.n	80018a2 <RFID+0x376>
											adduid(keyadd1);
 8001842:	787b      	ldrb	r3, [r7, #1]
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fb1d 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800184a:	4aa4      	ldr	r2, [pc, #656]	@ (8001adc <RFID+0x5b0>)
 800184c:	49a4      	ldr	r1, [pc, #656]	@ (8001ae0 <RFID+0x5b4>)
 800184e:	48a2      	ldr	r0, [pc, #648]	@ (8001ad8 <RFID+0x5ac>)
 8001850:	f7fe fdd4 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001854:	e025      	b.n	80018a2 <RFID+0x376>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fc41 	bl	80030e0 <CheckKey>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d011      	beq.n	8001888 <RFID+0x35c>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 8001864:	4a9f      	ldr	r2, [pc, #636]	@ (8001ae4 <RFID+0x5b8>)
 8001866:	49a0      	ldr	r1, [pc, #640]	@ (8001ae8 <RFID+0x5bc>)
 8001868:	489b      	ldr	r0, [pc, #620]	@ (8001ad8 <RFID+0x5ac>)
 800186a:	f7fe fdc7 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 800186e:	2003      	movs	r0, #3
 8001870:	f002 fa38 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 8001874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001878:	f002 ff42 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 800187c:	4a9b      	ldr	r2, [pc, #620]	@ (8001aec <RFID+0x5c0>)
 800187e:	4998      	ldr	r1, [pc, #608]	@ (8001ae0 <RFID+0x5b4>)
 8001880:	4895      	ldr	r0, [pc, #596]	@ (8001ad8 <RFID+0x5ac>)
 8001882:	f7fe fdbb 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 8001886:	e00c      	b.n	80018a2 <RFID+0x376>
											adduid(keyadd1);
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fafa 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001890:	4a96      	ldr	r2, [pc, #600]	@ (8001aec <RFID+0x5c0>)
 8001892:	4993      	ldr	r1, [pc, #588]	@ (8001ae0 <RFID+0x5b4>)
 8001894:	4890      	ldr	r0, [pc, #576]	@ (8001ad8 <RFID+0x5ac>)
 8001896:	f7fe fdb1 	bl	80003fc <CLCD_I2C_Display>
										break;
 800189a:	e002      	b.n	80018a2 <RFID+0x376>
									default:
										back11 = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	74fb      	strb	r3, [r7, #19]
										break;
 80018a0:	bf00      	nop
							while (back11 == 1)
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f43f af07 	beq.w	80016b8 <RFID+0x18c>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018aa:	4a91      	ldr	r2, [pc, #580]	@ (8001af0 <RFID+0x5c4>)
 80018ac:	4991      	ldr	r1, [pc, #580]	@ (8001af4 <RFID+0x5c8>)
 80018ae:	488a      	ldr	r0, [pc, #552]	@ (8001ad8 <RFID+0x5ac>)
 80018b0:	f7fe fda4 	bl	80003fc <CLCD_I2C_Display>
							break;
 80018b4:	e0e3      	b.n	8001a7e <RFID+0x552>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80018b6:	4a90      	ldr	r2, [pc, #576]	@ (8001af8 <RFID+0x5cc>)
 80018b8:	4990      	ldr	r1, [pc, #576]	@ (8001afc <RFID+0x5d0>)
 80018ba:	4887      	ldr	r0, [pc, #540]	@ (8001ad8 <RFID+0x5ac>)
 80018bc:	f7fe fd9e 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80018c8:	e0cc      	b.n	8001a64 <RFID+0x538>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f7fe fef0 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80018d0:	4603      	mov	r3, r0
 80018d2:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80018d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001b00 <RFID+0x5d4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d108      	bne.n	80018ee <RFID+0x3c2>
								{
									CLCD_I2C_Clear(&LCD1);
 80018dc:	487e      	ldr	r0, [pc, #504]	@ (8001ad8 <RFID+0x5ac>)
 80018de:	f7fe fd7d 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80018e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018e6:	f002 ff0b 	bl	8004700 <HAL_Delay>
									return;
 80018ea:	f000 bd35 	b.w	8002358 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80018f2:	d131      	bne.n	8001958 <RFID+0x42c>
								{
									buzzer(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f002 f9f5 	bl	8003ce4 <buzzer>
									exitmenu = 15;
 80018fa:	4b81      	ldr	r3, [pc, #516]	@ (8001b00 <RFID+0x5d4>)
 80018fc:	220f      	movs	r2, #15
 80018fe:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8001900:	7cbb      	ldrb	r3, [r7, #18]
 8001902:	3301      	adds	r3, #1
 8001904:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001906:	7cbb      	ldrb	r3, [r7, #18]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d801      	bhi.n	8001910 <RFID+0x3e4>
 800190c:	7cbb      	ldrb	r3, [r7, #18]
 800190e:	e000      	b.n	8001912 <RFID+0x3e6>
 8001910:	2300      	movs	r3, #0
 8001912:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001914:	7cbb      	ldrb	r3, [r7, #18]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d012      	beq.n	8001940 <RFID+0x414>
 800191a:	2b03      	cmp	r3, #3
 800191c:	dc16      	bgt.n	800194c <RFID+0x420>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d002      	beq.n	8001928 <RFID+0x3fc>
 8001922:	2b02      	cmp	r3, #2
 8001924:	d006      	beq.n	8001934 <RFID+0x408>
 8001926:	e011      	b.n	800194c <RFID+0x420>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001928:	4a76      	ldr	r2, [pc, #472]	@ (8001b04 <RFID+0x5d8>)
 800192a:	4977      	ldr	r1, [pc, #476]	@ (8001b08 <RFID+0x5dc>)
 800192c:	486a      	ldr	r0, [pc, #424]	@ (8001ad8 <RFID+0x5ac>)
 800192e:	f7fe fd65 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001932:	e011      	b.n	8001958 <RFID+0x42c>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001934:	4a75      	ldr	r2, [pc, #468]	@ (8001b0c <RFID+0x5e0>)
 8001936:	4974      	ldr	r1, [pc, #464]	@ (8001b08 <RFID+0x5dc>)
 8001938:	4867      	ldr	r0, [pc, #412]	@ (8001ad8 <RFID+0x5ac>)
 800193a:	f7fe fd5f 	bl	80003fc <CLCD_I2C_Display>
										break;
 800193e:	e00b      	b.n	8001958 <RFID+0x42c>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001940:	4a73      	ldr	r2, [pc, #460]	@ (8001b10 <RFID+0x5e4>)
 8001942:	4971      	ldr	r1, [pc, #452]	@ (8001b08 <RFID+0x5dc>)
 8001944:	4864      	ldr	r0, [pc, #400]	@ (8001ad8 <RFID+0x5ac>)
 8001946:	f7fe fd59 	bl	80003fc <CLCD_I2C_Display>
										break;
 800194a:	e005      	b.n	8001958 <RFID+0x42c>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 800194c:	4a71      	ldr	r2, [pc, #452]	@ (8001b14 <RFID+0x5e8>)
 800194e:	496e      	ldr	r1, [pc, #440]	@ (8001b08 <RFID+0x5dc>)
 8001950:	4861      	ldr	r0, [pc, #388]	@ (8001ad8 <RFID+0x5ac>)
 8001952:	f7fe fd53 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001956:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001958:	797b      	ldrb	r3, [r7, #5]
 800195a:	2b23      	cmp	r3, #35	@ 0x23
 800195c:	f040 8082 	bne.w	8001a64 <RFID+0x538>
								{
									buzzer(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f002 f9bf 	bl	8003ce4 <buzzer>
									exitmenu = 15;
 8001966:	4b66      	ldr	r3, [pc, #408]	@ (8001b00 <RFID+0x5d4>)
 8001968:	220f      	movs	r2, #15
 800196a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	b2da      	uxtb	r2, r3
 8001972:	7cbb      	ldrb	r3, [r7, #18]
 8001974:	4413      	add	r3, r2
 8001976:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 8001978:	7cbb      	ldrb	r3, [r7, #18]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d04c      	beq.n	8001a18 <RFID+0x4ec>
 800197e:	2b03      	cmp	r3, #3
 8001980:	dc6d      	bgt.n	8001a5e <RFID+0x532>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d002      	beq.n	800198c <RFID+0x460>
 8001986:	2b02      	cmp	r3, #2
 8001988:	d023      	beq.n	80019d2 <RFID+0x4a6>
 800198a:	e068      	b.n	8001a5e <RFID+0x532>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fba6 	bl	80030e0 <CheckKey>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d011      	beq.n	80019be <RFID+0x492>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 800199a:	4a5f      	ldr	r2, [pc, #380]	@ (8001b18 <RFID+0x5ec>)
 800199c:	495f      	ldr	r1, [pc, #380]	@ (8001b1c <RFID+0x5f0>)
 800199e:	484e      	ldr	r0, [pc, #312]	@ (8001ad8 <RFID+0x5ac>)
 80019a0:	f7fe fd2c 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f002 f99d 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ae:	f002 fea7 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80019b2:	4a54      	ldr	r2, [pc, #336]	@ (8001b04 <RFID+0x5d8>)
 80019b4:	4954      	ldr	r1, [pc, #336]	@ (8001b08 <RFID+0x5dc>)
 80019b6:	4848      	ldr	r0, [pc, #288]	@ (8001ad8 <RFID+0x5ac>)
 80019b8:	f7fe fd20 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80019bc:	e052      	b.n	8001a64 <RFID+0x538>
											adduid(keyadd2);
 80019be:	78bb      	ldrb	r3, [r7, #2]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fa5f 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80019c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001b04 <RFID+0x5d8>)
 80019c8:	494f      	ldr	r1, [pc, #316]	@ (8001b08 <RFID+0x5dc>)
 80019ca:	4843      	ldr	r0, [pc, #268]	@ (8001ad8 <RFID+0x5ac>)
 80019cc:	f7fe fd16 	bl	80003fc <CLCD_I2C_Display>
										break;
 80019d0:	e048      	b.n	8001a64 <RFID+0x538>
									case 2:
										if (CheckKey(keyadd2) != 0)
 80019d2:	78bb      	ldrb	r3, [r7, #2]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fb83 	bl	80030e0 <CheckKey>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d011      	beq.n	8001a04 <RFID+0x4d8>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 80019e0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad0 <RFID+0x5a4>)
 80019e2:	494f      	ldr	r1, [pc, #316]	@ (8001b20 <RFID+0x5f4>)
 80019e4:	483c      	ldr	r0, [pc, #240]	@ (8001ad8 <RFID+0x5ac>)
 80019e6:	f7fe fd09 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80019ea:	2003      	movs	r0, #3
 80019ec:	f002 f97a 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f002 fe84 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 80019f8:	4a44      	ldr	r2, [pc, #272]	@ (8001b0c <RFID+0x5e0>)
 80019fa:	4943      	ldr	r1, [pc, #268]	@ (8001b08 <RFID+0x5dc>)
 80019fc:	4836      	ldr	r0, [pc, #216]	@ (8001ad8 <RFID+0x5ac>)
 80019fe:	f7fe fcfd 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001a02:	e02f      	b.n	8001a64 <RFID+0x538>
											adduid(keyadd2);
 8001a04:	78bb      	ldrb	r3, [r7, #2]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fa3c 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001b0c <RFID+0x5e0>)
 8001a0e:	493e      	ldr	r1, [pc, #248]	@ (8001b08 <RFID+0x5dc>)
 8001a10:	4831      	ldr	r0, [pc, #196]	@ (8001ad8 <RFID+0x5ac>)
 8001a12:	f7fe fcf3 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a16:	e025      	b.n	8001a64 <RFID+0x538>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fb60 	bl	80030e0 <CheckKey>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d011      	beq.n	8001a4a <RFID+0x51e>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001a26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <RFID+0x5b8>)
 8001a28:	493e      	ldr	r1, [pc, #248]	@ (8001b24 <RFID+0x5f8>)
 8001a2a:	482b      	ldr	r0, [pc, #172]	@ (8001ad8 <RFID+0x5ac>)
 8001a2c:	f7fe fce6 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f002 f957 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 8001a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3a:	f002 fe61 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a3e:	4a34      	ldr	r2, [pc, #208]	@ (8001b10 <RFID+0x5e4>)
 8001a40:	4931      	ldr	r1, [pc, #196]	@ (8001b08 <RFID+0x5dc>)
 8001a42:	4825      	ldr	r0, [pc, #148]	@ (8001ad8 <RFID+0x5ac>)
 8001a44:	f7fe fcda 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001a48:	e00c      	b.n	8001a64 <RFID+0x538>
											adduid(keyadd2);
 8001a4a:	78bb      	ldrb	r3, [r7, #2]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fa19 	bl	8002e84 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a52:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <RFID+0x5e4>)
 8001a54:	492c      	ldr	r1, [pc, #176]	@ (8001b08 <RFID+0x5dc>)
 8001a56:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <RFID+0x5ac>)
 8001a58:	f7fe fcd0 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a5c:	e002      	b.n	8001a64 <RFID+0x538>
									default:
										back12 = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	747b      	strb	r3, [r7, #17]
										break;
 8001a62:	bf00      	nop
							while (back12 == 1)
 8001a64:	7c7b      	ldrb	r3, [r7, #17]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f43f af2f 	beq.w	80018ca <RFID+0x39e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b28 <RFID+0x5fc>)
 8001a6e:	4921      	ldr	r1, [pc, #132]	@ (8001af4 <RFID+0x5c8>)
 8001a70:	4819      	ldr	r0, [pc, #100]	@ (8001ad8 <RFID+0x5ac>)
 8001a72:	f7fe fcc3 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001a76:	e002      	b.n	8001a7e <RFID+0x552>
						default:
							back = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	757b      	strb	r3, [r7, #21]
							break;
 8001a7c:	bf00      	nop
				while (back == 1)
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f43f adc1 	beq.w	8001608 <RFID+0xdc>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001a86:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <RFID+0x600>)
 8001a88:	4929      	ldr	r1, [pc, #164]	@ (8001b30 <RFID+0x604>)
 8001a8a:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <RFID+0x5ac>)
 8001a8c:	f7fe fcb6 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001a90:	f000 bc5a 	b.w	8002348 <RFID+0xe1c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a94:	4a18      	ldr	r2, [pc, #96]	@ (8001af8 <RFID+0x5cc>)
 8001a96:	4919      	ldr	r1, [pc, #100]	@ (8001afc <RFID+0x5d0>)
 8001a98:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <RFID+0x5ac>)
 8001a9a:	f7fe fcaf 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001a9e:	23ff      	movs	r3, #255	@ 0xff
 8001aa0:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001aa6:	f000 bc39 	b.w	800231c <RFID+0xdf0>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001aaa:	200a      	movs	r0, #10
 8001aac:	f7fe fe00 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <RFID+0x5d4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d13b      	bne.n	8001b34 <RFID+0x608>
					{
						CLCD_I2C_Clear(&LCD1);
 8001abc:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <RFID+0x5ac>)
 8001abe:	f7fe fc8d 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ac6:	f002 fe1b 	bl	8004700 <HAL_Delay>
						return;
 8001aca:	f000 bc45 	b.w	8002358 <RFID+0xe2c>
 8001ace:	bf00      	nop
 8001ad0:	0800deb0 	.word	0x0800deb0
 8001ad4:	0800dec4 	.word	0x0800dec4
 8001ad8:	200003d8 	.word	0x200003d8
 8001adc:	0800de68 	.word	0x0800de68
 8001ae0:	0800de58 	.word	0x0800de58
 8001ae4:	0800ded0 	.word	0x0800ded0
 8001ae8:	0800dee4 	.word	0x0800dee4
 8001aec:	0800de7c 	.word	0x0800de7c
 8001af0:	0800de18 	.word	0x0800de18
 8001af4:	0800de28 	.word	0x0800de28
 8001af8:	0800ddfc 	.word	0x0800ddfc
 8001afc:	0800de08 	.word	0x0800de08
 8001b00:	20000020 	.word	0x20000020
 8001b04:	0800def0 	.word	0x0800def0
 8001b08:	0800df00 	.word	0x0800df00
 8001b0c:	0800df10 	.word	0x0800df10
 8001b10:	0800df20 	.word	0x0800df20
 8001b14:	0800ddf4 	.word	0x0800ddf4
 8001b18:	0800de90 	.word	0x0800de90
 8001b1c:	0800df30 	.word	0x0800df30
 8001b20:	0800df3c 	.word	0x0800df3c
 8001b24:	0800df48 	.word	0x0800df48
 8001b28:	0800de34 	.word	0x0800de34
 8001b2c:	0800ddc8 	.word	0x0800ddc8
 8001b30:	0800ddb8 	.word	0x0800ddb8
					}
					if (key_pressed =='*')
 8001b34:	797b      	ldrb	r3, [r7, #5]
 8001b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b38:	d127      	bne.n	8001b8a <RFID+0x65e>
					{
						buzzer(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f002 f8d2 	bl	8003ce4 <buzzer>
						exitmenu = 15;
 8001b40:	4b95      	ldr	r3, [pc, #596]	@ (8001d98 <RFID+0x86c>)
 8001b42:	220f      	movs	r2, #15
 8001b44:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001b46:	7c3b      	ldrb	r3, [r7, #16]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001b4c:	7c3b      	ldrb	r3, [r7, #16]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d801      	bhi.n	8001b56 <RFID+0x62a>
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	e000      	b.n	8001b58 <RFID+0x62c>
 8001b56:	2300      	movs	r3, #0
 8001b58:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001b5a:	7c3b      	ldrb	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <RFID+0x63a>
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d006      	beq.n	8001b72 <RFID+0x646>
 8001b64:	e00b      	b.n	8001b7e <RFID+0x652>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001b66:	4a8d      	ldr	r2, [pc, #564]	@ (8001d9c <RFID+0x870>)
 8001b68:	498d      	ldr	r1, [pc, #564]	@ (8001da0 <RFID+0x874>)
 8001b6a:	488e      	ldr	r0, [pc, #568]	@ (8001da4 <RFID+0x878>)
 8001b6c:	f7fe fc46 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001b70:	e00b      	b.n	8001b8a <RFID+0x65e>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001b72:	4a8d      	ldr	r2, [pc, #564]	@ (8001da8 <RFID+0x87c>)
 8001b74:	498a      	ldr	r1, [pc, #552]	@ (8001da0 <RFID+0x874>)
 8001b76:	488b      	ldr	r0, [pc, #556]	@ (8001da4 <RFID+0x878>)
 8001b78:	f7fe fc40 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001b7c:	e005      	b.n	8001b8a <RFID+0x65e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001b7e:	4a8b      	ldr	r2, [pc, #556]	@ (8001dac <RFID+0x880>)
 8001b80:	4987      	ldr	r1, [pc, #540]	@ (8001da0 <RFID+0x874>)
 8001b82:	4888      	ldr	r0, [pc, #544]	@ (8001da4 <RFID+0x878>)
 8001b84:	f7fe fc3a 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001b88:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001b8a:	797b      	ldrb	r3, [r7, #5]
 8001b8c:	2b23      	cmp	r3, #35	@ 0x23
 8001b8e:	f040 83c5 	bne.w	800231c <RFID+0xdf0>
					{
						buzzer(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f002 f8a6 	bl	8003ce4 <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001b98:	4a85      	ldr	r2, [pc, #532]	@ (8001db0 <RFID+0x884>)
 8001b9a:	4986      	ldr	r1, [pc, #536]	@ (8001db4 <RFID+0x888>)
 8001b9c:	4881      	ldr	r0, [pc, #516]	@ (8001da4 <RFID+0x878>)
 8001b9e:	f7fe fc2d 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = 15;
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <RFID+0x86c>)
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001ba8:	7c3b      	ldrb	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <RFID+0x68a>
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	f000 83a9 	beq.w	8002306 <RFID+0xdda>
 8001bb4:	e3af      	b.n	8002316 <RFID+0xdea>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001bb6:	23ff      	movs	r3, #255	@ 0xff
 8001bb8:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001bbe:	e398      	b.n	80022f2 <RFID+0xdc6>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f7fe fd75 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001bca:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <RFID+0x86c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <RFID+0x6b6>
								{
									CLCD_I2C_Clear(&LCD1);
 8001bd2:	4874      	ldr	r0, [pc, #464]	@ (8001da4 <RFID+0x878>)
 8001bd4:	f7fe fc02 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bdc:	f002 fd90 	bl	8004700 <HAL_Delay>
									return;
 8001be0:	e3ba      	b.n	8002358 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 8001be2:	797b      	ldrb	r3, [r7, #5]
 8001be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001be6:	d124      	bne.n	8001c32 <RFID+0x706>
								{
									buzzer(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f002 f87b 	bl	8003ce4 <buzzer>
									statusrm1++;
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d801      	bhi.n	8001bfe <RFID+0x6d2>
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	e000      	b.n	8001c00 <RFID+0x6d4>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <RFID+0x6e2>
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d006      	beq.n	8001c1a <RFID+0x6ee>
 8001c0c:	e00b      	b.n	8001c26 <RFID+0x6fa>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001c0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001db8 <RFID+0x88c>)
 8001c10:	496a      	ldr	r1, [pc, #424]	@ (8001dbc <RFID+0x890>)
 8001c12:	4864      	ldr	r0, [pc, #400]	@ (8001da4 <RFID+0x878>)
 8001c14:	f7fe fbf2 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c18:	e00b      	b.n	8001c32 <RFID+0x706>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001c1a:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <RFID+0x894>)
 8001c1c:	4967      	ldr	r1, [pc, #412]	@ (8001dbc <RFID+0x890>)
 8001c1e:	4861      	ldr	r0, [pc, #388]	@ (8001da4 <RFID+0x878>)
 8001c20:	f7fe fbec 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c24:	e005      	b.n	8001c32 <RFID+0x706>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001c26:	4a61      	ldr	r2, [pc, #388]	@ (8001dac <RFID+0x880>)
 8001c28:	4964      	ldr	r1, [pc, #400]	@ (8001dbc <RFID+0x890>)
 8001c2a:	485e      	ldr	r0, [pc, #376]	@ (8001da4 <RFID+0x878>)
 8001c2c:	f7fe fbe6 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c30:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001c32:	797b      	ldrb	r3, [r7, #5]
 8001c34:	2b23      	cmp	r3, #35	@ 0x23
 8001c36:	f040 835c 	bne.w	80022f2 <RFID+0xdc6>
								{
									buzzer(1);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f002 f852 	bl	8003ce4 <buzzer>
									exitmenu = 15;
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <RFID+0x86c>)
 8001c42:	220f      	movs	r2, #15
 8001c44:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <RFID+0x728>
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f000 82eb 	beq.w	8002228 <RFID+0xcfc>
 8001c52:	e34b      	b.n	80022ec <RFID+0xdc0>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c54:	4a56      	ldr	r2, [pc, #344]	@ (8001db0 <RFID+0x884>)
 8001c56:	4957      	ldr	r1, [pc, #348]	@ (8001db4 <RFID+0x888>)
 8001c58:	4852      	ldr	r0, [pc, #328]	@ (8001da4 <RFID+0x878>)
 8001c5a:	f7fe fbcf 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001c66:	e2d5      	b.n	8002214 <RFID+0xce8>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7fe fd21 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001c72:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <RFID+0x86c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d107      	bne.n	8001c8a <RFID+0x75e>
											{
												CLCD_I2C_Clear(&LCD1);
 8001c7a:	484a      	ldr	r0, [pc, #296]	@ (8001da4 <RFID+0x878>)
 8001c7c:	f7fe fbae 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c84:	f002 fd3c 	bl	8004700 <HAL_Delay>
												return;
 8001c88:	e366      	b.n	8002358 <RFID+0xe2c>
											}
											if (key_pressed =='*')
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c8e:	d127      	bne.n	8001ce0 <RFID+0x7b4>
											{
												buzzer(1);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f002 f827 	bl	8003ce4 <buzzer>
												exitmenu = 15;
 8001c96:	4b40      	ldr	r3, [pc, #256]	@ (8001d98 <RFID+0x86c>)
 8001c98:	220f      	movs	r2, #15
 8001c9a:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001c9c:	7b3b      	ldrb	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001ca2:	7b3b      	ldrb	r3, [r7, #12]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d801      	bhi.n	8001cac <RFID+0x780>
 8001ca8:	7b3b      	ldrb	r3, [r7, #12]
 8001caa:	e000      	b.n	8001cae <RFID+0x782>
 8001cac:	2300      	movs	r3, #0
 8001cae:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001cb0:	7b3b      	ldrb	r3, [r7, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d002      	beq.n	8001cbc <RFID+0x790>
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d006      	beq.n	8001cc8 <RFID+0x79c>
 8001cba:	e00b      	b.n	8001cd4 <RFID+0x7a8>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001cbc:	4a41      	ldr	r2, [pc, #260]	@ (8001dc4 <RFID+0x898>)
 8001cbe:	4942      	ldr	r1, [pc, #264]	@ (8001dc8 <RFID+0x89c>)
 8001cc0:	4838      	ldr	r0, [pc, #224]	@ (8001da4 <RFID+0x878>)
 8001cc2:	f7fe fb9b 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001cc6:	e00b      	b.n	8001ce0 <RFID+0x7b4>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001cc8:	4a40      	ldr	r2, [pc, #256]	@ (8001dcc <RFID+0x8a0>)
 8001cca:	493f      	ldr	r1, [pc, #252]	@ (8001dc8 <RFID+0x89c>)
 8001ccc:	4835      	ldr	r0, [pc, #212]	@ (8001da4 <RFID+0x878>)
 8001cce:	f7fe fb95 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001cd2:	e005      	b.n	8001ce0 <RFID+0x7b4>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 8001cd4:	4a35      	ldr	r2, [pc, #212]	@ (8001dac <RFID+0x880>)
 8001cd6:	493c      	ldr	r1, [pc, #240]	@ (8001dc8 <RFID+0x89c>)
 8001cd8:	4832      	ldr	r0, [pc, #200]	@ (8001da4 <RFID+0x878>)
 8001cda:	f7fe fb8f 	bl	80003fc <CLCD_I2C_Display>
 8001cde:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	2b23      	cmp	r3, #35	@ 0x23
 8001ce4:	f040 8296 	bne.w	8002214 <RFID+0xce8>
											{
												buzzer(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f001 fffb 	bl	8003ce4 <buzzer>
												exitmenu = 15;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <RFID+0x86c>)
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d003      	beq.n	8001d02 <RFID+0x7d6>
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f000 814f 	beq.w	8001f9e <RFID+0xa72>
 8001d00:	e285      	b.n	800220e <RFID+0xce2>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001d02:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <RFID+0x884>)
 8001d04:	492b      	ldr	r1, [pc, #172]	@ (8001db4 <RFID+0x888>)
 8001d06:	4827      	ldr	r0, [pc, #156]	@ (8001da4 <RFID+0x878>)
 8001d08:	f7fe fb78 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001d14:	e139      	b.n	8001f8a <RFID+0xa5e>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001d16:	200a      	movs	r0, #10
 8001d18:	f7fe fcca 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <RFID+0x86c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <RFID+0x80c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001d28:	481e      	ldr	r0, [pc, #120]	@ (8001da4 <RFID+0x878>)
 8001d2a:	f7fe fb57 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d32:	f002 fce5 	bl	8004700 <HAL_Delay>
															return;
 8001d36:	e30f      	b.n	8002358 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d3c:	d156      	bne.n	8001dec <RFID+0x8c0>
														{
															buzzer(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f001 ffd0 	bl	8003ce4 <buzzer>
															exitmenu = 15;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <RFID+0x86c>)
 8001d46:	220f      	movs	r2, #15
 8001d48:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001d4a:	7abb      	ldrb	r3, [r7, #10]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001d50:	7abb      	ldrb	r3, [r7, #10]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d801      	bhi.n	8001d5a <RFID+0x82e>
 8001d56:	7abb      	ldrb	r3, [r7, #10]
 8001d58:	e000      	b.n	8001d5c <RFID+0x830>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d012      	beq.n	8001d8a <RFID+0x85e>
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	dc3b      	bgt.n	8001de0 <RFID+0x8b4>
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d002      	beq.n	8001d72 <RFID+0x846>
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d006      	beq.n	8001d7e <RFID+0x852>
 8001d70:	e036      	b.n	8001de0 <RFID+0x8b4>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001d72:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <RFID+0x8a4>)
 8001d74:	4917      	ldr	r1, [pc, #92]	@ (8001dd4 <RFID+0x8a8>)
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <RFID+0x878>)
 8001d78:	f7fe fb40 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001d7c:	e036      	b.n	8001dec <RFID+0x8c0>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <RFID+0x8ac>)
 8001d80:	4914      	ldr	r1, [pc, #80]	@ (8001dd4 <RFID+0x8a8>)
 8001d82:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <RFID+0x878>)
 8001d84:	f7fe fb3a 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001d88:	e030      	b.n	8001dec <RFID+0x8c0>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001d8a:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <RFID+0x8b0>)
 8001d8c:	4911      	ldr	r1, [pc, #68]	@ (8001dd4 <RFID+0x8a8>)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <RFID+0x878>)
 8001d90:	f7fe fb34 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001d94:	e02a      	b.n	8001dec <RFID+0x8c0>
 8001d96:	bf00      	nop
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	0800df54 	.word	0x0800df54
 8001da0:	0800df68 	.word	0x0800df68
 8001da4:	200003d8 	.word	0x200003d8
 8001da8:	0800df78 	.word	0x0800df78
 8001dac:	0800ddf4 	.word	0x0800ddf4
 8001db0:	0800ddfc 	.word	0x0800ddfc
 8001db4:	0800de08 	.word	0x0800de08
 8001db8:	0800df88 	.word	0x0800df88
 8001dbc:	0800df98 	.word	0x0800df98
 8001dc0:	0800dfa8 	.word	0x0800dfa8
 8001dc4:	0800dfb8 	.word	0x0800dfb8
 8001dc8:	0800dfcc 	.word	0x0800dfcc
 8001dcc:	0800dfdc 	.word	0x0800dfdc
 8001dd0:	0800dfec 	.word	0x0800dfec
 8001dd4:	0800dffc 	.word	0x0800dffc
 8001dd8:	0800e00c 	.word	0x0800e00c
 8001ddc:	0800e01c 	.word	0x0800e01c
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001de0:	4aa5      	ldr	r2, [pc, #660]	@ (8002078 <RFID+0xb4c>)
 8001de2:	49a6      	ldr	r1, [pc, #664]	@ (800207c <RFID+0xb50>)
 8001de4:	48a6      	ldr	r0, [pc, #664]	@ (8002080 <RFID+0xb54>)
 8001de6:	f7fe fb09 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dea:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001dec:	797b      	ldrb	r3, [r7, #5]
 8001dee:	2b23      	cmp	r3, #35	@ 0x23
 8001df0:	f040 80cb 	bne.w	8001f8a <RFID+0xa5e>
														{
															buzzer(1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f001 ff75 	bl	8003ce4 <buzzer>
															exitmenu = 15;
 8001dfa:	4ba2      	ldr	r3, [pc, #648]	@ (8002084 <RFID+0xb58>)
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	7abb      	ldrb	r3, [r7, #10]
 8001e08:	4413      	add	r3, r2
 8001e0a:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001e0c:	7abb      	ldrb	r3, [r7, #10]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d07d      	beq.n	8001f0e <RFID+0x9e2>
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	f300 80b6 	bgt.w	8001f84 <RFID+0xa58>
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d002      	beq.n	8001e22 <RFID+0x8f6>
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d03b      	beq.n	8001e98 <RFID+0x96c>
 8001e20:	e0b0      	b.n	8001f84 <RFID+0xa58>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 f95b 	bl	80030e0 <CheckKey>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <RFID+0x928>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001e30:	4a95      	ldr	r2, [pc, #596]	@ (8002088 <RFID+0xb5c>)
 8001e32:	4996      	ldr	r1, [pc, #600]	@ (800208c <RFID+0xb60>)
 8001e34:	4892      	ldr	r0, [pc, #584]	@ (8002080 <RFID+0xb54>)
 8001e36:	f7fe fae1 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f001 ff52 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 8001e40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e44:	f002 fc5c 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001e48:	4a91      	ldr	r2, [pc, #580]	@ (8002090 <RFID+0xb64>)
 8001e4a:	498c      	ldr	r1, [pc, #560]	@ (800207c <RFID+0xb50>)
 8001e4c:	488c      	ldr	r0, [pc, #560]	@ (8002080 <RFID+0xb54>)
 8001e4e:	f7fe fad5 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001e52:	e09a      	b.n	8001f8a <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 f942 	bl	80030e0 <CheckKey>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f96c 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001e64:	4a8b      	ldr	r2, [pc, #556]	@ (8002094 <RFID+0xb68>)
 8001e66:	498c      	ldr	r1, [pc, #560]	@ (8002098 <RFID+0xb6c>)
 8001e68:	4885      	ldr	r0, [pc, #532]	@ (8002080 <RFID+0xb54>)
 8001e6a:	f7fe fac7 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e72:	f002 fc45 	bl	8004700 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001e76:	f000 ffd3 	bl	8002e20 <checkcountUID>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <RFID+0x960>
																		startadd();
 8001e80:	f001 f96a 	bl	8003158 <startadd>
																		exitmenu = 0;
 8001e84:	4b7f      	ldr	r3, [pc, #508]	@ (8002084 <RFID+0xb58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
																break;
 8001e8a:	e07e      	b.n	8001f8a <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001e8c:	4a80      	ldr	r2, [pc, #512]	@ (8002090 <RFID+0xb64>)
 8001e8e:	497b      	ldr	r1, [pc, #492]	@ (800207c <RFID+0xb50>)
 8001e90:	487b      	ldr	r0, [pc, #492]	@ (8002080 <RFID+0xb54>)
 8001e92:	f7fe fab3 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e96:	e078      	b.n	8001f8a <RFID+0xa5e>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f920 	bl	80030e0 <CheckKey>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d111      	bne.n	8001eca <RFID+0x99e>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001ea6:	4a78      	ldr	r2, [pc, #480]	@ (8002088 <RFID+0xb5c>)
 8001ea8:	497c      	ldr	r1, [pc, #496]	@ (800209c <RFID+0xb70>)
 8001eaa:	4875      	ldr	r0, [pc, #468]	@ (8002080 <RFID+0xb54>)
 8001eac:	f7fe faa6 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f001 ff17 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 8001eb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eba:	f002 fc21 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001ebe:	4a78      	ldr	r2, [pc, #480]	@ (80020a0 <RFID+0xb74>)
 8001ec0:	496e      	ldr	r1, [pc, #440]	@ (800207c <RFID+0xb50>)
 8001ec2:	486f      	ldr	r0, [pc, #444]	@ (8002080 <RFID+0xb54>)
 8001ec4:	f7fe fa9a 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001ec8:	e05f      	b.n	8001f8a <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 f907 	bl	80030e0 <CheckKey>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f931 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001eda:	4a6e      	ldr	r2, [pc, #440]	@ (8002094 <RFID+0xb68>)
 8001edc:	4971      	ldr	r1, [pc, #452]	@ (80020a4 <RFID+0xb78>)
 8001ede:	4868      	ldr	r0, [pc, #416]	@ (8002080 <RFID+0xb54>)
 8001ee0:	f7fe fa8c 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ee4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ee8:	f002 fc0a 	bl	8004700 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001eec:	f000 ff98 	bl	8002e20 <checkcountUID>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <RFID+0x9d6>
																		startadd();
 8001ef6:	f001 f92f 	bl	8003158 <startadd>
																		exitmenu = 0;
 8001efa:	4b62      	ldr	r3, [pc, #392]	@ (8002084 <RFID+0xb58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
																break;
 8001f00:	e043      	b.n	8001f8a <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001f02:	4a67      	ldr	r2, [pc, #412]	@ (80020a0 <RFID+0xb74>)
 8001f04:	495d      	ldr	r1, [pc, #372]	@ (800207c <RFID+0xb50>)
 8001f06:	485e      	ldr	r0, [pc, #376]	@ (8002080 <RFID+0xb54>)
 8001f08:	f7fe fa78 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f0c:	e03d      	b.n	8001f8a <RFID+0xa5e>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 f8e5 	bl	80030e0 <CheckKey>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <RFID+0xa14>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002088 <RFID+0xb5c>)
 8001f1e:	4962      	ldr	r1, [pc, #392]	@ (80020a8 <RFID+0xb7c>)
 8001f20:	4857      	ldr	r0, [pc, #348]	@ (8002080 <RFID+0xb54>)
 8001f22:	f7fe fa6b 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f001 fedc 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 8001f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f30:	f002 fbe6 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <RFID+0xb80>)
 8001f36:	4951      	ldr	r1, [pc, #324]	@ (800207c <RFID+0xb50>)
 8001f38:	4851      	ldr	r0, [pc, #324]	@ (8002080 <RFID+0xb54>)
 8001f3a:	f7fe fa5f 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001f3e:	e024      	b.n	8001f8a <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f8cc 	bl	80030e0 <CheckKey>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f8f6 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001f50:	4a50      	ldr	r2, [pc, #320]	@ (8002094 <RFID+0xb68>)
 8001f52:	4957      	ldr	r1, [pc, #348]	@ (80020b0 <RFID+0xb84>)
 8001f54:	484a      	ldr	r0, [pc, #296]	@ (8002080 <RFID+0xb54>)
 8001f56:	f7fe fa51 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f5e:	f002 fbcf 	bl	8004700 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f62:	f000 ff5d 	bl	8002e20 <checkcountUID>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <RFID+0xa4c>
																		startadd();
 8001f6c:	f001 f8f4 	bl	8003158 <startadd>
																		exitmenu = 0;
 8001f70:	4b44      	ldr	r3, [pc, #272]	@ (8002084 <RFID+0xb58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
																break;
 8001f76:	e008      	b.n	8001f8a <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001f78:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <RFID+0xb80>)
 8001f7a:	4940      	ldr	r1, [pc, #256]	@ (800207c <RFID+0xb50>)
 8001f7c:	4840      	ldr	r0, [pc, #256]	@ (8002080 <RFID+0xb54>)
 8001f7e:	f7fe fa3d 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f82:	e002      	b.n	8001f8a <RFID+0xa5e>
															default:
																back11 = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	727b      	strb	r3, [r7, #9]
																break;
 8001f88:	bf00      	nop
													while (back11 == 1)
 8001f8a:	7a7b      	ldrb	r3, [r7, #9]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f43f aec2 	beq.w	8001d16 <RFID+0x7ea>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001f92:	4a48      	ldr	r2, [pc, #288]	@ (80020b4 <RFID+0xb88>)
 8001f94:	4948      	ldr	r1, [pc, #288]	@ (80020b8 <RFID+0xb8c>)
 8001f96:	483a      	ldr	r0, [pc, #232]	@ (8002080 <RFID+0xb54>)
 8001f98:	f7fe fa30 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001f9c:	e13a      	b.n	8002214 <RFID+0xce8>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001f9e:	4a47      	ldr	r2, [pc, #284]	@ (80020bc <RFID+0xb90>)
 8001fa0:	4947      	ldr	r1, [pc, #284]	@ (80020c0 <RFID+0xb94>)
 8001fa2:	4837      	ldr	r0, [pc, #220]	@ (8002080 <RFID+0xb54>)
 8001fa4:	f7fe fa2a 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001fb0:	e123      	b.n	80021fa <RFID+0xcce>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001fb2:	200a      	movs	r0, #10
 8001fb4:	f7fe fb7c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001fbc:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <RFID+0xb58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <RFID+0xaa8>
														{
															CLCD_I2C_Clear(&LCD1);
 8001fc4:	482e      	ldr	r0, [pc, #184]	@ (8002080 <RFID+0xb54>)
 8001fc6:	f7fe fa09 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001fca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fce:	f002 fb97 	bl	8004700 <HAL_Delay>
															return;
 8001fd2:	e1c1      	b.n	8002358 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8001fd4:	797b      	ldrb	r3, [r7, #5]
 8001fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fd8:	d131      	bne.n	800203e <RFID+0xb12>
														{
															buzzer(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f001 fe82 	bl	8003ce4 <buzzer>
															exitmenu = 15;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <RFID+0xb58>)
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001fe6:	7a3b      	ldrb	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001fec:	7a3b      	ldrb	r3, [r7, #8]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d801      	bhi.n	8001ff6 <RFID+0xaca>
 8001ff2:	7a3b      	ldrb	r3, [r7, #8]
 8001ff4:	e000      	b.n	8001ff8 <RFID+0xacc>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001ffa:	7a3b      	ldrb	r3, [r7, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d012      	beq.n	8002026 <RFID+0xafa>
 8002000:	2b03      	cmp	r3, #3
 8002002:	dc16      	bgt.n	8002032 <RFID+0xb06>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d002      	beq.n	800200e <RFID+0xae2>
 8002008:	2b02      	cmp	r3, #2
 800200a:	d006      	beq.n	800201a <RFID+0xaee>
 800200c:	e011      	b.n	8002032 <RFID+0xb06>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 800200e:	4a2d      	ldr	r2, [pc, #180]	@ (80020c4 <RFID+0xb98>)
 8002010:	492d      	ldr	r1, [pc, #180]	@ (80020c8 <RFID+0xb9c>)
 8002012:	481b      	ldr	r0, [pc, #108]	@ (8002080 <RFID+0xb54>)
 8002014:	f7fe f9f2 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002018:	e011      	b.n	800203e <RFID+0xb12>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 800201a:	4a2c      	ldr	r2, [pc, #176]	@ (80020cc <RFID+0xba0>)
 800201c:	492a      	ldr	r1, [pc, #168]	@ (80020c8 <RFID+0xb9c>)
 800201e:	4818      	ldr	r0, [pc, #96]	@ (8002080 <RFID+0xb54>)
 8002020:	f7fe f9ec 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002024:	e00b      	b.n	800203e <RFID+0xb12>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002026:	4a2a      	ldr	r2, [pc, #168]	@ (80020d0 <RFID+0xba4>)
 8002028:	4927      	ldr	r1, [pc, #156]	@ (80020c8 <RFID+0xb9c>)
 800202a:	4815      	ldr	r0, [pc, #84]	@ (8002080 <RFID+0xb54>)
 800202c:	f7fe f9e6 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002030:	e005      	b.n	800203e <RFID+0xb12>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <RFID+0xb4c>)
 8002034:	4924      	ldr	r1, [pc, #144]	@ (80020c8 <RFID+0xb9c>)
 8002036:	4812      	ldr	r0, [pc, #72]	@ (8002080 <RFID+0xb54>)
 8002038:	f7fe f9e0 	bl	80003fc <CLCD_I2C_Display>
																break;
 800203c:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 800203e:	797b      	ldrb	r3, [r7, #5]
 8002040:	2b23      	cmp	r3, #35	@ 0x23
 8002042:	f040 80da 	bne.w	80021fa <RFID+0xcce>
														{
															buzzer(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f001 fe4c 	bl	8003ce4 <buzzer>
															exitmenu = 15;
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <RFID+0xb58>)
 800204e:	220f      	movs	r2, #15
 8002050:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8002052:	7b3b      	ldrb	r3, [r7, #12]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	b2da      	uxtb	r2, r3
 8002058:	7a3b      	ldrb	r3, [r7, #8]
 800205a:	4413      	add	r3, r2
 800205c:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 800205e:	7a3b      	ldrb	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	f000 8097 	beq.w	8002194 <RFID+0xc68>
 8002066:	2b03      	cmp	r3, #3
 8002068:	f300 80c4 	bgt.w	80021f4 <RFID+0xcc8>
 800206c:	2b01      	cmp	r3, #1
 800206e:	d031      	beq.n	80020d4 <RFID+0xba8>
 8002070:	2b02      	cmp	r3, #2
 8002072:	d05f      	beq.n	8002134 <RFID+0xc08>
 8002074:	e0be      	b.n	80021f4 <RFID+0xcc8>
 8002076:	bf00      	nop
 8002078:	0800ddf4 	.word	0x0800ddf4
 800207c:	0800dffc 	.word	0x0800dffc
 8002080:	200003d8 	.word	0x200003d8
 8002084:	20000020 	.word	0x20000020
 8002088:	0800e02c 	.word	0x0800e02c
 800208c:	0800dea4 	.word	0x0800dea4
 8002090:	0800dfec 	.word	0x0800dfec
 8002094:	0800e03c 	.word	0x0800e03c
 8002098:	0800e04c 	.word	0x0800e04c
 800209c:	0800dec4 	.word	0x0800dec4
 80020a0:	0800e00c 	.word	0x0800e00c
 80020a4:	0800e060 	.word	0x0800e060
 80020a8:	0800dee4 	.word	0x0800dee4
 80020ac:	0800e01c 	.word	0x0800e01c
 80020b0:	0800e074 	.word	0x0800e074
 80020b4:	0800dfb8 	.word	0x0800dfb8
 80020b8:	0800dfcc 	.word	0x0800dfcc
 80020bc:	0800ddfc 	.word	0x0800ddfc
 80020c0:	0800de08 	.word	0x0800de08
 80020c4:	0800e088 	.word	0x0800e088
 80020c8:	0800e098 	.word	0x0800e098
 80020cc:	0800e0a8 	.word	0x0800e0a8
 80020d0:	0800e0b8 	.word	0x0800e0b8
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 80020d4:	793b      	ldrb	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 f802 	bl	80030e0 <CheckKey>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <RFID+0xbda>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 80020e2:	4a9f      	ldr	r2, [pc, #636]	@ (8002360 <RFID+0xe34>)
 80020e4:	499f      	ldr	r1, [pc, #636]	@ (8002364 <RFID+0xe38>)
 80020e6:	48a0      	ldr	r0, [pc, #640]	@ (8002368 <RFID+0xe3c>)
 80020e8:	f7fe f988 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f001 fdf9 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 80020f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f6:	f002 fb03 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 80020fa:	4a9c      	ldr	r2, [pc, #624]	@ (800236c <RFID+0xe40>)
 80020fc:	499c      	ldr	r1, [pc, #624]	@ (8002370 <RFID+0xe44>)
 80020fe:	489a      	ldr	r0, [pc, #616]	@ (8002368 <RFID+0xe3c>)
 8002100:	f7fe f97c 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8002104:	e079      	b.n	80021fa <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002106:	793b      	ldrb	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 ffe9 	bl	80030e0 <CheckKey>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f001 f813 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8002116:	4a97      	ldr	r2, [pc, #604]	@ (8002374 <RFID+0xe48>)
 8002118:	4997      	ldr	r1, [pc, #604]	@ (8002378 <RFID+0xe4c>)
 800211a:	4893      	ldr	r0, [pc, #588]	@ (8002368 <RFID+0xe3c>)
 800211c:	f7fe f96e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002120:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002124:	f002 faec 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8002128:	4a90      	ldr	r2, [pc, #576]	@ (800236c <RFID+0xe40>)
 800212a:	4991      	ldr	r1, [pc, #580]	@ (8002370 <RFID+0xe44>)
 800212c:	488e      	ldr	r0, [pc, #568]	@ (8002368 <RFID+0xe3c>)
 800212e:	f7fe f965 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002132:	e062      	b.n	80021fa <RFID+0xcce>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8002134:	793b      	ldrb	r3, [r7, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 ffd2 	bl	80030e0 <CheckKey>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d111      	bne.n	8002166 <RFID+0xc3a>
																{

																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 8002142:	4a87      	ldr	r2, [pc, #540]	@ (8002360 <RFID+0xe34>)
 8002144:	498d      	ldr	r1, [pc, #564]	@ (800237c <RFID+0xe50>)
 8002146:	4888      	ldr	r0, [pc, #544]	@ (8002368 <RFID+0xe3c>)
 8002148:	f7fe f958 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 800214c:	2003      	movs	r0, #3
 800214e:	f001 fdc9 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 8002152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002156:	f002 fad3 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 800215a:	4a89      	ldr	r2, [pc, #548]	@ (8002380 <RFID+0xe54>)
 800215c:	4984      	ldr	r1, [pc, #528]	@ (8002370 <RFID+0xe44>)
 800215e:	4882      	ldr	r0, [pc, #520]	@ (8002368 <RFID+0xe3c>)
 8002160:	f7fe f94c 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8002164:	e049      	b.n	80021fa <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 ffb9 	bl	80030e0 <CheckKey>
 800216e:	4603      	mov	r3, r0
 8002170:	4618      	mov	r0, r3
 8002172:	f000 ffe3 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8002176:	4a7f      	ldr	r2, [pc, #508]	@ (8002374 <RFID+0xe48>)
 8002178:	4982      	ldr	r1, [pc, #520]	@ (8002384 <RFID+0xe58>)
 800217a:	487b      	ldr	r0, [pc, #492]	@ (8002368 <RFID+0xe3c>)
 800217c:	f7fe f93e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002184:	f002 fabc 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002188:	4a7d      	ldr	r2, [pc, #500]	@ (8002380 <RFID+0xe54>)
 800218a:	4979      	ldr	r1, [pc, #484]	@ (8002370 <RFID+0xe44>)
 800218c:	4876      	ldr	r0, [pc, #472]	@ (8002368 <RFID+0xe3c>)
 800218e:	f7fe f935 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002192:	e032      	b.n	80021fa <RFID+0xcce>
															case 3:
																if (CheckKey(keyadd2) == 0)
 8002194:	793b      	ldrb	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ffa2 	bl	80030e0 <CheckKey>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d111      	bne.n	80021c6 <RFID+0xc9a>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 80021a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002360 <RFID+0xe34>)
 80021a4:	4978      	ldr	r1, [pc, #480]	@ (8002388 <RFID+0xe5c>)
 80021a6:	4870      	ldr	r0, [pc, #448]	@ (8002368 <RFID+0xe3c>)
 80021a8:	f7fe f928 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f001 fd99 	bl	8003ce4 <buzzer>
																	HAL_Delay(1000);
 80021b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021b6:	f002 faa3 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 80021ba:	4a74      	ldr	r2, [pc, #464]	@ (800238c <RFID+0xe60>)
 80021bc:	496c      	ldr	r1, [pc, #432]	@ (8002370 <RFID+0xe44>)
 80021be:	486a      	ldr	r0, [pc, #424]	@ (8002368 <RFID+0xe3c>)
 80021c0:	f7fe f91c 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 80021c4:	e019      	b.n	80021fa <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 80021c6:	793b      	ldrb	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 ff89 	bl	80030e0 <CheckKey>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 ffb3 	bl	800313c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 80021d6:	4a67      	ldr	r2, [pc, #412]	@ (8002374 <RFID+0xe48>)
 80021d8:	496d      	ldr	r1, [pc, #436]	@ (8002390 <RFID+0xe64>)
 80021da:	4863      	ldr	r0, [pc, #396]	@ (8002368 <RFID+0xe3c>)
 80021dc:	f7fe f90e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 80021e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e4:	f002 fa8c 	bl	8004700 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 80021e8:	4a68      	ldr	r2, [pc, #416]	@ (800238c <RFID+0xe60>)
 80021ea:	4961      	ldr	r1, [pc, #388]	@ (8002370 <RFID+0xe44>)
 80021ec:	485e      	ldr	r0, [pc, #376]	@ (8002368 <RFID+0xe3c>)
 80021ee:	f7fe f905 	bl	80003fc <CLCD_I2C_Display>
																break;
 80021f2:	e002      	b.n	80021fa <RFID+0xcce>
															default:
																back12 = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
																break;
 80021f8:	bf00      	nop
													while (back12 == 1)
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f43f aed8 	beq.w	8001fb2 <RFID+0xa86>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8002202:	4a64      	ldr	r2, [pc, #400]	@ (8002394 <RFID+0xe68>)
 8002204:	4964      	ldr	r1, [pc, #400]	@ (8002398 <RFID+0xe6c>)
 8002206:	4858      	ldr	r0, [pc, #352]	@ (8002368 <RFID+0xe3c>)
 8002208:	f7fe f8f8 	bl	80003fc <CLCD_I2C_Display>
													break;
 800220c:	e002      	b.n	8002214 <RFID+0xce8>
												default:
													backrm10 = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	72fb      	strb	r3, [r7, #11]
													break;
 8002212:	bf00      	nop
										while (backrm10 == 1)
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f43f ad26 	beq.w	8001c68 <RFID+0x73c>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 800221c:	4a5f      	ldr	r2, [pc, #380]	@ (800239c <RFID+0xe70>)
 800221e:	4960      	ldr	r1, [pc, #384]	@ (80023a0 <RFID+0xe74>)
 8002220:	4851      	ldr	r0, [pc, #324]	@ (8002368 <RFID+0xe3c>)
 8002222:	f7fe f8eb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002226:	e064      	b.n	80022f2 <RFID+0xdc6>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002228:	4a5e      	ldr	r2, [pc, #376]	@ (80023a4 <RFID+0xe78>)
 800222a:	495f      	ldr	r1, [pc, #380]	@ (80023a8 <RFID+0xe7c>)
 800222c:	484e      	ldr	r0, [pc, #312]	@ (8002368 <RFID+0xe3c>)
 800222e:	f7fe f8e5 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002236:	e050      	b.n	80022da <RFID+0xdae>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f7fe fa39 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800223e:	4603      	mov	r3, r0
 8002240:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8002242:	485a      	ldr	r0, [pc, #360]	@ (80023ac <RFID+0xe80>)
 8002244:	f001 fdc4 	bl	8003dd0 <TM_MFRC522_Check>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13d      	bne.n	80022ca <RFID+0xd9e>
											{
												if (CheckListUID(CardID) != 0)
 800224e:	4857      	ldr	r0, [pc, #348]	@ (80023ac <RFID+0xe80>)
 8002250:	f000 fdb6 	bl	8002dc0 <CheckListUID>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d026      	beq.n	80022a8 <RFID+0xd7c>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 800225a:	4854      	ldr	r0, [pc, #336]	@ (80023ac <RFID+0xe80>)
 800225c:	f000 fdb0 	bl	8002dc0 <CheckListUID>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 ff3c 	bl	80030e0 <CheckKey>
 8002268:	4603      	mov	r3, r0
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ff66 	bl	800313c <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8002270:	4a40      	ldr	r2, [pc, #256]	@ (8002374 <RFID+0xe48>)
 8002272:	494f      	ldr	r1, [pc, #316]	@ (80023b0 <RFID+0xe84>)
 8002274:	483c      	ldr	r0, [pc, #240]	@ (8002368 <RFID+0xe3c>)
 8002276:	f7fe f8c1 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 800227a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800227e:	f002 fa3f 	bl	8004700 <HAL_Delay>
													if (checkcountUID() == 0)
 8002282:	f000 fdcd 	bl	8002e20 <checkcountUID>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <RFID+0xd70>
													{
														startadd();
 800228c:	f000 ff64 	bl	8003158 <startadd>
														rmquet = 1;
 8002290:	2301      	movs	r3, #1
 8002292:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002294:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <RFID+0xe88>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
														return;
 800229a:	e05d      	b.n	8002358 <RFID+0xe2c>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 800229c:	4a41      	ldr	r2, [pc, #260]	@ (80023a4 <RFID+0xe78>)
 800229e:	4942      	ldr	r1, [pc, #264]	@ (80023a8 <RFID+0xe7c>)
 80022a0:	4831      	ldr	r0, [pc, #196]	@ (8002368 <RFID+0xe3c>)
 80022a2:	f7fe f8ab 	bl	80003fc <CLCD_I2C_Display>
 80022a6:	e010      	b.n	80022ca <RFID+0xd9e>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 80022a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <RFID+0xe34>)
 80022aa:	4943      	ldr	r1, [pc, #268]	@ (80023b8 <RFID+0xe8c>)
 80022ac:	482e      	ldr	r0, [pc, #184]	@ (8002368 <RFID+0xe3c>)
 80022ae:	f7fe f8a5 	bl	80003fc <CLCD_I2C_Display>
													buzzer(3);
 80022b2:	2003      	movs	r0, #3
 80022b4:	f001 fd16 	bl	8003ce4 <buzzer>
													HAL_Delay(1000);
 80022b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022bc:	f002 fa20 	bl	8004700 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80022c0:	4a38      	ldr	r2, [pc, #224]	@ (80023a4 <RFID+0xe78>)
 80022c2:	4939      	ldr	r1, [pc, #228]	@ (80023a8 <RFID+0xe7c>)
 80022c4:	4828      	ldr	r0, [pc, #160]	@ (8002368 <RFID+0xe3c>)
 80022c6:	f7fe f899 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 80022ca:	797b      	ldrb	r3, [r7, #5]
 80022cc:	2b23      	cmp	r3, #35	@ 0x23
 80022ce:	d104      	bne.n	80022da <RFID+0xdae>
											{
												buzzer(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f001 fd07 	bl	8003ce4 <buzzer>
												rmquet = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ab      	bne.n	8002238 <RFID+0xd0c>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 80022e0:	4a36      	ldr	r2, [pc, #216]	@ (80023bc <RFID+0xe90>)
 80022e2:	492f      	ldr	r1, [pc, #188]	@ (80023a0 <RFID+0xe74>)
 80022e4:	4820      	ldr	r0, [pc, #128]	@ (8002368 <RFID+0xe3c>)
 80022e6:	f7fe f889 	bl	80003fc <CLCD_I2C_Display>
										break;
 80022ea:	e002      	b.n	80022f2 <RFID+0xdc6>
									default:
										backrm1 = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	737b      	strb	r3, [r7, #13]
										break;
 80022f0:	bf00      	nop
							while (backrm1 == 1)
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	f43f ac63 	beq.w	8001bc0 <RFID+0x694>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 80022fa:	4a31      	ldr	r2, [pc, #196]	@ (80023c0 <RFID+0xe94>)
 80022fc:	4931      	ldr	r1, [pc, #196]	@ (80023c4 <RFID+0xe98>)
 80022fe:	481a      	ldr	r0, [pc, #104]	@ (8002368 <RFID+0xe3c>)
 8002300:	f7fe f87c 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002304:	e00a      	b.n	800231c <RFID+0xdf0>
						case 1:
							remoall();
 8002306:	f000 ff9d 	bl	8003244 <remoall>
							startadd();
 800230a:	f000 ff25 	bl	8003158 <startadd>
							exitmenu = 0;
 800230e:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <RFID+0xe88>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
							break;
 8002314:	e002      	b.n	800231c <RFID+0xdf0>
						default:
							backrm = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
							break;
 800231a:	bf00      	nop
				while (backrm == 1)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b01      	cmp	r3, #1
 8002320:	f43f abc3 	beq.w	8001aaa <RFID+0x57e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8002324:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <RFID+0xe9c>)
 8002326:	4929      	ldr	r1, [pc, #164]	@ (80023cc <RFID+0xea0>)
 8002328:	480f      	ldr	r0, [pc, #60]	@ (8002368 <RFID+0xe3c>)
 800232a:	f7fe f867 	bl	80003fc <CLCD_I2C_Display>
				break;
 800232e:	e00b      	b.n	8002348 <RFID+0xe1c>
			case 2:
				checkthe();
 8002330:	f000 fe20 	bl	8002f74 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002334:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <RFID+0xea4>)
 8002336:	4925      	ldr	r1, [pc, #148]	@ (80023cc <RFID+0xea0>)
 8002338:	480b      	ldr	r0, [pc, #44]	@ (8002368 <RFID+0xe3c>)
 800233a:	f7fe f85f 	bl	80003fc <CLCD_I2C_Display>
				break;
 800233e:	e003      	b.n	8002348 <RFID+0xe1c>
			default:
				exitmenu = 0;
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <RFID+0xe88>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
				break;
 8002346:	bf00      	nop
	while (exitmenu )
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <RFID+0xe88>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f a8ff 	bne.w	8001550 <RFID+0x24>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <RFID+0xe3c>)
 8002354:	f7fe f842 	bl	80003dc <CLCD_I2C_Clear>
}
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0800e02c 	.word	0x0800e02c
 8002364:	0800df30 	.word	0x0800df30
 8002368:	200003d8 	.word	0x200003d8
 800236c:	0800e088 	.word	0x0800e088
 8002370:	0800e098 	.word	0x0800e098
 8002374:	0800e03c 	.word	0x0800e03c
 8002378:	0800e0c8 	.word	0x0800e0c8
 800237c:	0800df3c 	.word	0x0800df3c
 8002380:	0800e0a8 	.word	0x0800e0a8
 8002384:	0800e0dc 	.word	0x0800e0dc
 8002388:	0800df48 	.word	0x0800df48
 800238c:	0800e0b8 	.word	0x0800e0b8
 8002390:	0800e0f0 	.word	0x0800e0f0
 8002394:	0800dfdc 	.word	0x0800dfdc
 8002398:	0800dfcc 	.word	0x0800dfcc
 800239c:	0800df88 	.word	0x0800df88
 80023a0:	0800df98 	.word	0x0800df98
 80023a4:	0800ddf4 	.word	0x0800ddf4
 80023a8:	0800e104 	.word	0x0800e104
 80023ac:	200003e4 	.word	0x200003e4
 80023b0:	0800e114 	.word	0x0800e114
 80023b4:	20000020 	.word	0x20000020
 80023b8:	0800e124 	.word	0x0800e124
 80023bc:	0800dfa8 	.word	0x0800dfa8
 80023c0:	0800df54 	.word	0x0800df54
 80023c4:	0800df68 	.word	0x0800df68
 80023c8:	0800ddd4 	.word	0x0800ddd4
 80023cc:	0800ddb8 	.word	0x0800ddb8
 80023d0:	0800dde4 	.word	0x0800dde4

080023d4 <FACEID>:
void FACEID(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
	buzzer(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f001 fc82 	bl	8003ce4 <buzzer>
	exitmenu = Delaymenu;
 80023e0:	4bae      	ldr	r3, [pc, #696]	@ (800269c <FACEID+0x2c8>)
 80023e2:	2214      	movs	r2, #20
 80023e4:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80023e6:	23ff      	movs	r3, #255	@ 0xff
 80023e8:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 80023ea:	4aad      	ldr	r2, [pc, #692]	@ (80026a0 <FACEID+0x2cc>)
 80023ec:	49ad      	ldr	r1, [pc, #692]	@ (80026a4 <FACEID+0x2d0>)
 80023ee:	48ae      	ldr	r0, [pc, #696]	@ (80026a8 <FACEID+0x2d4>)
 80023f0:	f7fe f804 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80023f4:	e378      	b.n	8002ae8 <FACEID+0x714>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80023f6:	200a      	movs	r0, #10
 80023f8:	f7fe f95a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80023fc:	4603      	mov	r3, r0
 80023fe:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 8002400:	7a3b      	ldrb	r3, [r7, #8]
 8002402:	2b2a      	cmp	r3, #42	@ 0x2a
 8002404:	d127      	bne.n	8002456 <FACEID+0x82>
		{
			buzzer(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f001 fc6c 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 800240c:	4ba3      	ldr	r3, [pc, #652]	@ (800269c <FACEID+0x2c8>)
 800240e:	2214      	movs	r2, #20
 8002410:	701a      	strb	r2, [r3, #0]
			status++;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d801      	bhi.n	8002422 <FACEID+0x4e>
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	e000      	b.n	8002424 <FACEID+0x50>
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
			switch (status)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <FACEID+0x5e>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d006      	beq.n	800243e <FACEID+0x6a>
 8002430:	e00b      	b.n	800244a <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 8002432:	4a9e      	ldr	r2, [pc, #632]	@ (80026ac <FACEID+0x2d8>)
 8002434:	499b      	ldr	r1, [pc, #620]	@ (80026a4 <FACEID+0x2d0>)
 8002436:	489c      	ldr	r0, [pc, #624]	@ (80026a8 <FACEID+0x2d4>)
 8002438:	f7fd ffe0 	bl	80003fc <CLCD_I2C_Display>
				break;
 800243c:	e00b      	b.n	8002456 <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800243e:	4a9c      	ldr	r2, [pc, #624]	@ (80026b0 <FACEID+0x2dc>)
 8002440:	4998      	ldr	r1, [pc, #608]	@ (80026a4 <FACEID+0x2d0>)
 8002442:	4899      	ldr	r0, [pc, #612]	@ (80026a8 <FACEID+0x2d4>)
 8002444:	f7fd ffda 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002448:	e005      	b.n	8002456 <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 800244a:	4a9a      	ldr	r2, [pc, #616]	@ (80026b4 <FACEID+0x2e0>)
 800244c:	4995      	ldr	r1, [pc, #596]	@ (80026a4 <FACEID+0x2d0>)
 800244e:	4896      	ldr	r0, [pc, #600]	@ (80026a8 <FACEID+0x2d4>)
 8002450:	f7fd ffd4 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002454:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002456:	7a3b      	ldrb	r3, [r7, #8]
 8002458:	2b23      	cmp	r3, #35	@ 0x23
 800245a:	f040 8345 	bne.w	8002ae8 <FACEID+0x714>
		{
			buzzer(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fc40 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 8002464:	4b8d      	ldr	r3, [pc, #564]	@ (800269c <FACEID+0x2c8>)
 8002466:	2214      	movs	r2, #20
 8002468:	701a      	strb	r2, [r3, #0]
			switch (status)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <FACEID+0xa4>
 8002470:	2b01      	cmp	r3, #1
 8002472:	f000 813f 	beq.w	80026f4 <FACEID+0x320>
 8002476:	e333      	b.n	8002ae0 <FACEID+0x70c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002478:	4a8f      	ldr	r2, [pc, #572]	@ (80026b8 <FACEID+0x2e4>)
 800247a:	4990      	ldr	r1, [pc, #576]	@ (80026bc <FACEID+0x2e8>)
 800247c:	488a      	ldr	r0, [pc, #552]	@ (80026a8 <FACEID+0x2d4>)
 800247e:	f7fd ffbd 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 800248a:	e0fc      	b.n	8002686 <FACEID+0x2b2>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800248c:	200a      	movs	r0, #10
 800248e:	f7fe f90f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002492:	4603      	mov	r3, r0
 8002494:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002496:	4b81      	ldr	r3, [pc, #516]	@ (800269c <FACEID+0x2c8>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <FACEID+0xda>
					{
						CLCD_I2C_Clear(&LCD1);
 800249e:	4882      	ldr	r0, [pc, #520]	@ (80026a8 <FACEID+0x2d4>)
 80024a0:	f7fd ff9c 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80024a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024a8:	f002 f92a 	bl	8004700 <HAL_Delay>
						return;
 80024ac:	e324      	b.n	8002af8 <FACEID+0x724>
					}
					if (key_pressed == '*')
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80024b2:	d13d      	bne.n	8002530 <FACEID+0x15c>
					{
						buzzer(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f001 fc15 	bl	8003ce4 <buzzer>
						exitmenu = Delaymenu;
 80024ba:	4b78      	ldr	r3, [pc, #480]	@ (800269c <FACEID+0x2c8>)
 80024bc:	2214      	movs	r2, #20
 80024be:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80024c0:	7bbb      	ldrb	r3, [r7, #14]
 80024c2:	3301      	adds	r3, #1
 80024c4:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d801      	bhi.n	80024d0 <FACEID+0xfc>
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	e000      	b.n	80024d2 <FACEID+0xfe>
 80024d0:	2300      	movs	r3, #0
 80024d2:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 80024d4:	7bbb      	ldrb	r3, [r7, #14]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d823      	bhi.n	8002524 <FACEID+0x150>
 80024dc:	a201      	add	r2, pc, #4	@ (adr r2, 80024e4 <FACEID+0x110>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002501 	.word	0x08002501
 80024ec:	0800250d 	.word	0x0800250d
 80024f0:	08002519 	.word	0x08002519
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80024f4:	4a72      	ldr	r2, [pc, #456]	@ (80026c0 <FACEID+0x2ec>)
 80024f6:	4973      	ldr	r1, [pc, #460]	@ (80026c4 <FACEID+0x2f0>)
 80024f8:	486b      	ldr	r0, [pc, #428]	@ (80026a8 <FACEID+0x2d4>)
 80024fa:	f7fd ff7f 	bl	80003fc <CLCD_I2C_Display>
							break;
 80024fe:	e017      	b.n	8002530 <FACEID+0x15c>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002500:	4a71      	ldr	r2, [pc, #452]	@ (80026c8 <FACEID+0x2f4>)
 8002502:	4970      	ldr	r1, [pc, #448]	@ (80026c4 <FACEID+0x2f0>)
 8002504:	4868      	ldr	r0, [pc, #416]	@ (80026a8 <FACEID+0x2d4>)
 8002506:	f7fd ff79 	bl	80003fc <CLCD_I2C_Display>
							break;
 800250a:	e011      	b.n	8002530 <FACEID+0x15c>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800250c:	4a6f      	ldr	r2, [pc, #444]	@ (80026cc <FACEID+0x2f8>)
 800250e:	496d      	ldr	r1, [pc, #436]	@ (80026c4 <FACEID+0x2f0>)
 8002510:	4865      	ldr	r0, [pc, #404]	@ (80026a8 <FACEID+0x2d4>)
 8002512:	f7fd ff73 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002516:	e00b      	b.n	8002530 <FACEID+0x15c>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002518:	4a6d      	ldr	r2, [pc, #436]	@ (80026d0 <FACEID+0x2fc>)
 800251a:	496a      	ldr	r1, [pc, #424]	@ (80026c4 <FACEID+0x2f0>)
 800251c:	4862      	ldr	r0, [pc, #392]	@ (80026a8 <FACEID+0x2d4>)
 800251e:	f7fd ff6d 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002522:	e005      	b.n	8002530 <FACEID+0x15c>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 8002524:	4a63      	ldr	r2, [pc, #396]	@ (80026b4 <FACEID+0x2e0>)
 8002526:	4967      	ldr	r1, [pc, #412]	@ (80026c4 <FACEID+0x2f0>)
 8002528:	485f      	ldr	r0, [pc, #380]	@ (80026a8 <FACEID+0x2d4>)
 800252a:	f7fd ff67 	bl	80003fc <CLCD_I2C_Display>
							break;
 800252e:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002530:	7a3b      	ldrb	r3, [r7, #8]
 8002532:	2b23      	cmp	r3, #35	@ 0x23
 8002534:	f040 80a7 	bne.w	8002686 <FACEID+0x2b2>
					{
						buzzer(1);
 8002538:	2001      	movs	r0, #1
 800253a:	f001 fbd3 	bl	8003ce4 <buzzer>
						exitmenu = Delaymenu;
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <FACEID+0x2c8>)
 8002540:	2214      	movs	r2, #20
 8002542:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	3b01      	subs	r3, #1
 800254c:	2b03      	cmp	r3, #3
 800254e:	f200 8097 	bhi.w	8002680 <FACEID+0x2ac>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <FACEID+0x184>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	08002569 	.word	0x08002569
 800255c:	080025af 	.word	0x080025af
 8002560:	080025f5 	.word	0x080025f5
 8002564:	0800263b 	.word	0x0800263b
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 ff52 	bl	8003414 <checkfaceid>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d011      	beq.n	800259a <FACEID+0x1c6>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 8002576:	4a57      	ldr	r2, [pc, #348]	@ (80026d4 <FACEID+0x300>)
 8002578:	4957      	ldr	r1, [pc, #348]	@ (80026d8 <FACEID+0x304>)
 800257a:	484b      	ldr	r0, [pc, #300]	@ (80026a8 <FACEID+0x2d4>)
 800257c:	f7fd ff3e 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002580:	2003      	movs	r0, #3
 8002582:	f001 fbaf 	bl	8003ce4 <buzzer>
								HAL_Delay(1000);
 8002586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800258a:	f002 f8b9 	bl	8004700 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 800258e:	4a4c      	ldr	r2, [pc, #304]	@ (80026c0 <FACEID+0x2ec>)
 8002590:	494c      	ldr	r1, [pc, #304]	@ (80026c4 <FACEID+0x2f0>)
 8002592:	4845      	ldr	r0, [pc, #276]	@ (80026a8 <FACEID+0x2d4>)
 8002594:	f7fd ff32 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 8002598:	e075      	b.n	8002686 <FACEID+0x2b2>
								addface(keyadd1);
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fe77 	bl	8003290 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80025a2:	4a47      	ldr	r2, [pc, #284]	@ (80026c0 <FACEID+0x2ec>)
 80025a4:	4947      	ldr	r1, [pc, #284]	@ (80026c4 <FACEID+0x2f0>)
 80025a6:	4840      	ldr	r0, [pc, #256]	@ (80026a8 <FACEID+0x2d4>)
 80025a8:	f7fd ff28 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025ac:	e06b      	b.n	8002686 <FACEID+0x2b2>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ff2f 	bl	8003414 <checkfaceid>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d011      	beq.n	80025e0 <FACEID+0x20c>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 80025bc:	4a47      	ldr	r2, [pc, #284]	@ (80026dc <FACEID+0x308>)
 80025be:	4948      	ldr	r1, [pc, #288]	@ (80026e0 <FACEID+0x30c>)
 80025c0:	4839      	ldr	r0, [pc, #228]	@ (80026a8 <FACEID+0x2d4>)
 80025c2:	f7fd ff1b 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f001 fb8c 	bl	8003ce4 <buzzer>
								HAL_Delay(1000);
 80025cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025d0:	f002 f896 	bl	8004700 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80025d4:	4a3c      	ldr	r2, [pc, #240]	@ (80026c8 <FACEID+0x2f4>)
 80025d6:	493b      	ldr	r1, [pc, #236]	@ (80026c4 <FACEID+0x2f0>)
 80025d8:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <FACEID+0x2d4>)
 80025da:	f7fd ff0f 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 80025de:	e052      	b.n	8002686 <FACEID+0x2b2>
								addface(keyadd1);
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fe54 	bl	8003290 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80025e8:	4a37      	ldr	r2, [pc, #220]	@ (80026c8 <FACEID+0x2f4>)
 80025ea:	4936      	ldr	r1, [pc, #216]	@ (80026c4 <FACEID+0x2f0>)
 80025ec:	482e      	ldr	r0, [pc, #184]	@ (80026a8 <FACEID+0x2d4>)
 80025ee:	f7fd ff05 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025f2:	e048      	b.n	8002686 <FACEID+0x2b2>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 ff0c 	bl	8003414 <checkfaceid>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <FACEID+0x252>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 8002602:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <FACEID+0x310>)
 8002604:	4938      	ldr	r1, [pc, #224]	@ (80026e8 <FACEID+0x314>)
 8002606:	4828      	ldr	r0, [pc, #160]	@ (80026a8 <FACEID+0x2d4>)
 8002608:	f7fd fef8 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 800260c:	2003      	movs	r0, #3
 800260e:	f001 fb69 	bl	8003ce4 <buzzer>
								HAL_Delay(1000);
 8002612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002616:	f002 f873 	bl	8004700 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800261a:	4a2c      	ldr	r2, [pc, #176]	@ (80026cc <FACEID+0x2f8>)
 800261c:	4929      	ldr	r1, [pc, #164]	@ (80026c4 <FACEID+0x2f0>)
 800261e:	4822      	ldr	r0, [pc, #136]	@ (80026a8 <FACEID+0x2d4>)
 8002620:	f7fd feec 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 8002624:	e02f      	b.n	8002686 <FACEID+0x2b2>
								addface(keyadd1);
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fe31 	bl	8003290 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800262e:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <FACEID+0x2f8>)
 8002630:	4924      	ldr	r1, [pc, #144]	@ (80026c4 <FACEID+0x2f0>)
 8002632:	481d      	ldr	r0, [pc, #116]	@ (80026a8 <FACEID+0x2d4>)
 8002634:	f7fd fee2 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002638:	e025      	b.n	8002686 <FACEID+0x2b2>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fee9 	bl	8003414 <checkfaceid>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d011      	beq.n	800266c <FACEID+0x298>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002648:	4a28      	ldr	r2, [pc, #160]	@ (80026ec <FACEID+0x318>)
 800264a:	4929      	ldr	r1, [pc, #164]	@ (80026f0 <FACEID+0x31c>)
 800264c:	4816      	ldr	r0, [pc, #88]	@ (80026a8 <FACEID+0x2d4>)
 800264e:	f7fd fed5 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002652:	2003      	movs	r0, #3
 8002654:	f001 fb46 	bl	8003ce4 <buzzer>
								HAL_Delay(1000);
 8002658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800265c:	f002 f850 	bl	8004700 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002660:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <FACEID+0x2fc>)
 8002662:	4918      	ldr	r1, [pc, #96]	@ (80026c4 <FACEID+0x2f0>)
 8002664:	4810      	ldr	r0, [pc, #64]	@ (80026a8 <FACEID+0x2d4>)
 8002666:	f7fd fec9 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 800266a:	e00c      	b.n	8002686 <FACEID+0x2b2>
								addface(keyadd1);
 800266c:	79bb      	ldrb	r3, [r7, #6]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fe0e 	bl	8003290 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002674:	4a16      	ldr	r2, [pc, #88]	@ (80026d0 <FACEID+0x2fc>)
 8002676:	4913      	ldr	r1, [pc, #76]	@ (80026c4 <FACEID+0x2f0>)
 8002678:	480b      	ldr	r0, [pc, #44]	@ (80026a8 <FACEID+0x2d4>)
 800267a:	f7fd febf 	bl	80003fc <CLCD_I2C_Display>
							break;
 800267e:	e002      	b.n	8002686 <FACEID+0x2b2>
						default:
							back = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	737b      	strb	r3, [r7, #13]
							break;
 8002684:	bf00      	nop
				while (back == 1)
 8002686:	7b7b      	ldrb	r3, [r7, #13]
 8002688:	2b01      	cmp	r3, #1
 800268a:	f43f aeff 	beq.w	800248c <FACEID+0xb8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800268e:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <FACEID+0x2d8>)
 8002690:	4904      	ldr	r1, [pc, #16]	@ (80026a4 <FACEID+0x2d0>)
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <FACEID+0x2d4>)
 8002694:	f7fd feb2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002698:	e226      	b.n	8002ae8 <FACEID+0x714>
 800269a:	bf00      	nop
 800269c:	20000020 	.word	0x20000020
 80026a0:	0800dda8 	.word	0x0800dda8
 80026a4:	0800e134 	.word	0x0800e134
 80026a8:	200003d8 	.word	0x200003d8
 80026ac:	0800e148 	.word	0x0800e148
 80026b0:	0800e158 	.word	0x0800e158
 80026b4:	0800ddf4 	.word	0x0800ddf4
 80026b8:	0800ddfc 	.word	0x0800ddfc
 80026bc:	0800de08 	.word	0x0800de08
 80026c0:	0800e16c 	.word	0x0800e16c
 80026c4:	0800e178 	.word	0x0800e178
 80026c8:	0800e184 	.word	0x0800e184
 80026cc:	0800e190 	.word	0x0800e190
 80026d0:	0800e19c 	.word	0x0800e19c
 80026d4:	0800e1a8 	.word	0x0800e1a8
 80026d8:	0800e1bc 	.word	0x0800e1bc
 80026dc:	0800e1cc 	.word	0x0800e1cc
 80026e0:	0800e1e0 	.word	0x0800e1e0
 80026e4:	0800e1f0 	.word	0x0800e1f0
 80026e8:	0800e204 	.word	0x0800e204
 80026ec:	0800e214 	.word	0x0800e214
 80026f0:	0800e228 	.word	0x0800e228
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80026f4:	4aa8      	ldr	r2, [pc, #672]	@ (8002998 <FACEID+0x5c4>)
 80026f6:	49a9      	ldr	r1, [pc, #676]	@ (800299c <FACEID+0x5c8>)
 80026f8:	48a9      	ldr	r0, [pc, #676]	@ (80029a0 <FACEID+0x5cc>)
 80026fa:	f7fd fe7f 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002706:	e1e1      	b.n	8002acc <FACEID+0x6f8>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002708:	200a      	movs	r0, #10
 800270a:	f7fd ffd1 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800270e:	4603      	mov	r3, r0
 8002710:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002712:	4ba4      	ldr	r3, [pc, #656]	@ (80029a4 <FACEID+0x5d0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <FACEID+0x356>
					{
						CLCD_I2C_Clear(&LCD1);
 800271a:	48a1      	ldr	r0, [pc, #644]	@ (80029a0 <FACEID+0x5cc>)
 800271c:	f7fd fe5e 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002724:	f001 ffec 	bl	8004700 <HAL_Delay>
						return;
 8002728:	e1e6      	b.n	8002af8 <FACEID+0x724>
					}
					if (key_pressed == '*')
 800272a:	7a3b      	ldrb	r3, [r7, #8]
 800272c:	2b2a      	cmp	r3, #42	@ 0x2a
 800272e:	d127      	bne.n	8002780 <FACEID+0x3ac>
					{
						buzzer(1);
 8002730:	2001      	movs	r0, #1
 8002732:	f001 fad7 	bl	8003ce4 <buzzer>
						exitmenu = Delaymenu;
 8002736:	4b9b      	ldr	r3, [pc, #620]	@ (80029a4 <FACEID+0x5d0>)
 8002738:	2214      	movs	r2, #20
 800273a:	701a      	strb	r2, [r3, #0]
						statusrm++;
 800273c:	7b3b      	ldrb	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 8002742:	7b3b      	ldrb	r3, [r7, #12]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d801      	bhi.n	800274c <FACEID+0x378>
 8002748:	7b3b      	ldrb	r3, [r7, #12]
 800274a:	e000      	b.n	800274e <FACEID+0x37a>
 800274c:	2300      	movs	r3, #0
 800274e:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 8002750:	7b3b      	ldrb	r3, [r7, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d002      	beq.n	800275c <FACEID+0x388>
 8002756:	2b02      	cmp	r3, #2
 8002758:	d006      	beq.n	8002768 <FACEID+0x394>
 800275a:	e00b      	b.n	8002774 <FACEID+0x3a0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800275c:	4a92      	ldr	r2, [pc, #584]	@ (80029a8 <FACEID+0x5d4>)
 800275e:	4993      	ldr	r1, [pc, #588]	@ (80029ac <FACEID+0x5d8>)
 8002760:	488f      	ldr	r0, [pc, #572]	@ (80029a0 <FACEID+0x5cc>)
 8002762:	f7fd fe4b 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002766:	e00b      	b.n	8002780 <FACEID+0x3ac>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 8002768:	4a91      	ldr	r2, [pc, #580]	@ (80029b0 <FACEID+0x5dc>)
 800276a:	4990      	ldr	r1, [pc, #576]	@ (80029ac <FACEID+0x5d8>)
 800276c:	488c      	ldr	r0, [pc, #560]	@ (80029a0 <FACEID+0x5cc>)
 800276e:	f7fd fe45 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002772:	e005      	b.n	8002780 <FACEID+0x3ac>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 8002774:	4a8f      	ldr	r2, [pc, #572]	@ (80029b4 <FACEID+0x5e0>)
 8002776:	498d      	ldr	r1, [pc, #564]	@ (80029ac <FACEID+0x5d8>)
 8002778:	4889      	ldr	r0, [pc, #548]	@ (80029a0 <FACEID+0x5cc>)
 800277a:	f7fd fe3f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800277e:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002780:	7a3b      	ldrb	r3, [r7, #8]
 8002782:	2b23      	cmp	r3, #35	@ 0x23
 8002784:	f040 81a2 	bne.w	8002acc <FACEID+0x6f8>
					{
						buzzer(1);
 8002788:	2001      	movs	r0, #1
 800278a:	f001 faab 	bl	8003ce4 <buzzer>
						exitmenu = Delaymenu;
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <FACEID+0x5d0>)
 8002790:	2214      	movs	r2, #20
 8002792:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 8002794:	7b3b      	ldrb	r3, [r7, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d003      	beq.n	80027a2 <FACEID+0x3ce>
 800279a:	2b02      	cmp	r3, #2
 800279c:	f000 8161 	beq.w	8002a62 <FACEID+0x68e>
 80027a0:	e191      	b.n	8002ac6 <FACEID+0x6f2>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <FACEID+0x5c4>)
 80027a4:	497d      	ldr	r1, [pc, #500]	@ (800299c <FACEID+0x5c8>)
 80027a6:	487e      	ldr	r0, [pc, #504]	@ (80029a0 <FACEID+0x5cc>)
 80027a8:	f7fd fe28 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 80027b0:	2301      	movs	r3, #1
 80027b2:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 80027b4:	e14b      	b.n	8002a4e <FACEID+0x67a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80027b6:	200a      	movs	r0, #10
 80027b8:	f7fd ff7a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80027bc:	4603      	mov	r3, r0
 80027be:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 80027c0:	4b78      	ldr	r3, [pc, #480]	@ (80029a4 <FACEID+0x5d0>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <FACEID+0x404>
								{
									CLCD_I2C_Clear(&LCD1);
 80027c8:	4875      	ldr	r0, [pc, #468]	@ (80029a0 <FACEID+0x5cc>)
 80027ca:	f7fd fe07 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80027ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027d2:	f001 ff95 	bl	8004700 <HAL_Delay>
									return;
 80027d6:	e18f      	b.n	8002af8 <FACEID+0x724>
								}
								if (key_pressed == '*')
 80027d8:	7a3b      	ldrb	r3, [r7, #8]
 80027da:	2b2a      	cmp	r3, #42	@ 0x2a
 80027dc:	d13c      	bne.n	8002858 <FACEID+0x484>
								{
									buzzer(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f001 fa80 	bl	8003ce4 <buzzer>
									exitmenu = Delaymenu;
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <FACEID+0x5d0>)
 80027e6:	2214      	movs	r2, #20
 80027e8:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 80027ea:	7abb      	ldrb	r3, [r7, #10]
 80027ec:	3301      	adds	r3, #1
 80027ee:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 80027f0:	7abb      	ldrb	r3, [r7, #10]
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d801      	bhi.n	80027fa <FACEID+0x426>
 80027f6:	7abb      	ldrb	r3, [r7, #10]
 80027f8:	e000      	b.n	80027fc <FACEID+0x428>
 80027fa:	2300      	movs	r3, #0
 80027fc:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 80027fe:	7abb      	ldrb	r3, [r7, #10]
 8002800:	3b01      	subs	r3, #1
 8002802:	2b03      	cmp	r3, #3
 8002804:	d822      	bhi.n	800284c <FACEID+0x478>
 8002806:	a201      	add	r2, pc, #4	@ (adr r2, 800280c <FACEID+0x438>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002829 	.word	0x08002829
 8002814:	08002835 	.word	0x08002835
 8002818:	08002841 	.word	0x08002841
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 800281c:	4a66      	ldr	r2, [pc, #408]	@ (80029b8 <FACEID+0x5e4>)
 800281e:	4967      	ldr	r1, [pc, #412]	@ (80029bc <FACEID+0x5e8>)
 8002820:	485f      	ldr	r0, [pc, #380]	@ (80029a0 <FACEID+0x5cc>)
 8002822:	f7fd fdeb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002826:	e017      	b.n	8002858 <FACEID+0x484>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002828:	4a65      	ldr	r2, [pc, #404]	@ (80029c0 <FACEID+0x5ec>)
 800282a:	4964      	ldr	r1, [pc, #400]	@ (80029bc <FACEID+0x5e8>)
 800282c:	485c      	ldr	r0, [pc, #368]	@ (80029a0 <FACEID+0x5cc>)
 800282e:	f7fd fde5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002832:	e011      	b.n	8002858 <FACEID+0x484>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002834:	4a63      	ldr	r2, [pc, #396]	@ (80029c4 <FACEID+0x5f0>)
 8002836:	4961      	ldr	r1, [pc, #388]	@ (80029bc <FACEID+0x5e8>)
 8002838:	4859      	ldr	r0, [pc, #356]	@ (80029a0 <FACEID+0x5cc>)
 800283a:	f7fd fddf 	bl	80003fc <CLCD_I2C_Display>
										break;
 800283e:	e00b      	b.n	8002858 <FACEID+0x484>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002840:	4a61      	ldr	r2, [pc, #388]	@ (80029c8 <FACEID+0x5f4>)
 8002842:	495e      	ldr	r1, [pc, #376]	@ (80029bc <FACEID+0x5e8>)
 8002844:	4856      	ldr	r0, [pc, #344]	@ (80029a0 <FACEID+0x5cc>)
 8002846:	f7fd fdd9 	bl	80003fc <CLCD_I2C_Display>
										break;
 800284a:	e005      	b.n	8002858 <FACEID+0x484>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 800284c:	4a5f      	ldr	r2, [pc, #380]	@ (80029cc <FACEID+0x5f8>)
 800284e:	495b      	ldr	r1, [pc, #364]	@ (80029bc <FACEID+0x5e8>)
 8002850:	4853      	ldr	r0, [pc, #332]	@ (80029a0 <FACEID+0x5cc>)
 8002852:	f7fd fdd3 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002856:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 8002858:	7a3b      	ldrb	r3, [r7, #8]
 800285a:	2b23      	cmp	r3, #35	@ 0x23
 800285c:	f040 80f7 	bne.w	8002a4e <FACEID+0x67a>
								{
									buzzer(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f001 fa3f 	bl	8003ce4 <buzzer>
									exitmenu = Delaymenu;
 8002866:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <FACEID+0x5d0>)
 8002868:	2214      	movs	r2, #20
 800286a:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 800286c:	7abb      	ldrb	r3, [r7, #10]
 800286e:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	3b01      	subs	r3, #1
 8002874:	2b03      	cmp	r3, #3
 8002876:	f200 80e7 	bhi.w	8002a48 <FACEID+0x674>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <FACEID+0x4ac>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	080028e9 	.word	0x080028e9
 8002888:	08002941 	.word	0x08002941
 800288c:	080029f1 	.word	0x080029f1
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fdbe 	bl	8003414 <checkfaceid>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d111      	bne.n	80028c2 <FACEID+0x4ee>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 800289e:	4a4c      	ldr	r2, [pc, #304]	@ (80029d0 <FACEID+0x5fc>)
 80028a0:	494c      	ldr	r1, [pc, #304]	@ (80029d4 <FACEID+0x600>)
 80028a2:	483f      	ldr	r0, [pc, #252]	@ (80029a0 <FACEID+0x5cc>)
 80028a4:	f7fd fdaa 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f001 fa1b 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 80028ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028b2:	f001 ff25 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80028b6:	4a40      	ldr	r2, [pc, #256]	@ (80029b8 <FACEID+0x5e4>)
 80028b8:	4940      	ldr	r1, [pc, #256]	@ (80029bc <FACEID+0x5e8>)
 80028ba:	4839      	ldr	r0, [pc, #228]	@ (80029a0 <FACEID+0x5cc>)
 80028bc:	f7fd fd9e 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 80028c0:	e0c5      	b.n	8002a4e <FACEID+0x67a>
											removeface(keyrm1);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fd45 	bl	8003354 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 80028ca:	4a43      	ldr	r2, [pc, #268]	@ (80029d8 <FACEID+0x604>)
 80028cc:	4943      	ldr	r1, [pc, #268]	@ (80029dc <FACEID+0x608>)
 80028ce:	4834      	ldr	r0, [pc, #208]	@ (80029a0 <FACEID+0x5cc>)
 80028d0:	f7fd fd94 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80028d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028d8:	f001 ff12 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80028dc:	4a36      	ldr	r2, [pc, #216]	@ (80029b8 <FACEID+0x5e4>)
 80028de:	4937      	ldr	r1, [pc, #220]	@ (80029bc <FACEID+0x5e8>)
 80028e0:	482f      	ldr	r0, [pc, #188]	@ (80029a0 <FACEID+0x5cc>)
 80028e2:	f7fd fd8b 	bl	80003fc <CLCD_I2C_Display>
										break;
 80028e6:	e0b2      	b.n	8002a4e <FACEID+0x67a>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd92 	bl	8003414 <checkfaceid>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <FACEID+0x546>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <FACEID+0x5fc>)
 80028f8:	4939      	ldr	r1, [pc, #228]	@ (80029e0 <FACEID+0x60c>)
 80028fa:	4829      	ldr	r0, [pc, #164]	@ (80029a0 <FACEID+0x5cc>)
 80028fc:	f7fd fd7e 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002900:	2003      	movs	r0, #3
 8002902:	f001 f9ef 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 8002906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800290a:	f001 fef9 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800290e:	4a2c      	ldr	r2, [pc, #176]	@ (80029c0 <FACEID+0x5ec>)
 8002910:	492a      	ldr	r1, [pc, #168]	@ (80029bc <FACEID+0x5e8>)
 8002912:	4823      	ldr	r0, [pc, #140]	@ (80029a0 <FACEID+0x5cc>)
 8002914:	f7fd fd72 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 8002918:	e099      	b.n	8002a4e <FACEID+0x67a>
											removeface(keyrm1);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fd19 	bl	8003354 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 8002922:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <FACEID+0x604>)
 8002924:	492f      	ldr	r1, [pc, #188]	@ (80029e4 <FACEID+0x610>)
 8002926:	481e      	ldr	r0, [pc, #120]	@ (80029a0 <FACEID+0x5cc>)
 8002928:	f7fd fd68 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800292c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002930:	f001 fee6 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002934:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <FACEID+0x5ec>)
 8002936:	4921      	ldr	r1, [pc, #132]	@ (80029bc <FACEID+0x5e8>)
 8002938:	4819      	ldr	r0, [pc, #100]	@ (80029a0 <FACEID+0x5cc>)
 800293a:	f7fd fd5f 	bl	80003fc <CLCD_I2C_Display>
										break;
 800293e:	e086      	b.n	8002a4e <FACEID+0x67a>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fd66 	bl	8003414 <checkfaceid>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d111      	bne.n	8002972 <FACEID+0x59e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 800294e:	4a20      	ldr	r2, [pc, #128]	@ (80029d0 <FACEID+0x5fc>)
 8002950:	4925      	ldr	r1, [pc, #148]	@ (80029e8 <FACEID+0x614>)
 8002952:	4813      	ldr	r0, [pc, #76]	@ (80029a0 <FACEID+0x5cc>)
 8002954:	f7fd fd52 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002958:	2003      	movs	r0, #3
 800295a:	f001 f9c3 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 800295e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002962:	f001 fecd 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002966:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <FACEID+0x5f0>)
 8002968:	4914      	ldr	r1, [pc, #80]	@ (80029bc <FACEID+0x5e8>)
 800296a:	480d      	ldr	r0, [pc, #52]	@ (80029a0 <FACEID+0x5cc>)
 800296c:	f7fd fd46 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 8002970:	e06d      	b.n	8002a4e <FACEID+0x67a>
											removeface(keyrm1);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fced 	bl	8003354 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <FACEID+0x604>)
 800297c:	491b      	ldr	r1, [pc, #108]	@ (80029ec <FACEID+0x618>)
 800297e:	4808      	ldr	r0, [pc, #32]	@ (80029a0 <FACEID+0x5cc>)
 8002980:	f7fd fd3c 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002988:	f001 feba 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <FACEID+0x5f0>)
 800298e:	490b      	ldr	r1, [pc, #44]	@ (80029bc <FACEID+0x5e8>)
 8002990:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <FACEID+0x5cc>)
 8002992:	f7fd fd33 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002996:	e05a      	b.n	8002a4e <FACEID+0x67a>
 8002998:	0800ddfc 	.word	0x0800ddfc
 800299c:	0800de08 	.word	0x0800de08
 80029a0:	200003d8 	.word	0x200003d8
 80029a4:	20000020 	.word	0x20000020
 80029a8:	0800e238 	.word	0x0800e238
 80029ac:	0800e24c 	.word	0x0800e24c
 80029b0:	0800df78 	.word	0x0800df78
 80029b4:	0800ddf4 	.word	0x0800ddf4
 80029b8:	0800e25c 	.word	0x0800e25c
 80029bc:	0800df98 	.word	0x0800df98
 80029c0:	0800e270 	.word	0x0800e270
 80029c4:	0800e284 	.word	0x0800e284
 80029c8:	0800e298 	.word	0x0800e298
 80029cc:	0800e2ac 	.word	0x0800e2ac
 80029d0:	0800e02c 	.word	0x0800e02c
 80029d4:	0800e2b8 	.word	0x0800e2b8
 80029d8:	0800e03c 	.word	0x0800e03c
 80029dc:	0800e2c8 	.word	0x0800e2c8
 80029e0:	0800e2d8 	.word	0x0800e2d8
 80029e4:	0800e2e8 	.word	0x0800e2e8
 80029e8:	0800e2f8 	.word	0x0800e2f8
 80029ec:	0800e308 	.word	0x0800e308
									case 4:
										if (checkfaceid(keyrm1) == 0)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fd0e 	bl	8003414 <checkfaceid>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d111      	bne.n	8002a22 <FACEID+0x64e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 80029fe:	4a40      	ldr	r2, [pc, #256]	@ (8002b00 <FACEID+0x72c>)
 8002a00:	4940      	ldr	r1, [pc, #256]	@ (8002b04 <FACEID+0x730>)
 8002a02:	4841      	ldr	r0, [pc, #260]	@ (8002b08 <FACEID+0x734>)
 8002a04:	f7fd fcfa 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f001 f96b 	bl	8003ce4 <buzzer>
											HAL_Delay(1000);
 8002a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a12:	f001 fe75 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a16:	4a3d      	ldr	r2, [pc, #244]	@ (8002b0c <FACEID+0x738>)
 8002a18:	493d      	ldr	r1, [pc, #244]	@ (8002b10 <FACEID+0x73c>)
 8002a1a:	483b      	ldr	r0, [pc, #236]	@ (8002b08 <FACEID+0x734>)
 8002a1c:	f7fd fcee 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002a20:	e015      	b.n	8002a4e <FACEID+0x67a>
											removeface(keyrm1);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fc95 	bl	8003354 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 8002a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b14 <FACEID+0x740>)
 8002a2c:	493a      	ldr	r1, [pc, #232]	@ (8002b18 <FACEID+0x744>)
 8002a2e:	4836      	ldr	r0, [pc, #216]	@ (8002b08 <FACEID+0x734>)
 8002a30:	f7fd fce4 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a38:	f001 fe62 	bl	8004700 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a3c:	4a33      	ldr	r2, [pc, #204]	@ (8002b0c <FACEID+0x738>)
 8002a3e:	4934      	ldr	r1, [pc, #208]	@ (8002b10 <FACEID+0x73c>)
 8002a40:	4831      	ldr	r0, [pc, #196]	@ (8002b08 <FACEID+0x734>)
 8002a42:	f7fd fcdb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002a46:	e002      	b.n	8002a4e <FACEID+0x67a>
									default:
										backrm1 = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	727b      	strb	r3, [r7, #9]
										break;
 8002a4c:	bf00      	nop
							while (backrm1 == 1)
 8002a4e:	7a7b      	ldrb	r3, [r7, #9]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f43f aeb0 	beq.w	80027b6 <FACEID+0x3e2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002a56:	4a31      	ldr	r2, [pc, #196]	@ (8002b1c <FACEID+0x748>)
 8002a58:	4931      	ldr	r1, [pc, #196]	@ (8002b20 <FACEID+0x74c>)
 8002a5a:	482b      	ldr	r0, [pc, #172]	@ (8002b08 <FACEID+0x734>)
 8002a5c:	f7fd fcce 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002a60:	e034      	b.n	8002acc <FACEID+0x6f8>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 8002a62:	4930      	ldr	r1, [pc, #192]	@ (8002b24 <FACEID+0x750>)
 8002a64:	4830      	ldr	r0, [pc, #192]	@ (8002b28 <FACEID+0x754>)
 8002a66:	f00a fc9b 	bl	800d3a0 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 8002a6a:	2107      	movs	r1, #7
 8002a6c:	482e      	ldr	r0, [pc, #184]	@ (8002b28 <FACEID+0x754>)
 8002a6e:	f00a f885 	bl	800cb7c <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002a72:	4a2e      	ldr	r2, [pc, #184]	@ (8002b2c <FACEID+0x758>)
 8002a74:	492e      	ldr	r1, [pc, #184]	@ (8002b30 <FACEID+0x75c>)
 8002a76:	4824      	ldr	r0, [pc, #144]	@ (8002b08 <FACEID+0x734>)
 8002a78:	f7fd fcc0 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <FACEID+0x760>)
 8002a7e:	223c      	movs	r2, #60	@ 0x3c
 8002a80:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	2100      	movs	r1, #0
 8002a86:	482c      	ldr	r0, [pc, #176]	@ (8002b38 <FACEID+0x764>)
 8002a88:	f00a fcaa 	bl	800d3e0 <memset>
							while(exitmenu != 0){
 8002a8c:	e013      	b.n	8002ab6 <FACEID+0x6e2>
								if(Rx_Buffer[0] == 'T'){
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <FACEID+0x764>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	2b54      	cmp	r3, #84	@ 0x54
 8002a96:	d10e      	bne.n	8002ab6 <FACEID+0x6e2>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 8002a98:	4a1e      	ldr	r2, [pc, #120]	@ (8002b14 <FACEID+0x740>)
 8002a9a:	4928      	ldr	r1, [pc, #160]	@ (8002b3c <FACEID+0x768>)
 8002a9c:	481a      	ldr	r0, [pc, #104]	@ (8002b08 <FACEID+0x734>)
 8002a9e:	f7fd fcad 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002aa2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002aa6:	f001 fe2b 	bl	8004700 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002aaa:	2280      	movs	r2, #128	@ 0x80
 8002aac:	2100      	movs	r1, #0
 8002aae:	4822      	ldr	r0, [pc, #136]	@ (8002b38 <FACEID+0x764>)
 8002ab0:	f00a fc96 	bl	800d3e0 <memset>
									break;
 8002ab4:	e003      	b.n	8002abe <FACEID+0x6ea>
							while(exitmenu != 0){
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <FACEID+0x760>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e7      	bne.n	8002a8e <FACEID+0x6ba>
								}
							}
							exitmenu = 0;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <FACEID+0x760>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002ac4:	e002      	b.n	8002acc <FACEID+0x6f8>
						default:
							backrm=0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	72fb      	strb	r3, [r7, #11]
							break;
 8002aca:	bf00      	nop
				while (backrm == 1)
 8002acc:	7afb      	ldrb	r3, [r7, #11]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f43f ae1a 	beq.w	8002708 <FACEID+0x334>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <FACEID+0x76c>)
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <FACEID+0x770>)
 8002ad8:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <FACEID+0x734>)
 8002ada:	f7fd fc8f 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002ade:	e003      	b.n	8002ae8 <FACEID+0x714>
			default:
				exitmenu=0;
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <FACEID+0x760>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
				break;
 8002ae6:	bf00      	nop
	while (exitmenu )
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <FACEID+0x760>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f ac82 	bne.w	80023f6 <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <FACEID+0x734>)
 8002af4:	f7fd fc72 	bl	80003dc <CLCD_I2C_Clear>
}
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800e02c 	.word	0x0800e02c
 8002b04:	0800e318 	.word	0x0800e318
 8002b08:	200003d8 	.word	0x200003d8
 8002b0c:	0800e298 	.word	0x0800e298
 8002b10:	0800df98 	.word	0x0800df98
 8002b14:	0800e03c 	.word	0x0800e03c
 8002b18:	0800e328 	.word	0x0800e328
 8002b1c:	0800e238 	.word	0x0800e238
 8002b20:	0800e24c 	.word	0x0800e24c
 8002b24:	0800e338 	.word	0x0800e338
 8002b28:	200003d0 	.word	0x200003d0
 8002b2c:	0800dd28 	.word	0x0800dd28
 8002b30:	0800e340 	.word	0x0800e340
 8002b34:	20000020 	.word	0x20000020
 8002b38:	20000350 	.word	0x20000350
 8002b3c:	0800e34c 	.word	0x0800e34c
 8002b40:	0800e158 	.word	0x0800e158
 8002b44:	0800e134 	.word	0x0800e134

08002b48 <FINGER>:
void FINGER(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	buzzer(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f001 f8c8 	bl	8003ce4 <buzzer>
	exitmenu = Delaymenu;
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <FINGER+0x108>)
 8002b56:	2214      	movs	r2, #20
 8002b58:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002b5a:	23ff      	movs	r3, #255	@ 0xff
 8002b5c:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 8002b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c54 <FINGER+0x10c>)
 8002b60:	493d      	ldr	r1, [pc, #244]	@ (8002c58 <FINGER+0x110>)
 8002b62:	483e      	ldr	r0, [pc, #248]	@ (8002c5c <FINGER+0x114>)
 8002b64:	f7fd fc4a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002b68:	e068      	b.n	8002c3c <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002b6a:	200a      	movs	r0, #10
 8002b6c:	f7fd fda0 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002b70:	4603      	mov	r3, r0
 8002b72:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002b74:	79bb      	ldrb	r3, [r7, #6]
 8002b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b78:	d131      	bne.n	8002bde <FINGER+0x96>
		{
			buzzer(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f001 f8b2 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <FINGER+0x108>)
 8002b82:	2214      	movs	r2, #20
 8002b84:	701a      	strb	r2, [r3, #0]
			status++;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d801      	bhi.n	8002b96 <FINGER+0x4e>
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	e000      	b.n	8002b98 <FINGER+0x50>
 8002b96:	2300      	movs	r3, #0
 8002b98:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d012      	beq.n	8002bc6 <FINGER+0x7e>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	dc16      	bgt.n	8002bd2 <FINGER+0x8a>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <FINGER+0x66>
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d006      	beq.n	8002bba <FINGER+0x72>
 8002bac:	e011      	b.n	8002bd2 <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002bae:	4a2c      	ldr	r2, [pc, #176]	@ (8002c60 <FINGER+0x118>)
 8002bb0:	4929      	ldr	r1, [pc, #164]	@ (8002c58 <FINGER+0x110>)
 8002bb2:	482a      	ldr	r0, [pc, #168]	@ (8002c5c <FINGER+0x114>)
 8002bb4:	f7fd fc22 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002bb8:	e011      	b.n	8002bde <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002bba:	4a2a      	ldr	r2, [pc, #168]	@ (8002c64 <FINGER+0x11c>)
 8002bbc:	4926      	ldr	r1, [pc, #152]	@ (8002c58 <FINGER+0x110>)
 8002bbe:	4827      	ldr	r0, [pc, #156]	@ (8002c5c <FINGER+0x114>)
 8002bc0:	f7fd fc1c 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002bc4:	e00b      	b.n	8002bde <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002bc6:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <FINGER+0x120>)
 8002bc8:	4923      	ldr	r1, [pc, #140]	@ (8002c58 <FINGER+0x110>)
 8002bca:	4824      	ldr	r0, [pc, #144]	@ (8002c5c <FINGER+0x114>)
 8002bcc:	f7fd fc16 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002bd0:	e005      	b.n	8002bde <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002bd2:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <FINGER+0x124>)
 8002bd4:	4920      	ldr	r1, [pc, #128]	@ (8002c58 <FINGER+0x110>)
 8002bd6:	4821      	ldr	r0, [pc, #132]	@ (8002c5c <FINGER+0x114>)
 8002bd8:	f7fd fc10 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002bdc:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002bde:	79bb      	ldrb	r3, [r7, #6]
 8002be0:	2b23      	cmp	r3, #35	@ 0x23
 8002be2:	d12b      	bne.n	8002c3c <FINGER+0xf4>
		{
			buzzer(1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 f87d 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 8002bea:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <FINGER+0x108>)
 8002bec:	2214      	movs	r2, #20
 8002bee:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d016      	beq.n	8002c24 <FINGER+0xdc>
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	dc1c      	bgt.n	8002c34 <FINGER+0xec>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <FINGER+0xbc>
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d008      	beq.n	8002c14 <FINGER+0xcc>
 8002c02:	e017      	b.n	8002c34 <FINGER+0xec>
			{
			case 0:
                add_finger();
 8002c04:	f000 fc42 	bl	800348c <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <FINGER+0x118>)
 8002c0a:	4913      	ldr	r1, [pc, #76]	@ (8002c58 <FINGER+0x110>)
 8002c0c:	4813      	ldr	r0, [pc, #76]	@ (8002c5c <FINGER+0x114>)
 8002c0e:	f7fd fbf5 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c12:	e013      	b.n	8002c3c <FINGER+0xf4>
            case 1:
                remove_id_finger();
 8002c14:	f000 fe06 	bl	8003824 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <FINGER+0x11c>)
 8002c1a:	490f      	ldr	r1, [pc, #60]	@ (8002c58 <FINGER+0x110>)
 8002c1c:	480f      	ldr	r0, [pc, #60]	@ (8002c5c <FINGER+0x114>)
 8002c1e:	f7fd fbed 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c22:	e00b      	b.n	8002c3c <FINGER+0xf4>
            case 2:
                remove_all_finger();
 8002c24:	f000 fe7a 	bl	800391c <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <FINGER+0x120>)
 8002c2a:	490b      	ldr	r1, [pc, #44]	@ (8002c58 <FINGER+0x110>)
 8002c2c:	480b      	ldr	r0, [pc, #44]	@ (8002c5c <FINGER+0x114>)
 8002c2e:	f7fd fbe5 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c32:	e003      	b.n	8002c3c <FINGER+0xf4>
            default:
                exitmenu = 0;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <FINGER+0x108>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
                break;
 8002c3a:	bf00      	nop
	while (exitmenu )
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <FINGER+0x108>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d192      	bne.n	8002b6a <FINGER+0x22>
            }
        }
    }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000020 	.word	0x20000020
 8002c54:	0800dda8 	.word	0x0800dda8
 8002c58:	0800e35c 	.word	0x0800e35c
 8002c5c:	200003d8 	.word	0x200003d8
 8002c60:	0800e36c 	.word	0x0800e36c
 8002c64:	0800e37c 	.word	0x0800e37c
 8002c68:	0800e390 	.word	0x0800e390
 8002c6c:	0800ddf4 	.word	0x0800ddf4

08002c70 <PASSWORD>:


void PASSWORD(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	buzzer(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f001 f834 	bl	8003ce4 <buzzer>
	exitmenu = Delaymenu;
 8002c7c:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <PASSWORD+0xdc>)
 8002c7e:	2214      	movs	r2, #20
 8002c80:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002c82:	23ff      	movs	r3, #255	@ 0xff
 8002c84:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002c86:	4a32      	ldr	r2, [pc, #200]	@ (8002d50 <PASSWORD+0xe0>)
 8002c88:	4932      	ldr	r1, [pc, #200]	@ (8002d54 <PASSWORD+0xe4>)
 8002c8a:	4833      	ldr	r0, [pc, #204]	@ (8002d58 <PASSWORD+0xe8>)
 8002c8c:	f7fd fbb6 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002c90:	e052      	b.n	8002d38 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002c92:	200a      	movs	r0, #10
 8002c94:	f7fd fd0c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002c9c:	79bb      	ldrb	r3, [r7, #6]
 8002c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca0:	d127      	bne.n	8002cf2 <PASSWORD+0x82>
		{
			buzzer(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f001 f81e 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <PASSWORD+0xdc>)
 8002caa:	2214      	movs	r2, #20
 8002cac:	701a      	strb	r2, [r3, #0]
			status++;
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d801      	bhi.n	8002cbe <PASSWORD+0x4e>
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	e000      	b.n	8002cc0 <PASSWORD+0x50>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <PASSWORD+0x5e>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d006      	beq.n	8002cda <PASSWORD+0x6a>
 8002ccc:	e00b      	b.n	8002ce6 <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002cce:	4a23      	ldr	r2, [pc, #140]	@ (8002d5c <PASSWORD+0xec>)
 8002cd0:	4920      	ldr	r1, [pc, #128]	@ (8002d54 <PASSWORD+0xe4>)
 8002cd2:	4821      	ldr	r0, [pc, #132]	@ (8002d58 <PASSWORD+0xe8>)
 8002cd4:	f7fd fb92 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002cd8:	e00b      	b.n	8002cf2 <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002cda:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <PASSWORD+0xf0>)
 8002cdc:	491d      	ldr	r1, [pc, #116]	@ (8002d54 <PASSWORD+0xe4>)
 8002cde:	481e      	ldr	r0, [pc, #120]	@ (8002d58 <PASSWORD+0xe8>)
 8002ce0:	f7fd fb8c 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002ce4:	e005      	b.n	8002cf2 <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <PASSWORD+0xf4>)
 8002ce8:	491a      	ldr	r1, [pc, #104]	@ (8002d54 <PASSWORD+0xe4>)
 8002cea:	481b      	ldr	r0, [pc, #108]	@ (8002d58 <PASSWORD+0xe8>)
 8002cec:	f7fd fb86 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002cf0:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	2b23      	cmp	r3, #35	@ 0x23
 8002cf6:	d11f      	bne.n	8002d38 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f000 fff3 	bl	8003ce4 <buzzer>
			exitmenu = Delaymenu;
 8002cfe:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <PASSWORD+0xdc>)
 8002d00:	2214      	movs	r2, #20
 8002d02:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <PASSWORD+0xa0>
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d008      	beq.n	8002d20 <PASSWORD+0xb0>
 8002d0e:	e00f      	b.n	8002d30 <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002d10:	f000 fecc 	bl	8003aac <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002d14:	4a11      	ldr	r2, [pc, #68]	@ (8002d5c <PASSWORD+0xec>)
 8002d16:	490f      	ldr	r1, [pc, #60]	@ (8002d54 <PASSWORD+0xe4>)
 8002d18:	480f      	ldr	r0, [pc, #60]	@ (8002d58 <PASSWORD+0xe8>)
 8002d1a:	f7fd fb6f 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d1e:	e00b      	b.n	8002d38 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002d20:	f000 ff50 	bl	8003bc4 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002d24:	4a0e      	ldr	r2, [pc, #56]	@ (8002d60 <PASSWORD+0xf0>)
 8002d26:	490b      	ldr	r1, [pc, #44]	@ (8002d54 <PASSWORD+0xe4>)
 8002d28:	480b      	ldr	r0, [pc, #44]	@ (8002d58 <PASSWORD+0xe8>)
 8002d2a:	f7fd fb67 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d2e:	e003      	b.n	8002d38 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <PASSWORD+0xdc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
                break;
 8002d36:	bf00      	nop
	while (exitmenu )
 8002d38:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <PASSWORD+0xdc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1a8      	bne.n	8002c92 <PASSWORD+0x22>
            }
        }
    }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000020 	.word	0x20000020
 8002d50:	0800dda8 	.word	0x0800dda8
 8002d54:	0800e3a0 	.word	0x0800e3a0
 8002d58:	200003d8 	.word	0x200003d8
 8002d5c:	0800e3b4 	.word	0x0800e3b4
 8002d60:	0800e3c4 	.word	0x0800e3c4
 8002d64:	0800ddf4 	.word	0x0800ddf4

08002d68 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	2208      	movs	r2, #8
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f7fd ffbf 	bl	8000cfe <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002d80:	7cbb      	ldrb	r3, [r7, #18]
 8002d82:	2bff      	cmp	r3, #255	@ 0xff
 8002d84:	d001      	beq.n	8002d8a <CheckUID+0x22>
		return 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e016      	b.n	8002db8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
 8002d8e:	e00f      	b.n	8002db0 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	443b      	add	r3, r7
 8002d9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <CheckUID+0x42>
			return 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e006      	b.n	8002db8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	3301      	adds	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d9ec      	bls.n	8002d90 <CheckUID+0x28>
	}
	return 1;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <CheckListUID+0x5c>)
 8002dca:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002dcc:	e018      	b.n	8002e00 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3306      	adds	r3, #6
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd ff7a 	bl	8000ccc <Flash_Read_2Byte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d10a      	bne.n	8002dfa <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffbe 	bl	8002d68 <CheckUID>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d103      	bne.n	8002dfa <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3305      	adds	r3, #5
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	e00b      	b.n	8002e12 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3305      	adds	r3, #5
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd ff55 	bl	8000cb4 <Flash_Read_Byte>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2bff      	cmp	r3, #255	@ 0xff
 8002e0e:	d1de      	bne.n	8002dce <CheckListUID+0xe>
	}
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	0800f000 	.word	0x0800f000

08002e20 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <checkcountUID+0x60>)
 8002e28:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e2e:	e01a      	b.n	8002e66 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3306      	adds	r3, #6
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd ff49 	bl	8000ccc <Flash_Read_2Byte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10c      	bne.n	8002e60 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3305      	adds	r3, #5
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ff32 	bl	8000cb4 <Flash_Read_Byte>
 8002e50:	4603      	mov	r3, r0
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <checkcountUID+0x40>
			{
				count++;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3308      	adds	r3, #8
 8002e64:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3305      	adds	r3, #5
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff22 	bl	8000cb4 <Flash_Read_Byte>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d1dc      	bne.n	8002e30 <checkcountUID+0x10>
	}
	return count;
 8002e76:	78fb      	ldrb	r3, [r7, #3]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	0800f000 	.word	0x0800f000

08002e84 <adduid>:

void adduid(uint8_t key)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002e8e:	f000 f9bd 	bl	800320c <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002e92:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <adduid+0xd0>)
 8002e94:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <adduid+0xd4>)
 8002e96:	4831      	ldr	r0, [pc, #196]	@ (8002f5c <adduid+0xd8>)
 8002e98:	f7fd fab0 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu)
 8002e9c:	e053      	b.n	8002f46 <adduid+0xc2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002e9e:	4830      	ldr	r0, [pc, #192]	@ (8002f60 <adduid+0xdc>)
 8002ea0:	f000 ff96 	bl	8003dd0 <TM_MFRC522_Check>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d143      	bne.n	8002f32 <adduid+0xae>
		{
			HAL_Delay(100);
 8002eaa:	2064      	movs	r0, #100	@ 0x64
 8002eac:	f001 fc28 	bl	8004700 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002eb0:	482b      	ldr	r0, [pc, #172]	@ (8002f60 <adduid+0xdc>)
 8002eb2:	f7ff ff85 	bl	8002dc0 <CheckListUID>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d122      	bne.n	8002f02 <adduid+0x7e>
			{
				buzzer(1);
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f000 ff11 	bl	8003ce4 <buzzer>
				CardID[5] = key;
 8002ec2:	4a27      	ldr	r2, [pc, #156]	@ (8002f60 <adduid+0xdc>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002ec8:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <adduid+0xe0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2206      	movs	r2, #6
 8002ece:	4924      	ldr	r1, [pc, #144]	@ (8002f60 <adduid+0xdc>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fecc 	bl	8000c6e <Flash_Write_Array>
				AddressUID += 8;
 8002ed6:	4b23      	ldr	r3, [pc, #140]	@ (8002f64 <adduid+0xe0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	4a21      	ldr	r2, [pc, #132]	@ (8002f64 <adduid+0xe0>)
 8002ede:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 8002ee0:	481e      	ldr	r0, [pc, #120]	@ (8002f5c <adduid+0xd8>)
 8002ee2:	f7fd fa7b 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	481c      	ldr	r0, [pc, #112]	@ (8002f5c <adduid+0xd8>)
 8002eec:	f7fd fa0c 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8002ef0:	491d      	ldr	r1, [pc, #116]	@ (8002f68 <adduid+0xe4>)
 8002ef2:	481a      	ldr	r0, [pc, #104]	@ (8002f5c <adduid+0xd8>)
 8002ef4:	f7fd fa5b 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002ef8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002efc:	f001 fc00 	bl	8004700 <HAL_Delay>
				return;
 8002f00:	e025      	b.n	8002f4e <adduid+0xca>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 8002f02:	4816      	ldr	r0, [pc, #88]	@ (8002f5c <adduid+0xd8>)
 8002f04:	f7fd fa6a 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4813      	ldr	r0, [pc, #76]	@ (8002f5c <adduid+0xd8>)
 8002f0e:	f7fd f9fb 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002f12:	4916      	ldr	r1, [pc, #88]	@ (8002f6c <adduid+0xe8>)
 8002f14:	4811      	ldr	r0, [pc, #68]	@ (8002f5c <adduid+0xd8>)
 8002f16:	f7fd fa4a 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	f000 fee2 	bl	8003ce4 <buzzer>
				HAL_Delay(1000);
 8002f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f24:	f001 fbec 	bl	8004700 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002f28:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <adduid+0xd0>)
 8002f2a:	490b      	ldr	r1, [pc, #44]	@ (8002f58 <adduid+0xd4>)
 8002f2c:	480b      	ldr	r0, [pc, #44]	@ (8002f5c <adduid+0xd8>)
 8002f2e:	f7fd fa65 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002f32:	2064      	movs	r0, #100	@ 0x64
 8002f34:	f7fd fbbc 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b23      	cmp	r3, #35	@ 0x23
 8002f3c:	d103      	bne.n	8002f46 <adduid+0xc2>
		{
			buzzer(1);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f000 fed0 	bl	8003ce4 <buzzer>
			return;
 8002f44:	e003      	b.n	8002f4e <adduid+0xca>
	while (exitmenu)
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <adduid+0xec>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1a7      	bne.n	8002e9e <adduid+0x1a>
		}
	}
}
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	0800ddf4 	.word	0x0800ddf4
 8002f58:	0800e3d4 	.word	0x0800e3d4
 8002f5c:	200003d8 	.word	0x200003d8
 8002f60:	200003e4 	.word	0x200003e4
 8002f64:	20000024 	.word	0x20000024
 8002f68:	0800e3e0 	.word	0x0800e3e0
 8002f6c:	0800e3f0 	.word	0x0800e3f0
 8002f70:	20000020 	.word	0x20000020

08002f74 <checkthe>:

void checkthe(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80030b0 <checkthe+0x13c>)
 8002f7c:	221e      	movs	r2, #30
 8002f7e:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002f80:	4a4c      	ldr	r2, [pc, #304]	@ (80030b4 <checkthe+0x140>)
 8002f82:	494d      	ldr	r1, [pc, #308]	@ (80030b8 <checkthe+0x144>)
 8002f84:	484d      	ldr	r0, [pc, #308]	@ (80030bc <checkthe+0x148>)
 8002f86:	f7fd fa39 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002f8a:	e088      	b.n	800309e <checkthe+0x12a>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002f8c:	484c      	ldr	r0, [pc, #304]	@ (80030c0 <checkthe+0x14c>)
 8002f8e:	f000 ff1f 	bl	8003dd0 <TM_MFRC522_Check>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d178      	bne.n	800308a <checkthe+0x116>
		{
			if (CheckListUID(CardID) == 0)
 8002f98:	4849      	ldr	r0, [pc, #292]	@ (80030c0 <checkthe+0x14c>)
 8002f9a:	f7ff ff11 	bl	8002dc0 <CheckListUID>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11c      	bne.n	8002fde <checkthe+0x6a>
			{
				CLCD_I2C_Clear(&LCD1);
 8002fa4:	4845      	ldr	r0, [pc, #276]	@ (80030bc <checkthe+0x148>)
 8002fa6:	f7fd fa19 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	4843      	ldr	r0, [pc, #268]	@ (80030bc <checkthe+0x148>)
 8002fb0:	f7fd f9aa 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002fb4:	4943      	ldr	r1, [pc, #268]	@ (80030c4 <checkthe+0x150>)
 8002fb6:	4841      	ldr	r0, [pc, #260]	@ (80030bc <checkthe+0x148>)
 8002fb8:	f7fd f9f9 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 fe91 	bl	8003ce4 <buzzer>
				HAL_Delay(1000);
 8002fc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fc6:	f001 fb9b 	bl	8004700 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002fca:	4a3a      	ldr	r2, [pc, #232]	@ (80030b4 <checkthe+0x140>)
 8002fcc:	493a      	ldr	r1, [pc, #232]	@ (80030b8 <checkthe+0x144>)
 8002fce:	483b      	ldr	r0, [pc, #236]	@ (80030bc <checkthe+0x148>)
 8002fd0:	f7fd fa14 	bl	80003fc <CLCD_I2C_Display>
				HAL_Delay(1000);
 8002fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fd8:	f001 fb92 	bl	8004700 <HAL_Delay>
 8002fdc:	e055      	b.n	800308a <checkthe+0x116>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002fde:	4838      	ldr	r0, [pc, #224]	@ (80030c0 <checkthe+0x14c>)
 8002fe0:	f7ff feee 	bl	8002dc0 <CheckListUID>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8002ff6:	4831      	ldr	r0, [pc, #196]	@ (80030bc <checkthe+0x148>)
 8002ff8:	f7fd f9f0 	bl	80003dc <CLCD_I2C_Clear>
				buzzer(1);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 fe71 	bl	8003ce4 <buzzer>
				switch (key1)
 8003002:	797b      	ldrb	r3, [r7, #5]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d109      	bne.n	800301c <checkthe+0xa8>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	482b      	ldr	r0, [pc, #172]	@ (80030bc <checkthe+0x148>)
 800300e:	f7fd f97b 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8003012:	492d      	ldr	r1, [pc, #180]	@ (80030c8 <checkthe+0x154>)
 8003014:	4829      	ldr	r0, [pc, #164]	@ (80030bc <checkthe+0x148>)
 8003016:	f7fd f9ca 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800301a:	e009      	b.n	8003030 <checkthe+0xbc>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	4826      	ldr	r0, [pc, #152]	@ (80030bc <checkthe+0x148>)
 8003022:	f7fd f971 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8003026:	4929      	ldr	r1, [pc, #164]	@ (80030cc <checkthe+0x158>)
 8003028:	4824      	ldr	r0, [pc, #144]	@ (80030bc <checkthe+0x148>)
 800302a:	f7fd f9c0 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800302e:	bf00      	nop
				}
				switch (key2)
 8003030:	79bb      	ldrb	r3, [r7, #6]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <checkthe+0xc8>
 8003036:	2b02      	cmp	r3, #2
 8003038:	d00a      	beq.n	8003050 <checkthe+0xdc>
 800303a:	e013      	b.n	8003064 <checkthe+0xf0>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	2100      	movs	r1, #0
 8003040:	481e      	ldr	r0, [pc, #120]	@ (80030bc <checkthe+0x148>)
 8003042:	f7fd f961 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8003046:	4922      	ldr	r1, [pc, #136]	@ (80030d0 <checkthe+0x15c>)
 8003048:	481c      	ldr	r0, [pc, #112]	@ (80030bc <checkthe+0x148>)
 800304a:	f7fd f9b0 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800304e:	e013      	b.n	8003078 <checkthe+0x104>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003050:	2201      	movs	r2, #1
 8003052:	2100      	movs	r1, #0
 8003054:	4819      	ldr	r0, [pc, #100]	@ (80030bc <checkthe+0x148>)
 8003056:	f7fd f957 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 800305a:	491e      	ldr	r1, [pc, #120]	@ (80030d4 <checkthe+0x160>)
 800305c:	4817      	ldr	r0, [pc, #92]	@ (80030bc <checkthe+0x148>)
 800305e:	f7fd f9a6 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8003062:	e009      	b.n	8003078 <checkthe+0x104>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003064:	2201      	movs	r2, #1
 8003066:	2100      	movs	r1, #0
 8003068:	4814      	ldr	r0, [pc, #80]	@ (80030bc <checkthe+0x148>)
 800306a:	f7fd f94d 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 800306e:	491a      	ldr	r1, [pc, #104]	@ (80030d8 <checkthe+0x164>)
 8003070:	4812      	ldr	r0, [pc, #72]	@ (80030bc <checkthe+0x148>)
 8003072:	f7fd f99c 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8003076:	bf00      	nop
				}
				HAL_Delay(1000);
 8003078:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800307c:	f001 fb40 	bl	8004700 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8003080:	4a0c      	ldr	r2, [pc, #48]	@ (80030b4 <checkthe+0x140>)
 8003082:	4916      	ldr	r1, [pc, #88]	@ (80030dc <checkthe+0x168>)
 8003084:	480d      	ldr	r0, [pc, #52]	@ (80030bc <checkthe+0x148>)
 8003086:	f7fd f9b9 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 800308a:	2064      	movs	r0, #100	@ 0x64
 800308c:	f7fd fb10 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003090:	4603      	mov	r3, r0
 8003092:	2b23      	cmp	r3, #35	@ 0x23
 8003094:	d103      	bne.n	800309e <checkthe+0x12a>
		{
			buzzer(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f000 fe24 	bl	8003ce4 <buzzer>
			return;
 800309c:	e004      	b.n	80030a8 <checkthe+0x134>
	while (exitmenu )
 800309e:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <checkthe+0x13c>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f af72 	bne.w	8002f8c <checkthe+0x18>
		}
	}
}
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000020 	.word	0x20000020
 80030b4:	0800ddf4 	.word	0x0800ddf4
 80030b8:	0800e3d4 	.word	0x0800e3d4
 80030bc:	200003d8 	.word	0x200003d8
 80030c0:	200003e4 	.word	0x200003e4
 80030c4:	0800e400 	.word	0x0800e400
 80030c8:	0800e410 	.word	0x0800e410
 80030cc:	0800e41c 	.word	0x0800e41c
 80030d0:	0800e428 	.word	0x0800e428
 80030d4:	0800e430 	.word	0x0800e430
 80030d8:	0800e438 	.word	0x0800e438
 80030dc:	0800e104 	.word	0x0800e104

080030e0 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <CheckKey+0x58>)
 80030ec:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80030ee:	e015      	b.n	800311c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3306      	adds	r3, #6
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fde9 	bl	8000ccc <Flash_Read_2Byte>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003102:	429a      	cmp	r2, r3
 8003104:	d107      	bne.n	8003116 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3305      	adds	r3, #5
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	79fa      	ldrb	r2, [r7, #7]
 800310e:	429a      	cmp	r2, r3
 8003110:	d101      	bne.n	8003116 <CheckKey+0x36>
				return pt;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e00b      	b.n	800312e <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3308      	adds	r3, #8
 800311a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3305      	adds	r3, #5
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fdc7 	bl	8000cb4 <Flash_Read_Byte>
 8003126:	4603      	mov	r3, r0
 8003128:	2bff      	cmp	r3, #255	@ 0xff
 800312a:	d1e1      	bne.n	80030f0 <CheckKey+0x10>
	}
	return 0;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	0800f000 	.word	0x0800f000

0800313c <removeuid>:
void removeuid(uint32_t addressrm)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3306      	adds	r3, #6
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fd77 	bl	8000c3e <Flash_Write_2Byte>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <startadd>:
void startadd(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 800315c:	4a22      	ldr	r2, [pc, #136]	@ (80031e8 <startadd+0x90>)
 800315e:	4923      	ldr	r1, [pc, #140]	@ (80031ec <startadd+0x94>)
 8003160:	4823      	ldr	r0, [pc, #140]	@ (80031f0 <startadd+0x98>)
 8003162:	f7fd f94b 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 8003166:	f000 f851 	bl	800320c <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800316a:	4822      	ldr	r0, [pc, #136]	@ (80031f4 <startadd+0x9c>)
 800316c:	f000 fe30 	bl	8003dd0 <TM_MFRC522_Check>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f9      	bne.n	800316a <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8003176:	481f      	ldr	r0, [pc, #124]	@ (80031f4 <startadd+0x9c>)
 8003178:	f7ff fe22 	bl	8002dc0 <CheckListUID>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8003182:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <startadd+0x9c>)
 8003184:	2211      	movs	r2, #17
 8003186:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8003188:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <startadd+0xa0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2206      	movs	r2, #6
 800318e:	4919      	ldr	r1, [pc, #100]	@ (80031f4 <startadd+0x9c>)
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fd6c 	bl	8000c6e <Flash_Write_Array>
					AddressUID += 8;
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <startadd+0xa0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3308      	adds	r3, #8
 800319c:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <startadd+0xa0>)
 800319e:	6013      	str	r3, [r2, #0]
					break;
 80031a0:	e011      	b.n	80031c6 <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 80031a2:	4a16      	ldr	r2, [pc, #88]	@ (80031fc <startadd+0xa4>)
 80031a4:	4916      	ldr	r1, [pc, #88]	@ (8003200 <startadd+0xa8>)
 80031a6:	4812      	ldr	r0, [pc, #72]	@ (80031f0 <startadd+0x98>)
 80031a8:	f7fd f928 	bl	80003fc <CLCD_I2C_Display>
					buzzer(5);
 80031ac:	2005      	movs	r0, #5
 80031ae:	f000 fd99 	bl	8003ce4 <buzzer>
					HAL_Delay(1000);
 80031b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031b6:	f001 faa3 	bl	8004700 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 80031ba:	4a0b      	ldr	r2, [pc, #44]	@ (80031e8 <startadd+0x90>)
 80031bc:	490b      	ldr	r1, [pc, #44]	@ (80031ec <startadd+0x94>)
 80031be:	480c      	ldr	r0, [pc, #48]	@ (80031f0 <startadd+0x98>)
 80031c0:	f7fd f91c 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80031c4:	e7d1      	b.n	800316a <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 80031c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003204 <startadd+0xac>)
 80031c8:	490f      	ldr	r1, [pc, #60]	@ (8003208 <startadd+0xb0>)
 80031ca:	4809      	ldr	r0, [pc, #36]	@ (80031f0 <startadd+0x98>)
 80031cc:	f7fd f916 	bl	80003fc <CLCD_I2C_Display>
	buzzer(1);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f000 fd87 	bl	8003ce4 <buzzer>
	HAL_Delay(1000);
 80031d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031da:	f001 fa91 	bl	8004700 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 80031de:	4804      	ldr	r0, [pc, #16]	@ (80031f0 <startadd+0x98>)
 80031e0:	f7fd f8fc 	bl	80003dc <CLCD_I2C_Clear>
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	0800e440 	.word	0x0800e440
 80031ec:	0800e104 	.word	0x0800e104
 80031f0:	200003d8 	.word	0x200003d8
 80031f4:	200003e4 	.word	0x200003e4
 80031f8:	20000024 	.word	0x20000024
 80031fc:	0800e454 	.word	0x0800e454
 8003200:	0800e468 	.word	0x0800e468
 8003204:	0800e478 	.word	0x0800e478
 8003208:	0800e488 	.word	0x0800e488

0800320c <setaddress>:
void setaddress(void){
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <setaddress+0x30>)
 8003214:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003216:	e002      	b.n	800321e <setaddress+0x12>
	{
		pt = pt + 8;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3308      	adds	r3, #8
 800321c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3305      	adds	r3, #5
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fd46 	bl	8000cb4 <Flash_Read_Byte>
 8003228:	4603      	mov	r3, r0
 800322a:	2bff      	cmp	r3, #255	@ 0xff
 800322c:	d1f4      	bne.n	8003218 <setaddress+0xc>
	}
	AddressUID = pt;
 800322e:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <setaddress+0x34>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	0800f000 	.word	0x0800f000
 8003240:	20000024 	.word	0x20000024

08003244 <remoall>:

void remoall(){
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800324a:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <remoall+0x44>)
 800324c:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800324e:	e00a      	b.n	8003266 <remoall+0x22>
		Flash_Erase(pt);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fd fcd8 	bl	8000c06 <Flash_Erase>
		pt = pt + 0x400;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800325c:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <remoall+0x48>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd3c 	bl	8000ce4 <Flash_Read_8Byte>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	bf08      	it	eq
 8003276:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800327a:	d1e9      	bne.n	8003250 <remoall+0xc>
			break;
	}
}
 800327c:	e000      	b.n	8003280 <remoall+0x3c>
			break;
 800327e:	bf00      	nop
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0800f000 	.word	0x0800f000
 800328c:	0800fc00 	.word	0x0800fc00

08003290 <addface>:
		}
	}
}

void addface(uint8_t key)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800329a:	2280      	movs	r2, #128	@ 0x80
 800329c:	2100      	movs	r1, #0
 800329e:	4823      	ldr	r0, [pc, #140]	@ (800332c <addface+0x9c>)
 80032a0:	f00a f89e 	bl	800d3e0 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4921      	ldr	r1, [pc, #132]	@ (8003330 <addface+0xa0>)
 80032aa:	4822      	ldr	r0, [pc, #136]	@ (8003334 <addface+0xa4>)
 80032ac:	f00a f878 	bl	800d3a0 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80032b0:	2105      	movs	r1, #5
 80032b2:	4820      	ldr	r0, [pc, #128]	@ (8003334 <addface+0xa4>)
 80032b4:	f009 fc62 	bl	800cb7c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80032b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <addface+0xa8>)
 80032ba:	4920      	ldr	r1, [pc, #128]	@ (800333c <addface+0xac>)
 80032bc:	4820      	ldr	r0, [pc, #128]	@ (8003340 <addface+0xb0>)
 80032be:	f7fd f89d 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <addface+0xb4>)
 80032c4:	223c      	movs	r2, #60	@ 0x3c
 80032c6:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80032c8:	e023      	b.n	8003312 <addface+0x82>
		if(Rx_Buffer[0] == 'T'){
 80032ca:	4b18      	ldr	r3, [pc, #96]	@ (800332c <addface+0x9c>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	2b54      	cmp	r3, #84	@ 0x54
 80032d2:	d10c      	bne.n	80032ee <addface+0x5e>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <addface+0xb8>)
 80032d6:	491d      	ldr	r1, [pc, #116]	@ (800334c <addface+0xbc>)
 80032d8:	4819      	ldr	r0, [pc, #100]	@ (8003340 <addface+0xb0>)
 80032da:	f7fd f88f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 fd00 	bl	8003ce4 <buzzer>
			HAL_Delay(2000);
 80032e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032e8:	f001 fa0a 	bl	8004700 <HAL_Delay>
			break;
 80032ec:	e015      	b.n	800331a <addface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 80032ee:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <addface+0x9c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	2b46      	cmp	r3, #70	@ 0x46
 80032f6:	d10c      	bne.n	8003312 <addface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 80032f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003338 <addface+0xa8>)
 80032fa:	4915      	ldr	r1, [pc, #84]	@ (8003350 <addface+0xc0>)
 80032fc:	4810      	ldr	r0, [pc, #64]	@ (8003340 <addface+0xb0>)
 80032fe:	f7fd f87d 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8003302:	2005      	movs	r0, #5
 8003304:	f000 fcee 	bl	8003ce4 <buzzer>
			HAL_Delay(2000);
 8003308:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800330c:	f001 f9f8 	bl	8004700 <HAL_Delay>
			break;
 8003310:	e003      	b.n	800331a <addface+0x8a>
	while(exitmenu != 0){
 8003312:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <addface+0xb4>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1d7      	bne.n	80032ca <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	2100      	movs	r1, #0
 800331e:	4803      	ldr	r0, [pc, #12]	@ (800332c <addface+0x9c>)
 8003320:	f00a f85e 	bl	800d3e0 <memset>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000350 	.word	0x20000350
 8003330:	0800e498 	.word	0x0800e498
 8003334:	200003d0 	.word	0x200003d0
 8003338:	0800dd28 	.word	0x0800dd28
 800333c:	0800e340 	.word	0x0800e340
 8003340:	200003d8 	.word	0x200003d8
 8003344:	20000020 	.word	0x20000020
 8003348:	0800e3e0 	.word	0x0800e3e0
 800334c:	0800e4a0 	.word	0x0800e4a0
 8003350:	0800e4b0 	.word	0x0800e4b0

08003354 <removeface>:
void removeface(uint8_t key)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800335e:	2280      	movs	r2, #128	@ 0x80
 8003360:	2100      	movs	r1, #0
 8003362:	4823      	ldr	r0, [pc, #140]	@ (80033f0 <removeface+0x9c>)
 8003364:	f00a f83c 	bl	800d3e0 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	461a      	mov	r2, r3
 800336c:	4921      	ldr	r1, [pc, #132]	@ (80033f4 <removeface+0xa0>)
 800336e:	4822      	ldr	r0, [pc, #136]	@ (80033f8 <removeface+0xa4>)
 8003370:	f00a f816 	bl	800d3a0 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003374:	2105      	movs	r1, #5
 8003376:	4820      	ldr	r0, [pc, #128]	@ (80033f8 <removeface+0xa4>)
 8003378:	f009 fc00 	bl	800cb7c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <removeface+0xa8>)
 800337e:	4920      	ldr	r1, [pc, #128]	@ (8003400 <removeface+0xac>)
 8003380:	4820      	ldr	r0, [pc, #128]	@ (8003404 <removeface+0xb0>)
 8003382:	f7fd f83b 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <removeface+0xb4>)
 8003388:	223c      	movs	r2, #60	@ 0x3c
 800338a:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 800338c:	e023      	b.n	80033d6 <removeface+0x82>
		if(Rx_Buffer[0] == 'T'){
 800338e:	4b18      	ldr	r3, [pc, #96]	@ (80033f0 <removeface+0x9c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	2b54      	cmp	r3, #84	@ 0x54
 8003396:	d10c      	bne.n	80033b2 <removeface+0x5e>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8003398:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <removeface+0xa8>)
 800339a:	491c      	ldr	r1, [pc, #112]	@ (800340c <removeface+0xb8>)
 800339c:	4819      	ldr	r0, [pc, #100]	@ (8003404 <removeface+0xb0>)
 800339e:	f7fd f82d 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f000 fc9e 	bl	8003ce4 <buzzer>
			HAL_Delay(2000);
 80033a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033ac:	f001 f9a8 	bl	8004700 <HAL_Delay>
			break;
 80033b0:	e015      	b.n	80033de <removeface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <removeface+0x9c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	2b46      	cmp	r3, #70	@ 0x46
 80033ba:	d10c      	bne.n	80033d6 <removeface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80033bc:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <removeface+0xa8>)
 80033be:	4914      	ldr	r1, [pc, #80]	@ (8003410 <removeface+0xbc>)
 80033c0:	4810      	ldr	r0, [pc, #64]	@ (8003404 <removeface+0xb0>)
 80033c2:	f7fd f81b 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 80033c6:	2005      	movs	r0, #5
 80033c8:	f000 fc8c 	bl	8003ce4 <buzzer>
			HAL_Delay(2000);
 80033cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033d0:	f001 f996 	bl	8004700 <HAL_Delay>
			break;
 80033d4:	e003      	b.n	80033de <removeface+0x8a>
	while(exitmenu != 0){
 80033d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <removeface+0xb4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1d7      	bne.n	800338e <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	2100      	movs	r1, #0
 80033e2:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <removeface+0x9c>)
 80033e4:	f009 fffc 	bl	800d3e0 <memset>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000350 	.word	0x20000350
 80033f4:	0800e4c0 	.word	0x0800e4c0
 80033f8:	200003d0 	.word	0x200003d0
 80033fc:	0800dd28 	.word	0x0800dd28
 8003400:	0800e340 	.word	0x0800e340
 8003404:	200003d8 	.word	0x200003d8
 8003408:	20000020 	.word	0x20000020
 800340c:	0800e4c8 	.word	0x0800e4c8
 8003410:	0800e4d8 	.word	0x0800e4d8

08003414 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	2100      	movs	r1, #0
 8003422:	4817      	ldr	r0, [pc, #92]	@ (8003480 <checkfaceid+0x6c>)
 8003424:	f009 ffdc 	bl	800d3e0 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	461a      	mov	r2, r3
 800342c:	4915      	ldr	r1, [pc, #84]	@ (8003484 <checkfaceid+0x70>)
 800342e:	4816      	ldr	r0, [pc, #88]	@ (8003488 <checkfaceid+0x74>)
 8003430:	f009 ffb6 	bl	800d3a0 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003434:	2105      	movs	r1, #5
 8003436:	4814      	ldr	r0, [pc, #80]	@ (8003488 <checkfaceid+0x74>)
 8003438:	f009 fba0 	bl	800cb7c <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 800343c:	e000      	b.n	8003440 <checkfaceid+0x2c>
			continue;
 800343e:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8003440:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <checkfaceid+0x6c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b25b      	sxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f9      	beq.n	800343e <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 800344a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800344e:	f001 f957 	bl	8004700 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <checkfaceid+0x6c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b25b      	sxtb	r3, r3
 8003458:	2b54      	cmp	r3, #84	@ 0x54
 800345a:	d101      	bne.n	8003460 <checkfaceid+0x4c>
		return key;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	e00b      	b.n	8003478 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <checkfaceid+0x6c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b25b      	sxtb	r3, r3
 8003466:	2b46      	cmp	r3, #70	@ 0x46
 8003468:	d101      	bne.n	800346e <checkfaceid+0x5a>
		return 0;
 800346a:	2300      	movs	r3, #0
 800346c:	e004      	b.n	8003478 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800346e:	2280      	movs	r2, #128	@ 0x80
 8003470:	2100      	movs	r1, #0
 8003472:	4803      	ldr	r0, [pc, #12]	@ (8003480 <checkfaceid+0x6c>)
 8003474:	f009 ffb4 	bl	800d3e0 <memset>
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000350 	.word	0x20000350
 8003484:	0800e4e8 	.word	0x0800e4e8
 8003488:	200003d0 	.word	0x200003d0

0800348c <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-9):", "ID= ");
 8003496:	4a91      	ldr	r2, [pc, #580]	@ (80036dc <add_finger+0x250>)
 8003498:	4991      	ldr	r1, [pc, #580]	@ (80036e0 <add_finger+0x254>)
 800349a:	4892      	ldr	r0, [pc, #584]	@ (80036e4 <add_finger+0x258>)
 800349c:	f7fc ffae 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 80034a0:	200a      	movs	r0, #10
 80034a2:	f7fd f905 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80034a6:	4603      	mov	r3, r0
 80034a8:	71bb      	strb	r3, [r7, #6]
        if (key >= '1' && key <= '9')
 80034aa:	79bb      	ldrb	r3, [r7, #6]
 80034ac:	2b30      	cmp	r3, #48	@ 0x30
 80034ae:	d9f7      	bls.n	80034a0 <add_finger+0x14>
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b39      	cmp	r3, #57	@ 0x39
 80034b4:	d8f4      	bhi.n	80034a0 <add_finger+0x14>
        {
        	buzzer(1);
 80034b6:	2001      	movs	r0, #1
 80034b8:	f000 fc14 	bl	8003ce4 <buzzer>
            id = key - '0';
 80034bc:	79bb      	ldrb	r3, [r7, #6]
 80034be:	3b30      	subs	r3, #48	@ 0x30
 80034c0:	71fb      	strb	r3, [r7, #7]
            break;
 80034c2:	bf00      	nop
        }
    }
    ID = id;
 80034c4:	4a88      	ldr	r2, [pc, #544]	@ (80036e8 <add_finger+0x25c>)
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2104      	movs	r1, #4
 80034ce:	4885      	ldr	r0, [pc, #532]	@ (80036e4 <add_finger+0x258>)
 80034d0:	f7fc ff1a 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 80034d4:	4b84      	ldr	r3, [pc, #528]	@ (80036e8 <add_finger+0x25c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	3330      	adds	r3, #48	@ 0x30
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	4881      	ldr	r0, [pc, #516]	@ (80036e4 <add_finger+0x258>)
 80034e0:	f7fc ff55 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 80034e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034e8:	f001 f90a 	bl	8004700 <HAL_Delay>

    vitri2:
    while(1)
    {
        collect_finger();
 80034ec:	f7fd fa00 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 80034f0:	4a7e      	ldr	r2, [pc, #504]	@ (80036ec <add_finger+0x260>)
 80034f2:	497f      	ldr	r1, [pc, #508]	@ (80036f0 <add_finger+0x264>)
 80034f4:	487b      	ldr	r0, [pc, #492]	@ (80036e4 <add_finger+0x258>)
 80034f6:	f7fc ff81 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 80034fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034fe:	f001 f8ff 	bl	8004700 <HAL_Delay>
    // dat tay vao
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003502:	2201      	movs	r2, #1
 8003504:	2100      	movs	r1, #0
 8003506:	4877      	ldr	r0, [pc, #476]	@ (80036e4 <add_finger+0x258>)
 8003508:	f7fc fefe 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 800350c:	4979      	ldr	r1, [pc, #484]	@ (80036f4 <add_finger+0x268>)
 800350e:	4875      	ldr	r0, [pc, #468]	@ (80036e4 <add_finger+0x258>)
 8003510:	f7fc ff4d 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003514:	4b78      	ldr	r3, [pc, #480]	@ (80036f8 <add_finger+0x26c>)
 8003516:	22ff      	movs	r2, #255	@ 0xff
 8003518:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 800351a:	e008      	b.n	800352e <add_finger+0xa2>
            collect_finger();
 800351c:	f7fd f9e8 	bl	80008f0 <collect_finger>
            collect_finger();
 8003520:	f7fd f9e6 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8003524:	f7fd f9e4 	bl	80008f0 <collect_finger>
 8003528:	4603      	mov	r3, r0
 800352a:	4a73      	ldr	r2, [pc, #460]	@ (80036f8 <add_finger+0x26c>)
 800352c:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 800352e:	4b72      	ldr	r3, [pc, #456]	@ (80036f8 <add_finger+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f2      	bne.n	800351c <add_finger+0x90>
        }
        tmp=0xff;
 8003536:	4b70      	ldr	r3, [pc, #448]	@ (80036f8 <add_finger+0x26c>)
 8003538:	22ff      	movs	r2, #255	@ 0xff
 800353a:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800353c:	2201      	movs	r2, #1
 800353e:	2100      	movs	r1, #0
 8003540:	4868      	ldr	r0, [pc, #416]	@ (80036e4 <add_finger+0x258>)
 8003542:	f7fc fee1 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003546:	496d      	ldr	r1, [pc, #436]	@ (80036fc <add_finger+0x270>)
 8003548:	4866      	ldr	r0, [pc, #408]	@ (80036e4 <add_finger+0x258>)
 800354a:	f7fc ff30 	bl	80003ae <CLCD_I2C_WriteString>
 800354e:	2064      	movs	r0, #100	@ 0x64
 8003550:	f001 f8d6 	bl	8004700 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003554:	2201      	movs	r2, #1
 8003556:	2100      	movs	r1, #0
 8003558:	4862      	ldr	r0, [pc, #392]	@ (80036e4 <add_finger+0x258>)
 800355a:	f7fc fed5 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 800355e:	4968      	ldr	r1, [pc, #416]	@ (8003700 <add_finger+0x274>)
 8003560:	4860      	ldr	r0, [pc, #384]	@ (80036e4 <add_finger+0x258>)
 8003562:	f7fc ff24 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003566:	4b64      	ldr	r3, [pc, #400]	@ (80036f8 <add_finger+0x26c>)
 8003568:	22ff      	movs	r2, #255	@ 0xff
 800356a:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 800356c:	e005      	b.n	800357a <add_finger+0xee>
        tmp=img2tz(0x01);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fd f9ea 	bl	8000948 <img2tz>
 8003574:	4603      	mov	r3, r0
 8003576:	4a60      	ldr	r2, [pc, #384]	@ (80036f8 <add_finger+0x26c>)
 8003578:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 800357a:	4b5f      	ldr	r3, [pc, #380]	@ (80036f8 <add_finger+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f5      	bne.n	800356e <add_finger+0xe2>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003582:	2201      	movs	r2, #1
 8003584:	2100      	movs	r1, #0
 8003586:	4857      	ldr	r0, [pc, #348]	@ (80036e4 <add_finger+0x258>)
 8003588:	f7fc febe 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 800358c:	495d      	ldr	r1, [pc, #372]	@ (8003704 <add_finger+0x278>)
 800358e:	4855      	ldr	r0, [pc, #340]	@ (80036e4 <add_finger+0x258>)
 8003590:	f7fc ff0d 	bl	80003ae <CLCD_I2C_WriteString>
 8003594:	2064      	movs	r0, #100	@ 0x64
 8003596:	f001 f8b3 	bl	8004700 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800359a:	2201      	movs	r2, #1
 800359c:	2100      	movs	r1, #0
 800359e:	4851      	ldr	r0, [pc, #324]	@ (80036e4 <add_finger+0x258>)
 80035a0:	f7fc feb2 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 80035a4:	4953      	ldr	r1, [pc, #332]	@ (80036f4 <add_finger+0x268>)
 80035a6:	484f      	ldr	r0, [pc, #316]	@ (80036e4 <add_finger+0x258>)
 80035a8:	f7fc ff01 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80035ac:	4b52      	ldr	r3, [pc, #328]	@ (80036f8 <add_finger+0x26c>)
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 80035b2:	e008      	b.n	80035c6 <add_finger+0x13a>
            collect_finger();
 80035b4:	f7fd f99c 	bl	80008f0 <collect_finger>
            collect_finger();
 80035b8:	f7fd f99a 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 80035bc:	f7fd f998 	bl	80008f0 <collect_finger>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4a4d      	ldr	r2, [pc, #308]	@ (80036f8 <add_finger+0x26c>)
 80035c4:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00)    {
 80035c6:	4b4c      	ldr	r3, [pc, #304]	@ (80036f8 <add_finger+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f2      	bne.n	80035b4 <add_finger+0x128>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035ce:	2201      	movs	r2, #1
 80035d0:	2100      	movs	r1, #0
 80035d2:	4844      	ldr	r0, [pc, #272]	@ (80036e4 <add_finger+0x258>)
 80035d4:	f7fc fe98 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 80035d8:	4948      	ldr	r1, [pc, #288]	@ (80036fc <add_finger+0x270>)
 80035da:	4842      	ldr	r0, [pc, #264]	@ (80036e4 <add_finger+0x258>)
 80035dc:	f7fc fee7 	bl	80003ae <CLCD_I2C_WriteString>
 80035e0:	2064      	movs	r0, #100	@ 0x64
 80035e2:	f001 f88d 	bl	8004700 <HAL_Delay>
        tmp=0xff;
 80035e6:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <add_finger+0x26c>)
 80035e8:	22ff      	movs	r2, #255	@ 0xff
 80035ea:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035ec:	2201      	movs	r2, #1
 80035ee:	2100      	movs	r1, #0
 80035f0:	483c      	ldr	r0, [pc, #240]	@ (80036e4 <add_finger+0x258>)
 80035f2:	f7fc fe89 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 80035f6:	4942      	ldr	r1, [pc, #264]	@ (8003700 <add_finger+0x274>)
 80035f8:	483a      	ldr	r0, [pc, #232]	@ (80036e4 <add_finger+0x258>)
 80035fa:	f7fc fed8 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {tmp=img2tz(0x02);}
 80035fe:	e005      	b.n	800360c <add_finger+0x180>
 8003600:	2002      	movs	r0, #2
 8003602:	f7fd f9a1 	bl	8000948 <img2tz>
 8003606:	4603      	mov	r3, r0
 8003608:	4a3b      	ldr	r2, [pc, #236]	@ (80036f8 <add_finger+0x26c>)
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b3a      	ldr	r3, [pc, #232]	@ (80036f8 <add_finger+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f5      	bne.n	8003600 <add_finger+0x174>
        tmp=0xff;
 8003614:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <add_finger+0x26c>)
 8003616:	22ff      	movs	r2, #255	@ 0xff
 8003618:	601a      	str	r2, [r3, #0]
        // kiem tra 2 buff co trung nhau khong
        while(tmp!=0x00)
 800361a:	e01d      	b.n	8003658 <add_finger+0x1cc>
        {
            tmp=match();    //HAL_Delay(100);
 800361c:	f7fd f9d0 	bl	80009c0 <match>
 8003620:	4603      	mov	r3, r0
 8003622:	4a35      	ldr	r2, [pc, #212]	@ (80036f8 <add_finger+0x26c>)
 8003624:	6013      	str	r3, [r2, #0]
            if(tmp==0x08||tmp==0x01)
 8003626:	4b34      	ldr	r3, [pc, #208]	@ (80036f8 <add_finger+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d003      	beq.n	8003636 <add_finger+0x1aa>
 800362e:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <add_finger+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d110      	bne.n	8003658 <add_finger+0x1cc>
            {
                // loi, lam lai
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003636:	2201      	movs	r2, #1
 8003638:	2100      	movs	r1, #0
 800363a:	482a      	ldr	r0, [pc, #168]	@ (80036e4 <add_finger+0x258>)
 800363c:	f7fc fe64 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 8003640:	4931      	ldr	r1, [pc, #196]	@ (8003708 <add_finger+0x27c>)
 8003642:	4828      	ldr	r0, [pc, #160]	@ (80036e4 <add_finger+0x258>)
 8003644:	f7fc feb3 	bl	80003ae <CLCD_I2C_WriteString>
 8003648:	2005      	movs	r0, #5
 800364a:	f000 fb4b 	bl	8003ce4 <buzzer>
 800364e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003652:	f001 f855 	bl	8004700 <HAL_Delay>
                goto vitri2;
 8003656:	e749      	b.n	80034ec <add_finger+0x60>
        while(tmp!=0x00)
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <add_finger+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1dd      	bne.n	800361c <add_finger+0x190>
            }
        }
        tmp=0xff;
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <add_finger+0x26c>)
 8003662:	22ff      	movs	r2, #255	@ 0xff
 8003664:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 8003666:	e007      	b.n	8003678 <add_finger+0x1ec>
 8003668:	f7fd f9d6 	bl	8000a18 <regmodel>
 800366c:	4603      	mov	r3, r0
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <add_finger+0x26c>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	2064      	movs	r0, #100	@ 0x64
 8003674:	f001 f844 	bl	8004700 <HAL_Delay>
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <add_finger+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f3      	bne.n	8003668 <add_finger+0x1dc>
        tmp=0xff;
 8003680:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <add_finger+0x26c>)
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}            // luu id
 8003686:	e00a      	b.n	800369e <add_finger+0x212>
 8003688:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <add_finger+0x25c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd f9ef 	bl	8000a70 <store>
 8003692:	4603      	mov	r3, r0
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <add_finger+0x26c>)
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	2064      	movs	r0, #100	@ 0x64
 800369a:	f001 f831 	bl	8004700 <HAL_Delay>
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <add_finger+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <add_finger+0x1fc>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2100      	movs	r1, #0
 80036aa:	480e      	ldr	r0, [pc, #56]	@ (80036e4 <add_finger+0x258>)
 80036ac:	f7fc fe2c 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 80036b0:	4916      	ldr	r1, [pc, #88]	@ (800370c <add_finger+0x280>)
 80036b2:	480c      	ldr	r0, [pc, #48]	@ (80036e4 <add_finger+0x258>)
 80036b4:	f7fc fe7b 	bl	80003ae <CLCD_I2C_WriteString>
        buzzer(1);
 80036b8:	2001      	movs	r0, #1
 80036ba:	f000 fb13 	bl	8003ce4 <buzzer>
                /***************** DA LUU XONG**************************/
        HAL_Delay(1500);
 80036be:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80036c2:	f001 f81d 	bl	8004700 <HAL_Delay>
        tmp=0xff;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <add_finger+0x26c>)
 80036c8:	22ff      	movs	r2, #255	@ 0xff
 80036ca:	601a      	str	r2, [r3, #0]
        CLCD_I2C_Clear(&LCD1);
 80036cc:	4805      	ldr	r0, [pc, #20]	@ (80036e4 <add_finger+0x258>)
 80036ce:	f7fc fe85 	bl	80003dc <CLCD_I2C_Clear>
        break;
 80036d2:	bf00      	nop
    }
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	0800e4f0 	.word	0x0800e4f0
 80036e0:	0800e4f8 	.word	0x0800e4f8
 80036e4:	200003d8 	.word	0x200003d8
 80036e8:	20000408 	.word	0x20000408
 80036ec:	0800e508 	.word	0x0800e508
 80036f0:	0800e520 	.word	0x0800e520
 80036f4:	0800e534 	.word	0x0800e534
 80036f8:	20000404 	.word	0x20000404
 80036fc:	0800e550 	.word	0x0800e550
 8003700:	0800e564 	.word	0x0800e564
 8003704:	0800e57c 	.word	0x0800e57c
 8003708:	0800e590 	.word	0x0800e590
 800370c:	0800e5a0 	.word	0x0800e5a0

08003710 <read_finger>:
                        //----------end them van tay---------------
void read_finger()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8003714:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <read_finger+0xf0>)
 8003716:	22ff      	movs	r2, #255	@ 0xff
 8003718:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 800371a:	f000 ffe7 	bl	80046ec <HAL_GetTick>
 800371e:	4603      	mov	r3, r0
 8003720:	4a38      	ldr	r2, [pc, #224]	@ (8003804 <read_finger+0xf4>)
 8003722:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8003724:	e013      	b.n	800374e <read_finger+0x3e>
		tmp=collect_finger();
 8003726:	f7fd f8e3 	bl	80008f0 <collect_finger>
 800372a:	4603      	mov	r3, r0
 800372c:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <read_finger+0xf0>)
 800372e:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8003730:	f000 ffdc 	bl	80046ec <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	4b33      	ldr	r3, [pc, #204]	@ (8003804 <read_finger+0xf4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003740:	d305      	bcc.n	800374e <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8003742:	f000 ffd3 	bl	80046ec <HAL_GetTick>
 8003746:	4603      	mov	r3, r0
 8003748:	4a2e      	ldr	r2, [pc, #184]	@ (8003804 <read_finger+0xf4>)
 800374a:	6013      	str	r3, [r2, #0]
		return;}
 800374c:	e056      	b.n	80037fc <read_finger+0xec>
	while(tmp!=0x00){
 800374e:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <read_finger+0xf0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e7      	bne.n	8003726 <read_finger+0x16>

	}
	tmp=0xff;
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <read_finger+0xf0>)
 8003758:	22ff      	movs	r2, #255	@ 0xff
 800375a:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 800375c:	4b28      	ldr	r3, [pc, #160]	@ (8003800 <read_finger+0xf0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <read_finger+0x60>
 8003764:	2001      	movs	r0, #1
 8003766:	f7fd f8ef 	bl	8000948 <img2tz>
 800376a:	4603      	mov	r3, r0
 800376c:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <read_finger+0xf0>)
 800376e:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8003770:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <read_finger+0xf0>)
 8003772:	22ff      	movs	r2, #255	@ 0xff
 8003774:	601a      	str	r2, [r3, #0]
	tmp=search();
 8003776:	f7fd f9ba 	bl	8000aee <search>
 800377a:	4603      	mov	r3, r0
 800377c:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <read_finger+0xf0>)
 800377e:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8003780:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <read_finger+0xf0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d117      	bne.n	80037b8 <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 8003788:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <read_finger+0xf0>)
 800378a:	22ff      	movs	r2, #255	@ 0xff
 800378c:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", "Finger");
 800378e:	4a1e      	ldr	r2, [pc, #120]	@ (8003808 <read_finger+0xf8>)
 8003790:	491e      	ldr	r1, [pc, #120]	@ (800380c <read_finger+0xfc>)
 8003792:	481f      	ldr	r0, [pc, #124]	@ (8003810 <read_finger+0x100>)
 8003794:	f7fc fe32 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess," - id = %d  ", pID); // Use %d for integer
 8003798:	4b1e      	ldr	r3, [pc, #120]	@ (8003814 <read_finger+0x104>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	491e      	ldr	r1, [pc, #120]	@ (8003818 <read_finger+0x108>)
 80037a0:	481e      	ldr	r0, [pc, #120]	@ (800381c <read_finger+0x10c>)
 80037a2:	f009 fdfd 	bl	800d3a0 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 80037a6:	491d      	ldr	r1, [pc, #116]	@ (800381c <read_finger+0x10c>)
 80037a8:	4819      	ldr	r0, [pc, #100]	@ (8003810 <read_finger+0x100>)
 80037aa:	f7fc fe00 	bl	80003ae <CLCD_I2C_WriteString>
		opendoor();
 80037ae:	f000 fa49 	bl	8003c44 <opendoor>
		CLCD_I2C_Clear(&LCD1);
 80037b2:	4817      	ldr	r0, [pc, #92]	@ (8003810 <read_finger+0x100>)
 80037b4:	f7fc fe12 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <read_finger+0xf0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d11d      	bne.n	80037fc <read_finger+0xec>
	{
		tmp=0xff;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <read_finger+0xf0>)
 80037c2:	22ff      	movs	r2, #255	@ 0xff
 80037c4:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80037c6:	2201      	movs	r2, #1
 80037c8:	2100      	movs	r1, #0
 80037ca:	4811      	ldr	r0, [pc, #68]	@ (8003810 <read_finger+0x100>)
 80037cc:	f7fc fd9c 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 80037d0:	4913      	ldr	r1, [pc, #76]	@ (8003820 <read_finger+0x110>)
 80037d2:	480f      	ldr	r0, [pc, #60]	@ (8003810 <read_finger+0x100>)
 80037d4:	f7fc fdeb 	bl	80003ae <CLCD_I2C_WriteString>
 80037d8:	2005      	movs	r0, #5
 80037da:	f000 fa83 	bl	8003ce4 <buzzer>
 80037de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037e2:	f000 ff8d 	bl	8004700 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 80037e6:	490d      	ldr	r1, [pc, #52]	@ (800381c <read_finger+0x10c>)
 80037e8:	4809      	ldr	r0, [pc, #36]	@ (8003810 <read_finger+0x100>)
 80037ea:	f7fc fde0 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 80037ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037f2:	f000 ff85 	bl	8004700 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 80037f6:	4806      	ldr	r0, [pc, #24]	@ (8003810 <read_finger+0x100>)
 80037f8:	f7fc fdf0 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000404 	.word	0x20000404
 8003804:	200003f4 	.word	0x200003f4
 8003808:	0800e5b4 	.word	0x0800e5b4
 800380c:	0800dd3c 	.word	0x0800dd3c
 8003810:	200003d8 	.word	0x200003d8
 8003814:	20000218 	.word	0x20000218
 8003818:	0800e5bc 	.word	0x0800e5bc
 800381c:	200003f8 	.word	0x200003f8
 8003820:	0800e5cc 	.word	0x0800e5cc

08003824 <remove_id_finger>:
void remove_id_finger()
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 800382e:	4a31      	ldr	r2, [pc, #196]	@ (80038f4 <remove_id_finger+0xd0>)
 8003830:	4931      	ldr	r1, [pc, #196]	@ (80038f8 <remove_id_finger+0xd4>)
 8003832:	4832      	ldr	r0, [pc, #200]	@ (80038fc <remove_id_finger+0xd8>)
 8003834:	f7fc fde2 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003838:	200a      	movs	r0, #10
 800383a:	f7fc ff39 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800383e:	4603      	mov	r3, r0
 8003840:	75bb      	strb	r3, [r7, #22]
        if (key >= '1' && key <= '9')
 8003842:	7dbb      	ldrb	r3, [r7, #22]
 8003844:	2b30      	cmp	r3, #48	@ 0x30
 8003846:	d9f7      	bls.n	8003838 <remove_id_finger+0x14>
 8003848:	7dbb      	ldrb	r3, [r7, #22]
 800384a:	2b39      	cmp	r3, #57	@ 0x39
 800384c:	d8f4      	bhi.n	8003838 <remove_id_finger+0x14>
        {
        	buzzer(1);
 800384e:	2001      	movs	r0, #1
 8003850:	f000 fa48 	bl	8003ce4 <buzzer>
            id = key - '0';
 8003854:	7dbb      	ldrb	r3, [r7, #22]
 8003856:	3b30      	subs	r3, #48	@ 0x30
 8003858:	75fb      	strb	r3, [r7, #23]
            break;
 800385a:	bf00      	nop
        }
    }
    ID = id;
 800385c:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <remove_id_finger+0xdc>)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003862:	2201      	movs	r2, #1
 8003864:	2104      	movs	r1, #4
 8003866:	4825      	ldr	r0, [pc, #148]	@ (80038fc <remove_id_finger+0xd8>)
 8003868:	f7fc fd4e 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 800386c:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <remove_id_finger+0xdc>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3330      	adds	r3, #48	@ 0x30
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	4821      	ldr	r0, [pc, #132]	@ (80038fc <remove_id_finger+0xd8>)
 8003878:	f7fc fd89 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 800387c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003880:	f000 ff3e 	bl	8004700 <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 8003884:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <remove_id_finger+0xe0>)
 8003886:	4920      	ldr	r1, [pc, #128]	@ (8003908 <remove_id_finger+0xe4>)
 8003888:	481c      	ldr	r0, [pc, #112]	@ (80038fc <remove_id_finger+0xd8>)
 800388a:	f7fc fdb7 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_finger(ID);
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <remove_id_finger+0xdc>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd f9a8 	bl	8000be8 <delete_finger>
 8003898:	4603      	mov	r3, r0
 800389a:	757b      	strb	r3, [r7, #21]
    if (result == 0x00)
 800389c:	7d7b      	ldrb	r3, [r7, #21]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <remove_id_finger+0x9a>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 80038a2:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <remove_id_finger+0xe8>)
 80038a4:	491a      	ldr	r1, [pc, #104]	@ (8003910 <remove_id_finger+0xec>)
 80038a6:	4815      	ldr	r0, [pc, #84]	@ (80038fc <remove_id_finger+0xd8>)
 80038a8:	f7fc fda8 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 80038ac:	2001      	movs	r0, #1
 80038ae:	f000 fa19 	bl	8003ce4 <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 80038b2:	4b18      	ldr	r3, [pc, #96]	@ (8003914 <remove_id_finger+0xf0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 80038b8:	f000 f888 	bl	80039cc <reset_fingerprint_module>
 80038bc:	e00e      	b.n	80038dc <remove_id_finger+0xb8>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80038be:	7d7b      	ldrb	r3, [r7, #21]
 80038c0:	1d38      	adds	r0, r7, #4
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <remove_id_finger+0xf4>)
 80038c4:	2110      	movs	r1, #16
 80038c6:	f009 fd37 	bl	800d338 <sniprintf>
        buzzer(5);
 80038ca:	2005      	movs	r0, #5
 80038cc:	f000 fa0a 	bl	8003ce4 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	461a      	mov	r2, r3
 80038d4:	490e      	ldr	r1, [pc, #56]	@ (8003910 <remove_id_finger+0xec>)
 80038d6:	4809      	ldr	r0, [pc, #36]	@ (80038fc <remove_id_finger+0xd8>)
 80038d8:	f7fc fd90 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 80038dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80038e0:	f000 ff0e 	bl	8004700 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80038e4:	4805      	ldr	r0, [pc, #20]	@ (80038fc <remove_id_finger+0xd8>)
 80038e6:	f7fc fd79 	bl	80003dc <CLCD_I2C_Clear>
}
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	0800e4f0 	.word	0x0800e4f0
 80038f8:	0800e5e0 	.word	0x0800e5e0
 80038fc:	200003d8 	.word	0x200003d8
 8003900:	20000408 	.word	0x20000408
 8003904:	0800dd28 	.word	0x0800dd28
 8003908:	0800e5f4 	.word	0x0800e5f4
 800390c:	0800e604 	.word	0x0800e604
 8003910:	0800e614 	.word	0x0800e614
 8003914:	20000409 	.word	0x20000409
 8003918:	0800e624 	.word	0x0800e624

0800391c <remove_all_finger>:

void remove_all_finger()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "Removing All", "Fingers");
 8003922:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <remove_all_finger+0x90>)
 8003924:	4922      	ldr	r1, [pc, #136]	@ (80039b0 <remove_all_finger+0x94>)
 8003926:	4823      	ldr	r0, [pc, #140]	@ (80039b4 <remove_all_finger+0x98>)
 8003928:	f7fc fd68 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result;
    for (uint8_t id = 0; id <= 9; id++)
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
 8003930:	e022      	b.n	8003978 <remove_all_finger+0x5c>
    {
        result = delete_finger(id);
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd f957 	bl	8000be8 <delete_finger>
 800393a:	4603      	mov	r3, r0
 800393c:	75bb      	strb	r3, [r7, #22]
        if (result != 0x00)
 800393e:	7dbb      	ldrb	r3, [r7, #22]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <remove_all_finger+0x56>
        {
            char buffer[16];
            snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003944:	7dbb      	ldrb	r3, [r7, #22]
 8003946:	1d38      	adds	r0, r7, #4
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <remove_all_finger+0x9c>)
 800394a:	2110      	movs	r1, #16
 800394c:	f009 fcf4 	bl	800d338 <sniprintf>
            buzzer(5);
 8003950:	2005      	movs	r0, #5
 8003952:	f000 f9c7 	bl	8003ce4 <buzzer>
            CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	461a      	mov	r2, r3
 800395a:	4918      	ldr	r1, [pc, #96]	@ (80039bc <remove_all_finger+0xa0>)
 800395c:	4815      	ldr	r0, [pc, #84]	@ (80039b4 <remove_all_finger+0x98>)
 800395e:	f7fc fd4d 	bl	80003fc <CLCD_I2C_Display>
            HAL_Delay(2000);
 8003962:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003966:	f000 fecb 	bl	8004700 <HAL_Delay>
            CLCD_I2C_Clear(&LCD1);
 800396a:	4812      	ldr	r0, [pc, #72]	@ (80039b4 <remove_all_finger+0x98>)
 800396c:	f7fc fd36 	bl	80003dc <CLCD_I2C_Clear>
 8003970:	e019      	b.n	80039a6 <remove_all_finger+0x8a>
    for (uint8_t id = 0; id <= 9; id++)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	3301      	adds	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b09      	cmp	r3, #9
 800397c:	d9d9      	bls.n	8003932 <remove_all_finger+0x16>
            return;
        }
    }
    CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 800397e:	4a10      	ldr	r2, [pc, #64]	@ (80039c0 <remove_all_finger+0xa4>)
 8003980:	4910      	ldr	r1, [pc, #64]	@ (80039c4 <remove_all_finger+0xa8>)
 8003982:	480c      	ldr	r0, [pc, #48]	@ (80039b4 <remove_all_finger+0x98>)
 8003984:	f7fc fd3a 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003988:	2001      	movs	r0, #1
 800398a:	f000 f9ab 	bl	8003ce4 <buzzer>
    // Ensure all fingerprints are removed from memory
    fingerprint_detected = 0;
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <remove_all_finger+0xac>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
    // Reset the fingerprint module
    reset_fingerprint_module();
 8003994:	f000 f81a 	bl	80039cc <reset_fingerprint_module>
    HAL_Delay(2000);
 8003998:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800399c:	f000 feb0 	bl	8004700 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80039a0:	4804      	ldr	r0, [pc, #16]	@ (80039b4 <remove_all_finger+0x98>)
 80039a2:	f7fc fd1b 	bl	80003dc <CLCD_I2C_Clear>
}
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	0800e638 	.word	0x0800e638
 80039b0:	0800e640 	.word	0x0800e640
 80039b4:	200003d8 	.word	0x200003d8
 80039b8:	0800e624 	.word	0x0800e624
 80039bc:	0800e614 	.word	0x0800e614
 80039c0:	0800e650 	.word	0x0800e650
 80039c4:	0800e660 	.word	0x0800e660
 80039c8:	20000409 	.word	0x20000409

080039cc <reset_fingerprint_module>:

void reset_fingerprint_module()
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
    // This can be a hardware reset or a software reset command
    // Example:
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_RESET);
    // HAL_Delay(100);
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_SET);
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <startface>:
void startface(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 80039dc:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <startface+0x5c>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	2b59      	cmp	r3, #89	@ 0x59
 80039e4:	d10e      	bne.n	8003a04 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 80039e6:	4814      	ldr	r0, [pc, #80]	@ (8003a38 <startface+0x60>)
 80039e8:	f7fc fcf8 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	4811      	ldr	r0, [pc, #68]	@ (8003a38 <startface+0x60>)
 80039f2:	f7fc fc89 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80039f6:	4911      	ldr	r1, [pc, #68]	@ (8003a3c <startface+0x64>)
 80039f8:	480f      	ldr	r0, [pc, #60]	@ (8003a38 <startface+0x60>)
 80039fa:	f7fc fcd8 	bl	80003ae <CLCD_I2C_WriteString>
        opendoor();
 80039fe:	f000 f921 	bl	8003c44 <opendoor>
 8003a02:	e010      	b.n	8003a26 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <startface+0x5c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a0c:	d10b      	bne.n	8003a26 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a40 <startface+0x68>)
 8003a10:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <startface+0x6c>)
 8003a12:	4809      	ldr	r0, [pc, #36]	@ (8003a38 <startface+0x60>)
 8003a14:	f7fc fcf2 	bl	80003fc <CLCD_I2C_Display>
		buzzer(5);
 8003a18:	2005      	movs	r0, #5
 8003a1a:	f000 f963 	bl	8003ce4 <buzzer>
        HAL_Delay(2000);
 8003a1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a22:	f000 fe6d 	bl	8004700 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003a26:	2280      	movs	r2, #128	@ 0x80
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4802      	ldr	r0, [pc, #8]	@ (8003a34 <startface+0x5c>)
 8003a2c:	f009 fcd8 	bl	800d3e0 <memset>
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000350 	.word	0x20000350
 8003a38:	200003d8 	.word	0x200003d8
 8003a3c:	0800dd3c 	.word	0x0800dd3c
 8003a40:	0800e670 	.word	0x0800e670
 8003a44:	0800e680 	.word	0x0800e680

08003a48 <enter_password>:

void enter_password(char *password) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e01c      	b.n	8003a90 <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 8003a56:	200a      	movs	r0, #10
 8003a58:	f7fc fe2a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f7      	beq.n	8003a56 <enter_password+0xe>
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a6a:	d9f4      	bls.n	8003a56 <enter_password+0xe>
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	2b39      	cmp	r3, #57	@ 0x39
 8003a70:	d8f1      	bhi.n	8003a56 <enter_password+0xe>
        buzzer(1);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 f936 	bl	8003ce4 <buzzer>
        password[i] = key;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	7afa      	ldrb	r2, [r7, #11]
 8003a80:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003a82:	212a      	movs	r1, #42	@ 0x2a
 8003a84:	4808      	ldr	r0, [pc, #32]	@ (8003aa8 <enter_password+0x60>)
 8003a86:	f7fc fc82 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	dddf      	ble.n	8003a56 <enter_password+0xe>
    }
    password[6] = '\0';
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3306      	adds	r3, #6
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200003d8 	.word	0x200003d8

08003aac <change_password>:

void change_password(void) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
    char old_password[7] = {0};
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	2100      	movs	r1, #0
 8003abc:	460a      	mov	r2, r1
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER OLD PASS", "     ");
 8003ac4:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <change_password+0xa4>)
 8003ac6:	4923      	ldr	r1, [pc, #140]	@ (8003b54 <change_password+0xa8>)
 8003ac8:	4823      	ldr	r0, [pc, #140]	@ (8003b58 <change_password+0xac>)
 8003aca:	f7fc fc97 	bl	80003fc <CLCD_I2C_Display>
    enter_password(old_password);
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ffb8 	bl	8003a48 <enter_password>
    if (check_password(old_password)) {
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f849 	bl	8003b74 <check_password>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d022      	beq.n	8003b2e <change_password+0x82>
        char new_password[7] = {0};
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	2100      	movs	r1, #0
 8003af0:	460a      	mov	r2, r1
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	460a      	mov	r2, r1
 8003af6:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <change_password+0xa4>)
 8003afa:	4918      	ldr	r1, [pc, #96]	@ (8003b5c <change_password+0xb0>)
 8003afc:	4816      	ldr	r0, [pc, #88]	@ (8003b58 <change_password+0xac>)
 8003afe:	f7fc fc7d 	bl	80003fc <CLCD_I2C_Display>
        enter_password(new_password);
 8003b02:	463b      	mov	r3, r7
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff9f 	bl	8003a48 <enter_password>
        // Erase the flash memory at the password address before writing the new password
        Flash_Erase(StartAddressPassword);
 8003b0a:	4815      	ldr	r0, [pc, #84]	@ (8003b60 <change_password+0xb4>)
 8003b0c:	f7fd f87b 	bl	8000c06 <Flash_Erase>
        Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 8003b10:	463b      	mov	r3, r7
 8003b12:	2206      	movs	r2, #6
 8003b14:	4619      	mov	r1, r3
 8003b16:	4812      	ldr	r0, [pc, #72]	@ (8003b60 <change_password+0xb4>)
 8003b18:	f7fd f8a9 	bl	8000c6e <Flash_Write_Array>
        CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 8003b1c:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <change_password+0xb8>)
 8003b1e:	4912      	ldr	r1, [pc, #72]	@ (8003b68 <change_password+0xbc>)
 8003b20:	480d      	ldr	r0, [pc, #52]	@ (8003b58 <change_password+0xac>)
 8003b22:	f7fc fc6b 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f000 f8dc 	bl	8003ce4 <buzzer>
 8003b2c:	e007      	b.n	8003b3e <change_password+0x92>
    } else {
        CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8003b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003b6c <change_password+0xc0>)
 8003b30:	490f      	ldr	r1, [pc, #60]	@ (8003b70 <change_password+0xc4>)
 8003b32:	4809      	ldr	r0, [pc, #36]	@ (8003b58 <change_password+0xac>)
 8003b34:	f7fc fc62 	bl	80003fc <CLCD_I2C_Display>
        buzzer(5);
 8003b38:	2005      	movs	r0, #5
 8003b3a:	f000 f8d3 	bl	8003ce4 <buzzer>
    }
    HAL_Delay(2000);
 8003b3e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b42:	f000 fddd 	bl	8004700 <HAL_Delay>
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	0800e690 	.word	0x0800e690
 8003b54:	0800e698 	.word	0x0800e698
 8003b58:	200003d8 	.word	0x200003d8
 8003b5c:	0800e6a8 	.word	0x0800e6a8
 8003b60:	0800f400 	.word	0x0800f400
 8003b64:	0800e650 	.word	0x0800e650
 8003b68:	0800e6b8 	.word	0x0800e6b8
 8003b6c:	0800dd28 	.word	0x0800dd28
 8003b70:	0800dd48 	.word	0x0800dd48

08003b74 <check_password>:

uint8_t check_password(char *password) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	2100      	movs	r1, #0
 8003b86:	460a      	mov	r2, r1
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	2206      	movs	r2, #6
 8003b94:	4619      	mov	r1, r3
 8003b96:	480a      	ldr	r0, [pc, #40]	@ (8003bc0 <check_password+0x4c>)
 8003b98:	f7fd f8b1 	bl	8000cfe <Flash_Read_Array>
    stored_password[6] = '\0';
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc fad0 	bl	800014c <strcmp>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0800f400 	.word	0x0800f400

08003bc4 <set_default_password>:

void set_default_password(void) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 8003bca:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <set_default_password+0x60>)
 8003bcc:	463b      	mov	r3, r7
 8003bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd2:	6018      	str	r0, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003bd8:	4813      	ldr	r0, [pc, #76]	@ (8003c28 <set_default_password+0x64>)
 8003bda:	f7fd f814 	bl	8000c06 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 8003bde:	463b      	mov	r3, r7
 8003be0:	2206      	movs	r2, #6
 8003be2:	4619      	mov	r1, r3
 8003be4:	4810      	ldr	r0, [pc, #64]	@ (8003c28 <set_default_password+0x64>)
 8003be6:	f7fd f842 	bl	8000c6e <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 8003bea:	4a10      	ldr	r2, [pc, #64]	@ (8003c2c <set_default_password+0x68>)
 8003bec:	4910      	ldr	r1, [pc, #64]	@ (8003c30 <set_default_password+0x6c>)
 8003bee:	4811      	ldr	r0, [pc, #68]	@ (8003c34 <set_default_password+0x70>)
 8003bf0:	f7fc fc04 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f000 f875 	bl	8003ce4 <buzzer>
    HAL_Delay(1500);
 8003bfa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003bfe:	f000 fd7f 	bl	8004700 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 8003c02:	4a0d      	ldr	r2, [pc, #52]	@ (8003c38 <set_default_password+0x74>)
 8003c04:	490d      	ldr	r1, [pc, #52]	@ (8003c3c <set_default_password+0x78>)
 8003c06:	480b      	ldr	r0, [pc, #44]	@ (8003c34 <set_default_password+0x70>)
 8003c08:	f7fc fbf8 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003c0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c10:	f000 fd76 	bl	8004700 <HAL_Delay>
    exitmenu=0;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <set_default_password+0x7c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	0800e6f8 	.word	0x0800e6f8
 8003c28:	0800f400 	.word	0x0800f400
 8003c2c:	0800e650 	.word	0x0800e650
 8003c30:	0800e6cc 	.word	0x0800e6cc
 8003c34:	200003d8 	.word	0x200003d8
 8003c38:	0800e6dc 	.word	0x0800e6dc
 8003c3c:	0800e6e8 	.word	0x0800e6e8
 8003c40:	20000020 	.word	0x20000020

08003c44 <opendoor>:

void opendoor(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
    buzzer(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 f84a 	bl	8003ce4 <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c56:	481e      	ldr	r0, [pc, #120]	@ (8003cd0 <opendoor+0x8c>)
 8003c58:	f001 fa1f 	bl	800509a <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 8003c5c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003c60:	f000 fd4e 	bl	8004700 <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 8003c64:	f000 fd42 	bl	80046ec <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003c6a:	e01b      	b.n	8003ca4 <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 8003c6c:	f000 fd3e 	bl	80046ec <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 8003c7a:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <opendoor+0x90>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 8003c84:	4638      	mov	r0, r7
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <opendoor+0x94>)
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	f009 fb54 	bl	800d338 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 8003c90:	463b      	mov	r3, r7
 8003c92:	461a      	mov	r2, r3
 8003c94:	4911      	ldr	r1, [pc, #68]	@ (8003cdc <opendoor+0x98>)
 8003c96:	4812      	ldr	r0, [pc, #72]	@ (8003ce0 <opendoor+0x9c>)
 8003c98:	f7fc fbb0 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ca0:	f000 fd2e 	bl	8004700 <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003ca4:	f000 fd22 	bl	80046ec <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d9da      	bls.n	8003c6c <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003cbc:	4804      	ldr	r0, [pc, #16]	@ (8003cd0 <opendoor+0x8c>)
 8003cbe:	f001 f9ec 	bl	800509a <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 8003cc2:	4807      	ldr	r0, [pc, #28]	@ (8003ce0 <opendoor+0x9c>)
 8003cc4:	f7fc fb8a 	bl	80003dc <CLCD_I2C_Clear>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	10624dd3 	.word	0x10624dd3
 8003cd8:	0800e700 	.word	0x0800e700
 8003cdc:	0800e70c 	.word	0x0800e70c
 8003ce0:	200003d8 	.word	0x200003d8

08003ce4 <buzzer>:
void buzzer( uint8_t countbeep)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 8003cee:	e011      	b.n	8003d14 <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cf6:	480c      	ldr	r0, [pc, #48]	@ (8003d28 <buzzer+0x44>)
 8003cf8:	f001 f9cf 	bl	800509a <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8003cfc:	2078      	movs	r0, #120	@ 0x78
 8003cfe:	f000 fcff 	bl	8004700 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8003d02:	2201      	movs	r2, #1
 8003d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d08:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <buzzer+0x44>)
 8003d0a:	f001 f9c6 	bl	800509a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003d0e:	2032      	movs	r0, #50	@ 0x32
 8003d10:	f000 fcf6 	bl	8004700 <HAL_Delay>
	while(countbeep--)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	71fa      	strb	r2, [r7, #7]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e8      	bne.n	8003cf0 <buzzer+0xc>
	}
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40010800 	.word	0x40010800

08003d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
}
 8003d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <Error_Handler+0x8>

08003d38 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003d46:	bf00      	nop
 8003d48:	4b0e      	ldr	r3, [pc, #56]	@ (8003d84 <TM_SPI_Send+0x4c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d1f8      	bne.n	8003d48 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003d56:	f107 0208 	add.w	r2, r7, #8
 8003d5a:	f107 010c 	add.w	r1, r7, #12
 8003d5e:	230a      	movs	r3, #10
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2301      	movs	r3, #1
 8003d64:	4807      	ldr	r0, [pc, #28]	@ (8003d84 <TM_SPI_Send+0x4c>)
 8003d66:	f003 feff 	bl	8007b68 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003d6a:	bf00      	nop
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <TM_SPI_Send+0x4c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b80      	cmp	r3, #128	@ 0x80
 8003d78:	d0f8      	beq.n	8003d6c <TM_SPI_Send+0x34>
	return data_re[0];
 8003d7a:	7a3b      	ldrb	r3, [r7, #8]

}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000270 	.word	0x20000270

08003d88 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003d8c:	f000 f8d5 	bl	8003f3a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003d90:	218d      	movs	r1, #141	@ 0x8d
 8003d92:	202a      	movs	r0, #42	@ 0x2a
 8003d94:	f000 f836 	bl	8003e04 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003d98:	213e      	movs	r1, #62	@ 0x3e
 8003d9a:	202b      	movs	r0, #43	@ 0x2b
 8003d9c:	f000 f832 	bl	8003e04 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003da0:	211e      	movs	r1, #30
 8003da2:	202d      	movs	r0, #45	@ 0x2d
 8003da4:	f000 f82e 	bl	8003e04 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003da8:	2100      	movs	r1, #0
 8003daa:	202c      	movs	r0, #44	@ 0x2c
 8003dac:	f000 f82a 	bl	8003e04 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003db0:	2170      	movs	r1, #112	@ 0x70
 8003db2:	2026      	movs	r0, #38	@ 0x26
 8003db4:	f000 f826 	bl	8003e04 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003db8:	2140      	movs	r1, #64	@ 0x40
 8003dba:	2015      	movs	r0, #21
 8003dbc:	f000 f822 	bl	8003e04 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003dc0:	213d      	movs	r1, #61	@ 0x3d
 8003dc2:	2011      	movs	r0, #17
 8003dc4:	f000 f81e 	bl	8003e04 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003dc8:	f000 f8a2 	bl	8003f10 <TM_MFRC522_AntennaOn>
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	2026      	movs	r0, #38	@ 0x26
 8003ddc:	f000 f8b5 	bl	8003f4a <TM_MFRC522_Request>
 8003de0:	4603      	mov	r3, r0
 8003de2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9a1 	bl	8004132 <TM_MFRC522_Anticoll>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003df4:	f000 fa23 	bl	800423e <TM_MFRC522_Halt>
	return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	71fb      	strb	r3, [r7, #7]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003e14:	2200      	movs	r2, #0
 8003e16:	2110      	movs	r1, #16
 8003e18:	480c      	ldr	r0, [pc, #48]	@ (8003e4c <TM_MFRC522_WriteRegister+0x48>)
 8003e1a:	f001 f93e 	bl	800509a <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff84 	bl	8003d38 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003e30:	79bb      	ldrb	r3, [r7, #6]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff80 	bl	8003d38 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	4803      	ldr	r0, [pc, #12]	@ (8003e4c <TM_MFRC522_WriteRegister+0x48>)
 8003e3e:	f001 f92c 	bl	800509a <HAL_GPIO_WritePin>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40010800 	.word	0x40010800

08003e50 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	480f      	ldr	r0, [pc, #60]	@ (8003e9c <TM_MFRC522_ReadRegister+0x4c>)
 8003e60:	f001 f91b 	bl	800509a <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff5d 	bl	8003d38 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7ff ff5a 	bl	8003d38 <TM_SPI_Send>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <TM_MFRC522_ReadRegister+0x4c>)
 8003e8e:	f001 f904 	bl	800509a <HAL_GPIO_WritePin>

	return val;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40010800 	.word	0x40010800

08003ea0 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	71fb      	strb	r3, [r7, #7]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ffcc 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	79bb      	ldrb	r3, [r7, #6]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff9c 	bl	8003e04 <TM_MFRC522_WriteRegister>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	460a      	mov	r2, r1
 8003ede:	71fb      	strb	r3, [r7, #7]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ffb2 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8003eec:	4603      	mov	r3, r0
 8003eee:	b25a      	sxtb	r2, r3
 8003ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b25b      	sxtb	r3, r3
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff7e 	bl	8003e04 <TM_MFRC522_WriteRegister>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003f16:	2014      	movs	r0, #20
 8003f18:	f7ff ff9a 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	2014      	movs	r0, #20
 8003f2e:	f7ff ffb7 	bl	8003ea0 <TM_MFRC522_SetBitMask>
	}
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003f3e:	210f      	movs	r1, #15
 8003f40:	2001      	movs	r0, #1
 8003f42:	f7ff ff5f 	bl	8003e04 <TM_MFRC522_WriteRegister>
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af02      	add	r7, sp, #8
 8003f50:	4603      	mov	r3, r0
 8003f52:	6039      	str	r1, [r7, #0]
 8003f54:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003f56:	2107      	movs	r1, #7
 8003f58:	200d      	movs	r0, #13
 8003f5a:	f7ff ff53 	bl	8003e04 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	79fa      	ldrb	r2, [r7, #7]
 8003f62:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	6839      	ldr	r1, [r7, #0]
 8003f70:	200c      	movs	r0, #12
 8003f72:	f000 f80f 	bl	8003f94 <TM_MFRC522_ToCard>
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <TM_MFRC522_Request+0x3c>
 8003f80:	89bb      	ldrh	r3, [r7, #12]
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d001      	beq.n	8003f8a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003f86:	2302      	movs	r3, #2
 8003f88:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d006      	beq.n	8003fc6 <TM_MFRC522_ToCard+0x32>
 8003fb8:	2b0e      	cmp	r3, #14
 8003fba:	d109      	bne.n	8003fd0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003fbc:	2312      	movs	r3, #18
 8003fbe:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	757b      	strb	r3, [r7, #21]
			break;
 8003fc4:	e005      	b.n	8003fd2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003fc6:	2377      	movs	r3, #119	@ 0x77
 8003fc8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003fca:	2330      	movs	r3, #48	@ 0x30
 8003fcc:	757b      	strb	r3, [r7, #21]
			break;
 8003fce:	e000      	b.n	8003fd2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003fd0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003fd2:	7dbb      	ldrb	r3, [r7, #22]
 8003fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f7ff ff11 	bl	8003e04 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003fe2:	2180      	movs	r1, #128	@ 0x80
 8003fe4:	2004      	movs	r0, #4
 8003fe6:	f7ff ff75 	bl	8003ed4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	200a      	movs	r0, #10
 8003fee:	f7ff ff57 	bl	8003ea0 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f7ff ff05 	bl	8003e04 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	827b      	strh	r3, [r7, #18]
 8003ffe:	e00a      	b.n	8004016 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004000:	8a7b      	ldrh	r3, [r7, #18]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	2009      	movs	r0, #9
 800400c:	f7ff fefa 	bl	8003e04 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	3301      	adds	r3, #1
 8004014:	827b      	strh	r3, [r7, #18]
 8004016:	7bbb      	ldrb	r3, [r7, #14]
 8004018:	b29b      	uxth	r3, r3
 800401a:	8a7a      	ldrh	r2, [r7, #18]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3ef      	bcc.n	8004000 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	4619      	mov	r1, r3
 8004024:	2001      	movs	r0, #1
 8004026:	f7ff feed 	bl	8003e04 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d103      	bne.n	8004038 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	200d      	movs	r0, #13
 8004034:	f7ff ff34 	bl	8003ea0 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8004038:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800403c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800403e:	2004      	movs	r0, #4
 8004040:	f7ff ff06 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8004044:	4603      	mov	r3, r0
 8004046:	753b      	strb	r3, [r7, #20]
		i--;
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	3b01      	subs	r3, #1
 800404c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <TM_MFRC522_ToCard+0xd6>
 8004054:	7d3b      	ldrb	r3, [r7, #20]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <TM_MFRC522_ToCard+0xd6>
 800405e:	7d3a      	ldrb	r2, [r7, #20]
 8004060:	7d7b      	ldrb	r3, [r7, #21]
 8004062:	4013      	ands	r3, r2
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0e9      	beq.n	800403e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800406a:	2180      	movs	r1, #128	@ 0x80
 800406c:	200d      	movs	r0, #13
 800406e:	f7ff ff31 	bl	8003ed4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8004072:	8a7b      	ldrh	r3, [r7, #18]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d057      	beq.n	8004128 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8004078:	2006      	movs	r0, #6
 800407a:	f7ff fee9 	bl	8003e50 <TM_MFRC522_ReadRegister>
 800407e:	4603      	mov	r3, r0
 8004080:	f003 031b 	and.w	r3, r3, #27
 8004084:	2b00      	cmp	r3, #0
 8004086:	d14d      	bne.n	8004124 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800408c:	7d3a      	ldrb	r2, [r7, #20]
 800408e:	7dbb      	ldrb	r3, [r7, #22]
 8004090:	4013      	ands	r3, r2
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d140      	bne.n	8004128 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80040a6:	200a      	movs	r0, #10
 80040a8:	f7ff fed2 	bl	8003e50 <TM_MFRC522_ReadRegister>
 80040ac:	4603      	mov	r3, r0
 80040ae:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80040b0:	200c      	movs	r0, #12
 80040b2:	f7ff fecd 	bl	8003e50 <TM_MFRC522_ReadRegister>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80040be:	7c7b      	ldrb	r3, [r7, #17]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80040c4:	7d3b      	ldrb	r3, [r7, #20]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	7c7b      	ldrb	r3, [r7, #17]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e005      	b.n	80040e8 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80040dc:	7d3b      	ldrb	r3, [r7, #20]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80040e8:	7d3b      	ldrb	r3, [r7, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80040f2:	7d3b      	ldrb	r3, [r7, #20]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d901      	bls.n	80040fc <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80040f8:	2310      	movs	r3, #16
 80040fa:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80040fc:	2300      	movs	r3, #0
 80040fe:	827b      	strh	r3, [r7, #18]
 8004100:	e00a      	b.n	8004118 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8004102:	8a7b      	ldrh	r3, [r7, #18]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	18d4      	adds	r4, r2, r3
 8004108:	2009      	movs	r0, #9
 800410a:	f7ff fea1 	bl	8003e50 <TM_MFRC522_ReadRegister>
 800410e:	4603      	mov	r3, r0
 8004110:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8004112:	8a7b      	ldrh	r3, [r7, #18]
 8004114:	3301      	adds	r3, #1
 8004116:	827b      	strh	r3, [r7, #18]
 8004118:	7d3b      	ldrb	r3, [r7, #20]
 800411a:	b29b      	uxth	r3, r3
 800411c:	8a7a      	ldrh	r2, [r7, #18]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3ef      	bcc.n	8004102 <TM_MFRC522_ToCard+0x16e>
 8004122:	e001      	b.n	8004128 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8004124:	2302      	movs	r3, #2
 8004126:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
}
 800412a:	4618      	mov	r0, r3
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}

08004132 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af02      	add	r7, sp, #8
 8004138:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800413e:	2100      	movs	r1, #0
 8004140:	200d      	movs	r0, #13
 8004142:	f7ff fe5f 	bl	8003e04 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2293      	movs	r2, #147	@ 0x93
 800414a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3301      	adds	r3, #1
 8004150:	2220      	movs	r2, #32
 8004152:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004154:	f107 030a 	add.w	r3, r7, #10
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	200c      	movs	r0, #12
 8004162:	f7ff ff17 	bl	8003f94 <TM_MFRC522_ToCard>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d118      	bne.n	80041a2 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8004170:	2300      	movs	r3, #0
 8004172:	73bb      	strb	r3, [r7, #14]
 8004174:	e009      	b.n	800418a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	4053      	eors	r3, r2
 8004182:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8004184:	7bbb      	ldrb	r3, [r7, #14]
 8004186:	3301      	adds	r3, #1
 8004188:	73bb      	strb	r3, [r7, #14]
 800418a:	7bbb      	ldrb	r3, [r7, #14]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d9f2      	bls.n	8004176 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	7b7a      	ldrb	r2, [r7, #13]
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800419e:	2302      	movs	r3, #2
 80041a0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	460b      	mov	r3, r1
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80041ba:	2104      	movs	r1, #4
 80041bc:	2005      	movs	r0, #5
 80041be:	f7ff fe89 	bl	8003ed4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	200a      	movs	r0, #10
 80041c6:	f7ff fe6b 	bl	8003ea0 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
 80041ce:	e00a      	b.n	80041e6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	2009      	movs	r0, #9
 80041dc:	f7ff fe12 	bl	8003e04 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	3301      	adds	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
 80041e6:	7dfa      	ldrb	r2, [r7, #23]
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3f0      	bcc.n	80041d0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80041ee:	2103      	movs	r1, #3
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff fe07 	bl	8003e04 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80041f6:	23ff      	movs	r3, #255	@ 0xff
 80041f8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80041fa:	2005      	movs	r0, #5
 80041fc:	f7ff fe28 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8004200:	4603      	mov	r3, r0
 8004202:	75bb      	strb	r3, [r7, #22]
		i--;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	3b01      	subs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <TM_MFRC522_CalculateCRC+0x6e>
 8004210:	7dbb      	ldrb	r3, [r7, #22]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ef      	beq.n	80041fa <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800421a:	2022      	movs	r0, #34	@ 0x22
 800421c:	f7ff fe18 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1c5c      	adds	r4, r3, #1
 800422c:	2021      	movs	r0, #33	@ 0x21
 800422e:	f7ff fe0f 	bl	8003e50 <TM_MFRC522_ReadRegister>
 8004232:	4603      	mov	r3, r0
 8004234:	7023      	strb	r3, [r4, #0]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}

0800423e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8004244:	2350      	movs	r3, #80	@ 0x50
 8004246:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800424c:	463b      	mov	r3, r7
 800424e:	1c9a      	adds	r2, r3, #2
 8004250:	463b      	mov	r3, r7
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ffa9 	bl	80041ac <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800425a:	463a      	mov	r2, r7
 800425c:	4639      	mov	r1, r7
 800425e:	1dbb      	adds	r3, r7, #6
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	2204      	movs	r2, #4
 8004266:	200c      	movs	r0, #12
 8004268:	f7ff fe94 	bl	8003f94 <TM_MFRC522_ToCard>



}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <HAL_MspInit+0x5c>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <HAL_MspInit+0x5c>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6193      	str	r3, [r2, #24]
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <HAL_MspInit+0x5c>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	@ (80042d0 <HAL_MspInit+0x5c>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <HAL_MspInit+0x5c>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429c:	61d3      	str	r3, [r2, #28]
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <HAL_MspInit+0x5c>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <HAL_MspInit+0x60>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4a04      	ldr	r2, [pc, #16]	@ (80042d4 <HAL_MspInit+0x60>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40010000 	.word	0x40010000

080042d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a16      	ldr	r2, [pc, #88]	@ (800434c <HAL_I2C_MspInit+0x74>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d124      	bne.n	8004342 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 80042fe:	f043 0308 	orr.w	r3, r3, #8
 8004302:	6193      	str	r3, [r2, #24]
 8004304:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004310:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004316:	2312      	movs	r3, #18
 8004318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800431a:	2303      	movs	r3, #3
 800431c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	4619      	mov	r1, r3
 8004324:	480b      	ldr	r0, [pc, #44]	@ (8004354 <HAL_I2C_MspInit+0x7c>)
 8004326:	f000 fd1d 	bl	8004d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 8004330:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004334:	61d3      	str	r3, [r2, #28]
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_I2C_MspInit+0x78>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004342:	bf00      	nop
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40005800 	.word	0x40005800
 8004350:	40021000 	.word	0x40021000
 8004354:	40010c00 	.word	0x40010c00

08004358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <HAL_SPI_MspInit+0x88>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d12f      	bne.n	80043d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004378:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 800437e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004382:	6193      	str	r3, [r2, #24]
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	6193      	str	r3, [r2, #24]
 800439c:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <HAL_SPI_MspInit+0x8c>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80043a8:	23a0      	movs	r3, #160	@ 0xa0
 80043aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	4619      	mov	r1, r3
 80043ba:	480b      	ldr	r0, [pc, #44]	@ (80043e8 <HAL_SPI_MspInit+0x90>)
 80043bc:	f000 fcd2 	bl	8004d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043c0:	2340      	movs	r3, #64	@ 0x40
 80043c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4619      	mov	r1, r3
 80043d2:	4805      	ldr	r0, [pc, #20]	@ (80043e8 <HAL_SPI_MspInit+0x90>)
 80043d4:	f000 fcc6 	bl	8004d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043d8:	bf00      	nop
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40013000 	.word	0x40013000
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40010800 	.word	0x40010800

080043ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fc:	d113      	bne.n	8004426 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <HAL_TIM_Base_MspInit+0x44>)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4a0b      	ldr	r2, [pc, #44]	@ (8004430 <HAL_TIM_Base_MspInit+0x44>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	61d3      	str	r3, [r2, #28]
 800440a:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <HAL_TIM_Base_MspInit+0x44>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2100      	movs	r1, #0
 800441a:	201c      	movs	r0, #28
 800441c:	f000 fa6b 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004420:	201c      	movs	r0, #28
 8004422:	f000 fa84 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000

08004434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	@ 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <HAL_UART_MspInit+0xa4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d13d      	bne.n	80044d0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004454:	4b21      	ldr	r3, [pc, #132]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	4a20      	ldr	r2, [pc, #128]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 800445a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800445e:	6193      	str	r3, [r2, #24]
 8004460:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	6193      	str	r3, [r2, #24]
 8004478:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <HAL_UART_MspInit+0xa8>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004484:	2340      	movs	r3, #64	@ 0x40
 8004486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448c:	2303      	movs	r3, #3
 800448e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4619      	mov	r1, r3
 8004496:	4812      	ldr	r0, [pc, #72]	@ (80044e0 <HAL_UART_MspInit+0xac>)
 8004498:	f000 fc64 	bl	8004d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	480c      	ldr	r0, [pc, #48]	@ (80044e0 <HAL_UART_MspInit+0xac>)
 80044b0:	f000 fc58 	bl	8004d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_UART_MspInit+0xb0>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ca:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <HAL_UART_MspInit+0xb0>)
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044d0:	bf00      	nop
 80044d2:	3728      	adds	r7, #40	@ 0x28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40010c00 	.word	0x40010c00
 80044e4:	40010000 	.word	0x40010000

080044e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <NMI_Handler+0x4>

080044f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <HardFault_Handler+0x4>

080044f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <MemManage_Handler+0x4>

08004500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <BusFault_Handler+0x4>

08004508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <UsageFault_Handler+0x4>

08004510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004538:	f000 f8c6 	bl	80046c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}

08004540 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004544:	4802      	ldr	r0, [pc, #8]	@ (8004550 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004546:	f001 fb5e 	bl	8005c06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200010d0 	.word	0x200010d0

08004554 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004558:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800455c:	f000 fdb6 	bl	80050cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}

08004564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004568:	4802      	ldr	r0, [pc, #8]	@ (8004574 <TIM2_IRQHandler+0x10>)
 800456a:	f003 fde7 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200002c8 	.word	0x200002c8

08004578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004580:	4a14      	ldr	r2, [pc, #80]	@ (80045d4 <_sbrk+0x5c>)
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <_sbrk+0x60>)
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800458c:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <_sbrk+0x64>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004594:	4b11      	ldr	r3, [pc, #68]	@ (80045dc <_sbrk+0x64>)
 8004596:	4a12      	ldr	r2, [pc, #72]	@ (80045e0 <_sbrk+0x68>)
 8004598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <_sbrk+0x64>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d207      	bcs.n	80045b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045a8:	f008 ff22 	bl	800d3f0 <__errno>
 80045ac:	4603      	mov	r3, r0
 80045ae:	220c      	movs	r2, #12
 80045b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e009      	b.n	80045cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045b8:	4b08      	ldr	r3, [pc, #32]	@ (80045dc <_sbrk+0x64>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <_sbrk+0x64>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <_sbrk+0x64>)
 80045c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20005000 	.word	0x20005000
 80045d8:	00000400 	.word	0x00000400
 80045dc:	2000040c 	.word	0x2000040c
 80045e0:	20001728 	.word	0x20001728

080045e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045f2:	e003      	b.n	80045fc <LoopCopyDataInit>

080045f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045fa:	3104      	adds	r1, #4

080045fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045fc:	480a      	ldr	r0, [pc, #40]	@ (8004628 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004600:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004602:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004604:	d3f6      	bcc.n	80045f4 <CopyDataInit>
  ldr r2, =_sbss
 8004606:	4a0a      	ldr	r2, [pc, #40]	@ (8004630 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004608:	e002      	b.n	8004610 <LoopFillZerobss>

0800460a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800460a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800460c:	f842 3b04 	str.w	r3, [r2], #4

08004610 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004612:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004614:	d3f9      	bcc.n	800460a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004616:	f7ff ffe5 	bl	80045e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461a:	f008 feef 	bl	800d3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800461e:	f7fc fbcd 	bl	8000dbc <main>
  bx lr
 8004622:	4770      	bx	lr
  ldr r3, =_sidata
 8004624:	0800e7e4 	.word	0x0800e7e4
  ldr r0, =_sdata
 8004628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800462c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004630:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8004634:	20001724 	.word	0x20001724

08004638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004638:	e7fe      	b.n	8004638 <ADC1_2_IRQHandler>
	...

0800463c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004640:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_Init+0x28>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a07      	ldr	r2, [pc, #28]	@ (8004664 <HAL_Init+0x28>)
 8004646:	f043 0310 	orr.w	r3, r3, #16
 800464a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800464c:	2003      	movs	r0, #3
 800464e:	f000 f947 	bl	80048e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004652:	2000      	movs	r0, #0
 8004654:	f000 f808 	bl	8004668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004658:	f7ff fe0c 	bl	8004274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40022000 	.word	0x40022000

08004668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004670:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <HAL_InitTick+0x54>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_InitTick+0x58>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800467e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f95f 	bl	800494a <HAL_SYSTICK_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e00e      	b.n	80046b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b0f      	cmp	r3, #15
 800469a:	d80a      	bhi.n	80046b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800469c:	2200      	movs	r2, #0
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	f000 f927 	bl	80048f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a8:	4a06      	ldr	r2, [pc, #24]	@ (80046c4 <HAL_InitTick+0x5c>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000028 	.word	0x20000028
 80046c0:	20000030 	.word	0x20000030
 80046c4:	2000002c 	.word	0x2000002c

080046c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_IncTick+0x1c>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_IncTick+0x20>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4413      	add	r3, r2
 80046d8:	4a03      	ldr	r2, [pc, #12]	@ (80046e8 <HAL_IncTick+0x20>)
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	20000030 	.word	0x20000030
 80046e8:	20000410 	.word	0x20000410

080046ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return uwTick;
 80046f0:	4b02      	ldr	r3, [pc, #8]	@ (80046fc <HAL_GetTick+0x10>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	20000410 	.word	0x20000410

08004700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7ff fff0 	bl	80046ec <HAL_GetTick>
 800470c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d005      	beq.n	8004726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800471a:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <HAL_Delay+0x44>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004726:	bf00      	nop
 8004728:	f7ff ffe0 	bl	80046ec <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d8f7      	bhi.n	8004728 <HAL_Delay+0x28>
  {
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000030 	.word	0x20000030

08004748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <__NVIC_SetPriorityGrouping+0x44>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477a:	4a04      	ldr	r2, [pc, #16]	@ (800478c <__NVIC_SetPriorityGrouping+0x44>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	60d3      	str	r3, [r2, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0307 	and.w	r3, r3, #7
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db0b      	blt.n	80047d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	f003 021f 	and.w	r2, r3, #31
 80047c4:	4906      	ldr	r1, [pc, #24]	@ (80047e0 <__NVIC_EnableIRQ+0x34>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2001      	movs	r0, #1
 80047ce:	fa00 f202 	lsl.w	r2, r0, r2
 80047d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	e000e100 	.word	0xe000e100

080047e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db0a      	blt.n	800480e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	490c      	ldr	r1, [pc, #48]	@ (8004830 <__NVIC_SetPriority+0x4c>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	440b      	add	r3, r1
 8004808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800480c:	e00a      	b.n	8004824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	4908      	ldr	r1, [pc, #32]	@ (8004834 <__NVIC_SetPriority+0x50>)
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	3b04      	subs	r3, #4
 800481c:	0112      	lsls	r2, r2, #4
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	440b      	add	r3, r1
 8004822:	761a      	strb	r2, [r3, #24]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000e100 	.word	0xe000e100
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	@ 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f1c3 0307 	rsb	r3, r3, #7
 8004852:	2b04      	cmp	r3, #4
 8004854:	bf28      	it	cs
 8004856:	2304      	movcs	r3, #4
 8004858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3304      	adds	r3, #4
 800485e:	2b06      	cmp	r3, #6
 8004860:	d902      	bls.n	8004868 <NVIC_EncodePriority+0x30>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3b03      	subs	r3, #3
 8004866:	e000      	b.n	800486a <NVIC_EncodePriority+0x32>
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	f04f 32ff 	mov.w	r2, #4294967295
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	401a      	ands	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004880:	f04f 31ff 	mov.w	r1, #4294967295
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43d9      	mvns	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004890:	4313      	orrs	r3, r2
         );
}
 8004892:	4618      	mov	r0, r3
 8004894:	3724      	adds	r7, #36	@ 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ac:	d301      	bcc.n	80048b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ae:	2301      	movs	r3, #1
 80048b0:	e00f      	b.n	80048d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048b2:	4a0a      	ldr	r2, [pc, #40]	@ (80048dc <SysTick_Config+0x40>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ba:	210f      	movs	r1, #15
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	f7ff ff90 	bl	80047e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <SysTick_Config+0x40>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ca:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <SysTick_Config+0x40>)
 80048cc:	2207      	movs	r2, #7
 80048ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	e000e010 	.word	0xe000e010

080048e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff2d 	bl	8004748 <__NVIC_SetPriorityGrouping>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004908:	f7ff ff42 	bl	8004790 <__NVIC_GetPriorityGrouping>
 800490c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f7ff ff90 	bl	8004838 <NVIC_EncodePriority>
 8004918:	4602      	mov	r2, r0
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff5f 	bl	80047e4 <__NVIC_SetPriority>
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff35 	bl	80047ac <__NVIC_EnableIRQ>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ffa2 	bl	800489c <SysTick_Config>
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_FLASH_Program+0xd8>)
 8004980:	7e1b      	ldrb	r3, [r3, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_FLASH_Program+0x26>
 8004986:	2302      	movs	r3, #2
 8004988:	e054      	b.n	8004a34 <HAL_FLASH_Program+0xd0>
 800498a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a3c <HAL_FLASH_Program+0xd8>)
 800498c:	2201      	movs	r2, #1
 800498e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004990:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004994:	f000 f8a8 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d144      	bne.n	8004a2c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d102      	bne.n	80049ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	757b      	strb	r3, [r7, #21]
 80049ac:	e007      	b.n	80049be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d102      	bne.n	80049ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80049b4:	2302      	movs	r3, #2
 80049b6:	757b      	strb	r3, [r7, #21]
 80049b8:	e001      	b.n	80049be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80049ba:	2304      	movs	r3, #4
 80049bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80049be:	2300      	movs	r3, #0
 80049c0:	75bb      	strb	r3, [r7, #22]
 80049c2:	e02d      	b.n	8004a20 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80049c4:	7dbb      	ldrb	r3, [r7, #22]
 80049c6:	005a      	lsls	r2, r3, #1
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	eb02 0c03 	add.w	ip, r2, r3
 80049ce:	7dbb      	ldrb	r3, [r7, #22]
 80049d0:	0119      	lsls	r1, r3, #4
 80049d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d6:	f1c1 0620 	rsb	r6, r1, #32
 80049da:	f1a1 0020 	sub.w	r0, r1, #32
 80049de:	fa22 f401 	lsr.w	r4, r2, r1
 80049e2:	fa03 f606 	lsl.w	r6, r3, r6
 80049e6:	4334      	orrs	r4, r6
 80049e8:	fa23 f000 	lsr.w	r0, r3, r0
 80049ec:	4304      	orrs	r4, r0
 80049ee:	fa23 f501 	lsr.w	r5, r3, r1
 80049f2:	b2a3      	uxth	r3, r4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4660      	mov	r0, ip
 80049f8:	f000 f85a 	bl	8004ab0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a00:	f000 f872 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004a08:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <HAL_FLASH_Program+0xdc>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <HAL_FLASH_Program+0xdc>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004a1a:	7dbb      	ldrb	r3, [r7, #22]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	75bb      	strb	r3, [r7, #22]
 8004a20:	7dba      	ldrb	r2, [r7, #22]
 8004a22:	7d7b      	ldrb	r3, [r7, #21]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3cd      	bcc.n	80049c4 <HAL_FLASH_Program+0x60>
 8004a28:	e000      	b.n	8004a2c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004a2a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <HAL_FLASH_Program+0xd8>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	761a      	strb	r2, [r3, #24]

  return status;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3c:	20000418 	.word	0x20000418
 8004a40:	40022000 	.word	0x40022000

08004a44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <HAL_FLASH_Unlock+0x40>)
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <HAL_FLASH_Unlock+0x40>)
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <HAL_FLASH_Unlock+0x44>)
 8004a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a60:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <HAL_FLASH_Unlock+0x40>)
 8004a62:	4a0a      	ldr	r2, [pc, #40]	@ (8004a8c <HAL_FLASH_Unlock+0x48>)
 8004a64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_FLASH_Unlock+0x40>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004a76:	79fb      	ldrb	r3, [r7, #7]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40022000 	.word	0x40022000
 8004a88:	45670123 	.word	0x45670123
 8004a8c:	cdef89ab 	.word	0xcdef89ab

08004a90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a94:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_FLASH_Lock+0x1c>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <HAL_FLASH_Lock+0x1c>)
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40022000 	.word	0x40022000

08004ab0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004abc:	4b08      	ldr	r3, [pc, #32]	@ (8004ae0 <FLASH_Program_HalfWord+0x30>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <FLASH_Program_HalfWord+0x34>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4a07      	ldr	r2, [pc, #28]	@ (8004ae4 <FLASH_Program_HalfWord+0x34>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	887a      	ldrh	r2, [r7, #2]
 8004ad2:	801a      	strh	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000418 	.word	0x20000418
 8004ae4:	40022000 	.word	0x40022000

08004ae8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004af0:	f7ff fdfc 	bl	80046ec <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004af6:	e010      	b.n	8004b1a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d00c      	beq.n	8004b1a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <FLASH_WaitForLastOperation+0x2e>
 8004b06:	f7ff fdf1 	bl	80046ec <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d201      	bcs.n	8004b1a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e025      	b.n	8004b66 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b1a:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e8      	bne.n	8004af8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004b26:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b32:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b34:	2220      	movs	r2, #32
 8004b36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b38:	4b0d      	ldr	r3, [pc, #52]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b50:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <FLASH_WaitForLastOperation+0x88>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b5c:	f000 f80a 	bl	8004b74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40022000 	.word	0x40022000

08004b74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004b7e:	4b23      	ldr	r3, [pc, #140]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b8a:	4b21      	ldr	r3, [pc, #132]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f043 0302 	orr.w	r3, r3, #2
 8004b92:	4a1f      	ldr	r2, [pc, #124]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004b94:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f043 0310 	orr.w	r3, r3, #16
 8004b9c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004baa:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004bb4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f043 0304 	orr.w	r3, r3, #4
 8004bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c10 <FLASH_SetErrorCode+0x9c>)
 8004bd4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f240 1201 	movw	r2, #257	@ 0x101
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d106      	bne.n	8004bfa <FLASH_SetErrorCode+0x86>
 8004bec:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	61d3      	str	r3, [r2, #28]
}  
 8004bf8:	e002      	b.n	8004c00 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004bfa:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <FLASH_SetErrorCode+0x98>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60d3      	str	r3, [r2, #12]
}  
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	20000418 	.word	0x20000418

08004c14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c26:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce4 <HAL_FLASHEx_Erase+0xd0>)
 8004c28:	7e1b      	ldrb	r3, [r3, #24]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_FLASHEx_Erase+0x1e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e053      	b.n	8004cda <HAL_FLASHEx_Erase+0xc6>
 8004c32:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce4 <HAL_FLASHEx_Erase+0xd0>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d116      	bne.n	8004c6e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c44:	f7ff ff50 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d141      	bne.n	8004cd2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f000 f84c 	bl	8004cec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c58:	f7ff ff46 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004c60:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <HAL_FLASHEx_Erase+0xd4>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <HAL_FLASHEx_Erase+0xd4>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6113      	str	r3, [r2, #16]
 8004c6c:	e031      	b.n	8004cd2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c6e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c72:	f7ff ff39 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d12a      	bne.n	8004cd2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	e019      	b.n	8004cc0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004c8c:	68b8      	ldr	r0, [r7, #8]
 8004c8e:	f000 f849 	bl	8004d24 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c96:	f7ff ff27 	bl	8004ae8 <FLASH_WaitForLastOperation>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <HAL_FLASHEx_Erase+0xd4>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <HAL_FLASHEx_Erase+0xd4>)
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	601a      	str	r2, [r3, #0]
            break;
 8004cb6:	e00c      	b.n	8004cd2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cbe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	029a      	lsls	r2, r3, #10
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4413      	add	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3dc      	bcc.n	8004c8c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cd2:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <HAL_FLASHEx_Erase+0xd0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	761a      	strb	r2, [r3, #24]

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000418 	.word	0x20000418
 8004ce8:	40022000 	.word	0x40022000

08004cec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <FLASH_MassErase+0x30>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <FLASH_MassErase+0x34>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a08      	ldr	r2, [pc, #32]	@ (8004d20 <FLASH_MassErase+0x34>)
 8004d00:	f043 0304 	orr.w	r3, r3, #4
 8004d04:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <FLASH_MassErase+0x34>)
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <FLASH_MassErase+0x34>)
 8004d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d10:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	20000418 	.word	0x20000418
 8004d20:	40022000 	.word	0x40022000

08004d24 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <FLASH_PageErase+0x38>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <FLASH_PageErase+0x3c>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <FLASH_PageErase+0x3c>)
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004d3e:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <FLASH_PageErase+0x3c>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <FLASH_PageErase+0x3c>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <FLASH_PageErase+0x3c>)
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000418 	.word	0x20000418
 8004d60:	40022000 	.word	0x40022000

08004d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b08b      	sub	sp, #44	@ 0x2c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d76:	e169      	b.n	800504c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d78:	2201      	movs	r2, #1
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	f040 8158 	bne.w	8005046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4a9a      	ldr	r2, [pc, #616]	@ (8005004 <HAL_GPIO_Init+0x2a0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d05e      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
 8004da0:	4a98      	ldr	r2, [pc, #608]	@ (8005004 <HAL_GPIO_Init+0x2a0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d875      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004da6:	4a98      	ldr	r2, [pc, #608]	@ (8005008 <HAL_GPIO_Init+0x2a4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d058      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
 8004dac:	4a96      	ldr	r2, [pc, #600]	@ (8005008 <HAL_GPIO_Init+0x2a4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d86f      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004db2:	4a96      	ldr	r2, [pc, #600]	@ (800500c <HAL_GPIO_Init+0x2a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d052      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
 8004db8:	4a94      	ldr	r2, [pc, #592]	@ (800500c <HAL_GPIO_Init+0x2a8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d869      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004dbe:	4a94      	ldr	r2, [pc, #592]	@ (8005010 <HAL_GPIO_Init+0x2ac>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d04c      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
 8004dc4:	4a92      	ldr	r2, [pc, #584]	@ (8005010 <HAL_GPIO_Init+0x2ac>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d863      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004dca:	4a92      	ldr	r2, [pc, #584]	@ (8005014 <HAL_GPIO_Init+0x2b0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d046      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
 8004dd0:	4a90      	ldr	r2, [pc, #576]	@ (8005014 <HAL_GPIO_Init+0x2b0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d85d      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004dd6:	2b12      	cmp	r3, #18
 8004dd8:	d82a      	bhi.n	8004e30 <HAL_GPIO_Init+0xcc>
 8004dda:	2b12      	cmp	r3, #18
 8004ddc:	d859      	bhi.n	8004e92 <HAL_GPIO_Init+0x12e>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_GPIO_Init+0x80>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e5f 	.word	0x08004e5f
 8004de8:	08004e39 	.word	0x08004e39
 8004dec:	08004e4b 	.word	0x08004e4b
 8004df0:	08004e8d 	.word	0x08004e8d
 8004df4:	08004e93 	.word	0x08004e93
 8004df8:	08004e93 	.word	0x08004e93
 8004dfc:	08004e93 	.word	0x08004e93
 8004e00:	08004e93 	.word	0x08004e93
 8004e04:	08004e93 	.word	0x08004e93
 8004e08:	08004e93 	.word	0x08004e93
 8004e0c:	08004e93 	.word	0x08004e93
 8004e10:	08004e93 	.word	0x08004e93
 8004e14:	08004e93 	.word	0x08004e93
 8004e18:	08004e93 	.word	0x08004e93
 8004e1c:	08004e93 	.word	0x08004e93
 8004e20:	08004e93 	.word	0x08004e93
 8004e24:	08004e93 	.word	0x08004e93
 8004e28:	08004e41 	.word	0x08004e41
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	4a79      	ldr	r2, [pc, #484]	@ (8005018 <HAL_GPIO_Init+0x2b4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e36:	e02c      	b.n	8004e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	623b      	str	r3, [r7, #32]
          break;
 8004e3e:	e029      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	3304      	adds	r3, #4
 8004e46:	623b      	str	r3, [r7, #32]
          break;
 8004e48:	e024      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	623b      	str	r3, [r7, #32]
          break;
 8004e52:	e01f      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	623b      	str	r3, [r7, #32]
          break;
 8004e5c:	e01a      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e66:	2304      	movs	r3, #4
 8004e68:	623b      	str	r3, [r7, #32]
          break;
 8004e6a:	e013      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d105      	bne.n	8004e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e74:	2308      	movs	r3, #8
 8004e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	611a      	str	r2, [r3, #16]
          break;
 8004e7e:	e009      	b.n	8004e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e80:	2308      	movs	r3, #8
 8004e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	615a      	str	r2, [r3, #20]
          break;
 8004e8a:	e003      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	623b      	str	r3, [r7, #32]
          break;
 8004e90:	e000      	b.n	8004e94 <HAL_GPIO_Init+0x130>
          break;
 8004e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2bff      	cmp	r3, #255	@ 0xff
 8004e98:	d801      	bhi.n	8004e9e <HAL_GPIO_Init+0x13a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	e001      	b.n	8004ea2 <HAL_GPIO_Init+0x13e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2bff      	cmp	r3, #255	@ 0xff
 8004ea8:	d802      	bhi.n	8004eb0 <HAL_GPIO_Init+0x14c>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	e002      	b.n	8004eb6 <HAL_GPIO_Init+0x152>
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	3b08      	subs	r3, #8
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	210f      	movs	r1, #15
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80b1 	beq.w	8005046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800501c <HAL_GPIO_Init+0x2b8>)
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800501c <HAL_GPIO_Init+0x2b8>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6193      	str	r3, [r2, #24]
 8004ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800501c <HAL_GPIO_Init+0x2b8>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004efc:	4a48      	ldr	r2, [pc, #288]	@ (8005020 <HAL_GPIO_Init+0x2bc>)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	220f      	movs	r2, #15
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a40      	ldr	r2, [pc, #256]	@ (8005024 <HAL_GPIO_Init+0x2c0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <HAL_GPIO_Init+0x1ec>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <HAL_GPIO_Init+0x2c4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00d      	beq.n	8004f4c <HAL_GPIO_Init+0x1e8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3e      	ldr	r2, [pc, #248]	@ (800502c <HAL_GPIO_Init+0x2c8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <HAL_GPIO_Init+0x1e4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005030 <HAL_GPIO_Init+0x2cc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_GPIO_Init+0x1e0>
 8004f40:	2303      	movs	r3, #3
 8004f42:	e006      	b.n	8004f52 <HAL_GPIO_Init+0x1ee>
 8004f44:	2304      	movs	r3, #4
 8004f46:	e004      	b.n	8004f52 <HAL_GPIO_Init+0x1ee>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e002      	b.n	8004f52 <HAL_GPIO_Init+0x1ee>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_GPIO_Init+0x1ee>
 8004f50:	2300      	movs	r3, #0
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	f002 0203 	and.w	r2, r2, #3
 8004f58:	0092      	lsls	r2, r2, #2
 8004f5a:	4093      	lsls	r3, r2
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f62:	492f      	ldr	r1, [pc, #188]	@ (8005020 <HAL_GPIO_Init+0x2bc>)
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	492c      	ldr	r1, [pc, #176]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	e006      	b.n	8004f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	4928      	ldr	r1, [pc, #160]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d006      	beq.n	8004fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fa4:	4b23      	ldr	r3, [pc, #140]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4922      	ldr	r1, [pc, #136]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e006      	b.n	8004fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fb2:	4b20      	ldr	r3, [pc, #128]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	491e      	ldr	r1, [pc, #120]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d006      	beq.n	8004fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	4918      	ldr	r1, [pc, #96]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fda:	4b16      	ldr	r3, [pc, #88]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	4914      	ldr	r1, [pc, #80]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d021      	beq.n	8005038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	490e      	ldr	r1, [pc, #56]	@ (8005034 <HAL_GPIO_Init+0x2d0>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60cb      	str	r3, [r1, #12]
 8005000:	e021      	b.n	8005046 <HAL_GPIO_Init+0x2e2>
 8005002:	bf00      	nop
 8005004:	10320000 	.word	0x10320000
 8005008:	10310000 	.word	0x10310000
 800500c:	10220000 	.word	0x10220000
 8005010:	10210000 	.word	0x10210000
 8005014:	10120000 	.word	0x10120000
 8005018:	10110000 	.word	0x10110000
 800501c:	40021000 	.word	0x40021000
 8005020:	40010000 	.word	0x40010000
 8005024:	40010800 	.word	0x40010800
 8005028:	40010c00 	.word	0x40010c00
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005038:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <HAL_GPIO_Init+0x304>)
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	43db      	mvns	r3, r3
 8005040:	4909      	ldr	r1, [pc, #36]	@ (8005068 <HAL_GPIO_Init+0x304>)
 8005042:	4013      	ands	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	3301      	adds	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f ae8e 	bne.w	8004d78 <HAL_GPIO_Init+0x14>
  }
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	372c      	adds	r7, #44	@ 0x2c
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40010400 	.word	0x40010400

0800506c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e001      	b.n	800508e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	807b      	strh	r3, [r7, #2]
 80050a6:	4613      	mov	r3, r2
 80050a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050aa:	787b      	ldrb	r3, [r7, #1]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b0:	887a      	ldrh	r2, [r7, #2]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050b6:	e003      	b.n	80050c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	041a      	lsls	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050d6:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050e2:	4a05      	ldr	r2, [pc, #20]	@ (80050f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f806 	bl	80050fc <HAL_GPIO_EXTI_Callback>
  }
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40010400 	.word	0x40010400

080050fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e12b      	b.n	800537a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff f8ce 	bl	80042d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005174:	f002 fb78 	bl	8007868 <HAL_RCC_GetPCLK1Freq>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a81      	ldr	r2, [pc, #516]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d807      	bhi.n	8005194 <HAL_I2C_Init+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a80      	ldr	r2, [pc, #512]	@ (8005388 <HAL_I2C_Init+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	bf94      	ite	ls
 800518c:	2301      	movls	r3, #1
 800518e:	2300      	movhi	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e006      	b.n	80051a2 <HAL_I2C_Init+0x92>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a7d      	ldr	r2, [pc, #500]	@ (800538c <HAL_I2C_Init+0x27c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0e7      	b.n	800537a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a78      	ldr	r2, [pc, #480]	@ (8005390 <HAL_I2C_Init+0x280>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0c9b      	lsrs	r3, r3, #18
 80051b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_I2C_Init+0x274>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <HAL_I2C_Init+0xd4>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	e009      	b.n	80051f8 <HAL_I2C_Init+0xe8>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	4a69      	ldr	r2, [pc, #420]	@ (8005394 <HAL_I2C_Init+0x284>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	3301      	adds	r3, #1
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800520a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	495c      	ldr	r1, [pc, #368]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005214:	428b      	cmp	r3, r1
 8005216:	d819      	bhi.n	800524c <HAL_I2C_Init+0x13c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e59      	subs	r1, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	fbb1 f3f3 	udiv	r3, r1, r3
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800522c:	400b      	ands	r3, r1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_I2C_Init+0x138>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e59      	subs	r1, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005240:	3301      	adds	r3, #1
 8005242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005246:	e051      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 8005248:	2304      	movs	r3, #4
 800524a:	e04f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <HAL_I2C_Init+0x168>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e012      	b.n	800529e <HAL_I2C_Init+0x18e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x196>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_I2C_Init+0x1bc>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e58      	subs	r0, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ca:	e00f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6809      	ldr	r1, [r1, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800531a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6911      	ldr	r1, [r2, #16]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	4311      	orrs	r1, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	000186a0 	.word	0x000186a0
 8005388:	001e847f 	.word	0x001e847f
 800538c:	003d08ff 	.word	0x003d08ff
 8005390:	431bde83 	.word	0x431bde83
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	461a      	mov	r2, r3
 80053a4:	460b      	mov	r3, r1
 80053a6:	817b      	strh	r3, [r7, #10]
 80053a8:	4613      	mov	r3, r2
 80053aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ac:	f7ff f99e 	bl	80046ec <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	f040 80e0 	bne.w	8005580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2319      	movs	r3, #25
 80053c6:	2201      	movs	r2, #1
 80053c8:	4970      	ldr	r1, [pc, #448]	@ (800558c <HAL_I2C_Master_Transmit+0x1f4>)
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f964 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0d3      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_I2C_Master_Transmit+0x50>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e0cc      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d007      	beq.n	800540e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800541c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2221      	movs	r2, #33	@ 0x21
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2210      	movs	r2, #16
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	893a      	ldrh	r2, [r7, #8]
 800543e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a50      	ldr	r2, [pc, #320]	@ (8005590 <HAL_I2C_Master_Transmit+0x1f8>)
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005450:	8979      	ldrh	r1, [r7, #10]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f89c 	bl	8005594 <I2C_MasterRequestWrite>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e08d      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800547c:	e066      	b.n	800554c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6a39      	ldr	r1, [r7, #32]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f9de 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2b04      	cmp	r3, #4
 8005494:	d107      	bne.n	80054a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06b      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d11b      	bne.n	8005520 <HAL_I2C_Master_Transmit+0x188>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	6a39      	ldr	r1, [r7, #32]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f9ce 	bl	80058c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e01a      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d194      	bne.n	800547e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	00100002 	.word	0x00100002
 8005590:	ffff0000 	.word	0xffff0000

08005594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	460b      	mov	r3, r1
 80055a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d006      	beq.n	80055be <I2C_MasterRequestWrite+0x2a>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d003      	beq.n	80055be <I2C_MasterRequestWrite+0x2a>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055bc:	d108      	bne.n	80055d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e00b      	b.n	80055e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	2b12      	cmp	r3, #18
 80055d6:	d107      	bne.n	80055e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f84f 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560e:	d103      	bne.n	8005618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e035      	b.n	8005688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005624:	d108      	bne.n	8005638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	e01b      	b.n	8005670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005638:	897b      	ldrh	r3, [r7, #10]
 800563a:	11db      	asrs	r3, r3, #7
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 0306 	and.w	r3, r3, #6
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f063 030f 	orn	r3, r3, #15
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	490e      	ldr	r1, [pc, #56]	@ (8005690 <I2C_MasterRequestWrite+0xfc>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f875 	bl	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e010      	b.n	8005688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <I2C_MasterRequestWrite+0x100>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f865 	bl	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	00010008 	.word	0x00010008
 8005694:	00010002 	.word	0x00010002

08005698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a8:	e025      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d021      	beq.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7ff f81b 	bl	80046ec <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f043 0220 	orr.w	r2, r3, #32
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e023      	b.n	800573e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10d      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	e00c      	b.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	43da      	mvns	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d0b6      	beq.n	80056aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005754:	e051      	b.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005764:	d123      	bne.n	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800577e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e046      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d021      	beq.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fe ff99 	bl	80046ec <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e020      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10c      	bne.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	43da      	mvns	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4013      	ands	r3, r2
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e00b      	b.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d18d      	bne.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005850:	e02d      	b.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f878 	bl	8005948 <I2C_IsAcknowledgeFailed>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02d      	b.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d021      	beq.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fe ff3f 	bl	80046ec <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d116      	bne.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e007      	b.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b8:	2b80      	cmp	r3, #128	@ 0x80
 80058ba:	d1ca      	bne.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058d2:	e02d      	b.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f837 	bl	8005948 <I2C_IsAcknowledgeFailed>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e02d      	b.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d021      	beq.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ec:	f7fe fefe 	bl	80046ec <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e007      	b.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d1ca      	bne.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595e:	d11b      	bne.n	8005998 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005968:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	f043 0204 	orr.w	r2, r3, #4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a6:	b08b      	sub	sp, #44	@ 0x2c
 80059a8:	af06      	add	r7, sp, #24
 80059aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e0fd      	b.n	8005bb2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f007 fa0a 	bl	800cde4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2203      	movs	r2, #3
 80059d4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f003 f981 	bl	8008ce4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	687e      	ldr	r6, [r7, #4]
 80059ea:	466d      	mov	r5, sp
 80059ec:	f106 0410 	add.w	r4, r6, #16
 80059f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	1d33      	adds	r3, r6, #4
 80059fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059fc:	6838      	ldr	r0, [r7, #0]
 80059fe:	f003 f94b 	bl	8008c98 <USB_CoreInit>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0ce      	b.n	8005bb2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f003 f97c 	bl	8008d18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]
 8005a24:	e04c      	b.n	8005ac0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	3301      	adds	r3, #1
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	7bfa      	ldrb	r2, [r7, #15]
 8005a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	b298      	uxth	r0, r3
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	3336      	adds	r3, #54	@ 0x36
 8005a64:	4602      	mov	r2, r0
 8005a66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	3303      	adds	r3, #3
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3338      	adds	r3, #56	@ 0x38
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a92:	7bfa      	ldrb	r2, [r7, #15]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	333c      	adds	r3, #60	@ 0x3c
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3340      	adds	r3, #64	@ 0x40
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	3301      	adds	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3ad      	bcc.n	8005a26 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
 8005ace:	e044      	b.n	8005b5a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	440b      	add	r3, r1
 8005ade:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	440b      	add	r3, r1
 8005af4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005af8:	7bfa      	ldrb	r2, [r7, #15]
 8005afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	440b      	add	r3, r1
 8005b0a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	3301      	adds	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d3b5      	bcc.n	8005ad0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	687e      	ldr	r6, [r7, #4]
 8005b6c:	466d      	mov	r5, sp
 8005b6e:	f106 0410 	add.w	r4, r6, #16
 8005b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	1d33      	adds	r3, r6, #4
 8005b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7e:	6838      	ldr	r0, [r7, #0]
 8005b80:	f003 f8d6 	bl	8008d30 <USB_DevInit>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e00d      	b.n	8005bb2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f005 faf7 	bl	800b19e <USB_DevDisconnect>

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_PCD_Start+0x16>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e016      	b.n	8005bfe <HAL_PCD_Start+0x44>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f003 f86b 	bl	8008cb8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005be2:	2101      	movs	r1, #1
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f007 fb70 	bl	800d2ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 facb 	bl	800b18a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f005 facd 	bl	800b1b2 <USB_ReadInterrupts>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c22:	d102      	bne.n	8005c2a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb5f 	bl	80062e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f005 fabf 	bl	800b1b2 <USB_ReadInterrupts>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c3e:	d112      	bne.n	8005c66 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c52:	b292      	uxth	r2, r2
 8005c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f007 f93e 	bl	800ceda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f923 	bl	8005eac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f005 faa1 	bl	800b1b2 <USB_ReadInterrupts>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c7a:	d10b      	bne.n	8005c94 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f005 fa8a 	bl	800b1b2 <USB_ReadInterrupts>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cbc:	b292      	uxth	r2, r2
 8005cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f005 fa73 	bl	800b1b2 <USB_ReadInterrupts>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd6:	d126      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	b292      	uxth	r2, r2
 8005cec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0208 	bic.w	r2, r2, #8
 8005d02:	b292      	uxth	r2, r2
 8005d04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f007 f91f 	bl	800cf4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d20:	b292      	uxth	r2, r2
 8005d22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f005 fa41 	bl	800b1b2 <USB_ReadInterrupts>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3a:	f040 8082 	bne.w	8005e42 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e010      	b.n	8005d66 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	7ffb      	ldrb	r3, [r7, #31]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	7ffb      	ldrb	r3, [r7, #31]
 8005d52:	8812      	ldrh	r2, [r2, #0]
 8005d54:	b292      	uxth	r2, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	3320      	adds	r3, #32
 8005d5a:	443b      	add	r3, r7
 8005d5c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005d60:	7ffb      	ldrb	r3, [r7, #31]
 8005d62:	3301      	adds	r3, #1
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b07      	cmp	r3, #7
 8005d6a:	d9eb      	bls.n	8005d44 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	b292      	uxth	r2, r2
 8005d98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005d9c:	bf00      	nop
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f6      	beq.n	8005d9e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e00f      	b.n	8005dee <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	7ffa      	ldrb	r2, [r7, #31]
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	440a      	add	r2, r1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	3320      	adds	r3, #32
 8005de0:	443b      	add	r3, r7
 8005de2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005de6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005de8:	7ffb      	ldrb	r3, [r7, #31]
 8005dea:	3301      	adds	r3, #1
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	7ffb      	ldrb	r3, [r7, #31]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d9ec      	bls.n	8005dce <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	b292      	uxth	r2, r2
 8005e08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e1e:	b292      	uxth	r2, r2
 8005e20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0204 	orr.w	r2, r2, #4
 8005e36:	b292      	uxth	r2, r2
 8005e38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f007 f86b 	bl	800cf18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f005 f9b3 	bl	800b1b2 <USB_ReadInterrupts>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e56:	d10e      	bne.n	8005e76 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e6a:	b292      	uxth	r2, r2
 8005e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f007 f824 	bl	800cebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f005 f999 	bl	800b1b2 <USB_ReadInterrupts>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_PCD_SetAddress+0x1a>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e013      	b.n	8005eee <HAL_PCD_SetAddress+0x42>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f005 f940 	bl	800b164 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	461a      	mov	r2, r3
 8005f04:	4603      	mov	r3, r0
 8005f06:	70fb      	strb	r3, [r7, #3]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	803b      	strh	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da0e      	bge.n	8005f3a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	705a      	strb	r2, [r3, #1]
 8005f38:	e00e      	b.n	8005f58 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 0207 	and.w	r2, r3, #7
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f64:	883a      	ldrh	r2, [r7, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	78ba      	ldrb	r2, [r7, #2]
 8005f6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f82:	78bb      	ldrb	r3, [r7, #2]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d102      	bne.n	8005f8e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_PCD_EP_Open+0xa6>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e00e      	b.n	8005fba <HAL_PCD_EP_Open+0xc4>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68f9      	ldr	r1, [r7, #12]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f002 fee0 	bl	8008d70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da0e      	bge.n	8005ff4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	705a      	strb	r2, [r3, #1]
 8005ff2:	e00e      	b.n	8006012 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_PCD_EP_Close+0x6a>
 8006028:	2302      	movs	r3, #2
 800602a:	e00e      	b.n	800604a <HAL_PCD_EP_Close+0x88>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	4618      	mov	r0, r3
 800603c:	f003 fa02 	bl	8009444 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	460b      	mov	r3, r1
 8006060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006062:	7afb      	ldrb	r3, [r7, #11]
 8006064:	f003 0207 	and.w	r2, r3, #7
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2200      	movs	r2, #0
 800608a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006092:	7afb      	ldrb	r3, [r7, #11]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	b2da      	uxtb	r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6979      	ldr	r1, [r7, #20]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f003 fbb4 	bl	800981c <USB_EPStartXfer>
 80060b4:	e005      	b.n	80060c2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 fbad 	bl	800981c <USB_EPStartXfer>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 0207 	and.w	r2, r3, #7
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b086      	sub	sp, #24
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	460b      	mov	r3, r1
 8006108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2201      	movs	r2, #1
 8006144:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	b2da      	uxtb	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	4618      	mov	r0, r3
 8006164:	f003 fb5a 	bl	800981c <USB_EPStartXfer>
 8006168:	e005      	b.n	8006176 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6979      	ldr	r1, [r7, #20]
 8006170:	4618      	mov	r0, r3
 8006172:	f003 fb53 	bl	800981c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 0207 	and.w	r2, r3, #7
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d901      	bls.n	800619e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e04c      	b.n	8006238 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800619e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da0e      	bge.n	80061c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	705a      	strb	r2, [r3, #1]
 80061c2:	e00c      	b.n	80061de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_PCD_EP_SetStall+0x7e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01c      	b.n	8006238 <HAL_PCD_EP_SetStall+0xb8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	4618      	mov	r0, r3
 800620e:	f004 feac 	bl	800af6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	2b00      	cmp	r3, #0
 800621a:	d108      	bne.n	800622e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f004 ffd1 	bl	800b1d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d901      	bls.n	800625e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e040      	b.n	80062e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800625e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da0e      	bge.n	8006284 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	705a      	strb	r2, [r3, #1]
 8006282:	e00e      	b.n	80062a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 0207 	and.w	r2, r3, #7
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_PCD_EP_ClrStall+0x82>
 80062be:	2302      	movs	r3, #2
 80062c0:	e00e      	b.n	80062e0 <HAL_PCD_EP_ClrStall+0xa0>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f004 fe9a 	bl	800b00a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	@ 0x38
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80062f0:	e2de      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80062fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8006308:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8157 	bne.w	80065c0 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006312:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d151      	bne.n	80063c0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	81fb      	strh	r3, [r7, #14]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	89fb      	ldrh	r3, [r7, #14]
 8006334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3328      	adds	r3, #40	@ 0x28
 8006344:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	3302      	adds	r3, #2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	441a      	add	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006380:	2100      	movs	r1, #0
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f006 fd81 	bl	800ce8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 828d 	beq.w	80068b0 <PCD_EP_ISR_Handler+0x5c8>
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 8288 	bne.w	80068b0 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80063be:	e277      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80063d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d034      	beq.n	8006444 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	3306      	adds	r3, #6
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006418:	b29b      	uxth	r3, r3
 800641a:	f004 ff28 	bl	800b26e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29a      	uxth	r2, r3
 8006426:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800642a:	4013      	ands	r3, r2
 800642c:	823b      	strh	r3, [r7, #16]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	8a3a      	ldrh	r2, [r7, #16]
 8006434:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006438:	b292      	uxth	r2, r2
 800643a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f006 fcf7 	bl	800ce30 <HAL_PCD_SetupStageCallback>
 8006442:	e235      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006444:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006448:	2b00      	cmp	r3, #0
 800644a:	f280 8231 	bge.w	80068b0 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800645a:	4013      	ands	r3, r2
 800645c:	83bb      	strh	r3, [r7, #28]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	8bba      	ldrh	r2, [r7, #28]
 8006464:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006468:	b292      	uxth	r2, r2
 800646a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	4413      	add	r3, r2
 8006480:	3306      	adds	r3, #6
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d019      	beq.n	80064d4 <PCD_EP_ISR_Handler+0x1ec>
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	6959      	ldr	r1, [r3, #20]
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f004 fed8 	bl	800b26e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	441a      	add	r2, r3
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80064cc:	2100      	movs	r1, #0
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f006 fcc0 	bl	800ce54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d112      	bne.n	8006522 <PCD_EP_ISR_Handler+0x23a>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006506:	b29a      	uxth	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e02f      	b.n	8006582 <PCD_EP_ISR_Handler+0x29a>
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b3e      	cmp	r3, #62	@ 0x3e
 8006528:	d813      	bhi.n	8006552 <PCD_EP_ISR_Handler+0x26a>
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	633b      	str	r3, [r7, #48]	@ 0x30
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <PCD_EP_ISR_Handler+0x25c>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	3301      	adds	r3, #1
 8006542:	633b      	str	r3, [r7, #48]	@ 0x30
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29a      	uxth	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e017      	b.n	8006582 <PCD_EP_ISR_Handler+0x29a>
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <PCD_EP_ISR_Handler+0x284>
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	3b01      	subs	r3, #1
 800656a:	633b      	str	r3, [r7, #48]	@ 0x30
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	827b      	strh	r3, [r7, #18]
 8006594:	8a7b      	ldrh	r3, [r7, #18]
 8006596:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800659a:	827b      	strh	r3, [r7, #18]
 800659c:	8a7b      	ldrh	r3, [r7, #18]
 800659e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065a2:	827b      	strh	r3, [r7, #18]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	8a7b      	ldrh	r3, [r7, #18]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
 80065be:	e177      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f280 80ea 	bge.w	80067b0 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80065f2:	4013      	ands	r3, r2
 80065f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800660a:	b292      	uxth	r2, r2
 800660c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800660e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d122      	bne.n	8006672 <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006634:	b29b      	uxth	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4413      	add	r3, r2
 8006640:	3306      	adds	r3, #6
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006654:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8006656:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8087 	beq.w	800676c <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	6959      	ldr	r1, [r3, #20]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	88da      	ldrh	r2, [r3, #6]
 800666a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800666c:	f004 fdff 	bl	800b26e <USB_ReadPMA>
 8006670:	e07c      	b.n	800676c <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	78db      	ldrb	r3, [r3, #3]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d108      	bne.n	800668c <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800667a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800667c:	461a      	mov	r2, r3
 800667e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f923 	bl	80068cc <HAL_PCD_EP_DB_Receive>
 8006686:	4603      	mov	r3, r0
 8006688:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800668a:	e06f      	b.n	800676c <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d021      	beq.n	800672a <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	3302      	adds	r3, #2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670e:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02a      	beq.n	800676c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	6959      	ldr	r1, [r3, #20]
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	891a      	ldrh	r2, [r3, #8]
 8006722:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006724:	f004 fda3 	bl	800b26e <USB_ReadPMA>
 8006728:	e020      	b.n	800676c <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	3306      	adds	r3, #6
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006752:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006754:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	6959      	ldr	r1, [r3, #20]
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	895a      	ldrh	r2, [r3, #10]
 8006766:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006768:	f004 fd81 	bl	800b26e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006772:	441a      	add	r2, r3
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800677e:	441a      	add	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <PCD_EP_ISR_Handler+0x4ae>
 800678c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	d206      	bcs.n	80067a4 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f006 fb59 	bl	800ce54 <HAL_PCD_DataOutStageCallback>
 80067a2:	e005      	b.n	80067b0 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f003 f836 	bl	800981c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80067b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d07a      	beq.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80067ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80067e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e8:	843b      	strh	r3, [r7, #32]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	8c3b      	ldrh	r3, [r7, #32]
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	78db      	ldrb	r3, [r3, #3]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d108      	bne.n	8006820 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006812:	2b02      	cmp	r3, #2
 8006814:	d146      	bne.n	80068a4 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006816:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d141      	bne.n	80068a4 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	3302      	adds	r3, #2
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006848:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	429a      	cmp	r2, r3
 8006852:	d906      	bls.n	8006862 <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	8bfb      	ldrh	r3, [r7, #30]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	619a      	str	r2, [r3, #24]
 8006860:	e002      	b.n	8006868 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	2200      	movs	r2, #0
 8006866:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f006 fb07 	bl	800ce8a <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 800687c:	e018      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	8bfb      	ldrh	r3, [r7, #30]
 8006884:	441a      	add	r2, r3
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	441a      	add	r2, r3
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800689c:	4618      	mov	r0, r3
 800689e:	f002 ffbd 	bl	800981c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80068a2:	e005      	b.n	80068b0 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80068a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068a6:	461a      	mov	r2, r3
 80068a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f91b 	bl	8006ae6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f6ff ad18 	blt.w	80062f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3738      	adds	r7, #56	@ 0x38
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d07e      	beq.n	80069e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4413      	add	r3, r2
 80068f8:	3302      	adds	r3, #2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800690c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	8b7b      	ldrh	r3, [r7, #26]
 8006914:	429a      	cmp	r2, r3
 8006916:	d306      	bcc.n	8006926 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	8b7b      	ldrh	r3, [r7, #26]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	619a      	str	r2, [r3, #24]
 8006924:	e002      	b.n	800692c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d123      	bne.n	800697c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800694a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694e:	833b      	strh	r3, [r7, #24]
 8006950:	8b3b      	ldrh	r3, [r7, #24]
 8006952:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006956:	833b      	strh	r3, [r7, #24]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	8b3b      	ldrh	r3, [r7, #24]
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01f      	beq.n	80069c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	82fb      	strh	r3, [r7, #22]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	8afb      	ldrh	r3, [r7, #22]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8087 	beq.w	8006adc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6959      	ldr	r1, [r3, #20]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	891a      	ldrh	r2, [r3, #8]
 80069da:	8b7b      	ldrh	r3, [r7, #26]
 80069dc:	f004 fc47 	bl	800b26e <USB_ReadPMA>
 80069e0:	e07c      	b.n	8006adc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4413      	add	r3, r2
 80069f6:	3306      	adds	r3, #6
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	8b7b      	ldrh	r3, [r7, #26]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d306      	bcc.n	8006a24 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	619a      	str	r2, [r3, #24]
 8006a22:	e002      	b.n	8006a2a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d123      	bne.n	8006a7a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4c:	83fb      	strh	r3, [r7, #30]
 8006a4e:	8bfb      	ldrh	r3, [r7, #30]
 8006a50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a54:	83fb      	strh	r3, [r7, #30]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	8bfb      	ldrh	r3, [r7, #30]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d11f      	bne.n	8006ac4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9e:	83bb      	strh	r3, [r7, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	441a      	add	r2, r3
 8006aae:	8bbb      	ldrh	r3, [r7, #28]
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ac4:	8b7b      	ldrh	r3, [r7, #26]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6959      	ldr	r1, [r3, #20]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	895a      	ldrh	r2, [r3, #10]
 8006ad6:	8b7b      	ldrh	r3, [r7, #26]
 8006ad8:	f004 fbc9 	bl	800b26e <USB_ReadPMA>
    }
  }

  return count;
 8006adc:	8b7b      	ldrh	r3, [r7, #26]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b094      	sub	sp, #80	@ 0x50
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	4613      	mov	r3, r2
 8006af2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8138 	beq.w	8006d70 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	3302      	adds	r3, #2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b28:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d907      	bls.n	8006b48 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	619a      	str	r2, [r3, #24]
 8006b46:	e002      	b.n	8006b4e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d12c      	bne.n	8006bb0 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f006 f994 	bl	800ce8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 823a 	beq.w	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8afb      	ldrh	r3, [r7, #22]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e218      	b.n	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01f      	beq.n	8006bfa <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f040 81ee 	bne.w	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c0e:	441a      	add	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6a1a      	ldr	r2, [r3, #32]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d309      	bcc.n	8006c42 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	621a      	str	r2, [r3, #32]
 8006c40:	e015      	b.n	8006c6e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d107      	bne.n	8006c5a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006c4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c4e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c58:	e009      	b.n	8006c6e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d155      	bne.n	8006d22 <HAL_PCD_EP_DB_Transmit+0x23c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d112      	bne.n	8006cca <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e047      	b.n	8006d5a <HAL_PCD_EP_DB_Transmit+0x274>
 8006cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ccc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cce:	d811      	bhi.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_PCD_EP_DB_Transmit+0x200>
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	029b      	lsls	r3, r3, #10
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e032      	b.n	8006d5a <HAL_PCD_EP_DB_Transmit+0x274>
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x224>
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	3b01      	subs	r3, #1
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	029b      	lsls	r3, r3, #10
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	e01b      	b.n	8006d5a <HAL_PCD_EP_DB_Transmit+0x274>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d117      	bne.n	8006d5a <HAL_PCD_EP_DB_Transmit+0x274>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	4413      	add	r3, r2
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	011a      	lsls	r2, r3, #4
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6959      	ldr	r1, [r3, #20]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	891a      	ldrh	r2, [r3, #8]
 8006d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f004 fa3c 	bl	800b1e6 <USB_WritePMA>
 8006d6e:	e138      	b.n	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4413      	add	r3, r2
 8006d84:	3306      	adds	r3, #6
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d98:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d307      	bcc.n	8006db8 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	619a      	str	r2, [r3, #24]
 8006db6:	e002      	b.n	8006dbe <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d12e      	bne.n	8006e24 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f006 f85c 	bl	800ce8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8102 	bne.w	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8013      	strh	r3, [r2, #0]
 8006e22:	e0de      	b.n	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d11f      	bne.n	8006e6e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e48:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	f040 80b4 	bne.w	8006fe2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e82:	441a      	add	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e90:	441a      	add	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d309      	bcc.n	8006eb6 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	621a      	str	r2, [r3, #32]
 8006eb4:	e015      	b.n	8006ee2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006ebe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006ecc:	e009      	b.n	8006ee2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d155      	bne.n	8006f9c <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	4413      	add	r3, r2
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d112      	bne.n	8006f44 <HAL_PCD_EP_DB_Transmit+0x45e>
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e044      	b.n	8006fce <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f46:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f48:	d811      	bhi.n	8006f6e <HAL_PCD_EP_DB_Transmit+0x488>
 8006f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e02f      	b.n	8006fce <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x49e>
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f80:	3b01      	subs	r3, #1
 8006f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e018      	b.n	8006fce <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d114      	bne.n	8006fce <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb2:	4413      	add	r3, r2
 8006fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	011a      	lsls	r2, r3, #4
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6959      	ldr	r1, [r3, #20]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	895a      	ldrh	r2, [r3, #10]
 8006fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f004 f902 	bl	800b1e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffc:	82bb      	strh	r3, [r7, #20]
 8006ffe:	8abb      	ldrh	r3, [r7, #20]
 8007000:	f083 0310 	eor.w	r3, r3, #16
 8007004:	82bb      	strh	r3, [r7, #20]
 8007006:	8abb      	ldrh	r3, [r7, #20]
 8007008:	f083 0320 	eor.w	r3, r3, #32
 800700c:	82bb      	strh	r3, [r7, #20]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	441a      	add	r2, r3
 800701c:	8abb      	ldrh	r3, [r7, #20]
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3750      	adds	r7, #80	@ 0x50
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	4613      	mov	r3, r2
 800704c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800704e:	897b      	ldrh	r3, [r7, #10]
 8007050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800705a:	897b      	ldrh	r3, [r7, #10]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e009      	b.n	8007086 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007072:	897a      	ldrh	r2, [r7, #10]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	b29a      	uxth	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	80da      	strh	r2, [r3, #6]
 800709a:	e00b      	b.n	80070b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2201      	movs	r2, #1
 80070a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e272      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8087 	beq.w	80071ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070e0:	4b92      	ldr	r3, [pc, #584]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f003 030c 	and.w	r3, r3, #12
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d00c      	beq.n	8007106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070ec:	4b8f      	ldr	r3, [pc, #572]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 030c 	and.w	r3, r3, #12
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d112      	bne.n	800711e <HAL_RCC_OscConfig+0x5e>
 80070f8:	4b8c      	ldr	r3, [pc, #560]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007104:	d10b      	bne.n	800711e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007106:	4b89      	ldr	r3, [pc, #548]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d06c      	beq.n	80071ec <HAL_RCC_OscConfig+0x12c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d168      	bne.n	80071ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e24c      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007126:	d106      	bne.n	8007136 <HAL_RCC_OscConfig+0x76>
 8007128:	4b80      	ldr	r3, [pc, #512]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a7f      	ldr	r2, [pc, #508]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800712e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	e02e      	b.n	8007194 <HAL_RCC_OscConfig+0xd4>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10c      	bne.n	8007158 <HAL_RCC_OscConfig+0x98>
 800713e:	4b7b      	ldr	r3, [pc, #492]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a7a      	ldr	r2, [pc, #488]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	4b78      	ldr	r3, [pc, #480]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a77      	ldr	r2, [pc, #476]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e01d      	b.n	8007194 <HAL_RCC_OscConfig+0xd4>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007160:	d10c      	bne.n	800717c <HAL_RCC_OscConfig+0xbc>
 8007162:	4b72      	ldr	r3, [pc, #456]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a71      	ldr	r2, [pc, #452]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4b6f      	ldr	r3, [pc, #444]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6e      	ldr	r2, [pc, #440]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00b      	b.n	8007194 <HAL_RCC_OscConfig+0xd4>
 800717c:	4b6b      	ldr	r3, [pc, #428]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6a      	ldr	r2, [pc, #424]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	4b68      	ldr	r3, [pc, #416]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a67      	ldr	r2, [pc, #412]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 800718e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719c:	f7fd faa6 	bl	80046ec <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a4:	f7fd faa2 	bl	80046ec <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b64      	cmp	r3, #100	@ 0x64
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e200      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b6:	4b5d      	ldr	r3, [pc, #372]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0xe4>
 80071c2:	e014      	b.n	80071ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c4:	f7fd fa92 	bl	80046ec <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071cc:	f7fd fa8e 	bl	80046ec <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	@ 0x64
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e1ec      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071de:	4b53      	ldr	r3, [pc, #332]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0x10c>
 80071ea:	e000      	b.n	80071ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d063      	beq.n	80072c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071fa:	4b4c      	ldr	r3, [pc, #304]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007206:	4b49      	ldr	r3, [pc, #292]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b08      	cmp	r3, #8
 8007210:	d11c      	bne.n	800724c <HAL_RCC_OscConfig+0x18c>
 8007212:	4b46      	ldr	r3, [pc, #280]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d116      	bne.n	800724c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800721e:	4b43      	ldr	r3, [pc, #268]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_RCC_OscConfig+0x176>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e1c0      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007236:	4b3d      	ldr	r3, [pc, #244]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4939      	ldr	r1, [pc, #228]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800724a:	e03a      	b.n	80072c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007254:	4b36      	ldr	r3, [pc, #216]	@ (8007330 <HAL_RCC_OscConfig+0x270>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725a:	f7fd fa47 	bl	80046ec <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007262:	f7fd fa43 	bl	80046ec <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e1a1      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007274:	4b2d      	ldr	r3, [pc, #180]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007280:	4b2a      	ldr	r3, [pc, #168]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4927      	ldr	r1, [pc, #156]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 8007290:	4313      	orrs	r3, r2
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	e015      	b.n	80072c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007296:	4b26      	ldr	r3, [pc, #152]	@ (8007330 <HAL_RCC_OscConfig+0x270>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729c:	f7fd fa26 	bl	80046ec <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a4:	f7fd fa22 	bl	80046ec <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e180      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b6:	4b1d      	ldr	r3, [pc, #116]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d03a      	beq.n	8007344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d019      	beq.n	800730a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d6:	4b17      	ldr	r3, [pc, #92]	@ (8007334 <HAL_RCC_OscConfig+0x274>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072dc:	f7fd fa06 	bl	80046ec <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e4:	f7fd fa02 	bl	80046ec <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e160      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <HAL_RCC_OscConfig+0x26c>)
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007302:	2001      	movs	r0, #1
 8007304:	f000 fad8 	bl	80078b8 <RCC_Delay>
 8007308:	e01c      	b.n	8007344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCC_OscConfig+0x274>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007310:	f7fd f9ec 	bl	80046ec <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007316:	e00f      	b.n	8007338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007318:	f7fd f9e8 	bl	80046ec <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d908      	bls.n	8007338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e146      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000
 8007330:	42420000 	.word	0x42420000
 8007334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007338:	4b92      	ldr	r3, [pc, #584]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e9      	bne.n	8007318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80a6 	beq.w	800749e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007356:	4b8b      	ldr	r3, [pc, #556]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007362:	4b88      	ldr	r3, [pc, #544]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	4a87      	ldr	r2, [pc, #540]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800736c:	61d3      	str	r3, [r2, #28]
 800736e:	4b85      	ldr	r3, [pc, #532]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800737a:	2301      	movs	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737e:	4b82      	ldr	r3, [pc, #520]	@ (8007588 <HAL_RCC_OscConfig+0x4c8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d118      	bne.n	80073bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800738a:	4b7f      	ldr	r3, [pc, #508]	@ (8007588 <HAL_RCC_OscConfig+0x4c8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a7e      	ldr	r2, [pc, #504]	@ (8007588 <HAL_RCC_OscConfig+0x4c8>)
 8007390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007396:	f7fd f9a9 	bl	80046ec <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739c:	e008      	b.n	80073b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800739e:	f7fd f9a5 	bl	80046ec <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b64      	cmp	r3, #100	@ 0x64
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e103      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b0:	4b75      	ldr	r3, [pc, #468]	@ (8007588 <HAL_RCC_OscConfig+0x4c8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f0      	beq.n	800739e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d106      	bne.n	80073d2 <HAL_RCC_OscConfig+0x312>
 80073c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	4a6e      	ldr	r2, [pc, #440]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	6213      	str	r3, [r2, #32]
 80073d0:	e02d      	b.n	800742e <HAL_RCC_OscConfig+0x36e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10c      	bne.n	80073f4 <HAL_RCC_OscConfig+0x334>
 80073da:	4b6a      	ldr	r3, [pc, #424]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	4a69      	ldr	r2, [pc, #420]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	6213      	str	r3, [r2, #32]
 80073e6:	4b67      	ldr	r3, [pc, #412]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	4a66      	ldr	r2, [pc, #408]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	f023 0304 	bic.w	r3, r3, #4
 80073f0:	6213      	str	r3, [r2, #32]
 80073f2:	e01c      	b.n	800742e <HAL_RCC_OscConfig+0x36e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b05      	cmp	r3, #5
 80073fa:	d10c      	bne.n	8007416 <HAL_RCC_OscConfig+0x356>
 80073fc:	4b61      	ldr	r3, [pc, #388]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	4a60      	ldr	r2, [pc, #384]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007402:	f043 0304 	orr.w	r3, r3, #4
 8007406:	6213      	str	r3, [r2, #32]
 8007408:	4b5e      	ldr	r3, [pc, #376]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	4a5d      	ldr	r2, [pc, #372]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	6213      	str	r3, [r2, #32]
 8007414:	e00b      	b.n	800742e <HAL_RCC_OscConfig+0x36e>
 8007416:	4b5b      	ldr	r3, [pc, #364]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	4a5a      	ldr	r2, [pc, #360]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	6213      	str	r3, [r2, #32]
 8007422:	4b58      	ldr	r3, [pc, #352]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	4a57      	ldr	r2, [pc, #348]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007428:	f023 0304 	bic.w	r3, r3, #4
 800742c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d015      	beq.n	8007462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007436:	f7fd f959 	bl	80046ec <HAL_GetTick>
 800743a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743c:	e00a      	b.n	8007454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743e:	f7fd f955 	bl	80046ec <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e0b1      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007454:	4b4b      	ldr	r3, [pc, #300]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0ee      	beq.n	800743e <HAL_RCC_OscConfig+0x37e>
 8007460:	e014      	b.n	800748c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007462:	f7fd f943 	bl	80046ec <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007468:	e00a      	b.n	8007480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fd f93f 	bl	80046ec <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e09b      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007480:	4b40      	ldr	r3, [pc, #256]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ee      	bne.n	800746a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007492:	4b3c      	ldr	r3, [pc, #240]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4a3b      	ldr	r2, [pc, #236]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800749c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8087 	beq.w	80075b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074a8:	4b36      	ldr	r3, [pc, #216]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 030c 	and.w	r3, r3, #12
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d061      	beq.n	8007578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d146      	bne.n	800754a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074bc:	4b33      	ldr	r3, [pc, #204]	@ (800758c <HAL_RCC_OscConfig+0x4cc>)
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c2:	f7fd f913 	bl	80046ec <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074c8:	e008      	b.n	80074dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ca:	f7fd f90f 	bl	80046ec <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e06d      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074dc:	4b29      	ldr	r3, [pc, #164]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f0:	d108      	bne.n	8007504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074f2:	4b24      	ldr	r3, [pc, #144]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	4921      	ldr	r1, [pc, #132]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007504:	4b1f      	ldr	r3, [pc, #124]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a19      	ldr	r1, [r3, #32]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	430b      	orrs	r3, r1
 8007516:	491b      	ldr	r1, [pc, #108]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 8007518:	4313      	orrs	r3, r2
 800751a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800751c:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <HAL_RCC_OscConfig+0x4cc>)
 800751e:	2201      	movs	r2, #1
 8007520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007522:	f7fd f8e3 	bl	80046ec <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800752a:	f7fd f8df 	bl	80046ec <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e03d      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800753c:	4b11      	ldr	r3, [pc, #68]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0x46a>
 8007548:	e035      	b.n	80075b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800754a:	4b10      	ldr	r3, [pc, #64]	@ (800758c <HAL_RCC_OscConfig+0x4cc>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007550:	f7fd f8cc 	bl	80046ec <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007558:	f7fd f8c8 	bl	80046ec <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e026      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800756a:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <HAL_RCC_OscConfig+0x4c4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f0      	bne.n	8007558 <HAL_RCC_OscConfig+0x498>
 8007576:	e01e      	b.n	80075b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e019      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
 8007584:	40021000 	.word	0x40021000
 8007588:	40007000 	.word	0x40007000
 800758c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007590:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <HAL_RCC_OscConfig+0x500>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d106      	bne.n	80075b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40021000 	.word	0x40021000

080075c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0d0      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d8:	4b6a      	ldr	r3, [pc, #424]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d910      	bls.n	8007608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b67      	ldr	r3, [pc, #412]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 0207 	bic.w	r2, r3, #7
 80075ee:	4965      	ldr	r1, [pc, #404]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f6:	4b63      	ldr	r3, [pc, #396]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0b8      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d020      	beq.n	8007656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007620:	4b59      	ldr	r3, [pc, #356]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a58      	ldr	r2, [pc, #352]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800762a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007638:	4b53      	ldr	r3, [pc, #332]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a52      	ldr	r2, [pc, #328]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800763e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007644:	4b50      	ldr	r3, [pc, #320]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	494d      	ldr	r1, [pc, #308]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007652:	4313      	orrs	r3, r2
 8007654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d040      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d107      	bne.n	800767a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	4b47      	ldr	r3, [pc, #284]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d115      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e07f      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d107      	bne.n	8007692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007682:	4b41      	ldr	r3, [pc, #260]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e073      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007692:	4b3d      	ldr	r3, [pc, #244]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e06b      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076a2:	4b39      	ldr	r3, [pc, #228]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f023 0203 	bic.w	r2, r3, #3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4936      	ldr	r1, [pc, #216]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076b4:	f7fd f81a 	bl	80046ec <HAL_GetTick>
 80076b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ba:	e00a      	b.n	80076d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076bc:	f7fd f816 	bl	80046ec <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e053      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f003 020c 	and.w	r2, r3, #12
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d1eb      	bne.n	80076bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076e4:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d210      	bcs.n	8007714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 0207 	bic.w	r2, r3, #7
 80076fa:	4922      	ldr	r1, [pc, #136]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <HAL_RCC_ClockConfig+0x1c0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e032      	b.n	800777a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007720:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4916      	ldr	r1, [pc, #88]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800772e:	4313      	orrs	r3, r2
 8007730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800773e:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	490e      	ldr	r1, [pc, #56]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800774e:	4313      	orrs	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007752:	f000 f821 	bl	8007798 <HAL_RCC_GetSysClockFreq>
 8007756:	4602      	mov	r2, r0
 8007758:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <HAL_RCC_ClockConfig+0x1c4>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	490a      	ldr	r1, [pc, #40]	@ (800778c <HAL_RCC_ClockConfig+0x1c8>)
 8007764:	5ccb      	ldrb	r3, [r1, r3]
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	4a09      	ldr	r2, [pc, #36]	@ (8007790 <HAL_RCC_ClockConfig+0x1cc>)
 800776c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <HAL_RCC_ClockConfig+0x1d0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f7fc ff78 	bl	8004668 <HAL_InitTick>

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40022000 	.word	0x40022000
 8007788:	40021000 	.word	0x40021000
 800778c:	0800e788 	.word	0x0800e788
 8007790:	20000028 	.word	0x20000028
 8007794:	2000002c 	.word	0x2000002c

08007798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007798:	b490      	push	{r4, r7}
 800779a:	b08a      	sub	sp, #40	@ 0x28
 800779c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800779e:	4b29      	ldr	r3, [pc, #164]	@ (8007844 <HAL_RCC_GetSysClockFreq+0xac>)
 80077a0:	1d3c      	adds	r4, r7, #4
 80077a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80077a8:	f240 2301 	movw	r3, #513	@ 0x201
 80077ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	2300      	movs	r3, #0
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80077c2:	4b21      	ldr	r3, [pc, #132]	@ (8007848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d002      	beq.n	80077d8 <HAL_RCC_GetSysClockFreq+0x40>
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d003      	beq.n	80077de <HAL_RCC_GetSysClockFreq+0x46>
 80077d6:	e02b      	b.n	8007830 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077d8:	4b1c      	ldr	r3, [pc, #112]	@ (800784c <HAL_RCC_GetSysClockFreq+0xb4>)
 80077da:	623b      	str	r3, [r7, #32]
      break;
 80077dc:	e02b      	b.n	8007836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	0c9b      	lsrs	r3, r3, #18
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	3328      	adds	r3, #40	@ 0x28
 80077e8:	443b      	add	r3, r7
 80077ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80077ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d012      	beq.n	8007820 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077fa:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <HAL_RCC_GetSysClockFreq+0xb0>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	0c5b      	lsrs	r3, r3, #17
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	3328      	adds	r3, #40	@ 0x28
 8007806:	443b      	add	r3, r7
 8007808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800780c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4a0e      	ldr	r2, [pc, #56]	@ (800784c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007812:	fb03 f202 	mul.w	r2, r3, r2
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
 800781e:	e004      	b.n	800782a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4a0b      	ldr	r2, [pc, #44]	@ (8007850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	623b      	str	r3, [r7, #32]
      break;
 800782e:	e002      	b.n	8007836 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007832:	623b      	str	r3, [r7, #32]
      break;
 8007834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007836:	6a3b      	ldr	r3, [r7, #32]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	@ 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bc90      	pop	{r4, r7}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	0800e720 	.word	0x0800e720
 8007848:	40021000 	.word	0x40021000
 800784c:	007a1200 	.word	0x007a1200
 8007850:	003d0900 	.word	0x003d0900

08007854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007858:	4b02      	ldr	r3, [pc, #8]	@ (8007864 <HAL_RCC_GetHCLKFreq+0x10>)
 800785a:	681b      	ldr	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	20000028 	.word	0x20000028

08007868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800786c:	f7ff fff2 	bl	8007854 <HAL_RCC_GetHCLKFreq>
 8007870:	4602      	mov	r2, r0
 8007872:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	4903      	ldr	r1, [pc, #12]	@ (800788c <HAL_RCC_GetPCLK1Freq+0x24>)
 800787e:	5ccb      	ldrb	r3, [r1, r3]
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007884:	4618      	mov	r0, r3
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40021000 	.word	0x40021000
 800788c:	0800e798 	.word	0x0800e798

08007890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007894:	f7ff ffde 	bl	8007854 <HAL_RCC_GetHCLKFreq>
 8007898:	4602      	mov	r2, r0
 800789a:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	0adb      	lsrs	r3, r3, #11
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	4903      	ldr	r1, [pc, #12]	@ (80078b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078a6:	5ccb      	ldrb	r3, [r1, r3]
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40021000 	.word	0x40021000
 80078b4:	0800e798 	.word	0x0800e798

080078b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078c0:	4b0a      	ldr	r3, [pc, #40]	@ (80078ec <RCC_Delay+0x34>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	@ (80078f0 <RCC_Delay+0x38>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0a5b      	lsrs	r3, r3, #9
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80078d4:	bf00      	nop
  }
  while (Delay --);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1e5a      	subs	r2, r3, #1
 80078da:	60fa      	str	r2, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f9      	bne.n	80078d4 <RCC_Delay+0x1c>
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr
 80078ec:	20000028 	.word	0x20000028
 80078f0:	10624dd3 	.word	0x10624dd3

080078f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d07d      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007910:	2300      	movs	r3, #0
 8007912:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007914:	4b4f      	ldr	r3, [pc, #316]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007920:	4b4c      	ldr	r3, [pc, #304]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	4a4b      	ldr	r2, [pc, #300]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792a:	61d3      	str	r3, [r2, #28]
 800792c:	4b49      	ldr	r3, [pc, #292]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793c:	4b46      	ldr	r3, [pc, #280]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d118      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007948:	4b43      	ldr	r3, [pc, #268]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a42      	ldr	r2, [pc, #264]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800794e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007954:	f7fc feca 	bl	80046ec <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800795a:	e008      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800795c:	f7fc fec6 	bl	80046ec <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b64      	cmp	r3, #100	@ 0x64
 8007968:	d901      	bls.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e06d      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800796e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800797a:	4b36      	ldr	r3, [pc, #216]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007982:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02e      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	429a      	cmp	r2, r3
 8007996:	d027      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007998:	4b2e      	ldr	r3, [pc, #184]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079a2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079a8:	4b2c      	ldr	r3, [pc, #176]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079ae:	4a29      	ldr	r2, [pc, #164]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d014      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079be:	f7fc fe95 	bl	80046ec <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c4:	e00a      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c6:	f7fc fe91 	bl	80046ec <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d901      	bls.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e036      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ee      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4917      	ldr	r1, [pc, #92]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d105      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a00:	4b14      	ldr	r3, [pc, #80]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	4a13      	ldr	r2, [pc, #76]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	490b      	ldr	r1, [pc, #44]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0310 	and.w	r3, r3, #16
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a36:	4b07      	ldr	r3, [pc, #28]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	4904      	ldr	r1, [pc, #16]	@ (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40007000 	.word	0x40007000
 8007a5c:	42420440 	.word	0x42420440

08007a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e076      	b.n	8007b60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d108      	bne.n	8007a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a82:	d009      	beq.n	8007a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	61da      	str	r2, [r3, #28]
 8007a8a:	e005      	b.n	8007a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fc fc50 	bl	8004358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	ea42 0103 	orr.w	r1, r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	0c1a      	lsrs	r2, r3, #16
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f002 0204 	and.w	r2, r2, #4
 8007b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	@ 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b76:	2301      	movs	r3, #1
 8007b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_SPI_TransmitReceive+0x26>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e18a      	b.n	8007ea4 <HAL_SPI_TransmitReceive+0x33c>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b96:	f7fc fda9 	bl	80046ec <HAL_GetTick>
 8007b9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d00f      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x70>
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bbe:	d107      	bne.n	8007bd0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <HAL_SPI_TransmitReceive+0x68>
 8007bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d003      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007bd6:	e15b      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x82>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x82>
 8007be4:	887b      	ldrh	r3, [r7, #2]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007bf0:	e14e      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d003      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2205      	movs	r2, #5
 8007c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	887a      	ldrh	r2, [r7, #2]
 8007c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	887a      	ldrh	r2, [r7, #2]
 8007c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	887a      	ldrh	r2, [r7, #2]
 8007c28:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c46:	2b40      	cmp	r3, #64	@ 0x40
 8007c48:	d007      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c62:	d178      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x10a>
 8007c6c:	8b7b      	ldrh	r3, [r7, #26]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d166      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	881a      	ldrh	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c82:	1c9a      	adds	r2, r3, #2
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c96:	e053      	b.n	8007d40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d11b      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x176>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d016      	beq.n	8007cde <HAL_SPI_TransmitReceive+0x176>
 8007cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d113      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	881a      	ldrh	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d119      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x1b8>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d014      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	b292      	uxth	r2, r2
 8007d02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d08:	1c9a      	adds	r2, r3, #2
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d20:	f7fc fce4 	bl	80046ec <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d807      	bhi.n	8007d40 <HAL_SPI_TransmitReceive+0x1d8>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d003      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007d3e:	e0a7      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1a6      	bne.n	8007c98 <HAL_SPI_TransmitReceive+0x130>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1a1      	bne.n	8007c98 <HAL_SPI_TransmitReceive+0x130>
 8007d54:	e07c      	b.n	8007e50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_SPI_TransmitReceive+0x1fc>
 8007d5e:	8b7b      	ldrh	r3, [r7, #26]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d16b      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d8a:	e057      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d11c      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x26c>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d017      	beq.n	8007dd4 <HAL_SPI_TransmitReceive+0x26c>
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d114      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d119      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x2ae>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d014      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e12:	2301      	movs	r3, #1
 8007e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e16:	f7fc fc69 	bl	80046ec <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d803      	bhi.n	8007e2e <HAL_SPI_TransmitReceive+0x2c6>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d102      	bne.n	8007e34 <HAL_SPI_TransmitReceive+0x2cc>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007e3a:	e029      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1a2      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x224>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d19d      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f8b1 	bl	8007fbc <SPI_EndRxTxTransaction>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d006      	beq.n	8007e6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007e6c:	e010      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	e000      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3730      	adds	r7, #48	@ 0x30
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ebc:	f7fc fc16 	bl	80046ec <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4413      	add	r3, r2
 8007eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ecc:	f7fc fc0e 	bl	80046ec <HAL_GetTick>
 8007ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ed2:	4b39      	ldr	r3, [pc, #228]	@ (8007fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	015b      	lsls	r3, r3, #5
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ee2:	e054      	b.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eea:	d050      	beq.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eec:	f7fc fbfe 	bl	80046ec <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d902      	bls.n	8007f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d13d      	bne.n	8007f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f1a:	d111      	bne.n	8007f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f24:	d004      	beq.n	8007f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2e:	d107      	bne.n	8007f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f48:	d10f      	bne.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e017      	b.n	8007fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4013      	ands	r3, r2
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2301      	moveq	r3, #1
 8007fa0:	2300      	movne	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d19b      	bne.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000028 	.word	0x20000028

08007fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	@ 0x80
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff ff6a 	bl	8007eac <SPI_WaitFlagStateUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d007      	beq.n	8007fee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe2:	f043 0220 	orr.w	r2, r3, #32
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e000      	b.n	8007ff0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e041      	b.n	800808e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fc f9e4 	bl	80043ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 fa70 	bl	800851c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d001      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e03a      	b.n	8008126 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <HAL_TIM_Base_Start_IT+0x98>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_TIM_Base_Start_IT+0x58>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080da:	d009      	beq.n	80080f0 <HAL_TIM_Base_Start_IT+0x58>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a14      	ldr	r2, [pc, #80]	@ (8008134 <HAL_TIM_Base_Start_IT+0x9c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_TIM_Base_Start_IT+0x58>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a13      	ldr	r2, [pc, #76]	@ (8008138 <HAL_TIM_Base_Start_IT+0xa0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d111      	bne.n	8008114 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b06      	cmp	r3, #6
 8008100:	d010      	beq.n	8008124 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0201 	orr.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	e007      	b.n	8008124 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800

0800813c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9b1 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9a4 	bl	80084d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f9b3 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d122      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d11b      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0204 	mvn.w	r2, #4
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f987 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f97a 	bl	80084d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f989 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0208 	mvn.w	r2, #8
 8008210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2204      	movs	r2, #4
 8008216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f95d 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f950 	bl	80084d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f95f 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0210 	mvn.w	r2, #16
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2208      	movs	r2, #8
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f933 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f926 	bl	80084d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f935 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0201 	mvn.w	r2, #1
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7f8 fd40 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ca:	2b80      	cmp	r3, #128	@ 0x80
 80082cc:	d10e      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d8:	2b80      	cmp	r3, #128	@ 0x80
 80082da:	d107      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa77 	bl	80087da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f6:	2b40      	cmp	r3, #64	@ 0x40
 80082f8:	d10e      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	d107      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f8f9 	bl	800850a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b20      	cmp	r3, #32
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0220 	mvn.w	r2, #32
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa42 	bl	80087c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_TIM_ConfigClockSource+0x18>
 8008360:	2302      	movs	r3, #2
 8008362:	e0b3      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x180>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800838a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800839c:	d03e      	beq.n	800841c <HAL_TIM_ConfigClockSource+0xd0>
 800839e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a2:	f200 8087 	bhi.w	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083aa:	f000 8085 	beq.w	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	d87f      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083b4:	2b70      	cmp	r3, #112	@ 0x70
 80083b6:	d01a      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0xa2>
 80083b8:	2b70      	cmp	r3, #112	@ 0x70
 80083ba:	d87b      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083bc:	2b60      	cmp	r3, #96	@ 0x60
 80083be:	d050      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x116>
 80083c0:	2b60      	cmp	r3, #96	@ 0x60
 80083c2:	d877      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083c4:	2b50      	cmp	r3, #80	@ 0x50
 80083c6:	d03c      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0xf6>
 80083c8:	2b50      	cmp	r3, #80	@ 0x50
 80083ca:	d873      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083cc:	2b40      	cmp	r3, #64	@ 0x40
 80083ce:	d058      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x136>
 80083d0:	2b40      	cmp	r3, #64	@ 0x40
 80083d2:	d86f      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083d4:	2b30      	cmp	r3, #48	@ 0x30
 80083d6:	d064      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x156>
 80083d8:	2b30      	cmp	r3, #48	@ 0x30
 80083da:	d86b      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d060      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x156>
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d867      	bhi.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d05c      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x156>
 80083e8:	2b10      	cmp	r3, #16
 80083ea:	d05a      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083ec:	e062      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6899      	ldr	r1, [r3, #8]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f000 f966 	bl	80086ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008410:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	609a      	str	r2, [r3, #8]
      break;
 800841a:	e04e      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6899      	ldr	r1, [r3, #8]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f000 f94f 	bl	80086ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800843e:	609a      	str	r2, [r3, #8]
      break;
 8008440:	e03b      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6859      	ldr	r1, [r3, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	461a      	mov	r2, r3
 8008450:	f000 f8c6 	bl	80085e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2150      	movs	r1, #80	@ 0x50
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f91d 	bl	800869a <TIM_ITRx_SetConfig>
      break;
 8008460:	e02b      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	6859      	ldr	r1, [r3, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	461a      	mov	r2, r3
 8008470:	f000 f8e4 	bl	800863c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2160      	movs	r1, #96	@ 0x60
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f90d 	bl	800869a <TIM_ITRx_SetConfig>
      break;
 8008480:	e01b      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6859      	ldr	r1, [r3, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	461a      	mov	r2, r3
 8008490:	f000 f8a6 	bl	80085e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2140      	movs	r1, #64	@ 0x40
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f8fd 	bl	800869a <TIM_ITRx_SetConfig>
      break;
 80084a0:	e00b      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f000 f8f4 	bl	800869a <TIM_ITRx_SetConfig>
        break;
 80084b2:	e002      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr

0800851c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a29      	ldr	r2, [pc, #164]	@ (80085d4 <TIM_Base_SetConfig+0xb8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_Base_SetConfig+0x30>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d007      	beq.n	800854c <TIM_Base_SetConfig+0x30>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a26      	ldr	r2, [pc, #152]	@ (80085d8 <TIM_Base_SetConfig+0xbc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_Base_SetConfig+0x30>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a25      	ldr	r2, [pc, #148]	@ (80085dc <TIM_Base_SetConfig+0xc0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d108      	bne.n	800855e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a1c      	ldr	r2, [pc, #112]	@ (80085d4 <TIM_Base_SetConfig+0xb8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00b      	beq.n	800857e <TIM_Base_SetConfig+0x62>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800856c:	d007      	beq.n	800857e <TIM_Base_SetConfig+0x62>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a19      	ldr	r2, [pc, #100]	@ (80085d8 <TIM_Base_SetConfig+0xbc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d003      	beq.n	800857e <TIM_Base_SetConfig+0x62>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a18      	ldr	r2, [pc, #96]	@ (80085dc <TIM_Base_SetConfig+0xc0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d108      	bne.n	8008590 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a07      	ldr	r2, [pc, #28]	@ (80085d4 <TIM_Base_SetConfig+0xb8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d103      	bne.n	80085c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	615a      	str	r2, [r3, #20]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40000400 	.word	0x40000400
 80085dc:	40000800 	.word	0x40000800

080085e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f023 0201 	bic.w	r2, r3, #1
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800860a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f023 030a 	bic.w	r3, r3, #10
 800861c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	621a      	str	r2, [r3, #32]
}
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr

0800863c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f023 0210 	bic.w	r2, r3, #16
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008666:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	031b      	lsls	r3, r3, #12
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	621a      	str	r2, [r3, #32]
}
 8008690:	bf00      	nop
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	bc80      	pop	{r7}
 8008698:	4770      	bx	lr

0800869a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f043 0307 	orr.w	r3, r3, #7
 80086bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	609a      	str	r2, [r3, #8]
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr

080086ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	021a      	lsls	r2, r3, #8
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	609a      	str	r2, [r3, #8]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008720:	2302      	movs	r3, #2
 8008722:	e046      	b.n	80087b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a16      	ldr	r2, [pc, #88]	@ (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00e      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008770:	d009      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a12      	ldr	r2, [pc, #72]	@ (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a10      	ldr	r2, [pc, #64]	@ (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d10c      	bne.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800878c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	4313      	orrs	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	40012c00 	.word	0x40012c00
 80087c0:	40000400 	.word	0x40000400
 80087c4:	40000800 	.word	0x40000800

080087c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e03f      	b.n	800887e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7fb fe0e 	bl	8004434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2224      	movs	r2, #36	@ 0x24
 800881c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800882e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f9a3 	bl	8008b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695a      	ldr	r2, [r3, #20]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08a      	sub	sp, #40	@ 0x28
 800888a:	af02      	add	r7, sp, #8
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d17c      	bne.n	80089a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <HAL_UART_Transmit+0x2c>
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e075      	b.n	80089a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_UART_Transmit+0x3e>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e06e      	b.n	80089a2 <HAL_UART_Transmit+0x11c>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2221      	movs	r2, #33	@ 0x21
 80088d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088da:	f7fb ff07 	bl	80046ec <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f4:	d108      	bne.n	8008908 <HAL_UART_Transmit+0x82>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d104      	bne.n	8008908 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e003      	b.n	8008910 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008918:	e02a      	b.n	8008970 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2200      	movs	r2, #0
 8008922:	2180      	movs	r1, #128	@ 0x80
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f8df 	bl	8008ae8 <UART_WaitOnFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e036      	b.n	80089a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	3302      	adds	r3, #2
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	e007      	b.n	8008962 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	781a      	ldrb	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	3301      	adds	r3, #1
 8008960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1cf      	bne.n	800891a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2200      	movs	r2, #0
 8008982:	2140      	movs	r1, #64	@ 0x40
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f8af 	bl	8008ae8 <UART_WaitOnFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e006      	b.n	80089a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b08a      	sub	sp, #40	@ 0x28
 80089ae:	af02      	add	r7, sp, #8
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	f040 8089 	bne.w	8008ade <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <HAL_UART_Receive+0x2e>
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e081      	b.n	8008ae0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Receive+0x40>
 80089e6:	2302      	movs	r3, #2
 80089e8:	e07a      	b.n	8008ae0 <HAL_UART_Receive+0x136>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2222      	movs	r2, #34	@ 0x22
 80089fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a00:	f7fb fe74 	bl	80046ec <HAL_GetTick>
 8008a04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1a:	d108      	bne.n	8008a2e <HAL_UART_Receive+0x84>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d104      	bne.n	8008a2e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	e003      	b.n	8008a36 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a3e:	e043      	b.n	8008ac8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	2120      	movs	r1, #32
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f84c 	bl	8008ae8 <UART_WaitOnFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e042      	b.n	8008ae0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10c      	bne.n	8008a7a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	3302      	adds	r3, #2
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	e01f      	b.n	8008aba <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a82:	d007      	beq.n	8008a94 <HAL_UART_Receive+0xea>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <HAL_UART_Receive+0xf8>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	701a      	strb	r2, [r3, #0]
 8008aa0:	e008      	b.n	8008ab4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1b6      	bne.n	8008a40 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008ade:	2302      	movs	r3, #2
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	4613      	mov	r3, r2
 8008af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008af8:	e02c      	b.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d028      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b08:	f7fb fdf0 	bl	80046ec <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d21d      	bcs.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008b26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e00f      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d0c3      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008bb6:	f023 030c 	bic.w	r3, r3, #12
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <UART_SetConfig+0x114>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d103      	bne.n	8008bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008be4:	f7fe fe54 	bl	8007890 <HAL_RCC_GetPCLK2Freq>
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	e002      	b.n	8008bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7fe fe3c 	bl	8007868 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009a      	lsls	r2, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c08:	4a22      	ldr	r2, [pc, #136]	@ (8008c94 <UART_SetConfig+0x118>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	0119      	lsls	r1, r3, #4
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009a      	lsls	r2, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c28:	4b1a      	ldr	r3, [pc, #104]	@ (8008c94 <UART_SetConfig+0x118>)
 8008c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	2064      	movs	r0, #100	@ 0x64
 8008c32:	fb00 f303 	mul.w	r3, r0, r3
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	3332      	adds	r3, #50	@ 0x32
 8008c3c:	4a15      	ldr	r2, [pc, #84]	@ (8008c94 <UART_SetConfig+0x118>)
 8008c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c42:	095b      	lsrs	r3, r3, #5
 8008c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c48:	4419      	add	r1, r3
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009a      	lsls	r2, r3, #2
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c60:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <UART_SetConfig+0x118>)
 8008c62:	fba3 0302 	umull	r0, r3, r3, r2
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	2064      	movs	r0, #100	@ 0x64
 8008c6a:	fb00 f303 	mul.w	r3, r0, r3
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	3332      	adds	r3, #50	@ 0x32
 8008c74:	4a07      	ldr	r2, [pc, #28]	@ (8008c94 <UART_SetConfig+0x118>)
 8008c76:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	f003 020f 	and.w	r2, r3, #15
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	440a      	add	r2, r1
 8008c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40013800 	.word	0x40013800
 8008c94:	51eb851f 	.word	0x51eb851f

08008c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c98:	b084      	sub	sp, #16
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	f107 0014 	add.w	r0, r7, #20
 8008ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	b004      	add	sp, #16
 8008cb6:	4770      	bx	lr

08008cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008cc8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008ccc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008cec:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008cf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4013      	ands	r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d30:	b084      	sub	sp, #16
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	f107 0014 	add.w	r0, r7, #20
 8008d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	b004      	add	sp, #16
 8008d6e:	4770      	bx	lr

08008d70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b09b      	sub	sp, #108	@ 0x6c
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d96:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	78db      	ldrb	r3, [r3, #3]
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d81f      	bhi.n	8008de2 <USB_ActivateEndpoint+0x72>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <USB_ActivateEndpoint+0x38>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008deb 	.word	0x08008deb
 8008db4:	08008dc7 	.word	0x08008dc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008db8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dc0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008dc4:	e012      	b.n	8008dec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008dc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008dce:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008dd2:	e00b      	b.n	8008dec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008dd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ddc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008de0:	e004      	b.n	8008dec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008de8:	e000      	b.n	8008dec <USB_ActivateEndpoint+0x7c>
      break;
 8008dea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	441a      	add	r2, r3
 8008df6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	7812      	ldrb	r2, [r2, #0]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	441a      	add	r2, r3
 8008e3a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	7b1b      	ldrb	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 8149 	bne.w	80090ee <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8084 	beq.w	8008f6e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	011a      	lsls	r2, r3, #4
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	88db      	ldrh	r3, [r3, #6]
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	81fb      	strh	r3, [r7, #14]
 8008ea8:	89fb      	ldrh	r3, [r7, #14]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01b      	beq.n	8008eea <USB_ActivateEndpoint+0x17a>
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec8:	81bb      	strh	r3, [r7, #12]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	441a      	add	r2, r3
 8008ed4:	89bb      	ldrh	r3, [r7, #12]
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ee2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d020      	beq.n	8008f34 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f08:	813b      	strh	r3, [r7, #8]
 8008f0a:	893b      	ldrh	r3, [r7, #8]
 8008f0c:	f083 0320 	eor.w	r3, r3, #32
 8008f10:	813b      	strh	r3, [r7, #8]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	441a      	add	r2, r3
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	8013      	strh	r3, [r2, #0]
 8008f32:	e27f      	b.n	8009434 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f4a:	817b      	strh	r3, [r7, #10]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	441a      	add	r2, r3
 8008f56:	897b      	ldrh	r3, [r7, #10]
 8008f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	8013      	strh	r3, [r2, #0]
 8008f6c:	e262      	b.n	8009434 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	4413      	add	r3, r2
 8008f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	011a      	lsls	r2, r3, #4
 8008f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	4413      	add	r3, r2
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	011a      	lsls	r2, r3, #4
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fc4:	623b      	str	r3, [r7, #32]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d112      	bne.n	8008ff4 <USB_ActivateEndpoint+0x284>
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e02f      	b.n	8009054 <USB_ActivateEndpoint+0x2e4>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ffa:	d813      	bhi.n	8009024 <USB_ActivateEndpoint+0x2b4>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	663b      	str	r3, [r7, #96]	@ 0x60
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <USB_ActivateEndpoint+0x2a6>
 8009010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009012:	3301      	adds	r3, #1
 8009014:	663b      	str	r3, [r7, #96]	@ 0x60
 8009016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009018:	b29b      	uxth	r3, r3
 800901a:	029b      	lsls	r3, r3, #10
 800901c:	b29a      	uxth	r2, r3
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	e017      	b.n	8009054 <USB_ActivateEndpoint+0x2e4>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	663b      	str	r3, [r7, #96]	@ 0x60
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f003 031f 	and.w	r3, r3, #31
 8009034:	2b00      	cmp	r3, #0
 8009036:	d102      	bne.n	800903e <USB_ActivateEndpoint+0x2ce>
 8009038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800903a:	3b01      	subs	r3, #1
 800903c:	663b      	str	r3, [r7, #96]	@ 0x60
 800903e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009040:	b29b      	uxth	r3, r3
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800904e:	b29a      	uxth	r2, r3
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	83fb      	strh	r3, [r7, #30]
 8009062:	8bfb      	ldrh	r3, [r7, #30]
 8009064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <USB_ActivateEndpoint+0x334>
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009082:	83bb      	strh	r3, [r7, #28]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	8bbb      	ldrh	r3, [r7, #28]
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800909c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ba:	837b      	strh	r3, [r7, #26]
 80090bc:	8b7b      	ldrh	r3, [r7, #26]
 80090be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090c2:	837b      	strh	r3, [r7, #26]
 80090c4:	8b7b      	ldrh	r3, [r7, #26]
 80090c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090ca:	837b      	strh	r3, [r7, #26]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	441a      	add	r2, r3
 80090d6:	8b7b      	ldrh	r3, [r7, #26]
 80090d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	8013      	strh	r3, [r2, #0]
 80090ec:	e1a2      	b.n	8009434 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009104:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	441a      	add	r2, r3
 8009112:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800911e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	b29b      	uxth	r3, r3
 8009128:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009134:	b29b      	uxth	r3, r3
 8009136:	461a      	mov	r2, r3
 8009138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800913a:	4413      	add	r3, r2
 800913c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	011a      	lsls	r2, r3, #4
 8009144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009146:	4413      	add	r3, r2
 8009148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800914c:	657b      	str	r3, [r7, #84]	@ 0x54
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	891b      	ldrh	r3, [r3, #8]
 8009152:	085b      	lsrs	r3, r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800915c:	801a      	strh	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	653b      	str	r3, [r7, #80]	@ 0x50
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009168:	b29b      	uxth	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800916e:	4413      	add	r3, r2
 8009170:	653b      	str	r3, [r7, #80]	@ 0x50
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	011a      	lsls	r2, r3, #4
 8009178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800917a:	4413      	add	r3, r2
 800917c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	895b      	ldrh	r3, [r3, #10]
 8009186:	085b      	lsrs	r3, r3, #1
 8009188:	b29b      	uxth	r3, r3
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009190:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f040 8091 	bne.w	80092be <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80091aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80091ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01b      	beq.n	80091ec <USB_ActivateEndpoint+0x47c>
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	441a      	add	r2, r3
 80091d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80091d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80091fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80091fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d01b      	beq.n	800923c <USB_ActivateEndpoint+0x4cc>
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800921a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	441a      	add	r2, r3
 8009226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800922c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009234:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009238:	b29b      	uxth	r3, r3
 800923a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800924e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009252:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009254:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009256:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800925a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800925c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800925e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009262:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	441a      	add	r2, r3
 800926e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800927c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009280:	b29b      	uxth	r3, r3
 8009282:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800929a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	441a      	add	r2, r3
 80092a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80092a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	8013      	strh	r3, [r2, #0]
 80092bc:	e0ba      	b.n	8009434 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80092ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80092d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d01d      	beq.n	8009316 <USB_ActivateEndpoint+0x5a6>
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	441a      	add	r2, r3
 80092fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800930e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009312:	b29b      	uxth	r3, r3
 8009314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800932a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01d      	beq.n	800936e <USB_ActivateEndpoint+0x5fe>
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009348:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	441a      	add	r2, r3
 8009356:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800935a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009366:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800936a:	b29b      	uxth	r3, r3
 800936c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	78db      	ldrb	r3, [r3, #3]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d024      	beq.n	80093c0 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800938c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009394:	f083 0320 	eor.w	r3, r3, #32
 8009398:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	441a      	add	r2, r3
 80093a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80093aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	8013      	strh	r3, [r2, #0]
 80093be:	e01d      	b.n	80093fc <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	441a      	add	r2, r3
 80093e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	441a      	add	r2, r3
 800941e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800942c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009430:	b29b      	uxth	r3, r3
 8009432:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009434:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009438:	4618      	mov	r0, r3
 800943a:	376c      	adds	r7, #108	@ 0x6c
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop

08009444 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009444:	b480      	push	{r7}
 8009446:	b08d      	sub	sp, #52	@ 0x34
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	7b1b      	ldrb	r3, [r3, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 808e 	bne.w	8009574 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d044      	beq.n	80094ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	81bb      	strh	r3, [r7, #12]
 800946e:	89bb      	ldrh	r3, [r7, #12]
 8009470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01b      	beq.n	80094b0 <USB_DeactivateEndpoint+0x6c>
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800948a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948e:	817b      	strh	r3, [r7, #10]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	441a      	add	r2, r3
 800949a:	897b      	ldrh	r3, [r7, #10]
 800949c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c6:	813b      	strh	r3, [r7, #8]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	441a      	add	r2, r3
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8013      	strh	r3, [r2, #0]
 80094e8:	e192      	b.n	8009810 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	827b      	strh	r3, [r7, #18]
 80094f8:	8a7b      	ldrh	r3, [r7, #18]
 80094fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01b      	beq.n	800953a <USB_DeactivateEndpoint+0xf6>
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009518:	823b      	strh	r3, [r7, #16]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	441a      	add	r2, r3
 8009524:	8a3b      	ldrh	r3, [r7, #16]
 8009526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800952a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800952e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009536:	b29b      	uxth	r3, r3
 8009538:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800954c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009550:	81fb      	strh	r3, [r7, #14]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	441a      	add	r2, r3
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	b29b      	uxth	r3, r3
 8009570:	8013      	strh	r3, [r2, #0]
 8009572:	e14d      	b.n	8009810 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	785b      	ldrb	r3, [r3, #1]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 80a5 	bne.w	80096c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	843b      	strh	r3, [r7, #32]
 800958c:	8c3b      	ldrh	r3, [r7, #32]
 800958e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d01b      	beq.n	80095ce <USB_DeactivateEndpoint+0x18a>
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ac:	83fb      	strh	r3, [r7, #30]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	441a      	add	r2, r3
 80095b8:	8bfb      	ldrh	r3, [r7, #30]
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	83bb      	strh	r3, [r7, #28]
 80095dc:	8bbb      	ldrh	r3, [r7, #28]
 80095de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01b      	beq.n	800961e <USB_DeactivateEndpoint+0x1da>
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fc:	837b      	strh	r3, [r7, #26]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	441a      	add	r2, r3
 8009608:	8b7b      	ldrh	r3, [r7, #26]
 800960a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800960e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009616:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800961a:	b29b      	uxth	r3, r3
 800961c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009634:	833b      	strh	r3, [r7, #24]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	441a      	add	r2, r3
 8009640:	8b3b      	ldrh	r3, [r7, #24]
 8009642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800964a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800964e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009652:	b29b      	uxth	r3, r3
 8009654:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966c:	82fb      	strh	r3, [r7, #22]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	441a      	add	r2, r3
 8009678:	8afb      	ldrh	r3, [r7, #22]
 800967a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800967e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968a:	b29b      	uxth	r3, r3
 800968c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a4:	82bb      	strh	r3, [r7, #20]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	441a      	add	r2, r3
 80096b0:	8abb      	ldrh	r3, [r7, #20]
 80096b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	8013      	strh	r3, [r2, #0]
 80096c6:	e0a3      	b.n	8009810 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80096d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80096d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01b      	beq.n	8009718 <USB_DeactivateEndpoint+0x2d4>
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	441a      	add	r2, r3
 8009702:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800970c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009714:	b29b      	uxth	r3, r3
 8009716:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009726:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01b      	beq.n	8009768 <USB_DeactivateEndpoint+0x324>
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009746:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	441a      	add	r2, r3
 8009752:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800975c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009760:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009764:	b29b      	uxth	r3, r3
 8009766:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800977a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800977e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	441a      	add	r2, r3
 800978a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800978c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009794:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800979c:	b29b      	uxth	r3, r3
 800979e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	441a      	add	r2, r3
 80097c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	441a      	add	r2, r3
 80097fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800980c:	b29b      	uxth	r3, r3
 800980e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3734      	adds	r7, #52	@ 0x34
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b0c4      	sub	sp, #272	@ 0x110
 8009820:	af00      	add	r7, sp, #0
 8009822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009826:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800982a:	6018      	str	r0, [r3, #0]
 800982c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009830:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009834:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800983a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	2b01      	cmp	r3, #1
 8009844:	f040 86ec 	bne.w	800a620 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009848:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800984c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009858:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	429a      	cmp	r2, r3
 8009862:	d908      	bls.n	8009876 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009868:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009874:	e007      	b.n	8009886 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800987a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800988a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	7b1b      	ldrb	r3, [r3, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d142      	bne.n	800991c <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009896:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800989a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6959      	ldr	r1, [r3, #20]
 80098a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	88da      	ldrh	r2, [r3, #6]
 80098ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80098b8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f001 fc92 	bl	800b1e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098dc:	b29b      	uxth	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	011a      	lsls	r2, r3, #4
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 80098fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009900:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990a:	b29a      	uxth	r2, r3
 800990c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009910:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	801a      	strh	r2, [r3, #0]
 8009918:	f000 be34 	b.w	800a584 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800991c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	78db      	ldrb	r3, [r3, #3]
 8009928:	2b02      	cmp	r3, #2
 800992a:	f040 843b 	bne.w	800a1a4 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800992e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009932:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6a1a      	ldr	r2, [r3, #32]
 800993a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800993e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	429a      	cmp	r2, r3
 8009948:	f240 83b8 	bls.w	800a0bc <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800994c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009950:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800995a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800996e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009972:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800997a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009984:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80099a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80099a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b8:	1ad2      	subs	r2, r2, r3
 80099ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 81b4 	beq.w	8009d56 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d16d      	bne.n	8009ae6 <USB_EPStartXfer+0x2ca>
 8009a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	4413      	add	r3, r2
 8009a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	011a      	lsls	r2, r3, #4
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	4413      	add	r3, r2
 8009a40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d112      	bne.n	8009a74 <USB_EPStartXfer+0x258>
 8009a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	801a      	strh	r2, [r3, #0]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	e05d      	b.n	8009b30 <USB_EPStartXfer+0x314>
 8009a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a78:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a7a:	d817      	bhi.n	8009aac <USB_EPStartXfer+0x290>
 8009a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a80:	085b      	lsrs	r3, r3, #1
 8009a82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <USB_EPStartXfer+0x280>
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a96:	3301      	adds	r3, #1
 8009a98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	029b      	lsls	r3, r3, #10
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	801a      	strh	r2, [r3, #0]
 8009aaa:	e041      	b.n	8009b30 <USB_EPStartXfer+0x314>
 8009aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab0:	095b      	lsrs	r3, r3, #5
 8009ab2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aba:	f003 031f 	and.w	r3, r3, #31
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d104      	bne.n	8009acc <USB_EPStartXfer+0x2b0>
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	029b      	lsls	r3, r3, #10
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	e024      	b.n	8009b30 <USB_EPStartXfer+0x314>
 8009ae6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d11c      	bne.n	8009b30 <USB_EPStartXfer+0x314>
 8009af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009afa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0a:	4413      	add	r3, r2
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	011a      	lsls	r2, r3, #4
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	4413      	add	r3, r2
 8009b20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	895b      	ldrh	r3, [r3, #10]
 8009b3c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6959      	ldr	r1, [r3, #20]
 8009b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009b56:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009b5a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	f001 fb41 	bl	800b1e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009b64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b74:	441a      	add	r2, r3
 8009b76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d90f      	bls.n	8009bbe <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8009b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a1a      	ldr	r2, [r3, #32]
 8009baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bae:	1ad2      	subs	r2, r2, r3
 8009bb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	621a      	str	r2, [r3, #32]
 8009bbc:	e00e      	b.n	8009bdc <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009be0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d16d      	bne.n	8009cc8 <USB_EPStartXfer+0x4ac>
 8009bec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bfc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61fb      	str	r3, [r7, #28]
 8009c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	011a      	lsls	r2, r3, #4
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	4413      	add	r3, r2
 8009c22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d112      	bne.n	8009c56 <USB_EPStartXfer+0x43a>
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	801a      	strh	r2, [r3, #0]
 8009c54:	e063      	b.n	8009d1e <USB_EPStartXfer+0x502>
 8009c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c5c:	d817      	bhi.n	8009c8e <USB_EPStartXfer+0x472>
 8009c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <USB_EPStartXfer+0x462>
 8009c74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c78:	3301      	adds	r3, #1
 8009c7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	029b      	lsls	r3, r3, #10
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	801a      	strh	r2, [r3, #0]
 8009c8c:	e047      	b.n	8009d1e <USB_EPStartXfer+0x502>
 8009c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c9c:	f003 031f 	and.w	r3, r3, #31
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <USB_EPStartXfer+0x492>
 8009ca4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	029b      	lsls	r3, r3, #10
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	801a      	strh	r2, [r3, #0]
 8009cc6:	e02a      	b.n	8009d1e <USB_EPStartXfer+0x502>
 8009cc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ccc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d122      	bne.n	8009d1e <USB_EPStartXfer+0x502>
 8009cd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	4413      	add	r3, r2
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	011a      	lsls	r2, r3, #4
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d12:	623b      	str	r3, [r7, #32]
 8009d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	891b      	ldrh	r3, [r3, #8]
 8009d2a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6959      	ldr	r1, [r3, #20]
 8009d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009d44:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009d48:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009d4c:	6800      	ldr	r0, [r0, #0]
 8009d4e:	f001 fa4a 	bl	800b1e6 <USB_WritePMA>
 8009d52:	f000 bc17 	b.w	800a584 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d16d      	bne.n	8009e42 <USB_EPStartXfer+0x626>
 8009d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d86:	4413      	add	r3, r2
 8009d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	011a      	lsls	r2, r3, #4
 8009d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d112      	bne.n	8009dd0 <USB_EPStartXfer+0x5b4>
 8009daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db8:	801a      	strh	r2, [r3, #0]
 8009dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	e063      	b.n	8009e98 <USB_EPStartXfer+0x67c>
 8009dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dd6:	d817      	bhi.n	8009e08 <USB_EPStartXfer+0x5ec>
 8009dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <USB_EPStartXfer+0x5dc>
 8009dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009df2:	3301      	adds	r3, #1
 8009df4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	029b      	lsls	r3, r3, #10
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e047      	b.n	8009e98 <USB_EPStartXfer+0x67c>
 8009e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <USB_EPStartXfer+0x60c>
 8009e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e22:	3b01      	subs	r3, #1
 8009e24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	029b      	lsls	r3, r3, #10
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	e02a      	b.n	8009e98 <USB_EPStartXfer+0x67c>
 8009e42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e46:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d122      	bne.n	8009e98 <USB_EPStartXfer+0x67c>
 8009e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e72:	4413      	add	r3, r2
 8009e74:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	011a      	lsls	r2, r3, #4
 8009e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e86:	4413      	add	r3, r2
 8009e88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	891b      	ldrh	r3, [r3, #8]
 8009ea4:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ea8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6959      	ldr	r1, [r3, #20]
 8009eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009ebe:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009ec2:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009ec6:	6800      	ldr	r0, [r0, #0]
 8009ec8:	f001 f98d 	bl	800b1e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ecc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	695a      	ldr	r2, [r3, #20]
 8009ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009edc:	441a      	add	r2, r3
 8009ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009eea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6a1a      	ldr	r2, [r3, #32]
 8009ef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009efa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d90f      	bls.n	8009f26 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a1a      	ldr	r2, [r3, #32]
 8009f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	621a      	str	r2, [r3, #32]
 8009f24:	e00e      	b.n	8009f44 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009f36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2200      	movs	r2, #0
 8009f42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d16d      	bne.n	800a03c <USB_EPStartXfer+0x820>
 8009f60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f80:	4413      	add	r3, r2
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	011a      	lsls	r2, r3, #4
 8009f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f94:	4413      	add	r3, r2
 8009f96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d112      	bne.n	8009fca <USB_EPStartXfer+0x7ae>
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	801a      	strh	r2, [r3, #0]
 8009fc8:	e05d      	b.n	800a086 <USB_EPStartXfer+0x86a>
 8009fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fce:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fd0:	d817      	bhi.n	800a002 <USB_EPStartXfer+0x7e6>
 8009fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <USB_EPStartXfer+0x7d6>
 8009fe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fec:	3301      	adds	r3, #1
 8009fee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	029b      	lsls	r3, r3, #10
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e041      	b.n	800a086 <USB_EPStartXfer+0x86a>
 800a002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a010:	f003 031f 	and.w	r3, r3, #31
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <USB_EPStartXfer+0x806>
 800a018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a01c:	3b01      	subs	r3, #1
 800a01e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a026:	b29b      	uxth	r3, r3
 800a028:	029b      	lsls	r3, r3, #10
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a034:	b29a      	uxth	r2, r3
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	801a      	strh	r2, [r3, #0]
 800a03a:	e024      	b.n	800a086 <USB_EPStartXfer+0x86a>
 800a03c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d11c      	bne.n	800a086 <USB_EPStartXfer+0x86a>
 800a04c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a050:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a060:	4413      	add	r3, r2
 800a062:	647b      	str	r3, [r7, #68]	@ 0x44
 800a064:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a068:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	011a      	lsls	r2, r3, #4
 800a072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a074:	4413      	add	r3, r2
 800a076:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a07a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a080:	b29a      	uxth	r2, r3
 800a082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a08a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	895b      	ldrh	r3, [r3, #10]
 800a092:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a09a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6959      	ldr	r1, [r3, #20]
 800a0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a0ac:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a0b0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a0b4:	6800      	ldr	r0, [r0, #0]
 800a0b6:	f001 f896 	bl	800b1e6 <USB_WritePMA>
 800a0ba:	e263      	b.n	800a584 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a0bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a0cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a0ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a0f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a104:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	441a      	add	r2, r3
 800a110:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a11c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a128:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a12c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	663b      	str	r3, [r7, #96]	@ 0x60
 800a134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a138:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a142:	b29b      	uxth	r3, r3
 800a144:	461a      	mov	r2, r3
 800a146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a148:	4413      	add	r3, r2
 800a14a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a14c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a150:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	011a      	lsls	r2, r3, #4
 800a15a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a15c:	4413      	add	r3, r2
 800a15e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a162:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a168:	b29a      	uxth	r2, r3
 800a16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a16c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a16e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a172:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	891b      	ldrh	r3, [r3, #8]
 800a17a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a17e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a182:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6959      	ldr	r1, [r3, #20]
 800a18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a18e:	b29b      	uxth	r3, r3
 800a190:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a194:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a198:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f001 f822 	bl	800b1e6 <USB_WritePMA>
 800a1a2:	e1ef      	b.n	800a584 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a1a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 80aa 	beq.w	800a320 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d16d      	bne.n	800a2c4 <USB_EPStartXfer+0xaa8>
 800a1e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a208:	4413      	add	r3, r2
 800a20a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a20c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	011a      	lsls	r2, r3, #4
 800a21a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d112      	bne.n	800a252 <USB_EPStartXfer+0xa36>
 800a22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a236:	b29a      	uxth	r2, r3
 800a238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	e05d      	b.n	800a30e <USB_EPStartXfer+0xaf2>
 800a252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a256:	2b3e      	cmp	r3, #62	@ 0x3e
 800a258:	d817      	bhi.n	800a28a <USB_EPStartXfer+0xa6e>
 800a25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <USB_EPStartXfer+0xa5e>
 800a270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a274:	3301      	adds	r3, #1
 800a276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a27e:	b29b      	uxth	r3, r3
 800a280:	029b      	lsls	r3, r3, #10
 800a282:	b29a      	uxth	r2, r3
 800a284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a286:	801a      	strh	r2, [r3, #0]
 800a288:	e041      	b.n	800a30e <USB_EPStartXfer+0xaf2>
 800a28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28e:	095b      	lsrs	r3, r3, #5
 800a290:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a298:	f003 031f 	and.w	r3, r3, #31
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <USB_EPStartXfer+0xa8e>
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	e024      	b.n	800a30e <USB_EPStartXfer+0xaf2>
 800a2c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d11c      	bne.n	800a30e <USB_EPStartXfer+0xaf2>
 800a2d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2e8:	4413      	add	r3, r2
 800a2ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	011a      	lsls	r2, r3, #4
 800a2fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a302:	677b      	str	r3, [r7, #116]	@ 0x74
 800a304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a308:	b29a      	uxth	r2, r3
 800a30a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a30c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a30e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a312:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	895b      	ldrh	r3, [r3, #10]
 800a31a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800a31e:	e0b2      	b.n	800a486 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a320:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a324:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d171      	bne.n	800a414 <USB_EPStartXfer+0xbf8>
 800a330:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a334:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a33e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a354:	4413      	add	r3, r2
 800a356:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a35a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a35e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	011a      	lsls	r2, r3, #4
 800a368:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d112      	bne.n	800a3a2 <USB_EPStartXfer+0xb86>
 800a37c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a386:	b29a      	uxth	r2, r3
 800a388:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a38a:	801a      	strh	r2, [r3, #0]
 800a38c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	e069      	b.n	800a476 <USB_EPStartXfer+0xc5a>
 800a3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3a8:	d817      	bhi.n	800a3da <USB_EPStartXfer+0xbbe>
 800a3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <USB_EPStartXfer+0xbae>
 800a3c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	029b      	lsls	r3, r3, #10
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3d6:	801a      	strh	r2, [r3, #0]
 800a3d8:	e04d      	b.n	800a476 <USB_EPStartXfer+0xc5a>
 800a3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3de:	095b      	lsrs	r3, r3, #5
 800a3e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e8:	f003 031f 	and.w	r3, r3, #31
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d104      	bne.n	800a3fa <USB_EPStartXfer+0xbde>
 800a3f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	029b      	lsls	r3, r3, #10
 800a402:	b29b      	uxth	r3, r3
 800a404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	e030      	b.n	800a476 <USB_EPStartXfer+0xc5a>
 800a414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d128      	bne.n	800a476 <USB_EPStartXfer+0xc5a>
 800a424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a428:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a436:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a440:	b29b      	uxth	r3, r3
 800a442:	461a      	mov	r2, r3
 800a444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a448:	4413      	add	r3, r2
 800a44a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a44e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a452:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	011a      	lsls	r2, r3, #4
 800a45c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a460:	4413      	add	r3, r2
 800a462:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a46e:	b29a      	uxth	r2, r3
 800a470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a474:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a476:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a47a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	891b      	ldrh	r3, [r3, #8]
 800a482:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a48a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6959      	ldr	r1, [r3, #20]
 800a492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a496:	b29b      	uxth	r3, r3
 800a498:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a49c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a4a0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a4a4:	6800      	ldr	r0, [r0, #0]
 800a4a6:	f000 fe9e 	bl	800b1e6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a4aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d12e      	bne.n	800a518 <USB_EPStartXfer+0xcfc>
 800a4ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a4e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a50a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a512:	b29b      	uxth	r3, r3
 800a514:	8013      	strh	r3, [r2, #0]
 800a516:	e035      	b.n	800a584 <USB_EPStartXfer+0xd68>
 800a518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a51c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d12d      	bne.n	800a584 <USB_EPStartXfer+0xd68>
 800a528:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a52c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a536:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a54a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a54e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a556:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	441a      	add	r2, r3
 800a56c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a57c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a580:	b29b      	uxth	r3, r3
 800a582:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a592:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5a6:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5b2:	8013      	strh	r3, [r2, #0]
 800a5b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5b8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5bc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5c0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5c4:	8812      	ldrh	r2, [r2, #0]
 800a5c6:	f082 0210 	eor.w	r2, r2, #16
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5d4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5d8:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5dc:	8812      	ldrh	r2, [r2, #0]
 800a5de:	f082 0220 	eor.w	r2, r2, #32
 800a5e2:	801a      	strh	r2, [r3, #0]
 800a5e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	441a      	add	r2, r3
 800a5fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a602:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a60c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a618:	b29b      	uxth	r3, r3
 800a61a:	8013      	strh	r3, [r2, #0]
 800a61c:	f000 bc9f 	b.w	800af5e <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a620:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a624:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	7b1b      	ldrb	r3, [r3, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 80ae 	bne.w	800a78e <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a636:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699a      	ldr	r2, [r3, #24]
 800a63e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a642:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d917      	bls.n	800a67e <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a64e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a652:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a65e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a662:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a674:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	619a      	str	r2, [r3, #24]
 800a67c:	e00e      	b.n	800a69c <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a67e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a682:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a68e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a692:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a69c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	011a      	lsls	r2, r3, #4
 800a6d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6d8:	4413      	add	r3, r2
 800a6da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d116      	bne.n	800a718 <USB_EPStartXfer+0xefc>
 800a6ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6fc:	801a      	strh	r2, [r3, #0]
 800a6fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a714:	801a      	strh	r2, [r3, #0]
 800a716:	e3e8      	b.n	800aeea <USB_EPStartXfer+0x16ce>
 800a718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a71c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a71e:	d818      	bhi.n	800a752 <USB_EPStartXfer+0xf36>
 800a720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a724:	085b      	lsrs	r3, r3, #1
 800a726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <USB_EPStartXfer+0xf24>
 800a736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a73a:	3301      	adds	r3, #1
 800a73c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a740:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a744:	b29b      	uxth	r3, r3
 800a746:	029b      	lsls	r3, r3, #10
 800a748:	b29a      	uxth	r2, r3
 800a74a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	e3cb      	b.n	800aeea <USB_EPStartXfer+0x16ce>
 800a752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a756:	095b      	lsrs	r3, r3, #5
 800a758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a760:	f003 031f 	and.w	r3, r3, #31
 800a764:	2b00      	cmp	r3, #0
 800a766:	d104      	bne.n	800a772 <USB_EPStartXfer+0xf56>
 800a768:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a76c:	3b01      	subs	r3, #1
 800a76e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a772:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a776:	b29b      	uxth	r3, r3
 800a778:	029b      	lsls	r3, r3, #10
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a784:	b29a      	uxth	r2, r3
 800a786:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	e3ad      	b.n	800aeea <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a78e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a792:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	78db      	ldrb	r3, [r3, #3]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	f040 8200 	bne.w	800aba0 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a7a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f040 8091 	bne.w	800a8d4 <USB_EPStartXfer+0x10b8>
 800a7b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	011a      	lsls	r2, r3, #4
 800a7ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d116      	bne.n	800a836 <USB_EPStartXfer+0x101a>
 800a808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a814:	b29a      	uxth	r2, r3
 800a816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a81a:	801a      	strh	r2, [r3, #0]
 800a81c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	b29b      	uxth	r3, r3
 800a824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	e083      	b.n	800a93e <USB_EPStartXfer+0x1122>
 800a836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	2b3e      	cmp	r3, #62	@ 0x3e
 800a844:	d820      	bhi.n	800a888 <USB_EPStartXfer+0x106c>
 800a846:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a84a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	085b      	lsrs	r3, r3, #1
 800a854:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a85c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <USB_EPStartXfer+0x105a>
 800a86c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a870:	3301      	adds	r3, #1
 800a872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	029b      	lsls	r3, r3, #10
 800a87e:	b29a      	uxth	r2, r3
 800a880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	e05a      	b.n	800a93e <USB_EPStartXfer+0x1122>
 800a888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a88c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	095b      	lsrs	r3, r3, #5
 800a896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a89a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a89e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <USB_EPStartXfer+0x109c>
 800a8ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	029b      	lsls	r3, r3, #10
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e034      	b.n	800a93e <USB_EPStartXfer+0x1122>
 800a8d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	785b      	ldrb	r3, [r3, #1]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d12c      	bne.n	800a93e <USB_EPStartXfer+0x1122>
 800a8e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a900:	b29b      	uxth	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a908:	4413      	add	r3, r2
 800a90a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a90e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a912:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	011a      	lsls	r2, r3, #4
 800a91c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a920:	4413      	add	r3, r2
 800a922:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a92a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a92e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	b29a      	uxth	r2, r3
 800a938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a93c:	801a      	strh	r2, [r3, #0]
 800a93e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a94c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a950:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 8091 	bne.w	800aa80 <USB_EPStartXfer+0x1264>
 800a95e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a962:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a96c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a970:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a982:	4413      	add	r3, r2
 800a984:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a98c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	011a      	lsls	r2, r3, #4
 800a996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a99a:	4413      	add	r3, r2
 800a99c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a9a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d116      	bne.n	800a9e2 <USB_EPStartXfer+0x11c6>
 800a9b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9c6:	801a      	strh	r2, [r3, #0]
 800a9c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9de:	801a      	strh	r2, [r3, #0]
 800a9e0:	e07c      	b.n	800aadc <USB_EPStartXfer+0x12c0>
 800a9e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9f0:	d820      	bhi.n	800aa34 <USB_EPStartXfer+0x1218>
 800a9f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <USB_EPStartXfer+0x1206>
 800aa18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	029b      	lsls	r3, r3, #10
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa30:	801a      	strh	r2, [r3, #0]
 800aa32:	e053      	b.n	800aadc <USB_EPStartXfer+0x12c0>
 800aa34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	095b      	lsrs	r3, r3, #5
 800aa42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d104      	bne.n	800aa64 <USB_EPStartXfer+0x1248>
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	029b      	lsls	r3, r3, #10
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	e02d      	b.n	800aadc <USB_EPStartXfer+0x12c0>
 800aa80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d125      	bne.n	800aadc <USB_EPStartXfer+0x12c0>
 800aa90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aaac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aab0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	011a      	lsls	r2, r3, #4
 800aaba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aabe:	4413      	add	r3, r2
 800aac0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aacc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aada:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aadc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aae0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 81fe 	beq.w	800aeea <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aaee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aafc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d005      	beq.n	800ab26 <USB_EPStartXfer+0x130a>
 800ab1a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10d      	bne.n	800ab42 <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f040 81db 	bne.w	800aeea <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab34:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 81d4 	bne.w	800aeea <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ab42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab68:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800ab6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	441a      	add	r2, r3
 800ab86:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800ab8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	8013      	strh	r3, [r2, #0]
 800ab9e:	e1a4      	b.n	800aeea <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aba4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	78db      	ldrb	r3, [r3, #3]
 800abac:	2b01      	cmp	r3, #1
 800abae:	f040 819a 	bne.w	800aee6 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800abb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abb6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d917      	bls.n	800abfe <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800abce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800abde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abe2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699a      	ldr	r2, [r3, #24]
 800abea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	619a      	str	r2, [r3, #24]
 800abfc:	e00e      	b.n	800ac1c <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800abfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800ac0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ac1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	785b      	ldrb	r3, [r3, #1]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d178      	bne.n	800ad1e <USB_EPStartXfer+0x1502>
 800ac2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac50:	4413      	add	r3, r2
 800ac52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	011a      	lsls	r2, r3, #4
 800ac64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac68:	4413      	add	r3, r2
 800ac6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d116      	bne.n	800aca8 <USB_EPStartXfer+0x148c>
 800ac7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac8c:	801a      	strh	r2, [r3, #0]
 800ac8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aca4:	801a      	strh	r2, [r3, #0]
 800aca6:	e06b      	b.n	800ad80 <USB_EPStartXfer+0x1564>
 800aca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acac:	2b3e      	cmp	r3, #62	@ 0x3e
 800acae:	d818      	bhi.n	800ace2 <USB_EPStartXfer+0x14c6>
 800acb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb4:	085b      	lsrs	r3, r3, #1
 800acb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <USB_EPStartXfer+0x14b4>
 800acc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acca:	3301      	adds	r3, #1
 800accc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	029b      	lsls	r3, r3, #10
 800acd8:	b29a      	uxth	r2, r3
 800acda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acde:	801a      	strh	r2, [r3, #0]
 800ace0:	e04e      	b.n	800ad80 <USB_EPStartXfer+0x1564>
 800ace2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ace6:	095b      	lsrs	r3, r3, #5
 800ace8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf0:	f003 031f 	and.w	r3, r3, #31
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <USB_EPStartXfer+0x14e6>
 800acf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acfc:	3b01      	subs	r3, #1
 800acfe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	029b      	lsls	r3, r3, #10
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad1a:	801a      	strh	r2, [r3, #0]
 800ad1c:	e030      	b.n	800ad80 <USB_EPStartXfer+0x1564>
 800ad1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	785b      	ldrb	r3, [r3, #1]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d128      	bne.n	800ad80 <USB_EPStartXfer+0x1564>
 800ad2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad52:	4413      	add	r3, r2
 800ad54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	011a      	lsls	r2, r3, #4
 800ad66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad7e:	801a      	strh	r2, [r3, #0]
 800ad80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	785b      	ldrb	r3, [r3, #1]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d178      	bne.n	800ae90 <USB_EPStartXfer+0x1674>
 800ad9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ada2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800adac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adba:	b29b      	uxth	r3, r3
 800adbc:	461a      	mov	r2, r3
 800adbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adc2:	4413      	add	r3, r2
 800adc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800adc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	011a      	lsls	r2, r3, #4
 800add6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adda:	4413      	add	r3, r2
 800addc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ade0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ade4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d116      	bne.n	800ae1a <USB_EPStartXfer+0x15fe>
 800adec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adfe:	801a      	strh	r2, [r3, #0]
 800ae00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae16:	801a      	strh	r2, [r3, #0]
 800ae18:	e067      	b.n	800aeea <USB_EPStartXfer+0x16ce>
 800ae1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae20:	d818      	bhi.n	800ae54 <USB_EPStartXfer+0x1638>
 800ae22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae26:	085b      	lsrs	r3, r3, #1
 800ae28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <USB_EPStartXfer+0x1626>
 800ae38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	029b      	lsls	r3, r3, #10
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae50:	801a      	strh	r2, [r3, #0]
 800ae52:	e04a      	b.n	800aeea <USB_EPStartXfer+0x16ce>
 800ae54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae62:	f003 031f 	and.w	r3, r3, #31
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <USB_EPStartXfer+0x1658>
 800ae6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	029b      	lsls	r3, r3, #10
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae8c:	801a      	strh	r2, [r3, #0]
 800ae8e:	e02c      	b.n	800aeea <USB_EPStartXfer+0x16ce>
 800ae90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d124      	bne.n	800aeea <USB_EPStartXfer+0x16ce>
 800aea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aea4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aec0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	011a      	lsls	r2, r3, #4
 800aeca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aece:	4413      	add	r3, r2
 800aed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aedc:	b29a      	uxth	r2, r3
 800aede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	e001      	b.n	800aeea <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e03a      	b.n	800af60 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aeee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aef8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	b29b      	uxth	r3, r3
 800af08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af1c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af28:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	441a      	add	r2, r3
 800af46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b085      	sub	sp, #20
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d020      	beq.n	800afbe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af92:	81bb      	strh	r3, [r7, #12]
 800af94:	89bb      	ldrh	r3, [r7, #12]
 800af96:	f083 0310 	eor.w	r3, r3, #16
 800af9a:	81bb      	strh	r3, [r7, #12]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	441a      	add	r2, r3
 800afa6:	89bb      	ldrh	r3, [r7, #12]
 800afa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb8:	b29b      	uxth	r3, r3
 800afba:	8013      	strh	r3, [r2, #0]
 800afbc:	e01f      	b.n	800affe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afd4:	81fb      	strh	r3, [r7, #14]
 800afd6:	89fb      	ldrh	r3, [r7, #14]
 800afd8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800afdc:	81fb      	strh	r3, [r7, #14]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	441a      	add	r2, r3
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800affa:	b29b      	uxth	r3, r3
 800affc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	bc80      	pop	{r7}
 800b008:	4770      	bx	lr

0800b00a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b087      	sub	sp, #28
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	7b1b      	ldrb	r3, [r3, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 809d 	bne.w	800b158 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	785b      	ldrb	r3, [r3, #1]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d04c      	beq.n	800b0c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	823b      	strh	r3, [r7, #16]
 800b034:	8a3b      	ldrh	r3, [r7, #16]
 800b036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d01b      	beq.n	800b076 <USB_EPClearStall+0x6c>
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b054:	81fb      	strh	r3, [r7, #14]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	441a      	add	r2, r3
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b06e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b072:	b29b      	uxth	r3, r3
 800b074:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	78db      	ldrb	r3, [r3, #3]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d06c      	beq.n	800b158 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b094:	81bb      	strh	r3, [r7, #12]
 800b096:	89bb      	ldrh	r3, [r7, #12]
 800b098:	f083 0320 	eor.w	r3, r3, #32
 800b09c:	81bb      	strh	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	441a      	add	r2, r3
 800b0a8:	89bb      	ldrh	r3, [r7, #12]
 800b0aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	8013      	strh	r3, [r2, #0]
 800b0be:	e04b      	b.n	800b158 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	82fb      	strh	r3, [r7, #22]
 800b0ce:	8afb      	ldrh	r3, [r7, #22]
 800b0d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01b      	beq.n	800b110 <USB_EPClearStall+0x106>
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ee:	82bb      	strh	r3, [r7, #20]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	441a      	add	r2, r3
 800b0fa:	8abb      	ldrh	r3, [r7, #20]
 800b0fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b126:	827b      	strh	r3, [r7, #18]
 800b128:	8a7b      	ldrh	r3, [r7, #18]
 800b12a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b12e:	827b      	strh	r3, [r7, #18]
 800b130:	8a7b      	ldrh	r3, [r7, #18]
 800b132:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b136:	827b      	strh	r3, [r7, #18]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	441a      	add	r2, r3
 800b142:	8a7b      	ldrh	r3, [r7, #18]
 800b144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b14c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b154:	b29b      	uxth	r3, r3
 800b156:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	371c      	adds	r7, #28
 800b15e:	46bd      	mov	sp, r7
 800b160:	bc80      	pop	{r7}
 800b162:	4770      	bx	lr

0800b164 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d103      	bne.n	800b17e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2280      	movs	r2, #128	@ 0x80
 800b17a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr

0800b18a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc80      	pop	{r7}
 800b19c:	4770      	bx	lr

0800b19e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr

0800b1b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc80      	pop	{r7}
 800b1ce:	4770      	bx	lr

0800b1d0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bc80      	pop	{r7}
 800b1e4:	4770      	bx	lr

0800b1e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b08d      	sub	sp, #52	@ 0x34
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	80fb      	strh	r3, [r7, #6]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1fc:	88bb      	ldrh	r3, [r7, #4]
 800b1fe:	3301      	adds	r3, #1
 800b200:	085b      	lsrs	r3, r3, #1
 800b202:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b20c:	88fb      	ldrh	r3, [r7, #6]
 800b20e:	005a      	lsls	r2, r3, #1
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b218:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b21e:	e01d      	b.n	800b25c <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	3301      	adds	r3, #1
 800b22a:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	021b      	lsls	r3, r3, #8
 800b232:	b29b      	uxth	r3, r3
 800b234:	461a      	mov	r2, r3
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	b29a      	uxth	r2, r3
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	3302      	adds	r3, #2
 800b248:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	3302      	adds	r3, #2
 800b24e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b252:	3301      	adds	r3, #1
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	3b01      	subs	r3, #1
 800b25a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1de      	bne.n	800b220 <USB_WritePMA+0x3a>
  }
}
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	3734      	adds	r7, #52	@ 0x34
 800b268:	46bd      	mov	sp, r7
 800b26a:	bc80      	pop	{r7}
 800b26c:	4770      	bx	lr

0800b26e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b26e:	b480      	push	{r7}
 800b270:	b08b      	sub	sp, #44	@ 0x2c
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	4611      	mov	r1, r2
 800b27a:	461a      	mov	r2, r3
 800b27c:	460b      	mov	r3, r1
 800b27e:	80fb      	strh	r3, [r7, #6]
 800b280:	4613      	mov	r3, r2
 800b282:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b284:	88bb      	ldrh	r3, [r7, #4]
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	b29b      	uxth	r3, r3
 800b28a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	005a      	lsls	r2, r3, #1
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2a6:	e01b      	b.n	800b2e0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	3302      	adds	r3, #2
 800b2b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	0a1b      	lsrs	r3, r3, #8
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	3302      	adds	r3, #2
 800b2d8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e0      	bne.n	800b2a8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b2e6:	88bb      	ldrh	r3, [r7, #4]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d007      	beq.n	800b302 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	701a      	strb	r2, [r3, #0]
  }
}
 800b302:	bf00      	nop
 800b304:	372c      	adds	r7, #44	@ 0x2c
 800b306:	46bd      	mov	sp, r7
 800b308:	bc80      	pop	{r7}
 800b30a:	4770      	bx	lr

0800b30c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	7c1b      	ldrb	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d115      	bne.n	800b350 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b328:	2202      	movs	r2, #2
 800b32a:	2181      	movs	r1, #129	@ 0x81
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fe90 	bl	800d052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b33c:	2202      	movs	r2, #2
 800b33e:	2101      	movs	r1, #1
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 fe86 	bl	800d052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b34e:	e012      	b.n	800b376 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b350:	2340      	movs	r3, #64	@ 0x40
 800b352:	2202      	movs	r2, #2
 800b354:	2181      	movs	r1, #129	@ 0x81
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f001 fe7b 	bl	800d052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b362:	2340      	movs	r3, #64	@ 0x40
 800b364:	2202      	movs	r2, #2
 800b366:	2101      	movs	r1, #1
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 fe72 	bl	800d052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b376:	2308      	movs	r3, #8
 800b378:	2203      	movs	r2, #3
 800b37a:	2182      	movs	r1, #130	@ 0x82
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 fe68 	bl	800d052 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b388:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b38c:	f001 ff88 	bl	800d2a0 <USBD_static_malloc>
 800b390:	4602      	mov	r2, r0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d102      	bne.n	800b3a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	73fb      	strb	r3, [r7, #15]
 800b3a6:	e026      	b.n	800b3f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	7c1b      	ldrb	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d109      	bne.n	800b3e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3dc:	2101      	movs	r1, #1
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f001 ff28 	bl	800d234 <USBD_LL_PrepareReceive>
 800b3e4:	e007      	b.n	800b3f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3ec:	2340      	movs	r3, #64	@ 0x40
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 ff1f 	bl	800d234 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b410:	2181      	movs	r1, #129	@ 0x81
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fe43 	bl	800d09e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b41e:	2101      	movs	r1, #1
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fe3c 	bl	800d09e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b42e:	2182      	movs	r1, #130	@ 0x82
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 fe34 	bl	800d09e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00e      	beq.n	800b464 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b456:	4618      	mov	r0, r3
 800b458:	f001 ff2e 	bl	800d2b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b086      	sub	sp, #24
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b494:	2b00      	cmp	r3, #0
 800b496:	d039      	beq.n	800b50c <USBD_CDC_Setup+0x9e>
 800b498:	2b20      	cmp	r3, #32
 800b49a:	d17f      	bne.n	800b59c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d029      	beq.n	800b4f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	b25b      	sxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da11      	bge.n	800b4d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b4ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	88d2      	ldrh	r2, [r2, #6]
 800b4c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4c2:	6939      	ldr	r1, [r7, #16]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	88db      	ldrh	r3, [r3, #6]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fa06 	bl	800c8dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b4d0:	e06b      	b.n	800b5aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	785a      	ldrb	r2, [r3, #1]
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	88db      	ldrh	r3, [r3, #6]
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4e8:	6939      	ldr	r1, [r7, #16]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	88db      	ldrh	r3, [r3, #6]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fa21 	bl	800c938 <USBD_CtlPrepareRx>
      break;
 800b4f6:	e058      	b.n	800b5aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	7850      	ldrb	r0, [r2, #1]
 800b504:	2200      	movs	r2, #0
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	4798      	blx	r3
      break;
 800b50a:	e04e      	b.n	800b5aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	785b      	ldrb	r3, [r3, #1]
 800b510:	2b0b      	cmp	r3, #11
 800b512:	d02e      	beq.n	800b572 <USBD_CDC_Setup+0x104>
 800b514:	2b0b      	cmp	r3, #11
 800b516:	dc38      	bgt.n	800b58a <USBD_CDC_Setup+0x11c>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <USBD_CDC_Setup+0xb4>
 800b51c:	2b0a      	cmp	r3, #10
 800b51e:	d014      	beq.n	800b54a <USBD_CDC_Setup+0xdc>
 800b520:	e033      	b.n	800b58a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b528:	2b03      	cmp	r3, #3
 800b52a:	d107      	bne.n	800b53c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b52c:	f107 030c 	add.w	r3, r7, #12
 800b530:	2202      	movs	r2, #2
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 f9d1 	bl	800c8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b53a:	e02e      	b.n	800b59a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 f962 	bl	800c808 <USBD_CtlError>
            ret = USBD_FAIL;
 800b544:	2302      	movs	r3, #2
 800b546:	75fb      	strb	r3, [r7, #23]
          break;
 800b548:	e027      	b.n	800b59a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b550:	2b03      	cmp	r3, #3
 800b552:	d107      	bne.n	800b564 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b554:	f107 030f 	add.w	r3, r7, #15
 800b558:	2201      	movs	r2, #1
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 f9bd 	bl	800c8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b562:	e01a      	b.n	800b59a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 f94e 	bl	800c808 <USBD_CtlError>
            ret = USBD_FAIL;
 800b56c:	2302      	movs	r3, #2
 800b56e:	75fb      	strb	r3, [r7, #23]
          break;
 800b570:	e013      	b.n	800b59a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d00d      	beq.n	800b598 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 f942 	bl	800c808 <USBD_CtlError>
            ret = USBD_FAIL;
 800b584:	2302      	movs	r3, #2
 800b586:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b588:	e006      	b.n	800b598 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 f93b 	bl	800c808 <USBD_CtlError>
          ret = USBD_FAIL;
 800b592:	2302      	movs	r3, #2
 800b594:	75fb      	strb	r3, [r7, #23]
          break;
 800b596:	e000      	b.n	800b59a <USBD_CDC_Setup+0x12c>
          break;
 800b598:	bf00      	nop
      }
      break;
 800b59a:	e006      	b.n	800b5aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f932 	bl	800c808 <USBD_CtlError>
      ret = USBD_FAIL;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5a8:	bf00      	nop
  }

  return ret;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d03a      	beq.n	800b650 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	331c      	adds	r3, #28
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d029      	beq.n	800b644 <USBD_CDC_DataIn+0x90>
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	331c      	adds	r3, #28
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	78f9      	ldrb	r1, [r7, #3]
 800b604:	68b8      	ldr	r0, [r7, #8]
 800b606:	460b      	mov	r3, r1
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	440b      	add	r3, r1
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	4403      	add	r3, r0
 800b610:	3338      	adds	r3, #56	@ 0x38
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	fbb2 f1f3 	udiv	r1, r2, r3
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d110      	bne.n	800b644 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b622:	78fa      	ldrb	r2, [r7, #3]
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	331c      	adds	r3, #28
 800b632:	2200      	movs	r2, #0
 800b634:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b636:	78f9      	ldrb	r1, [r7, #3]
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 fdd6 	bl	800d1ee <USBD_LL_Transmit>
 800b642:	e003      	b.n	800b64c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	e000      	b.n	800b652 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b650:	2302      	movs	r3, #2
  }
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b66e:	78fb      	ldrb	r3, [r7, #3]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 fe01 	bl	800d27a <USBD_LL_GetRxDataSize>
 800b678:	4602      	mov	r2, r0
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00d      	beq.n	800b6a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b69e:	4611      	mov	r1, r2
 800b6a0:	4798      	blx	r3

    return USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e000      	b.n	800b6a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b6a6:	2302      	movs	r3, #2
  }
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d014      	beq.n	800b6f4 <USBD_CDC_EP0_RxReady+0x44>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b6d0:	2bff      	cmp	r3, #255	@ 0xff
 800b6d2:	d00f      	beq.n	800b6f4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b6e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	22ff      	movs	r2, #255	@ 0xff
 800b6f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2243      	movs	r2, #67	@ 0x43
 800b70c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b70e:	4b03      	ldr	r3, [pc, #12]	@ (800b71c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	200000bc 	.word	0x200000bc

0800b720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2243      	movs	r2, #67	@ 0x43
 800b72c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b72e:	4b03      	ldr	r3, [pc, #12]	@ (800b73c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b730:	4618      	mov	r0, r3
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20000078 	.word	0x20000078

0800b740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2243      	movs	r2, #67	@ 0x43
 800b74c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b74e:	4b03      	ldr	r3, [pc, #12]	@ (800b75c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000100 	.word	0x20000100

0800b760 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	220a      	movs	r2, #10
 800b76c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b76e:	4b03      	ldr	r3, [pc, #12]	@ (800b77c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	bc80      	pop	{r7}
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	20000034 	.word	0x20000034

0800b780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b78a:	2302      	movs	r3, #2
 800b78c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d005      	beq.n	800b7a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7ca:	88fa      	ldrh	r2, [r7, #6]
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bc80      	pop	{r7}
 800b7dc:	4770      	bx	lr

0800b7de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr

0800b804 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b812:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d01c      	beq.n	800b858 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b824:	2b00      	cmp	r3, #0
 800b826:	d115      	bne.n	800b854 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b846:	b29b      	uxth	r3, r3
 800b848:	2181      	movs	r1, #129	@ 0x81
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f001 fccf 	bl	800d1ee <USBD_LL_Transmit>

      return USBD_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	e002      	b.n	800b85a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b854:	2301      	movs	r3, #1
 800b856:	e000      	b.n	800b85a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b858:	2302      	movs	r3, #2
  }
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b870:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d017      	beq.n	800b8ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7c1b      	ldrb	r3, [r3, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d109      	bne.n	800b898 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b88a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b88e:	2101      	movs	r1, #1
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f001 fccf 	bl	800d234 <USBD_LL_PrepareReceive>
 800b896:	e007      	b.n	800b8a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b89e:	2340      	movs	r3, #64	@ 0x40
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fcc6 	bl	800d234 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e000      	b.n	800b8ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b8ac:	2302      	movs	r3, #2
  }
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	60b9      	str	r1, [r7, #8]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e01a      	b.n	800b904 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	79fa      	ldrb	r2, [r7, #7]
 800b8fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f001 fb33 	bl	800cf68 <USBD_LL_Init>

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
 800b92c:	e001      	b.n	800b932 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b92e:	2302      	movs	r3, #2
 800b930:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc80      	pop	{r7}
 800b93c:	4770      	bx	lr

0800b93e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 fb68 	bl	800d01c <USBD_LL_Start>

  return USBD_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	bc80      	pop	{r7}
 800b968:	4770      	bx	lr

0800b96a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	460b      	mov	r3, r1
 800b974:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b976:	2302      	movs	r3, #2
 800b978:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00c      	beq.n	800b99e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	4611      	mov	r1, r2
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	78fa      	ldrb	r2, [r7, #3]
 800b9be:	4611      	mov	r1, r2
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	4798      	blx	r3

  return USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 fed8 	bl	800c796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba02:	f003 031f 	and.w	r3, r3, #31
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d016      	beq.n	800ba38 <USBD_LL_SetupStage+0x6a>
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d81c      	bhi.n	800ba48 <USBD_LL_SetupStage+0x7a>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <USBD_LL_SetupStage+0x4a>
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d008      	beq.n	800ba28 <USBD_LL_SetupStage+0x5a>
 800ba16:	e017      	b.n	800ba48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f9cb 	bl	800bdbc <USBD_StdDevReq>
      break;
 800ba26:	e01a      	b.n	800ba5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fa2d 	bl	800be90 <USBD_StdItfReq>
      break;
 800ba36:	e012      	b.n	800ba5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fa6d 	bl	800bf20 <USBD_StdEPReq>
      break;
 800ba46:	e00a      	b.n	800ba5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fb40 	bl	800d0dc <USBD_LL_StallEP>
      break;
 800ba5c:	bf00      	nop
  }

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	460b      	mov	r3, r1
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d14b      	bne.n	800bb14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d134      	bne.n	800baf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d919      	bls.n	800bace <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	68da      	ldr	r2, [r3, #12]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d203      	bcs.n	800babc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bab8:	b29b      	uxth	r3, r3
 800baba:	e002      	b.n	800bac2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	461a      	mov	r2, r3
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 ff54 	bl	800c974 <USBD_CtlContinueRx>
 800bacc:	e038      	b.n	800bb40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d105      	bne.n	800baf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 ff51 	bl	800c998 <USBD_CtlSendStatus>
 800baf6:	e023      	b.n	800bb40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bafe:	2b05      	cmp	r3, #5
 800bb00:	d11e      	bne.n	800bb40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f001 fae5 	bl	800d0dc <USBD_LL_StallEP>
 800bb12:	e015      	b.n	800bb40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d108      	bne.n	800bb3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	7afa      	ldrb	r2, [r7, #11]
 800bb34:	4611      	mov	r1, r2
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	4798      	blx	r3
 800bb3a:	e001      	b.n	800bb40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e000      	b.n	800bb42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b086      	sub	sp, #24
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	460b      	mov	r3, r1
 800bb54:	607a      	str	r2, [r7, #4]
 800bb56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d17f      	bne.n	800bc5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3314      	adds	r3, #20
 800bb62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d15c      	bne.n	800bc28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	68da      	ldr	r2, [r3, #12]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d915      	bls.n	800bba6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	68da      	ldr	r2, [r3, #12]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	461a      	mov	r2, r3
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 febe 	bl	800c914 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f001 fb48 	bl	800d234 <USBD_LL_PrepareReceive>
 800bba4:	e04e      	b.n	800bc44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	6912      	ldr	r2, [r2, #16]
 800bbae:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbb2:	fb01 f202 	mul.w	r2, r1, r2
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d11c      	bne.n	800bbf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d316      	bcc.n	800bbf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d20f      	bcs.n	800bbf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 fe9a 	bl	800c914 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2200      	movs	r2, #0
 800bbec:	2100      	movs	r1, #0
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f001 fb20 	bl	800d234 <USBD_LL_PrepareReceive>
 800bbf4:	e026      	b.n	800bc44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d105      	bne.n	800bc18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bc18:	2180      	movs	r1, #128	@ 0x80
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f001 fa5e 	bl	800d0dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f000 fecc 	bl	800c9be <USBD_CtlReceiveStatus>
 800bc26:	e00d      	b.n	800bc44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d004      	beq.n	800bc3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc3c:	2180      	movs	r1, #128	@ 0x80
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f001 fa4c 	bl	800d0dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d11d      	bne.n	800bc8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff fe81 	bl	800b956 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc5c:	e015      	b.n	800bc8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00d      	beq.n	800bc86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d108      	bne.n	800bc86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	7afa      	ldrb	r2, [r7, #11]
 800bc7e:	4611      	mov	r1, r2
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	4798      	blx	r3
 800bc84:	e001      	b.n	800bc8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc86:	2302      	movs	r3, #2
 800bc88:	e000      	b.n	800bc8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc9c:	2340      	movs	r3, #64	@ 0x40
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2100      	movs	r1, #0
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 f9d5 	bl	800d052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	@ 0x40
 800bcb4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcb8:	2340      	movs	r3, #64	@ 0x40
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2180      	movs	r1, #128	@ 0x80
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 f9c7 	bl	800d052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2240      	movs	r2, #64	@ 0x40
 800bcce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d009      	beq.n	800bd0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6852      	ldr	r2, [r2, #4]
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	4611      	mov	r1, r2
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	4798      	blx	r3
  }

  return USBD_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bc80      	pop	{r7}
 800bd32:	4770      	bx	lr

0800bd34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2204      	movs	r2, #4
 800bd4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bc80      	pop	{r7}
 800bd5a:	4770      	bx	lr

0800bd5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d105      	bne.n	800bd7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr

0800bd86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d10b      	bne.n	800bdb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdd2:	2b40      	cmp	r3, #64	@ 0x40
 800bdd4:	d005      	beq.n	800bde2 <USBD_StdDevReq+0x26>
 800bdd6:	2b40      	cmp	r3, #64	@ 0x40
 800bdd8:	d84f      	bhi.n	800be7a <USBD_StdDevReq+0xbe>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <USBD_StdDevReq+0x36>
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d14b      	bne.n	800be7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	4798      	blx	r3
      break;
 800bdf0:	e048      	b.n	800be84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	785b      	ldrb	r3, [r3, #1]
 800bdf6:	2b09      	cmp	r3, #9
 800bdf8:	d839      	bhi.n	800be6e <USBD_StdDevReq+0xb2>
 800bdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800be00 <USBD_StdDevReq+0x44>)
 800bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be00:	0800be51 	.word	0x0800be51
 800be04:	0800be65 	.word	0x0800be65
 800be08:	0800be6f 	.word	0x0800be6f
 800be0c:	0800be5b 	.word	0x0800be5b
 800be10:	0800be6f 	.word	0x0800be6f
 800be14:	0800be33 	.word	0x0800be33
 800be18:	0800be29 	.word	0x0800be29
 800be1c:	0800be6f 	.word	0x0800be6f
 800be20:	0800be47 	.word	0x0800be47
 800be24:	0800be3d 	.word	0x0800be3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f9dc 	bl	800c1e8 <USBD_GetDescriptor>
          break;
 800be30:	e022      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fb3f 	bl	800c4b8 <USBD_SetAddress>
          break;
 800be3a:	e01d      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fb7e 	bl	800c540 <USBD_SetConfig>
          break;
 800be44:	e018      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fc07 	bl	800c65c <USBD_GetConfig>
          break;
 800be4e:	e013      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fc37 	bl	800c6c6 <USBD_GetStatus>
          break;
 800be58:	e00e      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fc65 	bl	800c72c <USBD_SetFeature>
          break;
 800be62:	e009      	b.n	800be78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fc74 	bl	800c754 <USBD_ClrFeature>
          break;
 800be6c:	e004      	b.n	800be78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fcc9 	bl	800c808 <USBD_CtlError>
          break;
 800be76:	bf00      	nop
      }
      break;
 800be78:	e004      	b.n	800be84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fcc3 	bl	800c808 <USBD_CtlError>
      break;
 800be82:	bf00      	nop
  }

  return ret;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop

0800be90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bea6:	2b40      	cmp	r3, #64	@ 0x40
 800bea8:	d005      	beq.n	800beb6 <USBD_StdItfReq+0x26>
 800beaa:	2b40      	cmp	r3, #64	@ 0x40
 800beac:	d82e      	bhi.n	800bf0c <USBD_StdItfReq+0x7c>
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <USBD_StdItfReq+0x26>
 800beb2:	2b20      	cmp	r3, #32
 800beb4:	d12a      	bne.n	800bf0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bebc:	3b01      	subs	r3, #1
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d81d      	bhi.n	800befe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	889b      	ldrh	r3, [r3, #4]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d813      	bhi.n	800bef4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	88db      	ldrh	r3, [r3, #6]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d110      	bne.n	800bf08 <USBD_StdItfReq+0x78>
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10d      	bne.n	800bf08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fd53 	bl	800c998 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bef2:	e009      	b.n	800bf08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fc86 	bl	800c808 <USBD_CtlError>
          break;
 800befc:	e004      	b.n	800bf08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fc81 	bl	800c808 <USBD_CtlError>
          break;
 800bf06:	e000      	b.n	800bf0a <USBD_StdItfReq+0x7a>
          break;
 800bf08:	bf00      	nop
      }
      break;
 800bf0a:	e004      	b.n	800bf16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fc7a 	bl	800c808 <USBD_CtlError>
      break;
 800bf14:	bf00      	nop
  }

  return USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	889b      	ldrh	r3, [r3, #4]
 800bf32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf3c:	2b40      	cmp	r3, #64	@ 0x40
 800bf3e:	d007      	beq.n	800bf50 <USBD_StdEPReq+0x30>
 800bf40:	2b40      	cmp	r3, #64	@ 0x40
 800bf42:	f200 8146 	bhi.w	800c1d2 <USBD_StdEPReq+0x2b2>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <USBD_StdEPReq+0x40>
 800bf4a:	2b20      	cmp	r3, #32
 800bf4c:	f040 8141 	bne.w	800c1d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
      break;
 800bf5e:	e13d      	b.n	800c1dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf68:	2b20      	cmp	r3, #32
 800bf6a:	d10a      	bne.n	800bf82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	e12d      	b.n	800c1de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d007      	beq.n	800bf9a <USBD_StdEPReq+0x7a>
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	f300 811b 	bgt.w	800c1c6 <USBD_StdEPReq+0x2a6>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d072      	beq.n	800c07a <USBD_StdEPReq+0x15a>
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d03a      	beq.n	800c00e <USBD_StdEPReq+0xee>
 800bf98:	e115      	b.n	800c1c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d002      	beq.n	800bfaa <USBD_StdEPReq+0x8a>
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d015      	beq.n	800bfd4 <USBD_StdEPReq+0xb4>
 800bfa8:	e02b      	b.n	800c002 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfaa:	7bbb      	ldrb	r3, [r7, #14]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00c      	beq.n	800bfca <USBD_StdEPReq+0xaa>
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	2b80      	cmp	r3, #128	@ 0x80
 800bfb4:	d009      	beq.n	800bfca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f001 f88e 	bl	800d0dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfc0:	2180      	movs	r1, #128	@ 0x80
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 f88a 	bl	800d0dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfc8:	e020      	b.n	800c00c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fc1b 	bl	800c808 <USBD_CtlError>
              break;
 800bfd2:	e01b      	b.n	800c00c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	885b      	ldrh	r3, [r3, #2]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10e      	bne.n	800bffa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00b      	beq.n	800bffa <USBD_StdEPReq+0xda>
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	2b80      	cmp	r3, #128	@ 0x80
 800bfe6:	d008      	beq.n	800bffa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	88db      	ldrh	r3, [r3, #6]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d104      	bne.n	800bffa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 f871 	bl	800d0dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fccc 	bl	800c998 <USBD_CtlSendStatus>

              break;
 800c000:	e004      	b.n	800c00c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fbff 	bl	800c808 <USBD_CtlError>
              break;
 800c00a:	bf00      	nop
          }
          break;
 800c00c:	e0e0      	b.n	800c1d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c014:	2b02      	cmp	r3, #2
 800c016:	d002      	beq.n	800c01e <USBD_StdEPReq+0xfe>
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d015      	beq.n	800c048 <USBD_StdEPReq+0x128>
 800c01c:	e026      	b.n	800c06c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00c      	beq.n	800c03e <USBD_StdEPReq+0x11e>
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b80      	cmp	r3, #128	@ 0x80
 800c028:	d009      	beq.n	800c03e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 f854 	bl	800d0dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c034:	2180      	movs	r1, #128	@ 0x80
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 f850 	bl	800d0dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c03c:	e01c      	b.n	800c078 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fbe1 	bl	800c808 <USBD_CtlError>
              break;
 800c046:	e017      	b.n	800c078 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	885b      	ldrh	r3, [r3, #2]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d112      	bne.n	800c076 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f001 f85b 	bl	800d11a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fc97 	bl	800c998 <USBD_CtlSendStatus>
              }
              break;
 800c06a:	e004      	b.n	800c076 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fbca 	bl	800c808 <USBD_CtlError>
              break;
 800c074:	e000      	b.n	800c078 <USBD_StdEPReq+0x158>
              break;
 800c076:	bf00      	nop
          }
          break;
 800c078:	e0aa      	b.n	800c1d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c080:	2b02      	cmp	r3, #2
 800c082:	d002      	beq.n	800c08a <USBD_StdEPReq+0x16a>
 800c084:	2b03      	cmp	r3, #3
 800c086:	d032      	beq.n	800c0ee <USBD_StdEPReq+0x1ce>
 800c088:	e097      	b.n	800c1ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <USBD_StdEPReq+0x180>
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	2b80      	cmp	r3, #128	@ 0x80
 800c094:	d004      	beq.n	800c0a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fbb5 	bl	800c808 <USBD_CtlError>
                break;
 800c09e:	e091      	b.n	800c1c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da0b      	bge.n	800c0c0 <USBD_StdEPReq+0x1a0>
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	3310      	adds	r3, #16
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3304      	adds	r3, #4
 800c0be:	e00b      	b.n	800c0d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fbf8 	bl	800c8dc <USBD_CtlSendData>
              break;
 800c0ec:	e06a      	b.n	800c1c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	da11      	bge.n	800c11a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	f003 020f 	and.w	r2, r3, #15
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	3318      	adds	r3, #24
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d117      	bne.n	800c140 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fb78 	bl	800c808 <USBD_CtlError>
                  break;
 800c118:	e054      	b.n	800c1c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	f003 020f 	and.w	r2, r3, #15
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d104      	bne.n	800c140 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fb65 	bl	800c808 <USBD_CtlError>
                  break;
 800c13e:	e041      	b.n	800c1c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c144:	2b00      	cmp	r3, #0
 800c146:	da0b      	bge.n	800c160 <USBD_StdEPReq+0x240>
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	3310      	adds	r3, #16
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	4413      	add	r3, r2
 800c15c:	3304      	adds	r3, #4
 800c15e:	e00b      	b.n	800c178 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	4413      	add	r3, r2
 800c176:	3304      	adds	r3, #4
 800c178:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <USBD_StdEPReq+0x266>
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b80      	cmp	r3, #128	@ 0x80
 800c184:	d103      	bne.n	800c18e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	e00e      	b.n	800c1ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 ffe0 	bl	800d158 <USBD_LL_IsStallEP>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e002      	b.n	800c1ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb92 	bl	800c8dc <USBD_CtlSendData>
              break;
 800c1b8:	e004      	b.n	800c1c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fb23 	bl	800c808 <USBD_CtlError>
              break;
 800c1c2:	bf00      	nop
          }
          break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fb1d 	bl	800c808 <USBD_CtlError>
          break;
 800c1ce:	bf00      	nop
      }
      break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fb17 	bl	800c808 <USBD_CtlError>
      break;
 800c1da:	bf00      	nop
  }

  return ret;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	0a1b      	lsrs	r3, r3, #8
 800c204:	b29b      	uxth	r3, r3
 800c206:	3b01      	subs	r3, #1
 800c208:	2b06      	cmp	r3, #6
 800c20a:	f200 8128 	bhi.w	800c45e <USBD_GetDescriptor+0x276>
 800c20e:	a201      	add	r2, pc, #4	@ (adr r2, 800c214 <USBD_GetDescriptor+0x2c>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c45f 	.word	0x0800c45f
 800c224:	0800c45f 	.word	0x0800c45f
 800c228:	0800c3ff 	.word	0x0800c3ff
 800c22c:	0800c42b 	.word	0x0800c42b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7c12      	ldrb	r2, [r2, #16]
 800c23c:	f107 0108 	add.w	r1, r7, #8
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
 800c244:	60f8      	str	r0, [r7, #12]
      break;
 800c246:	e112      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7c1b      	ldrb	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10d      	bne.n	800c26c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c258:	f107 0208 	add.w	r2, r7, #8
 800c25c:	4610      	mov	r0, r2
 800c25e:	4798      	blx	r3
 800c260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	2202      	movs	r2, #2
 800c268:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c26a:	e100      	b.n	800c46e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c274:	f107 0208 	add.w	r2, r7, #8
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	2202      	movs	r2, #2
 800c284:	701a      	strb	r2, [r3, #0]
      break;
 800c286:	e0f2      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	885b      	ldrh	r3, [r3, #2]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b05      	cmp	r3, #5
 800c290:	f200 80ac 	bhi.w	800c3ec <USBD_GetDescriptor+0x204>
 800c294:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <USBD_GetDescriptor+0xb4>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2e9 	.word	0x0800c2e9
 800c2a4:	0800c31d 	.word	0x0800c31d
 800c2a8:	0800c351 	.word	0x0800c351
 800c2ac:	0800c385 	.word	0x0800c385
 800c2b0:	0800c3b9 	.word	0x0800c3b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00b      	beq.n	800c2d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7c12      	ldrb	r2, [r2, #16]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
 800c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d6:	e091      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa94 	bl	800c808 <USBD_CtlError>
            err++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e6:	e089      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	7c12      	ldrb	r2, [r2, #16]
 800c300:	f107 0108 	add.w	r1, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30a:	e077      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa7a 	bl	800c808 <USBD_CtlError>
            err++;
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	3301      	adds	r3, #1
 800c318:	72fb      	strb	r3, [r7, #11]
          break;
 800c31a:	e06f      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33e:	e05d      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa60 	bl	800c808 <USBD_CtlError>
            err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
          break;
 800c34e:	e055      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c372:	e043      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa46 	bl	800c808 <USBD_CtlError>
            err++;
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	3301      	adds	r3, #1
 800c380:	72fb      	strb	r3, [r7, #11]
          break;
 800c382:	e03b      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	f107 0108 	add.w	r1, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3a6:	e029      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa2c 	bl	800c808 <USBD_CtlError>
            err++;
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3b6:	e021      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3da:	e00f      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fa12 	bl	800c808 <USBD_CtlError>
            err++;
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ea:	e007      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fa0a 	bl	800c808 <USBD_CtlError>
          err++;
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c3fa:	e038      	b.n	800c46e <USBD_GetDescriptor+0x286>
 800c3fc:	e037      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	7c1b      	ldrb	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d109      	bne.n	800c41a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c40e:	f107 0208 	add.w	r2, r7, #8
 800c412:	4610      	mov	r0, r2
 800c414:	4798      	blx	r3
 800c416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c418:	e029      	b.n	800c46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f9f3 	bl	800c808 <USBD_CtlError>
        err++;
 800c422:	7afb      	ldrb	r3, [r7, #11]
 800c424:	3301      	adds	r3, #1
 800c426:	72fb      	strb	r3, [r7, #11]
      break;
 800c428:	e021      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	7c1b      	ldrb	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10d      	bne.n	800c44e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43a:	f107 0208 	add.w	r2, r7, #8
 800c43e:	4610      	mov	r0, r2
 800c440:	4798      	blx	r3
 800c442:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3301      	adds	r3, #1
 800c448:	2207      	movs	r2, #7
 800c44a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c44c:	e00f      	b.n	800c46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f9d9 	bl	800c808 <USBD_CtlError>
        err++;
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	3301      	adds	r3, #1
 800c45a:	72fb      	strb	r3, [r7, #11]
      break;
 800c45c:	e007      	b.n	800c46e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f9d1 	bl	800c808 <USBD_CtlError>
      err++;
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	3301      	adds	r3, #1
 800c46a:	72fb      	strb	r3, [r7, #11]
      break;
 800c46c:	bf00      	nop
  }

  if (err != 0U)
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d11c      	bne.n	800c4ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c474:	893b      	ldrh	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d011      	beq.n	800c49e <USBD_GetDescriptor+0x2b6>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	88db      	ldrh	r3, [r3, #6]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00d      	beq.n	800c49e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	88da      	ldrh	r2, [r3, #6]
 800c486:	893b      	ldrh	r3, [r7, #8]
 800c488:	4293      	cmp	r3, r2
 800c48a:	bf28      	it	cs
 800c48c:	4613      	movcs	r3, r2
 800c48e:	b29b      	uxth	r3, r3
 800c490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c492:	893b      	ldrh	r3, [r7, #8]
 800c494:	461a      	mov	r2, r3
 800c496:	68f9      	ldr	r1, [r7, #12]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa1f 	bl	800c8dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	88db      	ldrh	r3, [r3, #6]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d104      	bne.n	800c4b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa76 	bl	800c998 <USBD_CtlSendStatus>
 800c4ac:	e000      	b.n	800c4b0 <USBD_GetDescriptor+0x2c8>
    return;
 800c4ae:	bf00      	nop
    }
  }
}
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop

0800c4b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	889b      	ldrh	r3, [r3, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d130      	bne.n	800c52c <USBD_SetAddress+0x74>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	88db      	ldrh	r3, [r3, #6]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d12c      	bne.n	800c52c <USBD_SetAddress+0x74>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	885b      	ldrh	r3, [r3, #2]
 800c4d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4d8:	d828      	bhi.n	800c52c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	885b      	ldrh	r3, [r3, #2]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d104      	bne.n	800c4fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f988 	bl	800c808 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f8:	e01d      	b.n	800c536 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7bfa      	ldrb	r2, [r7, #15]
 800c4fe:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fe52 	bl	800d1b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fa43 	bl	800c998 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c520:	e009      	b.n	800c536 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52a:	e004      	b.n	800c536 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f96a 	bl	800c808 <USBD_CtlError>
  }
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	885b      	ldrh	r3, [r3, #2]
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	4b41      	ldr	r3, [pc, #260]	@ (800c658 <USBD_SetConfig+0x118>)
 800c552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c554:	4b40      	ldr	r3, [pc, #256]	@ (800c658 <USBD_SetConfig+0x118>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d904      	bls.n	800c566 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f952 	bl	800c808 <USBD_CtlError>
 800c564:	e075      	b.n	800c652 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d002      	beq.n	800c576 <USBD_SetConfig+0x36>
 800c570:	2b03      	cmp	r3, #3
 800c572:	d023      	beq.n	800c5bc <USBD_SetConfig+0x7c>
 800c574:	e062      	b.n	800c63c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c576:	4b38      	ldr	r3, [pc, #224]	@ (800c658 <USBD_SetConfig+0x118>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d01a      	beq.n	800c5b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c57e:	4b36      	ldr	r3, [pc, #216]	@ (800c658 <USBD_SetConfig+0x118>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2203      	movs	r2, #3
 800c58c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c590:	4b31      	ldr	r3, [pc, #196]	@ (800c658 <USBD_SetConfig+0x118>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff f9e7 	bl	800b96a <USBD_SetClassConfig>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d104      	bne.n	800c5ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f92f 	bl	800c808 <USBD_CtlError>
            return;
 800c5aa:	e052      	b.n	800c652 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f9f3 	bl	800c998 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5b2:	e04e      	b.n	800c652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f9ef 	bl	800c998 <USBD_CtlSendStatus>
        break;
 800c5ba:	e04a      	b.n	800c652 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c5bc:	4b26      	ldr	r3, [pc, #152]	@ (800c658 <USBD_SetConfig+0x118>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d112      	bne.n	800c5ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c5cc:	4b22      	ldr	r3, [pc, #136]	@ (800c658 <USBD_SetConfig+0x118>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c5d6:	4b20      	ldr	r3, [pc, #128]	@ (800c658 <USBD_SetConfig+0x118>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff f9e3 	bl	800b9a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f9d8 	bl	800c998 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5e8:	e033      	b.n	800c652 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c658 <USBD_SetConfig+0x118>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d01d      	beq.n	800c634 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff f9d1 	bl	800b9a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c606:	4b14      	ldr	r3, [pc, #80]	@ (800c658 <USBD_SetConfig+0x118>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c610:	4b11      	ldr	r3, [pc, #68]	@ (800c658 <USBD_SetConfig+0x118>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff f9a7 	bl	800b96a <USBD_SetClassConfig>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d104      	bne.n	800c62c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f8ef 	bl	800c808 <USBD_CtlError>
            return;
 800c62a:	e012      	b.n	800c652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f9b3 	bl	800c998 <USBD_CtlSendStatus>
        break;
 800c632:	e00e      	b.n	800c652 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f9af 	bl	800c998 <USBD_CtlSendStatus>
        break;
 800c63a:	e00a      	b.n	800c652 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f8e2 	bl	800c808 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c644:	4b04      	ldr	r3, [pc, #16]	@ (800c658 <USBD_SetConfig+0x118>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff f9ac 	bl	800b9a8 <USBD_ClrClassConfig>
        break;
 800c650:	bf00      	nop
    }
  }
}
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20000438 	.word	0x20000438

0800c65c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	88db      	ldrh	r3, [r3, #6]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d004      	beq.n	800c678 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f8c9 	bl	800c808 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c676:	e022      	b.n	800c6be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c67e:	2b02      	cmp	r3, #2
 800c680:	dc02      	bgt.n	800c688 <USBD_GetConfig+0x2c>
 800c682:	2b00      	cmp	r3, #0
 800c684:	dc03      	bgt.n	800c68e <USBD_GetConfig+0x32>
 800c686:	e015      	b.n	800c6b4 <USBD_GetConfig+0x58>
 800c688:	2b03      	cmp	r3, #3
 800c68a:	d00b      	beq.n	800c6a4 <USBD_GetConfig+0x48>
 800c68c:	e012      	b.n	800c6b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3308      	adds	r3, #8
 800c698:	2201      	movs	r2, #1
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f91d 	bl	800c8dc <USBD_CtlSendData>
        break;
 800c6a2:	e00c      	b.n	800c6be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f915 	bl	800c8dc <USBD_CtlSendData>
        break;
 800c6b2:	e004      	b.n	800c6be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f8a6 	bl	800c808 <USBD_CtlError>
        break;
 800c6bc:	bf00      	nop
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d81e      	bhi.n	800c71a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	88db      	ldrh	r3, [r3, #6]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d004      	beq.n	800c6ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f88e 	bl	800c808 <USBD_CtlError>
        break;
 800c6ec:	e01a      	b.n	800c724 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d005      	beq.n	800c70a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f043 0202 	orr.w	r2, r3, #2
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	330c      	adds	r3, #12
 800c70e:	2202      	movs	r2, #2
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f8e2 	bl	800c8dc <USBD_CtlSendData>
      break;
 800c718:	e004      	b.n	800c724 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f873 	bl	800c808 <USBD_CtlError>
      break;
 800c722:	bf00      	nop
  }
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	885b      	ldrh	r3, [r3, #2]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d106      	bne.n	800c74c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2201      	movs	r2, #1
 800c742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f926 	bl	800c998 <USBD_CtlSendStatus>
  }
}
 800c74c:	bf00      	nop
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c764:	3b01      	subs	r3, #1
 800c766:	2b02      	cmp	r3, #2
 800c768:	d80b      	bhi.n	800c782 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	885b      	ldrh	r3, [r3, #2]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d10c      	bne.n	800c78c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f90c 	bl	800c998 <USBD_CtlSendStatus>
      }
      break;
 800c780:	e004      	b.n	800c78c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f83f 	bl	800c808 <USBD_CtlError>
      break;
 800c78a:	e000      	b.n	800c78e <USBD_ClrFeature+0x3a>
      break;
 800c78c:	bf00      	nop
  }
}
 800c78e:	bf00      	nop
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781a      	ldrb	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	785a      	ldrb	r2, [r3, #1]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	3303      	adds	r3, #3
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	4413      	add	r3, r2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	3305      	adds	r3, #5
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	021b      	lsls	r3, r3, #8
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	4413      	add	r3, r2
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3306      	adds	r3, #6
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	3307      	adds	r3, #7
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	021b      	lsls	r3, r3, #8
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	4413      	add	r3, r2
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	80da      	strh	r2, [r3, #6]

}
 800c7fe:	bf00      	nop
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	bc80      	pop	{r7}
 800c806:	4770      	bx	lr

0800c808 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c812:	2180      	movs	r1, #128	@ 0x80
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fc61 	bl	800d0dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c81a:	2100      	movs	r1, #0
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fc5d 	bl	800d0dc <USBD_LL_StallEP>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d032      	beq.n	800c8a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f834 	bl	800c8ae <USBD_GetLen>
 800c846:	4603      	mov	r3, r0
 800c848:	3301      	adds	r3, #1
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	75fa      	strb	r2, [r7, #23]
 800c85a:	461a      	mov	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4413      	add	r3, r2
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	7812      	ldrb	r2, [r2, #0]
 800c864:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	75fa      	strb	r2, [r7, #23]
 800c86c:	461a      	mov	r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	4413      	add	r3, r2
 800c872:	2203      	movs	r2, #3
 800c874:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c876:	e012      	b.n	800c89e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	60fa      	str	r2, [r7, #12]
 800c87e:	7dfa      	ldrb	r2, [r7, #23]
 800c880:	1c51      	adds	r1, r2, #1
 800c882:	75f9      	strb	r1, [r7, #23]
 800c884:	4611      	mov	r1, r2
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	440a      	add	r2, r1
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	75fa      	strb	r2, [r7, #23]
 800c894:	461a      	mov	r2, r3
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	4413      	add	r3, r2
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1e8      	bne.n	800c878 <USBD_GetString+0x4e>
    }
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b085      	sub	sp, #20
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c8ba:	e005      	b.n	800c8c8 <USBD_GetLen+0x1a>
  {
    len++;
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1f5      	bne.n	800c8bc <USBD_GetLen+0xe>
  }

  return len;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bc80      	pop	{r7}
 800c8da:	4770      	bx	lr

0800c8dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c8f2:	88fa      	ldrh	r2, [r7, #6]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c8f8:	88fa      	ldrh	r2, [r7, #6]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	2100      	movs	r1, #0
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 fc72 	bl	800d1ee <USBD_LL_Transmit>

  return USBD_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4613      	mov	r3, r2
 800c920:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c922:	88fb      	ldrh	r3, [r7, #6]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	2100      	movs	r1, #0
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 fc60 	bl	800d1ee <USBD_LL_Transmit>

  return USBD_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	4613      	mov	r3, r2
 800c944:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2203      	movs	r2, #3
 800c94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c94e:	88fa      	ldrh	r2, [r7, #6]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c95e:	88fb      	ldrh	r3, [r7, #6]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	2100      	movs	r1, #0
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fc65 	bl	800d234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c982:	88fb      	ldrh	r3, [r7, #6]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	2100      	movs	r1, #0
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fc53 	bl	800d234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2204      	movs	r2, #4
 800c9a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fc1d 	bl	800d1ee <USBD_LL_Transmit>

  return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2205      	movs	r2, #5
 800c9ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fc2d 	bl	800d234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	4912      	ldr	r1, [pc, #72]	@ (800ca34 <MX_USB_DEVICE_Init+0x50>)
 800c9ec:	4812      	ldr	r0, [pc, #72]	@ (800ca38 <MX_USB_DEVICE_Init+0x54>)
 800c9ee:	f7fe ff62 	bl	800b8b6 <USBD_Init>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9f8:	f7f7 f998 	bl	8003d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9fc:	490f      	ldr	r1, [pc, #60]	@ (800ca3c <MX_USB_DEVICE_Init+0x58>)
 800c9fe:	480e      	ldr	r0, [pc, #56]	@ (800ca38 <MX_USB_DEVICE_Init+0x54>)
 800ca00:	f7fe ff84 	bl	800b90c <USBD_RegisterClass>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca0a:	f7f7 f98f 	bl	8003d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca0e:	490c      	ldr	r1, [pc, #48]	@ (800ca40 <MX_USB_DEVICE_Init+0x5c>)
 800ca10:	4809      	ldr	r0, [pc, #36]	@ (800ca38 <MX_USB_DEVICE_Init+0x54>)
 800ca12:	f7fe feb5 	bl	800b780 <USBD_CDC_RegisterInterface>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca1c:	f7f7 f986 	bl	8003d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca20:	4805      	ldr	r0, [pc, #20]	@ (800ca38 <MX_USB_DEVICE_Init+0x54>)
 800ca22:	f7fe ff8c 	bl	800b93e <USBD_Start>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca2c:	f7f7 f97e 	bl	8003d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca30:	bf00      	nop
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20000154 	.word	0x20000154
 800ca38:	2000043c 	.word	0x2000043c
 800ca3c:	20000040 	.word	0x20000040
 800ca40:	20000144 	.word	0x20000144

0800ca44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4905      	ldr	r1, [pc, #20]	@ (800ca60 <CDC_Init_FS+0x1c>)
 800ca4c:	4805      	ldr	r0, [pc, #20]	@ (800ca64 <CDC_Init_FS+0x20>)
 800ca4e:	f7fe fead 	bl	800b7ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca52:	4905      	ldr	r1, [pc, #20]	@ (800ca68 <CDC_Init_FS+0x24>)
 800ca54:	4803      	ldr	r0, [pc, #12]	@ (800ca64 <CDC_Init_FS+0x20>)
 800ca56:	f7fe fec2 	bl	800b7de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20000ae8 	.word	0x20000ae8
 800ca64:	2000043c 	.word	0x2000043c
 800ca68:	20000700 	.word	0x20000700

0800ca6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bc80      	pop	{r7}
 800ca78:	4770      	bx	lr
	...

0800ca7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	6039      	str	r1, [r7, #0]
 800ca86:	71fb      	strb	r3, [r7, #7]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	2b23      	cmp	r3, #35	@ 0x23
 800ca90:	d84a      	bhi.n	800cb28 <CDC_Control_FS+0xac>
 800ca92:	a201      	add	r2, pc, #4	@ (adr r2, 800ca98 <CDC_Control_FS+0x1c>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800cb29 	.word	0x0800cb29
 800ca9c:	0800cb29 	.word	0x0800cb29
 800caa0:	0800cb29 	.word	0x0800cb29
 800caa4:	0800cb29 	.word	0x0800cb29
 800caa8:	0800cb29 	.word	0x0800cb29
 800caac:	0800cb29 	.word	0x0800cb29
 800cab0:	0800cb29 	.word	0x0800cb29
 800cab4:	0800cb29 	.word	0x0800cb29
 800cab8:	0800cb29 	.word	0x0800cb29
 800cabc:	0800cb29 	.word	0x0800cb29
 800cac0:	0800cb29 	.word	0x0800cb29
 800cac4:	0800cb29 	.word	0x0800cb29
 800cac8:	0800cb29 	.word	0x0800cb29
 800cacc:	0800cb29 	.word	0x0800cb29
 800cad0:	0800cb29 	.word	0x0800cb29
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800cb29 	.word	0x0800cb29
 800cadc:	0800cb29 	.word	0x0800cb29
 800cae0:	0800cb29 	.word	0x0800cb29
 800cae4:	0800cb29 	.word	0x0800cb29
 800cae8:	0800cb29 	.word	0x0800cb29
 800caec:	0800cb29 	.word	0x0800cb29
 800caf0:	0800cb29 	.word	0x0800cb29
 800caf4:	0800cb29 	.word	0x0800cb29
 800caf8:	0800cb29 	.word	0x0800cb29
 800cafc:	0800cb29 	.word	0x0800cb29
 800cb00:	0800cb29 	.word	0x0800cb29
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb29 	.word	0x0800cb29
 800cb0c:	0800cb29 	.word	0x0800cb29
 800cb10:	0800cb29 	.word	0x0800cb29
 800cb14:	0800cb29 	.word	0x0800cb29
 800cb18:	0800cb29 	.word	0x0800cb29
 800cb1c:	0800cb29 	.word	0x0800cb29
 800cb20:	0800cb29 	.word	0x0800cb29
 800cb24:	0800cb29 	.word	0x0800cb29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb28:	bf00      	nop
  }

  return (USBD_OK);
 800cb2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bc80      	pop	{r7}
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop

0800cb38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	480a      	ldr	r0, [pc, #40]	@ (800cb70 <CDC_Receive_FS+0x38>)
 800cb46:	f7fe fe4a 	bl	800b7de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb4a:	4809      	ldr	r0, [pc, #36]	@ (800cb70 <CDC_Receive_FS+0x38>)
 800cb4c:	f7fe fe89 	bl	800b862 <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d006      	beq.n	800cb66 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	4905      	ldr	r1, [pc, #20]	@ (800cb74 <CDC_Receive_FS+0x3c>)
 800cb60:	4805      	ldr	r0, [pc, #20]	@ (800cb78 <CDC_Receive_FS+0x40>)
 800cb62:	f000 fc71 	bl	800d448 <memcpy>
  }
  return (USBD_OK);
 800cb66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	2000043c 	.word	0x2000043c
 800cb74:	20000700 	.word	0x20000700
 800cb78:	20000350 	.word	0x20000350

0800cb7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb8c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbc4 <CDC_Transmit_FS+0x48>)
 800cb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e00b      	b.n	800cbba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cba2:	887b      	ldrh	r3, [r7, #2]
 800cba4:	461a      	mov	r2, r3
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4806      	ldr	r0, [pc, #24]	@ (800cbc4 <CDC_Transmit_FS+0x48>)
 800cbaa:	f7fe fdff 	bl	800b7ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbae:	4805      	ldr	r0, [pc, #20]	@ (800cbc4 <CDC_Transmit_FS+0x48>)
 800cbb0:	f7fe fe28 	bl	800b804 <USBD_CDC_TransmitPacket>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	2000043c 	.word	0x2000043c

0800cbc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	6039      	str	r1, [r7, #0]
 800cbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2212      	movs	r2, #18
 800cbd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbda:	4b03      	ldr	r3, [pc, #12]	@ (800cbe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc80      	pop	{r7}
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20000170 	.word	0x20000170

0800cbec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2204      	movs	r2, #4
 800cbfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbfe:	4b03      	ldr	r3, [pc, #12]	@ (800cc0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bc80      	pop	{r7}
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	20000184 	.word	0x20000184

0800cc10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	6039      	str	r1, [r7, #0]
 800cc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d105      	bne.n	800cc2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	4907      	ldr	r1, [pc, #28]	@ (800cc44 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc26:	4808      	ldr	r0, [pc, #32]	@ (800cc48 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc28:	f7ff fdff 	bl	800c82a <USBD_GetString>
 800cc2c:	e004      	b.n	800cc38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	4904      	ldr	r1, [pc, #16]	@ (800cc44 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc32:	4805      	ldr	r0, [pc, #20]	@ (800cc48 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc34:	f7ff fdf9 	bl	800c82a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc38:	4b02      	ldr	r3, [pc, #8]	@ (800cc44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20000ed0 	.word	0x20000ed0
 800cc48:	0800e730 	.word	0x0800e730

0800cc4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	6039      	str	r1, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	4904      	ldr	r1, [pc, #16]	@ (800cc6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc5c:	4804      	ldr	r0, [pc, #16]	@ (800cc70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc5e:	f7ff fde4 	bl	800c82a <USBD_GetString>
  return USBD_StrDesc;
 800cc62:	4b02      	ldr	r3, [pc, #8]	@ (800cc6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20000ed0 	.word	0x20000ed0
 800cc70:	0800e748 	.word	0x0800e748

0800cc74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	221a      	movs	r2, #26
 800cc84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc86:	f000 f843 	bl	800cd10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc8a:	4b02      	ldr	r3, [pc, #8]	@ (800cc94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	20000188 	.word	0x20000188

0800cc98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	6039      	str	r1, [r7, #0]
 800cca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d105      	bne.n	800ccb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	4907      	ldr	r1, [pc, #28]	@ (800cccc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccae:	4808      	ldr	r0, [pc, #32]	@ (800ccd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccb0:	f7ff fdbb 	bl	800c82a <USBD_GetString>
 800ccb4:	e004      	b.n	800ccc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4904      	ldr	r1, [pc, #16]	@ (800cccc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccba:	4805      	ldr	r0, [pc, #20]	@ (800ccd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccbc:	f7ff fdb5 	bl	800c82a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccc0:	4b02      	ldr	r3, [pc, #8]	@ (800cccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20000ed0 	.word	0x20000ed0
 800ccd0:	0800e75c 	.word	0x0800e75c

0800ccd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	6039      	str	r1, [r7, #0]
 800ccde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d105      	bne.n	800ccf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	4907      	ldr	r1, [pc, #28]	@ (800cd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccea:	4808      	ldr	r0, [pc, #32]	@ (800cd0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccec:	f7ff fd9d 	bl	800c82a <USBD_GetString>
 800ccf0:	e004      	b.n	800ccfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4904      	ldr	r1, [pc, #16]	@ (800cd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccf6:	4805      	ldr	r0, [pc, #20]	@ (800cd0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf8:	f7ff fd97 	bl	800c82a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccfc:	4b02      	ldr	r3, [pc, #8]	@ (800cd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20000ed0 	.word	0x20000ed0
 800cd0c:	0800e768 	.word	0x0800e768

0800cd10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd16:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <Get_SerialNum+0x44>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd58 <Get_SerialNum+0x48>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd22:	4b0e      	ldr	r3, [pc, #56]	@ (800cd5c <Get_SerialNum+0x4c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d009      	beq.n	800cd4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd36:	2208      	movs	r2, #8
 800cd38:	4909      	ldr	r1, [pc, #36]	@ (800cd60 <Get_SerialNum+0x50>)
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f000 f814 	bl	800cd68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd40:	2204      	movs	r2, #4
 800cd42:	4908      	ldr	r1, [pc, #32]	@ (800cd64 <Get_SerialNum+0x54>)
 800cd44:	68b8      	ldr	r0, [r7, #8]
 800cd46:	f000 f80f 	bl	800cd68 <IntToUnicode>
  }
}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	1ffff7e8 	.word	0x1ffff7e8
 800cd58:	1ffff7ec 	.word	0x1ffff7ec
 800cd5c:	1ffff7f0 	.word	0x1ffff7f0
 800cd60:	2000018a 	.word	0x2000018a
 800cd64:	2000019a 	.word	0x2000019a

0800cd68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	4613      	mov	r3, r2
 800cd74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]
 800cd7e:	e027      	b.n	800cdd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0f1b      	lsrs	r3, r3, #28
 800cd84:	2b09      	cmp	r3, #9
 800cd86:	d80b      	bhi.n	800cda0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	0f1b      	lsrs	r3, r3, #28
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	4619      	mov	r1, r3
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	440b      	add	r3, r1
 800cd98:	3230      	adds	r2, #48	@ 0x30
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	e00a      	b.n	800cdb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	0f1b      	lsrs	r3, r3, #28
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	4619      	mov	r1, r3
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	440b      	add	r3, r1
 800cdb0:	3237      	adds	r2, #55	@ 0x37
 800cdb2:	b2d2      	uxtb	r2, r2
 800cdb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	75fb      	strb	r3, [r7, #23]
 800cdd0:	7dfa      	ldrb	r2, [r7, #23]
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d3d3      	bcc.n	800cd80 <IntToUnicode+0x18>
  }
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bc80      	pop	{r7}
 800cde2:	4770      	bx	lr

0800cde4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a0d      	ldr	r2, [pc, #52]	@ (800ce28 <HAL_PCD_MspInit+0x44>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d113      	bne.n	800ce1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce2c <HAL_PCD_MspInit+0x48>)
 800cdf8:	69db      	ldr	r3, [r3, #28]
 800cdfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ce2c <HAL_PCD_MspInit+0x48>)
 800cdfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce00:	61d3      	str	r3, [r2, #28]
 800ce02:	4b0a      	ldr	r3, [pc, #40]	@ (800ce2c <HAL_PCD_MspInit+0x48>)
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2100      	movs	r1, #0
 800ce12:	2014      	movs	r0, #20
 800ce14:	f7f7 fd6f 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ce18:	2014      	movs	r0, #20
 800ce1a:	f7f7 fd88 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce1e:	bf00      	nop
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	40005c00 	.word	0x40005c00
 800ce2c:	40021000 	.word	0x40021000

0800ce30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7fe fdc1 	bl	800b9ce <USBD_LL_SetupStage>
}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ce66:	78fa      	ldrb	r2, [r7, #3]
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f7fe fdf3 	bl	800ba68 <USBD_LL_DataOutStage>
}
 800ce82:	bf00      	nop
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	460b      	mov	r3, r1
 800ce94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ce9c:	78fa      	ldrb	r2, [r7, #3]
 800ce9e:	6879      	ldr	r1, [r7, #4]
 800cea0:	4613      	mov	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	440b      	add	r3, r1
 800ceaa:	333c      	adds	r3, #60	@ 0x3c
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	78fb      	ldrb	r3, [r7, #3]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	f7fe fe4a 	bl	800bb4a <USBD_LL_DataInStage>
}
 800ceb6:	bf00      	nop
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b082      	sub	sp, #8
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe ff5a 	bl	800bd86 <USBD_LL_SOF>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b084      	sub	sp, #16
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cee2:	2301      	movs	r3, #1
 800cee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d001      	beq.n	800cef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ceee:	f7f6 ff1d 	bl	8003d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cef8:	7bfa      	ldrb	r2, [r7, #15]
 800cefa:	4611      	mov	r1, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe ff0a 	bl	800bd16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fec3 	bl	800bc94 <USBD_LL_Reset>
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe ff04 	bl	800bd34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d005      	beq.n	800cf40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf34:	4b04      	ldr	r3, [pc, #16]	@ (800cf48 <HAL_PCD_SuspendCallback+0x30>)
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	4a03      	ldr	r2, [pc, #12]	@ (800cf48 <HAL_PCD_SuspendCallback+0x30>)
 800cf3a:	f043 0306 	orr.w	r3, r3, #6
 800cf3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	e000ed00 	.word	0xe000ed00

0800cf4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fefe 	bl	800bd5c <USBD_LL_Resume>
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf70:	4a28      	ldr	r2, [pc, #160]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a26      	ldr	r2, [pc, #152]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf80:	4b24      	ldr	r3, [pc, #144]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf82:	4a25      	ldr	r2, [pc, #148]	@ (800d018 <USBD_LL_Init+0xb0>)
 800cf84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf86:	4b23      	ldr	r3, [pc, #140]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf88:	2208      	movs	r2, #8
 800cf8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf8c:	4b21      	ldr	r3, [pc, #132]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf8e:	2202      	movs	r2, #2
 800cf90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf92:	4b20      	ldr	r3, [pc, #128]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cf98:	4b1e      	ldr	r3, [pc, #120]	@ (800d014 <USBD_LL_Init+0xac>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf9e:	4b1d      	ldr	r3, [pc, #116]	@ (800d014 <USBD_LL_Init+0xac>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfa4:	481b      	ldr	r0, [pc, #108]	@ (800d014 <USBD_LL_Init+0xac>)
 800cfa6:	f7f8 fcfd 	bl	80059a4 <HAL_PCD_Init>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cfb0:	f7f6 febc 	bl	8003d2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfba:	2318      	movs	r3, #24
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	f7fa f83c 	bl	800703c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfca:	2358      	movs	r3, #88	@ 0x58
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2180      	movs	r1, #128	@ 0x80
 800cfd0:	f7fa f834 	bl	800703c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfda:	23c0      	movs	r3, #192	@ 0xc0
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2181      	movs	r1, #129	@ 0x81
 800cfe0:	f7fa f82c 	bl	800703c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cfee:	2200      	movs	r2, #0
 800cff0:	2101      	movs	r1, #1
 800cff2:	f7fa f823 	bl	800703c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d000:	2200      	movs	r2, #0
 800d002:	2182      	movs	r1, #130	@ 0x82
 800d004:	f7fa f81a 	bl	800703c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	200010d0 	.word	0x200010d0
 800d018:	40005c00 	.word	0x40005c00

0800d01c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d032:	4618      	mov	r0, r3
 800d034:	f7f8 fdc1 	bl	8005bba <HAL_PCD_Start>
 800d038:	4603      	mov	r3, r0
 800d03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 f94e 	bl	800d2e0 <USBD_Get_USB_Status>
 800d044:	4603      	mov	r3, r0
 800d046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d048:	7bbb      	ldrb	r3, [r7, #14]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	4608      	mov	r0, r1
 800d05c:	4611      	mov	r1, r2
 800d05e:	461a      	mov	r2, r3
 800d060:	4603      	mov	r3, r0
 800d062:	70fb      	strb	r3, [r7, #3]
 800d064:	460b      	mov	r3, r1
 800d066:	70bb      	strb	r3, [r7, #2]
 800d068:	4613      	mov	r3, r2
 800d06a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d07a:	78bb      	ldrb	r3, [r7, #2]
 800d07c:	883a      	ldrh	r2, [r7, #0]
 800d07e:	78f9      	ldrb	r1, [r7, #3]
 800d080:	f7f8 ff39 	bl	8005ef6 <HAL_PCD_EP_Open>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f928 	bl	800d2e0 <USBD_Get_USB_Status>
 800d090:	4603      	mov	r3, r0
 800d092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d094:	7bbb      	ldrb	r3, [r7, #14]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0b8:	78fa      	ldrb	r2, [r7, #3]
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f8 ff80 	bl	8005fc2 <HAL_PCD_EP_Close>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 f909 	bl	800d2e0 <USBD_Get_USB_Status>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0f6:	78fa      	ldrb	r2, [r7, #3]
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f9 f840 	bl	8006180 <HAL_PCD_EP_SetStall>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 f8ea 	bl	800d2e0 <USBD_Get_USB_Status>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d110:	7bbb      	ldrb	r3, [r7, #14]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	460b      	mov	r3, r1
 800d124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f7f9 f881 	bl	8006240 <HAL_PCD_EP_ClrStall>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	4618      	mov	r0, r3
 800d146:	f000 f8cb 	bl	800d2e0 <USBD_Get_USB_Status>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d16a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d16c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d170:	2b00      	cmp	r3, #0
 800d172:	da0c      	bge.n	800d18e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d174:	78fb      	ldrb	r3, [r7, #3]
 800d176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d17a:	68f9      	ldr	r1, [r7, #12]
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	4613      	mov	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	440b      	add	r3, r1
 800d188:	3302      	adds	r3, #2
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	e00b      	b.n	800d1a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d18e:	78fb      	ldrb	r3, [r7, #3]
 800d190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d194:	68f9      	ldr	r1, [r7, #12]
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	440b      	add	r3, r1
 800d1a0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d1a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bc80      	pop	{r7}
 800d1ae:	4770      	bx	lr

0800d1b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1ca:	78fa      	ldrb	r2, [r7, #3]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f8 fe6c 	bl	8005eac <HAL_PCD_SetAddress>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 f880 	bl	800d2e0 <USBD_Get_USB_Status>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	72fb      	strb	r3, [r7, #11]
 800d1fe:	4613      	mov	r3, r2
 800d200:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d210:	893b      	ldrh	r3, [r7, #8]
 800d212:	7af9      	ldrb	r1, [r7, #11]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	f7f8 ff70 	bl	80060fa <HAL_PCD_EP_Transmit>
 800d21a:	4603      	mov	r3, r0
 800d21c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	4618      	mov	r0, r3
 800d222:	f000 f85d 	bl	800d2e0 <USBD_Get_USB_Status>
 800d226:	4603      	mov	r3, r0
 800d228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d22a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	461a      	mov	r2, r3
 800d240:	460b      	mov	r3, r1
 800d242:	72fb      	strb	r3, [r7, #11]
 800d244:	4613      	mov	r3, r2
 800d246:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d256:	893b      	ldrh	r3, [r7, #8]
 800d258:	7af9      	ldrb	r1, [r7, #11]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	f7f8 fef9 	bl	8006052 <HAL_PCD_EP_Receive>
 800d260:	4603      	mov	r3, r0
 800d262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 f83a 	bl	800d2e0 <USBD_Get_USB_Status>
 800d26c:	4603      	mov	r3, r0
 800d26e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d270:	7dbb      	ldrb	r3, [r7, #22]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b082      	sub	sp, #8
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	460b      	mov	r3, r1
 800d284:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d28c:	78fa      	ldrb	r2, [r7, #3]
 800d28e:	4611      	mov	r1, r2
 800d290:	4618      	mov	r0, r3
 800d292:	f7f8 ff1b 	bl	80060cc <HAL_PCD_EP_GetRxCount>
 800d296:	4603      	mov	r3, r0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2a8:	4b02      	ldr	r3, [pc, #8]	@ (800d2b4 <USBD_static_malloc+0x14>)
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bc80      	pop	{r7}
 800d2b2:	4770      	bx	lr
 800d2b4:	200013bc 	.word	0x200013bc

0800d2b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]

}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bc80      	pop	{r7}
 800d2c8:	4770      	bx	lr

0800d2ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2d6:	bf00      	nop
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bc80      	pop	{r7}
 800d2de:	4770      	bx	lr

0800d2e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2ee:	79fb      	ldrb	r3, [r7, #7]
 800d2f0:	2b03      	cmp	r3, #3
 800d2f2:	d817      	bhi.n	800d324 <USBD_Get_USB_Status+0x44>
 800d2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2fc <USBD_Get_USB_Status+0x1c>)
 800d2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fa:	bf00      	nop
 800d2fc:	0800d30d 	.word	0x0800d30d
 800d300:	0800d313 	.word	0x0800d313
 800d304:	0800d319 	.word	0x0800d319
 800d308:	0800d31f 	.word	0x0800d31f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
    break;
 800d310:	e00b      	b.n	800d32a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d312:	2302      	movs	r3, #2
 800d314:	73fb      	strb	r3, [r7, #15]
    break;
 800d316:	e008      	b.n	800d32a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d318:	2301      	movs	r3, #1
 800d31a:	73fb      	strb	r3, [r7, #15]
    break;
 800d31c:	e005      	b.n	800d32a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d31e:	2302      	movs	r3, #2
 800d320:	73fb      	strb	r3, [r7, #15]
    break;
 800d322:	e002      	b.n	800d32a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d324:	2302      	movs	r3, #2
 800d326:	73fb      	strb	r3, [r7, #15]
    break;
 800d328:	bf00      	nop
  }
  return usb_status;
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	bc80      	pop	{r7}
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop

0800d338 <sniprintf>:
 800d338:	b40c      	push	{r2, r3}
 800d33a:	b530      	push	{r4, r5, lr}
 800d33c:	4b17      	ldr	r3, [pc, #92]	@ (800d39c <sniprintf+0x64>)
 800d33e:	1e0c      	subs	r4, r1, #0
 800d340:	681d      	ldr	r5, [r3, #0]
 800d342:	b09d      	sub	sp, #116	@ 0x74
 800d344:	da08      	bge.n	800d358 <sniprintf+0x20>
 800d346:	238b      	movs	r3, #139	@ 0x8b
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	b01d      	add	sp, #116	@ 0x74
 800d350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d354:	b002      	add	sp, #8
 800d356:	4770      	bx	lr
 800d358:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d35c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d360:	bf0c      	ite	eq
 800d362:	4623      	moveq	r3, r4
 800d364:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	9307      	str	r3, [sp, #28]
 800d36c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d370:	9002      	str	r0, [sp, #8]
 800d372:	9006      	str	r0, [sp, #24]
 800d374:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d378:	4628      	mov	r0, r5
 800d37a:	ab21      	add	r3, sp, #132	@ 0x84
 800d37c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d37e:	a902      	add	r1, sp, #8
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	f000 f9c1 	bl	800d708 <_svfiprintf_r>
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	bfbc      	itt	lt
 800d38a:	238b      	movlt	r3, #139	@ 0x8b
 800d38c:	602b      	strlt	r3, [r5, #0]
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d0dd      	beq.n	800d34e <sniprintf+0x16>
 800d392:	2200      	movs	r2, #0
 800d394:	9b02      	ldr	r3, [sp, #8]
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	e7d9      	b.n	800d34e <sniprintf+0x16>
 800d39a:	bf00      	nop
 800d39c:	200001a4 	.word	0x200001a4

0800d3a0 <siprintf>:
 800d3a0:	b40e      	push	{r1, r2, r3}
 800d3a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d3a6:	b500      	push	{lr}
 800d3a8:	b09c      	sub	sp, #112	@ 0x70
 800d3aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800d3ac:	9002      	str	r0, [sp, #8]
 800d3ae:	9006      	str	r0, [sp, #24]
 800d3b0:	9107      	str	r1, [sp, #28]
 800d3b2:	9104      	str	r1, [sp, #16]
 800d3b4:	4808      	ldr	r0, [pc, #32]	@ (800d3d8 <siprintf+0x38>)
 800d3b6:	4909      	ldr	r1, [pc, #36]	@ (800d3dc <siprintf+0x3c>)
 800d3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	a902      	add	r1, sp, #8
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	f000 f9a0 	bl	800d708 <_svfiprintf_r>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	9b02      	ldr	r3, [sp, #8]
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	b01c      	add	sp, #112	@ 0x70
 800d3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3d4:	b003      	add	sp, #12
 800d3d6:	4770      	bx	lr
 800d3d8:	200001a4 	.word	0x200001a4
 800d3dc:	ffff0208 	.word	0xffff0208

0800d3e0 <memset>:
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4402      	add	r2, r0
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d100      	bne.n	800d3ea <memset+0xa>
 800d3e8:	4770      	bx	lr
 800d3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ee:	e7f9      	b.n	800d3e4 <memset+0x4>

0800d3f0 <__errno>:
 800d3f0:	4b01      	ldr	r3, [pc, #4]	@ (800d3f8 <__errno+0x8>)
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	200001a4 	.word	0x200001a4

0800d3fc <__libc_init_array>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	2600      	movs	r6, #0
 800d400:	4d0c      	ldr	r5, [pc, #48]	@ (800d434 <__libc_init_array+0x38>)
 800d402:	4c0d      	ldr	r4, [pc, #52]	@ (800d438 <__libc_init_array+0x3c>)
 800d404:	1b64      	subs	r4, r4, r5
 800d406:	10a4      	asrs	r4, r4, #2
 800d408:	42a6      	cmp	r6, r4
 800d40a:	d109      	bne.n	800d420 <__libc_init_array+0x24>
 800d40c:	f000 fc78 	bl	800dd00 <_init>
 800d410:	2600      	movs	r6, #0
 800d412:	4d0a      	ldr	r5, [pc, #40]	@ (800d43c <__libc_init_array+0x40>)
 800d414:	4c0a      	ldr	r4, [pc, #40]	@ (800d440 <__libc_init_array+0x44>)
 800d416:	1b64      	subs	r4, r4, r5
 800d418:	10a4      	asrs	r4, r4, #2
 800d41a:	42a6      	cmp	r6, r4
 800d41c:	d105      	bne.n	800d42a <__libc_init_array+0x2e>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	f855 3b04 	ldr.w	r3, [r5], #4
 800d424:	4798      	blx	r3
 800d426:	3601      	adds	r6, #1
 800d428:	e7ee      	b.n	800d408 <__libc_init_array+0xc>
 800d42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d42e:	4798      	blx	r3
 800d430:	3601      	adds	r6, #1
 800d432:	e7f2      	b.n	800d41a <__libc_init_array+0x1e>
 800d434:	0800e7dc 	.word	0x0800e7dc
 800d438:	0800e7dc 	.word	0x0800e7dc
 800d43c:	0800e7dc 	.word	0x0800e7dc
 800d440:	0800e7e0 	.word	0x0800e7e0

0800d444 <__retarget_lock_acquire_recursive>:
 800d444:	4770      	bx	lr

0800d446 <__retarget_lock_release_recursive>:
 800d446:	4770      	bx	lr

0800d448 <memcpy>:
 800d448:	440a      	add	r2, r1
 800d44a:	4291      	cmp	r1, r2
 800d44c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d450:	d100      	bne.n	800d454 <memcpy+0xc>
 800d452:	4770      	bx	lr
 800d454:	b510      	push	{r4, lr}
 800d456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d45a:	4291      	cmp	r1, r2
 800d45c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d460:	d1f9      	bne.n	800d456 <memcpy+0xe>
 800d462:	bd10      	pop	{r4, pc}

0800d464 <_free_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4605      	mov	r5, r0
 800d468:	2900      	cmp	r1, #0
 800d46a:	d040      	beq.n	800d4ee <_free_r+0x8a>
 800d46c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d470:	1f0c      	subs	r4, r1, #4
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfb8      	it	lt
 800d476:	18e4      	addlt	r4, r4, r3
 800d478:	f000 f8de 	bl	800d638 <__malloc_lock>
 800d47c:	4a1c      	ldr	r2, [pc, #112]	@ (800d4f0 <_free_r+0x8c>)
 800d47e:	6813      	ldr	r3, [r2, #0]
 800d480:	b933      	cbnz	r3, 800d490 <_free_r+0x2c>
 800d482:	6063      	str	r3, [r4, #4]
 800d484:	6014      	str	r4, [r2, #0]
 800d486:	4628      	mov	r0, r5
 800d488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d48c:	f000 b8da 	b.w	800d644 <__malloc_unlock>
 800d490:	42a3      	cmp	r3, r4
 800d492:	d908      	bls.n	800d4a6 <_free_r+0x42>
 800d494:	6820      	ldr	r0, [r4, #0]
 800d496:	1821      	adds	r1, r4, r0
 800d498:	428b      	cmp	r3, r1
 800d49a:	bf01      	itttt	eq
 800d49c:	6819      	ldreq	r1, [r3, #0]
 800d49e:	685b      	ldreq	r3, [r3, #4]
 800d4a0:	1809      	addeq	r1, r1, r0
 800d4a2:	6021      	streq	r1, [r4, #0]
 800d4a4:	e7ed      	b.n	800d482 <_free_r+0x1e>
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	b10b      	cbz	r3, 800d4b0 <_free_r+0x4c>
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	d9fa      	bls.n	800d4a6 <_free_r+0x42>
 800d4b0:	6811      	ldr	r1, [r2, #0]
 800d4b2:	1850      	adds	r0, r2, r1
 800d4b4:	42a0      	cmp	r0, r4
 800d4b6:	d10b      	bne.n	800d4d0 <_free_r+0x6c>
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	4401      	add	r1, r0
 800d4bc:	1850      	adds	r0, r2, r1
 800d4be:	4283      	cmp	r3, r0
 800d4c0:	6011      	str	r1, [r2, #0]
 800d4c2:	d1e0      	bne.n	800d486 <_free_r+0x22>
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4408      	add	r0, r1
 800d4ca:	6010      	str	r0, [r2, #0]
 800d4cc:	6053      	str	r3, [r2, #4]
 800d4ce:	e7da      	b.n	800d486 <_free_r+0x22>
 800d4d0:	d902      	bls.n	800d4d8 <_free_r+0x74>
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	e7d6      	b.n	800d486 <_free_r+0x22>
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	1821      	adds	r1, r4, r0
 800d4dc:	428b      	cmp	r3, r1
 800d4de:	bf01      	itttt	eq
 800d4e0:	6819      	ldreq	r1, [r3, #0]
 800d4e2:	685b      	ldreq	r3, [r3, #4]
 800d4e4:	1809      	addeq	r1, r1, r0
 800d4e6:	6021      	streq	r1, [r4, #0]
 800d4e8:	6063      	str	r3, [r4, #4]
 800d4ea:	6054      	str	r4, [r2, #4]
 800d4ec:	e7cb      	b.n	800d486 <_free_r+0x22>
 800d4ee:	bd38      	pop	{r3, r4, r5, pc}
 800d4f0:	20001720 	.word	0x20001720

0800d4f4 <sbrk_aligned>:
 800d4f4:	b570      	push	{r4, r5, r6, lr}
 800d4f6:	4e0f      	ldr	r6, [pc, #60]	@ (800d534 <sbrk_aligned+0x40>)
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	6831      	ldr	r1, [r6, #0]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	b911      	cbnz	r1, 800d506 <sbrk_aligned+0x12>
 800d500:	f000 fbaa 	bl	800dc58 <_sbrk_r>
 800d504:	6030      	str	r0, [r6, #0]
 800d506:	4621      	mov	r1, r4
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 fba5 	bl	800dc58 <_sbrk_r>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	d103      	bne.n	800d51a <sbrk_aligned+0x26>
 800d512:	f04f 34ff 	mov.w	r4, #4294967295
 800d516:	4620      	mov	r0, r4
 800d518:	bd70      	pop	{r4, r5, r6, pc}
 800d51a:	1cc4      	adds	r4, r0, #3
 800d51c:	f024 0403 	bic.w	r4, r4, #3
 800d520:	42a0      	cmp	r0, r4
 800d522:	d0f8      	beq.n	800d516 <sbrk_aligned+0x22>
 800d524:	1a21      	subs	r1, r4, r0
 800d526:	4628      	mov	r0, r5
 800d528:	f000 fb96 	bl	800dc58 <_sbrk_r>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d1f2      	bne.n	800d516 <sbrk_aligned+0x22>
 800d530:	e7ef      	b.n	800d512 <sbrk_aligned+0x1e>
 800d532:	bf00      	nop
 800d534:	2000171c 	.word	0x2000171c

0800d538 <_malloc_r>:
 800d538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d53c:	1ccd      	adds	r5, r1, #3
 800d53e:	f025 0503 	bic.w	r5, r5, #3
 800d542:	3508      	adds	r5, #8
 800d544:	2d0c      	cmp	r5, #12
 800d546:	bf38      	it	cc
 800d548:	250c      	movcc	r5, #12
 800d54a:	2d00      	cmp	r5, #0
 800d54c:	4606      	mov	r6, r0
 800d54e:	db01      	blt.n	800d554 <_malloc_r+0x1c>
 800d550:	42a9      	cmp	r1, r5
 800d552:	d904      	bls.n	800d55e <_malloc_r+0x26>
 800d554:	230c      	movs	r3, #12
 800d556:	6033      	str	r3, [r6, #0]
 800d558:	2000      	movs	r0, #0
 800d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d55e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d634 <_malloc_r+0xfc>
 800d562:	f000 f869 	bl	800d638 <__malloc_lock>
 800d566:	f8d8 3000 	ldr.w	r3, [r8]
 800d56a:	461c      	mov	r4, r3
 800d56c:	bb44      	cbnz	r4, 800d5c0 <_malloc_r+0x88>
 800d56e:	4629      	mov	r1, r5
 800d570:	4630      	mov	r0, r6
 800d572:	f7ff ffbf 	bl	800d4f4 <sbrk_aligned>
 800d576:	1c43      	adds	r3, r0, #1
 800d578:	4604      	mov	r4, r0
 800d57a:	d158      	bne.n	800d62e <_malloc_r+0xf6>
 800d57c:	f8d8 4000 	ldr.w	r4, [r8]
 800d580:	4627      	mov	r7, r4
 800d582:	2f00      	cmp	r7, #0
 800d584:	d143      	bne.n	800d60e <_malloc_r+0xd6>
 800d586:	2c00      	cmp	r4, #0
 800d588:	d04b      	beq.n	800d622 <_malloc_r+0xea>
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	4639      	mov	r1, r7
 800d58e:	4630      	mov	r0, r6
 800d590:	eb04 0903 	add.w	r9, r4, r3
 800d594:	f000 fb60 	bl	800dc58 <_sbrk_r>
 800d598:	4581      	cmp	r9, r0
 800d59a:	d142      	bne.n	800d622 <_malloc_r+0xea>
 800d59c:	6821      	ldr	r1, [r4, #0]
 800d59e:	4630      	mov	r0, r6
 800d5a0:	1a6d      	subs	r5, r5, r1
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	f7ff ffa6 	bl	800d4f4 <sbrk_aligned>
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	d03a      	beq.n	800d622 <_malloc_r+0xea>
 800d5ac:	6823      	ldr	r3, [r4, #0]
 800d5ae:	442b      	add	r3, r5
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d5b6:	685a      	ldr	r2, [r3, #4]
 800d5b8:	bb62      	cbnz	r2, 800d614 <_malloc_r+0xdc>
 800d5ba:	f8c8 7000 	str.w	r7, [r8]
 800d5be:	e00f      	b.n	800d5e0 <_malloc_r+0xa8>
 800d5c0:	6822      	ldr	r2, [r4, #0]
 800d5c2:	1b52      	subs	r2, r2, r5
 800d5c4:	d420      	bmi.n	800d608 <_malloc_r+0xd0>
 800d5c6:	2a0b      	cmp	r2, #11
 800d5c8:	d917      	bls.n	800d5fa <_malloc_r+0xc2>
 800d5ca:	1961      	adds	r1, r4, r5
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	6025      	str	r5, [r4, #0]
 800d5d0:	bf18      	it	ne
 800d5d2:	6059      	strne	r1, [r3, #4]
 800d5d4:	6863      	ldr	r3, [r4, #4]
 800d5d6:	bf08      	it	eq
 800d5d8:	f8c8 1000 	streq.w	r1, [r8]
 800d5dc:	5162      	str	r2, [r4, r5]
 800d5de:	604b      	str	r3, [r1, #4]
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f000 f82f 	bl	800d644 <__malloc_unlock>
 800d5e6:	f104 000b 	add.w	r0, r4, #11
 800d5ea:	1d23      	adds	r3, r4, #4
 800d5ec:	f020 0007 	bic.w	r0, r0, #7
 800d5f0:	1ac2      	subs	r2, r0, r3
 800d5f2:	bf1c      	itt	ne
 800d5f4:	1a1b      	subne	r3, r3, r0
 800d5f6:	50a3      	strne	r3, [r4, r2]
 800d5f8:	e7af      	b.n	800d55a <_malloc_r+0x22>
 800d5fa:	6862      	ldr	r2, [r4, #4]
 800d5fc:	42a3      	cmp	r3, r4
 800d5fe:	bf0c      	ite	eq
 800d600:	f8c8 2000 	streq.w	r2, [r8]
 800d604:	605a      	strne	r2, [r3, #4]
 800d606:	e7eb      	b.n	800d5e0 <_malloc_r+0xa8>
 800d608:	4623      	mov	r3, r4
 800d60a:	6864      	ldr	r4, [r4, #4]
 800d60c:	e7ae      	b.n	800d56c <_malloc_r+0x34>
 800d60e:	463c      	mov	r4, r7
 800d610:	687f      	ldr	r7, [r7, #4]
 800d612:	e7b6      	b.n	800d582 <_malloc_r+0x4a>
 800d614:	461a      	mov	r2, r3
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	42a3      	cmp	r3, r4
 800d61a:	d1fb      	bne.n	800d614 <_malloc_r+0xdc>
 800d61c:	2300      	movs	r3, #0
 800d61e:	6053      	str	r3, [r2, #4]
 800d620:	e7de      	b.n	800d5e0 <_malloc_r+0xa8>
 800d622:	230c      	movs	r3, #12
 800d624:	4630      	mov	r0, r6
 800d626:	6033      	str	r3, [r6, #0]
 800d628:	f000 f80c 	bl	800d644 <__malloc_unlock>
 800d62c:	e794      	b.n	800d558 <_malloc_r+0x20>
 800d62e:	6005      	str	r5, [r0, #0]
 800d630:	e7d6      	b.n	800d5e0 <_malloc_r+0xa8>
 800d632:	bf00      	nop
 800d634:	20001720 	.word	0x20001720

0800d638 <__malloc_lock>:
 800d638:	4801      	ldr	r0, [pc, #4]	@ (800d640 <__malloc_lock+0x8>)
 800d63a:	f7ff bf03 	b.w	800d444 <__retarget_lock_acquire_recursive>
 800d63e:	bf00      	nop
 800d640:	20001718 	.word	0x20001718

0800d644 <__malloc_unlock>:
 800d644:	4801      	ldr	r0, [pc, #4]	@ (800d64c <__malloc_unlock+0x8>)
 800d646:	f7ff befe 	b.w	800d446 <__retarget_lock_release_recursive>
 800d64a:	bf00      	nop
 800d64c:	20001718 	.word	0x20001718

0800d650 <__ssputs_r>:
 800d650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	461f      	mov	r7, r3
 800d656:	688e      	ldr	r6, [r1, #8]
 800d658:	4682      	mov	sl, r0
 800d65a:	42be      	cmp	r6, r7
 800d65c:	460c      	mov	r4, r1
 800d65e:	4690      	mov	r8, r2
 800d660:	680b      	ldr	r3, [r1, #0]
 800d662:	d82d      	bhi.n	800d6c0 <__ssputs_r+0x70>
 800d664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d668:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d66c:	d026      	beq.n	800d6bc <__ssputs_r+0x6c>
 800d66e:	6965      	ldr	r5, [r4, #20]
 800d670:	6909      	ldr	r1, [r1, #16]
 800d672:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d676:	eba3 0901 	sub.w	r9, r3, r1
 800d67a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d67e:	1c7b      	adds	r3, r7, #1
 800d680:	444b      	add	r3, r9
 800d682:	106d      	asrs	r5, r5, #1
 800d684:	429d      	cmp	r5, r3
 800d686:	bf38      	it	cc
 800d688:	461d      	movcc	r5, r3
 800d68a:	0553      	lsls	r3, r2, #21
 800d68c:	d527      	bpl.n	800d6de <__ssputs_r+0x8e>
 800d68e:	4629      	mov	r1, r5
 800d690:	f7ff ff52 	bl	800d538 <_malloc_r>
 800d694:	4606      	mov	r6, r0
 800d696:	b360      	cbz	r0, 800d6f2 <__ssputs_r+0xa2>
 800d698:	464a      	mov	r2, r9
 800d69a:	6921      	ldr	r1, [r4, #16]
 800d69c:	f7ff fed4 	bl	800d448 <memcpy>
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	6126      	str	r6, [r4, #16]
 800d6ae:	444e      	add	r6, r9
 800d6b0:	6026      	str	r6, [r4, #0]
 800d6b2:	463e      	mov	r6, r7
 800d6b4:	6165      	str	r5, [r4, #20]
 800d6b6:	eba5 0509 	sub.w	r5, r5, r9
 800d6ba:	60a5      	str	r5, [r4, #8]
 800d6bc:	42be      	cmp	r6, r7
 800d6be:	d900      	bls.n	800d6c2 <__ssputs_r+0x72>
 800d6c0:	463e      	mov	r6, r7
 800d6c2:	4632      	mov	r2, r6
 800d6c4:	4641      	mov	r1, r8
 800d6c6:	6820      	ldr	r0, [r4, #0]
 800d6c8:	f000 faac 	bl	800dc24 <memmove>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	68a3      	ldr	r3, [r4, #8]
 800d6d0:	1b9b      	subs	r3, r3, r6
 800d6d2:	60a3      	str	r3, [r4, #8]
 800d6d4:	6823      	ldr	r3, [r4, #0]
 800d6d6:	4433      	add	r3, r6
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6de:	462a      	mov	r2, r5
 800d6e0:	f000 fad8 	bl	800dc94 <_realloc_r>
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d1e0      	bne.n	800d6ac <__ssputs_r+0x5c>
 800d6ea:	4650      	mov	r0, sl
 800d6ec:	6921      	ldr	r1, [r4, #16]
 800d6ee:	f7ff feb9 	bl	800d464 <_free_r>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	f8ca 3000 	str.w	r3, [sl]
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d702:	81a3      	strh	r3, [r4, #12]
 800d704:	e7e9      	b.n	800d6da <__ssputs_r+0x8a>
	...

0800d708 <_svfiprintf_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	4698      	mov	r8, r3
 800d70e:	898b      	ldrh	r3, [r1, #12]
 800d710:	4607      	mov	r7, r0
 800d712:	061b      	lsls	r3, r3, #24
 800d714:	460d      	mov	r5, r1
 800d716:	4614      	mov	r4, r2
 800d718:	b09d      	sub	sp, #116	@ 0x74
 800d71a:	d510      	bpl.n	800d73e <_svfiprintf_r+0x36>
 800d71c:	690b      	ldr	r3, [r1, #16]
 800d71e:	b973      	cbnz	r3, 800d73e <_svfiprintf_r+0x36>
 800d720:	2140      	movs	r1, #64	@ 0x40
 800d722:	f7ff ff09 	bl	800d538 <_malloc_r>
 800d726:	6028      	str	r0, [r5, #0]
 800d728:	6128      	str	r0, [r5, #16]
 800d72a:	b930      	cbnz	r0, 800d73a <_svfiprintf_r+0x32>
 800d72c:	230c      	movs	r3, #12
 800d72e:	603b      	str	r3, [r7, #0]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	b01d      	add	sp, #116	@ 0x74
 800d736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73a:	2340      	movs	r3, #64	@ 0x40
 800d73c:	616b      	str	r3, [r5, #20]
 800d73e:	2300      	movs	r3, #0
 800d740:	9309      	str	r3, [sp, #36]	@ 0x24
 800d742:	2320      	movs	r3, #32
 800d744:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d748:	2330      	movs	r3, #48	@ 0x30
 800d74a:	f04f 0901 	mov.w	r9, #1
 800d74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d752:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d8ec <_svfiprintf_r+0x1e4>
 800d756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d75a:	4623      	mov	r3, r4
 800d75c:	469a      	mov	sl, r3
 800d75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d762:	b10a      	cbz	r2, 800d768 <_svfiprintf_r+0x60>
 800d764:	2a25      	cmp	r2, #37	@ 0x25
 800d766:	d1f9      	bne.n	800d75c <_svfiprintf_r+0x54>
 800d768:	ebba 0b04 	subs.w	fp, sl, r4
 800d76c:	d00b      	beq.n	800d786 <_svfiprintf_r+0x7e>
 800d76e:	465b      	mov	r3, fp
 800d770:	4622      	mov	r2, r4
 800d772:	4629      	mov	r1, r5
 800d774:	4638      	mov	r0, r7
 800d776:	f7ff ff6b 	bl	800d650 <__ssputs_r>
 800d77a:	3001      	adds	r0, #1
 800d77c:	f000 80a7 	beq.w	800d8ce <_svfiprintf_r+0x1c6>
 800d780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d782:	445a      	add	r2, fp
 800d784:	9209      	str	r2, [sp, #36]	@ 0x24
 800d786:	f89a 3000 	ldrb.w	r3, [sl]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 809f 	beq.w	800d8ce <_svfiprintf_r+0x1c6>
 800d790:	2300      	movs	r3, #0
 800d792:	f04f 32ff 	mov.w	r2, #4294967295
 800d796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d79a:	f10a 0a01 	add.w	sl, sl, #1
 800d79e:	9304      	str	r3, [sp, #16]
 800d7a0:	9307      	str	r3, [sp, #28]
 800d7a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7a8:	4654      	mov	r4, sl
 800d7aa:	2205      	movs	r2, #5
 800d7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b0:	484e      	ldr	r0, [pc, #312]	@ (800d8ec <_svfiprintf_r+0x1e4>)
 800d7b2:	f000 fa61 	bl	800dc78 <memchr>
 800d7b6:	9a04      	ldr	r2, [sp, #16]
 800d7b8:	b9d8      	cbnz	r0, 800d7f2 <_svfiprintf_r+0xea>
 800d7ba:	06d0      	lsls	r0, r2, #27
 800d7bc:	bf44      	itt	mi
 800d7be:	2320      	movmi	r3, #32
 800d7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7c4:	0711      	lsls	r1, r2, #28
 800d7c6:	bf44      	itt	mi
 800d7c8:	232b      	movmi	r3, #43	@ 0x2b
 800d7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7d4:	d015      	beq.n	800d802 <_svfiprintf_r+0xfa>
 800d7d6:	4654      	mov	r4, sl
 800d7d8:	2000      	movs	r0, #0
 800d7da:	f04f 0c0a 	mov.w	ip, #10
 800d7de:	9a07      	ldr	r2, [sp, #28]
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7e6:	3b30      	subs	r3, #48	@ 0x30
 800d7e8:	2b09      	cmp	r3, #9
 800d7ea:	d94b      	bls.n	800d884 <_svfiprintf_r+0x17c>
 800d7ec:	b1b0      	cbz	r0, 800d81c <_svfiprintf_r+0x114>
 800d7ee:	9207      	str	r2, [sp, #28]
 800d7f0:	e014      	b.n	800d81c <_svfiprintf_r+0x114>
 800d7f2:	eba0 0308 	sub.w	r3, r0, r8
 800d7f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	46a2      	mov	sl, r4
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	e7d2      	b.n	800d7a8 <_svfiprintf_r+0xa0>
 800d802:	9b03      	ldr	r3, [sp, #12]
 800d804:	1d19      	adds	r1, r3, #4
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	9103      	str	r1, [sp, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	bfbb      	ittet	lt
 800d80e:	425b      	neglt	r3, r3
 800d810:	f042 0202 	orrlt.w	r2, r2, #2
 800d814:	9307      	strge	r3, [sp, #28]
 800d816:	9307      	strlt	r3, [sp, #28]
 800d818:	bfb8      	it	lt
 800d81a:	9204      	strlt	r2, [sp, #16]
 800d81c:	7823      	ldrb	r3, [r4, #0]
 800d81e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d820:	d10a      	bne.n	800d838 <_svfiprintf_r+0x130>
 800d822:	7863      	ldrb	r3, [r4, #1]
 800d824:	2b2a      	cmp	r3, #42	@ 0x2a
 800d826:	d132      	bne.n	800d88e <_svfiprintf_r+0x186>
 800d828:	9b03      	ldr	r3, [sp, #12]
 800d82a:	3402      	adds	r4, #2
 800d82c:	1d1a      	adds	r2, r3, #4
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	9203      	str	r2, [sp, #12]
 800d832:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d8f0 <_svfiprintf_r+0x1e8>
 800d83c:	2203      	movs	r2, #3
 800d83e:	4650      	mov	r0, sl
 800d840:	7821      	ldrb	r1, [r4, #0]
 800d842:	f000 fa19 	bl	800dc78 <memchr>
 800d846:	b138      	cbz	r0, 800d858 <_svfiprintf_r+0x150>
 800d848:	2240      	movs	r2, #64	@ 0x40
 800d84a:	9b04      	ldr	r3, [sp, #16]
 800d84c:	eba0 000a 	sub.w	r0, r0, sl
 800d850:	4082      	lsls	r2, r0
 800d852:	4313      	orrs	r3, r2
 800d854:	3401      	adds	r4, #1
 800d856:	9304      	str	r3, [sp, #16]
 800d858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85c:	2206      	movs	r2, #6
 800d85e:	4825      	ldr	r0, [pc, #148]	@ (800d8f4 <_svfiprintf_r+0x1ec>)
 800d860:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d864:	f000 fa08 	bl	800dc78 <memchr>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d036      	beq.n	800d8da <_svfiprintf_r+0x1d2>
 800d86c:	4b22      	ldr	r3, [pc, #136]	@ (800d8f8 <_svfiprintf_r+0x1f0>)
 800d86e:	bb1b      	cbnz	r3, 800d8b8 <_svfiprintf_r+0x1b0>
 800d870:	9b03      	ldr	r3, [sp, #12]
 800d872:	3307      	adds	r3, #7
 800d874:	f023 0307 	bic.w	r3, r3, #7
 800d878:	3308      	adds	r3, #8
 800d87a:	9303      	str	r3, [sp, #12]
 800d87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d87e:	4433      	add	r3, r6
 800d880:	9309      	str	r3, [sp, #36]	@ 0x24
 800d882:	e76a      	b.n	800d75a <_svfiprintf_r+0x52>
 800d884:	460c      	mov	r4, r1
 800d886:	2001      	movs	r0, #1
 800d888:	fb0c 3202 	mla	r2, ip, r2, r3
 800d88c:	e7a8      	b.n	800d7e0 <_svfiprintf_r+0xd8>
 800d88e:	2300      	movs	r3, #0
 800d890:	f04f 0c0a 	mov.w	ip, #10
 800d894:	4619      	mov	r1, r3
 800d896:	3401      	adds	r4, #1
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	4620      	mov	r0, r4
 800d89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8a0:	3a30      	subs	r2, #48	@ 0x30
 800d8a2:	2a09      	cmp	r2, #9
 800d8a4:	d903      	bls.n	800d8ae <_svfiprintf_r+0x1a6>
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0c6      	beq.n	800d838 <_svfiprintf_r+0x130>
 800d8aa:	9105      	str	r1, [sp, #20]
 800d8ac:	e7c4      	b.n	800d838 <_svfiprintf_r+0x130>
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8b6:	e7f0      	b.n	800d89a <_svfiprintf_r+0x192>
 800d8b8:	ab03      	add	r3, sp, #12
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	462a      	mov	r2, r5
 800d8be:	4638      	mov	r0, r7
 800d8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d8fc <_svfiprintf_r+0x1f4>)
 800d8c2:	a904      	add	r1, sp, #16
 800d8c4:	f3af 8000 	nop.w
 800d8c8:	1c42      	adds	r2, r0, #1
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	d1d6      	bne.n	800d87c <_svfiprintf_r+0x174>
 800d8ce:	89ab      	ldrh	r3, [r5, #12]
 800d8d0:	065b      	lsls	r3, r3, #25
 800d8d2:	f53f af2d 	bmi.w	800d730 <_svfiprintf_r+0x28>
 800d8d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8d8:	e72c      	b.n	800d734 <_svfiprintf_r+0x2c>
 800d8da:	ab03      	add	r3, sp, #12
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	462a      	mov	r2, r5
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	4b06      	ldr	r3, [pc, #24]	@ (800d8fc <_svfiprintf_r+0x1f4>)
 800d8e4:	a904      	add	r1, sp, #16
 800d8e6:	f000 f87d 	bl	800d9e4 <_printf_i>
 800d8ea:	e7ed      	b.n	800d8c8 <_svfiprintf_r+0x1c0>
 800d8ec:	0800e7a0 	.word	0x0800e7a0
 800d8f0:	0800e7a6 	.word	0x0800e7a6
 800d8f4:	0800e7aa 	.word	0x0800e7aa
 800d8f8:	00000000 	.word	0x00000000
 800d8fc:	0800d651 	.word	0x0800d651

0800d900 <_printf_common>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	4616      	mov	r6, r2
 800d906:	4698      	mov	r8, r3
 800d908:	688a      	ldr	r2, [r1, #8]
 800d90a:	690b      	ldr	r3, [r1, #16]
 800d90c:	4607      	mov	r7, r0
 800d90e:	4293      	cmp	r3, r2
 800d910:	bfb8      	it	lt
 800d912:	4613      	movlt	r3, r2
 800d914:	6033      	str	r3, [r6, #0]
 800d916:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d91a:	460c      	mov	r4, r1
 800d91c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d920:	b10a      	cbz	r2, 800d926 <_printf_common+0x26>
 800d922:	3301      	adds	r3, #1
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	0699      	lsls	r1, r3, #26
 800d92a:	bf42      	ittt	mi
 800d92c:	6833      	ldrmi	r3, [r6, #0]
 800d92e:	3302      	addmi	r3, #2
 800d930:	6033      	strmi	r3, [r6, #0]
 800d932:	6825      	ldr	r5, [r4, #0]
 800d934:	f015 0506 	ands.w	r5, r5, #6
 800d938:	d106      	bne.n	800d948 <_printf_common+0x48>
 800d93a:	f104 0a19 	add.w	sl, r4, #25
 800d93e:	68e3      	ldr	r3, [r4, #12]
 800d940:	6832      	ldr	r2, [r6, #0]
 800d942:	1a9b      	subs	r3, r3, r2
 800d944:	42ab      	cmp	r3, r5
 800d946:	dc2b      	bgt.n	800d9a0 <_printf_common+0xa0>
 800d948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d94c:	6822      	ldr	r2, [r4, #0]
 800d94e:	3b00      	subs	r3, #0
 800d950:	bf18      	it	ne
 800d952:	2301      	movne	r3, #1
 800d954:	0692      	lsls	r2, r2, #26
 800d956:	d430      	bmi.n	800d9ba <_printf_common+0xba>
 800d958:	4641      	mov	r1, r8
 800d95a:	4638      	mov	r0, r7
 800d95c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d960:	47c8      	blx	r9
 800d962:	3001      	adds	r0, #1
 800d964:	d023      	beq.n	800d9ae <_printf_common+0xae>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	6922      	ldr	r2, [r4, #16]
 800d96a:	f003 0306 	and.w	r3, r3, #6
 800d96e:	2b04      	cmp	r3, #4
 800d970:	bf14      	ite	ne
 800d972:	2500      	movne	r5, #0
 800d974:	6833      	ldreq	r3, [r6, #0]
 800d976:	f04f 0600 	mov.w	r6, #0
 800d97a:	bf08      	it	eq
 800d97c:	68e5      	ldreq	r5, [r4, #12]
 800d97e:	f104 041a 	add.w	r4, r4, #26
 800d982:	bf08      	it	eq
 800d984:	1aed      	subeq	r5, r5, r3
 800d986:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d98a:	bf08      	it	eq
 800d98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d990:	4293      	cmp	r3, r2
 800d992:	bfc4      	itt	gt
 800d994:	1a9b      	subgt	r3, r3, r2
 800d996:	18ed      	addgt	r5, r5, r3
 800d998:	42b5      	cmp	r5, r6
 800d99a:	d11a      	bne.n	800d9d2 <_printf_common+0xd2>
 800d99c:	2000      	movs	r0, #0
 800d99e:	e008      	b.n	800d9b2 <_printf_common+0xb2>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	4652      	mov	r2, sl
 800d9a4:	4641      	mov	r1, r8
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	47c8      	blx	r9
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d103      	bne.n	800d9b6 <_printf_common+0xb6>
 800d9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	3501      	adds	r5, #1
 800d9b8:	e7c1      	b.n	800d93e <_printf_common+0x3e>
 800d9ba:	2030      	movs	r0, #48	@ 0x30
 800d9bc:	18e1      	adds	r1, r4, r3
 800d9be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9c8:	4422      	add	r2, r4
 800d9ca:	3302      	adds	r3, #2
 800d9cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9d0:	e7c2      	b.n	800d958 <_printf_common+0x58>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	4641      	mov	r1, r8
 800d9d8:	4638      	mov	r0, r7
 800d9da:	47c8      	blx	r9
 800d9dc:	3001      	adds	r0, #1
 800d9de:	d0e6      	beq.n	800d9ae <_printf_common+0xae>
 800d9e0:	3601      	adds	r6, #1
 800d9e2:	e7d9      	b.n	800d998 <_printf_common+0x98>

0800d9e4 <_printf_i>:
 800d9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e8:	7e0f      	ldrb	r7, [r1, #24]
 800d9ea:	4691      	mov	r9, r2
 800d9ec:	2f78      	cmp	r7, #120	@ 0x78
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	469a      	mov	sl, r3
 800d9f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9fa:	d807      	bhi.n	800da0c <_printf_i+0x28>
 800d9fc:	2f62      	cmp	r7, #98	@ 0x62
 800d9fe:	d80a      	bhi.n	800da16 <_printf_i+0x32>
 800da00:	2f00      	cmp	r7, #0
 800da02:	f000 80d3 	beq.w	800dbac <_printf_i+0x1c8>
 800da06:	2f58      	cmp	r7, #88	@ 0x58
 800da08:	f000 80ba 	beq.w	800db80 <_printf_i+0x19c>
 800da0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da14:	e03a      	b.n	800da8c <_printf_i+0xa8>
 800da16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da1a:	2b15      	cmp	r3, #21
 800da1c:	d8f6      	bhi.n	800da0c <_printf_i+0x28>
 800da1e:	a101      	add	r1, pc, #4	@ (adr r1, 800da24 <_printf_i+0x40>)
 800da20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da91 	.word	0x0800da91
 800da2c:	0800da0d 	.word	0x0800da0d
 800da30:	0800da0d 	.word	0x0800da0d
 800da34:	0800da0d 	.word	0x0800da0d
 800da38:	0800da0d 	.word	0x0800da0d
 800da3c:	0800da91 	.word	0x0800da91
 800da40:	0800da0d 	.word	0x0800da0d
 800da44:	0800da0d 	.word	0x0800da0d
 800da48:	0800da0d 	.word	0x0800da0d
 800da4c:	0800da0d 	.word	0x0800da0d
 800da50:	0800db93 	.word	0x0800db93
 800da54:	0800dabb 	.word	0x0800dabb
 800da58:	0800db4d 	.word	0x0800db4d
 800da5c:	0800da0d 	.word	0x0800da0d
 800da60:	0800da0d 	.word	0x0800da0d
 800da64:	0800dbb5 	.word	0x0800dbb5
 800da68:	0800da0d 	.word	0x0800da0d
 800da6c:	0800dabb 	.word	0x0800dabb
 800da70:	0800da0d 	.word	0x0800da0d
 800da74:	0800da0d 	.word	0x0800da0d
 800da78:	0800db55 	.word	0x0800db55
 800da7c:	6833      	ldr	r3, [r6, #0]
 800da7e:	1d1a      	adds	r2, r3, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6032      	str	r2, [r6, #0]
 800da84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da8c:	2301      	movs	r3, #1
 800da8e:	e09e      	b.n	800dbce <_printf_i+0x1ea>
 800da90:	6833      	ldr	r3, [r6, #0]
 800da92:	6820      	ldr	r0, [r4, #0]
 800da94:	1d19      	adds	r1, r3, #4
 800da96:	6031      	str	r1, [r6, #0]
 800da98:	0606      	lsls	r6, r0, #24
 800da9a:	d501      	bpl.n	800daa0 <_printf_i+0xbc>
 800da9c:	681d      	ldr	r5, [r3, #0]
 800da9e:	e003      	b.n	800daa8 <_printf_i+0xc4>
 800daa0:	0645      	lsls	r5, r0, #25
 800daa2:	d5fb      	bpl.n	800da9c <_printf_i+0xb8>
 800daa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800daa8:	2d00      	cmp	r5, #0
 800daaa:	da03      	bge.n	800dab4 <_printf_i+0xd0>
 800daac:	232d      	movs	r3, #45	@ 0x2d
 800daae:	426d      	negs	r5, r5
 800dab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dab4:	230a      	movs	r3, #10
 800dab6:	4859      	ldr	r0, [pc, #356]	@ (800dc1c <_printf_i+0x238>)
 800dab8:	e011      	b.n	800dade <_printf_i+0xfa>
 800daba:	6821      	ldr	r1, [r4, #0]
 800dabc:	6833      	ldr	r3, [r6, #0]
 800dabe:	0608      	lsls	r0, r1, #24
 800dac0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dac4:	d402      	bmi.n	800dacc <_printf_i+0xe8>
 800dac6:	0649      	lsls	r1, r1, #25
 800dac8:	bf48      	it	mi
 800daca:	b2ad      	uxthmi	r5, r5
 800dacc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dace:	6033      	str	r3, [r6, #0]
 800dad0:	bf14      	ite	ne
 800dad2:	230a      	movne	r3, #10
 800dad4:	2308      	moveq	r3, #8
 800dad6:	4851      	ldr	r0, [pc, #324]	@ (800dc1c <_printf_i+0x238>)
 800dad8:	2100      	movs	r1, #0
 800dada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dade:	6866      	ldr	r6, [r4, #4]
 800dae0:	2e00      	cmp	r6, #0
 800dae2:	bfa8      	it	ge
 800dae4:	6821      	ldrge	r1, [r4, #0]
 800dae6:	60a6      	str	r6, [r4, #8]
 800dae8:	bfa4      	itt	ge
 800daea:	f021 0104 	bicge.w	r1, r1, #4
 800daee:	6021      	strge	r1, [r4, #0]
 800daf0:	b90d      	cbnz	r5, 800daf6 <_printf_i+0x112>
 800daf2:	2e00      	cmp	r6, #0
 800daf4:	d04b      	beq.n	800db8e <_printf_i+0x1aa>
 800daf6:	4616      	mov	r6, r2
 800daf8:	fbb5 f1f3 	udiv	r1, r5, r3
 800dafc:	fb03 5711 	mls	r7, r3, r1, r5
 800db00:	5dc7      	ldrb	r7, [r0, r7]
 800db02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db06:	462f      	mov	r7, r5
 800db08:	42bb      	cmp	r3, r7
 800db0a:	460d      	mov	r5, r1
 800db0c:	d9f4      	bls.n	800daf8 <_printf_i+0x114>
 800db0e:	2b08      	cmp	r3, #8
 800db10:	d10b      	bne.n	800db2a <_printf_i+0x146>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	07df      	lsls	r7, r3, #31
 800db16:	d508      	bpl.n	800db2a <_printf_i+0x146>
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	6861      	ldr	r1, [r4, #4]
 800db1c:	4299      	cmp	r1, r3
 800db1e:	bfde      	ittt	le
 800db20:	2330      	movle	r3, #48	@ 0x30
 800db22:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db26:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db2a:	1b92      	subs	r2, r2, r6
 800db2c:	6122      	str	r2, [r4, #16]
 800db2e:	464b      	mov	r3, r9
 800db30:	4621      	mov	r1, r4
 800db32:	4640      	mov	r0, r8
 800db34:	f8cd a000 	str.w	sl, [sp]
 800db38:	aa03      	add	r2, sp, #12
 800db3a:	f7ff fee1 	bl	800d900 <_printf_common>
 800db3e:	3001      	adds	r0, #1
 800db40:	d14a      	bne.n	800dbd8 <_printf_i+0x1f4>
 800db42:	f04f 30ff 	mov.w	r0, #4294967295
 800db46:	b004      	add	sp, #16
 800db48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	f043 0320 	orr.w	r3, r3, #32
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	2778      	movs	r7, #120	@ 0x78
 800db56:	4832      	ldr	r0, [pc, #200]	@ (800dc20 <_printf_i+0x23c>)
 800db58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	6831      	ldr	r1, [r6, #0]
 800db60:	061f      	lsls	r7, r3, #24
 800db62:	f851 5b04 	ldr.w	r5, [r1], #4
 800db66:	d402      	bmi.n	800db6e <_printf_i+0x18a>
 800db68:	065f      	lsls	r7, r3, #25
 800db6a:	bf48      	it	mi
 800db6c:	b2ad      	uxthmi	r5, r5
 800db6e:	6031      	str	r1, [r6, #0]
 800db70:	07d9      	lsls	r1, r3, #31
 800db72:	bf44      	itt	mi
 800db74:	f043 0320 	orrmi.w	r3, r3, #32
 800db78:	6023      	strmi	r3, [r4, #0]
 800db7a:	b11d      	cbz	r5, 800db84 <_printf_i+0x1a0>
 800db7c:	2310      	movs	r3, #16
 800db7e:	e7ab      	b.n	800dad8 <_printf_i+0xf4>
 800db80:	4826      	ldr	r0, [pc, #152]	@ (800dc1c <_printf_i+0x238>)
 800db82:	e7e9      	b.n	800db58 <_printf_i+0x174>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	f023 0320 	bic.w	r3, r3, #32
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	e7f6      	b.n	800db7c <_printf_i+0x198>
 800db8e:	4616      	mov	r6, r2
 800db90:	e7bd      	b.n	800db0e <_printf_i+0x12a>
 800db92:	6833      	ldr	r3, [r6, #0]
 800db94:	6825      	ldr	r5, [r4, #0]
 800db96:	1d18      	adds	r0, r3, #4
 800db98:	6961      	ldr	r1, [r4, #20]
 800db9a:	6030      	str	r0, [r6, #0]
 800db9c:	062e      	lsls	r6, r5, #24
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	d501      	bpl.n	800dba6 <_printf_i+0x1c2>
 800dba2:	6019      	str	r1, [r3, #0]
 800dba4:	e002      	b.n	800dbac <_printf_i+0x1c8>
 800dba6:	0668      	lsls	r0, r5, #25
 800dba8:	d5fb      	bpl.n	800dba2 <_printf_i+0x1be>
 800dbaa:	8019      	strh	r1, [r3, #0]
 800dbac:	2300      	movs	r3, #0
 800dbae:	4616      	mov	r6, r2
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	e7bc      	b.n	800db2e <_printf_i+0x14a>
 800dbb4:	6833      	ldr	r3, [r6, #0]
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	1d1a      	adds	r2, r3, #4
 800dbba:	6032      	str	r2, [r6, #0]
 800dbbc:	681e      	ldr	r6, [r3, #0]
 800dbbe:	6862      	ldr	r2, [r4, #4]
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f000 f859 	bl	800dc78 <memchr>
 800dbc6:	b108      	cbz	r0, 800dbcc <_printf_i+0x1e8>
 800dbc8:	1b80      	subs	r0, r0, r6
 800dbca:	6060      	str	r0, [r4, #4]
 800dbcc:	6863      	ldr	r3, [r4, #4]
 800dbce:	6123      	str	r3, [r4, #16]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbd6:	e7aa      	b.n	800db2e <_printf_i+0x14a>
 800dbd8:	4632      	mov	r2, r6
 800dbda:	4649      	mov	r1, r9
 800dbdc:	4640      	mov	r0, r8
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	47d0      	blx	sl
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	d0ad      	beq.n	800db42 <_printf_i+0x15e>
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	079b      	lsls	r3, r3, #30
 800dbea:	d413      	bmi.n	800dc14 <_printf_i+0x230>
 800dbec:	68e0      	ldr	r0, [r4, #12]
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	4298      	cmp	r0, r3
 800dbf2:	bfb8      	it	lt
 800dbf4:	4618      	movlt	r0, r3
 800dbf6:	e7a6      	b.n	800db46 <_printf_i+0x162>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	4640      	mov	r0, r8
 800dc00:	47d0      	blx	sl
 800dc02:	3001      	adds	r0, #1
 800dc04:	d09d      	beq.n	800db42 <_printf_i+0x15e>
 800dc06:	3501      	adds	r5, #1
 800dc08:	68e3      	ldr	r3, [r4, #12]
 800dc0a:	9903      	ldr	r1, [sp, #12]
 800dc0c:	1a5b      	subs	r3, r3, r1
 800dc0e:	42ab      	cmp	r3, r5
 800dc10:	dcf2      	bgt.n	800dbf8 <_printf_i+0x214>
 800dc12:	e7eb      	b.n	800dbec <_printf_i+0x208>
 800dc14:	2500      	movs	r5, #0
 800dc16:	f104 0619 	add.w	r6, r4, #25
 800dc1a:	e7f5      	b.n	800dc08 <_printf_i+0x224>
 800dc1c:	0800e7b1 	.word	0x0800e7b1
 800dc20:	0800e7c2 	.word	0x0800e7c2

0800dc24 <memmove>:
 800dc24:	4288      	cmp	r0, r1
 800dc26:	b510      	push	{r4, lr}
 800dc28:	eb01 0402 	add.w	r4, r1, r2
 800dc2c:	d902      	bls.n	800dc34 <memmove+0x10>
 800dc2e:	4284      	cmp	r4, r0
 800dc30:	4623      	mov	r3, r4
 800dc32:	d807      	bhi.n	800dc44 <memmove+0x20>
 800dc34:	1e43      	subs	r3, r0, #1
 800dc36:	42a1      	cmp	r1, r4
 800dc38:	d008      	beq.n	800dc4c <memmove+0x28>
 800dc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc42:	e7f8      	b.n	800dc36 <memmove+0x12>
 800dc44:	4601      	mov	r1, r0
 800dc46:	4402      	add	r2, r0
 800dc48:	428a      	cmp	r2, r1
 800dc4a:	d100      	bne.n	800dc4e <memmove+0x2a>
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc56:	e7f7      	b.n	800dc48 <memmove+0x24>

0800dc58 <_sbrk_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	4d05      	ldr	r5, [pc, #20]	@ (800dc74 <_sbrk_r+0x1c>)
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	f7f6 fc88 	bl	8004578 <_sbrk>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_sbrk_r+0x1a>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_sbrk_r+0x1a>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	20001714 	.word	0x20001714

0800dc78 <memchr>:
 800dc78:	4603      	mov	r3, r0
 800dc7a:	b510      	push	{r4, lr}
 800dc7c:	b2c9      	uxtb	r1, r1
 800dc7e:	4402      	add	r2, r0
 800dc80:	4293      	cmp	r3, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	d101      	bne.n	800dc8a <memchr+0x12>
 800dc86:	2000      	movs	r0, #0
 800dc88:	e003      	b.n	800dc92 <memchr+0x1a>
 800dc8a:	7804      	ldrb	r4, [r0, #0]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	428c      	cmp	r4, r1
 800dc90:	d1f6      	bne.n	800dc80 <memchr+0x8>
 800dc92:	bd10      	pop	{r4, pc}

0800dc94 <_realloc_r>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	4680      	mov	r8, r0
 800dc9a:	4615      	mov	r5, r2
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	b921      	cbnz	r1, 800dcaa <_realloc_r+0x16>
 800dca0:	4611      	mov	r1, r2
 800dca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dca6:	f7ff bc47 	b.w	800d538 <_malloc_r>
 800dcaa:	b92a      	cbnz	r2, 800dcb8 <_realloc_r+0x24>
 800dcac:	f7ff fbda 	bl	800d464 <_free_r>
 800dcb0:	2400      	movs	r4, #0
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	f000 f81a 	bl	800dcf0 <_malloc_usable_size_r>
 800dcbc:	4285      	cmp	r5, r0
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	d802      	bhi.n	800dcc8 <_realloc_r+0x34>
 800dcc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dcc6:	d8f4      	bhi.n	800dcb2 <_realloc_r+0x1e>
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4640      	mov	r0, r8
 800dccc:	f7ff fc34 	bl	800d538 <_malloc_r>
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d0ec      	beq.n	800dcb0 <_realloc_r+0x1c>
 800dcd6:	42b5      	cmp	r5, r6
 800dcd8:	462a      	mov	r2, r5
 800dcda:	4621      	mov	r1, r4
 800dcdc:	bf28      	it	cs
 800dcde:	4632      	movcs	r2, r6
 800dce0:	f7ff fbb2 	bl	800d448 <memcpy>
 800dce4:	4621      	mov	r1, r4
 800dce6:	4640      	mov	r0, r8
 800dce8:	f7ff fbbc 	bl	800d464 <_free_r>
 800dcec:	463c      	mov	r4, r7
 800dcee:	e7e0      	b.n	800dcb2 <_realloc_r+0x1e>

0800dcf0 <_malloc_usable_size_r>:
 800dcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf4:	1f18      	subs	r0, r3, #4
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bfbc      	itt	lt
 800dcfa:	580b      	ldrlt	r3, [r1, r0]
 800dcfc:	18c0      	addlt	r0, r0, r3
 800dcfe:	4770      	bx	lr

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr

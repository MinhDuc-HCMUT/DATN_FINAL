
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800dd34  0800dd34  0000ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7f4  0800e7f4  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7f4  0800e7f4  0000f7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7fc  0800e7fc  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7fc  0800e7fc  0000f7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e800  0800e800  0000f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e804  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e9f8  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e9f8  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa22  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a8  00000000  00000000  0002ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c4  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  0003248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021281  00000000  00000000  0004ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a51  00000000  00000000  0006fe66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001048b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c0  00000000  00000000  001048fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010bebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800dd1c 	.word	0x0800dd1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800dd1c 	.word	0x0800dd1c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 fad5 	bl	800471c <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f005 f8ca 	bl	80053b4 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fc82 	bl	8004d80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fe11 	bl	80050b6 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fc57 	bl	8004d80 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e798 	.word	0x0800e798
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e7a0 	.word	0x0800e7a0
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fdc4 	bl	80050b6 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fdb0 	bl	80050b6 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f004 f8e0 	bl	800471c <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fd87 	bl	8005088 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f004 f8cb 	bl	800471c <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fd75 	bl	8005088 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f004 f8a3 	bl	800471c <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fd4d 	bl	8005088 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e798 	.word	0x0800e798
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e7a0 	.word	0x0800e7a0

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f004 f85e 	bl	800471c <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f004 f84f 	bl	8004708 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f004 f848 	bl	800471c <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f004 f83c 	bl	8004708 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f008 f83b 	bl	80088a2 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f008 f8b8 	bl	80089c6 <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f008 f899 	bl	80089c6 <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f008 f87e 	bl	80089c6 <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b68:	20ef      	movs	r0, #239	@ 0xef
 8000b6a:	f7ff fe53 	bl	8000814 <USART_SendByte>
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fe50 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b74:	20ff      	movs	r0, #255	@ 0xff
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x0D);
 8000b9e:	200d      	movs	r0, #13
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
 8000baa:	2011      	movs	r0, #17
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f7ff fe41 	bl	8000838 <receive_finger>
 8000bb6:	4603      	mov	r3, r0

}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3315      	adds	r3, #21
 8000bca:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bcc:	20ef      	movs	r0, #239	@ 0xef
 8000bce:	f7ff fe21 	bl	8000814 <USART_SendByte>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	f7ff fe1b 	bl	8000814 <USART_SendByte>
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	f7ff fe18 	bl	8000814 <USART_SendByte>
 8000be4:	20ff      	movs	r0, #255	@ 0xff
 8000be6:	f7ff fe15 	bl	8000814 <USART_SendByte>
 8000bea:	20ff      	movs	r0, #255	@ 0xff
 8000bec:	f7ff fe12 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fe0f 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe0c 	bl	8000814 <USART_SendByte>
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f7ff fe09 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f7ff fe06 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fe03 	bl	8000814 <USART_SendByte>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fdff 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdfc 	bl	8000814 <USART_SendByte>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff fdf9 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fdf6 	bl	8000814 <USART_SendByte>
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdf2 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000c30:	200c      	movs	r0, #12
 8000c32:	f7ff fe01 	bl	8000838 <receive_finger>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c48:	f003 ff0a 	bl	8004a60 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 ffe2 	bl	8004c30 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c6c:	f003 ff1e 	bl	8004aac <HAL_FLASH_Lock>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c84:	f003 feec 	bl	8004a60 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	4615      	mov	r5, r2
 8000c90:	4622      	mov	r2, r4
 8000c92:	462b      	mov	r3, r5
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2001      	movs	r0, #1
 8000c98:	f003 fe72 	bl	8004980 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c9c:	f003 ff06 	bl	8004aac <HAL_FLASH_Lock>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}

08000ca8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cb6:	f003 fed3 	bl	8004a60 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	82fb      	strh	r3, [r7, #22]
 8000cbe:	e00c      	b.n	8000cda <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	18d0      	adds	r0, r2, r3
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ffd2 	bl	8000c78 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	82fb      	strh	r3, [r7, #22]
 8000cda:	8afa      	ldrh	r2, [r7, #22]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ee      	bcc.n	8000cc0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ce2:	f003 fee3 	bl	8004aac <HAL_FLASH_Lock>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	82fb      	strh	r3, [r7, #22]
 8000d4a:	e00c      	b.n	8000d66 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d4c:	8afa      	ldrh	r2, [r7, #22]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	780a      	ldrb	r2, [r1, #0]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	3301      	adds	r3, #1
 8000d64:	82fb      	strh	r3, [r7, #22]
 8000d66:	8afa      	ldrh	r2, [r7, #22]
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3ee      	bcc.n	8000d4c <Flash_Read_Array+0x14>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d96:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d98:	e002      	b.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000020 	.word	0x20000020

08000db0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000db6:	f7ff fd9b 	bl	80008f0 <collect_finger>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <check_fingerprint_status+0x24>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000409 	.word	0x20000409

08000dd8 <process_fingerprint>:
void process_fingerprint()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <process_fingerprint+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <process_fingerprint+0x1c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dea:	f002 fcaf 	bl	800374c <read_finger>
    }
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000409 	.word	0x20000409

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	@ 0x40
 8000dfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f003 fc2b 	bl	8004658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f9a7 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fadd 	bl	80013c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e0a:	f000 fa2d 	bl	8001268 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000e0e:	f000 f9fd 	bl	800120c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000e12:	f000 faad 	bl	8001370 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e16:	f000 fa5d 	bl	80012d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e1a:	f00b fdf1 	bl	800ca00 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000e1e:	f002 ffc1 	bl	8003da4 <TM_MFRC522_Init>
  KeyPad_Init();
 8000e22:	f7ff fb0b 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000e26:	2302      	movs	r3, #2
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	224e      	movs	r2, #78	@ 0x4e
 8000e2e:	49b7      	ldr	r1, [pc, #732]	@ (800110c <main+0x314>)
 8000e30:	48b7      	ldr	r0, [pc, #732]	@ (8001110 <main+0x318>)
 8000e32:	f7ff f9f9 	bl	8000228 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	48b5      	ldr	r0, [pc, #724]	@ (8001114 <main+0x31c>)
 8000e3e:	f004 f93a 	bl	80050b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e48:	48b2      	ldr	r0, [pc, #712]	@ (8001114 <main+0x31c>)
 8000e4a:	f004 f934 	bl	80050b6 <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2100      	movs	r1, #0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	801a      	strh	r2, [r3, #0]
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2206      	movs	r2, #6
 8000e66:	4619      	mov	r1, r3
 8000e68:	48ab      	ldr	r0, [pc, #684]	@ (8001118 <main+0x320>)
 8000e6a:	f7ff ff65 	bl	8000d38 <Flash_Read_Array>
  stored_password[6] = '\0';
 8000e6e:	2300      	movs	r3, #0
 8000e70:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7a:	e00c      	b.n	8000e96 <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8000e7c:	f107 0218 	add.w	r2, r7, #24
 8000e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d002      	beq.n	8000e90 <main+0x98>
          is_empty = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000e8e:	e005      	b.n	8000e9c <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8000e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	ddef      	ble.n	8000e7c <main+0x84>
      }
  }
  if (is_empty) {
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0xae>
      set_default_password();
 8000ea2:	f002 fe9d 	bl	8003be0 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ea6:	489d      	ldr	r0, [pc, #628]	@ (800111c <main+0x324>)
 8000ea8:	f007 f904 	bl	80080b4 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000eac:	f001 ffd6 	bl	8002e5c <checkcountUID>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <main+0xc2>
  {
      startadd();
 8000eb6:	f002 f96d 	bl	8003194 <startadd>
  }
  int incorrect_attempts = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000ebe:	4894      	ldr	r0, [pc, #592]	@ (8001110 <main+0x318>)
 8000ec0:	f7ff fa8c 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4891      	ldr	r0, [pc, #580]	@ (8001110 <main+0x318>)
 8000eca:	f7ff fa1d 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000ece:	4994      	ldr	r1, [pc, #592]	@ (8001120 <main+0x328>)
 8000ed0:	488f      	ldr	r0, [pc, #572]	@ (8001110 <main+0x318>)
 8000ed2:	f7ff fa6c 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f7ff fbea 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000ee2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ee6:	2b23      	cmp	r3, #35	@ 0x23
 8000ee8:	d166      	bne.n	8000fb8 <main+0x1c0>
    {
    	buzzer(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 ff08 	bl	8003d00 <buzzer>
        char entered_password[7] = {0};
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2100      	movs	r1, #0
 8000efa:	460a      	mov	r2, r1
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	460a      	mov	r2, r1
 8000f00:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000f02:	4a88      	ldr	r2, [pc, #544]	@ (8001124 <main+0x32c>)
 8000f04:	4988      	ldr	r1, [pc, #544]	@ (8001128 <main+0x330>)
 8000f06:	4882      	ldr	r0, [pc, #520]	@ (8001110 <main+0x318>)
 8000f08:	f7ff fa78 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fda7 	bl	8003a64 <enter_password>
        if (check_password(entered_password)) {
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fe38 	bl	8003b90 <check_password>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000f26:	4a7f      	ldr	r2, [pc, #508]	@ (8001124 <main+0x32c>)
 8000f28:	4980      	ldr	r1, [pc, #512]	@ (800112c <main+0x334>)
 8000f2a:	4879      	ldr	r0, [pc, #484]	@ (8001110 <main+0x318>)
 8000f2c:	f7ff fa66 	bl	80003fc <CLCD_I2C_Display>
            opendoor();
 8000f30:	f002 fe96 	bl	8003c60 <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f38:	e036      	b.n	8000fa8 <main+0x1b0>
        } else {
            incorrect_attempts++;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000f40:	4a78      	ldr	r2, [pc, #480]	@ (8001124 <main+0x32c>)
 8000f42:	497b      	ldr	r1, [pc, #492]	@ (8001130 <main+0x338>)
 8000f44:	4872      	ldr	r0, [pc, #456]	@ (8001110 <main+0x318>)
 8000f46:	f7ff fa59 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f002 fed8 	bl	8003d00 <buzzer>
            int delay_time = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <main+0x168>
                delay_time = 5;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f5e:	e00a      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d102      	bne.n	8000f6c <main+0x174>
                delay_time = 10;
 8000f66:	230a      	movs	r3, #10
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f6a:	e004      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8000f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	dd01      	ble.n	8000f76 <main+0x17e>
                delay_time = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7a:	e012      	b.n	8000fa2 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	4a6c      	ldr	r2, [pc, #432]	@ (8001134 <main+0x33c>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	f00c f9e6 	bl	800d354 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8001138 <main+0x340>)
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4860      	ldr	r0, [pc, #384]	@ (8001110 <main+0x318>)
 8000f90:	f7ff fa34 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f98:	f003 fbc0 	bl	800471c <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dce9      	bgt.n	8000f7c <main+0x184>
            }
        }
        HAL_Delay(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fac:	f003 fbb6 	bl	800471c <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000fb0:	4857      	ldr	r0, [pc, #348]	@ (8001110 <main+0x318>)
 8000fb2:	f7ff fa13 	bl	80003dc <CLCD_I2C_Clear>
 8000fb6:	e0a3      	b.n	8001100 <main+0x308>
    }
    else if (selected_key != 0)
 8000fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d067      	beq.n	8001090 <main+0x298>
    {
    	buzzer(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f002 fe9d 	bl	8003d00 <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <main+0x344>)
 8000fce:	220f      	movs	r2, #15
 8000fd0:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000fd2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fd6:	3b41      	subs	r3, #65	@ 0x41
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	f200 8090 	bhi.w	80010fe <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	484b      	ldr	r0, [pc, #300]	@ (8001110 <main+0x318>)
 8000fe4:	f7ff f990 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000fe8:	4955      	ldr	r1, [pc, #340]	@ (8001140 <main+0x348>)
 8000fea:	4849      	ldr	r0, [pc, #292]	@ (8001110 <main+0x318>)
 8000fec:	f7ff f9df 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000ff0:	e011      	b.n	8001016 <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000ff2:	4854      	ldr	r0, [pc, #336]	@ (8001144 <main+0x34c>)
 8000ff4:	f002 fefa 	bl	8003dec <TM_MFRC522_Check>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <main+0x21e>
                {
                    key = CheckListUID(CardID);
 8000ffe:	4851      	ldr	r0, [pc, #324]	@ (8001144 <main+0x34c>)
 8001000:	f001 fefc 	bl	8002dfc <CheckListUID>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 4;
 800100a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8001014:	e003      	b.n	800101e <main+0x226>
            while (exitmenu)
 8001016:	4b49      	ldr	r3, [pc, #292]	@ (800113c <main+0x344>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e9      	bne.n	8000ff2 <main+0x1fa>
                }
            }

            switch (key)
 800101e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001022:	2b01      	cmp	r3, #1
 8001024:	d11b      	bne.n	800105e <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 8001026:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800102a:	2b41      	cmp	r3, #65	@ 0x41
 800102c:	d102      	bne.n	8001034 <main+0x23c>
                    RFID();
 800102e:	f000 fa9b 	bl	8001568 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8001032:	e02b      	b.n	800108c <main+0x294>
                else if (selected_key == 'B')
 8001034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001038:	2b42      	cmp	r3, #66	@ 0x42
 800103a:	d102      	bne.n	8001042 <main+0x24a>
                    FACEID();
 800103c:	f001 f9e8 	bl	8002410 <FACEID>
                break;
 8001040:	e024      	b.n	800108c <main+0x294>
                else if (selected_key == 'C')
 8001042:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001046:	2b43      	cmp	r3, #67	@ 0x43
 8001048:	d102      	bne.n	8001050 <main+0x258>
                    FINGER();
 800104a:	f001 fd9b 	bl	8002b84 <FINGER>
                break;
 800104e:	e01d      	b.n	800108c <main+0x294>
                else if (selected_key == 'D')
 8001050:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001054:	2b44      	cmp	r3, #68	@ 0x44
 8001056:	d119      	bne.n	800108c <main+0x294>
                    PASSWORD();
 8001058:	f001 fe28 	bl	8002cac <PASSWORD>
                break;
 800105c:	e016      	b.n	800108c <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 800105e:	482c      	ldr	r0, [pc, #176]	@ (8001110 <main+0x318>)
 8001060:	f7ff f9bc 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	4829      	ldr	r0, [pc, #164]	@ (8001110 <main+0x318>)
 800106a:	f7ff f94d 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 800106e:	4936      	ldr	r1, [pc, #216]	@ (8001148 <main+0x350>)
 8001070:	4827      	ldr	r0, [pc, #156]	@ (8001110 <main+0x318>)
 8001072:	f7ff f99c 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(5);
 8001076:	2005      	movs	r0, #5
 8001078:	f002 fe42 	bl	8003d00 <buzzer>
                HAL_Delay(2000);
 800107c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001080:	f003 fb4c 	bl	800471c <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <main+0x318>)
 8001086:	f7ff f9a9 	bl	80003dc <CLCD_I2C_Clear>
                break;
 800108a:	e000      	b.n	800108e <main+0x296>
                break;
 800108c:	bf00      	nop
            }
            break;
 800108e:	e037      	b.n	8001100 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001090:	482c      	ldr	r0, [pc, #176]	@ (8001144 <main+0x34c>)
 8001092:	f002 feab 	bl	8003dec <TM_MFRC522_Check>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d128      	bne.n	80010ee <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 800109c:	4829      	ldr	r0, [pc, #164]	@ (8001144 <main+0x34c>)
 800109e:	f001 fead 	bl	8002dfc <CheckListUID>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00e      	beq.n	80010c6 <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 80010a8:	4819      	ldr	r0, [pc, #100]	@ (8001110 <main+0x318>)
 80010aa:	f7ff f997 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <main+0x318>)
 80010b4:	f7ff f928 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80010b8:	491c      	ldr	r1, [pc, #112]	@ (800112c <main+0x334>)
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <main+0x318>)
 80010bc:	f7ff f977 	bl	80003ae <CLCD_I2C_WriteString>
            opendoor();
 80010c0:	f002 fdce 	bl	8003c60 <opendoor>
 80010c4:	e01c      	b.n	8001100 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 80010c6:	4812      	ldr	r0, [pc, #72]	@ (8001110 <main+0x318>)
 80010c8:	f7ff f988 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <main+0x318>)
 80010d2:	f7ff f919 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 80010d6:	491d      	ldr	r1, [pc, #116]	@ (800114c <main+0x354>)
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <main+0x318>)
 80010da:	f7ff f968 	bl	80003ae <CLCD_I2C_WriteString>
            buzzer(5);
 80010de:	2005      	movs	r0, #5
 80010e0:	f002 fe0e 	bl	8003d00 <buzzer>
            HAL_Delay(2000);
 80010e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010e8:	f003 fb18 	bl	800471c <HAL_Delay>
 80010ec:	e008      	b.n	8001100 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <main+0x358>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <main+0x308>
    {
        startface();
 80010f8:	f002 fc7c 	bl	80039f4 <startface>
 80010fc:	e000      	b.n	8001100 <main+0x308>
            break;
 80010fe:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 8001100:	f7ff fe56 	bl	8000db0 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 8001104:	f7ff fe68 	bl	8000dd8 <process_fingerprint>
  {
 8001108:	e6d9      	b.n	8000ebe <main+0xc6>
 800110a:	bf00      	nop
 800110c:	2000021c 	.word	0x2000021c
 8001110:	200003d8 	.word	0x200003d8
 8001114:	40010800 	.word	0x40010800
 8001118:	0800f400 	.word	0x0800f400
 800111c:	200002c8 	.word	0x200002c8
 8001120:	0800dd34 	.word	0x0800dd34
 8001124:	0800dd44 	.word	0x0800dd44
 8001128:	0800dd48 	.word	0x0800dd48
 800112c:	0800dd58 	.word	0x0800dd58
 8001130:	0800dd64 	.word	0x0800dd64
 8001134:	0800dd74 	.word	0x0800dd74
 8001138:	0800dd84 	.word	0x0800dd84
 800113c:	20000020 	.word	0x20000020
 8001140:	0800dd94 	.word	0x0800dd94
 8001144:	200003e4 	.word	0x200003e4
 8001148:	0800dda4 	.word	0x0800dda4
 800114c:	0800ddb4 	.word	0x0800ddb4
 8001150:	20000350 	.word	0x20000350

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	@ 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	2228      	movs	r2, #40	@ 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c f94a 	bl	800d3fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 ff96 	bl	80070dc <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011b6:	f002 fdc7 	bl	8003d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 fa02 	bl	80075e0 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011e2:	f002 fdb1 	bl	8003d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e6:	2310      	movs	r3, #16
 80011e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 fb8c 	bl	8007910 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fe:	f002 fda3 	bl	8003d48 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C2_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_I2C2_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C2_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_I2C2_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C2_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_I2C2_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_I2C2_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_I2C2_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_I2C2_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_I2C2_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_I2C2_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_I2C2_Init+0x50>)
 800124a:	f003 ff6f 	bl	800512c <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001254:	f002 fd78 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000021c 	.word	0x2000021c
 8001260:	40005800 	.word	0x40005800
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2230      	movs	r2, #48	@ 0x30
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f006 fbdf 	bl	8007a7c <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f002 fd40 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000270 	.word	0x20000270
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <MX_TIM2_Init+0x98>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_TIM2_Init+0x98>)
 80012fa:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_TIM2_Init+0x98>)
 8001308:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM2_Init+0x98>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM2_Init+0x98>)
 800131c:	f006 fe7a 	bl	8008014 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001326:	f002 fd0f 	bl	8003d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM2_Init+0x98>)
 8001338:	f007 f816 	bl	8008368 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001342:	f002 fd01 	bl	8003d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM2_Init+0x98>)
 8001354:	f007 f9e8 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800135e:	f002 fcf3 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002c8 	.word	0x200002c8

08001370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_USART1_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800137c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a8:	f007 fa2e 	bl	8008808 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f002 fcc9 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000310 	.word	0x20000310
 80013c0:	40013800 	.word	0x40013800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a51      	ldr	r2, [pc, #324]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4f      	ldr	r3, [pc, #316]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a4b      	ldr	r2, [pc, #300]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <MX_GPIO_Init+0x190>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800143e:	4846      	ldr	r0, [pc, #280]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001440:	f003 fe39 	bl	80050b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001444:	2200      	movs	r2, #0
 8001446:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800144a:	4844      	ldr	r0, [pc, #272]	@ (800155c <MX_GPIO_Init+0x198>)
 800144c:	f003 fe33 	bl	80050b6 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	4840      	ldr	r0, [pc, #256]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001458:	f003 fe2d 	bl	80050b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 800145c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	483b      	ldr	r0, [pc, #236]	@ (8001560 <MX_GPIO_Init+0x19c>)
 8001472:	f003 fc85 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8001476:	2303      	movs	r3, #3
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_GPIO_Init+0x194>)
 800148a:	f003 fc79 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800148e:	2310      	movs	r3, #16
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014a6:	f003 fc6b 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80014aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4826      	ldr	r0, [pc, #152]	@ (800155c <MX_GPIO_Init+0x198>)
 80014c4:	f003 fc5c 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014ce:	2311      	movs	r3, #17
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014e2:	f003 fc4d 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80014e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001500:	f003 fc3e 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001504:	2308      	movs	r3, #8
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_GPIO_Init+0x198>)
 800151c:	f003 fc30 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_GPIO_Init+0x1a0>)
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <MX_GPIO_Init+0x198>)
 8001536:	f003 fc23 	bl	8004d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	2017      	movs	r0, #23
 8001540:	f003 f9e7 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001544:	2017      	movs	r0, #23
 8001546:	f003 fa00 	bl	800494a <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	10110000 	.word	0x10110000

08001568 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
	buzzer(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f002 fbc6 	bl	8003d00 <buzzer>
	exitmenu = 15;
 8001574:	4ba2      	ldr	r3, [pc, #648]	@ (8001800 <RFID+0x298>)
 8001576:	220f      	movs	r2, #15
 8001578:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800157a:	23ff      	movs	r3, #255	@ 0xff
 800157c:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 800157e:	4aa1      	ldr	r2, [pc, #644]	@ (8001804 <RFID+0x29c>)
 8001580:	49a1      	ldr	r1, [pc, #644]	@ (8001808 <RFID+0x2a0>)
 8001582:	48a2      	ldr	r0, [pc, #648]	@ (800180c <RFID+0x2a4>)
 8001584:	f7fe ff3a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8001588:	f000 befc 	b.w	8002384 <RFID+0xe1c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f7ff f88f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001592:	4603      	mov	r3, r0
 8001594:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	2b2a      	cmp	r3, #42	@ 0x2a
 800159a:	d131      	bne.n	8001600 <RFID+0x98>
		{
			buzzer(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f002 fbaf 	bl	8003d00 <buzzer>
			exitmenu = 15;
 80015a2:	4b97      	ldr	r3, [pc, #604]	@ (8001800 <RFID+0x298>)
 80015a4:	220f      	movs	r2, #15
 80015a6:	701a      	strb	r2, [r3, #0]
			status++;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	3301      	adds	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d801      	bhi.n	80015b8 <RFID+0x50>
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	e000      	b.n	80015ba <RFID+0x52>
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d012      	beq.n	80015e8 <RFID+0x80>
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	dc16      	bgt.n	80015f4 <RFID+0x8c>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <RFID+0x68>
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d006      	beq.n	80015dc <RFID+0x74>
 80015ce:	e011      	b.n	80015f4 <RFID+0x8c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80015d0:	4a8f      	ldr	r2, [pc, #572]	@ (8001810 <RFID+0x2a8>)
 80015d2:	498d      	ldr	r1, [pc, #564]	@ (8001808 <RFID+0x2a0>)
 80015d4:	488d      	ldr	r0, [pc, #564]	@ (800180c <RFID+0x2a4>)
 80015d6:	f7fe ff11 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015da:	e011      	b.n	8001600 <RFID+0x98>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80015dc:	4a8d      	ldr	r2, [pc, #564]	@ (8001814 <RFID+0x2ac>)
 80015de:	498a      	ldr	r1, [pc, #552]	@ (8001808 <RFID+0x2a0>)
 80015e0:	488a      	ldr	r0, [pc, #552]	@ (800180c <RFID+0x2a4>)
 80015e2:	f7fe ff0b 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015e6:	e00b      	b.n	8001600 <RFID+0x98>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80015e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001818 <RFID+0x2b0>)
 80015ea:	4987      	ldr	r1, [pc, #540]	@ (8001808 <RFID+0x2a0>)
 80015ec:	4887      	ldr	r0, [pc, #540]	@ (800180c <RFID+0x2a4>)
 80015ee:	f7fe ff05 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015f2:	e005      	b.n	8001600 <RFID+0x98>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80015f4:	4a89      	ldr	r2, [pc, #548]	@ (800181c <RFID+0x2b4>)
 80015f6:	4984      	ldr	r1, [pc, #528]	@ (8001808 <RFID+0x2a0>)
 80015f8:	4884      	ldr	r0, [pc, #528]	@ (800180c <RFID+0x2a4>)
 80015fa:	f7fe feff 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015fe:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	2b23      	cmp	r3, #35	@ 0x23
 8001604:	f040 86be 	bne.w	8002384 <RFID+0xe1c>
		{
			buzzer(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f002 fb79 	bl	8003d00 <buzzer>
			exitmenu = 15;
 800160e:	4b7c      	ldr	r3, [pc, #496]	@ (8001800 <RFID+0x298>)
 8001610:	220f      	movs	r2, #15
 8001612:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b02      	cmp	r3, #2
 8001618:	f000 86a8 	beq.w	800236c <RFID+0xe04>
 800161c:	2b02      	cmp	r3, #2
 800161e:	f300 86ad 	bgt.w	800237c <RFID+0xe14>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <RFID+0xc8>
 8001626:	2b01      	cmp	r3, #1
 8001628:	f000 8252 	beq.w	8001ad0 <RFID+0x568>
 800162c:	f000 bea6 	b.w	800237c <RFID+0xe14>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001630:	4a7b      	ldr	r2, [pc, #492]	@ (8001820 <RFID+0x2b8>)
 8001632:	497c      	ldr	r1, [pc, #496]	@ (8001824 <RFID+0x2bc>)
 8001634:	4875      	ldr	r0, [pc, #468]	@ (800180c <RFID+0x2a4>)
 8001636:	f7fe fee1 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001642:	e23a      	b.n	8001aba <RFID+0x552>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001644:	200a      	movs	r0, #10
 8001646:	f7ff f833 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800164a:	4603      	mov	r3, r0
 800164c:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800164e:	4b6c      	ldr	r3, [pc, #432]	@ (8001800 <RFID+0x298>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <RFID+0x100>
					{
						CLCD_I2C_Clear(&LCD1);
 8001656:	486d      	ldr	r0, [pc, #436]	@ (800180c <RFID+0x2a4>)
 8001658:	f7fe fec0 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001660:	f003 f85c 	bl	800471c <HAL_Delay>
						return;
 8001664:	f000 be96 	b.w	8002394 <RFID+0xe2c>
					}
					if (key_pressed =='*')
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	2b2a      	cmp	r3, #42	@ 0x2a
 800166c:	d127      	bne.n	80016be <RFID+0x156>
					{
						buzzer(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f002 fb46 	bl	8003d00 <buzzer>
						exitmenu = 15;
 8001674:	4b62      	ldr	r3, [pc, #392]	@ (8001800 <RFID+0x298>)
 8001676:	220f      	movs	r2, #15
 8001678:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	3301      	adds	r3, #1
 800167e:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001680:	7dbb      	ldrb	r3, [r7, #22]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d801      	bhi.n	800168a <RFID+0x122>
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	e000      	b.n	800168c <RFID+0x124>
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800168e:	7dbb      	ldrb	r3, [r7, #22]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d002      	beq.n	800169a <RFID+0x132>
 8001694:	2b02      	cmp	r3, #2
 8001696:	d006      	beq.n	80016a6 <RFID+0x13e>
 8001698:	e00b      	b.n	80016b2 <RFID+0x14a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 800169a:	4a63      	ldr	r2, [pc, #396]	@ (8001828 <RFID+0x2c0>)
 800169c:	4963      	ldr	r1, [pc, #396]	@ (800182c <RFID+0x2c4>)
 800169e:	485b      	ldr	r0, [pc, #364]	@ (800180c <RFID+0x2a4>)
 80016a0:	f7fe feac 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016a4:	e00b      	b.n	80016be <RFID+0x156>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80016a6:	4a62      	ldr	r2, [pc, #392]	@ (8001830 <RFID+0x2c8>)
 80016a8:	4960      	ldr	r1, [pc, #384]	@ (800182c <RFID+0x2c4>)
 80016aa:	4858      	ldr	r0, [pc, #352]	@ (800180c <RFID+0x2a4>)
 80016ac:	f7fe fea6 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016b0:	e005      	b.n	80016be <RFID+0x156>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <RFID+0x2b4>)
 80016b4:	495d      	ldr	r1, [pc, #372]	@ (800182c <RFID+0x2c4>)
 80016b6:	4855      	ldr	r0, [pc, #340]	@ (800180c <RFID+0x2a4>)
 80016b8:	f7fe fea0 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016bc:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	2b23      	cmp	r3, #35	@ 0x23
 80016c2:	f040 81fa 	bne.w	8001aba <RFID+0x552>
					{
						buzzer(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f002 fb1a 	bl	8003d00 <buzzer>
						exitmenu = 15;
 80016cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <RFID+0x298>)
 80016ce:	220f      	movs	r2, #15
 80016d0:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80016d2:	7dbb      	ldrb	r3, [r7, #22]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d003      	beq.n	80016e0 <RFID+0x178>
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f000 810a 	beq.w	80018f2 <RFID+0x38a>
 80016de:	e1e9      	b.n	8001ab4 <RFID+0x54c>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80016e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001820 <RFID+0x2b8>)
 80016e2:	4950      	ldr	r1, [pc, #320]	@ (8001824 <RFID+0x2bc>)
 80016e4:	4849      	ldr	r0, [pc, #292]	@ (800180c <RFID+0x2a4>)
 80016e6:	f7fe fe89 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80016f2:	e0f4      	b.n	80018de <RFID+0x376>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7fe ffdb 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80016fa:	4603      	mov	r3, r0
 80016fc:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <RFID+0x298>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d108      	bne.n	8001718 <RFID+0x1b0>
								{
									CLCD_I2C_Clear(&LCD1);
 8001706:	4841      	ldr	r0, [pc, #260]	@ (800180c <RFID+0x2a4>)
 8001708:	f7fe fe68 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800170c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001710:	f003 f804 	bl	800471c <HAL_Delay>
									return;
 8001714:	f000 be3e 	b.w	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	2b2a      	cmp	r3, #42	@ 0x2a
 800171c:	d131      	bne.n	8001782 <RFID+0x21a>
								{
									buzzer(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f002 faee 	bl	8003d00 <buzzer>
									exitmenu = 15;
 8001724:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <RFID+0x298>)
 8001726:	220f      	movs	r2, #15
 8001728:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001730:	7d3b      	ldrb	r3, [r7, #20]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d801      	bhi.n	800173a <RFID+0x1d2>
 8001736:	7d3b      	ldrb	r3, [r7, #20]
 8001738:	e000      	b.n	800173c <RFID+0x1d4>
 800173a:	2300      	movs	r3, #0
 800173c:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d012      	beq.n	800176a <RFID+0x202>
 8001744:	2b03      	cmp	r3, #3
 8001746:	dc16      	bgt.n	8001776 <RFID+0x20e>
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <RFID+0x1ea>
 800174c:	2b02      	cmp	r3, #2
 800174e:	d006      	beq.n	800175e <RFID+0x1f6>
 8001750:	e011      	b.n	8001776 <RFID+0x20e>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <RFID+0x2cc>)
 8001754:	4938      	ldr	r1, [pc, #224]	@ (8001838 <RFID+0x2d0>)
 8001756:	482d      	ldr	r0, [pc, #180]	@ (800180c <RFID+0x2a4>)
 8001758:	f7fe fe50 	bl	80003fc <CLCD_I2C_Display>
										break;
 800175c:	e011      	b.n	8001782 <RFID+0x21a>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <RFID+0x2d4>)
 8001760:	4935      	ldr	r1, [pc, #212]	@ (8001838 <RFID+0x2d0>)
 8001762:	482a      	ldr	r0, [pc, #168]	@ (800180c <RFID+0x2a4>)
 8001764:	f7fe fe4a 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001768:	e00b      	b.n	8001782 <RFID+0x21a>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 800176a:	4a35      	ldr	r2, [pc, #212]	@ (8001840 <RFID+0x2d8>)
 800176c:	4932      	ldr	r1, [pc, #200]	@ (8001838 <RFID+0x2d0>)
 800176e:	4827      	ldr	r0, [pc, #156]	@ (800180c <RFID+0x2a4>)
 8001770:	f7fe fe44 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001774:	e005      	b.n	8001782 <RFID+0x21a>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 8001776:	4a29      	ldr	r2, [pc, #164]	@ (800181c <RFID+0x2b4>)
 8001778:	492f      	ldr	r1, [pc, #188]	@ (8001838 <RFID+0x2d0>)
 800177a:	4824      	ldr	r0, [pc, #144]	@ (800180c <RFID+0x2a4>)
 800177c:	f7fe fe3e 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001780:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001782:	797b      	ldrb	r3, [r7, #5]
 8001784:	2b23      	cmp	r3, #35	@ 0x23
 8001786:	f040 80aa 	bne.w	80018de <RFID+0x376>
								{
									buzzer(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f002 fab8 	bl	8003d00 <buzzer>
									exitmenu = 15;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <RFID+0x298>)
 8001792:	220f      	movs	r2, #15
 8001794:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001796:	7dbb      	ldrb	r3, [r7, #22]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7d3b      	ldrb	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d074      	beq.n	8001892 <RFID+0x32a>
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	f300 8095 	bgt.w	80018d8 <RFID+0x370>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <RFID+0x250>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d04a      	beq.n	800184c <RFID+0x2e4>
 80017b6:	e08f      	b.n	80018d8 <RFID+0x370>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fcae 	bl	800311c <CheckKey>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d011      	beq.n	80017ea <RFID+0x282>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80017c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001844 <RFID+0x2dc>)
 80017c8:	491f      	ldr	r1, [pc, #124]	@ (8001848 <RFID+0x2e0>)
 80017ca:	4810      	ldr	r0, [pc, #64]	@ (800180c <RFID+0x2a4>)
 80017cc:	f7fe fe16 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f002 fa95 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f002 ff9f 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <RFID+0x2cc>)
 80017e0:	4915      	ldr	r1, [pc, #84]	@ (8001838 <RFID+0x2d0>)
 80017e2:	480a      	ldr	r0, [pc, #40]	@ (800180c <RFID+0x2a4>)
 80017e4:	f7fe fe0a 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80017e8:	e079      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fb67 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <RFID+0x2cc>)
 80017f4:	4910      	ldr	r1, [pc, #64]	@ (8001838 <RFID+0x2d0>)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <RFID+0x2a4>)
 80017f8:	f7fe fe00 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017fc:	e06f      	b.n	80018de <RFID+0x376>
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020
 8001804:	0800ddc4 	.word	0x0800ddc4
 8001808:	0800ddd4 	.word	0x0800ddd4
 800180c:	200003d8 	.word	0x200003d8
 8001810:	0800dde4 	.word	0x0800dde4
 8001814:	0800ddf0 	.word	0x0800ddf0
 8001818:	0800de00 	.word	0x0800de00
 800181c:	0800de10 	.word	0x0800de10
 8001820:	0800de18 	.word	0x0800de18
 8001824:	0800de24 	.word	0x0800de24
 8001828:	0800de34 	.word	0x0800de34
 800182c:	0800de44 	.word	0x0800de44
 8001830:	0800de50 	.word	0x0800de50
 8001834:	0800de60 	.word	0x0800de60
 8001838:	0800de74 	.word	0x0800de74
 800183c:	0800de84 	.word	0x0800de84
 8001840:	0800de98 	.word	0x0800de98
 8001844:	0800deac 	.word	0x0800deac
 8001848:	0800dec0 	.word	0x0800dec0
									case 2:
										if (CheckKey(keyadd1) != 0)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fc64 	bl	800311c <CheckKey>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d011      	beq.n	800187e <RFID+0x316>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 800185a:	4aac      	ldr	r2, [pc, #688]	@ (8001b0c <RFID+0x5a4>)
 800185c:	49ac      	ldr	r1, [pc, #688]	@ (8001b10 <RFID+0x5a8>)
 800185e:	48ad      	ldr	r0, [pc, #692]	@ (8001b14 <RFID+0x5ac>)
 8001860:	f7fe fdcc 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001864:	2003      	movs	r0, #3
 8001866:	f002 fa4b 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186e:	f002 ff55 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001872:	4aa9      	ldr	r2, [pc, #676]	@ (8001b18 <RFID+0x5b0>)
 8001874:	49a9      	ldr	r1, [pc, #676]	@ (8001b1c <RFID+0x5b4>)
 8001876:	48a7      	ldr	r0, [pc, #668]	@ (8001b14 <RFID+0x5ac>)
 8001878:	f7fe fdc0 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 800187c:	e02f      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 800187e:	787b      	ldrb	r3, [r7, #1]
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fb1d 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001886:	4aa4      	ldr	r2, [pc, #656]	@ (8001b18 <RFID+0x5b0>)
 8001888:	49a4      	ldr	r1, [pc, #656]	@ (8001b1c <RFID+0x5b4>)
 800188a:	48a2      	ldr	r0, [pc, #648]	@ (8001b14 <RFID+0x5ac>)
 800188c:	f7fe fdb6 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001890:	e025      	b.n	80018de <RFID+0x376>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001892:	787b      	ldrb	r3, [r7, #1]
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fc41 	bl	800311c <CheckKey>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d011      	beq.n	80018c4 <RFID+0x35c>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 80018a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001b20 <RFID+0x5b8>)
 80018a2:	49a0      	ldr	r1, [pc, #640]	@ (8001b24 <RFID+0x5bc>)
 80018a4:	489b      	ldr	r0, [pc, #620]	@ (8001b14 <RFID+0x5ac>)
 80018a6:	f7fe fda9 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80018aa:	2003      	movs	r0, #3
 80018ac:	f002 fa28 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 80018b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b4:	f002 ff32 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80018b8:	4a9b      	ldr	r2, [pc, #620]	@ (8001b28 <RFID+0x5c0>)
 80018ba:	4998      	ldr	r1, [pc, #608]	@ (8001b1c <RFID+0x5b4>)
 80018bc:	4895      	ldr	r0, [pc, #596]	@ (8001b14 <RFID+0x5ac>)
 80018be:	f7fe fd9d 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80018c2:	e00c      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fafa 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80018cc:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <RFID+0x5c0>)
 80018ce:	4993      	ldr	r1, [pc, #588]	@ (8001b1c <RFID+0x5b4>)
 80018d0:	4890      	ldr	r0, [pc, #576]	@ (8001b14 <RFID+0x5ac>)
 80018d2:	f7fe fd93 	bl	80003fc <CLCD_I2C_Display>
										break;
 80018d6:	e002      	b.n	80018de <RFID+0x376>
									default:
										back11 = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	74fb      	strb	r3, [r7, #19]
										break;
 80018dc:	bf00      	nop
							while (back11 == 1)
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	f43f af07 	beq.w	80016f4 <RFID+0x18c>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018e6:	4a91      	ldr	r2, [pc, #580]	@ (8001b2c <RFID+0x5c4>)
 80018e8:	4991      	ldr	r1, [pc, #580]	@ (8001b30 <RFID+0x5c8>)
 80018ea:	488a      	ldr	r0, [pc, #552]	@ (8001b14 <RFID+0x5ac>)
 80018ec:	f7fe fd86 	bl	80003fc <CLCD_I2C_Display>
							break;
 80018f0:	e0e3      	b.n	8001aba <RFID+0x552>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80018f2:	4a90      	ldr	r2, [pc, #576]	@ (8001b34 <RFID+0x5cc>)
 80018f4:	4990      	ldr	r1, [pc, #576]	@ (8001b38 <RFID+0x5d0>)
 80018f6:	4887      	ldr	r0, [pc, #540]	@ (8001b14 <RFID+0x5ac>)
 80018f8:	f7fe fd80 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001900:	2301      	movs	r3, #1
 8001902:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001904:	e0cc      	b.n	8001aa0 <RFID+0x538>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001906:	200a      	movs	r0, #10
 8001908:	f7fe fed2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800190c:	4603      	mov	r3, r0
 800190e:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001910:	4b8a      	ldr	r3, [pc, #552]	@ (8001b3c <RFID+0x5d4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d108      	bne.n	800192a <RFID+0x3c2>
								{
									CLCD_I2C_Clear(&LCD1);
 8001918:	487e      	ldr	r0, [pc, #504]	@ (8001b14 <RFID+0x5ac>)
 800191a:	f7fe fd5f 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800191e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001922:	f002 fefb 	bl	800471c <HAL_Delay>
									return;
 8001926:	f000 bd35 	b.w	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	2b2a      	cmp	r3, #42	@ 0x2a
 800192e:	d131      	bne.n	8001994 <RFID+0x42c>
								{
									buzzer(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f002 f9e5 	bl	8003d00 <buzzer>
									exitmenu = 15;
 8001936:	4b81      	ldr	r3, [pc, #516]	@ (8001b3c <RFID+0x5d4>)
 8001938:	220f      	movs	r2, #15
 800193a:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800193c:	7cbb      	ldrb	r3, [r7, #18]
 800193e:	3301      	adds	r3, #1
 8001940:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d801      	bhi.n	800194c <RFID+0x3e4>
 8001948:	7cbb      	ldrb	r3, [r7, #18]
 800194a:	e000      	b.n	800194e <RFID+0x3e6>
 800194c:	2300      	movs	r3, #0
 800194e:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001950:	7cbb      	ldrb	r3, [r7, #18]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d012      	beq.n	800197c <RFID+0x414>
 8001956:	2b03      	cmp	r3, #3
 8001958:	dc16      	bgt.n	8001988 <RFID+0x420>
 800195a:	2b01      	cmp	r3, #1
 800195c:	d002      	beq.n	8001964 <RFID+0x3fc>
 800195e:	2b02      	cmp	r3, #2
 8001960:	d006      	beq.n	8001970 <RFID+0x408>
 8001962:	e011      	b.n	8001988 <RFID+0x420>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001964:	4a76      	ldr	r2, [pc, #472]	@ (8001b40 <RFID+0x5d8>)
 8001966:	4977      	ldr	r1, [pc, #476]	@ (8001b44 <RFID+0x5dc>)
 8001968:	486a      	ldr	r0, [pc, #424]	@ (8001b14 <RFID+0x5ac>)
 800196a:	f7fe fd47 	bl	80003fc <CLCD_I2C_Display>
										break;
 800196e:	e011      	b.n	8001994 <RFID+0x42c>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001970:	4a75      	ldr	r2, [pc, #468]	@ (8001b48 <RFID+0x5e0>)
 8001972:	4974      	ldr	r1, [pc, #464]	@ (8001b44 <RFID+0x5dc>)
 8001974:	4867      	ldr	r0, [pc, #412]	@ (8001b14 <RFID+0x5ac>)
 8001976:	f7fe fd41 	bl	80003fc <CLCD_I2C_Display>
										break;
 800197a:	e00b      	b.n	8001994 <RFID+0x42c>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800197c:	4a73      	ldr	r2, [pc, #460]	@ (8001b4c <RFID+0x5e4>)
 800197e:	4971      	ldr	r1, [pc, #452]	@ (8001b44 <RFID+0x5dc>)
 8001980:	4864      	ldr	r0, [pc, #400]	@ (8001b14 <RFID+0x5ac>)
 8001982:	f7fe fd3b 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001986:	e005      	b.n	8001994 <RFID+0x42c>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 8001988:	4a71      	ldr	r2, [pc, #452]	@ (8001b50 <RFID+0x5e8>)
 800198a:	496e      	ldr	r1, [pc, #440]	@ (8001b44 <RFID+0x5dc>)
 800198c:	4861      	ldr	r0, [pc, #388]	@ (8001b14 <RFID+0x5ac>)
 800198e:	f7fe fd35 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001992:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	2b23      	cmp	r3, #35	@ 0x23
 8001998:	f040 8082 	bne.w	8001aa0 <RFID+0x538>
								{
									buzzer(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f002 f9af 	bl	8003d00 <buzzer>
									exitmenu = 15;
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <RFID+0x5d4>)
 80019a4:	220f      	movs	r2, #15
 80019a6:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80019a8:	7dbb      	ldrb	r3, [r7, #22]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	7cbb      	ldrb	r3, [r7, #18]
 80019b0:	4413      	add	r3, r2
 80019b2:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 80019b4:	7cbb      	ldrb	r3, [r7, #18]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d04c      	beq.n	8001a54 <RFID+0x4ec>
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	dc6d      	bgt.n	8001a9a <RFID+0x532>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <RFID+0x460>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d023      	beq.n	8001a0e <RFID+0x4a6>
 80019c6:	e068      	b.n	8001a9a <RFID+0x532>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fba6 	bl	800311c <CheckKey>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d011      	beq.n	80019fa <RFID+0x492>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80019d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b54 <RFID+0x5ec>)
 80019d8:	495f      	ldr	r1, [pc, #380]	@ (8001b58 <RFID+0x5f0>)
 80019da:	484e      	ldr	r0, [pc, #312]	@ (8001b14 <RFID+0x5ac>)
 80019dc:	f7fe fd0e 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f002 f98d 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ea:	f002 fe97 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80019ee:	4a54      	ldr	r2, [pc, #336]	@ (8001b40 <RFID+0x5d8>)
 80019f0:	4954      	ldr	r1, [pc, #336]	@ (8001b44 <RFID+0x5dc>)
 80019f2:	4848      	ldr	r0, [pc, #288]	@ (8001b14 <RFID+0x5ac>)
 80019f4:	f7fe fd02 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80019f8:	e052      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 80019fa:	78bb      	ldrb	r3, [r7, #2]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fa5f 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001a02:	4a4f      	ldr	r2, [pc, #316]	@ (8001b40 <RFID+0x5d8>)
 8001a04:	494f      	ldr	r1, [pc, #316]	@ (8001b44 <RFID+0x5dc>)
 8001a06:	4843      	ldr	r0, [pc, #268]	@ (8001b14 <RFID+0x5ac>)
 8001a08:	f7fe fcf8 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a0c:	e048      	b.n	8001aa0 <RFID+0x538>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fb83 	bl	800311c <CheckKey>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <RFID+0x4d8>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b0c <RFID+0x5a4>)
 8001a1e:	494f      	ldr	r1, [pc, #316]	@ (8001b5c <RFID+0x5f4>)
 8001a20:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <RFID+0x5ac>)
 8001a22:	f7fe fceb 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001a26:	2003      	movs	r0, #3
 8001a28:	f002 f96a 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 8001a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a30:	f002 fe74 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001a34:	4a44      	ldr	r2, [pc, #272]	@ (8001b48 <RFID+0x5e0>)
 8001a36:	4943      	ldr	r1, [pc, #268]	@ (8001b44 <RFID+0x5dc>)
 8001a38:	4836      	ldr	r0, [pc, #216]	@ (8001b14 <RFID+0x5ac>)
 8001a3a:	f7fe fcdf 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001a3e:	e02f      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fa3c 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001a48:	4a3f      	ldr	r2, [pc, #252]	@ (8001b48 <RFID+0x5e0>)
 8001a4a:	493e      	ldr	r1, [pc, #248]	@ (8001b44 <RFID+0x5dc>)
 8001a4c:	4831      	ldr	r0, [pc, #196]	@ (8001b14 <RFID+0x5ac>)
 8001a4e:	f7fe fcd5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a52:	e025      	b.n	8001aa0 <RFID+0x538>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001a54:	78bb      	ldrb	r3, [r7, #2]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fb60 	bl	800311c <CheckKey>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d011      	beq.n	8001a86 <RFID+0x51e>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001a62:	4a2f      	ldr	r2, [pc, #188]	@ (8001b20 <RFID+0x5b8>)
 8001a64:	493e      	ldr	r1, [pc, #248]	@ (8001b60 <RFID+0x5f8>)
 8001a66:	482b      	ldr	r0, [pc, #172]	@ (8001b14 <RFID+0x5ac>)
 8001a68:	f7fe fcc8 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f002 f947 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 8001a72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a76:	f002 fe51 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <RFID+0x5e4>)
 8001a7c:	4931      	ldr	r1, [pc, #196]	@ (8001b44 <RFID+0x5dc>)
 8001a7e:	4825      	ldr	r0, [pc, #148]	@ (8001b14 <RFID+0x5ac>)
 8001a80:	f7fe fcbc 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001a84:	e00c      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fa19 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <RFID+0x5e4>)
 8001a90:	492c      	ldr	r1, [pc, #176]	@ (8001b44 <RFID+0x5dc>)
 8001a92:	4820      	ldr	r0, [pc, #128]	@ (8001b14 <RFID+0x5ac>)
 8001a94:	f7fe fcb2 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a98:	e002      	b.n	8001aa0 <RFID+0x538>
									default:
										back12 = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	747b      	strb	r3, [r7, #17]
										break;
 8001a9e:	bf00      	nop
							while (back12 == 1)
 8001aa0:	7c7b      	ldrb	r3, [r7, #17]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f43f af2f 	beq.w	8001906 <RFID+0x39e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <RFID+0x5fc>)
 8001aaa:	4921      	ldr	r1, [pc, #132]	@ (8001b30 <RFID+0x5c8>)
 8001aac:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <RFID+0x5ac>)
 8001aae:	f7fe fca5 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001ab2:	e002      	b.n	8001aba <RFID+0x552>
						default:
							back = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	757b      	strb	r3, [r7, #21]
							break;
 8001ab8:	bf00      	nop
				while (back == 1)
 8001aba:	7d7b      	ldrb	r3, [r7, #21]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f43f adc1 	beq.w	8001644 <RFID+0xdc>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001ac2:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <RFID+0x600>)
 8001ac4:	4929      	ldr	r1, [pc, #164]	@ (8001b6c <RFID+0x604>)
 8001ac6:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <RFID+0x5ac>)
 8001ac8:	f7fe fc98 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001acc:	f000 bc5a 	b.w	8002384 <RFID+0xe1c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <RFID+0x5cc>)
 8001ad2:	4919      	ldr	r1, [pc, #100]	@ (8001b38 <RFID+0x5d0>)
 8001ad4:	480f      	ldr	r0, [pc, #60]	@ (8001b14 <RFID+0x5ac>)
 8001ad6:	f7fe fc91 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001ada:	23ff      	movs	r3, #255	@ 0xff
 8001adc:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001ae2:	f000 bc39 	b.w	8002358 <RFID+0xdf0>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f7fe fde2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001aec:	4603      	mov	r3, r0
 8001aee:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <RFID+0x5d4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d13b      	bne.n	8001b70 <RFID+0x608>
					{
						CLCD_I2C_Clear(&LCD1);
 8001af8:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <RFID+0x5ac>)
 8001afa:	f7fe fc6f 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b02:	f002 fe0b 	bl	800471c <HAL_Delay>
						return;
 8001b06:	f000 bc45 	b.w	8002394 <RFID+0xe2c>
 8001b0a:	bf00      	nop
 8001b0c:	0800decc 	.word	0x0800decc
 8001b10:	0800dee0 	.word	0x0800dee0
 8001b14:	200003d8 	.word	0x200003d8
 8001b18:	0800de84 	.word	0x0800de84
 8001b1c:	0800de74 	.word	0x0800de74
 8001b20:	0800deec 	.word	0x0800deec
 8001b24:	0800df00 	.word	0x0800df00
 8001b28:	0800de98 	.word	0x0800de98
 8001b2c:	0800de34 	.word	0x0800de34
 8001b30:	0800de44 	.word	0x0800de44
 8001b34:	0800de18 	.word	0x0800de18
 8001b38:	0800de24 	.word	0x0800de24
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	0800df0c 	.word	0x0800df0c
 8001b44:	0800df1c 	.word	0x0800df1c
 8001b48:	0800df2c 	.word	0x0800df2c
 8001b4c:	0800df3c 	.word	0x0800df3c
 8001b50:	0800de10 	.word	0x0800de10
 8001b54:	0800deac 	.word	0x0800deac
 8001b58:	0800df4c 	.word	0x0800df4c
 8001b5c:	0800df58 	.word	0x0800df58
 8001b60:	0800df64 	.word	0x0800df64
 8001b64:	0800de50 	.word	0x0800de50
 8001b68:	0800dde4 	.word	0x0800dde4
 8001b6c:	0800ddd4 	.word	0x0800ddd4
					}
					if (key_pressed =='*')
 8001b70:	797b      	ldrb	r3, [r7, #5]
 8001b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b74:	d127      	bne.n	8001bc6 <RFID+0x65e>
					{
						buzzer(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f002 f8c2 	bl	8003d00 <buzzer>
						exitmenu = 15;
 8001b7c:	4b95      	ldr	r3, [pc, #596]	@ (8001dd4 <RFID+0x86c>)
 8001b7e:	220f      	movs	r2, #15
 8001b80:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001b82:	7c3b      	ldrb	r3, [r7, #16]
 8001b84:	3301      	adds	r3, #1
 8001b86:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001b88:	7c3b      	ldrb	r3, [r7, #16]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d801      	bhi.n	8001b92 <RFID+0x62a>
 8001b8e:	7c3b      	ldrb	r3, [r7, #16]
 8001b90:	e000      	b.n	8001b94 <RFID+0x62c>
 8001b92:	2300      	movs	r3, #0
 8001b94:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001b96:	7c3b      	ldrb	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <RFID+0x63a>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d006      	beq.n	8001bae <RFID+0x646>
 8001ba0:	e00b      	b.n	8001bba <RFID+0x652>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001ba2:	4a8d      	ldr	r2, [pc, #564]	@ (8001dd8 <RFID+0x870>)
 8001ba4:	498d      	ldr	r1, [pc, #564]	@ (8001ddc <RFID+0x874>)
 8001ba6:	488e      	ldr	r0, [pc, #568]	@ (8001de0 <RFID+0x878>)
 8001ba8:	f7fe fc28 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bac:	e00b      	b.n	8001bc6 <RFID+0x65e>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001bae:	4a8d      	ldr	r2, [pc, #564]	@ (8001de4 <RFID+0x87c>)
 8001bb0:	498a      	ldr	r1, [pc, #552]	@ (8001ddc <RFID+0x874>)
 8001bb2:	488b      	ldr	r0, [pc, #556]	@ (8001de0 <RFID+0x878>)
 8001bb4:	f7fe fc22 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bb8:	e005      	b.n	8001bc6 <RFID+0x65e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001bba:	4a8b      	ldr	r2, [pc, #556]	@ (8001de8 <RFID+0x880>)
 8001bbc:	4987      	ldr	r1, [pc, #540]	@ (8001ddc <RFID+0x874>)
 8001bbe:	4888      	ldr	r0, [pc, #544]	@ (8001de0 <RFID+0x878>)
 8001bc0:	f7fe fc1c 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bc4:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001bc6:	797b      	ldrb	r3, [r7, #5]
 8001bc8:	2b23      	cmp	r3, #35	@ 0x23
 8001bca:	f040 83c5 	bne.w	8002358 <RFID+0xdf0>
					{
						buzzer(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f002 f896 	bl	8003d00 <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001bd4:	4a85      	ldr	r2, [pc, #532]	@ (8001dec <RFID+0x884>)
 8001bd6:	4986      	ldr	r1, [pc, #536]	@ (8001df0 <RFID+0x888>)
 8001bd8:	4881      	ldr	r0, [pc, #516]	@ (8001de0 <RFID+0x878>)
 8001bda:	f7fe fc0f 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = 15;
 8001bde:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd4 <RFID+0x86c>)
 8001be0:	220f      	movs	r2, #15
 8001be2:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001be4:	7c3b      	ldrb	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <RFID+0x68a>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f000 83a9 	beq.w	8002342 <RFID+0xdda>
 8001bf0:	e3af      	b.n	8002352 <RFID+0xdea>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001bf2:	23ff      	movs	r3, #255	@ 0xff
 8001bf4:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001bfa:	e398      	b.n	800232e <RFID+0xdc6>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f7fe fd57 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001c02:	4603      	mov	r3, r0
 8001c04:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001c06:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <RFID+0x86c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <RFID+0x6b6>
								{
									CLCD_I2C_Clear(&LCD1);
 8001c0e:	4874      	ldr	r0, [pc, #464]	@ (8001de0 <RFID+0x878>)
 8001c10:	f7fe fbe4 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001c14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c18:	f002 fd80 	bl	800471c <HAL_Delay>
									return;
 8001c1c:	e3ba      	b.n	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c22:	d124      	bne.n	8001c6e <RFID+0x706>
								{
									buzzer(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f002 f86b 	bl	8003d00 <buzzer>
									statusrm1++;
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d801      	bhi.n	8001c3a <RFID+0x6d2>
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	e000      	b.n	8001c3c <RFID+0x6d4>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <RFID+0x6e2>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d006      	beq.n	8001c56 <RFID+0x6ee>
 8001c48:	e00b      	b.n	8001c62 <RFID+0x6fa>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8001df4 <RFID+0x88c>)
 8001c4c:	496a      	ldr	r1, [pc, #424]	@ (8001df8 <RFID+0x890>)
 8001c4e:	4864      	ldr	r0, [pc, #400]	@ (8001de0 <RFID+0x878>)
 8001c50:	f7fe fbd4 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c54:	e00b      	b.n	8001c6e <RFID+0x706>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001c56:	4a69      	ldr	r2, [pc, #420]	@ (8001dfc <RFID+0x894>)
 8001c58:	4967      	ldr	r1, [pc, #412]	@ (8001df8 <RFID+0x890>)
 8001c5a:	4861      	ldr	r0, [pc, #388]	@ (8001de0 <RFID+0x878>)
 8001c5c:	f7fe fbce 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c60:	e005      	b.n	8001c6e <RFID+0x706>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001c62:	4a61      	ldr	r2, [pc, #388]	@ (8001de8 <RFID+0x880>)
 8001c64:	4964      	ldr	r1, [pc, #400]	@ (8001df8 <RFID+0x890>)
 8001c66:	485e      	ldr	r0, [pc, #376]	@ (8001de0 <RFID+0x878>)
 8001c68:	f7fe fbc8 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c6c:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001c6e:	797b      	ldrb	r3, [r7, #5]
 8001c70:	2b23      	cmp	r3, #35	@ 0x23
 8001c72:	f040 835c 	bne.w	800232e <RFID+0xdc6>
								{
									buzzer(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f002 f842 	bl	8003d00 <buzzer>
									exitmenu = 15;
 8001c7c:	4b55      	ldr	r3, [pc, #340]	@ (8001dd4 <RFID+0x86c>)
 8001c7e:	220f      	movs	r2, #15
 8001c80:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <RFID+0x728>
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f000 82eb 	beq.w	8002264 <RFID+0xcfc>
 8001c8e:	e34b      	b.n	8002328 <RFID+0xdc0>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c90:	4a56      	ldr	r2, [pc, #344]	@ (8001dec <RFID+0x884>)
 8001c92:	4957      	ldr	r1, [pc, #348]	@ (8001df0 <RFID+0x888>)
 8001c94:	4852      	ldr	r0, [pc, #328]	@ (8001de0 <RFID+0x878>)
 8001c96:	f7fe fbb1 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001ca2:	e2d5      	b.n	8002250 <RFID+0xce8>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f7fe fd03 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001caa:	4603      	mov	r3, r0
 8001cac:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001cae:	4b49      	ldr	r3, [pc, #292]	@ (8001dd4 <RFID+0x86c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <RFID+0x75e>
											{
												CLCD_I2C_Clear(&LCD1);
 8001cb6:	484a      	ldr	r0, [pc, #296]	@ (8001de0 <RFID+0x878>)
 8001cb8:	f7fe fb90 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc0:	f002 fd2c 	bl	800471c <HAL_Delay>
												return;
 8001cc4:	e366      	b.n	8002394 <RFID+0xe2c>
											}
											if (key_pressed =='*')
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cca:	d127      	bne.n	8001d1c <RFID+0x7b4>
											{
												buzzer(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f002 f817 	bl	8003d00 <buzzer>
												exitmenu = 15;
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <RFID+0x86c>)
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001cd8:	7b3b      	ldrb	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001cde:	7b3b      	ldrb	r3, [r7, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d801      	bhi.n	8001ce8 <RFID+0x780>
 8001ce4:	7b3b      	ldrb	r3, [r7, #12]
 8001ce6:	e000      	b.n	8001cea <RFID+0x782>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <RFID+0x790>
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d006      	beq.n	8001d04 <RFID+0x79c>
 8001cf6:	e00b      	b.n	8001d10 <RFID+0x7a8>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001cf8:	4a41      	ldr	r2, [pc, #260]	@ (8001e00 <RFID+0x898>)
 8001cfa:	4942      	ldr	r1, [pc, #264]	@ (8001e04 <RFID+0x89c>)
 8001cfc:	4838      	ldr	r0, [pc, #224]	@ (8001de0 <RFID+0x878>)
 8001cfe:	f7fe fb7d 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001d02:	e00b      	b.n	8001d1c <RFID+0x7b4>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001d04:	4a40      	ldr	r2, [pc, #256]	@ (8001e08 <RFID+0x8a0>)
 8001d06:	493f      	ldr	r1, [pc, #252]	@ (8001e04 <RFID+0x89c>)
 8001d08:	4835      	ldr	r0, [pc, #212]	@ (8001de0 <RFID+0x878>)
 8001d0a:	f7fe fb77 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001d0e:	e005      	b.n	8001d1c <RFID+0x7b4>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 8001d10:	4a35      	ldr	r2, [pc, #212]	@ (8001de8 <RFID+0x880>)
 8001d12:	493c      	ldr	r1, [pc, #240]	@ (8001e04 <RFID+0x89c>)
 8001d14:	4832      	ldr	r0, [pc, #200]	@ (8001de0 <RFID+0x878>)
 8001d16:	f7fe fb71 	bl	80003fc <CLCD_I2C_Display>
 8001d1a:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001d1c:	797b      	ldrb	r3, [r7, #5]
 8001d1e:	2b23      	cmp	r3, #35	@ 0x23
 8001d20:	f040 8296 	bne.w	8002250 <RFID+0xce8>
											{
												buzzer(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f001 ffeb 	bl	8003d00 <buzzer>
												exitmenu = 15;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <RFID+0x86c>)
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001d30:	7b3b      	ldrb	r3, [r7, #12]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <RFID+0x7d6>
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f000 814f 	beq.w	8001fda <RFID+0xa72>
 8001d3c:	e285      	b.n	800224a <RFID+0xce2>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dec <RFID+0x884>)
 8001d40:	492b      	ldr	r1, [pc, #172]	@ (8001df0 <RFID+0x888>)
 8001d42:	4827      	ldr	r0, [pc, #156]	@ (8001de0 <RFID+0x878>)
 8001d44:	f7fe fb5a 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001d50:	e139      	b.n	8001fc6 <RFID+0xa5e>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f7fe fcac 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <RFID+0x86c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <RFID+0x80c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001d64:	481e      	ldr	r0, [pc, #120]	@ (8001de0 <RFID+0x878>)
 8001d66:	f7fe fb39 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d6e:	f002 fcd5 	bl	800471c <HAL_Delay>
															return;
 8001d72:	e30f      	b.n	8002394 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8001d74:	797b      	ldrb	r3, [r7, #5]
 8001d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d78:	d156      	bne.n	8001e28 <RFID+0x8c0>
														{
															buzzer(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f001 ffc0 	bl	8003d00 <buzzer>
															exitmenu = 15;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <RFID+0x86c>)
 8001d82:	220f      	movs	r2, #15
 8001d84:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001d86:	7abb      	ldrb	r3, [r7, #10]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001d8c:	7abb      	ldrb	r3, [r7, #10]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d801      	bhi.n	8001d96 <RFID+0x82e>
 8001d92:	7abb      	ldrb	r3, [r7, #10]
 8001d94:	e000      	b.n	8001d98 <RFID+0x830>
 8001d96:	2300      	movs	r3, #0
 8001d98:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001d9a:	7abb      	ldrb	r3, [r7, #10]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d012      	beq.n	8001dc6 <RFID+0x85e>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	dc3b      	bgt.n	8001e1c <RFID+0x8b4>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d002      	beq.n	8001dae <RFID+0x846>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d006      	beq.n	8001dba <RFID+0x852>
 8001dac:	e036      	b.n	8001e1c <RFID+0x8b4>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <RFID+0x8a4>)
 8001db0:	4917      	ldr	r1, [pc, #92]	@ (8001e10 <RFID+0x8a8>)
 8001db2:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <RFID+0x878>)
 8001db4:	f7fe fb22 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001db8:	e036      	b.n	8001e28 <RFID+0x8c0>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <RFID+0x8ac>)
 8001dbc:	4914      	ldr	r1, [pc, #80]	@ (8001e10 <RFID+0x8a8>)
 8001dbe:	4808      	ldr	r0, [pc, #32]	@ (8001de0 <RFID+0x878>)
 8001dc0:	f7fe fb1c 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dc4:	e030      	b.n	8001e28 <RFID+0x8c0>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001dc6:	4a14      	ldr	r2, [pc, #80]	@ (8001e18 <RFID+0x8b0>)
 8001dc8:	4911      	ldr	r1, [pc, #68]	@ (8001e10 <RFID+0x8a8>)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <RFID+0x878>)
 8001dcc:	f7fe fb16 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dd0:	e02a      	b.n	8001e28 <RFID+0x8c0>
 8001dd2:	bf00      	nop
 8001dd4:	20000020 	.word	0x20000020
 8001dd8:	0800df70 	.word	0x0800df70
 8001ddc:	0800df84 	.word	0x0800df84
 8001de0:	200003d8 	.word	0x200003d8
 8001de4:	0800df94 	.word	0x0800df94
 8001de8:	0800de10 	.word	0x0800de10
 8001dec:	0800de18 	.word	0x0800de18
 8001df0:	0800de24 	.word	0x0800de24
 8001df4:	0800dfa4 	.word	0x0800dfa4
 8001df8:	0800dfb4 	.word	0x0800dfb4
 8001dfc:	0800dfc4 	.word	0x0800dfc4
 8001e00:	0800dfd4 	.word	0x0800dfd4
 8001e04:	0800dfe8 	.word	0x0800dfe8
 8001e08:	0800dff8 	.word	0x0800dff8
 8001e0c:	0800e008 	.word	0x0800e008
 8001e10:	0800e018 	.word	0x0800e018
 8001e14:	0800e028 	.word	0x0800e028
 8001e18:	0800e038 	.word	0x0800e038
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001e1c:	4aa5      	ldr	r2, [pc, #660]	@ (80020b4 <RFID+0xb4c>)
 8001e1e:	49a6      	ldr	r1, [pc, #664]	@ (80020b8 <RFID+0xb50>)
 8001e20:	48a6      	ldr	r0, [pc, #664]	@ (80020bc <RFID+0xb54>)
 8001e22:	f7fe faeb 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e26:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	2b23      	cmp	r3, #35	@ 0x23
 8001e2c:	f040 80cb 	bne.w	8001fc6 <RFID+0xa5e>
														{
															buzzer(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f001 ff65 	bl	8003d00 <buzzer>
															exitmenu = 15;
 8001e36:	4ba2      	ldr	r3, [pc, #648]	@ (80020c0 <RFID+0xb58>)
 8001e38:	220f      	movs	r2, #15
 8001e3a:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001e3c:	7b3b      	ldrb	r3, [r7, #12]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	4413      	add	r3, r2
 8001e46:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d07d      	beq.n	8001f4a <RFID+0x9e2>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f300 80b6 	bgt.w	8001fc0 <RFID+0xa58>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <RFID+0x8f6>
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d03b      	beq.n	8001ed4 <RFID+0x96c>
 8001e5c:	e0b0      	b.n	8001fc0 <RFID+0xa58>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f95b 	bl	800311c <CheckKey>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <RFID+0x928>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001e6c:	4a95      	ldr	r2, [pc, #596]	@ (80020c4 <RFID+0xb5c>)
 8001e6e:	4996      	ldr	r1, [pc, #600]	@ (80020c8 <RFID+0xb60>)
 8001e70:	4892      	ldr	r0, [pc, #584]	@ (80020bc <RFID+0xb54>)
 8001e72:	f7fe fac3 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f001 ff42 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 8001e7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e80:	f002 fc4c 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001e84:	4a91      	ldr	r2, [pc, #580]	@ (80020cc <RFID+0xb64>)
 8001e86:	498c      	ldr	r1, [pc, #560]	@ (80020b8 <RFID+0xb50>)
 8001e88:	488c      	ldr	r0, [pc, #560]	@ (80020bc <RFID+0xb54>)
 8001e8a:	f7fe fab7 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001e8e:	e09a      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 f942 	bl	800311c <CheckKey>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f96c 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001ea0:	4a8b      	ldr	r2, [pc, #556]	@ (80020d0 <RFID+0xb68>)
 8001ea2:	498c      	ldr	r1, [pc, #560]	@ (80020d4 <RFID+0xb6c>)
 8001ea4:	4885      	ldr	r0, [pc, #532]	@ (80020bc <RFID+0xb54>)
 8001ea6:	f7fe faa9 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eae:	f002 fc35 	bl	800471c <HAL_Delay>
																	if (checkcountUID() == 0)
 8001eb2:	f000 ffd3 	bl	8002e5c <checkcountUID>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <RFID+0x960>
																		startadd();
 8001ebc:	f001 f96a 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <RFID+0xb58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
																break;
 8001ec6:	e07e      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001ec8:	4a80      	ldr	r2, [pc, #512]	@ (80020cc <RFID+0xb64>)
 8001eca:	497b      	ldr	r1, [pc, #492]	@ (80020b8 <RFID+0xb50>)
 8001ecc:	487b      	ldr	r0, [pc, #492]	@ (80020bc <RFID+0xb54>)
 8001ece:	f7fe fa95 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001ed2:	e078      	b.n	8001fc6 <RFID+0xa5e>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 f920 	bl	800311c <CheckKey>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d111      	bne.n	8001f06 <RFID+0x99e>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001ee2:	4a78      	ldr	r2, [pc, #480]	@ (80020c4 <RFID+0xb5c>)
 8001ee4:	497c      	ldr	r1, [pc, #496]	@ (80020d8 <RFID+0xb70>)
 8001ee6:	4875      	ldr	r0, [pc, #468]	@ (80020bc <RFID+0xb54>)
 8001ee8:	f7fe fa88 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f001 ff07 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 8001ef2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef6:	f002 fc11 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001efa:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <RFID+0xb74>)
 8001efc:	496e      	ldr	r1, [pc, #440]	@ (80020b8 <RFID+0xb50>)
 8001efe:	486f      	ldr	r0, [pc, #444]	@ (80020bc <RFID+0xb54>)
 8001f00:	f7fe fa7c 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001f04:	e05f      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 f907 	bl	800311c <CheckKey>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 f931 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <RFID+0xb68>)
 8001f18:	4971      	ldr	r1, [pc, #452]	@ (80020e0 <RFID+0xb78>)
 8001f1a:	4868      	ldr	r0, [pc, #416]	@ (80020bc <RFID+0xb54>)
 8001f1c:	f7fe fa6e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f24:	f002 fbfa 	bl	800471c <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f28:	f000 ff98 	bl	8002e5c <checkcountUID>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <RFID+0x9d6>
																		startadd();
 8001f32:	f001 f92f 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001f36:	4b62      	ldr	r3, [pc, #392]	@ (80020c0 <RFID+0xb58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
																break;
 8001f3c:	e043      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001f3e:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <RFID+0xb74>)
 8001f40:	495d      	ldr	r1, [pc, #372]	@ (80020b8 <RFID+0xb50>)
 8001f42:	485e      	ldr	r0, [pc, #376]	@ (80020bc <RFID+0xb54>)
 8001f44:	f7fe fa5a 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f48:	e03d      	b.n	8001fc6 <RFID+0xa5e>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 f8e5 	bl	800311c <CheckKey>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d111      	bne.n	8001f7c <RFID+0xa14>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001f58:	4a5a      	ldr	r2, [pc, #360]	@ (80020c4 <RFID+0xb5c>)
 8001f5a:	4962      	ldr	r1, [pc, #392]	@ (80020e4 <RFID+0xb7c>)
 8001f5c:	4857      	ldr	r0, [pc, #348]	@ (80020bc <RFID+0xb54>)
 8001f5e:	f7fe fa4d 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f001 fecc 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 8001f68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f6c:	f002 fbd6 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001f70:	4a5d      	ldr	r2, [pc, #372]	@ (80020e8 <RFID+0xb80>)
 8001f72:	4951      	ldr	r1, [pc, #324]	@ (80020b8 <RFID+0xb50>)
 8001f74:	4851      	ldr	r0, [pc, #324]	@ (80020bc <RFID+0xb54>)
 8001f76:	f7fe fa41 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001f7a:	e024      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f8cc 	bl	800311c <CheckKey>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f8f6 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001f8c:	4a50      	ldr	r2, [pc, #320]	@ (80020d0 <RFID+0xb68>)
 8001f8e:	4957      	ldr	r1, [pc, #348]	@ (80020ec <RFID+0xb84>)
 8001f90:	484a      	ldr	r0, [pc, #296]	@ (80020bc <RFID+0xb54>)
 8001f92:	f7fe fa33 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9a:	f002 fbbf 	bl	800471c <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f9e:	f000 ff5d 	bl	8002e5c <checkcountUID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <RFID+0xa4c>
																		startadd();
 8001fa8:	f001 f8f4 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001fac:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <RFID+0xb58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
																break;
 8001fb2:	e008      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80020e8 <RFID+0xb80>)
 8001fb6:	4940      	ldr	r1, [pc, #256]	@ (80020b8 <RFID+0xb50>)
 8001fb8:	4840      	ldr	r0, [pc, #256]	@ (80020bc <RFID+0xb54>)
 8001fba:	f7fe fa1f 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001fbe:	e002      	b.n	8001fc6 <RFID+0xa5e>
															default:
																back11 = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	727b      	strb	r3, [r7, #9]
																break;
 8001fc4:	bf00      	nop
													while (back11 == 1)
 8001fc6:	7a7b      	ldrb	r3, [r7, #9]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f43f aec2 	beq.w	8001d52 <RFID+0x7ea>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001fce:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <RFID+0xb88>)
 8001fd0:	4948      	ldr	r1, [pc, #288]	@ (80020f4 <RFID+0xb8c>)
 8001fd2:	483a      	ldr	r0, [pc, #232]	@ (80020bc <RFID+0xb54>)
 8001fd4:	f7fe fa12 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001fd8:	e13a      	b.n	8002250 <RFID+0xce8>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001fda:	4a47      	ldr	r2, [pc, #284]	@ (80020f8 <RFID+0xb90>)
 8001fdc:	4947      	ldr	r1, [pc, #284]	@ (80020fc <RFID+0xb94>)
 8001fde:	4837      	ldr	r0, [pc, #220]	@ (80020bc <RFID+0xb54>)
 8001fe0:	f7fe fa0c 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001fec:	e123      	b.n	8002236 <RFID+0xcce>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f7fe fb5e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001ff8:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <RFID+0xb58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <RFID+0xaa8>
														{
															CLCD_I2C_Clear(&LCD1);
 8002000:	482e      	ldr	r0, [pc, #184]	@ (80020bc <RFID+0xb54>)
 8002002:	f7fe f9eb 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8002006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800200a:	f002 fb87 	bl	800471c <HAL_Delay>
															return;
 800200e:	e1c1      	b.n	8002394 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8002010:	797b      	ldrb	r3, [r7, #5]
 8002012:	2b2a      	cmp	r3, #42	@ 0x2a
 8002014:	d131      	bne.n	800207a <RFID+0xb12>
														{
															buzzer(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f001 fe72 	bl	8003d00 <buzzer>
															exitmenu = 15;
 800201c:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <RFID+0xb58>)
 800201e:	220f      	movs	r2, #15
 8002020:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002022:	7a3b      	ldrb	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8002028:	7a3b      	ldrb	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d801      	bhi.n	8002032 <RFID+0xaca>
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	e000      	b.n	8002034 <RFID+0xacc>
 8002032:	2300      	movs	r3, #0
 8002034:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8002036:	7a3b      	ldrb	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d012      	beq.n	8002062 <RFID+0xafa>
 800203c:	2b03      	cmp	r3, #3
 800203e:	dc16      	bgt.n	800206e <RFID+0xb06>
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <RFID+0xae2>
 8002044:	2b02      	cmp	r3, #2
 8002046:	d006      	beq.n	8002056 <RFID+0xaee>
 8002048:	e011      	b.n	800206e <RFID+0xb06>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 800204a:	4a2d      	ldr	r2, [pc, #180]	@ (8002100 <RFID+0xb98>)
 800204c:	492d      	ldr	r1, [pc, #180]	@ (8002104 <RFID+0xb9c>)
 800204e:	481b      	ldr	r0, [pc, #108]	@ (80020bc <RFID+0xb54>)
 8002050:	f7fe f9d4 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002054:	e011      	b.n	800207a <RFID+0xb12>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <RFID+0xba0>)
 8002058:	492a      	ldr	r1, [pc, #168]	@ (8002104 <RFID+0xb9c>)
 800205a:	4818      	ldr	r0, [pc, #96]	@ (80020bc <RFID+0xb54>)
 800205c:	f7fe f9ce 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002060:	e00b      	b.n	800207a <RFID+0xb12>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002062:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <RFID+0xba4>)
 8002064:	4927      	ldr	r1, [pc, #156]	@ (8002104 <RFID+0xb9c>)
 8002066:	4815      	ldr	r0, [pc, #84]	@ (80020bc <RFID+0xb54>)
 8002068:	f7fe f9c8 	bl	80003fc <CLCD_I2C_Display>
																break;
 800206c:	e005      	b.n	800207a <RFID+0xb12>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <RFID+0xb4c>)
 8002070:	4924      	ldr	r1, [pc, #144]	@ (8002104 <RFID+0xb9c>)
 8002072:	4812      	ldr	r0, [pc, #72]	@ (80020bc <RFID+0xb54>)
 8002074:	f7fe f9c2 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002078:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	2b23      	cmp	r3, #35	@ 0x23
 800207e:	f040 80da 	bne.w	8002236 <RFID+0xcce>
														{
															buzzer(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f001 fe3c 	bl	8003d00 <buzzer>
															exitmenu = 15;
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <RFID+0xb58>)
 800208a:	220f      	movs	r2, #15
 800208c:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	b2da      	uxtb	r2, r3
 8002094:	7a3b      	ldrb	r3, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 800209a:	7a3b      	ldrb	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	f000 8097 	beq.w	80021d0 <RFID+0xc68>
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f300 80c4 	bgt.w	8002230 <RFID+0xcc8>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d031      	beq.n	8002110 <RFID+0xba8>
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d05f      	beq.n	8002170 <RFID+0xc08>
 80020b0:	e0be      	b.n	8002230 <RFID+0xcc8>
 80020b2:	bf00      	nop
 80020b4:	0800de10 	.word	0x0800de10
 80020b8:	0800e018 	.word	0x0800e018
 80020bc:	200003d8 	.word	0x200003d8
 80020c0:	20000020 	.word	0x20000020
 80020c4:	0800e048 	.word	0x0800e048
 80020c8:	0800dec0 	.word	0x0800dec0
 80020cc:	0800e008 	.word	0x0800e008
 80020d0:	0800e058 	.word	0x0800e058
 80020d4:	0800e068 	.word	0x0800e068
 80020d8:	0800dee0 	.word	0x0800dee0
 80020dc:	0800e028 	.word	0x0800e028
 80020e0:	0800e07c 	.word	0x0800e07c
 80020e4:	0800df00 	.word	0x0800df00
 80020e8:	0800e038 	.word	0x0800e038
 80020ec:	0800e090 	.word	0x0800e090
 80020f0:	0800dfd4 	.word	0x0800dfd4
 80020f4:	0800dfe8 	.word	0x0800dfe8
 80020f8:	0800de18 	.word	0x0800de18
 80020fc:	0800de24 	.word	0x0800de24
 8002100:	0800e0a4 	.word	0x0800e0a4
 8002104:	0800e0b4 	.word	0x0800e0b4
 8002108:	0800e0c4 	.word	0x0800e0c4
 800210c:	0800e0d4 	.word	0x0800e0d4
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8002110:	793b      	ldrb	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f802 	bl	800311c <CheckKey>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d111      	bne.n	8002142 <RFID+0xbda>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 800211e:	4a9f      	ldr	r2, [pc, #636]	@ (800239c <RFID+0xe34>)
 8002120:	499f      	ldr	r1, [pc, #636]	@ (80023a0 <RFID+0xe38>)
 8002122:	48a0      	ldr	r0, [pc, #640]	@ (80023a4 <RFID+0xe3c>)
 8002124:	f7fe f96a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8002128:	2003      	movs	r0, #3
 800212a:	f001 fde9 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 800212e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002132:	f002 faf3 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8002136:	4a9c      	ldr	r2, [pc, #624]	@ (80023a8 <RFID+0xe40>)
 8002138:	499c      	ldr	r1, [pc, #624]	@ (80023ac <RFID+0xe44>)
 800213a:	489a      	ldr	r0, [pc, #616]	@ (80023a4 <RFID+0xe3c>)
 800213c:	f7fe f95e 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8002140:	e079      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002142:	793b      	ldrb	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 ffe9 	bl	800311c <CheckKey>
 800214a:	4603      	mov	r3, r0
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f813 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8002152:	4a97      	ldr	r2, [pc, #604]	@ (80023b0 <RFID+0xe48>)
 8002154:	4997      	ldr	r1, [pc, #604]	@ (80023b4 <RFID+0xe4c>)
 8002156:	4893      	ldr	r0, [pc, #588]	@ (80023a4 <RFID+0xe3c>)
 8002158:	f7fe f950 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 800215c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002160:	f002 fadc 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8002164:	4a90      	ldr	r2, [pc, #576]	@ (80023a8 <RFID+0xe40>)
 8002166:	4991      	ldr	r1, [pc, #580]	@ (80023ac <RFID+0xe44>)
 8002168:	488e      	ldr	r0, [pc, #568]	@ (80023a4 <RFID+0xe3c>)
 800216a:	f7fe f947 	bl	80003fc <CLCD_I2C_Display>
																break;
 800216e:	e062      	b.n	8002236 <RFID+0xcce>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8002170:	793b      	ldrb	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ffd2 	bl	800311c <CheckKey>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d111      	bne.n	80021a2 <RFID+0xc3a>
																{

																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 800217e:	4a87      	ldr	r2, [pc, #540]	@ (800239c <RFID+0xe34>)
 8002180:	498d      	ldr	r1, [pc, #564]	@ (80023b8 <RFID+0xe50>)
 8002182:	4888      	ldr	r0, [pc, #544]	@ (80023a4 <RFID+0xe3c>)
 8002184:	f7fe f93a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8002188:	2003      	movs	r0, #3
 800218a:	f001 fdb9 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 800218e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002192:	f002 fac3 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002196:	4a89      	ldr	r2, [pc, #548]	@ (80023bc <RFID+0xe54>)
 8002198:	4984      	ldr	r1, [pc, #528]	@ (80023ac <RFID+0xe44>)
 800219a:	4882      	ldr	r0, [pc, #520]	@ (80023a4 <RFID+0xe3c>)
 800219c:	f7fe f92e 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 80021a0:	e049      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 80021a2:	793b      	ldrb	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ffb9 	bl	800311c <CheckKey>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 ffe3 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 80021b2:	4a7f      	ldr	r2, [pc, #508]	@ (80023b0 <RFID+0xe48>)
 80021b4:	4982      	ldr	r1, [pc, #520]	@ (80023c0 <RFID+0xe58>)
 80021b6:	487b      	ldr	r0, [pc, #492]	@ (80023a4 <RFID+0xe3c>)
 80021b8:	f7fe f920 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 80021bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021c0:	f002 faac 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 80021c4:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <RFID+0xe54>)
 80021c6:	4979      	ldr	r1, [pc, #484]	@ (80023ac <RFID+0xe44>)
 80021c8:	4876      	ldr	r0, [pc, #472]	@ (80023a4 <RFID+0xe3c>)
 80021ca:	f7fe f917 	bl	80003fc <CLCD_I2C_Display>
																break;
 80021ce:	e032      	b.n	8002236 <RFID+0xcce>
															case 3:
																if (CheckKey(keyadd2) == 0)
 80021d0:	793b      	ldrb	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffa2 	bl	800311c <CheckKey>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <RFID+0xc9a>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 80021de:	4a6f      	ldr	r2, [pc, #444]	@ (800239c <RFID+0xe34>)
 80021e0:	4978      	ldr	r1, [pc, #480]	@ (80023c4 <RFID+0xe5c>)
 80021e2:	4870      	ldr	r0, [pc, #448]	@ (80023a4 <RFID+0xe3c>)
 80021e4:	f7fe f90a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f001 fd89 	bl	8003d00 <buzzer>
																	HAL_Delay(1000);
 80021ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f2:	f002 fa93 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 80021f6:	4a74      	ldr	r2, [pc, #464]	@ (80023c8 <RFID+0xe60>)
 80021f8:	496c      	ldr	r1, [pc, #432]	@ (80023ac <RFID+0xe44>)
 80021fa:	486a      	ldr	r0, [pc, #424]	@ (80023a4 <RFID+0xe3c>)
 80021fc:	f7fe f8fe 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8002200:	e019      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 ff89 	bl	800311c <CheckKey>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 ffb3 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8002212:	4a67      	ldr	r2, [pc, #412]	@ (80023b0 <RFID+0xe48>)
 8002214:	496d      	ldr	r1, [pc, #436]	@ (80023cc <RFID+0xe64>)
 8002216:	4863      	ldr	r0, [pc, #396]	@ (80023a4 <RFID+0xe3c>)
 8002218:	f7fe f8f0 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 800221c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002220:	f002 fa7c 	bl	800471c <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002224:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <RFID+0xe60>)
 8002226:	4961      	ldr	r1, [pc, #388]	@ (80023ac <RFID+0xe44>)
 8002228:	485e      	ldr	r0, [pc, #376]	@ (80023a4 <RFID+0xe3c>)
 800222a:	f7fe f8e7 	bl	80003fc <CLCD_I2C_Display>
																break;
 800222e:	e002      	b.n	8002236 <RFID+0xcce>
															default:
																back12 = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	71fb      	strb	r3, [r7, #7]
																break;
 8002234:	bf00      	nop
													while (back12 == 1)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b01      	cmp	r3, #1
 800223a:	f43f aed8 	beq.w	8001fee <RFID+0xa86>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 800223e:	4a64      	ldr	r2, [pc, #400]	@ (80023d0 <RFID+0xe68>)
 8002240:	4964      	ldr	r1, [pc, #400]	@ (80023d4 <RFID+0xe6c>)
 8002242:	4858      	ldr	r0, [pc, #352]	@ (80023a4 <RFID+0xe3c>)
 8002244:	f7fe f8da 	bl	80003fc <CLCD_I2C_Display>
													break;
 8002248:	e002      	b.n	8002250 <RFID+0xce8>
												default:
													backrm10 = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]
													break;
 800224e:	bf00      	nop
										while (backrm10 == 1)
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f43f ad26 	beq.w	8001ca4 <RFID+0x73c>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8002258:	4a5f      	ldr	r2, [pc, #380]	@ (80023d8 <RFID+0xe70>)
 800225a:	4960      	ldr	r1, [pc, #384]	@ (80023dc <RFID+0xe74>)
 800225c:	4851      	ldr	r0, [pc, #324]	@ (80023a4 <RFID+0xe3c>)
 800225e:	f7fe f8cd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002262:	e064      	b.n	800232e <RFID+0xdc6>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002264:	4a5e      	ldr	r2, [pc, #376]	@ (80023e0 <RFID+0xe78>)
 8002266:	495f      	ldr	r1, [pc, #380]	@ (80023e4 <RFID+0xe7c>)
 8002268:	484e      	ldr	r0, [pc, #312]	@ (80023a4 <RFID+0xe3c>)
 800226a:	f7fe f8c7 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002272:	e050      	b.n	8002316 <RFID+0xdae>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f7fe fa1b 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800227a:	4603      	mov	r3, r0
 800227c:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 800227e:	485a      	ldr	r0, [pc, #360]	@ (80023e8 <RFID+0xe80>)
 8002280:	f001 fdb4 	bl	8003dec <TM_MFRC522_Check>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13d      	bne.n	8002306 <RFID+0xd9e>
											{
												if (CheckListUID(CardID) != 0)
 800228a:	4857      	ldr	r0, [pc, #348]	@ (80023e8 <RFID+0xe80>)
 800228c:	f000 fdb6 	bl	8002dfc <CheckListUID>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d026      	beq.n	80022e4 <RFID+0xd7c>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8002296:	4854      	ldr	r0, [pc, #336]	@ (80023e8 <RFID+0xe80>)
 8002298:	f000 fdb0 	bl	8002dfc <CheckListUID>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 ff3c 	bl	800311c <CheckKey>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ff66 	bl	8003178 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 80022ac:	4a40      	ldr	r2, [pc, #256]	@ (80023b0 <RFID+0xe48>)
 80022ae:	494f      	ldr	r1, [pc, #316]	@ (80023ec <RFID+0xe84>)
 80022b0:	483c      	ldr	r0, [pc, #240]	@ (80023a4 <RFID+0xe3c>)
 80022b2:	f7fe f8a3 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 80022b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ba:	f002 fa2f 	bl	800471c <HAL_Delay>
													if (checkcountUID() == 0)
 80022be:	f000 fdcd 	bl	8002e5c <checkcountUID>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <RFID+0xd70>
													{
														startadd();
 80022c8:	f000 ff64 	bl	8003194 <startadd>
														rmquet = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 80022d0:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <RFID+0xe88>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
														return;
 80022d6:	e05d      	b.n	8002394 <RFID+0xe2c>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80022d8:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <RFID+0xe78>)
 80022da:	4942      	ldr	r1, [pc, #264]	@ (80023e4 <RFID+0xe7c>)
 80022dc:	4831      	ldr	r0, [pc, #196]	@ (80023a4 <RFID+0xe3c>)
 80022de:	f7fe f88d 	bl	80003fc <CLCD_I2C_Display>
 80022e2:	e010      	b.n	8002306 <RFID+0xd9e>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <RFID+0xe34>)
 80022e6:	4943      	ldr	r1, [pc, #268]	@ (80023f4 <RFID+0xe8c>)
 80022e8:	482e      	ldr	r0, [pc, #184]	@ (80023a4 <RFID+0xe3c>)
 80022ea:	f7fe f887 	bl	80003fc <CLCD_I2C_Display>
													buzzer(3);
 80022ee:	2003      	movs	r0, #3
 80022f0:	f001 fd06 	bl	8003d00 <buzzer>
													HAL_Delay(1000);
 80022f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f8:	f002 fa10 	bl	800471c <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80022fc:	4a38      	ldr	r2, [pc, #224]	@ (80023e0 <RFID+0xe78>)
 80022fe:	4939      	ldr	r1, [pc, #228]	@ (80023e4 <RFID+0xe7c>)
 8002300:	4828      	ldr	r0, [pc, #160]	@ (80023a4 <RFID+0xe3c>)
 8002302:	f7fe f87b 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	2b23      	cmp	r3, #35	@ 0x23
 800230a:	d104      	bne.n	8002316 <RFID+0xdae>
											{
												buzzer(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f001 fcf7 	bl	8003d00 <buzzer>
												rmquet = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ab      	bne.n	8002274 <RFID+0xd0c>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 800231c:	4a36      	ldr	r2, [pc, #216]	@ (80023f8 <RFID+0xe90>)
 800231e:	492f      	ldr	r1, [pc, #188]	@ (80023dc <RFID+0xe74>)
 8002320:	4820      	ldr	r0, [pc, #128]	@ (80023a4 <RFID+0xe3c>)
 8002322:	f7fe f86b 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002326:	e002      	b.n	800232e <RFID+0xdc6>
									default:
										backrm1 = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	737b      	strb	r3, [r7, #13]
										break;
 800232c:	bf00      	nop
							while (backrm1 == 1)
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	2b01      	cmp	r3, #1
 8002332:	f43f ac63 	beq.w	8001bfc <RFID+0x694>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8002336:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <RFID+0xe94>)
 8002338:	4931      	ldr	r1, [pc, #196]	@ (8002400 <RFID+0xe98>)
 800233a:	481a      	ldr	r0, [pc, #104]	@ (80023a4 <RFID+0xe3c>)
 800233c:	f7fe f85e 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002340:	e00a      	b.n	8002358 <RFID+0xdf0>
						case 1:
							remoall();
 8002342:	f000 ff9d 	bl	8003280 <remoall>
							startadd();
 8002346:	f000 ff25 	bl	8003194 <startadd>
							exitmenu = 0;
 800234a:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <RFID+0xe88>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
							break;
 8002350:	e002      	b.n	8002358 <RFID+0xdf0>
						default:
							backrm = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
							break;
 8002356:	bf00      	nop
				while (backrm == 1)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b01      	cmp	r3, #1
 800235c:	f43f abc3 	beq.w	8001ae6 <RFID+0x57e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8002360:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <RFID+0xe9c>)
 8002362:	4929      	ldr	r1, [pc, #164]	@ (8002408 <RFID+0xea0>)
 8002364:	480f      	ldr	r0, [pc, #60]	@ (80023a4 <RFID+0xe3c>)
 8002366:	f7fe f849 	bl	80003fc <CLCD_I2C_Display>
				break;
 800236a:	e00b      	b.n	8002384 <RFID+0xe1c>
			case 2:
				checkthe();
 800236c:	f000 fe20 	bl	8002fb0 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002370:	4a26      	ldr	r2, [pc, #152]	@ (800240c <RFID+0xea4>)
 8002372:	4925      	ldr	r1, [pc, #148]	@ (8002408 <RFID+0xea0>)
 8002374:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <RFID+0xe3c>)
 8002376:	f7fe f841 	bl	80003fc <CLCD_I2C_Display>
				break;
 800237a:	e003      	b.n	8002384 <RFID+0xe1c>
			default:
				exitmenu = 0;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <RFID+0xe88>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
				break;
 8002382:	bf00      	nop
	while (exitmenu )
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <RFID+0xe88>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f a8ff 	bne.w	800158c <RFID+0x24>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800238e:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <RFID+0xe3c>)
 8002390:	f7fe f824 	bl	80003dc <CLCD_I2C_Clear>
}
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800e048 	.word	0x0800e048
 80023a0:	0800df4c 	.word	0x0800df4c
 80023a4:	200003d8 	.word	0x200003d8
 80023a8:	0800e0a4 	.word	0x0800e0a4
 80023ac:	0800e0b4 	.word	0x0800e0b4
 80023b0:	0800e058 	.word	0x0800e058
 80023b4:	0800e0e4 	.word	0x0800e0e4
 80023b8:	0800df58 	.word	0x0800df58
 80023bc:	0800e0c4 	.word	0x0800e0c4
 80023c0:	0800e0f8 	.word	0x0800e0f8
 80023c4:	0800df64 	.word	0x0800df64
 80023c8:	0800e0d4 	.word	0x0800e0d4
 80023cc:	0800e10c 	.word	0x0800e10c
 80023d0:	0800dff8 	.word	0x0800dff8
 80023d4:	0800dfe8 	.word	0x0800dfe8
 80023d8:	0800dfa4 	.word	0x0800dfa4
 80023dc:	0800dfb4 	.word	0x0800dfb4
 80023e0:	0800de10 	.word	0x0800de10
 80023e4:	0800e120 	.word	0x0800e120
 80023e8:	200003e4 	.word	0x200003e4
 80023ec:	0800e130 	.word	0x0800e130
 80023f0:	20000020 	.word	0x20000020
 80023f4:	0800e140 	.word	0x0800e140
 80023f8:	0800dfc4 	.word	0x0800dfc4
 80023fc:	0800df70 	.word	0x0800df70
 8002400:	0800df84 	.word	0x0800df84
 8002404:	0800ddf0 	.word	0x0800ddf0
 8002408:	0800ddd4 	.word	0x0800ddd4
 800240c:	0800de00 	.word	0x0800de00

08002410 <FACEID>:
void FACEID(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
	buzzer(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f001 fc72 	bl	8003d00 <buzzer>
	exitmenu = Delaymenu;
 800241c:	4bae      	ldr	r3, [pc, #696]	@ (80026d8 <FACEID+0x2c8>)
 800241e:	2214      	movs	r2, #20
 8002420:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002422:	23ff      	movs	r3, #255	@ 0xff
 8002424:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 8002426:	4aad      	ldr	r2, [pc, #692]	@ (80026dc <FACEID+0x2cc>)
 8002428:	49ad      	ldr	r1, [pc, #692]	@ (80026e0 <FACEID+0x2d0>)
 800242a:	48ae      	ldr	r0, [pc, #696]	@ (80026e4 <FACEID+0x2d4>)
 800242c:	f7fd ffe6 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002430:	e378      	b.n	8002b24 <FACEID+0x714>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002432:	200a      	movs	r0, #10
 8002434:	f7fe f93c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002438:	4603      	mov	r3, r0
 800243a:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002440:	d127      	bne.n	8002492 <FACEID+0x82>
		{
			buzzer(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f001 fc5c 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 8002448:	4ba3      	ldr	r3, [pc, #652]	@ (80026d8 <FACEID+0x2c8>)
 800244a:	2214      	movs	r2, #20
 800244c:	701a      	strb	r2, [r3, #0]
			status++;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	3301      	adds	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d801      	bhi.n	800245e <FACEID+0x4e>
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	e000      	b.n	8002460 <FACEID+0x50>
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
			switch (status)
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <FACEID+0x5e>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d006      	beq.n	800247a <FACEID+0x6a>
 800246c:	e00b      	b.n	8002486 <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800246e:	4a9e      	ldr	r2, [pc, #632]	@ (80026e8 <FACEID+0x2d8>)
 8002470:	499b      	ldr	r1, [pc, #620]	@ (80026e0 <FACEID+0x2d0>)
 8002472:	489c      	ldr	r0, [pc, #624]	@ (80026e4 <FACEID+0x2d4>)
 8002474:	f7fd ffc2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002478:	e00b      	b.n	8002492 <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800247a:	4a9c      	ldr	r2, [pc, #624]	@ (80026ec <FACEID+0x2dc>)
 800247c:	4998      	ldr	r1, [pc, #608]	@ (80026e0 <FACEID+0x2d0>)
 800247e:	4899      	ldr	r0, [pc, #612]	@ (80026e4 <FACEID+0x2d4>)
 8002480:	f7fd ffbc 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002484:	e005      	b.n	8002492 <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002486:	4a9a      	ldr	r2, [pc, #616]	@ (80026f0 <FACEID+0x2e0>)
 8002488:	4995      	ldr	r1, [pc, #596]	@ (80026e0 <FACEID+0x2d0>)
 800248a:	4896      	ldr	r0, [pc, #600]	@ (80026e4 <FACEID+0x2d4>)
 800248c:	f7fd ffb6 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002490:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002492:	7a3b      	ldrb	r3, [r7, #8]
 8002494:	2b23      	cmp	r3, #35	@ 0x23
 8002496:	f040 8345 	bne.w	8002b24 <FACEID+0x714>
		{
			buzzer(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f001 fc30 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 80024a0:	4b8d      	ldr	r3, [pc, #564]	@ (80026d8 <FACEID+0x2c8>)
 80024a2:	2214      	movs	r2, #20
 80024a4:	701a      	strb	r2, [r3, #0]
			switch (status)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <FACEID+0xa4>
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f000 813f 	beq.w	8002730 <FACEID+0x320>
 80024b2:	e333      	b.n	8002b1c <FACEID+0x70c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80024b4:	4a8f      	ldr	r2, [pc, #572]	@ (80026f4 <FACEID+0x2e4>)
 80024b6:	4990      	ldr	r1, [pc, #576]	@ (80026f8 <FACEID+0x2e8>)
 80024b8:	488a      	ldr	r0, [pc, #552]	@ (80026e4 <FACEID+0x2d4>)
 80024ba:	f7fd ff9f 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 80024c6:	e0fc      	b.n	80026c2 <FACEID+0x2b2>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7fe f8f1 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80024ce:	4603      	mov	r3, r0
 80024d0:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 80024d2:	4b81      	ldr	r3, [pc, #516]	@ (80026d8 <FACEID+0x2c8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <FACEID+0xda>
					{
						CLCD_I2C_Clear(&LCD1);
 80024da:	4882      	ldr	r0, [pc, #520]	@ (80026e4 <FACEID+0x2d4>)
 80024dc:	f7fd ff7e 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	f002 f91a 	bl	800471c <HAL_Delay>
						return;
 80024e8:	e324      	b.n	8002b34 <FACEID+0x724>
					}
					if (key_pressed == '*')
 80024ea:	7a3b      	ldrb	r3, [r7, #8]
 80024ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80024ee:	d13d      	bne.n	800256c <FACEID+0x15c>
					{
						buzzer(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f001 fc05 	bl	8003d00 <buzzer>
						exitmenu = Delaymenu;
 80024f6:	4b78      	ldr	r3, [pc, #480]	@ (80026d8 <FACEID+0x2c8>)
 80024f8:	2214      	movs	r2, #20
 80024fa:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	3301      	adds	r3, #1
 8002500:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d801      	bhi.n	800250c <FACEID+0xfc>
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	e000      	b.n	800250e <FACEID+0xfe>
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002510:	7bbb      	ldrb	r3, [r7, #14]
 8002512:	3b01      	subs	r3, #1
 8002514:	2b03      	cmp	r3, #3
 8002516:	d823      	bhi.n	8002560 <FACEID+0x150>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <FACEID+0x110>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002549 	.word	0x08002549
 800252c:	08002555 	.word	0x08002555
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002530:	4a72      	ldr	r2, [pc, #456]	@ (80026fc <FACEID+0x2ec>)
 8002532:	4973      	ldr	r1, [pc, #460]	@ (8002700 <FACEID+0x2f0>)
 8002534:	486b      	ldr	r0, [pc, #428]	@ (80026e4 <FACEID+0x2d4>)
 8002536:	f7fd ff61 	bl	80003fc <CLCD_I2C_Display>
							break;
 800253a:	e017      	b.n	800256c <FACEID+0x15c>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 800253c:	4a71      	ldr	r2, [pc, #452]	@ (8002704 <FACEID+0x2f4>)
 800253e:	4970      	ldr	r1, [pc, #448]	@ (8002700 <FACEID+0x2f0>)
 8002540:	4868      	ldr	r0, [pc, #416]	@ (80026e4 <FACEID+0x2d4>)
 8002542:	f7fd ff5b 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002546:	e011      	b.n	800256c <FACEID+0x15c>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002548:	4a6f      	ldr	r2, [pc, #444]	@ (8002708 <FACEID+0x2f8>)
 800254a:	496d      	ldr	r1, [pc, #436]	@ (8002700 <FACEID+0x2f0>)
 800254c:	4865      	ldr	r0, [pc, #404]	@ (80026e4 <FACEID+0x2d4>)
 800254e:	f7fd ff55 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002552:	e00b      	b.n	800256c <FACEID+0x15c>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002554:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <FACEID+0x2fc>)
 8002556:	496a      	ldr	r1, [pc, #424]	@ (8002700 <FACEID+0x2f0>)
 8002558:	4862      	ldr	r0, [pc, #392]	@ (80026e4 <FACEID+0x2d4>)
 800255a:	f7fd ff4f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800255e:	e005      	b.n	800256c <FACEID+0x15c>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 8002560:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <FACEID+0x2e0>)
 8002562:	4967      	ldr	r1, [pc, #412]	@ (8002700 <FACEID+0x2f0>)
 8002564:	485f      	ldr	r0, [pc, #380]	@ (80026e4 <FACEID+0x2d4>)
 8002566:	f7fd ff49 	bl	80003fc <CLCD_I2C_Display>
							break;
 800256a:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800256c:	7a3b      	ldrb	r3, [r7, #8]
 800256e:	2b23      	cmp	r3, #35	@ 0x23
 8002570:	f040 80a7 	bne.w	80026c2 <FACEID+0x2b2>
					{
						buzzer(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f001 fbc3 	bl	8003d00 <buzzer>
						exitmenu = Delaymenu;
 800257a:	4b57      	ldr	r3, [pc, #348]	@ (80026d8 <FACEID+0x2c8>)
 800257c:	2214      	movs	r2, #20
 800257e:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	3b01      	subs	r3, #1
 8002588:	2b03      	cmp	r3, #3
 800258a:	f200 8097 	bhi.w	80026bc <FACEID+0x2ac>
 800258e:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <FACEID+0x184>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025eb 	.word	0x080025eb
 800259c:	08002631 	.word	0x08002631
 80025a0:	08002677 	.word	0x08002677
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 ff52 	bl	8003450 <checkfaceid>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d011      	beq.n	80025d6 <FACEID+0x1c6>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 80025b2:	4a57      	ldr	r2, [pc, #348]	@ (8002710 <FACEID+0x300>)
 80025b4:	4957      	ldr	r1, [pc, #348]	@ (8002714 <FACEID+0x304>)
 80025b6:	484b      	ldr	r0, [pc, #300]	@ (80026e4 <FACEID+0x2d4>)
 80025b8:	f7fd ff20 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80025bc:	2003      	movs	r0, #3
 80025be:	f001 fb9f 	bl	8003d00 <buzzer>
								HAL_Delay(1000);
 80025c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025c6:	f002 f8a9 	bl	800471c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <FACEID+0x2ec>)
 80025cc:	494c      	ldr	r1, [pc, #304]	@ (8002700 <FACEID+0x2f0>)
 80025ce:	4845      	ldr	r0, [pc, #276]	@ (80026e4 <FACEID+0x2d4>)
 80025d0:	f7fd ff14 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 80025d4:	e075      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fe77 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80025de:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <FACEID+0x2ec>)
 80025e0:	4947      	ldr	r1, [pc, #284]	@ (8002700 <FACEID+0x2f0>)
 80025e2:	4840      	ldr	r0, [pc, #256]	@ (80026e4 <FACEID+0x2d4>)
 80025e4:	f7fd ff0a 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025e8:	e06b      	b.n	80026c2 <FACEID+0x2b2>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 ff2f 	bl	8003450 <checkfaceid>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <FACEID+0x20c>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 80025f8:	4a47      	ldr	r2, [pc, #284]	@ (8002718 <FACEID+0x308>)
 80025fa:	4948      	ldr	r1, [pc, #288]	@ (800271c <FACEID+0x30c>)
 80025fc:	4839      	ldr	r0, [pc, #228]	@ (80026e4 <FACEID+0x2d4>)
 80025fe:	f7fd fefd 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002602:	2003      	movs	r0, #3
 8002604:	f001 fb7c 	bl	8003d00 <buzzer>
								HAL_Delay(1000);
 8002608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260c:	f002 f886 	bl	800471c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002610:	4a3c      	ldr	r2, [pc, #240]	@ (8002704 <FACEID+0x2f4>)
 8002612:	493b      	ldr	r1, [pc, #236]	@ (8002700 <FACEID+0x2f0>)
 8002614:	4833      	ldr	r0, [pc, #204]	@ (80026e4 <FACEID+0x2d4>)
 8002616:	f7fd fef1 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800261a:	e052      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe54 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002624:	4a37      	ldr	r2, [pc, #220]	@ (8002704 <FACEID+0x2f4>)
 8002626:	4936      	ldr	r1, [pc, #216]	@ (8002700 <FACEID+0x2f0>)
 8002628:	482e      	ldr	r0, [pc, #184]	@ (80026e4 <FACEID+0x2d4>)
 800262a:	f7fd fee7 	bl	80003fc <CLCD_I2C_Display>
							break;
 800262e:	e048      	b.n	80026c2 <FACEID+0x2b2>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 ff0c 	bl	8003450 <checkfaceid>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d011      	beq.n	8002662 <FACEID+0x252>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 800263e:	4a38      	ldr	r2, [pc, #224]	@ (8002720 <FACEID+0x310>)
 8002640:	4938      	ldr	r1, [pc, #224]	@ (8002724 <FACEID+0x314>)
 8002642:	4828      	ldr	r0, [pc, #160]	@ (80026e4 <FACEID+0x2d4>)
 8002644:	f7fd feda 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002648:	2003      	movs	r0, #3
 800264a:	f001 fb59 	bl	8003d00 <buzzer>
								HAL_Delay(1000);
 800264e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002652:	f002 f863 	bl	800471c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002656:	4a2c      	ldr	r2, [pc, #176]	@ (8002708 <FACEID+0x2f8>)
 8002658:	4929      	ldr	r1, [pc, #164]	@ (8002700 <FACEID+0x2f0>)
 800265a:	4822      	ldr	r0, [pc, #136]	@ (80026e4 <FACEID+0x2d4>)
 800265c:	f7fd fece 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 8002660:	e02f      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fe31 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800266a:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <FACEID+0x2f8>)
 800266c:	4924      	ldr	r1, [pc, #144]	@ (8002700 <FACEID+0x2f0>)
 800266e:	481d      	ldr	r0, [pc, #116]	@ (80026e4 <FACEID+0x2d4>)
 8002670:	f7fd fec4 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002674:	e025      	b.n	80026c2 <FACEID+0x2b2>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fee9 	bl	8003450 <checkfaceid>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d011      	beq.n	80026a8 <FACEID+0x298>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002684:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <FACEID+0x318>)
 8002686:	4929      	ldr	r1, [pc, #164]	@ (800272c <FACEID+0x31c>)
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <FACEID+0x2d4>)
 800268a:	f7fd feb7 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 800268e:	2003      	movs	r0, #3
 8002690:	f001 fb36 	bl	8003d00 <buzzer>
								HAL_Delay(1000);
 8002694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002698:	f002 f840 	bl	800471c <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 800269c:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <FACEID+0x2fc>)
 800269e:	4918      	ldr	r1, [pc, #96]	@ (8002700 <FACEID+0x2f0>)
 80026a0:	4810      	ldr	r0, [pc, #64]	@ (80026e4 <FACEID+0x2d4>)
 80026a2:	f7fd feab 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80026a6:	e00c      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fe0e 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80026b0:	4a16      	ldr	r2, [pc, #88]	@ (800270c <FACEID+0x2fc>)
 80026b2:	4913      	ldr	r1, [pc, #76]	@ (8002700 <FACEID+0x2f0>)
 80026b4:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <FACEID+0x2d4>)
 80026b6:	f7fd fea1 	bl	80003fc <CLCD_I2C_Display>
							break;
 80026ba:	e002      	b.n	80026c2 <FACEID+0x2b2>
						default:
							back = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	737b      	strb	r3, [r7, #13]
							break;
 80026c0:	bf00      	nop
				while (back == 1)
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f43f aeff 	beq.w	80024c8 <FACEID+0xb8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80026ca:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <FACEID+0x2d8>)
 80026cc:	4904      	ldr	r1, [pc, #16]	@ (80026e0 <FACEID+0x2d0>)
 80026ce:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <FACEID+0x2d4>)
 80026d0:	f7fd fe94 	bl	80003fc <CLCD_I2C_Display>
				break;
 80026d4:	e226      	b.n	8002b24 <FACEID+0x714>
 80026d6:	bf00      	nop
 80026d8:	20000020 	.word	0x20000020
 80026dc:	0800ddc4 	.word	0x0800ddc4
 80026e0:	0800e150 	.word	0x0800e150
 80026e4:	200003d8 	.word	0x200003d8
 80026e8:	0800e164 	.word	0x0800e164
 80026ec:	0800e174 	.word	0x0800e174
 80026f0:	0800de10 	.word	0x0800de10
 80026f4:	0800de18 	.word	0x0800de18
 80026f8:	0800de24 	.word	0x0800de24
 80026fc:	0800e188 	.word	0x0800e188
 8002700:	0800e194 	.word	0x0800e194
 8002704:	0800e1a0 	.word	0x0800e1a0
 8002708:	0800e1ac 	.word	0x0800e1ac
 800270c:	0800e1b8 	.word	0x0800e1b8
 8002710:	0800e1c4 	.word	0x0800e1c4
 8002714:	0800e1d8 	.word	0x0800e1d8
 8002718:	0800e1e8 	.word	0x0800e1e8
 800271c:	0800e1fc 	.word	0x0800e1fc
 8002720:	0800e20c 	.word	0x0800e20c
 8002724:	0800e220 	.word	0x0800e220
 8002728:	0800e230 	.word	0x0800e230
 800272c:	0800e244 	.word	0x0800e244
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002730:	4aa8      	ldr	r2, [pc, #672]	@ (80029d4 <FACEID+0x5c4>)
 8002732:	49a9      	ldr	r1, [pc, #676]	@ (80029d8 <FACEID+0x5c8>)
 8002734:	48a9      	ldr	r0, [pc, #676]	@ (80029dc <FACEID+0x5cc>)
 8002736:	f7fd fe61 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002742:	e1e1      	b.n	8002b08 <FACEID+0x6f8>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002744:	200a      	movs	r0, #10
 8002746:	f7fd ffb3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800274a:	4603      	mov	r3, r0
 800274c:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800274e:	4ba4      	ldr	r3, [pc, #656]	@ (80029e0 <FACEID+0x5d0>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <FACEID+0x356>
					{
						CLCD_I2C_Clear(&LCD1);
 8002756:	48a1      	ldr	r0, [pc, #644]	@ (80029dc <FACEID+0x5cc>)
 8002758:	f7fd fe40 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800275c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002760:	f001 ffdc 	bl	800471c <HAL_Delay>
						return;
 8002764:	e1e6      	b.n	8002b34 <FACEID+0x724>
					}
					if (key_pressed == '*')
 8002766:	7a3b      	ldrb	r3, [r7, #8]
 8002768:	2b2a      	cmp	r3, #42	@ 0x2a
 800276a:	d127      	bne.n	80027bc <FACEID+0x3ac>
					{
						buzzer(1);
 800276c:	2001      	movs	r0, #1
 800276e:	f001 fac7 	bl	8003d00 <buzzer>
						exitmenu = Delaymenu;
 8002772:	4b9b      	ldr	r3, [pc, #620]	@ (80029e0 <FACEID+0x5d0>)
 8002774:	2214      	movs	r2, #20
 8002776:	701a      	strb	r2, [r3, #0]
						statusrm++;
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d801      	bhi.n	8002788 <FACEID+0x378>
 8002784:	7b3b      	ldrb	r3, [r7, #12]
 8002786:	e000      	b.n	800278a <FACEID+0x37a>
 8002788:	2300      	movs	r3, #0
 800278a:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 800278c:	7b3b      	ldrb	r3, [r7, #12]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <FACEID+0x388>
 8002792:	2b02      	cmp	r3, #2
 8002794:	d006      	beq.n	80027a4 <FACEID+0x394>
 8002796:	e00b      	b.n	80027b0 <FACEID+0x3a0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002798:	4a92      	ldr	r2, [pc, #584]	@ (80029e4 <FACEID+0x5d4>)
 800279a:	4993      	ldr	r1, [pc, #588]	@ (80029e8 <FACEID+0x5d8>)
 800279c:	488f      	ldr	r0, [pc, #572]	@ (80029dc <FACEID+0x5cc>)
 800279e:	f7fd fe2d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027a2:	e00b      	b.n	80027bc <FACEID+0x3ac>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80027a4:	4a91      	ldr	r2, [pc, #580]	@ (80029ec <FACEID+0x5dc>)
 80027a6:	4990      	ldr	r1, [pc, #576]	@ (80029e8 <FACEID+0x5d8>)
 80027a8:	488c      	ldr	r0, [pc, #560]	@ (80029dc <FACEID+0x5cc>)
 80027aa:	f7fd fe27 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027ae:	e005      	b.n	80027bc <FACEID+0x3ac>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80027b0:	4a8f      	ldr	r2, [pc, #572]	@ (80029f0 <FACEID+0x5e0>)
 80027b2:	498d      	ldr	r1, [pc, #564]	@ (80029e8 <FACEID+0x5d8>)
 80027b4:	4889      	ldr	r0, [pc, #548]	@ (80029dc <FACEID+0x5cc>)
 80027b6:	f7fd fe21 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027ba:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	2b23      	cmp	r3, #35	@ 0x23
 80027c0:	f040 81a2 	bne.w	8002b08 <FACEID+0x6f8>
					{
						buzzer(1);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f001 fa9b 	bl	8003d00 <buzzer>
						exitmenu = Delaymenu;
 80027ca:	4b85      	ldr	r3, [pc, #532]	@ (80029e0 <FACEID+0x5d0>)
 80027cc:	2214      	movs	r2, #20
 80027ce:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 80027d0:	7b3b      	ldrb	r3, [r7, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <FACEID+0x3ce>
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f000 8161 	beq.w	8002a9e <FACEID+0x68e>
 80027dc:	e191      	b.n	8002b02 <FACEID+0x6f2>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80027de:	4a7d      	ldr	r2, [pc, #500]	@ (80029d4 <FACEID+0x5c4>)
 80027e0:	497d      	ldr	r1, [pc, #500]	@ (80029d8 <FACEID+0x5c8>)
 80027e2:	487e      	ldr	r0, [pc, #504]	@ (80029dc <FACEID+0x5cc>)
 80027e4:	f7fd fe0a 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 80027ec:	2301      	movs	r3, #1
 80027ee:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 80027f0:	e14b      	b.n	8002a8a <FACEID+0x67a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f7fd ff5c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80027f8:	4603      	mov	r3, r0
 80027fa:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 80027fc:	4b78      	ldr	r3, [pc, #480]	@ (80029e0 <FACEID+0x5d0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <FACEID+0x404>
								{
									CLCD_I2C_Clear(&LCD1);
 8002804:	4875      	ldr	r0, [pc, #468]	@ (80029dc <FACEID+0x5cc>)
 8002806:	f7fd fde9 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800280a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800280e:	f001 ff85 	bl	800471c <HAL_Delay>
									return;
 8002812:	e18f      	b.n	8002b34 <FACEID+0x724>
								}
								if (key_pressed == '*')
 8002814:	7a3b      	ldrb	r3, [r7, #8]
 8002816:	2b2a      	cmp	r3, #42	@ 0x2a
 8002818:	d13c      	bne.n	8002894 <FACEID+0x484>
								{
									buzzer(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f001 fa70 	bl	8003d00 <buzzer>
									exitmenu = Delaymenu;
 8002820:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <FACEID+0x5d0>)
 8002822:	2214      	movs	r2, #20
 8002824:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 8002826:	7abb      	ldrb	r3, [r7, #10]
 8002828:	3301      	adds	r3, #1
 800282a:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 800282c:	7abb      	ldrb	r3, [r7, #10]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d801      	bhi.n	8002836 <FACEID+0x426>
 8002832:	7abb      	ldrb	r3, [r7, #10]
 8002834:	e000      	b.n	8002838 <FACEID+0x428>
 8002836:	2300      	movs	r3, #0
 8002838:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 800283a:	7abb      	ldrb	r3, [r7, #10]
 800283c:	3b01      	subs	r3, #1
 800283e:	2b03      	cmp	r3, #3
 8002840:	d822      	bhi.n	8002888 <FACEID+0x478>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <FACEID+0x438>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	08002865 	.word	0x08002865
 8002850:	08002871 	.word	0x08002871
 8002854:	0800287d 	.word	0x0800287d
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002858:	4a66      	ldr	r2, [pc, #408]	@ (80029f4 <FACEID+0x5e4>)
 800285a:	4967      	ldr	r1, [pc, #412]	@ (80029f8 <FACEID+0x5e8>)
 800285c:	485f      	ldr	r0, [pc, #380]	@ (80029dc <FACEID+0x5cc>)
 800285e:	f7fd fdcd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002862:	e017      	b.n	8002894 <FACEID+0x484>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002864:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <FACEID+0x5ec>)
 8002866:	4964      	ldr	r1, [pc, #400]	@ (80029f8 <FACEID+0x5e8>)
 8002868:	485c      	ldr	r0, [pc, #368]	@ (80029dc <FACEID+0x5cc>)
 800286a:	f7fd fdc7 	bl	80003fc <CLCD_I2C_Display>
										break;
 800286e:	e011      	b.n	8002894 <FACEID+0x484>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002870:	4a63      	ldr	r2, [pc, #396]	@ (8002a00 <FACEID+0x5f0>)
 8002872:	4961      	ldr	r1, [pc, #388]	@ (80029f8 <FACEID+0x5e8>)
 8002874:	4859      	ldr	r0, [pc, #356]	@ (80029dc <FACEID+0x5cc>)
 8002876:	f7fd fdc1 	bl	80003fc <CLCD_I2C_Display>
										break;
 800287a:	e00b      	b.n	8002894 <FACEID+0x484>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 800287c:	4a61      	ldr	r2, [pc, #388]	@ (8002a04 <FACEID+0x5f4>)
 800287e:	495e      	ldr	r1, [pc, #376]	@ (80029f8 <FACEID+0x5e8>)
 8002880:	4856      	ldr	r0, [pc, #344]	@ (80029dc <FACEID+0x5cc>)
 8002882:	f7fd fdbb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002886:	e005      	b.n	8002894 <FACEID+0x484>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 8002888:	4a5f      	ldr	r2, [pc, #380]	@ (8002a08 <FACEID+0x5f8>)
 800288a:	495b      	ldr	r1, [pc, #364]	@ (80029f8 <FACEID+0x5e8>)
 800288c:	4853      	ldr	r0, [pc, #332]	@ (80029dc <FACEID+0x5cc>)
 800288e:	f7fd fdb5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002892:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 8002894:	7a3b      	ldrb	r3, [r7, #8]
 8002896:	2b23      	cmp	r3, #35	@ 0x23
 8002898:	f040 80f7 	bne.w	8002a8a <FACEID+0x67a>
								{
									buzzer(1);
 800289c:	2001      	movs	r0, #1
 800289e:	f001 fa2f 	bl	8003d00 <buzzer>
									exitmenu = Delaymenu;
 80028a2:	4b4f      	ldr	r3, [pc, #316]	@ (80029e0 <FACEID+0x5d0>)
 80028a4:	2214      	movs	r2, #20
 80028a6:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80028a8:	7abb      	ldrb	r3, [r7, #10]
 80028aa:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	f200 80e7 	bhi.w	8002a84 <FACEID+0x674>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <FACEID+0x4ac>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	08002925 	.word	0x08002925
 80028c4:	0800297d 	.word	0x0800297d
 80028c8:	08002a2d 	.word	0x08002a2d
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fdbe 	bl	8003450 <checkfaceid>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <FACEID+0x4ee>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 80028da:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <FACEID+0x5fc>)
 80028dc:	494c      	ldr	r1, [pc, #304]	@ (8002a10 <FACEID+0x600>)
 80028de:	483f      	ldr	r0, [pc, #252]	@ (80029dc <FACEID+0x5cc>)
 80028e0:	f7fd fd8c 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f001 fa0b 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 80028ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028ee:	f001 ff15 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80028f2:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <FACEID+0x5e4>)
 80028f4:	4940      	ldr	r1, [pc, #256]	@ (80029f8 <FACEID+0x5e8>)
 80028f6:	4839      	ldr	r0, [pc, #228]	@ (80029dc <FACEID+0x5cc>)
 80028f8:	f7fd fd80 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 80028fc:	e0c5      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fd45 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002906:	4a43      	ldr	r2, [pc, #268]	@ (8002a14 <FACEID+0x604>)
 8002908:	4943      	ldr	r1, [pc, #268]	@ (8002a18 <FACEID+0x608>)
 800290a:	4834      	ldr	r0, [pc, #208]	@ (80029dc <FACEID+0x5cc>)
 800290c:	f7fd fd76 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002914:	f001 ff02 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002918:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <FACEID+0x5e4>)
 800291a:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <FACEID+0x5e8>)
 800291c:	482f      	ldr	r0, [pc, #188]	@ (80029dc <FACEID+0x5cc>)
 800291e:	f7fd fd6d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002922:	e0b2      	b.n	8002a8a <FACEID+0x67a>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd92 	bl	8003450 <checkfaceid>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <FACEID+0x546>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <FACEID+0x5fc>)
 8002934:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <FACEID+0x60c>)
 8002936:	4829      	ldr	r0, [pc, #164]	@ (80029dc <FACEID+0x5cc>)
 8002938:	f7fd fd60 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 800293c:	2003      	movs	r0, #3
 800293e:	f001 f9df 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 8002942:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002946:	f001 fee9 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800294a:	4a2c      	ldr	r2, [pc, #176]	@ (80029fc <FACEID+0x5ec>)
 800294c:	492a      	ldr	r1, [pc, #168]	@ (80029f8 <FACEID+0x5e8>)
 800294e:	4823      	ldr	r0, [pc, #140]	@ (80029dc <FACEID+0x5cc>)
 8002950:	f7fd fd54 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 8002954:	e099      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fd19 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 800295e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a14 <FACEID+0x604>)
 8002960:	492f      	ldr	r1, [pc, #188]	@ (8002a20 <FACEID+0x610>)
 8002962:	481e      	ldr	r0, [pc, #120]	@ (80029dc <FACEID+0x5cc>)
 8002964:	f7fd fd4a 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800296c:	f001 fed6 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <FACEID+0x5ec>)
 8002972:	4921      	ldr	r1, [pc, #132]	@ (80029f8 <FACEID+0x5e8>)
 8002974:	4819      	ldr	r0, [pc, #100]	@ (80029dc <FACEID+0x5cc>)
 8002976:	f7fd fd41 	bl	80003fc <CLCD_I2C_Display>
										break;
 800297a:	e086      	b.n	8002a8a <FACEID+0x67a>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fd66 	bl	8003450 <checkfaceid>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d111      	bne.n	80029ae <FACEID+0x59e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 800298a:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <FACEID+0x5fc>)
 800298c:	4925      	ldr	r1, [pc, #148]	@ (8002a24 <FACEID+0x614>)
 800298e:	4813      	ldr	r0, [pc, #76]	@ (80029dc <FACEID+0x5cc>)
 8002990:	f7fd fd34 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002994:	2003      	movs	r0, #3
 8002996:	f001 f9b3 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 800299a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800299e:	f001 febd 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <FACEID+0x5f0>)
 80029a4:	4914      	ldr	r1, [pc, #80]	@ (80029f8 <FACEID+0x5e8>)
 80029a6:	480d      	ldr	r0, [pc, #52]	@ (80029dc <FACEID+0x5cc>)
 80029a8:	f7fd fd28 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 80029ac:	e06d      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fced 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80029b6:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <FACEID+0x604>)
 80029b8:	491b      	ldr	r1, [pc, #108]	@ (8002a28 <FACEID+0x618>)
 80029ba:	4808      	ldr	r0, [pc, #32]	@ (80029dc <FACEID+0x5cc>)
 80029bc:	f7fd fd1e 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80029c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029c4:	f001 feaa 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <FACEID+0x5f0>)
 80029ca:	490b      	ldr	r1, [pc, #44]	@ (80029f8 <FACEID+0x5e8>)
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <FACEID+0x5cc>)
 80029ce:	f7fd fd15 	bl	80003fc <CLCD_I2C_Display>
										break;
 80029d2:	e05a      	b.n	8002a8a <FACEID+0x67a>
 80029d4:	0800de18 	.word	0x0800de18
 80029d8:	0800de24 	.word	0x0800de24
 80029dc:	200003d8 	.word	0x200003d8
 80029e0:	20000020 	.word	0x20000020
 80029e4:	0800e254 	.word	0x0800e254
 80029e8:	0800e268 	.word	0x0800e268
 80029ec:	0800df94 	.word	0x0800df94
 80029f0:	0800de10 	.word	0x0800de10
 80029f4:	0800e278 	.word	0x0800e278
 80029f8:	0800dfb4 	.word	0x0800dfb4
 80029fc:	0800e28c 	.word	0x0800e28c
 8002a00:	0800e2a0 	.word	0x0800e2a0
 8002a04:	0800e2b4 	.word	0x0800e2b4
 8002a08:	0800e2c8 	.word	0x0800e2c8
 8002a0c:	0800e048 	.word	0x0800e048
 8002a10:	0800e2d4 	.word	0x0800e2d4
 8002a14:	0800e058 	.word	0x0800e058
 8002a18:	0800e2e4 	.word	0x0800e2e4
 8002a1c:	0800e2f4 	.word	0x0800e2f4
 8002a20:	0800e304 	.word	0x0800e304
 8002a24:	0800e314 	.word	0x0800e314
 8002a28:	0800e324 	.word	0x0800e324
									case 4:
										if (checkfaceid(keyrm1) == 0)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fd0e 	bl	8003450 <checkfaceid>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d111      	bne.n	8002a5e <FACEID+0x64e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002a3a:	4a40      	ldr	r2, [pc, #256]	@ (8002b3c <FACEID+0x72c>)
 8002a3c:	4940      	ldr	r1, [pc, #256]	@ (8002b40 <FACEID+0x730>)
 8002a3e:	4841      	ldr	r0, [pc, #260]	@ (8002b44 <FACEID+0x734>)
 8002a40:	f7fd fcdc 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f001 f95b 	bl	8003d00 <buzzer>
											HAL_Delay(1000);
 8002a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a4e:	f001 fe65 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a52:	4a3d      	ldr	r2, [pc, #244]	@ (8002b48 <FACEID+0x738>)
 8002a54:	493d      	ldr	r1, [pc, #244]	@ (8002b4c <FACEID+0x73c>)
 8002a56:	483b      	ldr	r0, [pc, #236]	@ (8002b44 <FACEID+0x734>)
 8002a58:	f7fd fcd0 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002a5c:	e015      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fc95 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 8002a66:	4a3a      	ldr	r2, [pc, #232]	@ (8002b50 <FACEID+0x740>)
 8002a68:	493a      	ldr	r1, [pc, #232]	@ (8002b54 <FACEID+0x744>)
 8002a6a:	4836      	ldr	r0, [pc, #216]	@ (8002b44 <FACEID+0x734>)
 8002a6c:	f7fd fcc6 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a74:	f001 fe52 	bl	800471c <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a78:	4a33      	ldr	r2, [pc, #204]	@ (8002b48 <FACEID+0x738>)
 8002a7a:	4934      	ldr	r1, [pc, #208]	@ (8002b4c <FACEID+0x73c>)
 8002a7c:	4831      	ldr	r0, [pc, #196]	@ (8002b44 <FACEID+0x734>)
 8002a7e:	f7fd fcbd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002a82:	e002      	b.n	8002a8a <FACEID+0x67a>
									default:
										backrm1 = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	727b      	strb	r3, [r7, #9]
										break;
 8002a88:	bf00      	nop
							while (backrm1 == 1)
 8002a8a:	7a7b      	ldrb	r3, [r7, #9]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f43f aeb0 	beq.w	80027f2 <FACEID+0x3e2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002a92:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <FACEID+0x748>)
 8002a94:	4931      	ldr	r1, [pc, #196]	@ (8002b5c <FACEID+0x74c>)
 8002a96:	482b      	ldr	r0, [pc, #172]	@ (8002b44 <FACEID+0x734>)
 8002a98:	f7fd fcb0 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002a9c:	e034      	b.n	8002b08 <FACEID+0x6f8>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 8002a9e:	4930      	ldr	r1, [pc, #192]	@ (8002b60 <FACEID+0x750>)
 8002aa0:	4830      	ldr	r0, [pc, #192]	@ (8002b64 <FACEID+0x754>)
 8002aa2:	f00a fc8b 	bl	800d3bc <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 8002aa6:	2107      	movs	r1, #7
 8002aa8:	482e      	ldr	r0, [pc, #184]	@ (8002b64 <FACEID+0x754>)
 8002aaa:	f00a f875 	bl	800cb98 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002aae:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <FACEID+0x758>)
 8002ab0:	492e      	ldr	r1, [pc, #184]	@ (8002b6c <FACEID+0x75c>)
 8002ab2:	4824      	ldr	r0, [pc, #144]	@ (8002b44 <FACEID+0x734>)
 8002ab4:	f7fd fca2 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <FACEID+0x760>)
 8002aba:	223c      	movs	r2, #60	@ 0x3c
 8002abc:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	482c      	ldr	r0, [pc, #176]	@ (8002b74 <FACEID+0x764>)
 8002ac4:	f00a fc9a 	bl	800d3fc <memset>
							while(exitmenu != 0){
 8002ac8:	e013      	b.n	8002af2 <FACEID+0x6e2>
								if(Rx_Buffer[0] == 'T'){
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <FACEID+0x764>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	2b54      	cmp	r3, #84	@ 0x54
 8002ad2:	d10e      	bne.n	8002af2 <FACEID+0x6e2>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <FACEID+0x740>)
 8002ad6:	4928      	ldr	r1, [pc, #160]	@ (8002b78 <FACEID+0x768>)
 8002ad8:	481a      	ldr	r0, [pc, #104]	@ (8002b44 <FACEID+0x734>)
 8002ada:	f7fd fc8f 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ae2:	f001 fe1b 	bl	800471c <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4822      	ldr	r0, [pc, #136]	@ (8002b74 <FACEID+0x764>)
 8002aec:	f00a fc86 	bl	800d3fc <memset>
									break;
 8002af0:	e003      	b.n	8002afa <FACEID+0x6ea>
							while(exitmenu != 0){
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <FACEID+0x760>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e7      	bne.n	8002aca <FACEID+0x6ba>
								}
							}
							exitmenu = 0;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <FACEID+0x760>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002b00:	e002      	b.n	8002b08 <FACEID+0x6f8>
						default:
							backrm=0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	72fb      	strb	r3, [r7, #11]
							break;
 8002b06:	bf00      	nop
				while (backrm == 1)
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f43f ae1a 	beq.w	8002744 <FACEID+0x334>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002b10:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <FACEID+0x76c>)
 8002b12:	491b      	ldr	r1, [pc, #108]	@ (8002b80 <FACEID+0x770>)
 8002b14:	480b      	ldr	r0, [pc, #44]	@ (8002b44 <FACEID+0x734>)
 8002b16:	f7fd fc71 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b1a:	e003      	b.n	8002b24 <FACEID+0x714>
			default:
				exitmenu=0;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <FACEID+0x760>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
				break;
 8002b22:	bf00      	nop
	while (exitmenu )
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <FACEID+0x760>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ac82 	bne.w	8002432 <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <FACEID+0x734>)
 8002b30:	f7fd fc54 	bl	80003dc <CLCD_I2C_Clear>
}
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	0800e048 	.word	0x0800e048
 8002b40:	0800e334 	.word	0x0800e334
 8002b44:	200003d8 	.word	0x200003d8
 8002b48:	0800e2b4 	.word	0x0800e2b4
 8002b4c:	0800dfb4 	.word	0x0800dfb4
 8002b50:	0800e058 	.word	0x0800e058
 8002b54:	0800e344 	.word	0x0800e344
 8002b58:	0800e254 	.word	0x0800e254
 8002b5c:	0800e268 	.word	0x0800e268
 8002b60:	0800e354 	.word	0x0800e354
 8002b64:	200003d0 	.word	0x200003d0
 8002b68:	0800dd44 	.word	0x0800dd44
 8002b6c:	0800e35c 	.word	0x0800e35c
 8002b70:	20000020 	.word	0x20000020
 8002b74:	20000350 	.word	0x20000350
 8002b78:	0800e368 	.word	0x0800e368
 8002b7c:	0800e174 	.word	0x0800e174
 8002b80:	0800e150 	.word	0x0800e150

08002b84 <FINGER>:
void FINGER(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	buzzer(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 f8b8 	bl	8003d00 <buzzer>
	exitmenu = Delaymenu;
 8002b90:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <FINGER+0x108>)
 8002b92:	2214      	movs	r2, #20
 8002b94:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002b96:	23ff      	movs	r3, #255	@ 0xff
 8002b98:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 8002b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c90 <FINGER+0x10c>)
 8002b9c:	493d      	ldr	r1, [pc, #244]	@ (8002c94 <FINGER+0x110>)
 8002b9e:	483e      	ldr	r0, [pc, #248]	@ (8002c98 <FINGER+0x114>)
 8002ba0:	f7fd fc2c 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ba4:	e068      	b.n	8002c78 <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f7fd fd82 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002bac:	4603      	mov	r3, r0
 8002bae:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb4:	d131      	bne.n	8002c1a <FINGER+0x96>
		{
			buzzer(1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f001 f8a2 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 8002bbc:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <FINGER+0x108>)
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	701a      	strb	r2, [r3, #0]
			status++;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d801      	bhi.n	8002bd2 <FINGER+0x4e>
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	e000      	b.n	8002bd4 <FINGER+0x50>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d012      	beq.n	8002c02 <FINGER+0x7e>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	dc16      	bgt.n	8002c0e <FINGER+0x8a>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <FINGER+0x66>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d006      	beq.n	8002bf6 <FINGER+0x72>
 8002be8:	e011      	b.n	8002c0e <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002bea:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <FINGER+0x118>)
 8002bec:	4929      	ldr	r1, [pc, #164]	@ (8002c94 <FINGER+0x110>)
 8002bee:	482a      	ldr	r0, [pc, #168]	@ (8002c98 <FINGER+0x114>)
 8002bf0:	f7fd fc04 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002bf4:	e011      	b.n	8002c1a <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <FINGER+0x11c>)
 8002bf8:	4926      	ldr	r1, [pc, #152]	@ (8002c94 <FINGER+0x110>)
 8002bfa:	4827      	ldr	r0, [pc, #156]	@ (8002c98 <FINGER+0x114>)
 8002bfc:	f7fd fbfe 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002c00:	e00b      	b.n	8002c1a <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <FINGER+0x120>)
 8002c04:	4923      	ldr	r1, [pc, #140]	@ (8002c94 <FINGER+0x110>)
 8002c06:	4824      	ldr	r0, [pc, #144]	@ (8002c98 <FINGER+0x114>)
 8002c08:	f7fd fbf8 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c0c:	e005      	b.n	8002c1a <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002c0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <FINGER+0x124>)
 8002c10:	4920      	ldr	r1, [pc, #128]	@ (8002c94 <FINGER+0x110>)
 8002c12:	4821      	ldr	r0, [pc, #132]	@ (8002c98 <FINGER+0x114>)
 8002c14:	f7fd fbf2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002c18:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	2b23      	cmp	r3, #35	@ 0x23
 8002c1e:	d12b      	bne.n	8002c78 <FINGER+0xf4>
		{
			buzzer(1);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f001 f86d 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <FINGER+0x108>)
 8002c28:	2214      	movs	r2, #20
 8002c2a:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d016      	beq.n	8002c60 <FINGER+0xdc>
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	dc1c      	bgt.n	8002c70 <FINGER+0xec>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <FINGER+0xbc>
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d008      	beq.n	8002c50 <FINGER+0xcc>
 8002c3e:	e017      	b.n	8002c70 <FINGER+0xec>
			{
			case 0:
                add_finger();
 8002c40:	f000 fc42 	bl	80034c8 <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002c44:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <FINGER+0x118>)
 8002c46:	4913      	ldr	r1, [pc, #76]	@ (8002c94 <FINGER+0x110>)
 8002c48:	4813      	ldr	r0, [pc, #76]	@ (8002c98 <FINGER+0x114>)
 8002c4a:	f7fd fbd7 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c4e:	e013      	b.n	8002c78 <FINGER+0xf4>
            case 1:
                remove_id_finger();
 8002c50:	f000 fe06 	bl	8003860 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <FINGER+0x11c>)
 8002c56:	490f      	ldr	r1, [pc, #60]	@ (8002c94 <FINGER+0x110>)
 8002c58:	480f      	ldr	r0, [pc, #60]	@ (8002c98 <FINGER+0x114>)
 8002c5a:	f7fd fbcf 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c5e:	e00b      	b.n	8002c78 <FINGER+0xf4>
            case 2:
                remove_all_finger();
 8002c60:	f000 fe7a 	bl	8003958 <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <FINGER+0x120>)
 8002c66:	490b      	ldr	r1, [pc, #44]	@ (8002c94 <FINGER+0x110>)
 8002c68:	480b      	ldr	r0, [pc, #44]	@ (8002c98 <FINGER+0x114>)
 8002c6a:	f7fd fbc7 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c6e:	e003      	b.n	8002c78 <FINGER+0xf4>
            default:
                exitmenu = 0;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <FINGER+0x108>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
                break;
 8002c76:	bf00      	nop
	while (exitmenu )
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <FINGER+0x108>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d192      	bne.n	8002ba6 <FINGER+0x22>
            }
        }
    }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000020 	.word	0x20000020
 8002c90:	0800ddc4 	.word	0x0800ddc4
 8002c94:	0800e378 	.word	0x0800e378
 8002c98:	200003d8 	.word	0x200003d8
 8002c9c:	0800e388 	.word	0x0800e388
 8002ca0:	0800e398 	.word	0x0800e398
 8002ca4:	0800e3ac 	.word	0x0800e3ac
 8002ca8:	0800de10 	.word	0x0800de10

08002cac <PASSWORD>:


void PASSWORD(void) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
	buzzer(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f001 f824 	bl	8003d00 <buzzer>
	exitmenu = Delaymenu;
 8002cb8:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <PASSWORD+0xdc>)
 8002cba:	2214      	movs	r2, #20
 8002cbc:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002cbe:	23ff      	movs	r3, #255	@ 0xff
 8002cc0:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <PASSWORD+0xe0>)
 8002cc4:	4932      	ldr	r1, [pc, #200]	@ (8002d90 <PASSWORD+0xe4>)
 8002cc6:	4833      	ldr	r0, [pc, #204]	@ (8002d94 <PASSWORD+0xe8>)
 8002cc8:	f7fd fb98 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ccc:	e052      	b.n	8002d74 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f7fd fcee 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cdc:	d127      	bne.n	8002d2e <PASSWORD+0x82>
		{
			buzzer(1);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f001 f80e 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <PASSWORD+0xdc>)
 8002ce6:	2214      	movs	r2, #20
 8002ce8:	701a      	strb	r2, [r3, #0]
			status++;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3301      	adds	r3, #1
 8002cee:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d801      	bhi.n	8002cfa <PASSWORD+0x4e>
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	e000      	b.n	8002cfc <PASSWORD+0x50>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <PASSWORD+0x5e>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d006      	beq.n	8002d16 <PASSWORD+0x6a>
 8002d08:	e00b      	b.n	8002d22 <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <PASSWORD+0xec>)
 8002d0c:	4920      	ldr	r1, [pc, #128]	@ (8002d90 <PASSWORD+0xe4>)
 8002d0e:	4821      	ldr	r0, [pc, #132]	@ (8002d94 <PASSWORD+0xe8>)
 8002d10:	f7fd fb74 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d14:	e00b      	b.n	8002d2e <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002d16:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <PASSWORD+0xf0>)
 8002d18:	491d      	ldr	r1, [pc, #116]	@ (8002d90 <PASSWORD+0xe4>)
 8002d1a:	481e      	ldr	r0, [pc, #120]	@ (8002d94 <PASSWORD+0xe8>)
 8002d1c:	f7fd fb6e 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d20:	e005      	b.n	8002d2e <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002d22:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <PASSWORD+0xf4>)
 8002d24:	491a      	ldr	r1, [pc, #104]	@ (8002d90 <PASSWORD+0xe4>)
 8002d26:	481b      	ldr	r0, [pc, #108]	@ (8002d94 <PASSWORD+0xe8>)
 8002d28:	f7fd fb68 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d2c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	2b23      	cmp	r3, #35	@ 0x23
 8002d32:	d11f      	bne.n	8002d74 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f000 ffe3 	bl	8003d00 <buzzer>
			exitmenu = Delaymenu;
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <PASSWORD+0xdc>)
 8002d3c:	2214      	movs	r2, #20
 8002d3e:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <PASSWORD+0xa0>
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d008      	beq.n	8002d5c <PASSWORD+0xb0>
 8002d4a:	e00f      	b.n	8002d6c <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002d4c:	f000 febc 	bl	8003ac8 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <PASSWORD+0xec>)
 8002d52:	490f      	ldr	r1, [pc, #60]	@ (8002d90 <PASSWORD+0xe4>)
 8002d54:	480f      	ldr	r0, [pc, #60]	@ (8002d94 <PASSWORD+0xe8>)
 8002d56:	f7fd fb51 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d5a:	e00b      	b.n	8002d74 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002d5c:	f000 ff40 	bl	8003be0 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002d60:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <PASSWORD+0xf0>)
 8002d62:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <PASSWORD+0xe4>)
 8002d64:	480b      	ldr	r0, [pc, #44]	@ (8002d94 <PASSWORD+0xe8>)
 8002d66:	f7fd fb49 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d6a:	e003      	b.n	8002d74 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <PASSWORD+0xdc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
                break;
 8002d72:	bf00      	nop
	while (exitmenu )
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <PASSWORD+0xdc>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1a8      	bne.n	8002cce <PASSWORD+0x22>
            }
        }
    }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000020 	.word	0x20000020
 8002d8c:	0800ddc4 	.word	0x0800ddc4
 8002d90:	0800e3bc 	.word	0x0800e3bc
 8002d94:	200003d8 	.word	0x200003d8
 8002d98:	0800e3d0 	.word	0x0800e3d0
 8002d9c:	0800e3e0 	.word	0x0800e3e0
 8002da0:	0800de10 	.word	0x0800de10

08002da4 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	2208      	movs	r2, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f7fd ffbe 	bl	8000d38 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002dbc:	7cbb      	ldrb	r3, [r7, #18]
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d001      	beq.n	8002dc6 <CheckUID+0x22>
		return 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e016      	b.n	8002df4 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
 8002dca:	e00f      	b.n	8002dec <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	443b      	add	r3, r7
 8002dda:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <CheckUID+0x42>
			return 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e006      	b.n	8002df4 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	3301      	adds	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d9ec      	bls.n	8002dcc <CheckUID+0x28>
	}
	return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <CheckListUID+0x5c>)
 8002e06:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e08:	e018      	b.n	8002e3c <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd ff79 	bl	8000d06 <Flash_Read_2Byte>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d10a      	bne.n	8002e36 <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ffbe 	bl	8002da4 <CheckUID>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d103      	bne.n	8002e36 <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3305      	adds	r3, #5
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	e00b      	b.n	8002e4e <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3305      	adds	r3, #5
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd ff54 	bl	8000cee <Flash_Read_Byte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2bff      	cmp	r3, #255	@ 0xff
 8002e4a:	d1de      	bne.n	8002e0a <CheckListUID+0xe>
	}
	return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800f000 	.word	0x0800f000

08002e5c <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002e62:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <checkcountUID+0x60>)
 8002e64:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e6a:	e01a      	b.n	8002ea2 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3306      	adds	r3, #6
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd ff48 	bl	8000d06 <Flash_Read_2Byte>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10c      	bne.n	8002e9c <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3305      	adds	r3, #5
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ff31 	bl	8000cee <Flash_Read_Byte>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <checkcountUID+0x40>
			{
				count++;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3305      	adds	r3, #5
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd ff21 	bl	8000cee <Flash_Read_Byte>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2bff      	cmp	r3, #255	@ 0xff
 8002eb0:	d1dc      	bne.n	8002e6c <checkcountUID+0x10>
	}
	return count;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	0800f000 	.word	0x0800f000

08002ec0 <adduid>:

void adduid(uint8_t key)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002eca:	f000 f9bd 	bl	8003248 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002ece:	4a30      	ldr	r2, [pc, #192]	@ (8002f90 <adduid+0xd0>)
 8002ed0:	4930      	ldr	r1, [pc, #192]	@ (8002f94 <adduid+0xd4>)
 8002ed2:	4831      	ldr	r0, [pc, #196]	@ (8002f98 <adduid+0xd8>)
 8002ed4:	f7fd fa92 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu)
 8002ed8:	e053      	b.n	8002f82 <adduid+0xc2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002eda:	4830      	ldr	r0, [pc, #192]	@ (8002f9c <adduid+0xdc>)
 8002edc:	f000 ff86 	bl	8003dec <TM_MFRC522_Check>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d143      	bne.n	8002f6e <adduid+0xae>
		{
			HAL_Delay(100);
 8002ee6:	2064      	movs	r0, #100	@ 0x64
 8002ee8:	f001 fc18 	bl	800471c <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002eec:	482b      	ldr	r0, [pc, #172]	@ (8002f9c <adduid+0xdc>)
 8002eee:	f7ff ff85 	bl	8002dfc <CheckListUID>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d122      	bne.n	8002f3e <adduid+0x7e>
			{
				buzzer(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f000 ff01 	bl	8003d00 <buzzer>
				CardID[5] = key;
 8002efe:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <adduid+0xdc>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <adduid+0xe0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2206      	movs	r2, #6
 8002f0a:	4924      	ldr	r1, [pc, #144]	@ (8002f9c <adduid+0xdc>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fecb 	bl	8000ca8 <Flash_Write_Array>
				AddressUID += 8;
 8002f12:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <adduid+0xe0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <adduid+0xe0>)
 8002f1a:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 8002f1c:	481e      	ldr	r0, [pc, #120]	@ (8002f98 <adduid+0xd8>)
 8002f1e:	f7fd fa5d 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	481c      	ldr	r0, [pc, #112]	@ (8002f98 <adduid+0xd8>)
 8002f28:	f7fd f9ee 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8002f2c:	491d      	ldr	r1, [pc, #116]	@ (8002fa4 <adduid+0xe4>)
 8002f2e:	481a      	ldr	r0, [pc, #104]	@ (8002f98 <adduid+0xd8>)
 8002f30:	f7fd fa3d 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002f34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f38:	f001 fbf0 	bl	800471c <HAL_Delay>
				return;
 8002f3c:	e025      	b.n	8002f8a <adduid+0xca>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 8002f3e:	4816      	ldr	r0, [pc, #88]	@ (8002f98 <adduid+0xd8>)
 8002f40:	f7fd fa4c 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	4813      	ldr	r0, [pc, #76]	@ (8002f98 <adduid+0xd8>)
 8002f4a:	f7fd f9dd 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002f4e:	4916      	ldr	r1, [pc, #88]	@ (8002fa8 <adduid+0xe8>)
 8002f50:	4811      	ldr	r0, [pc, #68]	@ (8002f98 <adduid+0xd8>)
 8002f52:	f7fd fa2c 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002f56:	2003      	movs	r0, #3
 8002f58:	f000 fed2 	bl	8003d00 <buzzer>
				HAL_Delay(1000);
 8002f5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f60:	f001 fbdc 	bl	800471c <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <adduid+0xd0>)
 8002f66:	490b      	ldr	r1, [pc, #44]	@ (8002f94 <adduid+0xd4>)
 8002f68:	480b      	ldr	r0, [pc, #44]	@ (8002f98 <adduid+0xd8>)
 8002f6a:	f7fd fa47 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002f6e:	2064      	movs	r0, #100	@ 0x64
 8002f70:	f7fd fb9e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b23      	cmp	r3, #35	@ 0x23
 8002f78:	d103      	bne.n	8002f82 <adduid+0xc2>
		{
			buzzer(1);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 fec0 	bl	8003d00 <buzzer>
			return;
 8002f80:	e003      	b.n	8002f8a <adduid+0xca>
	while (exitmenu)
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <adduid+0xec>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1a7      	bne.n	8002eda <adduid+0x1a>
		}
	}
}
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800de10 	.word	0x0800de10
 8002f94:	0800e3f0 	.word	0x0800e3f0
 8002f98:	200003d8 	.word	0x200003d8
 8002f9c:	200003e4 	.word	0x200003e4
 8002fa0:	20000024 	.word	0x20000024
 8002fa4:	0800e3fc 	.word	0x0800e3fc
 8002fa8:	0800e40c 	.word	0x0800e40c
 8002fac:	20000020 	.word	0x20000020

08002fb0 <checkthe>:

void checkthe(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80030ec <checkthe+0x13c>)
 8002fb8:	221e      	movs	r2, #30
 8002fba:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <checkthe+0x140>)
 8002fbe:	494d      	ldr	r1, [pc, #308]	@ (80030f4 <checkthe+0x144>)
 8002fc0:	484d      	ldr	r0, [pc, #308]	@ (80030f8 <checkthe+0x148>)
 8002fc2:	f7fd fa1b 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002fc6:	e088      	b.n	80030da <checkthe+0x12a>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002fc8:	484c      	ldr	r0, [pc, #304]	@ (80030fc <checkthe+0x14c>)
 8002fca:	f000 ff0f 	bl	8003dec <TM_MFRC522_Check>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d178      	bne.n	80030c6 <checkthe+0x116>
		{
			if (CheckListUID(CardID) == 0)
 8002fd4:	4849      	ldr	r0, [pc, #292]	@ (80030fc <checkthe+0x14c>)
 8002fd6:	f7ff ff11 	bl	8002dfc <CheckListUID>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11c      	bne.n	800301a <checkthe+0x6a>
			{
				CLCD_I2C_Clear(&LCD1);
 8002fe0:	4845      	ldr	r0, [pc, #276]	@ (80030f8 <checkthe+0x148>)
 8002fe2:	f7fd f9fb 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4843      	ldr	r0, [pc, #268]	@ (80030f8 <checkthe+0x148>)
 8002fec:	f7fd f98c 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002ff0:	4943      	ldr	r1, [pc, #268]	@ (8003100 <checkthe+0x150>)
 8002ff2:	4841      	ldr	r0, [pc, #260]	@ (80030f8 <checkthe+0x148>)
 8002ff4:	f7fd f9db 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	f000 fe81 	bl	8003d00 <buzzer>
				HAL_Delay(1000);
 8002ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003002:	f001 fb8b 	bl	800471c <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8003006:	4a3a      	ldr	r2, [pc, #232]	@ (80030f0 <checkthe+0x140>)
 8003008:	493a      	ldr	r1, [pc, #232]	@ (80030f4 <checkthe+0x144>)
 800300a:	483b      	ldr	r0, [pc, #236]	@ (80030f8 <checkthe+0x148>)
 800300c:	f7fd f9f6 	bl	80003fc <CLCD_I2C_Display>
				HAL_Delay(1000);
 8003010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003014:	f001 fb82 	bl	800471c <HAL_Delay>
 8003018:	e055      	b.n	80030c6 <checkthe+0x116>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 800301a:	4838      	ldr	r0, [pc, #224]	@ (80030fc <checkthe+0x14c>)
 800301c:	f7ff feee 	bl	8002dfc <CheckListUID>
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8003032:	4831      	ldr	r0, [pc, #196]	@ (80030f8 <checkthe+0x148>)
 8003034:	f7fd f9d2 	bl	80003dc <CLCD_I2C_Clear>
				buzzer(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f000 fe61 	bl	8003d00 <buzzer>
				switch (key1)
 800303e:	797b      	ldrb	r3, [r7, #5]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d109      	bne.n	8003058 <checkthe+0xa8>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	482b      	ldr	r0, [pc, #172]	@ (80030f8 <checkthe+0x148>)
 800304a:	f7fd f95d 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 800304e:	492d      	ldr	r1, [pc, #180]	@ (8003104 <checkthe+0x154>)
 8003050:	4829      	ldr	r0, [pc, #164]	@ (80030f8 <checkthe+0x148>)
 8003052:	f7fd f9ac 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8003056:	e009      	b.n	800306c <checkthe+0xbc>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	4826      	ldr	r0, [pc, #152]	@ (80030f8 <checkthe+0x148>)
 800305e:	f7fd f953 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8003062:	4929      	ldr	r1, [pc, #164]	@ (8003108 <checkthe+0x158>)
 8003064:	4824      	ldr	r0, [pc, #144]	@ (80030f8 <checkthe+0x148>)
 8003066:	f7fd f9a2 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800306a:	bf00      	nop
				}
				switch (key2)
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <checkthe+0xc8>
 8003072:	2b02      	cmp	r3, #2
 8003074:	d00a      	beq.n	800308c <checkthe+0xdc>
 8003076:	e013      	b.n	80030a0 <checkthe+0xf0>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003078:	2201      	movs	r2, #1
 800307a:	2100      	movs	r1, #0
 800307c:	481e      	ldr	r0, [pc, #120]	@ (80030f8 <checkthe+0x148>)
 800307e:	f7fd f943 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8003082:	4922      	ldr	r1, [pc, #136]	@ (800310c <checkthe+0x15c>)
 8003084:	481c      	ldr	r0, [pc, #112]	@ (80030f8 <checkthe+0x148>)
 8003086:	f7fd f992 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800308a:	e013      	b.n	80030b4 <checkthe+0x104>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800308c:	2201      	movs	r2, #1
 800308e:	2100      	movs	r1, #0
 8003090:	4819      	ldr	r0, [pc, #100]	@ (80030f8 <checkthe+0x148>)
 8003092:	f7fd f939 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8003096:	491e      	ldr	r1, [pc, #120]	@ (8003110 <checkthe+0x160>)
 8003098:	4817      	ldr	r0, [pc, #92]	@ (80030f8 <checkthe+0x148>)
 800309a:	f7fd f988 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800309e:	e009      	b.n	80030b4 <checkthe+0x104>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	2100      	movs	r1, #0
 80030a4:	4814      	ldr	r0, [pc, #80]	@ (80030f8 <checkthe+0x148>)
 80030a6:	f7fd f92f 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 80030aa:	491a      	ldr	r1, [pc, #104]	@ (8003114 <checkthe+0x164>)
 80030ac:	4812      	ldr	r0, [pc, #72]	@ (80030f8 <checkthe+0x148>)
 80030ae:	f7fd f97e 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 80030b2:	bf00      	nop
				}
				HAL_Delay(1000);
 80030b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030b8:	f001 fb30 	bl	800471c <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 80030bc:	4a0c      	ldr	r2, [pc, #48]	@ (80030f0 <checkthe+0x140>)
 80030be:	4916      	ldr	r1, [pc, #88]	@ (8003118 <checkthe+0x168>)
 80030c0:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <checkthe+0x148>)
 80030c2:	f7fd f99b 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 80030c6:	2064      	movs	r0, #100	@ 0x64
 80030c8:	f7fd faf2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b23      	cmp	r3, #35	@ 0x23
 80030d0:	d103      	bne.n	80030da <checkthe+0x12a>
		{
			buzzer(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fe14 	bl	8003d00 <buzzer>
			return;
 80030d8:	e004      	b.n	80030e4 <checkthe+0x134>
	while (exitmenu )
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <checkthe+0x13c>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f af72 	bne.w	8002fc8 <checkthe+0x18>
		}
	}
}
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000020 	.word	0x20000020
 80030f0:	0800de10 	.word	0x0800de10
 80030f4:	0800e3f0 	.word	0x0800e3f0
 80030f8:	200003d8 	.word	0x200003d8
 80030fc:	200003e4 	.word	0x200003e4
 8003100:	0800e41c 	.word	0x0800e41c
 8003104:	0800e42c 	.word	0x0800e42c
 8003108:	0800e438 	.word	0x0800e438
 800310c:	0800e444 	.word	0x0800e444
 8003110:	0800e44c 	.word	0x0800e44c
 8003114:	0800e454 	.word	0x0800e454
 8003118:	0800e120 	.word	0x0800e120

0800311c <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8003126:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <CheckKey+0x58>)
 8003128:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800312a:	e015      	b.n	8003158 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3306      	adds	r3, #6
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fde8 	bl	8000d06 <Flash_Read_2Byte>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800313e:	429a      	cmp	r2, r3
 8003140:	d107      	bne.n	8003152 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3305      	adds	r3, #5
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	79fa      	ldrb	r2, [r7, #7]
 800314a:	429a      	cmp	r2, r3
 800314c:	d101      	bne.n	8003152 <CheckKey+0x36>
				return pt;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	e00b      	b.n	800316a <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3308      	adds	r3, #8
 8003156:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3305      	adds	r3, #5
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fdc6 	bl	8000cee <Flash_Read_Byte>
 8003162:	4603      	mov	r3, r0
 8003164:	2bff      	cmp	r3, #255	@ 0xff
 8003166:	d1e1      	bne.n	800312c <CheckKey+0x10>
	}
	return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	0800f000 	.word	0x0800f000

08003178 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3306      	adds	r3, #6
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fd76 	bl	8000c78 <Flash_Write_2Byte>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <startadd>:
void startadd(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8003198:	4a22      	ldr	r2, [pc, #136]	@ (8003224 <startadd+0x90>)
 800319a:	4923      	ldr	r1, [pc, #140]	@ (8003228 <startadd+0x94>)
 800319c:	4823      	ldr	r0, [pc, #140]	@ (800322c <startadd+0x98>)
 800319e:	f7fd f92d 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 80031a2:	f000 f851 	bl	8003248 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80031a6:	4822      	ldr	r0, [pc, #136]	@ (8003230 <startadd+0x9c>)
 80031a8:	f000 fe20 	bl	8003dec <TM_MFRC522_Check>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 80031b2:	481f      	ldr	r0, [pc, #124]	@ (8003230 <startadd+0x9c>)
 80031b4:	f7ff fe22 	bl	8002dfc <CheckListUID>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <startadd+0x4a>
				{
					CardID[5] = 0x11;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <startadd+0x9c>)
 80031c0:	2211      	movs	r2, #17
 80031c2:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 80031c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <startadd+0xa0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2206      	movs	r2, #6
 80031ca:	4919      	ldr	r1, [pc, #100]	@ (8003230 <startadd+0x9c>)
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd6b 	bl	8000ca8 <Flash_Write_Array>
					AddressUID += 8;
 80031d2:	4b18      	ldr	r3, [pc, #96]	@ (8003234 <startadd+0xa0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3308      	adds	r3, #8
 80031d8:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <startadd+0xa0>)
 80031da:	6013      	str	r3, [r2, #0]
					break;
 80031dc:	e011      	b.n	8003202 <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <startadd+0xa4>)
 80031e0:	4916      	ldr	r1, [pc, #88]	@ (800323c <startadd+0xa8>)
 80031e2:	4812      	ldr	r0, [pc, #72]	@ (800322c <startadd+0x98>)
 80031e4:	f7fd f90a 	bl	80003fc <CLCD_I2C_Display>
					buzzer(5);
 80031e8:	2005      	movs	r0, #5
 80031ea:	f000 fd89 	bl	8003d00 <buzzer>
					HAL_Delay(1000);
 80031ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031f2:	f001 fa93 	bl	800471c <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 80031f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <startadd+0x90>)
 80031f8:	490b      	ldr	r1, [pc, #44]	@ (8003228 <startadd+0x94>)
 80031fa:	480c      	ldr	r0, [pc, #48]	@ (800322c <startadd+0x98>)
 80031fc:	f7fd f8fe 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8003200:	e7d1      	b.n	80031a6 <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8003202:	4a0f      	ldr	r2, [pc, #60]	@ (8003240 <startadd+0xac>)
 8003204:	490f      	ldr	r1, [pc, #60]	@ (8003244 <startadd+0xb0>)
 8003206:	4809      	ldr	r0, [pc, #36]	@ (800322c <startadd+0x98>)
 8003208:	f7fd f8f8 	bl	80003fc <CLCD_I2C_Display>
	buzzer(1);
 800320c:	2001      	movs	r0, #1
 800320e:	f000 fd77 	bl	8003d00 <buzzer>
	HAL_Delay(1000);
 8003212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003216:	f001 fa81 	bl	800471c <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 800321a:	4804      	ldr	r0, [pc, #16]	@ (800322c <startadd+0x98>)
 800321c:	f7fd f8de 	bl	80003dc <CLCD_I2C_Clear>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	0800e45c 	.word	0x0800e45c
 8003228:	0800e120 	.word	0x0800e120
 800322c:	200003d8 	.word	0x200003d8
 8003230:	200003e4 	.word	0x200003e4
 8003234:	20000024 	.word	0x20000024
 8003238:	0800e470 	.word	0x0800e470
 800323c:	0800e484 	.word	0x0800e484
 8003240:	0800e494 	.word	0x0800e494
 8003244:	0800e4a4 	.word	0x0800e4a4

08003248 <setaddress>:
void setaddress(void){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <setaddress+0x30>)
 8003250:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003252:	e002      	b.n	800325a <setaddress+0x12>
	{
		pt = pt + 8;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3308      	adds	r3, #8
 8003258:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3305      	adds	r3, #5
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fd45 	bl	8000cee <Flash_Read_Byte>
 8003264:	4603      	mov	r3, r0
 8003266:	2bff      	cmp	r3, #255	@ 0xff
 8003268:	d1f4      	bne.n	8003254 <setaddress+0xc>
	}
	AddressUID = pt;
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <setaddress+0x34>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800f000 	.word	0x0800f000
 800327c:	20000024 	.word	0x20000024

08003280 <remoall>:

void remoall(){
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <remoall+0x44>)
 8003288:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800328a:	e00a      	b.n	80032a2 <remoall+0x22>
		Flash_Erase(pt);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd fcd7 	bl	8000c40 <Flash_Erase>
		pt = pt + 0x400;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003298:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <remoall+0x48>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fd3b 	bl	8000d1e <Flash_Read_8Byte>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	bf08      	it	eq
 80032b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80032b6:	d1e9      	bne.n	800328c <remoall+0xc>
			break;
	}
}
 80032b8:	e000      	b.n	80032bc <remoall+0x3c>
			break;
 80032ba:	bf00      	nop
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0800f000 	.word	0x0800f000
 80032c8:	0800fc00 	.word	0x0800fc00

080032cc <addface>:
		}
	}
}

void addface(uint8_t key)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	2100      	movs	r1, #0
 80032da:	4823      	ldr	r0, [pc, #140]	@ (8003368 <addface+0x9c>)
 80032dc:	f00a f88e 	bl	800d3fc <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	461a      	mov	r2, r3
 80032e4:	4921      	ldr	r1, [pc, #132]	@ (800336c <addface+0xa0>)
 80032e6:	4822      	ldr	r0, [pc, #136]	@ (8003370 <addface+0xa4>)
 80032e8:	f00a f868 	bl	800d3bc <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80032ec:	2105      	movs	r1, #5
 80032ee:	4820      	ldr	r0, [pc, #128]	@ (8003370 <addface+0xa4>)
 80032f0:	f009 fc52 	bl	800cb98 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <addface+0xa8>)
 80032f6:	4920      	ldr	r1, [pc, #128]	@ (8003378 <addface+0xac>)
 80032f8:	4820      	ldr	r0, [pc, #128]	@ (800337c <addface+0xb0>)
 80032fa:	f7fd f87f 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <addface+0xb4>)
 8003300:	223c      	movs	r2, #60	@ 0x3c
 8003302:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003304:	e023      	b.n	800334e <addface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8003306:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <addface+0x9c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b25b      	sxtb	r3, r3
 800330c:	2b54      	cmp	r3, #84	@ 0x54
 800330e:	d10c      	bne.n	800332a <addface+0x5e>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <addface+0xb8>)
 8003312:	491d      	ldr	r1, [pc, #116]	@ (8003388 <addface+0xbc>)
 8003314:	4819      	ldr	r0, [pc, #100]	@ (800337c <addface+0xb0>)
 8003316:	f7fd f871 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fcf0 	bl	8003d00 <buzzer>
			HAL_Delay(2000);
 8003320:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003324:	f001 f9fa 	bl	800471c <HAL_Delay>
			break;
 8003328:	e015      	b.n	8003356 <addface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <addface+0x9c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	2b46      	cmp	r3, #70	@ 0x46
 8003332:	d10c      	bne.n	800334e <addface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8003334:	4a0f      	ldr	r2, [pc, #60]	@ (8003374 <addface+0xa8>)
 8003336:	4915      	ldr	r1, [pc, #84]	@ (800338c <addface+0xc0>)
 8003338:	4810      	ldr	r0, [pc, #64]	@ (800337c <addface+0xb0>)
 800333a:	f7fd f85f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 800333e:	2005      	movs	r0, #5
 8003340:	f000 fcde 	bl	8003d00 <buzzer>
			HAL_Delay(2000);
 8003344:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003348:	f001 f9e8 	bl	800471c <HAL_Delay>
			break;
 800334c:	e003      	b.n	8003356 <addface+0x8a>
	while(exitmenu != 0){
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <addface+0xb4>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1d7      	bne.n	8003306 <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003356:	2280      	movs	r2, #128	@ 0x80
 8003358:	2100      	movs	r1, #0
 800335a:	4803      	ldr	r0, [pc, #12]	@ (8003368 <addface+0x9c>)
 800335c:	f00a f84e 	bl	800d3fc <memset>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000350 	.word	0x20000350
 800336c:	0800e4b4 	.word	0x0800e4b4
 8003370:	200003d0 	.word	0x200003d0
 8003374:	0800dd44 	.word	0x0800dd44
 8003378:	0800e35c 	.word	0x0800e35c
 800337c:	200003d8 	.word	0x200003d8
 8003380:	20000020 	.word	0x20000020
 8003384:	0800e3fc 	.word	0x0800e3fc
 8003388:	0800e4bc 	.word	0x0800e4bc
 800338c:	0800e4cc 	.word	0x0800e4cc

08003390 <removeface>:
void removeface(uint8_t key)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800339a:	2280      	movs	r2, #128	@ 0x80
 800339c:	2100      	movs	r1, #0
 800339e:	4823      	ldr	r0, [pc, #140]	@ (800342c <removeface+0x9c>)
 80033a0:	f00a f82c 	bl	800d3fc <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4921      	ldr	r1, [pc, #132]	@ (8003430 <removeface+0xa0>)
 80033aa:	4822      	ldr	r0, [pc, #136]	@ (8003434 <removeface+0xa4>)
 80033ac:	f00a f806 	bl	800d3bc <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80033b0:	2105      	movs	r1, #5
 80033b2:	4820      	ldr	r0, [pc, #128]	@ (8003434 <removeface+0xa4>)
 80033b4:	f009 fbf0 	bl	800cb98 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80033b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <removeface+0xa8>)
 80033ba:	4920      	ldr	r1, [pc, #128]	@ (800343c <removeface+0xac>)
 80033bc:	4820      	ldr	r0, [pc, #128]	@ (8003440 <removeface+0xb0>)
 80033be:	f7fd f81d 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <removeface+0xb4>)
 80033c4:	223c      	movs	r2, #60	@ 0x3c
 80033c6:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80033c8:	e023      	b.n	8003412 <removeface+0x82>
		if(Rx_Buffer[0] == 'T'){
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <removeface+0x9c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	2b54      	cmp	r3, #84	@ 0x54
 80033d2:	d10c      	bne.n	80033ee <removeface+0x5e>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 80033d4:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <removeface+0xa8>)
 80033d6:	491c      	ldr	r1, [pc, #112]	@ (8003448 <removeface+0xb8>)
 80033d8:	4819      	ldr	r0, [pc, #100]	@ (8003440 <removeface+0xb0>)
 80033da:	f7fd f80f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f000 fc8e 	bl	8003d00 <buzzer>
			HAL_Delay(2000);
 80033e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033e8:	f001 f998 	bl	800471c <HAL_Delay>
			break;
 80033ec:	e015      	b.n	800341a <removeface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <removeface+0x9c>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	2b46      	cmp	r3, #70	@ 0x46
 80033f6:	d10c      	bne.n	8003412 <removeface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80033f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003438 <removeface+0xa8>)
 80033fa:	4914      	ldr	r1, [pc, #80]	@ (800344c <removeface+0xbc>)
 80033fc:	4810      	ldr	r0, [pc, #64]	@ (8003440 <removeface+0xb0>)
 80033fe:	f7fc fffd 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8003402:	2005      	movs	r0, #5
 8003404:	f000 fc7c 	bl	8003d00 <buzzer>
			HAL_Delay(2000);
 8003408:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800340c:	f001 f986 	bl	800471c <HAL_Delay>
			break;
 8003410:	e003      	b.n	800341a <removeface+0x8a>
	while(exitmenu != 0){
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <removeface+0xb4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1d7      	bne.n	80033ca <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	2100      	movs	r1, #0
 800341e:	4803      	ldr	r0, [pc, #12]	@ (800342c <removeface+0x9c>)
 8003420:	f009 ffec 	bl	800d3fc <memset>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000350 	.word	0x20000350
 8003430:	0800e4dc 	.word	0x0800e4dc
 8003434:	200003d0 	.word	0x200003d0
 8003438:	0800dd44 	.word	0x0800dd44
 800343c:	0800e35c 	.word	0x0800e35c
 8003440:	200003d8 	.word	0x200003d8
 8003444:	20000020 	.word	0x20000020
 8003448:	0800e4e4 	.word	0x0800e4e4
 800344c:	0800e4f4 	.word	0x0800e4f4

08003450 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	2100      	movs	r1, #0
 800345e:	4817      	ldr	r0, [pc, #92]	@ (80034bc <checkfaceid+0x6c>)
 8003460:	f009 ffcc 	bl	800d3fc <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	461a      	mov	r2, r3
 8003468:	4915      	ldr	r1, [pc, #84]	@ (80034c0 <checkfaceid+0x70>)
 800346a:	4816      	ldr	r0, [pc, #88]	@ (80034c4 <checkfaceid+0x74>)
 800346c:	f009 ffa6 	bl	800d3bc <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003470:	2105      	movs	r1, #5
 8003472:	4814      	ldr	r0, [pc, #80]	@ (80034c4 <checkfaceid+0x74>)
 8003474:	f009 fb90 	bl	800cb98 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8003478:	e000      	b.n	800347c <checkfaceid+0x2c>
			continue;
 800347a:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <checkfaceid+0x6c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f9      	beq.n	800347a <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 8003486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800348a:	f001 f947 	bl	800471c <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 800348e:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <checkfaceid+0x6c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b25b      	sxtb	r3, r3
 8003494:	2b54      	cmp	r3, #84	@ 0x54
 8003496:	d101      	bne.n	800349c <checkfaceid+0x4c>
		return key;
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	e00b      	b.n	80034b4 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 800349c:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <checkfaceid+0x6c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	2b46      	cmp	r3, #70	@ 0x46
 80034a4:	d101      	bne.n	80034aa <checkfaceid+0x5a>
		return 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e004      	b.n	80034b4 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80034aa:	2280      	movs	r2, #128	@ 0x80
 80034ac:	2100      	movs	r1, #0
 80034ae:	4803      	ldr	r0, [pc, #12]	@ (80034bc <checkfaceid+0x6c>)
 80034b0:	f009 ffa4 	bl	800d3fc <memset>
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000350 	.word	0x20000350
 80034c0:	0800e504 	.word	0x0800e504
 80034c4:	200003d0 	.word	0x200003d0

080034c8 <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-9):", "ID= ");
 80034d2:	4a91      	ldr	r2, [pc, #580]	@ (8003718 <add_finger+0x250>)
 80034d4:	4991      	ldr	r1, [pc, #580]	@ (800371c <add_finger+0x254>)
 80034d6:	4892      	ldr	r0, [pc, #584]	@ (8003720 <add_finger+0x258>)
 80034d8:	f7fc ff90 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 80034dc:	200a      	movs	r0, #10
 80034de:	f7fd f8e7 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80034e2:	4603      	mov	r3, r0
 80034e4:	71bb      	strb	r3, [r7, #6]
        if (key >= '1' && key <= '9')
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	2b30      	cmp	r3, #48	@ 0x30
 80034ea:	d9f7      	bls.n	80034dc <add_finger+0x14>
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	2b39      	cmp	r3, #57	@ 0x39
 80034f0:	d8f4      	bhi.n	80034dc <add_finger+0x14>
        {
        	buzzer(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 fc04 	bl	8003d00 <buzzer>
            id = key - '0';
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	3b30      	subs	r3, #48	@ 0x30
 80034fc:	71fb      	strb	r3, [r7, #7]
            break;
 80034fe:	bf00      	nop
        }
    }
    ID = id;
 8003500:	4a88      	ldr	r2, [pc, #544]	@ (8003724 <add_finger+0x25c>)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4885      	ldr	r0, [pc, #532]	@ (8003720 <add_finger+0x258>)
 800350c:	f7fc fefc 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 8003510:	4b84      	ldr	r3, [pc, #528]	@ (8003724 <add_finger+0x25c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3330      	adds	r3, #48	@ 0x30
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	4881      	ldr	r0, [pc, #516]	@ (8003720 <add_finger+0x258>)
 800351c:	f7fc ff37 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 8003520:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003524:	f001 f8fa 	bl	800471c <HAL_Delay>

    vitri2:
    while(1)
    {
        collect_finger();
 8003528:	f7fd f9e2 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 800352c:	4a7e      	ldr	r2, [pc, #504]	@ (8003728 <add_finger+0x260>)
 800352e:	497f      	ldr	r1, [pc, #508]	@ (800372c <add_finger+0x264>)
 8003530:	487b      	ldr	r0, [pc, #492]	@ (8003720 <add_finger+0x258>)
 8003532:	f7fc ff63 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800353a:	f001 f8ef 	bl	800471c <HAL_Delay>
    // dat tay vao
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800353e:	2201      	movs	r2, #1
 8003540:	2100      	movs	r1, #0
 8003542:	4877      	ldr	r0, [pc, #476]	@ (8003720 <add_finger+0x258>)
 8003544:	f7fc fee0 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8003548:	4979      	ldr	r1, [pc, #484]	@ (8003730 <add_finger+0x268>)
 800354a:	4875      	ldr	r0, [pc, #468]	@ (8003720 <add_finger+0x258>)
 800354c:	f7fc ff2f 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003550:	4b78      	ldr	r3, [pc, #480]	@ (8003734 <add_finger+0x26c>)
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003556:	e008      	b.n	800356a <add_finger+0xa2>
            collect_finger();
 8003558:	f7fd f9ca 	bl	80008f0 <collect_finger>
            collect_finger();
 800355c:	f7fd f9c8 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8003560:	f7fd f9c6 	bl	80008f0 <collect_finger>
 8003564:	4603      	mov	r3, r0
 8003566:	4a73      	ldr	r2, [pc, #460]	@ (8003734 <add_finger+0x26c>)
 8003568:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 800356a:	4b72      	ldr	r3, [pc, #456]	@ (8003734 <add_finger+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f2      	bne.n	8003558 <add_finger+0x90>
        }
        tmp=0xff;
 8003572:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <add_finger+0x26c>)
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	4868      	ldr	r0, [pc, #416]	@ (8003720 <add_finger+0x258>)
 800357e:	f7fc fec3 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003582:	496d      	ldr	r1, [pc, #436]	@ (8003738 <add_finger+0x270>)
 8003584:	4866      	ldr	r0, [pc, #408]	@ (8003720 <add_finger+0x258>)
 8003586:	f7fc ff12 	bl	80003ae <CLCD_I2C_WriteString>
 800358a:	2064      	movs	r0, #100	@ 0x64
 800358c:	f001 f8c6 	bl	800471c <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003590:	2201      	movs	r2, #1
 8003592:	2100      	movs	r1, #0
 8003594:	4862      	ldr	r0, [pc, #392]	@ (8003720 <add_finger+0x258>)
 8003596:	f7fc feb7 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 800359a:	4968      	ldr	r1, [pc, #416]	@ (800373c <add_finger+0x274>)
 800359c:	4860      	ldr	r0, [pc, #384]	@ (8003720 <add_finger+0x258>)
 800359e:	f7fc ff06 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <add_finger+0x26c>)
 80035a4:	22ff      	movs	r2, #255	@ 0xff
 80035a6:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 80035a8:	e005      	b.n	80035b6 <add_finger+0xee>
        tmp=img2tz(0x01);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7fd f9cc 	bl	8000948 <img2tz>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <add_finger+0x26c>)
 80035b4:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 80035b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <add_finger+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f5      	bne.n	80035aa <add_finger+0xe2>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035be:	2201      	movs	r2, #1
 80035c0:	2100      	movs	r1, #0
 80035c2:	4857      	ldr	r0, [pc, #348]	@ (8003720 <add_finger+0x258>)
 80035c4:	f7fc fea0 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 80035c8:	495d      	ldr	r1, [pc, #372]	@ (8003740 <add_finger+0x278>)
 80035ca:	4855      	ldr	r0, [pc, #340]	@ (8003720 <add_finger+0x258>)
 80035cc:	f7fc feef 	bl	80003ae <CLCD_I2C_WriteString>
 80035d0:	2064      	movs	r0, #100	@ 0x64
 80035d2:	f001 f8a3 	bl	800471c <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035d6:	2201      	movs	r2, #1
 80035d8:	2100      	movs	r1, #0
 80035da:	4851      	ldr	r0, [pc, #324]	@ (8003720 <add_finger+0x258>)
 80035dc:	f7fc fe94 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 80035e0:	4953      	ldr	r1, [pc, #332]	@ (8003730 <add_finger+0x268>)
 80035e2:	484f      	ldr	r0, [pc, #316]	@ (8003720 <add_finger+0x258>)
 80035e4:	f7fc fee3 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80035e8:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <add_finger+0x26c>)
 80035ea:	22ff      	movs	r2, #255	@ 0xff
 80035ec:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 80035ee:	e008      	b.n	8003602 <add_finger+0x13a>
            collect_finger();
 80035f0:	f7fd f97e 	bl	80008f0 <collect_finger>
            collect_finger();
 80035f4:	f7fd f97c 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 80035f8:	f7fd f97a 	bl	80008f0 <collect_finger>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003734 <add_finger+0x26c>)
 8003600:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00)    {
 8003602:	4b4c      	ldr	r3, [pc, #304]	@ (8003734 <add_finger+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f2      	bne.n	80035f0 <add_finger+0x128>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800360a:	2201      	movs	r2, #1
 800360c:	2100      	movs	r1, #0
 800360e:	4844      	ldr	r0, [pc, #272]	@ (8003720 <add_finger+0x258>)
 8003610:	f7fc fe7a 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003614:	4948      	ldr	r1, [pc, #288]	@ (8003738 <add_finger+0x270>)
 8003616:	4842      	ldr	r0, [pc, #264]	@ (8003720 <add_finger+0x258>)
 8003618:	f7fc fec9 	bl	80003ae <CLCD_I2C_WriteString>
 800361c:	2064      	movs	r0, #100	@ 0x64
 800361e:	f001 f87d 	bl	800471c <HAL_Delay>
        tmp=0xff;
 8003622:	4b44      	ldr	r3, [pc, #272]	@ (8003734 <add_finger+0x26c>)
 8003624:	22ff      	movs	r2, #255	@ 0xff
 8003626:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003628:	2201      	movs	r2, #1
 800362a:	2100      	movs	r1, #0
 800362c:	483c      	ldr	r0, [pc, #240]	@ (8003720 <add_finger+0x258>)
 800362e:	f7fc fe6b 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8003632:	4942      	ldr	r1, [pc, #264]	@ (800373c <add_finger+0x274>)
 8003634:	483a      	ldr	r0, [pc, #232]	@ (8003720 <add_finger+0x258>)
 8003636:	f7fc feba 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {tmp=img2tz(0x02);}
 800363a:	e005      	b.n	8003648 <add_finger+0x180>
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f983 	bl	8000948 <img2tz>
 8003642:	4603      	mov	r3, r0
 8003644:	4a3b      	ldr	r2, [pc, #236]	@ (8003734 <add_finger+0x26c>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b3a      	ldr	r3, [pc, #232]	@ (8003734 <add_finger+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f5      	bne.n	800363c <add_finger+0x174>
        tmp=0xff;
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <add_finger+0x26c>)
 8003652:	22ff      	movs	r2, #255	@ 0xff
 8003654:	601a      	str	r2, [r3, #0]
        // kiem tra 2 buff co trung nhau khong
        while(tmp!=0x00)
 8003656:	e01d      	b.n	8003694 <add_finger+0x1cc>
        {
            tmp=match();    //HAL_Delay(100);
 8003658:	f7fd f9b2 	bl	80009c0 <match>
 800365c:	4603      	mov	r3, r0
 800365e:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <add_finger+0x26c>)
 8003660:	6013      	str	r3, [r2, #0]
            if(tmp==0x08||tmp==0x01)
 8003662:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <add_finger+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d003      	beq.n	8003672 <add_finger+0x1aa>
 800366a:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <add_finger+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d110      	bne.n	8003694 <add_finger+0x1cc>
            {
                // loi, lam lai
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003672:	2201      	movs	r2, #1
 8003674:	2100      	movs	r1, #0
 8003676:	482a      	ldr	r0, [pc, #168]	@ (8003720 <add_finger+0x258>)
 8003678:	f7fc fe46 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 800367c:	4931      	ldr	r1, [pc, #196]	@ (8003744 <add_finger+0x27c>)
 800367e:	4828      	ldr	r0, [pc, #160]	@ (8003720 <add_finger+0x258>)
 8003680:	f7fc fe95 	bl	80003ae <CLCD_I2C_WriteString>
 8003684:	2005      	movs	r0, #5
 8003686:	f000 fb3b 	bl	8003d00 <buzzer>
 800368a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800368e:	f001 f845 	bl	800471c <HAL_Delay>
                goto vitri2;
 8003692:	e749      	b.n	8003528 <add_finger+0x60>
        while(tmp!=0x00)
 8003694:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <add_finger+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1dd      	bne.n	8003658 <add_finger+0x190>
            }
        }
        tmp=0xff;
 800369c:	4b25      	ldr	r3, [pc, #148]	@ (8003734 <add_finger+0x26c>)
 800369e:	22ff      	movs	r2, #255	@ 0xff
 80036a0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 80036a2:	e007      	b.n	80036b4 <add_finger+0x1ec>
 80036a4:	f7fd f9b8 	bl	8000a18 <regmodel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <add_finger+0x26c>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	2064      	movs	r0, #100	@ 0x64
 80036b0:	f001 f834 	bl	800471c <HAL_Delay>
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <add_finger+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f3      	bne.n	80036a4 <add_finger+0x1dc>
        tmp=0xff;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <add_finger+0x26c>)
 80036be:	22ff      	movs	r2, #255	@ 0xff
 80036c0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}            // luu id
 80036c2:	e00a      	b.n	80036da <add_finger+0x212>
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <add_finger+0x25c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd f9d1 	bl	8000a70 <store>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <add_finger+0x26c>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	2064      	movs	r0, #100	@ 0x64
 80036d6:	f001 f821 	bl	800471c <HAL_Delay>
 80036da:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <add_finger+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <add_finger+0x1fc>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2100      	movs	r1, #0
 80036e6:	480e      	ldr	r0, [pc, #56]	@ (8003720 <add_finger+0x258>)
 80036e8:	f7fc fe0e 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <add_finger+0x280>)
 80036ee:	480c      	ldr	r0, [pc, #48]	@ (8003720 <add_finger+0x258>)
 80036f0:	f7fc fe5d 	bl	80003ae <CLCD_I2C_WriteString>
        buzzer(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f000 fb03 	bl	8003d00 <buzzer>
                /***************** DA LUU XONG**************************/
        HAL_Delay(1500);
 80036fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80036fe:	f001 f80d 	bl	800471c <HAL_Delay>
        tmp=0xff;
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <add_finger+0x26c>)
 8003704:	22ff      	movs	r2, #255	@ 0xff
 8003706:	601a      	str	r2, [r3, #0]
        CLCD_I2C_Clear(&LCD1);
 8003708:	4805      	ldr	r0, [pc, #20]	@ (8003720 <add_finger+0x258>)
 800370a:	f7fc fe67 	bl	80003dc <CLCD_I2C_Clear>
        break;
 800370e:	bf00      	nop
    }
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	0800e50c 	.word	0x0800e50c
 800371c:	0800e514 	.word	0x0800e514
 8003720:	200003d8 	.word	0x200003d8
 8003724:	20000408 	.word	0x20000408
 8003728:	0800e524 	.word	0x0800e524
 800372c:	0800e53c 	.word	0x0800e53c
 8003730:	0800e550 	.word	0x0800e550
 8003734:	20000404 	.word	0x20000404
 8003738:	0800e56c 	.word	0x0800e56c
 800373c:	0800e580 	.word	0x0800e580
 8003740:	0800e598 	.word	0x0800e598
 8003744:	0800e5ac 	.word	0x0800e5ac
 8003748:	0800e5bc 	.word	0x0800e5bc

0800374c <read_finger>:
                        //----------end them van tay---------------
void read_finger()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8003750:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <read_finger+0xf0>)
 8003752:	22ff      	movs	r2, #255	@ 0xff
 8003754:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8003756:	f000 ffd7 	bl	8004708 <HAL_GetTick>
 800375a:	4603      	mov	r3, r0
 800375c:	4a38      	ldr	r2, [pc, #224]	@ (8003840 <read_finger+0xf4>)
 800375e:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8003760:	e013      	b.n	800378a <read_finger+0x3e>
		tmp=collect_finger();
 8003762:	f7fd f8c5 	bl	80008f0 <collect_finger>
 8003766:	4603      	mov	r3, r0
 8003768:	4a34      	ldr	r2, [pc, #208]	@ (800383c <read_finger+0xf0>)
 800376a:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 800376c:	f000 ffcc 	bl	8004708 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	4b33      	ldr	r3, [pc, #204]	@ (8003840 <read_finger+0xf4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800377c:	d305      	bcc.n	800378a <read_finger+0x3e>
		time_cho=HAL_GetTick();
 800377e:	f000 ffc3 	bl	8004708 <HAL_GetTick>
 8003782:	4603      	mov	r3, r0
 8003784:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <read_finger+0xf4>)
 8003786:	6013      	str	r3, [r2, #0]
		return;}
 8003788:	e056      	b.n	8003838 <read_finger+0xec>
	while(tmp!=0x00){
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <read_finger+0xf0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e7      	bne.n	8003762 <read_finger+0x16>

	}
	tmp=0xff;
 8003792:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <read_finger+0xf0>)
 8003794:	22ff      	movs	r2, #255	@ 0xff
 8003796:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8003798:	4b28      	ldr	r3, [pc, #160]	@ (800383c <read_finger+0xf0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <read_finger+0x60>
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fd f8d1 	bl	8000948 <img2tz>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4a24      	ldr	r2, [pc, #144]	@ (800383c <read_finger+0xf0>)
 80037aa:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 80037ac:	4b23      	ldr	r3, [pc, #140]	@ (800383c <read_finger+0xf0>)
 80037ae:	22ff      	movs	r2, #255	@ 0xff
 80037b0:	601a      	str	r2, [r3, #0]
	tmp=search();
 80037b2:	f7fd f99c 	bl	8000aee <search>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4a20      	ldr	r2, [pc, #128]	@ (800383c <read_finger+0xf0>)
 80037ba:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 80037bc:	4b1f      	ldr	r3, [pc, #124]	@ (800383c <read_finger+0xf0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d117      	bne.n	80037f4 <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <read_finger+0xf0>)
 80037c6:	22ff      	movs	r2, #255	@ 0xff
 80037c8:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 80037ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <read_finger+0xf8>)
 80037cc:	491e      	ldr	r1, [pc, #120]	@ (8003848 <read_finger+0xfc>)
 80037ce:	481f      	ldr	r0, [pc, #124]	@ (800384c <read_finger+0x100>)
 80037d0:	f7fc fe14 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess,"-id = %d  ", pID); // Use %d for integer
 80037d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <read_finger+0x104>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	491e      	ldr	r1, [pc, #120]	@ (8003854 <read_finger+0x108>)
 80037dc:	481e      	ldr	r0, [pc, #120]	@ (8003858 <read_finger+0x10c>)
 80037de:	f009 fded 	bl	800d3bc <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 80037e2:	491d      	ldr	r1, [pc, #116]	@ (8003858 <read_finger+0x10c>)
 80037e4:	4819      	ldr	r0, [pc, #100]	@ (800384c <read_finger+0x100>)
 80037e6:	f7fc fde2 	bl	80003ae <CLCD_I2C_WriteString>
		opendoor();
 80037ea:	f000 fa39 	bl	8003c60 <opendoor>
		CLCD_I2C_Clear(&LCD1);
 80037ee:	4817      	ldr	r0, [pc, #92]	@ (800384c <read_finger+0x100>)
 80037f0:	f7fc fdf4 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 80037f4:	4b11      	ldr	r3, [pc, #68]	@ (800383c <read_finger+0xf0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d11d      	bne.n	8003838 <read_finger+0xec>
	{
		tmp=0xff;
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <read_finger+0xf0>)
 80037fe:	22ff      	movs	r2, #255	@ 0xff
 8003800:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003802:	2201      	movs	r2, #1
 8003804:	2100      	movs	r1, #0
 8003806:	4811      	ldr	r0, [pc, #68]	@ (800384c <read_finger+0x100>)
 8003808:	f7fc fd7e 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 800380c:	4913      	ldr	r1, [pc, #76]	@ (800385c <read_finger+0x110>)
 800380e:	480f      	ldr	r0, [pc, #60]	@ (800384c <read_finger+0x100>)
 8003810:	f7fc fdcd 	bl	80003ae <CLCD_I2C_WriteString>
 8003814:	2005      	movs	r0, #5
 8003816:	f000 fa73 	bl	8003d00 <buzzer>
 800381a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800381e:	f000 ff7d 	bl	800471c <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003822:	490d      	ldr	r1, [pc, #52]	@ (8003858 <read_finger+0x10c>)
 8003824:	4809      	ldr	r0, [pc, #36]	@ (800384c <read_finger+0x100>)
 8003826:	f7fc fdc2 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 800382a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800382e:	f000 ff75 	bl	800471c <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003832:	4806      	ldr	r0, [pc, #24]	@ (800384c <read_finger+0x100>)
 8003834:	f7fc fdd2 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000404 	.word	0x20000404
 8003840:	200003f4 	.word	0x200003f4
 8003844:	0800e5d0 	.word	0x0800e5d0
 8003848:	0800dd58 	.word	0x0800dd58
 800384c:	200003d8 	.word	0x200003d8
 8003850:	20000218 	.word	0x20000218
 8003854:	0800e5d8 	.word	0x0800e5d8
 8003858:	200003f8 	.word	0x200003f8
 800385c:	0800e5e4 	.word	0x0800e5e4

08003860 <remove_id_finger>:
void remove_id_finger()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 800386a:	4a31      	ldr	r2, [pc, #196]	@ (8003930 <remove_id_finger+0xd0>)
 800386c:	4931      	ldr	r1, [pc, #196]	@ (8003934 <remove_id_finger+0xd4>)
 800386e:	4832      	ldr	r0, [pc, #200]	@ (8003938 <remove_id_finger+0xd8>)
 8003870:	f7fc fdc4 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003874:	200a      	movs	r0, #10
 8003876:	f7fc ff1b 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800387a:	4603      	mov	r3, r0
 800387c:	75bb      	strb	r3, [r7, #22]
        if (key >= '1' && key <= '9')
 800387e:	7dbb      	ldrb	r3, [r7, #22]
 8003880:	2b30      	cmp	r3, #48	@ 0x30
 8003882:	d9f7      	bls.n	8003874 <remove_id_finger+0x14>
 8003884:	7dbb      	ldrb	r3, [r7, #22]
 8003886:	2b39      	cmp	r3, #57	@ 0x39
 8003888:	d8f4      	bhi.n	8003874 <remove_id_finger+0x14>
        {
        	buzzer(1);
 800388a:	2001      	movs	r0, #1
 800388c:	f000 fa38 	bl	8003d00 <buzzer>
            id = key - '0';
 8003890:	7dbb      	ldrb	r3, [r7, #22]
 8003892:	3b30      	subs	r3, #48	@ 0x30
 8003894:	75fb      	strb	r3, [r7, #23]
            break;
 8003896:	bf00      	nop
        }
    }
    ID = id;
 8003898:	4a28      	ldr	r2, [pc, #160]	@ (800393c <remove_id_finger+0xdc>)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800389e:	2201      	movs	r2, #1
 80038a0:	2104      	movs	r1, #4
 80038a2:	4825      	ldr	r0, [pc, #148]	@ (8003938 <remove_id_finger+0xd8>)
 80038a4:	f7fc fd30 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <remove_id_finger+0xdc>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3330      	adds	r3, #48	@ 0x30
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	4821      	ldr	r0, [pc, #132]	@ (8003938 <remove_id_finger+0xd8>)
 80038b4:	f7fc fd6b 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 80038b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038bc:	f000 ff2e 	bl	800471c <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 80038c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <remove_id_finger+0xe0>)
 80038c2:	4920      	ldr	r1, [pc, #128]	@ (8003944 <remove_id_finger+0xe4>)
 80038c4:	481c      	ldr	r0, [pc, #112]	@ (8003938 <remove_id_finger+0xd8>)
 80038c6:	f7fc fd99 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_id_finger(ID);
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <remove_id_finger+0xdc>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd f974 	bl	8000bbc <delete_id_finger>
 80038d4:	4603      	mov	r3, r0
 80038d6:	757b      	strb	r3, [r7, #21]
    if (result == 0x00)
 80038d8:	7d7b      	ldrb	r3, [r7, #21]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <remove_id_finger+0x9a>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 80038de:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <remove_id_finger+0xe8>)
 80038e0:	491a      	ldr	r1, [pc, #104]	@ (800394c <remove_id_finger+0xec>)
 80038e2:	4815      	ldr	r0, [pc, #84]	@ (8003938 <remove_id_finger+0xd8>)
 80038e4:	f7fc fd8a 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f000 fa09 	bl	8003d00 <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <remove_id_finger+0xf0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 80038f4:	f000 f878 	bl	80039e8 <reset_fingerprint_module>
 80038f8:	e00e      	b.n	8003918 <remove_id_finger+0xb8>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80038fa:	7d7b      	ldrb	r3, [r7, #21]
 80038fc:	1d38      	adds	r0, r7, #4
 80038fe:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <remove_id_finger+0xf4>)
 8003900:	2110      	movs	r1, #16
 8003902:	f009 fd27 	bl	800d354 <sniprintf>
        buzzer(5);
 8003906:	2005      	movs	r0, #5
 8003908:	f000 f9fa 	bl	8003d00 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	461a      	mov	r2, r3
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <remove_id_finger+0xec>)
 8003912:	4809      	ldr	r0, [pc, #36]	@ (8003938 <remove_id_finger+0xd8>)
 8003914:	f7fc fd72 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003918:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800391c:	f000 fefe 	bl	800471c <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 8003920:	4805      	ldr	r0, [pc, #20]	@ (8003938 <remove_id_finger+0xd8>)
 8003922:	f7fc fd5b 	bl	80003dc <CLCD_I2C_Clear>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	0800e50c 	.word	0x0800e50c
 8003934:	0800e5f8 	.word	0x0800e5f8
 8003938:	200003d8 	.word	0x200003d8
 800393c:	20000408 	.word	0x20000408
 8003940:	0800dd44 	.word	0x0800dd44
 8003944:	0800e60c 	.word	0x0800e60c
 8003948:	0800e61c 	.word	0x0800e61c
 800394c:	0800e62c 	.word	0x0800e62c
 8003950:	20000409 	.word	0x20000409
 8003954:	0800e63c 	.word	0x0800e63c

08003958 <remove_all_finger>:

void remove_all_finger()
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <remove_all_finger+0x70>)
 8003960:	491a      	ldr	r1, [pc, #104]	@ (80039cc <remove_all_finger+0x74>)
 8003962:	481b      	ldr	r0, [pc, #108]	@ (80039d0 <remove_all_finger+0x78>)
 8003964:	f7fc fd4a 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = empty();
 8003968:	f7fd f8fc 	bl	8000b64 <empty>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <remove_all_finger+0x3a>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 8003976:	4a17      	ldr	r2, [pc, #92]	@ (80039d4 <remove_all_finger+0x7c>)
 8003978:	4917      	ldr	r1, [pc, #92]	@ (80039d8 <remove_all_finger+0x80>)
 800397a:	4815      	ldr	r0, [pc, #84]	@ (80039d0 <remove_all_finger+0x78>)
 800397c:	f7fc fd3e 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003980:	2001      	movs	r0, #1
 8003982:	f000 f9bd 	bl	8003d00 <buzzer>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 8003986:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <remove_all_finger+0x84>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 800398c:	f000 f82c 	bl	80039e8 <reset_fingerprint_module>
 8003990:	e00e      	b.n	80039b0 <remove_all_finger+0x58>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	1d38      	adds	r0, r7, #4
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <remove_all_finger+0x88>)
 8003998:	2110      	movs	r1, #16
 800399a:	f009 fcdb 	bl	800d354 <sniprintf>
        buzzer(5);
 800399e:	2005      	movs	r0, #5
 80039a0:	f000 f9ae 	bl	8003d00 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	461a      	mov	r2, r3
 80039a8:	490e      	ldr	r1, [pc, #56]	@ (80039e4 <remove_all_finger+0x8c>)
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <remove_all_finger+0x78>)
 80039ac:	f7fc fd26 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 80039b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039b4:	f000 feb2 	bl	800471c <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80039b8:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <remove_all_finger+0x78>)
 80039ba:	f7fc fd0f 	bl	80003dc <CLCD_I2C_Clear>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0800e650 	.word	0x0800e650
 80039cc:	0800e660 	.word	0x0800e660
 80039d0:	200003d8 	.word	0x200003d8
 80039d4:	0800e670 	.word	0x0800e670
 80039d8:	0800e680 	.word	0x0800e680
 80039dc:	20000409 	.word	0x20000409
 80039e0:	0800e63c 	.word	0x0800e63c
 80039e4:	0800e62c 	.word	0x0800e62c

080039e8 <reset_fingerprint_module>:

void reset_fingerprint_module()
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
    // This can be a hardware reset or a software reset command
    // Example:
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_RESET);
    // HAL_Delay(100);
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_SET);
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <startface>:
void startface(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <startface+0x5c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	2b59      	cmp	r3, #89	@ 0x59
 8003a00:	d10e      	bne.n	8003a20 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 8003a02:	4814      	ldr	r0, [pc, #80]	@ (8003a54 <startface+0x60>)
 8003a04:	f7fc fcea 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4811      	ldr	r0, [pc, #68]	@ (8003a54 <startface+0x60>)
 8003a0e:	f7fc fc7b 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8003a12:	4911      	ldr	r1, [pc, #68]	@ (8003a58 <startface+0x64>)
 8003a14:	480f      	ldr	r0, [pc, #60]	@ (8003a54 <startface+0x60>)
 8003a16:	f7fc fcca 	bl	80003ae <CLCD_I2C_WriteString>
        opendoor();
 8003a1a:	f000 f921 	bl	8003c60 <opendoor>
 8003a1e:	e010      	b.n	8003a42 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <startface+0x5c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a28:	d10b      	bne.n	8003a42 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <startface+0x68>)
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <startface+0x6c>)
 8003a2e:	4809      	ldr	r0, [pc, #36]	@ (8003a54 <startface+0x60>)
 8003a30:	f7fc fce4 	bl	80003fc <CLCD_I2C_Display>
		buzzer(5);
 8003a34:	2005      	movs	r0, #5
 8003a36:	f000 f963 	bl	8003d00 <buzzer>
        HAL_Delay(2000);
 8003a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a3e:	f000 fe6d 	bl	800471c <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	2100      	movs	r1, #0
 8003a46:	4802      	ldr	r0, [pc, #8]	@ (8003a50 <startface+0x5c>)
 8003a48:	f009 fcd8 	bl	800d3fc <memset>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000350 	.word	0x20000350
 8003a54:	200003d8 	.word	0x200003d8
 8003a58:	0800dd58 	.word	0x0800dd58
 8003a5c:	0800e690 	.word	0x0800e690
 8003a60:	0800e6a0 	.word	0x0800e6a0

08003a64 <enter_password>:

void enter_password(char *password) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e01c      	b.n	8003aac <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 8003a72:	200a      	movs	r0, #10
 8003a74:	f7fc fe1c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f7      	beq.n	8003a72 <enter_password+0xe>
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a86:	d9f4      	bls.n	8003a72 <enter_password+0xe>
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	2b39      	cmp	r3, #57	@ 0x39
 8003a8c:	d8f1      	bhi.n	8003a72 <enter_password+0xe>
        buzzer(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f936 	bl	8003d00 <buzzer>
        password[i] = key;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	7afa      	ldrb	r2, [r7, #11]
 8003a9c:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003a9e:	212a      	movs	r1, #42	@ 0x2a
 8003aa0:	4808      	ldr	r0, [pc, #32]	@ (8003ac4 <enter_password+0x60>)
 8003aa2:	f7fc fc74 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	dddf      	ble.n	8003a72 <enter_password+0xe>
    }
    password[6] = '\0';
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3306      	adds	r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200003d8 	.word	0x200003d8

08003ac8 <change_password>:

void change_password(void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
    char old_password[7] = {0};
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	460a      	mov	r2, r1
 8003ade:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER OLD PASS", "     ");
 8003ae0:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <change_password+0xa4>)
 8003ae2:	4923      	ldr	r1, [pc, #140]	@ (8003b70 <change_password+0xa8>)
 8003ae4:	4823      	ldr	r0, [pc, #140]	@ (8003b74 <change_password+0xac>)
 8003ae6:	f7fc fc89 	bl	80003fc <CLCD_I2C_Display>
    enter_password(old_password);
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ffb8 	bl	8003a64 <enter_password>
    if (check_password(old_password)) {
 8003af4:	f107 0308 	add.w	r3, r7, #8
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f849 	bl	8003b90 <check_password>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <change_password+0x82>
        char new_password[7] = {0};
 8003b04:	2300      	movs	r3, #0
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	460a      	mov	r2, r1
 8003b12:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 8003b14:	4a15      	ldr	r2, [pc, #84]	@ (8003b6c <change_password+0xa4>)
 8003b16:	4918      	ldr	r1, [pc, #96]	@ (8003b78 <change_password+0xb0>)
 8003b18:	4816      	ldr	r0, [pc, #88]	@ (8003b74 <change_password+0xac>)
 8003b1a:	f7fc fc6f 	bl	80003fc <CLCD_I2C_Display>
        enter_password(new_password);
 8003b1e:	463b      	mov	r3, r7
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff9f 	bl	8003a64 <enter_password>
        // Erase the flash memory at the password address before writing the new password
        Flash_Erase(StartAddressPassword);
 8003b26:	4815      	ldr	r0, [pc, #84]	@ (8003b7c <change_password+0xb4>)
 8003b28:	f7fd f88a 	bl	8000c40 <Flash_Erase>
        Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	2206      	movs	r2, #6
 8003b30:	4619      	mov	r1, r3
 8003b32:	4812      	ldr	r0, [pc, #72]	@ (8003b7c <change_password+0xb4>)
 8003b34:	f7fd f8b8 	bl	8000ca8 <Flash_Write_Array>
        CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <change_password+0xb8>)
 8003b3a:	4912      	ldr	r1, [pc, #72]	@ (8003b84 <change_password+0xbc>)
 8003b3c:	480d      	ldr	r0, [pc, #52]	@ (8003b74 <change_password+0xac>)
 8003b3e:	f7fc fc5d 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003b42:	2001      	movs	r0, #1
 8003b44:	f000 f8dc 	bl	8003d00 <buzzer>
 8003b48:	e007      	b.n	8003b5a <change_password+0x92>
    } else {
        CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8003b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b88 <change_password+0xc0>)
 8003b4c:	490f      	ldr	r1, [pc, #60]	@ (8003b8c <change_password+0xc4>)
 8003b4e:	4809      	ldr	r0, [pc, #36]	@ (8003b74 <change_password+0xac>)
 8003b50:	f7fc fc54 	bl	80003fc <CLCD_I2C_Display>
        buzzer(5);
 8003b54:	2005      	movs	r0, #5
 8003b56:	f000 f8d3 	bl	8003d00 <buzzer>
    }
    HAL_Delay(2000);
 8003b5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b5e:	f000 fddd 	bl	800471c <HAL_Delay>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0800e6b0 	.word	0x0800e6b0
 8003b70:	0800e6b8 	.word	0x0800e6b8
 8003b74:	200003d8 	.word	0x200003d8
 8003b78:	0800e6c8 	.word	0x0800e6c8
 8003b7c:	0800f400 	.word	0x0800f400
 8003b80:	0800e670 	.word	0x0800e670
 8003b84:	0800e6d8 	.word	0x0800e6d8
 8003b88:	0800dd44 	.word	0x0800dd44
 8003b8c:	0800dd64 	.word	0x0800dd64

08003b90 <check_password>:

uint8_t check_password(char *password) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	2206      	movs	r2, #6
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	480a      	ldr	r0, [pc, #40]	@ (8003bdc <check_password+0x4c>)
 8003bb4:	f7fd f8c0 	bl	8000d38 <Flash_Read_Array>
    stored_password[6] = '\0';
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 8003bbc:	f107 0308 	add.w	r3, r7, #8
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc fac2 	bl	800014c <strcmp>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	0800f400 	.word	0x0800f400

08003be0 <set_default_password>:

void set_default_password(void) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 8003be6:	4a16      	ldr	r2, [pc, #88]	@ (8003c40 <set_default_password+0x60>)
 8003be8:	463b      	mov	r3, r7
 8003bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bee:	6018      	str	r0, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003bf4:	4813      	ldr	r0, [pc, #76]	@ (8003c44 <set_default_password+0x64>)
 8003bf6:	f7fd f823 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4810      	ldr	r0, [pc, #64]	@ (8003c44 <set_default_password+0x64>)
 8003c02:	f7fd f851 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 8003c06:	4a10      	ldr	r2, [pc, #64]	@ (8003c48 <set_default_password+0x68>)
 8003c08:	4910      	ldr	r1, [pc, #64]	@ (8003c4c <set_default_password+0x6c>)
 8003c0a:	4811      	ldr	r0, [pc, #68]	@ (8003c50 <set_default_password+0x70>)
 8003c0c:	f7fc fbf6 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f000 f875 	bl	8003d00 <buzzer>
    HAL_Delay(1500);
 8003c16:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003c1a:	f000 fd7f 	bl	800471c <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c54 <set_default_password+0x74>)
 8003c20:	490d      	ldr	r1, [pc, #52]	@ (8003c58 <set_default_password+0x78>)
 8003c22:	480b      	ldr	r0, [pc, #44]	@ (8003c50 <set_default_password+0x70>)
 8003c24:	f7fc fbea 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c2c:	f000 fd76 	bl	800471c <HAL_Delay>
    exitmenu=0;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <set_default_password+0x7c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	0800e718 	.word	0x0800e718
 8003c44:	0800f400 	.word	0x0800f400
 8003c48:	0800e670 	.word	0x0800e670
 8003c4c:	0800e6ec 	.word	0x0800e6ec
 8003c50:	200003d8 	.word	0x200003d8
 8003c54:	0800e6fc 	.word	0x0800e6fc
 8003c58:	0800e708 	.word	0x0800e708
 8003c5c:	20000020 	.word	0x20000020

08003c60 <opendoor>:

void opendoor(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
    buzzer(1);
 8003c66:	2001      	movs	r0, #1
 8003c68:	f000 f84a 	bl	8003d00 <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c72:	481e      	ldr	r0, [pc, #120]	@ (8003cec <opendoor+0x8c>)
 8003c74:	f001 fa1f 	bl	80050b6 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 8003c78:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003c7c:	f000 fd4e 	bl	800471c <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 8003c80:	f000 fd42 	bl	8004708 <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003c86:	e01b      	b.n	8003cc0 <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 8003c88:	f000 fd3e 	bl	8004708 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <opendoor+0x90>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <opendoor+0x94>)
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	f009 fb54 	bl	800d354 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 8003cac:	463b      	mov	r3, r7
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4911      	ldr	r1, [pc, #68]	@ (8003cf8 <opendoor+0x98>)
 8003cb2:	4812      	ldr	r0, [pc, #72]	@ (8003cfc <opendoor+0x9c>)
 8003cb4:	f7fc fba2 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cbc:	f000 fd2e 	bl	800471c <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003cc0:	f000 fd22 	bl	8004708 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d9da      	bls.n	8003c88 <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003cd8:	4804      	ldr	r0, [pc, #16]	@ (8003cec <opendoor+0x8c>)
 8003cda:	f001 f9ec 	bl	80050b6 <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 8003cde:	4807      	ldr	r0, [pc, #28]	@ (8003cfc <opendoor+0x9c>)
 8003ce0:	f7fc fb7c 	bl	80003dc <CLCD_I2C_Clear>
}
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40010800 	.word	0x40010800
 8003cf0:	10624dd3 	.word	0x10624dd3
 8003cf4:	0800e720 	.word	0x0800e720
 8003cf8:	0800e72c 	.word	0x0800e72c
 8003cfc:	200003d8 	.word	0x200003d8

08003d00 <buzzer>:
void buzzer( uint8_t countbeep)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 8003d0a:	e011      	b.n	8003d30 <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d12:	480c      	ldr	r0, [pc, #48]	@ (8003d44 <buzzer+0x44>)
 8003d14:	f001 f9cf 	bl	80050b6 <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8003d18:	2078      	movs	r0, #120	@ 0x78
 8003d1a:	f000 fcff 	bl	800471c <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d24:	4807      	ldr	r0, [pc, #28]	@ (8003d44 <buzzer+0x44>)
 8003d26:	f001 f9c6 	bl	80050b6 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003d2a:	2032      	movs	r0, #50	@ 0x32
 8003d2c:	f000 fcf6 	bl	800471c <HAL_Delay>
	while(countbeep--)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	71fa      	strb	r2, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e8      	bne.n	8003d0c <buzzer+0xc>
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40010800 	.word	0x40010800

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
}
 8003d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <Error_Handler+0x8>

08003d54 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003d62:	bf00      	nop
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <TM_SPI_Send+0x4c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d1f8      	bne.n	8003d64 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003d72:	f107 0208 	add.w	r2, r7, #8
 8003d76:	f107 010c 	add.w	r1, r7, #12
 8003d7a:	230a      	movs	r3, #10
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <TM_SPI_Send+0x4c>)
 8003d82:	f003 feff 	bl	8007b84 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003d86:	bf00      	nop
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <TM_SPI_Send+0x4c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d0f8      	beq.n	8003d88 <TM_SPI_Send+0x34>
	return data_re[0];
 8003d96:	7a3b      	ldrb	r3, [r7, #8]

}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000270 	.word	0x20000270

08003da4 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003da8:	f000 f8d5 	bl	8003f56 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003dac:	218d      	movs	r1, #141	@ 0x8d
 8003dae:	202a      	movs	r0, #42	@ 0x2a
 8003db0:	f000 f836 	bl	8003e20 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003db4:	213e      	movs	r1, #62	@ 0x3e
 8003db6:	202b      	movs	r0, #43	@ 0x2b
 8003db8:	f000 f832 	bl	8003e20 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003dbc:	211e      	movs	r1, #30
 8003dbe:	202d      	movs	r0, #45	@ 0x2d
 8003dc0:	f000 f82e 	bl	8003e20 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	202c      	movs	r0, #44	@ 0x2c
 8003dc8:	f000 f82a 	bl	8003e20 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003dcc:	2170      	movs	r1, #112	@ 0x70
 8003dce:	2026      	movs	r0, #38	@ 0x26
 8003dd0:	f000 f826 	bl	8003e20 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003dd4:	2140      	movs	r1, #64	@ 0x40
 8003dd6:	2015      	movs	r0, #21
 8003dd8:	f000 f822 	bl	8003e20 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003ddc:	213d      	movs	r1, #61	@ 0x3d
 8003dde:	2011      	movs	r0, #17
 8003de0:	f000 f81e 	bl	8003e20 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003de4:	f000 f8a2 	bl	8003f2c <TM_MFRC522_AntennaOn>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}

08003dec <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	2026      	movs	r0, #38	@ 0x26
 8003df8:	f000 f8b5 	bl	8003f66 <TM_MFRC522_Request>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9a1 	bl	800414e <TM_MFRC522_Anticoll>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003e10:	f000 fa23 	bl	800425a <TM_MFRC522_Halt>
	return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	460a      	mov	r2, r1
 8003e2a:	71fb      	strb	r3, [r7, #7]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003e30:	2200      	movs	r2, #0
 8003e32:	2110      	movs	r1, #16
 8003e34:	480c      	ldr	r0, [pc, #48]	@ (8003e68 <TM_MFRC522_WriteRegister+0x48>)
 8003e36:	f001 f93e 	bl	80050b6 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff84 	bl	8003d54 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003e4c:	79bb      	ldrb	r3, [r7, #6]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff80 	bl	8003d54 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003e54:	2201      	movs	r2, #1
 8003e56:	2110      	movs	r1, #16
 8003e58:	4803      	ldr	r0, [pc, #12]	@ (8003e68 <TM_MFRC522_WriteRegister+0x48>)
 8003e5a:	f001 f92c 	bl	80050b6 <HAL_GPIO_WritePin>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40010800 	.word	0x40010800

08003e6c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003e76:	2200      	movs	r2, #0
 8003e78:	2110      	movs	r1, #16
 8003e7a:	480f      	ldr	r0, [pc, #60]	@ (8003eb8 <TM_MFRC522_ReadRegister+0x4c>)
 8003e7c:	f001 f91b 	bl	80050b6 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7ff ff5a 	bl	8003d54 <TM_SPI_Send>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2110      	movs	r1, #16
 8003ea8:	4803      	ldr	r0, [pc, #12]	@ (8003eb8 <TM_MFRC522_ReadRegister+0x4c>)
 8003eaa:	f001 f904 	bl	80050b6 <HAL_GPIO_WritePin>

	return val;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40010800 	.word	0x40010800

08003ebc <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	71fb      	strb	r3, [r7, #7]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ffcc 	bl	8003e6c <TM_MFRC522_ReadRegister>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79bb      	ldrb	r3, [r7, #6]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff9c 	bl	8003e20 <TM_MFRC522_WriteRegister>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460a      	mov	r2, r1
 8003efa:	71fb      	strb	r3, [r7, #7]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ffb2 	bl	8003e6c <TM_MFRC522_ReadRegister>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b25a      	sxtb	r2, r3
 8003f0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	4013      	ands	r3, r2
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff7e 	bl	8003e20 <TM_MFRC522_WriteRegister>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003f32:	2014      	movs	r0, #20
 8003f34:	f7ff ff9a 	bl	8003e6c <TM_MFRC522_ReadRegister>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003f46:	2103      	movs	r1, #3
 8003f48:	2014      	movs	r0, #20
 8003f4a:	f7ff ffb7 	bl	8003ebc <TM_MFRC522_SetBitMask>
	}
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7ff ff5f 	bl	8003e20 <TM_MFRC522_WriteRegister>
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	6039      	str	r1, [r7, #0]
 8003f70:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003f72:	2107      	movs	r1, #7
 8003f74:	200d      	movs	r0, #13
 8003f76:	f7ff ff53 	bl	8003e20 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	79fa      	ldrb	r2, [r7, #7]
 8003f7e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	200c      	movs	r0, #12
 8003f8e:	f000 f80f 	bl	8003fb0 <TM_MFRC522_ToCard>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <TM_MFRC522_Request+0x3c>
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d001      	beq.n	8003fa6 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d006      	beq.n	8003fe2 <TM_MFRC522_ToCard+0x32>
 8003fd4:	2b0e      	cmp	r3, #14
 8003fd6:	d109      	bne.n	8003fec <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003fd8:	2312      	movs	r3, #18
 8003fda:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003fdc:	2310      	movs	r3, #16
 8003fde:	757b      	strb	r3, [r7, #21]
			break;
 8003fe0:	e005      	b.n	8003fee <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003fe2:	2377      	movs	r3, #119	@ 0x77
 8003fe4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003fe6:	2330      	movs	r3, #48	@ 0x30
 8003fe8:	757b      	strb	r3, [r7, #21]
			break;
 8003fea:	e000      	b.n	8003fee <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003fec:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003fee:	7dbb      	ldrb	r3, [r7, #22]
 8003ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f7ff ff11 	bl	8003e20 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	2004      	movs	r0, #4
 8004002:	f7ff ff75 	bl	8003ef0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8004006:	2180      	movs	r1, #128	@ 0x80
 8004008:	200a      	movs	r0, #10
 800400a:	f7ff ff57 	bl	8003ebc <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800400e:	2100      	movs	r1, #0
 8004010:	2001      	movs	r0, #1
 8004012:	f7ff ff05 	bl	8003e20 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8004016:	2300      	movs	r3, #0
 8004018:	827b      	strh	r3, [r7, #18]
 800401a:	e00a      	b.n	8004032 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800401c:	8a7b      	ldrh	r3, [r7, #18]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4413      	add	r3, r2
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	2009      	movs	r0, #9
 8004028:	f7ff fefa 	bl	8003e20 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 800402c:	8a7b      	ldrh	r3, [r7, #18]
 800402e:	3301      	adds	r3, #1
 8004030:	827b      	strh	r3, [r7, #18]
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	b29b      	uxth	r3, r3
 8004036:	8a7a      	ldrh	r2, [r7, #18]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3ef      	bcc.n	800401c <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	4619      	mov	r1, r3
 8004040:	2001      	movs	r0, #1
 8004042:	f7ff feed 	bl	8003e20 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d103      	bne.n	8004054 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 800404c:	2180      	movs	r1, #128	@ 0x80
 800404e:	200d      	movs	r0, #13
 8004050:	f7ff ff34 	bl	8003ebc <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8004054:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004058:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800405a:	2004      	movs	r0, #4
 800405c:	f7ff ff06 	bl	8003e6c <TM_MFRC522_ReadRegister>
 8004060:	4603      	mov	r3, r0
 8004062:	753b      	strb	r3, [r7, #20]
		i--;
 8004064:	8a7b      	ldrh	r3, [r7, #18]
 8004066:	3b01      	subs	r3, #1
 8004068:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <TM_MFRC522_ToCard+0xd6>
 8004070:	7d3b      	ldrb	r3, [r7, #20]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <TM_MFRC522_ToCard+0xd6>
 800407a:	7d3a      	ldrb	r2, [r7, #20]
 800407c:	7d7b      	ldrb	r3, [r7, #21]
 800407e:	4013      	ands	r3, r2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0e9      	beq.n	800405a <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	200d      	movs	r0, #13
 800408a:	f7ff ff31 	bl	8003ef0 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800408e:	8a7b      	ldrh	r3, [r7, #18]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d057      	beq.n	8004144 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8004094:	2006      	movs	r0, #6
 8004096:	f7ff fee9 	bl	8003e6c <TM_MFRC522_ReadRegister>
 800409a:	4603      	mov	r3, r0
 800409c:	f003 031b 	and.w	r3, r3, #27
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d14d      	bne.n	8004140 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 80040a8:	7d3a      	ldrb	r2, [r7, #20]
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d140      	bne.n	8004144 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80040c2:	200a      	movs	r0, #10
 80040c4:	f7ff fed2 	bl	8003e6c <TM_MFRC522_ReadRegister>
 80040c8:	4603      	mov	r3, r0
 80040ca:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80040cc:	200c      	movs	r0, #12
 80040ce:	f7ff fecd 	bl	8003e6c <TM_MFRC522_ReadRegister>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80040da:	7c7b      	ldrb	r3, [r7, #17]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80040e0:	7d3b      	ldrb	r3, [r7, #20]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	7c7b      	ldrb	r3, [r7, #17]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e005      	b.n	8004104 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80040f8:	7d3b      	ldrb	r3, [r7, #20]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8004104:	7d3b      	ldrb	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <TM_MFRC522_ToCard+0x15e>
					n = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 800410e:	7d3b      	ldrb	r3, [r7, #20]
 8004110:	2b10      	cmp	r3, #16
 8004112:	d901      	bls.n	8004118 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8004114:	2310      	movs	r3, #16
 8004116:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8004118:	2300      	movs	r3, #0
 800411a:	827b      	strh	r3, [r7, #18]
 800411c:	e00a      	b.n	8004134 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 800411e:	8a7b      	ldrh	r3, [r7, #18]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	18d4      	adds	r4, r2, r3
 8004124:	2009      	movs	r0, #9
 8004126:	f7ff fea1 	bl	8003e6c <TM_MFRC522_ReadRegister>
 800412a:	4603      	mov	r3, r0
 800412c:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 800412e:	8a7b      	ldrh	r3, [r7, #18]
 8004130:	3301      	adds	r3, #1
 8004132:	827b      	strh	r3, [r7, #18]
 8004134:	7d3b      	ldrb	r3, [r7, #20]
 8004136:	b29b      	uxth	r3, r3
 8004138:	8a7a      	ldrh	r2, [r7, #18]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ef      	bcc.n	800411e <TM_MFRC522_ToCard+0x16e>
 800413e:	e001      	b.n	8004144 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8004140:	2302      	movs	r3, #2
 8004142:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}

0800414e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af02      	add	r7, sp, #8
 8004154:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800415a:	2100      	movs	r1, #0
 800415c:	200d      	movs	r0, #13
 800415e:	f7ff fe5f 	bl	8003e20 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2293      	movs	r2, #147	@ 0x93
 8004166:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3301      	adds	r3, #1
 800416c:	2220      	movs	r2, #32
 800416e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004170:	f107 030a 	add.w	r3, r7, #10
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	200c      	movs	r0, #12
 800417e:	f7ff ff17 	bl	8003fb0 <TM_MFRC522_ToCard>
 8004182:	4603      	mov	r3, r0
 8004184:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d118      	bne.n	80041be <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 800418c:	2300      	movs	r3, #0
 800418e:	73bb      	strb	r3, [r7, #14]
 8004190:	e009      	b.n	80041a6 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	4053      	eors	r3, r2
 800419e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80041a0:	7bbb      	ldrb	r3, [r7, #14]
 80041a2:	3301      	adds	r3, #1
 80041a4:	73bb      	strb	r3, [r7, #14]
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d9f2      	bls.n	8004192 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	7b7a      	ldrb	r2, [r7, #13]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d001      	beq.n	80041be <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80041ba:	2302      	movs	r3, #2
 80041bc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	460b      	mov	r3, r1
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80041d6:	2104      	movs	r1, #4
 80041d8:	2005      	movs	r0, #5
 80041da:	f7ff fe89 	bl	8003ef0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80041de:	2180      	movs	r1, #128	@ 0x80
 80041e0:	200a      	movs	r0, #10
 80041e2:	f7ff fe6b 	bl	8003ebc <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
 80041ea:	e00a      	b.n	8004202 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	2009      	movs	r0, #9
 80041f8:	f7ff fe12 	bl	8003e20 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	3301      	adds	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
 8004202:	7dfa      	ldrb	r2, [r7, #23]
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	429a      	cmp	r2, r3
 8004208:	d3f0      	bcc.n	80041ec <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800420a:	2103      	movs	r1, #3
 800420c:	2001      	movs	r0, #1
 800420e:	f7ff fe07 	bl	8003e20 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8004212:	23ff      	movs	r3, #255	@ 0xff
 8004214:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8004216:	2005      	movs	r0, #5
 8004218:	f7ff fe28 	bl	8003e6c <TM_MFRC522_ReadRegister>
 800421c:	4603      	mov	r3, r0
 800421e:	75bb      	strb	r3, [r7, #22]
		i--;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	3b01      	subs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <TM_MFRC522_CalculateCRC+0x6e>
 800422c:	7dbb      	ldrb	r3, [r7, #22]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ef      	beq.n	8004216 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8004236:	2022      	movs	r0, #34	@ 0x22
 8004238:	f7ff fe18 	bl	8003e6c <TM_MFRC522_ReadRegister>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	1c5c      	adds	r4, r3, #1
 8004248:	2021      	movs	r0, #33	@ 0x21
 800424a:	f7ff fe0f 	bl	8003e6c <TM_MFRC522_ReadRegister>
 800424e:	4603      	mov	r3, r0
 8004250:	7023      	strb	r3, [r4, #0]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd90      	pop	{r4, r7, pc}

0800425a <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8004260:	2350      	movs	r3, #80	@ 0x50
 8004262:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8004268:	463b      	mov	r3, r7
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	463b      	mov	r3, r7
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ffa9 	bl	80041c8 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8004276:	463a      	mov	r2, r7
 8004278:	4639      	mov	r1, r7
 800427a:	1dbb      	adds	r3, r7, #6
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	2204      	movs	r2, #4
 8004282:	200c      	movs	r0, #12
 8004284:	f7ff fe94 	bl	8003fb0 <TM_MFRC522_ToCard>



}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_MspInit+0x5c>)
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <HAL_MspInit+0x5c>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6193      	str	r3, [r2, #24]
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_MspInit+0x5c>)
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <HAL_MspInit+0x5c>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4a0e      	ldr	r2, [pc, #56]	@ (80042ec <HAL_MspInit+0x5c>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	61d3      	str	r3, [r2, #28]
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <HAL_MspInit+0x5c>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_MspInit+0x60>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <HAL_MspInit+0x60>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010000 	.word	0x40010000

080042f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fc:	f107 0310 	add.w	r3, r7, #16
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <HAL_I2C_MspInit+0x74>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d124      	bne.n	800435e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004314:	4b15      	ldr	r3, [pc, #84]	@ (800436c <HAL_I2C_MspInit+0x78>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a14      	ldr	r2, [pc, #80]	@ (800436c <HAL_I2C_MspInit+0x78>)
 800431a:	f043 0308 	orr.w	r3, r3, #8
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_I2C_MspInit+0x78>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800432c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004332:	2312      	movs	r3, #18
 8004334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004336:	2303      	movs	r3, #3
 8004338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	4619      	mov	r1, r3
 8004340:	480b      	ldr	r0, [pc, #44]	@ (8004370 <HAL_I2C_MspInit+0x7c>)
 8004342:	f000 fd1d 	bl	8004d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_I2C_MspInit+0x78>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <HAL_I2C_MspInit+0x78>)
 800434c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004350:	61d3      	str	r3, [r2, #28]
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_I2C_MspInit+0x78>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800435e:	bf00      	nop
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40005800 	.word	0x40005800
 800436c:	40021000 	.word	0x40021000
 8004370:	40010c00 	.word	0x40010c00

08004374 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <HAL_SPI_MspInit+0x88>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d12f      	bne.n	80043f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4a19      	ldr	r2, [pc, #100]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 800439a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800439e:	6193      	str	r3, [r2, #24]
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <HAL_SPI_MspInit+0x8c>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80043c4:	23a0      	movs	r3, #160	@ 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043cc:	2303      	movs	r3, #3
 80043ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	4619      	mov	r1, r3
 80043d6:	480b      	ldr	r0, [pc, #44]	@ (8004404 <HAL_SPI_MspInit+0x90>)
 80043d8:	f000 fcd2 	bl	8004d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043dc:	2340      	movs	r3, #64	@ 0x40
 80043de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	4619      	mov	r1, r3
 80043ee:	4805      	ldr	r0, [pc, #20]	@ (8004404 <HAL_SPI_MspInit+0x90>)
 80043f0:	f000 fcc6 	bl	8004d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043f4:	bf00      	nop
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40013000 	.word	0x40013000
 8004400:	40021000 	.word	0x40021000
 8004404:	40010800 	.word	0x40010800

08004408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d113      	bne.n	8004442 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_TIM_Base_MspInit+0x44>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4a0b      	ldr	r2, [pc, #44]	@ (800444c <HAL_TIM_Base_MspInit+0x44>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	61d3      	str	r3, [r2, #28]
 8004426:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_TIM_Base_MspInit+0x44>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	201c      	movs	r0, #28
 8004438:	f000 fa6b 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800443c:	201c      	movs	r0, #28
 800443e:	f000 fa84 	bl	800494a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a22      	ldr	r2, [pc, #136]	@ (80044f4 <HAL_UART_MspInit+0xa4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d13d      	bne.n	80044ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4a20      	ldr	r2, [pc, #128]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 8004476:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800447a:	6193      	str	r3, [r2, #24]
 800447c:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	4a1a      	ldr	r2, [pc, #104]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 800448e:	f043 0308 	orr.w	r3, r3, #8
 8004492:	6193      	str	r3, [r2, #24]
 8004494:	4b18      	ldr	r3, [pc, #96]	@ (80044f8 <HAL_UART_MspInit+0xa8>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044a0:	2340      	movs	r3, #64	@ 0x40
 80044a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a4:	2302      	movs	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	4619      	mov	r1, r3
 80044b2:	4812      	ldr	r0, [pc, #72]	@ (80044fc <HAL_UART_MspInit+0xac>)
 80044b4:	f000 fc64 	bl	8004d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4619      	mov	r1, r3
 80044ca:	480c      	ldr	r0, [pc, #48]	@ (80044fc <HAL_UART_MspInit+0xac>)
 80044cc:	f000 fc58 	bl	8004d80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_UART_MspInit+0xb0>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	4a06      	ldr	r2, [pc, #24]	@ (8004500 <HAL_UART_MspInit+0xb0>)
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	@ 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40010c00 	.word	0x40010c00
 8004500:	40010000 	.word	0x40010000

08004504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <NMI_Handler+0x4>

0800450c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <HardFault_Handler+0x4>

08004514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <MemManage_Handler+0x4>

0800451c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <BusFault_Handler+0x4>

08004524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <UsageFault_Handler+0x4>

0800452c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004554:	f000 f8c6 	bl	80046e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}

0800455c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004562:	f001 fb5e 	bl	8005c22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200010d0 	.word	0x200010d0

08004570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004574:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004578:	f000 fdb6 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}

08004580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004584:	4802      	ldr	r0, [pc, #8]	@ (8004590 <TIM2_IRQHandler+0x10>)
 8004586:	f003 fde7 	bl	8008158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200002c8 	.word	0x200002c8

08004594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800459c:	4a14      	ldr	r2, [pc, #80]	@ (80045f0 <_sbrk+0x5c>)
 800459e:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <_sbrk+0x60>)
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <_sbrk+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b0:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <_sbrk+0x64>)
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <_sbrk+0x68>)
 80045b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <_sbrk+0x64>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d207      	bcs.n	80045d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045c4:	f008 ff22 	bl	800d40c <__errno>
 80045c8:	4603      	mov	r3, r0
 80045ca:	220c      	movs	r2, #12
 80045cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e009      	b.n	80045e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <_sbrk+0x64>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	4a05      	ldr	r2, [pc, #20]	@ (80045f8 <_sbrk+0x64>)
 80045e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20005000 	.word	0x20005000
 80045f4:	00000400 	.word	0x00000400
 80045f8:	2000040c 	.word	0x2000040c
 80045fc:	20001728 	.word	0x20001728

08004600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800460c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800460e:	e003      	b.n	8004618 <LoopCopyDataInit>

08004610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004616:	3104      	adds	r1, #4

08004618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004618:	480a      	ldr	r0, [pc, #40]	@ (8004644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800461c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800461e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004620:	d3f6      	bcc.n	8004610 <CopyDataInit>
  ldr r2, =_sbss
 8004622:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004624:	e002      	b.n	800462c <LoopFillZerobss>

08004626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004628:	f842 3b04 	str.w	r3, [r2], #4

0800462c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800462c:	4b08      	ldr	r3, [pc, #32]	@ (8004650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800462e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004630:	d3f9      	bcc.n	8004626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004632:	f7ff ffe5 	bl	8004600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004636:	f008 feef 	bl	800d418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800463a:	f7fc fbdd 	bl	8000df8 <main>
  bx lr
 800463e:	4770      	bx	lr
  ldr r3, =_sidata
 8004640:	0800e804 	.word	0x0800e804
  ldr r0, =_sdata
 8004644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004648:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 800464c:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8004650:	20001724 	.word	0x20001724

08004654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004654:	e7fe      	b.n	8004654 <ADC1_2_IRQHandler>
	...

08004658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800465c:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <HAL_Init+0x28>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a07      	ldr	r2, [pc, #28]	@ (8004680 <HAL_Init+0x28>)
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004668:	2003      	movs	r0, #3
 800466a:	f000 f947 	bl	80048fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800466e:	2000      	movs	r0, #0
 8004670:	f000 f808 	bl	8004684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004674:	f7ff fe0c 	bl	8004290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40022000 	.word	0x40022000

08004684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_InitTick+0x54>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <HAL_InitTick+0x58>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800469a:	fbb3 f3f1 	udiv	r3, r3, r1
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f95f 	bl	8004966 <HAL_SYSTICK_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00e      	b.n	80046d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b0f      	cmp	r3, #15
 80046b6:	d80a      	bhi.n	80046ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046b8:	2200      	movs	r2, #0
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	f000 f927 	bl	8004912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046c4:	4a06      	ldr	r2, [pc, #24]	@ (80046e0 <HAL_InitTick+0x5c>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000028 	.word	0x20000028
 80046dc:	20000030 	.word	0x20000030
 80046e0:	2000002c 	.word	0x2000002c

080046e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_IncTick+0x1c>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_IncTick+0x20>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	4a03      	ldr	r2, [pc, #12]	@ (8004704 <HAL_IncTick+0x20>)
 80046f6:	6013      	str	r3, [r2, #0]
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	20000030 	.word	0x20000030
 8004704:	20000410 	.word	0x20000410

08004708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return uwTick;
 800470c:	4b02      	ldr	r3, [pc, #8]	@ (8004718 <HAL_GetTick+0x10>)
 800470e:	681b      	ldr	r3, [r3, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	20000410 	.word	0x20000410

0800471c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7ff fff0 	bl	8004708 <HAL_GetTick>
 8004728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d005      	beq.n	8004742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_Delay+0x44>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004742:	bf00      	nop
 8004744:	f7ff ffe0 	bl	8004708 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	429a      	cmp	r2, r3
 8004752:	d8f7      	bhi.n	8004744 <HAL_Delay+0x28>
  {
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000030 	.word	0x20000030

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4906      	ldr	r1, [pc, #24]	@ (80047fc <__NVIC_EnableIRQ+0x34>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	e000e100 	.word	0xe000e100

08004800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	db0a      	blt.n	800482a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	490c      	ldr	r1, [pc, #48]	@ (800484c <__NVIC_SetPriority+0x4c>)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	0112      	lsls	r2, r2, #4
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	440b      	add	r3, r1
 8004824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004828:	e00a      	b.n	8004840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4908      	ldr	r1, [pc, #32]	@ (8004850 <__NVIC_SetPriority+0x50>)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	3b04      	subs	r3, #4
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	440b      	add	r3, r1
 800483e:	761a      	strb	r2, [r3, #24]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f1c3 0307 	rsb	r3, r3, #7
 800486e:	2b04      	cmp	r3, #4
 8004870:	bf28      	it	cs
 8004872:	2304      	movcs	r3, #4
 8004874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3304      	adds	r3, #4
 800487a:	2b06      	cmp	r3, #6
 800487c:	d902      	bls.n	8004884 <NVIC_EncodePriority+0x30>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3b03      	subs	r3, #3
 8004882:	e000      	b.n	8004886 <NVIC_EncodePriority+0x32>
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	401a      	ands	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800489c:	f04f 31ff 	mov.w	r1, #4294967295
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43d9      	mvns	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	4313      	orrs	r3, r2
         );
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	@ 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c8:	d301      	bcc.n	80048ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00f      	b.n	80048ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ce:	4a0a      	ldr	r2, [pc, #40]	@ (80048f8 <SysTick_Config+0x40>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d6:	210f      	movs	r1, #15
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	f7ff ff90 	bl	8004800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <SysTick_Config+0x40>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e6:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <SysTick_Config+0x40>)
 80048e8:	2207      	movs	r2, #7
 80048ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000e010 	.word	0xe000e010

080048fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff2d 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004924:	f7ff ff42 	bl	80047ac <__NVIC_GetPriorityGrouping>
 8004928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	6978      	ldr	r0, [r7, #20]
 8004930:	f7ff ff90 	bl	8004854 <NVIC_EncodePriority>
 8004934:	4602      	mov	r2, r0
 8004936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff5f 	bl	8004800 <__NVIC_SetPriority>
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff35 	bl	80047c8 <__NVIC_EnableIRQ>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ffa2 	bl	80048b8 <SysTick_Config>
 8004974:	4603      	mov	r3, r0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800499a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <HAL_FLASH_Program+0xd8>)
 800499c:	7e1b      	ldrb	r3, [r3, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_FLASH_Program+0x26>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e054      	b.n	8004a50 <HAL_FLASH_Program+0xd0>
 80049a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a58 <HAL_FLASH_Program+0xd8>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80049b0:	f000 f8a8 	bl	8004b04 <FLASH_WaitForLastOperation>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d144      	bne.n	8004a48 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80049c4:	2301      	movs	r3, #1
 80049c6:	757b      	strb	r3, [r7, #21]
 80049c8:	e007      	b.n	80049da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d102      	bne.n	80049d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80049d0:	2302      	movs	r3, #2
 80049d2:	757b      	strb	r3, [r7, #21]
 80049d4:	e001      	b.n	80049da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80049d6:	2304      	movs	r3, #4
 80049d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80049da:	2300      	movs	r3, #0
 80049dc:	75bb      	strb	r3, [r7, #22]
 80049de:	e02d      	b.n	8004a3c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80049e0:	7dbb      	ldrb	r3, [r7, #22]
 80049e2:	005a      	lsls	r2, r3, #1
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	eb02 0c03 	add.w	ip, r2, r3
 80049ea:	7dbb      	ldrb	r3, [r7, #22]
 80049ec:	0119      	lsls	r1, r3, #4
 80049ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f2:	f1c1 0620 	rsb	r6, r1, #32
 80049f6:	f1a1 0020 	sub.w	r0, r1, #32
 80049fa:	fa22 f401 	lsr.w	r4, r2, r1
 80049fe:	fa03 f606 	lsl.w	r6, r3, r6
 8004a02:	4334      	orrs	r4, r6
 8004a04:	fa23 f000 	lsr.w	r0, r3, r0
 8004a08:	4304      	orrs	r4, r0
 8004a0a:	fa23 f501 	lsr.w	r5, r3, r1
 8004a0e:	b2a3      	uxth	r3, r4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4660      	mov	r0, ip
 8004a14:	f000 f85a 	bl	8004acc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a1c:	f000 f872 	bl	8004b04 <FLASH_WaitForLastOperation>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004a24:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <HAL_FLASH_Program+0xdc>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	@ (8004a5c <HAL_FLASH_Program+0xdc>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004a36:	7dbb      	ldrb	r3, [r7, #22]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	75bb      	strb	r3, [r7, #22]
 8004a3c:	7dba      	ldrb	r2, [r7, #22]
 8004a3e:	7d7b      	ldrb	r3, [r7, #21]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3cd      	bcc.n	80049e0 <HAL_FLASH_Program+0x60>
 8004a44:	e000      	b.n	8004a48 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004a46:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a48:	4b03      	ldr	r3, [pc, #12]	@ (8004a58 <HAL_FLASH_Program+0xd8>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	761a      	strb	r2, [r3, #24]

  return status;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a58:	20000418 	.word	0x20000418
 8004a5c:	40022000 	.word	0x40022000

08004a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <HAL_FLASH_Unlock+0x44>)
 8004a7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa8 <HAL_FLASH_Unlock+0x48>)
 8004a80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a82:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004a92:	79fb      	ldrb	r3, [r7, #7]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	45670123 	.word	0x45670123
 8004aa8:	cdef89ab 	.word	0xcdef89ab

08004aac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_FLASH_Lock+0x1c>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <HAL_FLASH_Lock+0x1c>)
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40022000 	.word	0x40022000

08004acc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <FLASH_Program_HalfWord+0x30>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <FLASH_Program_HalfWord+0x34>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	@ (8004b00 <FLASH_Program_HalfWord+0x34>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	887a      	ldrh	r2, [r7, #2]
 8004aee:	801a      	strh	r2, [r3, #0]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000418 	.word	0x20000418
 8004b00:	40022000 	.word	0x40022000

08004b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004b0c:	f7ff fdfc 	bl	8004708 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b12:	e010      	b.n	8004b36 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d00c      	beq.n	8004b36 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <FLASH_WaitForLastOperation+0x2e>
 8004b22:	f7ff fdf1 	bl	8004708 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d201      	bcs.n	8004b36 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e025      	b.n	8004b82 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e8      	bne.n	8004b14 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004b42:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b50:	2220      	movs	r2, #32
 8004b52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b54:	4b0d      	ldr	r3, [pc, #52]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b6c:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <FLASH_WaitForLastOperation+0x88>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b78:	f000 f80a 	bl	8004b90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40022000 	.word	0x40022000

08004b90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004b9a:	4b23      	ldr	r3, [pc, #140]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ba6:	4b21      	ldr	r3, [pc, #132]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f043 0302 	orr.w	r3, r3, #2
 8004bae:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004bb0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f043 0310 	orr.w	r3, r3, #16
 8004bb8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004bba:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004bc6:	4b19      	ldr	r3, [pc, #100]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004bd0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004bda:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004be6:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	4a0f      	ldr	r2, [pc, #60]	@ (8004c2c <FLASH_SetErrorCode+0x9c>)
 8004bf0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f240 1201 	movw	r2, #257	@ 0x101
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d106      	bne.n	8004c16 <FLASH_SetErrorCode+0x86>
 8004c08:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4a06      	ldr	r2, [pc, #24]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	61d3      	str	r3, [r2, #28]
}  
 8004c14:	e002      	b.n	8004c1c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c16:	4a04      	ldr	r2, [pc, #16]	@ (8004c28 <FLASH_SetErrorCode+0x98>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60d3      	str	r3, [r2, #12]
}  
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40022000 	.word	0x40022000
 8004c2c:	20000418 	.word	0x20000418

08004c30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c42:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <HAL_FLASHEx_Erase+0xd0>)
 8004c44:	7e1b      	ldrb	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_FLASHEx_Erase+0x1e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e053      	b.n	8004cf6 <HAL_FLASHEx_Erase+0xc6>
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d00 <HAL_FLASHEx_Erase+0xd0>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d116      	bne.n	8004c8a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c5c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c60:	f7ff ff50 	bl	8004b04 <FLASH_WaitForLastOperation>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d141      	bne.n	8004cee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f000 f84c 	bl	8004d08 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c74:	f7ff ff46 	bl	8004b04 <FLASH_WaitForLastOperation>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004c7c:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <HAL_FLASHEx_Erase+0xd4>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a20      	ldr	r2, [pc, #128]	@ (8004d04 <HAL_FLASHEx_Erase+0xd4>)
 8004c82:	f023 0304 	bic.w	r3, r3, #4
 8004c86:	6113      	str	r3, [r2, #16]
 8004c88:	e031      	b.n	8004cee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c8a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c8e:	f7ff ff39 	bl	8004b04 <FLASH_WaitForLastOperation>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d12a      	bne.n	8004cee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	e019      	b.n	8004cdc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004ca8:	68b8      	ldr	r0, [r7, #8]
 8004caa:	f000 f849 	bl	8004d40 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cb2:	f7ff ff27 	bl	8004b04 <FLASH_WaitForLastOperation>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_FLASHEx_Erase+0xd4>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	4a11      	ldr	r2, [pc, #68]	@ (8004d04 <HAL_FLASHEx_Erase+0xd4>)
 8004cc0:	f023 0302 	bic.w	r3, r3, #2
 8004cc4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	601a      	str	r2, [r3, #0]
            break;
 8004cd2:	e00c      	b.n	8004cee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cda:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	029a      	lsls	r2, r3, #10
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3dc      	bcc.n	8004ca8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cee:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <HAL_FLASHEx_Erase+0xd0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	761a      	strb	r2, [r3, #24]

  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000418 	.word	0x20000418
 8004d04:	40022000 	.word	0x40022000

08004d08 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d10:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <FLASH_MassErase+0x30>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004d16:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <FLASH_MassErase+0x34>)
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <FLASH_MassErase+0x34>)
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d22:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <FLASH_MassErase+0x34>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	4a05      	ldr	r2, [pc, #20]	@ (8004d3c <FLASH_MassErase+0x34>)
 8004d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	20000418 	.word	0x20000418
 8004d3c:	40022000 	.word	0x40022000

08004d40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <FLASH_PageErase+0x38>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <FLASH_PageErase+0x3c>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	4a0a      	ldr	r2, [pc, #40]	@ (8004d7c <FLASH_PageErase+0x3c>)
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004d5a:	4a08      	ldr	r2, [pc, #32]	@ (8004d7c <FLASH_PageErase+0x3c>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <FLASH_PageErase+0x3c>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a05      	ldr	r2, [pc, #20]	@ (8004d7c <FLASH_PageErase+0x3c>)
 8004d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000418 	.word	0x20000418
 8004d7c:	40022000 	.word	0x40022000

08004d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b08b      	sub	sp, #44	@ 0x2c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e169      	b.n	8005068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d94:	2201      	movs	r2, #1
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	f040 8158 	bne.w	8005062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4a9a      	ldr	r2, [pc, #616]	@ (8005020 <HAL_GPIO_Init+0x2a0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d05e      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
 8004dbc:	4a98      	ldr	r2, [pc, #608]	@ (8005020 <HAL_GPIO_Init+0x2a0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d875      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004dc2:	4a98      	ldr	r2, [pc, #608]	@ (8005024 <HAL_GPIO_Init+0x2a4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d058      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
 8004dc8:	4a96      	ldr	r2, [pc, #600]	@ (8005024 <HAL_GPIO_Init+0x2a4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d86f      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004dce:	4a96      	ldr	r2, [pc, #600]	@ (8005028 <HAL_GPIO_Init+0x2a8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d052      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
 8004dd4:	4a94      	ldr	r2, [pc, #592]	@ (8005028 <HAL_GPIO_Init+0x2a8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d869      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004dda:	4a94      	ldr	r2, [pc, #592]	@ (800502c <HAL_GPIO_Init+0x2ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d04c      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
 8004de0:	4a92      	ldr	r2, [pc, #584]	@ (800502c <HAL_GPIO_Init+0x2ac>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d863      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004de6:	4a92      	ldr	r2, [pc, #584]	@ (8005030 <HAL_GPIO_Init+0x2b0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d046      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
 8004dec:	4a90      	ldr	r2, [pc, #576]	@ (8005030 <HAL_GPIO_Init+0x2b0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d85d      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004df2:	2b12      	cmp	r3, #18
 8004df4:	d82a      	bhi.n	8004e4c <HAL_GPIO_Init+0xcc>
 8004df6:	2b12      	cmp	r3, #18
 8004df8:	d859      	bhi.n	8004eae <HAL_GPIO_Init+0x12e>
 8004dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <HAL_GPIO_Init+0x80>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e7b 	.word	0x08004e7b
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e67 	.word	0x08004e67
 8004e0c:	08004ea9 	.word	0x08004ea9
 8004e10:	08004eaf 	.word	0x08004eaf
 8004e14:	08004eaf 	.word	0x08004eaf
 8004e18:	08004eaf 	.word	0x08004eaf
 8004e1c:	08004eaf 	.word	0x08004eaf
 8004e20:	08004eaf 	.word	0x08004eaf
 8004e24:	08004eaf 	.word	0x08004eaf
 8004e28:	08004eaf 	.word	0x08004eaf
 8004e2c:	08004eaf 	.word	0x08004eaf
 8004e30:	08004eaf 	.word	0x08004eaf
 8004e34:	08004eaf 	.word	0x08004eaf
 8004e38:	08004eaf 	.word	0x08004eaf
 8004e3c:	08004eaf 	.word	0x08004eaf
 8004e40:	08004eaf 	.word	0x08004eaf
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	4a79      	ldr	r2, [pc, #484]	@ (8005034 <HAL_GPIO_Init+0x2b4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e52:	e02c      	b.n	8004eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	623b      	str	r3, [r7, #32]
          break;
 8004e5a:	e029      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	3304      	adds	r3, #4
 8004e62:	623b      	str	r3, [r7, #32]
          break;
 8004e64:	e024      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	623b      	str	r3, [r7, #32]
          break;
 8004e6e:	e01f      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	330c      	adds	r3, #12
 8004e76:	623b      	str	r3, [r7, #32]
          break;
 8004e78:	e01a      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e82:	2304      	movs	r3, #4
 8004e84:	623b      	str	r3, [r7, #32]
          break;
 8004e86:	e013      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e90:	2308      	movs	r3, #8
 8004e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	611a      	str	r2, [r3, #16]
          break;
 8004e9a:	e009      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	615a      	str	r2, [r3, #20]
          break;
 8004ea6:	e003      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	623b      	str	r3, [r7, #32]
          break;
 8004eac:	e000      	b.n	8004eb0 <HAL_GPIO_Init+0x130>
          break;
 8004eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2bff      	cmp	r3, #255	@ 0xff
 8004eb4:	d801      	bhi.n	8004eba <HAL_GPIO_Init+0x13a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	e001      	b.n	8004ebe <HAL_GPIO_Init+0x13e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2bff      	cmp	r3, #255	@ 0xff
 8004ec4:	d802      	bhi.n	8004ecc <HAL_GPIO_Init+0x14c>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	e002      	b.n	8004ed2 <HAL_GPIO_Init+0x152>
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	3b08      	subs	r3, #8
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	210f      	movs	r1, #15
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eec:	431a      	orrs	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80b1 	beq.w	8005062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f00:	4b4d      	ldr	r3, [pc, #308]	@ (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	4a4c      	ldr	r2, [pc, #304]	@ (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6193      	str	r3, [r2, #24]
 8004f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f18:	4a48      	ldr	r2, [pc, #288]	@ (800503c <HAL_GPIO_Init+0x2bc>)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	3302      	adds	r3, #2
 8004f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	220f      	movs	r2, #15
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a40      	ldr	r2, [pc, #256]	@ (8005040 <HAL_GPIO_Init+0x2c0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_GPIO_Init+0x1ec>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3f      	ldr	r2, [pc, #252]	@ (8005044 <HAL_GPIO_Init+0x2c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00d      	beq.n	8004f68 <HAL_GPIO_Init+0x1e8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8005048 <HAL_GPIO_Init+0x2c8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <HAL_GPIO_Init+0x1e4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3d      	ldr	r2, [pc, #244]	@ (800504c <HAL_GPIO_Init+0x2cc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_GPIO_Init+0x1e0>
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e006      	b.n	8004f6e <HAL_GPIO_Init+0x1ee>
 8004f60:	2304      	movs	r3, #4
 8004f62:	e004      	b.n	8004f6e <HAL_GPIO_Init+0x1ee>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e002      	b.n	8004f6e <HAL_GPIO_Init+0x1ee>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_GPIO_Init+0x1ee>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f70:	f002 0203 	and.w	r2, r2, #3
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	4093      	lsls	r3, r2
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f7e:	492f      	ldr	r1, [pc, #188]	@ (800503c <HAL_GPIO_Init+0x2bc>)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d006      	beq.n	8004fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f98:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	492c      	ldr	r1, [pc, #176]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e006      	b.n	8004fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	4928      	ldr	r1, [pc, #160]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fc0:	4b23      	ldr	r3, [pc, #140]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4922      	ldr	r1, [pc, #136]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	491e      	ldr	r1, [pc, #120]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fe8:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	4918      	ldr	r1, [pc, #96]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ff6:	4b16      	ldr	r3, [pc, #88]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	4914      	ldr	r1, [pc, #80]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8005000:	4013      	ands	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d021      	beq.n	8005054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005010:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	490e      	ldr	r1, [pc, #56]	@ (8005050 <HAL_GPIO_Init+0x2d0>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	60cb      	str	r3, [r1, #12]
 800501c:	e021      	b.n	8005062 <HAL_GPIO_Init+0x2e2>
 800501e:	bf00      	nop
 8005020:	10320000 	.word	0x10320000
 8005024:	10310000 	.word	0x10310000
 8005028:	10220000 	.word	0x10220000
 800502c:	10210000 	.word	0x10210000
 8005030:	10120000 	.word	0x10120000
 8005034:	10110000 	.word	0x10110000
 8005038:	40021000 	.word	0x40021000
 800503c:	40010000 	.word	0x40010000
 8005040:	40010800 	.word	0x40010800
 8005044:	40010c00 	.word	0x40010c00
 8005048:	40011000 	.word	0x40011000
 800504c:	40011400 	.word	0x40011400
 8005050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_GPIO_Init+0x304>)
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	43db      	mvns	r3, r3
 800505c:	4909      	ldr	r1, [pc, #36]	@ (8005084 <HAL_GPIO_Init+0x304>)
 800505e:	4013      	ands	r3, r2
 8005060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	3301      	adds	r3, #1
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	f47f ae8e 	bne.w	8004d94 <HAL_GPIO_Init+0x14>
  }
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	372c      	adds	r7, #44	@ 0x2c
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40010400 	.word	0x40010400

08005088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
 80050a4:	e001      	b.n	80050aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	807b      	strh	r3, [r7, #2]
 80050c2:	4613      	mov	r3, r2
 80050c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050c6:	787b      	ldrb	r3, [r7, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050cc:	887a      	ldrh	r2, [r7, #2]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050d2:	e003      	b.n	80050dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d4:	887b      	ldrh	r3, [r7, #2]
 80050d6:	041a      	lsls	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	611a      	str	r2, [r3, #16]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050fe:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f806 	bl	8005118 <HAL_GPIO_EXTI_Callback>
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40010400 	.word	0x40010400

08005118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e12b      	b.n	8005396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff f8ce 	bl	80042f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800517e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800518e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005190:	f002 fb78 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8005194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4a81      	ldr	r2, [pc, #516]	@ (80053a0 <HAL_I2C_Init+0x274>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d807      	bhi.n	80051b0 <HAL_I2C_Init+0x84>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a80      	ldr	r2, [pc, #512]	@ (80053a4 <HAL_I2C_Init+0x278>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bf94      	ite	ls
 80051a8:	2301      	movls	r3, #1
 80051aa:	2300      	movhi	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e006      	b.n	80051be <HAL_I2C_Init+0x92>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a7d      	ldr	r2, [pc, #500]	@ (80053a8 <HAL_I2C_Init+0x27c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bf94      	ite	ls
 80051b8:	2301      	movls	r3, #1
 80051ba:	2300      	movhi	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0e7      	b.n	8005396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a78      	ldr	r2, [pc, #480]	@ (80053ac <HAL_I2C_Init+0x280>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0c9b      	lsrs	r3, r3, #18
 80051d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a6a      	ldr	r2, [pc, #424]	@ (80053a0 <HAL_I2C_Init+0x274>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d802      	bhi.n	8005200 <HAL_I2C_Init+0xd4>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3301      	adds	r3, #1
 80051fe:	e009      	b.n	8005214 <HAL_I2C_Init+0xe8>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a69      	ldr	r2, [pc, #420]	@ (80053b0 <HAL_I2C_Init+0x284>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	3301      	adds	r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	430b      	orrs	r3, r1
 800521a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005226:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	495c      	ldr	r1, [pc, #368]	@ (80053a0 <HAL_I2C_Init+0x274>)
 8005230:	428b      	cmp	r3, r1
 8005232:	d819      	bhi.n	8005268 <HAL_I2C_Init+0x13c>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e59      	subs	r1, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005248:	400b      	ands	r3, r1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_I2C_Init+0x138>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1e59      	subs	r1, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fbb1 f3f3 	udiv	r3, r1, r3
 800525c:	3301      	adds	r3, #1
 800525e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005262:	e051      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005264:	2304      	movs	r3, #4
 8005266:	e04f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d111      	bne.n	8005294 <HAL_I2C_Init+0x168>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e012      	b.n	80052ba <HAL_I2C_Init+0x18e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e58      	subs	r0, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	0099      	lsls	r1, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052aa:	3301      	adds	r3, #1
 80052ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Init+0x196>
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10e      	bne.n	80052e8 <HAL_I2C_Init+0x1bc>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1e58      	subs	r0, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	440b      	add	r3, r1
 80052d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e6:	e00f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	6809      	ldr	r1, [r1, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005336:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6911      	ldr	r1, [r2, #16]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	000186a0 	.word	0x000186a0
 80053a4:	001e847f 	.word	0x001e847f
 80053a8:	003d08ff 	.word	0x003d08ff
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	10624dd3 	.word	0x10624dd3

080053b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	817b      	strh	r3, [r7, #10]
 80053c4:	4613      	mov	r3, r2
 80053c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7ff f99e 	bl	8004708 <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f040 80e0 	bne.w	800559c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2319      	movs	r3, #25
 80053e2:	2201      	movs	r2, #1
 80053e4:	4970      	ldr	r1, [pc, #448]	@ (80055a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f964 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0d3      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_I2C_Master_Transmit+0x50>
 8005400:	2302      	movs	r3, #2
 8005402:	e0cc      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d007      	beq.n	800542a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2221      	movs	r2, #33	@ 0x21
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2210      	movs	r2, #16
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a50      	ldr	r2, [pc, #320]	@ (80055ac <HAL_I2C_Master_Transmit+0x1f8>)
 800546a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800546c:	8979      	ldrh	r1, [r7, #10]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f89c 	bl	80055b0 <I2C_MasterRequestWrite>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e08d      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005498:	e066      	b.n	8005568 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f9de 	bl	8005860 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d107      	bne.n	80054c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e06b      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11b      	bne.n	800553c <HAL_I2C_Master_Transmit+0x188>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d017      	beq.n	800553c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	6a39      	ldr	r1, [r7, #32]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f9ce 	bl	80058e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	2b04      	cmp	r3, #4
 8005552:	d107      	bne.n	8005564 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01a      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d194      	bne.n	800549a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800557e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	00100002 	.word	0x00100002
 80055ac:	ffff0000 	.word	0xffff0000

080055b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	460b      	mov	r3, r1
 80055be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d006      	beq.n	80055da <I2C_MasterRequestWrite+0x2a>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d003      	beq.n	80055da <I2C_MasterRequestWrite+0x2a>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055d8:	d108      	bne.n	80055ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e00b      	b.n	8005604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f0:	2b12      	cmp	r3, #18
 80055f2:	d107      	bne.n	8005604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f84f 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	d103      	bne.n	8005634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e035      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005640:	d108      	bne.n	8005654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005642:	897b      	ldrh	r3, [r7, #10]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	e01b      	b.n	800568c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	11db      	asrs	r3, r3, #7
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f063 030f 	orn	r3, r3, #15
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	490e      	ldr	r1, [pc, #56]	@ (80056ac <I2C_MasterRequestWrite+0xfc>)
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f875 	bl	8005762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e010      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4907      	ldr	r1, [pc, #28]	@ (80056b0 <I2C_MasterRequestWrite+0x100>)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f865 	bl	8005762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	00010008 	.word	0x00010008
 80056b0:	00010002 	.word	0x00010002

080056b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c4:	e025      	b.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d021      	beq.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ce:	f7ff f81b 	bl	8004708 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e023      	b.n	800575a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d10d      	bne.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	43da      	mvns	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	e00c      	b.n	8005752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	429a      	cmp	r2, r3
 8005756:	d0b6      	beq.n	80056c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005770:	e051      	b.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005780:	d123      	bne.n	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800579a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e046      	b.n	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d021      	beq.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fe ff99 	bl	8004708 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d116      	bne.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e020      	b.n	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10c      	bne.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	43da      	mvns	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e00b      	b.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	43da      	mvns	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d18d      	bne.n	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586c:	e02d      	b.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f878 	bl	8005964 <I2C_IsAcknowledgeFailed>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e02d      	b.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d021      	beq.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005886:	f7fe ff3f 	bl	8004708 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d302      	bcc.n	800589c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d116      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e007      	b.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d1ca      	bne.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ee:	e02d      	b.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f837 	bl	8005964 <I2C_IsAcknowledgeFailed>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e02d      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d021      	beq.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005908:	f7fe fefe 	bl	8004708 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e007      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d1ca      	bne.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597a:	d11b      	bne.n	80059b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	f043 0204 	orr.w	r2, r3, #4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	b08b      	sub	sp, #44	@ 0x2c
 80059c4:	af06      	add	r7, sp, #24
 80059c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0fd      	b.n	8005bce <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f007 fa0a 	bl	800ce00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f003 f981 	bl	8008d00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	687e      	ldr	r6, [r7, #4]
 8005a06:	466d      	mov	r5, sp
 8005a08:	f106 0410 	add.w	r4, r6, #16
 8005a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	1d33      	adds	r3, r6, #4
 8005a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a18:	6838      	ldr	r0, [r7, #0]
 8005a1a:	f003 f94b 	bl	8008cb4 <USB_CoreInit>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0ce      	b.n	8005bce <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f003 f97c 	bl	8008d34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e04c      	b.n	8005adc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	440b      	add	r3, r1
 8005a52:	3301      	adds	r3, #1
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a6c:	7bfa      	ldrb	r2, [r7, #15]
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	b298      	uxth	r0, r3
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3336      	adds	r3, #54	@ 0x36
 8005a80:	4602      	mov	r2, r0
 8005a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	3303      	adds	r3, #3
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3338      	adds	r3, #56	@ 0x38
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	333c      	adds	r3, #60	@ 0x3c
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3340      	adds	r3, #64	@ 0x40
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d3ad      	bcc.n	8005a42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e044      	b.n	8005b76 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	440b      	add	r3, r1
 8005b10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b18:	7bfa      	ldrb	r2, [r7, #15]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b2e:	7bfa      	ldrb	r2, [r7, #15]
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	3301      	adds	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d3b5      	bcc.n	8005aec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	687e      	ldr	r6, [r7, #4]
 8005b88:	466d      	mov	r5, sp
 8005b8a:	f106 0410 	add.w	r4, r6, #16
 8005b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	1d33      	adds	r3, r6, #4
 8005b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f003 f8d6 	bl	8008d4c <USB_DevInit>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e00d      	b.n	8005bce <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f005 faf7 	bl	800b1ba <USB_DevDisconnect>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_PCD_Start+0x16>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e016      	b.n	8005c1a <HAL_PCD_Start+0x44>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f003 f86b 	bl	8008cd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005bfe:	2101      	movs	r1, #1
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f007 fb70 	bl	800d2e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f005 facb 	bl	800b1a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b088      	sub	sp, #32
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f005 facd 	bl	800b1ce <USB_ReadInterrupts>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3e:	d102      	bne.n	8005c46 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb5f 	bl	8006304 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f005 fabf 	bl	800b1ce <USB_ReadInterrupts>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5a:	d112      	bne.n	8005c82 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f007 f93e 	bl	800cef6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f923 	bl	8005ec8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f005 faa1 	bl	800b1ce <USB_ReadInterrupts>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c96:	d10b      	bne.n	8005cb0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005caa:	b292      	uxth	r2, r2
 8005cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f005 fa8a 	bl	800b1ce <USB_ReadInterrupts>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cc4:	d10b      	bne.n	8005cde <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f005 fa73 	bl	800b1ce <USB_ReadInterrupts>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf2:	d126      	bne.n	8005d42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0204 	bic.w	r2, r2, #4
 8005d06:	b292      	uxth	r2, r2
 8005d08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0208 	bic.w	r2, r2, #8
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f007 f91f 	bl	800cf68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d3c:	b292      	uxth	r2, r2
 8005d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f005 fa41 	bl	800b1ce <USB_ReadInterrupts>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d56:	f040 8082 	bne.w	8005e5e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e010      	b.n	8005d82 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	8812      	ldrh	r2, [r2, #0]
 8005d70:	b292      	uxth	r2, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	3320      	adds	r3, #32
 8005d76:	443b      	add	r3, r7
 8005d78:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005d7c:	7ffb      	ldrb	r3, [r7, #31]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	7ffb      	ldrb	r3, [r7, #31]
 8005d84:	2b07      	cmp	r3, #7
 8005d86:	d9eb      	bls.n	8005d60 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	b292      	uxth	r2, r2
 8005d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	b292      	uxth	r2, r2
 8005db4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005db8:	bf00      	nop
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f6      	beq.n	8005dba <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dde:	b292      	uxth	r2, r2
 8005de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e00f      	b.n	8005e0a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	4611      	mov	r1, r2
 8005df2:	7ffa      	ldrb	r2, [r7, #31]
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	440a      	add	r2, r1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	443b      	add	r3, r7
 8005dfe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005e02:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005e04:	7ffb      	ldrb	r3, [r7, #31]
 8005e06:	3301      	adds	r3, #1
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	7ffb      	ldrb	r3, [r7, #31]
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d9ec      	bls.n	8005dea <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0208 	orr.w	r2, r2, #8
 8005e22:	b292      	uxth	r2, r2
 8005e24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e3a:	b292      	uxth	r2, r2
 8005e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0204 	orr.w	r2, r2, #4
 8005e52:	b292      	uxth	r2, r2
 8005e54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f007 f86b 	bl	800cf34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 f9b3 	bl	800b1ce <USB_ReadInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e72:	d10e      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e86:	b292      	uxth	r2, r2
 8005e88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f007 f824 	bl	800ceda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f005 f999 	bl	800b1ce <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eba:	b292      	uxth	r2, r2
 8005ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_PCD_SetAddress+0x1a>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e013      	b.n	8005f0a <HAL_PCD_SetAddress+0x42>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f005 f940 	bl	800b180 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	70fb      	strb	r3, [r7, #3]
 8005f24:	460b      	mov	r3, r1
 8005f26:	803b      	strh	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da0e      	bge.n	8005f56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	705a      	strb	r2, [r3, #1]
 8005f54:	e00e      	b.n	8005f74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 0207 	and.w	r2, r3, #7
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f80:	883a      	ldrh	r2, [r7, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	78ba      	ldrb	r2, [r7, #2]
 8005f8a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f9e:	78bb      	ldrb	r3, [r7, #2]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d102      	bne.n	8005faa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_PCD_EP_Open+0xa6>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e00e      	b.n	8005fd6 <HAL_PCD_EP_Open+0xc4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f002 fee0 	bl	8008d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da0e      	bge.n	8006010 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	705a      	strb	r2, [r3, #1]
 800600e:	e00e      	b.n	800602e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_PCD_EP_Close+0x6a>
 8006044:	2302      	movs	r3, #2
 8006046:	e00e      	b.n	8006066 <HAL_PCD_EP_Close+0x88>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68f9      	ldr	r1, [r7, #12]
 8006056:	4618      	mov	r0, r3
 8006058:	f003 fa02 	bl	8009460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	460b      	mov	r3, r1
 800607c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 0207 	and.w	r2, r3, #7
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6979      	ldr	r1, [r7, #20]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f003 fbb4 	bl	8009838 <USB_EPStartXfer>
 80060d0:	e005      	b.n	80060de <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	4618      	mov	r0, r3
 80060da:	f003 fbad 	bl	8009838 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 0207 	and.w	r2, r3, #7
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800610a:	681b      	ldr	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	460b      	mov	r3, r1
 8006124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2200      	movs	r2, #0
 800615a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2201      	movs	r2, #1
 8006160:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	b2da      	uxtb	r2, r3
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	4618      	mov	r0, r3
 8006180:	f003 fb5a 	bl	8009838 <USB_EPStartXfer>
 8006184:	e005      	b.n	8006192 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	4618      	mov	r0, r3
 800618e:	f003 fb53 	bl	8009838 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 0207 	and.w	r2, r3, #7
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d901      	bls.n	80061ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e04c      	b.n	8006254 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da0e      	bge.n	80061e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	705a      	strb	r2, [r3, #1]
 80061de:	e00c      	b.n	80061fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_PCD_EP_SetStall+0x7e>
 8006216:	2302      	movs	r3, #2
 8006218:	e01c      	b.n	8006254 <HAL_PCD_EP_SetStall+0xb8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	4618      	mov	r0, r3
 800622a:	f004 feac 	bl	800af86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f004 ffd1 	bl	800b1ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	f003 020f 	and.w	r2, r3, #15
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d901      	bls.n	800627a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e040      	b.n	80062fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800627a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da0e      	bge.n	80062a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	705a      	strb	r2, [r3, #1]
 800629e:	e00e      	b.n	80062be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 0207 	and.w	r2, r3, #7
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_PCD_EP_ClrStall+0x82>
 80062da:	2302      	movs	r3, #2
 80062dc:	e00e      	b.n	80062fc <HAL_PCD_EP_ClrStall+0xa0>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f004 fe9a 	bl	800b026 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	@ 0x38
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800630c:	e2de      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006316:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006318:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8006324:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 8157 	bne.w	80065dc <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800632e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d151      	bne.n	80063dc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006348:	81fb      	strh	r3, [r7, #14]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	89fb      	ldrh	r3, [r7, #14]
 8006350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3328      	adds	r3, #40	@ 0x28
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	3302      	adds	r3, #2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	441a      	add	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800639c:	2100      	movs	r1, #0
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f006 fd81 	bl	800cea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 828d 	beq.w	80068cc <PCD_EP_ISR_Handler+0x5c8>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8288 	bne.w	80068cc <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80063da:	e277      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80063ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d034      	beq.n	8006460 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	3306      	adds	r3, #6
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006434:	b29b      	uxth	r3, r3
 8006436:	f004 ff28 	bl	800b28a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29a      	uxth	r2, r3
 8006442:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006446:	4013      	ands	r3, r2
 8006448:	823b      	strh	r3, [r7, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	8a3a      	ldrh	r2, [r7, #16]
 8006450:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006454:	b292      	uxth	r2, r2
 8006456:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f006 fcf7 	bl	800ce4c <HAL_PCD_SetupStageCallback>
 800645e:	e235      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006460:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006464:	2b00      	cmp	r3, #0
 8006466:	f280 8231 	bge.w	80068cc <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29a      	uxth	r2, r3
 8006472:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006476:	4013      	ands	r3, r2
 8006478:	83bb      	strh	r3, [r7, #28]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	8bba      	ldrh	r2, [r7, #28]
 8006480:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006484:	b292      	uxth	r2, r2
 8006486:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006490:	b29b      	uxth	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	4413      	add	r3, r2
 800649c:	3306      	adds	r3, #6
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d019      	beq.n	80064f0 <PCD_EP_ISR_Handler+0x1ec>
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d015      	beq.n	80064f0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	6959      	ldr	r1, [r3, #20]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f004 fed8 	bl	800b28a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	441a      	add	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80064e8:	2100      	movs	r1, #0
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f006 fcc0 	bl	800ce70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064fe:	b29b      	uxth	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	4413      	add	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d112      	bne.n	800653e <PCD_EP_ISR_Handler+0x23a>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006522:	b29a      	uxth	r2, r3
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29a      	uxth	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e02f      	b.n	800659e <PCD_EP_ISR_Handler+0x29a>
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b3e      	cmp	r3, #62	@ 0x3e
 8006544:	d813      	bhi.n	800656e <PCD_EP_ISR_Handler+0x26a>
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	633b      	str	r3, [r7, #48]	@ 0x30
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <PCD_EP_ISR_Handler+0x25c>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	3301      	adds	r3, #1
 800655e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29a      	uxth	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e017      	b.n	800659e <PCD_EP_ISR_Handler+0x29a>
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	633b      	str	r3, [r7, #48]	@ 0x30
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <PCD_EP_ISR_Handler+0x284>
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	3b01      	subs	r3, #1
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	b29b      	uxth	r3, r3
 800658c:	029b      	lsls	r3, r3, #10
 800658e:	b29b      	uxth	r3, r3
 8006590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006598:	b29a      	uxth	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	827b      	strh	r3, [r7, #18]
 80065b0:	8a7b      	ldrh	r3, [r7, #18]
 80065b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065b6:	827b      	strh	r3, [r7, #18]
 80065b8:	8a7b      	ldrh	r3, [r7, #18]
 80065ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065be:	827b      	strh	r3, [r7, #18]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	8a7b      	ldrh	r3, [r7, #18]
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]
 80065da:	e177      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f280 80ea 	bge.w	80067cc <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800660e:	4013      	ands	r3, r2
 8006610:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006622:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006626:	b292      	uxth	r2, r2
 8006628:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800662a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	7b1b      	ldrb	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d122      	bne.n	800668e <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4413      	add	r3, r2
 800665c:	3306      	adds	r3, #6
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006670:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8006672:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8087 	beq.w	8006788 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	6959      	ldr	r1, [r3, #20]
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	88da      	ldrh	r2, [r3, #6]
 8006686:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006688:	f004 fdff 	bl	800b28a <USB_ReadPMA>
 800668c:	e07c      	b.n	8006788 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d108      	bne.n	80066a8 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006698:	461a      	mov	r2, r3
 800669a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f923 	bl	80068e8 <HAL_PCD_EP_DB_Receive>
 80066a2:	4603      	mov	r3, r0
 80066a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066a6:	e06f      	b.n	8006788 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d021      	beq.n	8006746 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	3302      	adds	r3, #2
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800672a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800672c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02a      	beq.n	8006788 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	6959      	ldr	r1, [r3, #20]
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	891a      	ldrh	r2, [r3, #8]
 800673e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006740:	f004 fda3 	bl	800b28a <USB_ReadPMA>
 8006744:	e020      	b.n	8006788 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4413      	add	r3, r2
 800675a:	3306      	adds	r3, #6
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676e:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006770:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	6959      	ldr	r1, [r3, #20]
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	895a      	ldrh	r2, [r3, #10]
 8006782:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006784:	f004 fd81 	bl	800b28a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800678e:	441a      	add	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800679a:	441a      	add	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <PCD_EP_ISR_Handler+0x4ae>
 80067a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d206      	bcs.n	80067c0 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f006 fb59 	bl	800ce70 <HAL_PCD_DataOutStageCallback>
 80067be:	e005      	b.n	80067cc <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f003 f836 	bl	8009838 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80067cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d07a      	beq.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80067d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006804:	843b      	strh	r3, [r7, #32]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8c3b      	ldrh	r3, [r7, #32]
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	78db      	ldrb	r3, [r3, #3]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d108      	bne.n	800683c <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800682e:	2b02      	cmp	r3, #2
 8006830:	d146      	bne.n	80068c0 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006832:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d141      	bne.n	80068c0 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	4413      	add	r3, r2
 8006850:	3302      	adds	r3, #2
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006864:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	8bfb      	ldrh	r3, [r7, #30]
 800686c:	429a      	cmp	r2, r3
 800686e:	d906      	bls.n	800687e <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	8bfb      	ldrh	r3, [r7, #30]
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	619a      	str	r2, [r3, #24]
 800687c:	e002      	b.n	8006884 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	2200      	movs	r2, #0
 8006882:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f006 fb07 	bl	800cea6 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8006898:	e018      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	8bfb      	ldrh	r3, [r7, #30]
 80068a0:	441a      	add	r2, r3
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	69da      	ldr	r2, [r3, #28]
 80068aa:	8bfb      	ldrh	r3, [r7, #30]
 80068ac:	441a      	add	r2, r3
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f002 ffbd 	bl	8009838 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80068be:	e005      	b.n	80068cc <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80068c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068c2:	461a      	mov	r2, r3
 80068c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f91b 	bl	8006b02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	b21b      	sxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f6ff ad18 	blt.w	800630e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3738      	adds	r7, #56	@ 0x38
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d07e      	beq.n	80069fe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	3302      	adds	r3, #2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006928:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	8b7b      	ldrh	r3, [r7, #26]
 8006930:	429a      	cmp	r2, r3
 8006932:	d306      	bcc.n	8006942 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	8b7b      	ldrh	r3, [r7, #26]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	619a      	str	r2, [r3, #24]
 8006940:	e002      	b.n	8006948 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d123      	bne.n	8006998 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696a:	833b      	strh	r3, [r7, #24]
 800696c:	8b3b      	ldrh	r3, [r7, #24]
 800696e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006972:	833b      	strh	r3, [r7, #24]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	8b3b      	ldrh	r3, [r7, #24]
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01f      	beq.n	80069e2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069bc:	82fb      	strh	r3, [r7, #22]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	8afb      	ldrh	r3, [r7, #22]
 80069ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069e2:	8b7b      	ldrh	r3, [r7, #26]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8087 	beq.w	8006af8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	891a      	ldrh	r2, [r3, #8]
 80069f6:	8b7b      	ldrh	r3, [r7, #26]
 80069f8:	f004 fc47 	bl	800b28a <USB_ReadPMA>
 80069fc:	e07c      	b.n	8006af8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	3306      	adds	r3, #6
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	8b7b      	ldrh	r3, [r7, #26]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d306      	bcc.n	8006a40 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	8b7b      	ldrh	r3, [r7, #26]
 8006a38:	1ad2      	subs	r2, r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	619a      	str	r2, [r3, #24]
 8006a3e:	e002      	b.n	8006a46 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d123      	bne.n	8006a96 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a68:	83fb      	strh	r3, [r7, #30]
 8006a6a:	8bfb      	ldrh	r3, [r7, #30]
 8006a6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a70:	83fb      	strh	r3, [r7, #30]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11f      	bne.n	8006ae0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aba:	83bb      	strh	r3, [r7, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8bbb      	ldrh	r3, [r7, #28]
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6959      	ldr	r1, [r3, #20]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	895a      	ldrh	r2, [r3, #10]
 8006af2:	8b7b      	ldrh	r3, [r7, #26]
 8006af4:	f004 fbc9 	bl	800b28a <USB_ReadPMA>
    }
  }

  return count;
 8006af8:	8b7b      	ldrh	r3, [r7, #26]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b094      	sub	sp, #80	@ 0x50
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8138 	beq.w	8006d8c <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	3302      	adds	r3, #2
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b44:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d907      	bls.n	8006b64 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	619a      	str	r2, [r3, #24]
 8006b62:	e002      	b.n	8006b6a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d12c      	bne.n	8006bcc <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f006 f994 	bl	800cea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 823a 	beq.w	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba4:	82fb      	strh	r3, [r7, #22]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	8afb      	ldrh	r3, [r7, #22]
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]
 8006bca:	e218      	b.n	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01f      	beq.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	f040 81ee 	bne.w	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c38:	441a      	add	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d309      	bcc.n	8006c5e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	621a      	str	r2, [r3, #32]
 8006c5c:	e015      	b.n	8006c8a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006c66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c6a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c74:	e009      	b.n	8006c8a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d155      	bne.n	8006d3e <HAL_PCD_EP_DB_Transmit+0x23c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	011a      	lsls	r2, r3, #4
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d112      	bne.n	8006ce6 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e047      	b.n	8006d76 <HAL_PCD_EP_DB_Transmit+0x274>
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cea:	d811      	bhi.n	8006d10 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_PCD_EP_DB_Transmit+0x200>
 8006cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfe:	3301      	adds	r3, #1
 8006d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	029b      	lsls	r3, r3, #10
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e032      	b.n	8006d76 <HAL_PCD_EP_DB_Transmit+0x274>
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_PCD_EP_DB_Transmit+0x224>
 8006d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d22:	3b01      	subs	r3, #1
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e01b      	b.n	8006d76 <HAL_PCD_EP_DB_Transmit+0x274>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d117      	bne.n	8006d76 <HAL_PCD_EP_DB_Transmit+0x274>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	4413      	add	r3, r2
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	011a      	lsls	r2, r3, #4
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6959      	ldr	r1, [r3, #20]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	891a      	ldrh	r2, [r3, #8]
 8006d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f004 fa3c 	bl	800b202 <USB_WritePMA>
 8006d8a:	e138      	b.n	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	4413      	add	r3, r2
 8006da0:	3306      	adds	r3, #6
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d307      	bcc.n	8006dd4 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006dcc:	1ad2      	subs	r2, r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	619a      	str	r2, [r3, #24]
 8006dd2:	e002      	b.n	8006dda <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d12e      	bne.n	8006e40 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f006 f85c 	bl	800cea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8102 	bne.w	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e0de      	b.n	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d11f      	bne.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e64:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 80b4 	bne.w	8006ffe <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	695a      	ldr	r2, [r3, #20]
 8006e9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006eac:	441a      	add	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d309      	bcc.n	8006ed2 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	621a      	str	r2, [r3, #32]
 8006ed0:	e015      	b.n	8006efe <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d107      	bne.n	8006eea <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006eda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ede:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006ee8:	e009      	b.n	8006efe <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d155      	bne.n	8006fb8 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	4413      	add	r3, r2
 8006f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	011a      	lsls	r2, r3, #4
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d112      	bne.n	8006f60 <HAL_PCD_EP_DB_Transmit+0x45e>
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e044      	b.n	8006fea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f64:	d811      	bhi.n	8006f8a <HAL_PCD_EP_DB_Transmit+0x488>
 8006f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_PCD_EP_DB_Transmit+0x47a>
 8006f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f78:	3301      	adds	r3, #1
 8006f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e02f      	b.n	8006fea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_PCD_EP_DB_Transmit+0x49e>
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e018      	b.n	8006fea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d114      	bne.n	8006fea <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fce:	4413      	add	r3, r2
 8006fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6959      	ldr	r1, [r3, #20]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	895a      	ldrh	r2, [r3, #10]
 8006ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f004 f902 	bl	800b202 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007018:	82bb      	strh	r3, [r7, #20]
 800701a:	8abb      	ldrh	r3, [r7, #20]
 800701c:	f083 0310 	eor.w	r3, r3, #16
 8007020:	82bb      	strh	r3, [r7, #20]
 8007022:	8abb      	ldrh	r3, [r7, #20]
 8007024:	f083 0320 	eor.w	r3, r3, #32
 8007028:	82bb      	strh	r3, [r7, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	8abb      	ldrh	r3, [r7, #20]
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3750      	adds	r7, #80	@ 0x50
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	817b      	strh	r3, [r7, #10]
 8007066:	4613      	mov	r3, r2
 8007068:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007076:	897b      	ldrh	r3, [r7, #10]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e009      	b.n	80070a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800708e:	897a      	ldrh	r2, [r7, #10]
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2200      	movs	r2, #0
 80070ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	80da      	strh	r2, [r3, #6]
 80070b6:	e00b      	b.n	80070d0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2201      	movs	r2, #1
 80070bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e272      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8087 	beq.w	800720a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070fc:	4b92      	ldr	r3, [pc, #584]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b04      	cmp	r3, #4
 8007106:	d00c      	beq.n	8007122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007108:	4b8f      	ldr	r3, [pc, #572]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 030c 	and.w	r3, r3, #12
 8007110:	2b08      	cmp	r3, #8
 8007112:	d112      	bne.n	800713a <HAL_RCC_OscConfig+0x5e>
 8007114:	4b8c      	ldr	r3, [pc, #560]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800711c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007120:	d10b      	bne.n	800713a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007122:	4b89      	ldr	r3, [pc, #548]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d06c      	beq.n	8007208 <HAL_RCC_OscConfig+0x12c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d168      	bne.n	8007208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e24c      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x76>
 8007144:	4b80      	ldr	r3, [pc, #512]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7f      	ldr	r2, [pc, #508]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800714a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e02e      	b.n	80071b0 <HAL_RCC_OscConfig+0xd4>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x98>
 800715a:	4b7b      	ldr	r3, [pc, #492]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a7a      	ldr	r2, [pc, #488]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b78      	ldr	r3, [pc, #480]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a77      	ldr	r2, [pc, #476]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800716c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e01d      	b.n	80071b0 <HAL_RCC_OscConfig+0xd4>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0xbc>
 800717e:	4b72      	ldr	r3, [pc, #456]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a71      	ldr	r2, [pc, #452]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b6f      	ldr	r3, [pc, #444]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6e      	ldr	r2, [pc, #440]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	e00b      	b.n	80071b0 <HAL_RCC_OscConfig+0xd4>
 8007198:	4b6b      	ldr	r3, [pc, #428]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a6a      	ldr	r2, [pc, #424]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800719e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	4b68      	ldr	r3, [pc, #416]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a67      	ldr	r2, [pc, #412]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80071aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d013      	beq.n	80071e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b8:	f7fd faa6 	bl	8004708 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c0:	f7fd faa2 	bl	8004708 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	@ 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e200      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0xe4>
 80071de:	e014      	b.n	800720a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e0:	f7fd fa92 	bl	8004708 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fd fa8e 	bl	8004708 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	@ 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e1ec      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071fa:	4b53      	ldr	r3, [pc, #332]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f0      	bne.n	80071e8 <HAL_RCC_OscConfig+0x10c>
 8007206:	e000      	b.n	800720a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d063      	beq.n	80072de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007216:	4b4c      	ldr	r3, [pc, #304]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f003 030c 	and.w	r3, r3, #12
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007222:	4b49      	ldr	r3, [pc, #292]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 030c 	and.w	r3, r3, #12
 800722a:	2b08      	cmp	r3, #8
 800722c:	d11c      	bne.n	8007268 <HAL_RCC_OscConfig+0x18c>
 800722e:	4b46      	ldr	r3, [pc, #280]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d116      	bne.n	8007268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800723a:	4b43      	ldr	r3, [pc, #268]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_RCC_OscConfig+0x176>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e1c0      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007252:	4b3d      	ldr	r3, [pc, #244]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4939      	ldr	r1, [pc, #228]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007266:	e03a      	b.n	80072de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007270:	4b36      	ldr	r3, [pc, #216]	@ (800734c <HAL_RCC_OscConfig+0x270>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007276:	f7fd fa47 	bl	8004708 <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800727e:	f7fd fa43 	bl	8004708 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e1a1      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007290:	4b2d      	ldr	r3, [pc, #180]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729c:	4b2a      	ldr	r3, [pc, #168]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	4927      	ldr	r1, [pc, #156]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
 80072b0:	e015      	b.n	80072de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <HAL_RCC_OscConfig+0x270>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b8:	f7fd fa26 	bl	8004708 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c0:	f7fd fa22 	bl	8004708 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e180      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03a      	beq.n	8007360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d019      	beq.n	8007326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072f2:	4b17      	ldr	r3, [pc, #92]	@ (8007350 <HAL_RCC_OscConfig+0x274>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f8:	f7fd fa06 	bl	8004708 <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007300:	f7fd fa02 	bl	8004708 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e160      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <HAL_RCC_OscConfig+0x26c>)
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800731e:	2001      	movs	r0, #1
 8007320:	f000 fad8 	bl	80078d4 <RCC_Delay>
 8007324:	e01c      	b.n	8007360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <HAL_RCC_OscConfig+0x274>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732c:	f7fd f9ec 	bl	8004708 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007332:	e00f      	b.n	8007354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007334:	f7fd f9e8 	bl	8004708 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d908      	bls.n	8007354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e146      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
 8007346:	bf00      	nop
 8007348:	40021000 	.word	0x40021000
 800734c:	42420000 	.word	0x42420000
 8007350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	4b92      	ldr	r3, [pc, #584]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e9      	bne.n	8007334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80a6 	beq.w	80074ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007372:	4b8b      	ldr	r3, [pc, #556]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10d      	bne.n	800739a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800737e:	4b88      	ldr	r3, [pc, #544]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	4a87      	ldr	r2, [pc, #540]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007388:	61d3      	str	r3, [r2, #28]
 800738a:	4b85      	ldr	r3, [pc, #532]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007392:	60bb      	str	r3, [r7, #8]
 8007394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739a:	4b82      	ldr	r3, [pc, #520]	@ (80075a4 <HAL_RCC_OscConfig+0x4c8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d118      	bne.n	80073d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073a6:	4b7f      	ldr	r3, [pc, #508]	@ (80075a4 <HAL_RCC_OscConfig+0x4c8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7e      	ldr	r2, [pc, #504]	@ (80075a4 <HAL_RCC_OscConfig+0x4c8>)
 80073ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073b2:	f7fd f9a9 	bl	8004708 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ba:	f7fd f9a5 	bl	8004708 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b64      	cmp	r3, #100	@ 0x64
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e103      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073cc:	4b75      	ldr	r3, [pc, #468]	@ (80075a4 <HAL_RCC_OscConfig+0x4c8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d106      	bne.n	80073ee <HAL_RCC_OscConfig+0x312>
 80073e0:	4b6f      	ldr	r3, [pc, #444]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	4a6e      	ldr	r2, [pc, #440]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	6213      	str	r3, [r2, #32]
 80073ec:	e02d      	b.n	800744a <HAL_RCC_OscConfig+0x36e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10c      	bne.n	8007410 <HAL_RCC_OscConfig+0x334>
 80073f6:	4b6a      	ldr	r3, [pc, #424]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4a69      	ldr	r2, [pc, #420]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	6213      	str	r3, [r2, #32]
 8007402:	4b67      	ldr	r3, [pc, #412]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	4a66      	ldr	r2, [pc, #408]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007408:	f023 0304 	bic.w	r3, r3, #4
 800740c:	6213      	str	r3, [r2, #32]
 800740e:	e01c      	b.n	800744a <HAL_RCC_OscConfig+0x36e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b05      	cmp	r3, #5
 8007416:	d10c      	bne.n	8007432 <HAL_RCC_OscConfig+0x356>
 8007418:	4b61      	ldr	r3, [pc, #388]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	4a60      	ldr	r2, [pc, #384]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	6213      	str	r3, [r2, #32]
 8007424:	4b5e      	ldr	r3, [pc, #376]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	4a5d      	ldr	r2, [pc, #372]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	6213      	str	r3, [r2, #32]
 8007430:	e00b      	b.n	800744a <HAL_RCC_OscConfig+0x36e>
 8007432:	4b5b      	ldr	r3, [pc, #364]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	4a5a      	ldr	r2, [pc, #360]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007438:	f023 0301 	bic.w	r3, r3, #1
 800743c:	6213      	str	r3, [r2, #32]
 800743e:	4b58      	ldr	r3, [pc, #352]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	4a57      	ldr	r2, [pc, #348]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007452:	f7fd f959 	bl	8004708 <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007458:	e00a      	b.n	8007470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745a:	f7fd f955 	bl	8004708 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e0b1      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007470:	4b4b      	ldr	r3, [pc, #300]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0ee      	beq.n	800745a <HAL_RCC_OscConfig+0x37e>
 800747c:	e014      	b.n	80074a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800747e:	f7fd f943 	bl	8004708 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fd f93f 	bl	8004708 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e09b      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749c:	4b40      	ldr	r3, [pc, #256]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1ee      	bne.n	8007486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d105      	bne.n	80074ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ae:	4b3c      	ldr	r3, [pc, #240]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4a3b      	ldr	r2, [pc, #236]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80074b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8087 	beq.w	80075d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074c4:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f003 030c 	and.w	r3, r3, #12
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d061      	beq.n	8007594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d146      	bne.n	8007566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d8:	4b33      	ldr	r3, [pc, #204]	@ (80075a8 <HAL_RCC_OscConfig+0x4cc>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074de:	f7fd f913 	bl	8004708 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e6:	f7fd f90f 	bl	8004708 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e06d      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074f8:	4b29      	ldr	r3, [pc, #164]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f0      	bne.n	80074e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800750c:	d108      	bne.n	8007520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800750e:	4b24      	ldr	r3, [pc, #144]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4921      	ldr	r1, [pc, #132]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800751c:	4313      	orrs	r3, r2
 800751e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007520:	4b1f      	ldr	r3, [pc, #124]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a19      	ldr	r1, [r3, #32]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	430b      	orrs	r3, r1
 8007532:	491b      	ldr	r1, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <HAL_RCC_OscConfig+0x4cc>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753e:	f7fd f8e3 	bl	8004708 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007546:	f7fd f8df 	bl	8004708 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e03d      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007558:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x46a>
 8007564:	e035      	b.n	80075d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007566:	4b10      	ldr	r3, [pc, #64]	@ (80075a8 <HAL_RCC_OscConfig+0x4cc>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756c:	f7fd f8cc 	bl	8004708 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007574:	f7fd f8c8 	bl	8004708 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e026      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007586:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <HAL_RCC_OscConfig+0x4c4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x498>
 8007592:	e01e      	b.n	80075d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e019      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
 80075a0:	40021000 	.word	0x40021000
 80075a4:	40007000 	.word	0x40007000
 80075a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80075ac:	4b0b      	ldr	r3, [pc, #44]	@ (80075dc <HAL_RCC_OscConfig+0x500>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d106      	bne.n	80075ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d001      	beq.n	80075d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40021000 	.word	0x40021000

080075e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0d0      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075f4:	4b6a      	ldr	r3, [pc, #424]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d910      	bls.n	8007624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b67      	ldr	r3, [pc, #412]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 0207 	bic.w	r2, r3, #7
 800760a:	4965      	ldr	r1, [pc, #404]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007612:	4b63      	ldr	r3, [pc, #396]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0b8      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d020      	beq.n	8007672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800763c:	4b59      	ldr	r3, [pc, #356]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a58      	ldr	r2, [pc, #352]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007642:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007654:	4b53      	ldr	r3, [pc, #332]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	4a52      	ldr	r2, [pc, #328]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800765a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800765e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007660:	4b50      	ldr	r3, [pc, #320]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	494d      	ldr	r1, [pc, #308]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d040      	beq.n	8007700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d107      	bne.n	8007696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007686:	4b47      	ldr	r3, [pc, #284]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d115      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e07f      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d107      	bne.n	80076ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800769e:	4b41      	ldr	r3, [pc, #260]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e073      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ae:	4b3d      	ldr	r3, [pc, #244]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e06b      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076be:	4b39      	ldr	r3, [pc, #228]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f023 0203 	bic.w	r2, r3, #3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4936      	ldr	r1, [pc, #216]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076d0:	f7fd f81a 	bl	8004708 <HAL_GetTick>
 80076d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d6:	e00a      	b.n	80076ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076d8:	f7fd f816 	bl	8004708 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e053      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	4b2d      	ldr	r3, [pc, #180]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f003 020c 	and.w	r2, r3, #12
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d1eb      	bne.n	80076d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007700:	4b27      	ldr	r3, [pc, #156]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d210      	bcs.n	8007730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800770e:	4b24      	ldr	r3, [pc, #144]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f023 0207 	bic.w	r2, r3, #7
 8007716:	4922      	ldr	r1, [pc, #136]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	4313      	orrs	r3, r2
 800771c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800771e:	4b20      	ldr	r3, [pc, #128]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d001      	beq.n	8007730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e032      	b.n	8007796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800773c:	4b19      	ldr	r3, [pc, #100]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4916      	ldr	r1, [pc, #88]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800775a:	4b12      	ldr	r3, [pc, #72]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	490e      	ldr	r1, [pc, #56]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 800776a:	4313      	orrs	r3, r2
 800776c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800776e:	f000 f821 	bl	80077b4 <HAL_RCC_GetSysClockFreq>
 8007772:	4602      	mov	r2, r0
 8007774:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	091b      	lsrs	r3, r3, #4
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	490a      	ldr	r1, [pc, #40]	@ (80077a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007780:	5ccb      	ldrb	r3, [r1, r3]
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	4a09      	ldr	r2, [pc, #36]	@ (80077ac <HAL_RCC_ClockConfig+0x1cc>)
 8007788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800778a:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <HAL_RCC_ClockConfig+0x1d0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc ff78 	bl	8004684 <HAL_InitTick>

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40022000 	.word	0x40022000
 80077a4:	40021000 	.word	0x40021000
 80077a8:	0800e7a8 	.word	0x0800e7a8
 80077ac:	20000028 	.word	0x20000028
 80077b0:	2000002c 	.word	0x2000002c

080077b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b4:	b490      	push	{r4, r7}
 80077b6:	b08a      	sub	sp, #40	@ 0x28
 80077b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80077ba:	4b29      	ldr	r3, [pc, #164]	@ (8007860 <HAL_RCC_GetSysClockFreq+0xac>)
 80077bc:	1d3c      	adds	r4, r7, #4
 80077be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80077c4:	f240 2301 	movw	r3, #513	@ 0x201
 80077c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	2300      	movs	r3, #0
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80077de:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <HAL_RCC_GetSysClockFreq+0xb0>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f003 030c 	and.w	r3, r3, #12
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d002      	beq.n	80077f4 <HAL_RCC_GetSysClockFreq+0x40>
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d003      	beq.n	80077fa <HAL_RCC_GetSysClockFreq+0x46>
 80077f2:	e02b      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007868 <HAL_RCC_GetSysClockFreq+0xb4>)
 80077f6:	623b      	str	r3, [r7, #32]
      break;
 80077f8:	e02b      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	0c9b      	lsrs	r3, r3, #18
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	3328      	adds	r3, #40	@ 0x28
 8007804:	443b      	add	r3, r7
 8007806:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800780a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d012      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007816:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	0c5b      	lsrs	r3, r3, #17
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	3328      	adds	r3, #40	@ 0x28
 8007822:	443b      	add	r3, r7
 8007824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007828:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4a0e      	ldr	r2, [pc, #56]	@ (8007868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800782e:	fb03 f202 	mul.w	r2, r3, r2
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
 800783a:	e004      	b.n	8007846 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4a0b      	ldr	r2, [pc, #44]	@ (800786c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007840:	fb02 f303 	mul.w	r3, r2, r3
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	623b      	str	r3, [r7, #32]
      break;
 800784a:	e002      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800784c:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800784e:	623b      	str	r3, [r7, #32]
      break;
 8007850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007852:	6a3b      	ldr	r3, [r7, #32]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3728      	adds	r7, #40	@ 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bc90      	pop	{r4, r7}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	0800e740 	.word	0x0800e740
 8007864:	40021000 	.word	0x40021000
 8007868:	007a1200 	.word	0x007a1200
 800786c:	003d0900 	.word	0x003d0900

08007870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007874:	4b02      	ldr	r3, [pc, #8]	@ (8007880 <HAL_RCC_GetHCLKFreq+0x10>)
 8007876:	681b      	ldr	r3, [r3, #0]
}
 8007878:	4618      	mov	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr
 8007880:	20000028 	.word	0x20000028

08007884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007888:	f7ff fff2 	bl	8007870 <HAL_RCC_GetHCLKFreq>
 800788c:	4602      	mov	r2, r0
 800788e:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4903      	ldr	r1, [pc, #12]	@ (80078a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800789a:	5ccb      	ldrb	r3, [r1, r3]
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40021000 	.word	0x40021000
 80078a8:	0800e7b8 	.word	0x0800e7b8

080078ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078b0:	f7ff ffde 	bl	8007870 <HAL_RCC_GetHCLKFreq>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	0adb      	lsrs	r3, r3, #11
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	4903      	ldr	r1, [pc, #12]	@ (80078d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078c2:	5ccb      	ldrb	r3, [r1, r3]
 80078c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	40021000 	.word	0x40021000
 80078d0:	0800e7b8 	.word	0x0800e7b8

080078d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007908 <RCC_Delay+0x34>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	@ (800790c <RCC_Delay+0x38>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	0a5b      	lsrs	r3, r3, #9
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80078f0:	bf00      	nop
  }
  while (Delay --);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	60fa      	str	r2, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f9      	bne.n	80078f0 <RCC_Delay+0x1c>
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	20000028 	.word	0x20000028
 800790c:	10624dd3 	.word	0x10624dd3

08007910 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d07d      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800792c:	2300      	movs	r3, #0
 800792e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007930:	4b4f      	ldr	r3, [pc, #316]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800793c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4a4b      	ldr	r2, [pc, #300]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007946:	61d3      	str	r3, [r2, #28]
 8007948:	4b49      	ldr	r3, [pc, #292]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007954:	2301      	movs	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007958:	4b46      	ldr	r3, [pc, #280]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007960:	2b00      	cmp	r3, #0
 8007962:	d118      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007964:	4b43      	ldr	r3, [pc, #268]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a42      	ldr	r2, [pc, #264]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800796a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800796e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007970:	f7fc feca 	bl	8004708 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007976:	e008      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007978:	f7fc fec6 	bl	8004708 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b64      	cmp	r3, #100	@ 0x64
 8007984:	d901      	bls.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e06d      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800798a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0f0      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007996:	4b36      	ldr	r3, [pc, #216]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800799e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d02e      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d027      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079be:	4b2e      	ldr	r3, [pc, #184]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079ca:	4a29      	ldr	r2, [pc, #164]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d014      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079da:	f7fc fe95 	bl	8004708 <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fc fe91 	bl	8004708 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e036      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ee      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4917      	ldr	r1, [pc, #92]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d105      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1c:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	4a13      	ldr	r2, [pc, #76]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	490b      	ldr	r1, [pc, #44]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	4904      	ldr	r1, [pc, #16]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40021000 	.word	0x40021000
 8007a74:	40007000 	.word	0x40007000
 8007a78:	42420440 	.word	0x42420440

08007a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e076      	b.n	8007b7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d108      	bne.n	8007aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a9e:	d009      	beq.n	8007ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
 8007aa6:	e005      	b.n	8007ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fc fc50 	bl	8004374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b38:	ea42 0103 	orr.w	r1, r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	0c1a      	lsrs	r2, r3, #16
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f002 0204 	and.w	r2, r2, #4
 8007b5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69da      	ldr	r2, [r3, #28]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08c      	sub	sp, #48	@ 0x30
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b92:	2301      	movs	r3, #1
 8007b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x26>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e18a      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0x33c>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bb2:	f7fc fda9 	bl	8004708 <HAL_GetTick>
 8007bb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bc8:	887b      	ldrh	r3, [r7, #2]
 8007bca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d00f      	beq.n	8007bf4 <HAL_SPI_TransmitReceive+0x70>
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bda:	d107      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d103      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x68>
 8007be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d003      	beq.n	8007bf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007bf2:	e15b      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0x82>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0x82>
 8007c00:	887b      	ldrh	r3, [r7, #2]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007c0c:	e14e      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d003      	beq.n	8007c22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	887a      	ldrh	r2, [r7, #2]
 8007c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	887a      	ldrh	r2, [r7, #2]
 8007c38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d007      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c7e:	d178      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x10a>
 8007c88:	8b7b      	ldrh	r3, [r7, #26]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d166      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cb2:	e053      	b.n	8007d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d11b      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x176>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d016      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x176>
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d113      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	1c9a      	adds	r2, r3, #2
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d119      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x1b8>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d014      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d24:	1c9a      	adds	r2, r3, #2
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d3c:	f7fc fce4 	bl	8004708 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d807      	bhi.n	8007d5c <HAL_SPI_TransmitReceive+0x1d8>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d003      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007d5a:	e0a7      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1a6      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x130>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1a1      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x130>
 8007d70:	e07c      	b.n	8007e6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x1fc>
 8007d7a:	8b7b      	ldrh	r3, [r7, #26]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d16b      	bne.n	8007e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da6:	e057      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d11c      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x26c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <HAL_SPI_TransmitReceive+0x26c>
 8007dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d114      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d119      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x2ae>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d014      	beq.n	8007e32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e32:	f7fc fc69 	bl	8004708 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d803      	bhi.n	8007e4a <HAL_SPI_TransmitReceive+0x2c6>
 8007e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d102      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x2cc>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007e56:	e029      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1a2      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x224>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d19d      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f8b1 	bl	8007fd8 <SPI_EndRxTxTransaction>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d006      	beq.n	8007e8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007e88:	e010      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	e000      	b.n	8007eac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3730      	adds	r7, #48	@ 0x30
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ed8:	f7fc fc16 	bl	8004708 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ee8:	f7fc fc0e 	bl	8004708 <HAL_GetTick>
 8007eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eee:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	015b      	lsls	r3, r3, #5
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	fb02 f303 	mul.w	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007efe:	e054      	b.n	8007faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d050      	beq.n	8007faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f08:	f7fc fbfe 	bl	8004708 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d902      	bls.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d13d      	bne.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f36:	d111      	bne.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f40:	d004      	beq.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f4a:	d107      	bne.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f64:	d10f      	bne.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e017      	b.n	8007fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	bf0c      	ite	eq
 8007fba:	2301      	moveq	r3, #1
 8007fbc:	2300      	movne	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d19b      	bne.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3720      	adds	r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000028 	.word	0x20000028

08007fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	2180      	movs	r1, #128	@ 0x80
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff ff6a 	bl	8007ec8 <SPI_WaitFlagStateUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f043 0220 	orr.w	r2, r3, #32
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e000      	b.n	800800c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e041      	b.n	80080aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fc f9e4 	bl	8004408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f000 fa70 	bl	8008538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d001      	beq.n	80080cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e03a      	b.n	8008142 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a18      	ldr	r2, [pc, #96]	@ (800814c <HAL_TIM_Base_Start_IT+0x98>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00e      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x58>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f6:	d009      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x58>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a14      	ldr	r2, [pc, #80]	@ (8008150 <HAL_TIM_Base_Start_IT+0x9c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x58>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a13      	ldr	r2, [pc, #76]	@ (8008154 <HAL_TIM_Base_Start_IT+0xa0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d111      	bne.n	8008130 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b06      	cmp	r3, #6
 800811c:	d010      	beq.n	8008140 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	e007      	b.n	8008140 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800

08008158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d122      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b02      	cmp	r3, #2
 800817a:	d11b      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0202 	mvn.w	r2, #2
 8008184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f9b1 	bl	8008502 <HAL_TIM_IC_CaptureCallback>
 80081a0:	e005      	b.n	80081ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f9a4 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f9b3 	bl	8008514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d122      	bne.n	8008208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d11b      	bne.n	8008208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f06f 0204 	mvn.w	r2, #4
 80081d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2202      	movs	r2, #2
 80081de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f987 	bl	8008502 <HAL_TIM_IC_CaptureCallback>
 80081f4:	e005      	b.n	8008202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f97a 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f989 	bl	8008514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b08      	cmp	r3, #8
 8008214:	d122      	bne.n	800825c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b08      	cmp	r3, #8
 8008222:	d11b      	bne.n	800825c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0208 	mvn.w	r2, #8
 800822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f95d 	bl	8008502 <HAL_TIM_IC_CaptureCallback>
 8008248:	e005      	b.n	8008256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f950 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f95f 	bl	8008514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b10      	cmp	r3, #16
 8008268:	d122      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b10      	cmp	r3, #16
 8008276:	d11b      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0210 	mvn.w	r2, #16
 8008280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2208      	movs	r2, #8
 8008286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f933 	bl	8008502 <HAL_TIM_IC_CaptureCallback>
 800829c:	e005      	b.n	80082aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f926 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f935 	bl	8008514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d10e      	bne.n	80082dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d107      	bne.n	80082dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0201 	mvn.w	r2, #1
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7f8 fd50 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e6:	2b80      	cmp	r3, #128	@ 0x80
 80082e8:	d10e      	bne.n	8008308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f4:	2b80      	cmp	r3, #128	@ 0x80
 80082f6:	d107      	bne.n	8008308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa77 	bl	80087f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008312:	2b40      	cmp	r3, #64	@ 0x40
 8008314:	d10e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008320:	2b40      	cmp	r3, #64	@ 0x40
 8008322:	d107      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800832c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8f9 	bl	8008526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	d10e      	bne.n	8008360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b20      	cmp	r3, #32
 800834e:	d107      	bne.n	8008360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0220 	mvn.w	r2, #32
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa42 	bl	80087e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIM_ConfigClockSource+0x18>
 800837c:	2302      	movs	r3, #2
 800837e:	e0b3      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x180>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800839e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b8:	d03e      	beq.n	8008438 <HAL_TIM_ConfigClockSource+0xd0>
 80083ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083be:	f200 8087 	bhi.w	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c6:	f000 8085 	beq.w	80084d4 <HAL_TIM_ConfigClockSource+0x16c>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ce:	d87f      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083d0:	2b70      	cmp	r3, #112	@ 0x70
 80083d2:	d01a      	beq.n	800840a <HAL_TIM_ConfigClockSource+0xa2>
 80083d4:	2b70      	cmp	r3, #112	@ 0x70
 80083d6:	d87b      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083d8:	2b60      	cmp	r3, #96	@ 0x60
 80083da:	d050      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x116>
 80083dc:	2b60      	cmp	r3, #96	@ 0x60
 80083de:	d877      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083e0:	2b50      	cmp	r3, #80	@ 0x50
 80083e2:	d03c      	beq.n	800845e <HAL_TIM_ConfigClockSource+0xf6>
 80083e4:	2b50      	cmp	r3, #80	@ 0x50
 80083e6:	d873      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083e8:	2b40      	cmp	r3, #64	@ 0x40
 80083ea:	d058      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x136>
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d86f      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083f0:	2b30      	cmp	r3, #48	@ 0x30
 80083f2:	d064      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x156>
 80083f4:	2b30      	cmp	r3, #48	@ 0x30
 80083f6:	d86b      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d060      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x156>
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d867      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d05c      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x156>
 8008404:	2b10      	cmp	r3, #16
 8008406:	d05a      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008408:	e062      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f000 f966 	bl	80086ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800842c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	609a      	str	r2, [r3, #8]
      break;
 8008436:	e04e      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6899      	ldr	r1, [r3, #8]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f000 f94f 	bl	80086ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800845a:	609a      	str	r2, [r3, #8]
      break;
 800845c:	e03b      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	6859      	ldr	r1, [r3, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	461a      	mov	r2, r3
 800846c:	f000 f8c6 	bl	80085fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2150      	movs	r1, #80	@ 0x50
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f91d 	bl	80086b6 <TIM_ITRx_SetConfig>
      break;
 800847c:	e02b      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6859      	ldr	r1, [r3, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	461a      	mov	r2, r3
 800848c:	f000 f8e4 	bl	8008658 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2160      	movs	r1, #96	@ 0x60
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f90d 	bl	80086b6 <TIM_ITRx_SetConfig>
      break;
 800849c:	e01b      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6859      	ldr	r1, [r3, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f000 f8a6 	bl	80085fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2140      	movs	r1, #64	@ 0x40
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f8fd 	bl	80086b6 <TIM_ITRx_SetConfig>
      break;
 80084bc:	e00b      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f000 f8f4 	bl	80086b6 <TIM_ITRx_SetConfig>
        break;
 80084ce:	e002      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr

08008526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr

08008538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a29      	ldr	r2, [pc, #164]	@ (80085f0 <TIM_Base_SetConfig+0xb8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x30>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x30>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a26      	ldr	r2, [pc, #152]	@ (80085f4 <TIM_Base_SetConfig+0xbc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x30>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a25      	ldr	r2, [pc, #148]	@ (80085f8 <TIM_Base_SetConfig+0xc0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1c      	ldr	r2, [pc, #112]	@ (80085f0 <TIM_Base_SetConfig+0xb8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_Base_SetConfig+0x62>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008588:	d007      	beq.n	800859a <TIM_Base_SetConfig+0x62>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a19      	ldr	r2, [pc, #100]	@ (80085f4 <TIM_Base_SetConfig+0xbc>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_Base_SetConfig+0x62>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a18      	ldr	r2, [pc, #96]	@ (80085f8 <TIM_Base_SetConfig+0xc0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a07      	ldr	r2, [pc, #28]	@ (80085f0 <TIM_Base_SetConfig+0xb8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800

080085fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0201 	bic.w	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 030a 	bic.w	r3, r3, #10
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f023 0210 	bic.w	r2, r3, #16
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	031b      	lsls	r3, r3, #12
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	621a      	str	r2, [r3, #32]
}
 80086ac:	bf00      	nop
 80086ae:	371c      	adds	r7, #28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr

080086b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f043 0307 	orr.w	r3, r3, #7
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	609a      	str	r2, [r3, #8]
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008704:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	021a      	lsls	r2, r3, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	431a      	orrs	r2, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	609a      	str	r2, [r3, #8]
}
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800873c:	2302      	movs	r3, #2
 800873e:	e046      	b.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a16      	ldr	r2, [pc, #88]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00e      	beq.n	80087a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878c:	d009      	beq.n	80087a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a12      	ldr	r2, [pc, #72]	@ (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d004      	beq.n	80087a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a10      	ldr	r2, [pc, #64]	@ (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d10c      	bne.n	80087bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800

080087e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr

080087f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e03f      	b.n	800889a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fb fe0e 	bl	8004450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2224      	movs	r2, #36	@ 0x24
 8008838:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800884a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f9a3 	bl	8008b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	695a      	ldr	r2, [r3, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b08a      	sub	sp, #40	@ 0x28
 80088a6:	af02      	add	r7, sp, #8
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	603b      	str	r3, [r7, #0]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d17c      	bne.n	80089bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_UART_Transmit+0x2c>
 80088c8:	88fb      	ldrh	r3, [r7, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e075      	b.n	80089be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_UART_Transmit+0x3e>
 80088dc:	2302      	movs	r3, #2
 80088de:	e06e      	b.n	80089be <HAL_UART_Transmit+0x11c>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2221      	movs	r2, #33	@ 0x21
 80088f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088f6:	f7fb ff07 	bl	8004708 <HAL_GetTick>
 80088fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	88fa      	ldrh	r2, [r7, #6]
 8008900:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	88fa      	ldrh	r2, [r7, #6]
 8008906:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008910:	d108      	bne.n	8008924 <HAL_UART_Transmit+0x82>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	e003      	b.n	800892c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008934:	e02a      	b.n	800898c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	2180      	movs	r1, #128	@ 0x80
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f8df 	bl	8008b04 <UART_WaitOnFlagUntilTimeout>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e036      	b.n	80089be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008964:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	3302      	adds	r3, #2
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e007      	b.n	800897e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	3301      	adds	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1cf      	bne.n	8008936 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	2140      	movs	r1, #64	@ 0x40
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f8af 	bl	8008b04 <UART_WaitOnFlagUntilTimeout>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e006      	b.n	80089be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3720      	adds	r7, #32
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b08a      	sub	sp, #40	@ 0x28
 80089ca:	af02      	add	r7, sp, #8
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	f040 8089 	bne.w	8008afa <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <HAL_UART_Receive+0x2e>
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e081      	b.n	8008afc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Receive+0x40>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e07a      	b.n	8008afc <HAL_UART_Receive+0x136>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2222      	movs	r2, #34	@ 0x22
 8008a18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a1c:	f7fb fe74 	bl	8004708 <HAL_GetTick>
 8008a20:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a36:	d108      	bne.n	8008a4a <HAL_UART_Receive+0x84>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	e003      	b.n	8008a52 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a5a:	e043      	b.n	8008ae4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2120      	movs	r1, #32
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 f84c 	bl	8008b04 <UART_WaitOnFlagUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e042      	b.n	8008afc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10c      	bne.n	8008a96 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	3302      	adds	r3, #2
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	e01f      	b.n	8008ad6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9e:	d007      	beq.n	8008ab0 <HAL_UART_Receive+0xea>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <HAL_UART_Receive+0xf8>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e008      	b.n	8008ad0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1b6      	bne.n	8008a5c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e000      	b.n	8008afc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008afa:	2302      	movs	r3, #2
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b14:	e02c      	b.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d028      	beq.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b24:	f7fb fdf0 	bl	8004708 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d21d      	bcs.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008b42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695a      	ldr	r2, [r3, #20]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0201 	bic.w	r2, r2, #1
 8008b52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e00f      	b.n	8008b90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d0c3      	beq.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008bd2:	f023 030c 	bic.w	r3, r3, #12
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8008cac <UART_SetConfig+0x114>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d103      	bne.n	8008c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c00:	f7fe fe54 	bl	80078ac <HAL_RCC_GetPCLK2Freq>
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	e002      	b.n	8008c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008c08:	f7fe fe3c 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8008c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009a      	lsls	r2, r3, #2
 8008c18:	441a      	add	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c24:	4a22      	ldr	r2, [pc, #136]	@ (8008cb0 <UART_SetConfig+0x118>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	0119      	lsls	r1, r3, #4
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009a      	lsls	r2, r3, #2
 8008c38:	441a      	add	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c44:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb0 <UART_SetConfig+0x118>)
 8008c46:	fba3 0302 	umull	r0, r3, r3, r2
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	2064      	movs	r0, #100	@ 0x64
 8008c4e:	fb00 f303 	mul.w	r3, r0, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	3332      	adds	r3, #50	@ 0x32
 8008c58:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <UART_SetConfig+0x118>)
 8008c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c64:	4419      	add	r1, r3
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009a      	lsls	r2, r3, #2
 8008c70:	441a      	add	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb0 <UART_SetConfig+0x118>)
 8008c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	2064      	movs	r0, #100	@ 0x64
 8008c86:	fb00 f303 	mul.w	r3, r0, r3
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	3332      	adds	r3, #50	@ 0x32
 8008c90:	4a07      	ldr	r2, [pc, #28]	@ (8008cb0 <UART_SetConfig+0x118>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	f003 020f 	and.w	r2, r3, #15
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40013800 	.word	0x40013800
 8008cb0:	51eb851f 	.word	0x51eb851f

08008cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	f107 0014 	add.w	r0, r7, #20
 8008cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	b004      	add	sp, #16
 8008cd2:	4770      	bx	lr

08008cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ce4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008ce8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bc80      	pop	{r7}
 8008cfe:	4770      	bx	lr

08008d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d08:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008d0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4013      	ands	r3, r2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bc80      	pop	{r7}
 8008d32:	4770      	bx	lr

08008d34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr

08008d4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	f107 0014 	add.w	r0, r7, #20
 8008d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bc80      	pop	{r7}
 8008d88:	b004      	add	sp, #16
 8008d8a:	4770      	bx	lr

08008d8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b09b      	sub	sp, #108	@ 0x6c
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	78db      	ldrb	r3, [r3, #3]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d81f      	bhi.n	8008dfe <USB_ActivateEndpoint+0x72>
 8008dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc4 <USB_ActivateEndpoint+0x38>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008df1 	.word	0x08008df1
 8008dcc:	08008e07 	.word	0x08008e07
 8008dd0:	08008de3 	.word	0x08008de3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008dd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ddc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008de0:	e012      	b.n	8008e08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008de2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008de6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008dea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008dee:	e00b      	b.n	8008e08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008df0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008df8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008dfc:	e004      	b.n	8008e08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008e04:	e000      	b.n	8008e08 <USB_ActivateEndpoint+0x7c>
      break;
 8008e06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	441a      	add	r2, r3
 8008e12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	441a      	add	r2, r3
 8008e56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	7b1b      	ldrb	r3, [r3, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f040 8149 	bne.w	800910a <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8084 	beq.w	8008f8a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	4413      	add	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	011a      	lsls	r2, r3, #4
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	81fb      	strh	r3, [r7, #14]
 8008ec4:	89fb      	ldrh	r3, [r7, #14]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01b      	beq.n	8008f06 <USB_ActivateEndpoint+0x17a>
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee4:	81bb      	strh	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	89bb      	ldrh	r3, [r7, #12]
 8008ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008efe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	78db      	ldrb	r3, [r3, #3]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d020      	beq.n	8008f50 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f24:	813b      	strh	r3, [r7, #8]
 8008f26:	893b      	ldrh	r3, [r7, #8]
 8008f28:	f083 0320 	eor.w	r3, r3, #32
 8008f2c:	813b      	strh	r3, [r7, #8]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	441a      	add	r2, r3
 8008f38:	893b      	ldrh	r3, [r7, #8]
 8008f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	8013      	strh	r3, [r2, #0]
 8008f4e:	e27f      	b.n	8009450 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f66:	817b      	strh	r3, [r7, #10]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	897b      	ldrh	r3, [r7, #10]
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
 8008f88:	e262      	b.n	8009450 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	461a      	mov	r2, r3
 8008f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9a:	4413      	add	r3, r2
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	011a      	lsls	r2, r3, #4
 8008fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	88db      	ldrh	r3, [r3, #6]
 8008fb2:	085b      	lsrs	r3, r3, #1
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	4413      	add	r3, r2
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	011a      	lsls	r2, r3, #4
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	4413      	add	r3, r2
 8008fdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fe0:	623b      	str	r3, [r7, #32]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d112      	bne.n	8009010 <USB_ActivateEndpoint+0x284>
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009008:	b29a      	uxth	r2, r3
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e02f      	b.n	8009070 <USB_ActivateEndpoint+0x2e4>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b3e      	cmp	r3, #62	@ 0x3e
 8009016:	d813      	bhi.n	8009040 <USB_ActivateEndpoint+0x2b4>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <USB_ActivateEndpoint+0x2a6>
 800902c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800902e:	3301      	adds	r3, #1
 8009030:	663b      	str	r3, [r7, #96]	@ 0x60
 8009032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009034:	b29b      	uxth	r3, r3
 8009036:	029b      	lsls	r3, r3, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	e017      	b.n	8009070 <USB_ActivateEndpoint+0x2e4>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	663b      	str	r3, [r7, #96]	@ 0x60
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <USB_ActivateEndpoint+0x2ce>
 8009054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009056:	3b01      	subs	r3, #1
 8009058:	663b      	str	r3, [r7, #96]	@ 0x60
 800905a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800905c:	b29b      	uxth	r3, r3
 800905e:	029b      	lsls	r3, r3, #10
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906a:	b29a      	uxth	r2, r3
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	83fb      	strh	r3, [r7, #30]
 800907e:	8bfb      	ldrh	r3, [r7, #30]
 8009080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01b      	beq.n	80090c0 <USB_ActivateEndpoint+0x334>
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909e:	83bb      	strh	r3, [r7, #28]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	441a      	add	r2, r3
 80090aa:	8bbb      	ldrh	r3, [r7, #28]
 80090ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090bc:	b29b      	uxth	r3, r3
 80090be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d6:	837b      	strh	r3, [r7, #26]
 80090d8:	8b7b      	ldrh	r3, [r7, #26]
 80090da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090de:	837b      	strh	r3, [r7, #26]
 80090e0:	8b7b      	ldrh	r3, [r7, #26]
 80090e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090e6:	837b      	strh	r3, [r7, #26]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	8b7b      	ldrh	r3, [r7, #26]
 80090f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009104:	b29b      	uxth	r3, r3
 8009106:	8013      	strh	r3, [r2, #0]
 8009108:	e1a2      	b.n	8009450 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009120:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800913a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800913e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009150:	b29b      	uxth	r3, r3
 8009152:	461a      	mov	r2, r3
 8009154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009156:	4413      	add	r3, r2
 8009158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	011a      	lsls	r2, r3, #4
 8009160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009162:	4413      	add	r3, r2
 8009164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009168:	657b      	str	r3, [r7, #84]	@ 0x54
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	891b      	ldrh	r3, [r3, #8]
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	b29b      	uxth	r3, r3
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009178:	801a      	strh	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	653b      	str	r3, [r7, #80]	@ 0x50
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009184:	b29b      	uxth	r3, r3
 8009186:	461a      	mov	r2, r3
 8009188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918a:	4413      	add	r3, r2
 800918c:	653b      	str	r3, [r7, #80]	@ 0x50
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	011a      	lsls	r2, r3, #4
 8009194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009196:	4413      	add	r3, r2
 8009198:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800919c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	895b      	ldrh	r3, [r3, #10]
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 8091 	bne.w	80092da <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80091c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80091c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01b      	beq.n	8009208 <USB_ActivateEndpoint+0x47c>
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	441a      	add	r2, r3
 80091f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80091f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009204:	b29b      	uxth	r3, r3
 8009206:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009216:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01b      	beq.n	8009258 <USB_ActivateEndpoint+0x4cc>
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009236:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	441a      	add	r2, r3
 8009242:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800924c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009254:	b29b      	uxth	r3, r3
 8009256:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800926a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009270:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009272:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009276:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009278:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800927a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800927e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800928c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929c:	b29b      	uxth	r3, r3
 800929e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092b6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	441a      	add	r2, r3
 80092c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80092c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	8013      	strh	r3, [r2, #0]
 80092d8:	e0ba      	b.n	8009450 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80092ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80092ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01d      	beq.n	8009332 <USB_ActivateEndpoint+0x5a6>
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800930c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	441a      	add	r2, r3
 800931a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800931e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800932a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932e:	b29b      	uxth	r3, r3
 8009330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009342:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01d      	beq.n	800938a <USB_ActivateEndpoint+0x5fe>
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009364:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	441a      	add	r2, r3
 8009372:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800937a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800937e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009382:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009386:	b29b      	uxth	r3, r3
 8009388:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	78db      	ldrb	r3, [r3, #3]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d024      	beq.n	80093dc <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80093ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80093b0:	f083 0320 	eor.w	r3, r3, #32
 80093b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	441a      	add	r2, r3
 80093c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80093c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	8013      	strh	r3, [r2, #0]
 80093da:	e01d      	b.n	8009418 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	441a      	add	r2, r3
 8009400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800940c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009414:	b29b      	uxth	r3, r3
 8009416:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800942a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800942e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	441a      	add	r2, r3
 800943a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800943c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944c:	b29b      	uxth	r3, r3
 800944e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009450:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009454:	4618      	mov	r0, r3
 8009456:	376c      	adds	r7, #108	@ 0x6c
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009460:	b480      	push	{r7}
 8009462:	b08d      	sub	sp, #52	@ 0x34
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	7b1b      	ldrb	r3, [r3, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 808e 	bne.w	8009590 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d044      	beq.n	8009506 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	81bb      	strh	r3, [r7, #12]
 800948a:	89bb      	ldrh	r3, [r7, #12]
 800948c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01b      	beq.n	80094cc <USB_DeactivateEndpoint+0x6c>
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094aa:	817b      	strh	r3, [r7, #10]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	441a      	add	r2, r3
 80094b6:	897b      	ldrh	r3, [r7, #10]
 80094b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094e2:	813b      	strh	r3, [r7, #8]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	441a      	add	r2, r3
 80094ee:	893b      	ldrh	r3, [r7, #8]
 80094f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009500:	b29b      	uxth	r3, r3
 8009502:	8013      	strh	r3, [r2, #0]
 8009504:	e192      	b.n	800982c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	827b      	strh	r3, [r7, #18]
 8009514:	8a7b      	ldrh	r3, [r7, #18]
 8009516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01b      	beq.n	8009556 <USB_DeactivateEndpoint+0xf6>
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009534:	823b      	strh	r3, [r7, #16]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	441a      	add	r2, r3
 8009540:	8a3b      	ldrh	r3, [r7, #16]
 8009542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800954a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800954e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009552:	b29b      	uxth	r3, r3
 8009554:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800956c:	81fb      	strh	r3, [r7, #14]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	441a      	add	r2, r3
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800957e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958a:	b29b      	uxth	r3, r3
 800958c:	8013      	strh	r3, [r2, #0]
 800958e:	e14d      	b.n	800982c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	785b      	ldrb	r3, [r3, #1]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f040 80a5 	bne.w	80096e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	843b      	strh	r3, [r7, #32]
 80095a8:	8c3b      	ldrh	r3, [r7, #32]
 80095aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01b      	beq.n	80095ea <USB_DeactivateEndpoint+0x18a>
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095c8:	83fb      	strh	r3, [r7, #30]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	441a      	add	r2, r3
 80095d4:	8bfb      	ldrh	r3, [r7, #30]
 80095d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	83bb      	strh	r3, [r7, #28]
 80095f8:	8bbb      	ldrh	r3, [r7, #28]
 80095fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d01b      	beq.n	800963a <USB_DeactivateEndpoint+0x1da>
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009618:	837b      	strh	r3, [r7, #26]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	441a      	add	r2, r3
 8009624:	8b7b      	ldrh	r3, [r7, #26]
 8009626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800962a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800962e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009632:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009636:	b29b      	uxth	r3, r3
 8009638:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	b29b      	uxth	r3, r3
 8009648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009650:	833b      	strh	r3, [r7, #24]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	441a      	add	r2, r3
 800965c:	8b3b      	ldrh	r3, [r7, #24]
 800965e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800966a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800966e:	b29b      	uxth	r3, r3
 8009670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29b      	uxth	r3, r3
 8009680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009688:	82fb      	strh	r3, [r7, #22]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	441a      	add	r2, r3
 8009694:	8afb      	ldrh	r3, [r7, #22]
 8009696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800969a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096c0:	82bb      	strh	r3, [r7, #20]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	441a      	add	r2, r3
 80096cc:	8abb      	ldrh	r3, [r7, #20]
 80096ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8013      	strh	r3, [r2, #0]
 80096e2:	e0a3      	b.n	800982c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80096f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80096f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01b      	beq.n	8009734 <USB_DeactivateEndpoint+0x2d4>
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800970e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009712:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	441a      	add	r2, r3
 800971e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800972c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009730:	b29b      	uxth	r3, r3
 8009732:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009742:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01b      	beq.n	8009784 <USB_DeactivateEndpoint+0x324>
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	b29b      	uxth	r3, r3
 800975a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800975e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009762:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	441a      	add	r2, r3
 800976e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800977c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009780:	b29b      	uxth	r3, r3
 8009782:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800979a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	441a      	add	r2, r3
 80097a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80097a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	441a      	add	r2, r3
 80097de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800980a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	441a      	add	r2, r3
 8009816:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800981c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009828:	b29b      	uxth	r3, r3
 800982a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3734      	adds	r7, #52	@ 0x34
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b0c4      	sub	sp, #272	@ 0x110
 800983c:	af00      	add	r7, sp, #0
 800983e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009842:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009846:	6018      	str	r0, [r3, #0]
 8009848:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800984c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009850:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009852:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009856:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	785b      	ldrb	r3, [r3, #1]
 800985e:	2b01      	cmp	r3, #1
 8009860:	f040 86ec 	bne.w	800a63c <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009868:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009874:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	429a      	cmp	r2, r3
 800987e:	d908      	bls.n	8009892 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009884:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009890:	e007      	b.n	80098a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009892:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009896:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80098a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	7b1b      	ldrb	r3, [r3, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d142      	bne.n	8009938 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80098b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098b6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6959      	ldr	r1, [r3, #20]
 80098be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	88da      	ldrh	r2, [r3, #6]
 80098ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80098d4:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80098d8:	6800      	ldr	r0, [r0, #0]
 80098da:	f001 fc92 	bl	800b202 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	4413      	add	r3, r2
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009906:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	011a      	lsls	r2, r3, #4
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4413      	add	r3, r2
 8009914:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8009918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800991c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009926:	b29a      	uxth	r2, r3
 8009928:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800992c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	f000 be34 	b.w	800a5a0 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009938:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800993c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	78db      	ldrb	r3, [r3, #3]
 8009944:	2b02      	cmp	r3, #2
 8009946:	f040 843b 	bne.w	800a1c0 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800994a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800994e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6a1a      	ldr	r2, [r3, #32]
 8009956:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800995a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	429a      	cmp	r2, r3
 8009964:	f240 83b8 	bls.w	800a0d8 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009976:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800998a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009992:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009996:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	441a      	add	r2, r3
 80099ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80099b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099b8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80099bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80099c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6a1a      	ldr	r2, [r3, #32]
 80099d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 81b4 	beq.w	8009d72 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d16d      	bne.n	8009b02 <USB_EPStartXfer+0x2ca>
 8009a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	461a      	mov	r2, r3
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	4413      	add	r3, r2
 8009a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	011a      	lsls	r2, r3, #4
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d112      	bne.n	8009a90 <USB_EPStartXfer+0x258>
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	e05d      	b.n	8009b4c <USB_EPStartXfer+0x314>
 8009a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a96:	d817      	bhi.n	8009ac8 <USB_EPStartXfer+0x290>
 8009a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9c:	085b      	lsrs	r3, r3, #1
 8009a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <USB_EPStartXfer+0x280>
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	029b      	lsls	r3, r3, #10
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e041      	b.n	8009b4c <USB_EPStartXfer+0x314>
 8009ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009acc:	095b      	lsrs	r3, r3, #5
 8009ace:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <USB_EPStartXfer+0x2b0>
 8009ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	029b      	lsls	r3, r3, #10
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	e024      	b.n	8009b4c <USB_EPStartXfer+0x314>
 8009b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d11c      	bne.n	8009b4c <USB_EPStartXfer+0x314>
 8009b12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b26:	4413      	add	r3, r2
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	011a      	lsls	r2, r3, #4
 8009b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	895b      	ldrh	r3, [r3, #10]
 8009b58:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6959      	ldr	r1, [r3, #20]
 8009b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009b72:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009b76:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	f001 fb41 	bl	800b202 <USB_WritePMA>
            ep->xfer_buff += len;
 8009b80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	695a      	ldr	r2, [r3, #20]
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b90:	441a      	add	r2, r3
 8009b92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a1a      	ldr	r2, [r3, #32]
 8009baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d90f      	bls.n	8009bda <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8009bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6a1a      	ldr	r2, [r3, #32]
 8009bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bca:	1ad2      	subs	r2, r2, r3
 8009bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	621a      	str	r2, [r3, #32]
 8009bd8:	e00e      	b.n	8009bf8 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d16d      	bne.n	8009ce4 <USB_EPStartXfer+0x4ac>
 8009c08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	61fb      	str	r3, [r7, #28]
 8009c14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	011a      	lsls	r2, r3, #4
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d112      	bne.n	8009c72 <USB_EPStartXfer+0x43a>
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	801a      	strh	r2, [r3, #0]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	801a      	strh	r2, [r3, #0]
 8009c70:	e063      	b.n	8009d3a <USB_EPStartXfer+0x502>
 8009c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c78:	d817      	bhi.n	8009caa <USB_EPStartXfer+0x472>
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <USB_EPStartXfer+0x462>
 8009c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c94:	3301      	adds	r3, #1
 8009c96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	029b      	lsls	r3, r3, #10
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	e047      	b.n	8009d3a <USB_EPStartXfer+0x502>
 8009caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb8:	f003 031f 	and.w	r3, r3, #31
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <USB_EPStartXfer+0x492>
 8009cc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	029b      	lsls	r3, r3, #10
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	e02a      	b.n	8009d3a <USB_EPStartXfer+0x502>
 8009ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d122      	bne.n	8009d3a <USB_EPStartXfer+0x502>
 8009cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	461a      	mov	r2, r3
 8009d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d14:	4413      	add	r3, r2
 8009d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	011a      	lsls	r2, r3, #4
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	4413      	add	r3, r2
 8009d2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d2e:	623b      	str	r3, [r7, #32]
 8009d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	891b      	ldrh	r3, [r3, #8]
 8009d46:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6959      	ldr	r1, [r3, #20]
 8009d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009d60:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009d64:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009d68:	6800      	ldr	r0, [r0, #0]
 8009d6a:	f001 fa4a 	bl	800b202 <USB_WritePMA>
 8009d6e:	f000 bc17 	b.w	800a5a0 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d16d      	bne.n	8009e5e <USB_EPStartXfer+0x626>
 8009d82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da2:	4413      	add	r3, r2
 8009da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009da6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009daa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	011a      	lsls	r2, r3, #4
 8009db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db6:	4413      	add	r3, r2
 8009db8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d112      	bne.n	8009dec <USB_EPStartXfer+0x5b4>
 8009dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd4:	801a      	strh	r2, [r3, #0]
 8009dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	e063      	b.n	8009eb4 <USB_EPStartXfer+0x67c>
 8009dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009df2:	d817      	bhi.n	8009e24 <USB_EPStartXfer+0x5ec>
 8009df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d004      	beq.n	8009e14 <USB_EPStartXfer+0x5dc>
 8009e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e0e:	3301      	adds	r3, #1
 8009e10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	029b      	lsls	r3, r3, #10
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e20:	801a      	strh	r2, [r3, #0]
 8009e22:	e047      	b.n	8009eb4 <USB_EPStartXfer+0x67c>
 8009e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e28:	095b      	lsrs	r3, r3, #5
 8009e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <USB_EPStartXfer+0x60c>
 8009e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	029b      	lsls	r3, r3, #10
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e5a:	801a      	strh	r2, [r3, #0]
 8009e5c:	e02a      	b.n	8009eb4 <USB_EPStartXfer+0x67c>
 8009e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d122      	bne.n	8009eb4 <USB_EPStartXfer+0x67c>
 8009e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e8e:	4413      	add	r3, r2
 8009e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	011a      	lsls	r2, r3, #4
 8009ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009eb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	891b      	ldrh	r3, [r3, #8]
 8009ec0:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ec4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6959      	ldr	r1, [r3, #20]
 8009ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009eda:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009ede:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009ee2:	6800      	ldr	r0, [r0, #0]
 8009ee4:	f001 f98d 	bl	800b202 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ee8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	695a      	ldr	r2, [r3, #20]
 8009ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef8:	441a      	add	r2, r3
 8009efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009efe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a1a      	ldr	r2, [r3, #32]
 8009f12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d90f      	bls.n	8009f42 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6a1a      	ldr	r2, [r3, #32]
 8009f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f32:	1ad2      	subs	r2, r2, r3
 8009f34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	621a      	str	r2, [r3, #32]
 8009f40:	e00e      	b.n	8009f60 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f46:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f56:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	785b      	ldrb	r3, [r3, #1]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d16d      	bne.n	800a058 <USB_EPStartXfer+0x820>
 8009f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9c:	4413      	add	r3, r2
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	011a      	lsls	r2, r3, #4
 8009fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d112      	bne.n	8009fe6 <USB_EPStartXfer+0x7ae>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	801a      	strh	r2, [r3, #0]
 8009fe4:	e05d      	b.n	800a0a2 <USB_EPStartXfer+0x86a>
 8009fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fea:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fec:	d817      	bhi.n	800a01e <USB_EPStartXfer+0x7e6>
 8009fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <USB_EPStartXfer+0x7d6>
 800a004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a008:	3301      	adds	r3, #1
 800a00a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a00e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a012:	b29b      	uxth	r3, r3
 800a014:	029b      	lsls	r3, r3, #10
 800a016:	b29a      	uxth	r2, r3
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	801a      	strh	r2, [r3, #0]
 800a01c:	e041      	b.n	800a0a2 <USB_EPStartXfer+0x86a>
 800a01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a022:	095b      	lsrs	r3, r3, #5
 800a024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <USB_EPStartXfer+0x806>
 800a034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a038:	3b01      	subs	r3, #1
 800a03a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a03e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a042:	b29b      	uxth	r3, r3
 800a044:	029b      	lsls	r3, r3, #10
 800a046:	b29b      	uxth	r3, r3
 800a048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a050:	b29a      	uxth	r2, r3
 800a052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e024      	b.n	800a0a2 <USB_EPStartXfer+0x86a>
 800a058:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a05c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d11c      	bne.n	800a0a2 <USB_EPStartXfer+0x86a>
 800a068:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a06c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a076:	b29b      	uxth	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a07c:	4413      	add	r3, r2
 800a07e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a080:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a084:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	011a      	lsls	r2, r3, #4
 800a08e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a090:	4413      	add	r3, r2
 800a092:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a096:	643b      	str	r3, [r7, #64]	@ 0x40
 800a098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	895b      	ldrh	r3, [r3, #10]
 800a0ae:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6959      	ldr	r1, [r3, #20]
 800a0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a0c8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a0cc:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a0d0:	6800      	ldr	r0, [r0, #0]
 800a0d2:	f001 f896 	bl	800b202 <USB_WritePMA>
 800a0d6:	e263      	b.n	800a5a0 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a0d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a0e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a10e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a112:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a120:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a140:	b29b      	uxth	r3, r3
 800a142:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a144:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a148:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a154:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a15e:	b29b      	uxth	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a164:	4413      	add	r3, r2
 800a166:	663b      	str	r3, [r7, #96]	@ 0x60
 800a168:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a16c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	011a      	lsls	r2, r3, #4
 800a176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a178:	4413      	add	r3, r2
 800a17a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a17e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a184:	b29a      	uxth	r2, r3
 800a186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a188:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a18a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a18e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	891b      	ldrh	r3, [r3, #8]
 800a196:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a19a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a19e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6959      	ldr	r1, [r3, #20]
 800a1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a1b0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a1b4:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a1b8:	6800      	ldr	r0, [r0, #0]
 800a1ba:	f001 f822 	bl	800b202 <USB_WritePMA>
 800a1be:	e1ef      	b.n	800a5a0 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a1c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 80aa 	beq.w	800a33c <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	785b      	ldrb	r3, [r3, #1]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d16d      	bne.n	800a2e0 <USB_EPStartXfer+0xaa8>
 800a204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a208:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a21e:	b29b      	uxth	r3, r3
 800a220:	461a      	mov	r2, r3
 800a222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a224:	4413      	add	r3, r2
 800a226:	673b      	str	r3, [r7, #112]	@ 0x70
 800a228:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a22c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	011a      	lsls	r2, r3, #4
 800a236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a238:	4413      	add	r3, r2
 800a23a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a23e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d112      	bne.n	800a26e <USB_EPStartXfer+0xa36>
 800a248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a252:	b29a      	uxth	r2, r3
 800a254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a256:	801a      	strh	r2, [r3, #0]
 800a258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a266:	b29a      	uxth	r2, r3
 800a268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a26a:	801a      	strh	r2, [r3, #0]
 800a26c:	e05d      	b.n	800a32a <USB_EPStartXfer+0xaf2>
 800a26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a272:	2b3e      	cmp	r3, #62	@ 0x3e
 800a274:	d817      	bhi.n	800a2a6 <USB_EPStartXfer+0xa6e>
 800a276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a27a:	085b      	lsrs	r3, r3, #1
 800a27c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <USB_EPStartXfer+0xa5e>
 800a28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a290:	3301      	adds	r3, #1
 800a292:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	029b      	lsls	r3, r3, #10
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a2:	801a      	strh	r2, [r3, #0]
 800a2a4:	e041      	b.n	800a32a <USB_EPStartXfer+0xaf2>
 800a2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2aa:	095b      	lsrs	r3, r3, #5
 800a2ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b4:	f003 031f 	and.w	r3, r3, #31
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d104      	bne.n	800a2c6 <USB_EPStartXfer+0xa8e>
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	029b      	lsls	r3, r3, #10
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2dc:	801a      	strh	r2, [r3, #0]
 800a2de:	e024      	b.n	800a32a <USB_EPStartXfer+0xaf2>
 800a2e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d11c      	bne.n	800a32a <USB_EPStartXfer+0xaf2>
 800a2f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	461a      	mov	r2, r3
 800a302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a304:	4413      	add	r3, r2
 800a306:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a30c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	011a      	lsls	r2, r3, #4
 800a316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a318:	4413      	add	r3, r2
 800a31a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a31e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a324:	b29a      	uxth	r2, r3
 800a326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a328:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a32a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a32e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	895b      	ldrh	r3, [r3, #10]
 800a336:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800a33a:	e0b2      	b.n	800a4a2 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a33c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a340:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d171      	bne.n	800a430 <USB_EPStartXfer+0xbf8>
 800a34c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a35a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a35e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a368:	b29b      	uxth	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a370:	4413      	add	r3, r2
 800a372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a37a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	011a      	lsls	r2, r3, #4
 800a384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a388:	4413      	add	r3, r2
 800a38a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a38e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d112      	bne.n	800a3be <USB_EPStartXfer+0xb86>
 800a398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3ba:	801a      	strh	r2, [r3, #0]
 800a3bc:	e069      	b.n	800a492 <USB_EPStartXfer+0xc5a>
 800a3be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3c4:	d817      	bhi.n	800a3f6 <USB_EPStartXfer+0xbbe>
 800a3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ca:	085b      	lsrs	r3, r3, #1
 800a3cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <USB_EPStartXfer+0xbae>
 800a3dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	e04d      	b.n	800a492 <USB_EPStartXfer+0xc5a>
 800a3f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fa:	095b      	lsrs	r3, r3, #5
 800a3fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a404:	f003 031f 	and.w	r3, r3, #31
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <USB_EPStartXfer+0xbde>
 800a40c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a410:	3b01      	subs	r3, #1
 800a412:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a416:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	029b      	lsls	r3, r3, #10
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a428:	b29a      	uxth	r2, r3
 800a42a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a42c:	801a      	strh	r2, [r3, #0]
 800a42e:	e030      	b.n	800a492 <USB_EPStartXfer+0xc5a>
 800a430:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a434:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d128      	bne.n	800a492 <USB_EPStartXfer+0xc5a>
 800a440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a44e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a452:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a464:	4413      	add	r3, r2
 800a466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a46a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a46e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	011a      	lsls	r2, r3, #4
 800a478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a47c:	4413      	add	r3, r2
 800a47e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a490:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a496:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	891b      	ldrh	r3, [r3, #8]
 800a49e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6959      	ldr	r1, [r3, #20]
 800a4ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a4b8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a4bc:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a4c0:	6800      	ldr	r0, [r0, #0]
 800a4c2:	f000 fe9e 	bl	800b202 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a4c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d12e      	bne.n	800a534 <USB_EPStartXfer+0xcfc>
 800a4d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4fc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a500:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a504:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	441a      	add	r2, r3
 800a51a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a51e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a52a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a52e:	b29b      	uxth	r3, r3
 800a530:	8013      	strh	r3, [r2, #0]
 800a532:	e035      	b.n	800a5a0 <USB_EPStartXfer+0xd68>
 800a534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a538:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d12d      	bne.n	800a5a0 <USB_EPStartXfer+0xd68>
 800a544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a552:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a56a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a56e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a572:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a57c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	441a      	add	r2, r3
 800a588:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a58c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a5a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5c2:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ce:	8013      	strh	r3, [r2, #0]
 800a5d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d4:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5d8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5dc:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5e0:	8812      	ldrh	r2, [r2, #0]
 800a5e2:	f082 0210 	eor.w	r2, r2, #16
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ec:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5f4:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5f8:	8812      	ldrh	r2, [r2, #0]
 800a5fa:	f082 0220 	eor.w	r2, r2, #32
 800a5fe:	801a      	strh	r2, [r3, #0]
 800a600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a604:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a60e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a61e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a62c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]
 800a638:	f000 bc9f 	b.w	800af7a <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a63c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a640:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	7b1b      	ldrb	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f040 80ae 	bne.w	800a7aa <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a64e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a652:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699a      	ldr	r2, [r3, #24]
 800a65a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a65e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	429a      	cmp	r2, r3
 800a668:	d917      	bls.n	800a69a <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a66a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a66e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a67a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a67e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	699a      	ldr	r2, [r3, #24]
 800a686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a68a:	1ad2      	subs	r2, r2, r3
 800a68c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a690:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	619a      	str	r2, [r3, #24]
 800a698:	e00e      	b.n	800a6b8 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a69a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a69e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a6aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a6b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6dc:	4413      	add	r3, r2
 800a6de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	011a      	lsls	r2, r3, #4
 800a6f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d116      	bne.n	800a734 <USB_EPStartXfer+0xefc>
 800a706:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a712:	b29a      	uxth	r2, r3
 800a714:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a730:	801a      	strh	r2, [r3, #0]
 800a732:	e3e8      	b.n	800af06 <USB_EPStartXfer+0x16ce>
 800a734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a738:	2b3e      	cmp	r3, #62	@ 0x3e
 800a73a:	d818      	bhi.n	800a76e <USB_EPStartXfer+0xf36>
 800a73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a740:	085b      	lsrs	r3, r3, #1
 800a742:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d004      	beq.n	800a75c <USB_EPStartXfer+0xf24>
 800a752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a756:	3301      	adds	r3, #1
 800a758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a75c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a760:	b29b      	uxth	r3, r3
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	b29a      	uxth	r2, r3
 800a766:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e3cb      	b.n	800af06 <USB_EPStartXfer+0x16ce>
 800a76e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a77c:	f003 031f 	and.w	r3, r3, #31
 800a780:	2b00      	cmp	r3, #0
 800a782:	d104      	bne.n	800a78e <USB_EPStartXfer+0xf56>
 800a784:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a788:	3b01      	subs	r3, #1
 800a78a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a78e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a792:	b29b      	uxth	r3, r3
 800a794:	029b      	lsls	r3, r3, #10
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a7a6:	801a      	strh	r2, [r3, #0]
 800a7a8:	e3ad      	b.n	800af06 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	78db      	ldrb	r3, [r3, #3]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	f040 8200 	bne.w	800abbc <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a7bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f040 8091 	bne.w	800a8f0 <USB_EPStartXfer+0x10b8>
 800a7ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	011a      	lsls	r2, r3, #4
 800a806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a80a:	4413      	add	r3, r2
 800a80c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a814:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a818:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d116      	bne.n	800a852 <USB_EPStartXfer+0x101a>
 800a824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a830:	b29a      	uxth	r2, r3
 800a832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a836:	801a      	strh	r2, [r3, #0]
 800a838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a848:	b29a      	uxth	r2, r3
 800a84a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	e083      	b.n	800a95a <USB_EPStartXfer+0x1122>
 800a852:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a856:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a860:	d820      	bhi.n	800a8a4 <USB_EPStartXfer+0x106c>
 800a862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a866:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a874:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a878:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <USB_EPStartXfer+0x105a>
 800a888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a88c:	3301      	adds	r3, #1
 800a88e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a896:	b29b      	uxth	r3, r3
 800a898:	029b      	lsls	r3, r3, #10
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	e05a      	b.n	800a95a <USB_EPStartXfer+0x1122>
 800a8a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	095b      	lsrs	r3, r3, #5
 800a8b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d104      	bne.n	800a8d4 <USB_EPStartXfer+0x109c>
 800a8ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	029b      	lsls	r3, r3, #10
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	e034      	b.n	800a95a <USB_EPStartXfer+0x1122>
 800a8f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	785b      	ldrb	r3, [r3, #1]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d12c      	bne.n	800a95a <USB_EPStartXfer+0x1122>
 800a900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a90e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a912:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a924:	4413      	add	r3, r2
 800a926:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a92a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a92e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	011a      	lsls	r2, r3, #4
 800a938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a93c:	4413      	add	r3, r2
 800a93e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a942:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a94a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	b29a      	uxth	r2, r3
 800a954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a95e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a96c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	785b      	ldrb	r3, [r3, #1]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f040 8091 	bne.w	800aa9c <USB_EPStartXfer+0x1264>
 800a97a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a97e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a98c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a996:	b29b      	uxth	r3, r3
 800a998:	461a      	mov	r2, r3
 800a99a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a99e:	4413      	add	r3, r2
 800a9a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	011a      	lsls	r2, r3, #4
 800a9b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a9bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d116      	bne.n	800a9fe <USB_EPStartXfer+0x11c6>
 800a9d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	e07c      	b.n	800aaf8 <USB_EPStartXfer+0x12c0>
 800a9fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa0c:	d820      	bhi.n	800aa50 <USB_EPStartXfer+0x1218>
 800aa0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <USB_EPStartXfer+0x1206>
 800aa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e053      	b.n	800aaf8 <USB_EPStartXfer+0x12c0>
 800aa50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d104      	bne.n	800aa80 <USB_EPStartXfer+0x1248>
 800aa76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	029b      	lsls	r3, r3, #10
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e02d      	b.n	800aaf8 <USB_EPStartXfer+0x12c0>
 800aa9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d125      	bne.n	800aaf8 <USB_EPStartXfer+0x12c0>
 800aaac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aab0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aac2:	4413      	add	r3, r2
 800aac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aacc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	011a      	lsls	r2, r3, #4
 800aad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aada:	4413      	add	r3, r2
 800aadc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aae8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aaf6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aaf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aafc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 81fe 	beq.w	800af06 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ab0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d005      	beq.n	800ab42 <USB_EPStartXfer+0x130a>
 800ab36:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10d      	bne.n	800ab5e <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab42:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f040 81db 	bne.w	800af06 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f040 81d4 	bne.w	800af06 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ab5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab84:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800ab88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	441a      	add	r2, r3
 800aba2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800aba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	8013      	strh	r3, [r2, #0]
 800abba:	e1a4      	b.n	800af06 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800abbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	78db      	ldrb	r3, [r3, #3]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	f040 819a 	bne.w	800af02 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800abce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d917      	bls.n	800ac1a <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800abea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800abfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abfe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	699a      	ldr	r2, [r3, #24]
 800ac06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	619a      	str	r2, [r3, #24]
 800ac18:	e00e      	b.n	800ac38 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800ac1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800ac2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ac38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d178      	bne.n	800ad3a <USB_EPStartXfer+0x1502>
 800ac48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	461a      	mov	r2, r3
 800ac68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	011a      	lsls	r2, r3, #4
 800ac80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac84:	4413      	add	r3, r2
 800ac86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d116      	bne.n	800acc4 <USB_EPStartXfer+0x148c>
 800ac96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aca8:	801a      	strh	r2, [r3, #0]
 800acaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acba:	b29a      	uxth	r2, r3
 800acbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acc0:	801a      	strh	r2, [r3, #0]
 800acc2:	e06b      	b.n	800ad9c <USB_EPStartXfer+0x1564>
 800acc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acc8:	2b3e      	cmp	r3, #62	@ 0x3e
 800acca:	d818      	bhi.n	800acfe <USB_EPStartXfer+0x14c6>
 800accc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <USB_EPStartXfer+0x14b4>
 800ace2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace6:	3301      	adds	r3, #1
 800ace8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	029b      	lsls	r3, r3, #10
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	e04e      	b.n	800ad9c <USB_EPStartXfer+0x1564>
 800acfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad02:	095b      	lsrs	r3, r3, #5
 800ad04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad0c:	f003 031f 	and.w	r3, r3, #31
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d104      	bne.n	800ad1e <USB_EPStartXfer+0x14e6>
 800ad14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	029b      	lsls	r3, r3, #10
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad36:	801a      	strh	r2, [r3, #0]
 800ad38:	e030      	b.n	800ad9c <USB_EPStartXfer+0x1564>
 800ad3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d128      	bne.n	800ad9c <USB_EPStartXfer+0x1564>
 800ad4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	461a      	mov	r2, r3
 800ad6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad6e:	4413      	add	r3, r2
 800ad70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	011a      	lsls	r2, r3, #4
 800ad82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad86:	4413      	add	r3, r2
 800ad88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad9a:	801a      	strh	r2, [r3, #0]
 800ad9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ada0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d178      	bne.n	800aeac <USB_EPStartXfer+0x1674>
 800adba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800adc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800add6:	b29b      	uxth	r3, r3
 800add8:	461a      	mov	r2, r3
 800adda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adde:	4413      	add	r3, r2
 800ade0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ade4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ade8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	011a      	lsls	r2, r3, #4
 800adf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adf6:	4413      	add	r3, r2
 800adf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800adfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d116      	bne.n	800ae36 <USB_EPStartXfer+0x15fe>
 800ae08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae1a:	801a      	strh	r2, [r3, #0]
 800ae1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae32:	801a      	strh	r2, [r3, #0]
 800ae34:	e067      	b.n	800af06 <USB_EPStartXfer+0x16ce>
 800ae36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae3c:	d818      	bhi.n	800ae70 <USB_EPStartXfer+0x1638>
 800ae3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <USB_EPStartXfer+0x1626>
 800ae54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae58:	3301      	adds	r3, #1
 800ae5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	029b      	lsls	r3, r3, #10
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae6c:	801a      	strh	r2, [r3, #0]
 800ae6e:	e04a      	b.n	800af06 <USB_EPStartXfer+0x16ce>
 800ae70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae74:	095b      	lsrs	r3, r3, #5
 800ae76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7e:	f003 031f 	and.w	r3, r3, #31
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d104      	bne.n	800ae90 <USB_EPStartXfer+0x1658>
 800ae86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	029b      	lsls	r3, r3, #10
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aea8:	801a      	strh	r2, [r3, #0]
 800aeaa:	e02c      	b.n	800af06 <USB_EPStartXfer+0x16ce>
 800aeac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aeb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d124      	bne.n	800af06 <USB_EPStartXfer+0x16ce>
 800aebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aec0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aed2:	4413      	add	r3, r2
 800aed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aed8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aedc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	011a      	lsls	r2, r3, #4
 800aee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aeea:	4413      	add	r3, r2
 800aeec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aef0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	e001      	b.n	800af06 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e03a      	b.n	800af7c <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	b29b      	uxth	r3, r3
 800af24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af44:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af56:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	441a      	add	r2, r3
 800af62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af76:	b29b      	uxth	r3, r3
 800af78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d020      	beq.n	800afda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afae:	81bb      	strh	r3, [r7, #12]
 800afb0:	89bb      	ldrh	r3, [r7, #12]
 800afb2:	f083 0310 	eor.w	r3, r3, #16
 800afb6:	81bb      	strh	r3, [r7, #12]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	441a      	add	r2, r3
 800afc2:	89bb      	ldrh	r3, [r7, #12]
 800afc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	8013      	strh	r3, [r2, #0]
 800afd8:	e01f      	b.n	800b01a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff0:	81fb      	strh	r3, [r7, #14]
 800aff2:	89fb      	ldrh	r3, [r7, #14]
 800aff4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aff8:	81fb      	strh	r3, [r7, #14]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	441a      	add	r2, r3
 800b004:	89fb      	ldrh	r3, [r7, #14]
 800b006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b00a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b00e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b016:	b29b      	uxth	r3, r3
 800b018:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b026:	b480      	push	{r7}
 800b028:	b087      	sub	sp, #28
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	7b1b      	ldrb	r3, [r3, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	f040 809d 	bne.w	800b174 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d04c      	beq.n	800b0dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	823b      	strh	r3, [r7, #16]
 800b050:	8a3b      	ldrh	r3, [r7, #16]
 800b052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	d01b      	beq.n	800b092 <USB_EPClearStall+0x6c>
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	b29b      	uxth	r3, r3
 800b068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b070:	81fb      	strh	r3, [r7, #14]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	441a      	add	r2, r3
 800b07c:	89fb      	ldrh	r3, [r7, #14]
 800b07e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b08a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b08e:	b29b      	uxth	r3, r3
 800b090:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	78db      	ldrb	r3, [r3, #3]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d06c      	beq.n	800b174 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0b0:	81bb      	strh	r3, [r7, #12]
 800b0b2:	89bb      	ldrh	r3, [r7, #12]
 800b0b4:	f083 0320 	eor.w	r3, r3, #32
 800b0b8:	81bb      	strh	r3, [r7, #12]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	441a      	add	r2, r3
 800b0c4:	89bb      	ldrh	r3, [r7, #12]
 800b0c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	8013      	strh	r3, [r2, #0]
 800b0da:	e04b      	b.n	800b174 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	82fb      	strh	r3, [r7, #22]
 800b0ea:	8afb      	ldrh	r3, [r7, #22]
 800b0ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d01b      	beq.n	800b12c <USB_EPClearStall+0x106>
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b10a:	82bb      	strh	r3, [r7, #20]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	441a      	add	r2, r3
 800b116:	8abb      	ldrh	r3, [r7, #20]
 800b118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b11c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b120:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b128:	b29b      	uxth	r3, r3
 800b12a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b13e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b142:	827b      	strh	r3, [r7, #18]
 800b144:	8a7b      	ldrh	r3, [r7, #18]
 800b146:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b14a:	827b      	strh	r3, [r7, #18]
 800b14c:	8a7b      	ldrh	r3, [r7, #18]
 800b14e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b152:	827b      	strh	r3, [r7, #18]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	441a      	add	r2, r3
 800b15e:	8a7b      	ldrh	r3, [r7, #18]
 800b160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b16c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b170:	b29b      	uxth	r3, r3
 800b172:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bc80      	pop	{r7}
 800b17e:	4770      	bx	lr

0800b180 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d103      	bne.n	800b19a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2280      	movs	r2, #128	@ 0x80
 800b196:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bc80      	pop	{r7}
 800b1a4:	4770      	bx	lr

0800b1a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bc80      	pop	{r7}
 800b1b8:	4770      	bx	lr

0800b1ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr

0800b1ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr

0800b1ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr

0800b202 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b202:	b480      	push	{r7}
 800b204:	b08d      	sub	sp, #52	@ 0x34
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	4611      	mov	r1, r2
 800b20e:	461a      	mov	r2, r3
 800b210:	460b      	mov	r3, r1
 800b212:	80fb      	strh	r3, [r7, #6]
 800b214:	4613      	mov	r3, r2
 800b216:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b218:	88bb      	ldrh	r3, [r7, #4]
 800b21a:	3301      	adds	r3, #1
 800b21c:	085b      	lsrs	r3, r3, #1
 800b21e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	005a      	lsls	r2, r3, #1
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b234:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b23a:	e01d      	b.n	800b278 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b244:	3301      	adds	r3, #1
 800b246:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	021b      	lsls	r3, r3, #8
 800b24e:	b29b      	uxth	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	4313      	orrs	r3, r2
 800b256:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	3302      	adds	r3, #2
 800b264:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	3302      	adds	r3, #2
 800b26a:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26e:	3301      	adds	r3, #1
 800b270:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	3b01      	subs	r3, #1
 800b276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1de      	bne.n	800b23c <USB_WritePMA+0x3a>
  }
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	3734      	adds	r7, #52	@ 0x34
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr

0800b28a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b08b      	sub	sp, #44	@ 0x2c
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4611      	mov	r1, r2
 800b296:	461a      	mov	r2, r3
 800b298:	460b      	mov	r3, r1
 800b29a:	80fb      	strh	r3, [r7, #6]
 800b29c:	4613      	mov	r3, r2
 800b29e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b2a0:	88bb      	ldrh	r3, [r7, #4]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	005a      	lsls	r2, r3, #1
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2bc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2c2:	e01b      	b.n	800b2fc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e0      	bne.n	800b2c4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b302:	88bb      	ldrh	r3, [r7, #4]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	b29b      	uxth	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	701a      	strb	r2, [r3, #0]
  }
}
 800b31e:	bf00      	nop
 800b320:	372c      	adds	r7, #44	@ 0x2c
 800b322:	46bd      	mov	sp, r7
 800b324:	bc80      	pop	{r7}
 800b326:	4770      	bx	lr

0800b328 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	7c1b      	ldrb	r3, [r3, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d115      	bne.n	800b36c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b344:	2202      	movs	r2, #2
 800b346:	2181      	movs	r1, #129	@ 0x81
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 fe90 	bl	800d06e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b358:	2202      	movs	r2, #2
 800b35a:	2101      	movs	r1, #1
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fe86 	bl	800d06e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b36a:	e012      	b.n	800b392 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b36c:	2340      	movs	r3, #64	@ 0x40
 800b36e:	2202      	movs	r2, #2
 800b370:	2181      	movs	r1, #129	@ 0x81
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fe7b 	bl	800d06e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b37e:	2340      	movs	r3, #64	@ 0x40
 800b380:	2202      	movs	r2, #2
 800b382:	2101      	movs	r1, #1
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fe72 	bl	800d06e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b392:	2308      	movs	r3, #8
 800b394:	2203      	movs	r2, #3
 800b396:	2182      	movs	r1, #130	@ 0x82
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 fe68 	bl	800d06e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b3a8:	f001 ff88 	bl	800d2bc <USBD_static_malloc>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d102      	bne.n	800b3c4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	73fb      	strb	r3, [r7, #15]
 800b3c2:	e026      	b.n	800b412 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 ff28 	bl	800d250 <USBD_LL_PrepareReceive>
 800b400:	e007      	b.n	800b412 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b408:	2340      	movs	r3, #64	@ 0x40
 800b40a:	2101      	movs	r1, #1
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 ff1f 	bl	800d250 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b42c:	2181      	movs	r1, #129	@ 0x81
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f001 fe43 	bl	800d0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b43a:	2101      	movs	r1, #1
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 fe3c 	bl	800d0ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b44a:	2182      	movs	r1, #130	@ 0x82
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f001 fe34 	bl	800d0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00e      	beq.n	800b480 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b472:	4618      	mov	r0, r3
 800b474:	f001 ff2e 	bl	800d2d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d039      	beq.n	800b528 <USBD_CDC_Setup+0x9e>
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	d17f      	bne.n	800b5b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d029      	beq.n	800b514 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	b25b      	sxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da11      	bge.n	800b4ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b4d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	88d2      	ldrh	r2, [r2, #6]
 800b4dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4de:	6939      	ldr	r1, [r7, #16]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	88db      	ldrh	r3, [r3, #6]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 fa06 	bl	800c8f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b4ec:	e06b      	b.n	800b5c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	785a      	ldrb	r2, [r3, #1]
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	88db      	ldrh	r3, [r3, #6]
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b504:	6939      	ldr	r1, [r7, #16]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	88db      	ldrh	r3, [r3, #6]
 800b50a:	461a      	mov	r2, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 fa21 	bl	800c954 <USBD_CtlPrepareRx>
      break;
 800b512:	e058      	b.n	800b5c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	7850      	ldrb	r0, [r2, #1]
 800b520:	2200      	movs	r2, #0
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	4798      	blx	r3
      break;
 800b526:	e04e      	b.n	800b5c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	2b0b      	cmp	r3, #11
 800b52e:	d02e      	beq.n	800b58e <USBD_CDC_Setup+0x104>
 800b530:	2b0b      	cmp	r3, #11
 800b532:	dc38      	bgt.n	800b5a6 <USBD_CDC_Setup+0x11c>
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <USBD_CDC_Setup+0xb4>
 800b538:	2b0a      	cmp	r3, #10
 800b53a:	d014      	beq.n	800b566 <USBD_CDC_Setup+0xdc>
 800b53c:	e033      	b.n	800b5a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b544:	2b03      	cmp	r3, #3
 800b546:	d107      	bne.n	800b558 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b548:	f107 030c 	add.w	r3, r7, #12
 800b54c:	2202      	movs	r2, #2
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 f9d1 	bl	800c8f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b556:	e02e      	b.n	800b5b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 f962 	bl	800c824 <USBD_CtlError>
            ret = USBD_FAIL;
 800b560:	2302      	movs	r3, #2
 800b562:	75fb      	strb	r3, [r7, #23]
          break;
 800b564:	e027      	b.n	800b5b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d107      	bne.n	800b580 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b570:	f107 030f 	add.w	r3, r7, #15
 800b574:	2201      	movs	r2, #1
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 f9bd 	bl	800c8f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b57e:	e01a      	b.n	800b5b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 f94e 	bl	800c824 <USBD_CtlError>
            ret = USBD_FAIL;
 800b588:	2302      	movs	r3, #2
 800b58a:	75fb      	strb	r3, [r7, #23]
          break;
 800b58c:	e013      	b.n	800b5b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b594:	2b03      	cmp	r3, #3
 800b596:	d00d      	beq.n	800b5b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 f942 	bl	800c824 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b5a4:	e006      	b.n	800b5b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 f93b 	bl	800c824 <USBD_CtlError>
          ret = USBD_FAIL;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b2:	e000      	b.n	800b5b6 <USBD_CDC_Setup+0x12c>
          break;
 800b5b4:	bf00      	nop
      }
      break;
 800b5b6:	e006      	b.n	800b5c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f001 f932 	bl	800c824 <USBD_CtlError>
      ret = USBD_FAIL;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b5c4:	bf00      	nop
  }

  return ret;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d03a      	beq.n	800b66c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5f6:	78fa      	ldrb	r2, [r7, #3]
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	331c      	adds	r3, #28
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d029      	beq.n	800b660 <USBD_CDC_DataIn+0x90>
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	331c      	adds	r3, #28
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	78f9      	ldrb	r1, [r7, #3]
 800b620:	68b8      	ldr	r0, [r7, #8]
 800b622:	460b      	mov	r3, r1
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	440b      	add	r3, r1
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	4403      	add	r3, r0
 800b62c:	3338      	adds	r3, #56	@ 0x38
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	fbb2 f1f3 	udiv	r1, r2, r3
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d110      	bne.n	800b660 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	440b      	add	r3, r1
 800b64c:	331c      	adds	r3, #28
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b652:	78f9      	ldrb	r1, [r7, #3]
 800b654:	2300      	movs	r3, #0
 800b656:	2200      	movs	r2, #0
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fdd6 	bl	800d20a <USBD_LL_Transmit>
 800b65e:	e003      	b.n	800b668 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	e000      	b.n	800b66e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b66c:	2302      	movs	r3, #2
  }
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b688:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fe01 	bl	800d296 <USBD_LL_GetRxDataSize>
 800b694:	4602      	mov	r2, r0
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00d      	beq.n	800b6c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4798      	blx	r3

    return USBD_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e000      	b.n	800b6c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b6c2:	2302      	movs	r3, #2
  }
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d014      	beq.n	800b710 <USBD_CDC_EP0_RxReady+0x44>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b6ec:	2bff      	cmp	r3, #255	@ 0xff
 800b6ee:	d00f      	beq.n	800b710 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b6fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b706:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	22ff      	movs	r2, #255	@ 0xff
 800b70c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2243      	movs	r2, #67	@ 0x43
 800b728:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b72a:	4b03      	ldr	r3, [pc, #12]	@ (800b738 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	200000bc 	.word	0x200000bc

0800b73c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2243      	movs	r2, #67	@ 0x43
 800b748:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b74a:	4b03      	ldr	r3, [pc, #12]	@ (800b758 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000078 	.word	0x20000078

0800b75c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2243      	movs	r2, #67	@ 0x43
 800b768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b76a:	4b03      	ldr	r3, [pc, #12]	@ (800b778 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bc80      	pop	{r7}
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000100 	.word	0x20000100

0800b77c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	220a      	movs	r2, #10
 800b788:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b78a:	4b03      	ldr	r3, [pc, #12]	@ (800b798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	bc80      	pop	{r7}
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	20000034 	.word	0x20000034

0800b79c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	371c      	adds	r7, #28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bc80      	pop	{r7}
 800b7f8:	4770      	bx	lr

0800b7fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bc80      	pop	{r7}
 800b81e:	4770      	bx	lr

0800b820 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b82e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b836:	2b00      	cmp	r3, #0
 800b838:	d01c      	beq.n	800b874 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b840:	2b00      	cmp	r3, #0
 800b842:	d115      	bne.n	800b870 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2201      	movs	r2, #1
 800b848:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b862:	b29b      	uxth	r3, r3
 800b864:	2181      	movs	r1, #129	@ 0x81
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 fccf 	bl	800d20a <USBD_LL_Transmit>

      return USBD_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	e002      	b.n	800b876 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b870:	2301      	movs	r3, #1
 800b872:	e000      	b.n	800b876 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b874:	2302      	movs	r3, #2
  }
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d017      	beq.n	800b8c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7c1b      	ldrb	r3, [r3, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 fccf 	bl	800d250 <USBD_LL_PrepareReceive>
 800b8b2:	e007      	b.n	800b8c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8ba:	2340      	movs	r3, #64	@ 0x40
 800b8bc:	2101      	movs	r1, #1
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 fcc6 	bl	800d250 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e000      	b.n	800b8ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b8c8:	2302      	movs	r3, #2
  }
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	e01a      	b.n	800b920 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	79fa      	ldrb	r2, [r7, #7]
 800b916:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f001 fb33 	bl	800cf84 <USBD_LL_Init>

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d006      	beq.n	800b94a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	e001      	b.n	800b94e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b94a:	2302      	movs	r3, #2
 800b94c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr

0800b95a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f001 fb68 	bl	800d038 <USBD_LL_Start>

  return USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b972:	b480      	push	{r7}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	bc80      	pop	{r7}
 800b984:	4770      	bx	lr

0800b986 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b084      	sub	sp, #16
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b992:	2302      	movs	r3, #2
 800b994:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00c      	beq.n	800b9ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	78fa      	ldrb	r2, [r7, #3]
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	4798      	blx	r3
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	78fa      	ldrb	r2, [r7, #3]
 800b9da:	4611      	mov	r1, r2
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	4798      	blx	r3

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 fed8 	bl	800c7b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba10:	461a      	mov	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba1e:	f003 031f 	and.w	r3, r3, #31
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d016      	beq.n	800ba54 <USBD_LL_SetupStage+0x6a>
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d81c      	bhi.n	800ba64 <USBD_LL_SetupStage+0x7a>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <USBD_LL_SetupStage+0x4a>
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d008      	beq.n	800ba44 <USBD_LL_SetupStage+0x5a>
 800ba32:	e017      	b.n	800ba64 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f9cb 	bl	800bdd8 <USBD_StdDevReq>
      break;
 800ba42:	e01a      	b.n	800ba7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fa2d 	bl	800beac <USBD_StdItfReq>
      break;
 800ba52:	e012      	b.n	800ba7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fa6d 	bl	800bf3c <USBD_StdEPReq>
      break;
 800ba62:	e00a      	b.n	800ba7a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f001 fb40 	bl	800d0f8 <USBD_LL_StallEP>
      break;
 800ba78:	bf00      	nop
  }

  return USBD_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba92:	7afb      	ldrb	r3, [r7, #11]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d14b      	bne.n	800bb30 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d134      	bne.n	800bb14 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	68da      	ldr	r2, [r3, #12]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d919      	bls.n	800baea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	68da      	ldr	r2, [r3, #12]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bacc:	429a      	cmp	r2, r3
 800bace:	d203      	bcs.n	800bad8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	e002      	b.n	800bade <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800badc:	b29b      	uxth	r3, r3
 800bade:	461a      	mov	r2, r3
 800bae0:	6879      	ldr	r1, [r7, #4]
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f000 ff54 	bl	800c990 <USBD_CtlContinueRx>
 800bae8:	e038      	b.n	800bb5c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00a      	beq.n	800bb0c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	d105      	bne.n	800bb0c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 ff51 	bl	800c9b4 <USBD_CtlSendStatus>
 800bb12:	e023      	b.n	800bb5c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d11e      	bne.n	800bb5c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bb26:	2100      	movs	r1, #0
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f001 fae5 	bl	800d0f8 <USBD_LL_StallEP>
 800bb2e:	e015      	b.n	800bb5c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00d      	beq.n	800bb58 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d108      	bne.n	800bb58 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	7afa      	ldrb	r2, [r7, #11]
 800bb50:	4611      	mov	r1, r2
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	4798      	blx	r3
 800bb56:	e001      	b.n	800bb5c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	e000      	b.n	800bb5e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b086      	sub	sp, #24
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	607a      	str	r2, [r7, #4]
 800bb72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d17f      	bne.n	800bc7a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3314      	adds	r3, #20
 800bb7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d15c      	bne.n	800bc44 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d915      	bls.n	800bbc2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	461a      	mov	r2, r3
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 febe 	bl	800c930 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2100      	movs	r1, #0
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f001 fb48 	bl	800d250 <USBD_LL_PrepareReceive>
 800bbc0:	e04e      	b.n	800bc60 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	6912      	ldr	r2, [r2, #16]
 800bbca:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbce:	fb01 f202 	mul.w	r2, r1, r2
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d11c      	bne.n	800bc12 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	689a      	ldr	r2, [r3, #8]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d316      	bcc.n	800bc12 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d20f      	bcs.n	800bc12 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 fe9a 	bl	800c930 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc04:	2300      	movs	r3, #0
 800bc06:	2200      	movs	r2, #0
 800bc08:	2100      	movs	r1, #0
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f001 fb20 	bl	800d250 <USBD_LL_PrepareReceive>
 800bc10:	e026      	b.n	800bc60 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d105      	bne.n	800bc34 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bc34:	2180      	movs	r1, #128	@ 0x80
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f001 fa5e 	bl	800d0f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 fecc 	bl	800c9da <USBD_CtlReceiveStatus>
 800bc42:	e00d      	b.n	800bc60 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc4a:	2b04      	cmp	r3, #4
 800bc4c:	d004      	beq.n	800bc58 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d103      	bne.n	800bc60 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc58:	2180      	movs	r1, #128	@ 0x80
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f001 fa4c 	bl	800d0f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d11d      	bne.n	800bca6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fe81 	bl	800b972 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc78:	e015      	b.n	800bca6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00d      	beq.n	800bca2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d108      	bne.n	800bca2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	7afa      	ldrb	r2, [r7, #11]
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	4798      	blx	r3
 800bca0:	e001      	b.n	800bca6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bca2:	2302      	movs	r3, #2
 800bca4:	e000      	b.n	800bca8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcb8:	2340      	movs	r3, #64	@ 0x40
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 f9d5 	bl	800d06e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2240      	movs	r2, #64	@ 0x40
 800bcd0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcd4:	2340      	movs	r3, #64	@ 0x40
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2180      	movs	r1, #128	@ 0x80
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f001 f9c7 	bl	800d06e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2240      	movs	r2, #64	@ 0x40
 800bcea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d009      	beq.n	800bd28 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6852      	ldr	r2, [r2, #4]
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	4611      	mov	r1, r2
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	4798      	blx	r3
  }

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr

0800bd50 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2204      	movs	r2, #4
 800bd68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bc80      	pop	{r7}
 800bd76:	4770      	bx	lr

0800bd78 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	d105      	bne.n	800bd96 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bc80      	pop	{r7}
 800bda0:	4770      	bx	lr

0800bda2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d10b      	bne.n	800bdcc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdee:	2b40      	cmp	r3, #64	@ 0x40
 800bdf0:	d005      	beq.n	800bdfe <USBD_StdDevReq+0x26>
 800bdf2:	2b40      	cmp	r3, #64	@ 0x40
 800bdf4:	d84f      	bhi.n	800be96 <USBD_StdDevReq+0xbe>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <USBD_StdDevReq+0x36>
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d14b      	bne.n	800be96 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	4798      	blx	r3
      break;
 800be0c:	e048      	b.n	800bea0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d839      	bhi.n	800be8a <USBD_StdDevReq+0xb2>
 800be16:	a201      	add	r2, pc, #4	@ (adr r2, 800be1c <USBD_StdDevReq+0x44>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be6d 	.word	0x0800be6d
 800be20:	0800be81 	.word	0x0800be81
 800be24:	0800be8b 	.word	0x0800be8b
 800be28:	0800be77 	.word	0x0800be77
 800be2c:	0800be8b 	.word	0x0800be8b
 800be30:	0800be4f 	.word	0x0800be4f
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be8b 	.word	0x0800be8b
 800be3c:	0800be63 	.word	0x0800be63
 800be40:	0800be59 	.word	0x0800be59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9dc 	bl	800c204 <USBD_GetDescriptor>
          break;
 800be4c:	e022      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fb3f 	bl	800c4d4 <USBD_SetAddress>
          break;
 800be56:	e01d      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fb7e 	bl	800c55c <USBD_SetConfig>
          break;
 800be60:	e018      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fc07 	bl	800c678 <USBD_GetConfig>
          break;
 800be6a:	e013      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fc37 	bl	800c6e2 <USBD_GetStatus>
          break;
 800be74:	e00e      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fc65 	bl	800c748 <USBD_SetFeature>
          break;
 800be7e:	e009      	b.n	800be94 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fc74 	bl	800c770 <USBD_ClrFeature>
          break;
 800be88:	e004      	b.n	800be94 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fcc9 	bl	800c824 <USBD_CtlError>
          break;
 800be92:	bf00      	nop
      }
      break;
 800be94:	e004      	b.n	800bea0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fcc3 	bl	800c824 <USBD_CtlError>
      break;
 800be9e:	bf00      	nop
  }

  return ret;
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop

0800beac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bec2:	2b40      	cmp	r3, #64	@ 0x40
 800bec4:	d005      	beq.n	800bed2 <USBD_StdItfReq+0x26>
 800bec6:	2b40      	cmp	r3, #64	@ 0x40
 800bec8:	d82e      	bhi.n	800bf28 <USBD_StdItfReq+0x7c>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <USBD_StdItfReq+0x26>
 800bece:	2b20      	cmp	r3, #32
 800bed0:	d12a      	bne.n	800bf28 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed8:	3b01      	subs	r3, #1
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d81d      	bhi.n	800bf1a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	889b      	ldrh	r3, [r3, #4]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d813      	bhi.n	800bf10 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
 800bef6:	4603      	mov	r3, r0
 800bef8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	88db      	ldrh	r3, [r3, #6]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d110      	bne.n	800bf24 <USBD_StdItfReq+0x78>
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10d      	bne.n	800bf24 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fd53 	bl	800c9b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf0e:	e009      	b.n	800bf24 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fc86 	bl	800c824 <USBD_CtlError>
          break;
 800bf18:	e004      	b.n	800bf24 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fc81 	bl	800c824 <USBD_CtlError>
          break;
 800bf22:	e000      	b.n	800bf26 <USBD_StdItfReq+0x7a>
          break;
 800bf24:	bf00      	nop
      }
      break;
 800bf26:	e004      	b.n	800bf32 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fc7a 	bl	800c824 <USBD_CtlError>
      break;
 800bf30:	bf00      	nop
  }

  return USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	889b      	ldrh	r3, [r3, #4]
 800bf4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf58:	2b40      	cmp	r3, #64	@ 0x40
 800bf5a:	d007      	beq.n	800bf6c <USBD_StdEPReq+0x30>
 800bf5c:	2b40      	cmp	r3, #64	@ 0x40
 800bf5e:	f200 8146 	bhi.w	800c1ee <USBD_StdEPReq+0x2b2>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00a      	beq.n	800bf7c <USBD_StdEPReq+0x40>
 800bf66:	2b20      	cmp	r3, #32
 800bf68:	f040 8141 	bne.w	800c1ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
      break;
 800bf7a:	e13d      	b.n	800c1f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d10a      	bne.n	800bf9e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	4798      	blx	r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	e12d      	b.n	800c1fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d007      	beq.n	800bfb6 <USBD_StdEPReq+0x7a>
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	f300 811b 	bgt.w	800c1e2 <USBD_StdEPReq+0x2a6>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d072      	beq.n	800c096 <USBD_StdEPReq+0x15a>
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d03a      	beq.n	800c02a <USBD_StdEPReq+0xee>
 800bfb4:	e115      	b.n	800c1e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d002      	beq.n	800bfc6 <USBD_StdEPReq+0x8a>
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d015      	beq.n	800bff0 <USBD_StdEPReq+0xb4>
 800bfc4:	e02b      	b.n	800c01e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00c      	beq.n	800bfe6 <USBD_StdEPReq+0xaa>
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b80      	cmp	r3, #128	@ 0x80
 800bfd0:	d009      	beq.n	800bfe6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f001 f88e 	bl	800d0f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfdc:	2180      	movs	r1, #128	@ 0x80
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 f88a 	bl	800d0f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe4:	e020      	b.n	800c028 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fc1b 	bl	800c824 <USBD_CtlError>
              break;
 800bfee:	e01b      	b.n	800c028 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	885b      	ldrh	r3, [r3, #2]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10e      	bne.n	800c016 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <USBD_StdEPReq+0xda>
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
 800c000:	2b80      	cmp	r3, #128	@ 0x80
 800c002:	d008      	beq.n	800c016 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	88db      	ldrh	r3, [r3, #6]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d104      	bne.n	800c016 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 f871 	bl	800d0f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fccc 	bl	800c9b4 <USBD_CtlSendStatus>

              break;
 800c01c:	e004      	b.n	800c028 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fbff 	bl	800c824 <USBD_CtlError>
              break;
 800c026:	bf00      	nop
          }
          break;
 800c028:	e0e0      	b.n	800c1ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c030:	2b02      	cmp	r3, #2
 800c032:	d002      	beq.n	800c03a <USBD_StdEPReq+0xfe>
 800c034:	2b03      	cmp	r3, #3
 800c036:	d015      	beq.n	800c064 <USBD_StdEPReq+0x128>
 800c038:	e026      	b.n	800c088 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00c      	beq.n	800c05a <USBD_StdEPReq+0x11e>
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b80      	cmp	r3, #128	@ 0x80
 800c044:	d009      	beq.n	800c05a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c046:	7bbb      	ldrb	r3, [r7, #14]
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 f854 	bl	800d0f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c050:	2180      	movs	r1, #128	@ 0x80
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 f850 	bl	800d0f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c058:	e01c      	b.n	800c094 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fbe1 	bl	800c824 <USBD_CtlError>
              break;
 800c062:	e017      	b.n	800c094 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	885b      	ldrh	r3, [r3, #2]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d112      	bne.n	800c092 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 f85b 	bl	800d136 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fc97 	bl	800c9b4 <USBD_CtlSendStatus>
              }
              break;
 800c086:	e004      	b.n	800c092 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fbca 	bl	800c824 <USBD_CtlError>
              break;
 800c090:	e000      	b.n	800c094 <USBD_StdEPReq+0x158>
              break;
 800c092:	bf00      	nop
          }
          break;
 800c094:	e0aa      	b.n	800c1ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d002      	beq.n	800c0a6 <USBD_StdEPReq+0x16a>
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d032      	beq.n	800c10a <USBD_StdEPReq+0x1ce>
 800c0a4:	e097      	b.n	800c1d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d007      	beq.n	800c0bc <USBD_StdEPReq+0x180>
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b80      	cmp	r3, #128	@ 0x80
 800c0b0:	d004      	beq.n	800c0bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fbb5 	bl	800c824 <USBD_CtlError>
                break;
 800c0ba:	e091      	b.n	800c1e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	da0b      	bge.n	800c0dc <USBD_StdEPReq+0x1a0>
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	3310      	adds	r3, #16
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	3304      	adds	r3, #4
 800c0da:	e00b      	b.n	800c0f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2202      	movs	r2, #2
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fbf8 	bl	800c8f8 <USBD_CtlSendData>
              break;
 800c108:	e06a      	b.n	800c1e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c10a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da11      	bge.n	800c136 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	f003 020f 	and.w	r2, r3, #15
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	3318      	adds	r3, #24
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d117      	bne.n	800c15c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fb78 	bl	800c824 <USBD_CtlError>
                  break;
 800c134:	e054      	b.n	800c1e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	f003 020f 	and.w	r2, r3, #15
 800c13c:	6879      	ldr	r1, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fb65 	bl	800c824 <USBD_CtlError>
                  break;
 800c15a:	e041      	b.n	800c1e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c15c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c160:	2b00      	cmp	r3, #0
 800c162:	da0b      	bge.n	800c17c <USBD_StdEPReq+0x240>
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	3310      	adds	r3, #16
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	e00b      	b.n	800c194 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	4413      	add	r3, r2
 800c192:	3304      	adds	r3, #4
 800c194:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <USBD_StdEPReq+0x266>
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b80      	cmp	r3, #128	@ 0x80
 800c1a0:	d103      	bne.n	800c1aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	e00e      	b.n	800c1c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 ffe0 	bl	800d174 <USBD_LL_IsStallEP>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	601a      	str	r2, [r3, #0]
 800c1c0:	e002      	b.n	800c1c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fb92 	bl	800c8f8 <USBD_CtlSendData>
              break;
 800c1d4:	e004      	b.n	800c1e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fb23 	bl	800c824 <USBD_CtlError>
              break;
 800c1de:	bf00      	nop
          }
          break;
 800c1e0:	e004      	b.n	800c1ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fb1d 	bl	800c824 <USBD_CtlError>
          break;
 800c1ea:	bf00      	nop
      }
      break;
 800c1ec:	e004      	b.n	800c1f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fb17 	bl	800c824 <USBD_CtlError>
      break;
 800c1f6:	bf00      	nop
  }

  return ret;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c216:	2300      	movs	r3, #0
 800c218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	b29b      	uxth	r3, r3
 800c222:	3b01      	subs	r3, #1
 800c224:	2b06      	cmp	r3, #6
 800c226:	f200 8128 	bhi.w	800c47a <USBD_GetDescriptor+0x276>
 800c22a:	a201      	add	r2, pc, #4	@ (adr r2, 800c230 <USBD_GetDescriptor+0x2c>)
 800c22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c230:	0800c24d 	.word	0x0800c24d
 800c234:	0800c265 	.word	0x0800c265
 800c238:	0800c2a5 	.word	0x0800c2a5
 800c23c:	0800c47b 	.word	0x0800c47b
 800c240:	0800c47b 	.word	0x0800c47b
 800c244:	0800c41b 	.word	0x0800c41b
 800c248:	0800c447 	.word	0x0800c447
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	7c12      	ldrb	r2, [r2, #16]
 800c258:	f107 0108 	add.w	r1, r7, #8
 800c25c:	4610      	mov	r0, r2
 800c25e:	4798      	blx	r3
 800c260:	60f8      	str	r0, [r7, #12]
      break;
 800c262:	e112      	b.n	800c48a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7c1b      	ldrb	r3, [r3, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10d      	bne.n	800c288 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c274:	f107 0208 	add.w	r2, r7, #8
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	2202      	movs	r2, #2
 800c284:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c286:	e100      	b.n	800c48a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c290:	f107 0208 	add.w	r2, r7, #8
 800c294:	4610      	mov	r0, r2
 800c296:	4798      	blx	r3
 800c298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3301      	adds	r3, #1
 800c29e:	2202      	movs	r2, #2
 800c2a0:	701a      	strb	r2, [r3, #0]
      break;
 800c2a2:	e0f2      	b.n	800c48a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	885b      	ldrh	r3, [r3, #2]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	f200 80ac 	bhi.w	800c408 <USBD_GetDescriptor+0x204>
 800c2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b8 <USBD_GetDescriptor+0xb4>)
 800c2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b6:	bf00      	nop
 800c2b8:	0800c2d1 	.word	0x0800c2d1
 800c2bc:	0800c305 	.word	0x0800c305
 800c2c0:	0800c339 	.word	0x0800c339
 800c2c4:	0800c36d 	.word	0x0800c36d
 800c2c8:	0800c3a1 	.word	0x0800c3a1
 800c2cc:	0800c3d5 	.word	0x0800c3d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	f107 0108 	add.w	r1, r7, #8
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f2:	e091      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa94 	bl	800c824 <USBD_CtlError>
            err++;
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	3301      	adds	r3, #1
 800c300:	72fb      	strb	r3, [r7, #11]
          break;
 800c302:	e089      	b.n	800c418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 0108 	add.w	r1, r7, #8
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c326:	e077      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa7a 	bl	800c824 <USBD_CtlError>
            err++;
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	3301      	adds	r3, #1
 800c334:	72fb      	strb	r3, [r7, #11]
          break;
 800c336:	e06f      	b.n	800c418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 0108 	add.w	r1, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35a:	e05d      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa60 	bl	800c824 <USBD_CtlError>
            err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
          break;
 800c36a:	e055      	b.n	800c418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7c12      	ldrb	r2, [r2, #16]
 800c384:	f107 0108 	add.w	r1, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c38e:	e043      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa46 	bl	800c824 <USBD_CtlError>
            err++;
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	3301      	adds	r3, #1
 800c39c:	72fb      	strb	r3, [r7, #11]
          break;
 800c39e:	e03b      	b.n	800c418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	7c12      	ldrb	r2, [r2, #16]
 800c3b8:	f107 0108 	add.w	r1, r7, #8
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4798      	blx	r3
 800c3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c2:	e029      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fa2c 	bl	800c824 <USBD_CtlError>
            err++;
 800c3cc:	7afb      	ldrb	r3, [r7, #11]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d2:	e021      	b.n	800c418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	7c12      	ldrb	r2, [r2, #16]
 800c3ec:	f107 0108 	add.w	r1, r7, #8
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
 800c3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3f6:	e00f      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa12 	bl	800c824 <USBD_CtlError>
            err++;
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	3301      	adds	r3, #1
 800c404:	72fb      	strb	r3, [r7, #11]
          break;
 800c406:	e007      	b.n	800c418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa0a 	bl	800c824 <USBD_CtlError>
          err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c416:	e038      	b.n	800c48a <USBD_GetDescriptor+0x286>
 800c418:	e037      	b.n	800c48a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	7c1b      	ldrb	r3, [r3, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42a:	f107 0208 	add.w	r2, r7, #8
 800c42e:	4610      	mov	r0, r2
 800c430:	4798      	blx	r3
 800c432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c434:	e029      	b.n	800c48a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f9f3 	bl	800c824 <USBD_CtlError>
        err++;
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	3301      	adds	r3, #1
 800c442:	72fb      	strb	r3, [r7, #11]
      break;
 800c444:	e021      	b.n	800c48a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7c1b      	ldrb	r3, [r3, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10d      	bne.n	800c46a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c456:	f107 0208 	add.w	r2, r7, #8
 800c45a:	4610      	mov	r0, r2
 800c45c:	4798      	blx	r3
 800c45e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3301      	adds	r3, #1
 800c464:	2207      	movs	r2, #7
 800c466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c468:	e00f      	b.n	800c48a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f9d9 	bl	800c824 <USBD_CtlError>
        err++;
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	3301      	adds	r3, #1
 800c476:	72fb      	strb	r3, [r7, #11]
      break;
 800c478:	e007      	b.n	800c48a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f9d1 	bl	800c824 <USBD_CtlError>
      err++;
 800c482:	7afb      	ldrb	r3, [r7, #11]
 800c484:	3301      	adds	r3, #1
 800c486:	72fb      	strb	r3, [r7, #11]
      break;
 800c488:	bf00      	nop
  }

  if (err != 0U)
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d11c      	bne.n	800c4ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c490:	893b      	ldrh	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d011      	beq.n	800c4ba <USBD_GetDescriptor+0x2b6>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	88db      	ldrh	r3, [r3, #6]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	88da      	ldrh	r2, [r3, #6]
 800c4a2:	893b      	ldrh	r3, [r7, #8]
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	bf28      	it	cs
 800c4a8:	4613      	movcs	r3, r2
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4ae:	893b      	ldrh	r3, [r7, #8]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	68f9      	ldr	r1, [r7, #12]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fa1f 	bl	800c8f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	88db      	ldrh	r3, [r3, #6]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d104      	bne.n	800c4cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa76 	bl	800c9b4 <USBD_CtlSendStatus>
 800c4c8:	e000      	b.n	800c4cc <USBD_GetDescriptor+0x2c8>
    return;
 800c4ca:	bf00      	nop
    }
  }
}
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop

0800c4d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	889b      	ldrh	r3, [r3, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d130      	bne.n	800c548 <USBD_SetAddress+0x74>
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	88db      	ldrh	r3, [r3, #6]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d12c      	bne.n	800c548 <USBD_SetAddress+0x74>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	885b      	ldrh	r3, [r3, #2]
 800c4f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4f4:	d828      	bhi.n	800c548 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	885b      	ldrh	r3, [r3, #2]
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d104      	bne.n	800c516 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f988 	bl	800c824 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c514:	e01d      	b.n	800c552 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7bfa      	ldrb	r2, [r7, #15]
 800c51a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fe52 	bl	800d1cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fa43 	bl	800c9b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2202      	movs	r2, #2
 800c538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53c:	e009      	b.n	800c552 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c546:	e004      	b.n	800c552 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f96a 	bl	800c824 <USBD_CtlError>
  }
}
 800c550:	bf00      	nop
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
	...

0800c55c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	4b41      	ldr	r3, [pc, #260]	@ (800c674 <USBD_SetConfig+0x118>)
 800c56e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c570:	4b40      	ldr	r3, [pc, #256]	@ (800c674 <USBD_SetConfig+0x118>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d904      	bls.n	800c582 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f952 	bl	800c824 <USBD_CtlError>
 800c580:	e075      	b.n	800c66e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d002      	beq.n	800c592 <USBD_SetConfig+0x36>
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d023      	beq.n	800c5d8 <USBD_SetConfig+0x7c>
 800c590:	e062      	b.n	800c658 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c592:	4b38      	ldr	r3, [pc, #224]	@ (800c674 <USBD_SetConfig+0x118>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01a      	beq.n	800c5d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c59a:	4b36      	ldr	r3, [pc, #216]	@ (800c674 <USBD_SetConfig+0x118>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2203      	movs	r2, #3
 800c5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5ac:	4b31      	ldr	r3, [pc, #196]	@ (800c674 <USBD_SetConfig+0x118>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff f9e7 	bl	800b986 <USBD_SetClassConfig>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d104      	bne.n	800c5c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f92f 	bl	800c824 <USBD_CtlError>
            return;
 800c5c6:	e052      	b.n	800c66e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f9f3 	bl	800c9b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5ce:	e04e      	b.n	800c66e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f9ef 	bl	800c9b4 <USBD_CtlSendStatus>
        break;
 800c5d6:	e04a      	b.n	800c66e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c5d8:	4b26      	ldr	r3, [pc, #152]	@ (800c674 <USBD_SetConfig+0x118>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d112      	bne.n	800c606 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c5e8:	4b22      	ldr	r3, [pc, #136]	@ (800c674 <USBD_SetConfig+0x118>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c5f2:	4b20      	ldr	r3, [pc, #128]	@ (800c674 <USBD_SetConfig+0x118>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff f9e3 	bl	800b9c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f9d8 	bl	800c9b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c604:	e033      	b.n	800c66e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c606:	4b1b      	ldr	r3, [pc, #108]	@ (800c674 <USBD_SetConfig+0x118>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d01d      	beq.n	800c650 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	4619      	mov	r1, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff f9d1 	bl	800b9c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c622:	4b14      	ldr	r3, [pc, #80]	@ (800c674 <USBD_SetConfig+0x118>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c62c:	4b11      	ldr	r3, [pc, #68]	@ (800c674 <USBD_SetConfig+0x118>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff f9a7 	bl	800b986 <USBD_SetClassConfig>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d104      	bne.n	800c648 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f8ef 	bl	800c824 <USBD_CtlError>
            return;
 800c646:	e012      	b.n	800c66e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f9b3 	bl	800c9b4 <USBD_CtlSendStatus>
        break;
 800c64e:	e00e      	b.n	800c66e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f9af 	bl	800c9b4 <USBD_CtlSendStatus>
        break;
 800c656:	e00a      	b.n	800c66e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f8e2 	bl	800c824 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c660:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <USBD_SetConfig+0x118>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff f9ac 	bl	800b9c4 <USBD_ClrClassConfig>
        break;
 800c66c:	bf00      	nop
    }
  }
}
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20000438 	.word	0x20000438

0800c678 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	88db      	ldrh	r3, [r3, #6]
 800c686:	2b01      	cmp	r3, #1
 800c688:	d004      	beq.n	800c694 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f8c9 	bl	800c824 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c692:	e022      	b.n	800c6da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	dc02      	bgt.n	800c6a4 <USBD_GetConfig+0x2c>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	dc03      	bgt.n	800c6aa <USBD_GetConfig+0x32>
 800c6a2:	e015      	b.n	800c6d0 <USBD_GetConfig+0x58>
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d00b      	beq.n	800c6c0 <USBD_GetConfig+0x48>
 800c6a8:	e012      	b.n	800c6d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f91d 	bl	800c8f8 <USBD_CtlSendData>
        break;
 800c6be:	e00c      	b.n	800c6da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f915 	bl	800c8f8 <USBD_CtlSendData>
        break;
 800c6ce:	e004      	b.n	800c6da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f8a6 	bl	800c824 <USBD_CtlError>
        break;
 800c6d8:	bf00      	nop
}
 800c6da:	bf00      	nop
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b082      	sub	sp, #8
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d81e      	bhi.n	800c736 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	88db      	ldrh	r3, [r3, #6]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d004      	beq.n	800c70a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f88e 	bl	800c824 <USBD_CtlError>
        break;
 800c708:	e01a      	b.n	800c740 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c716:	2b00      	cmp	r3, #0
 800c718:	d005      	beq.n	800c726 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f043 0202 	orr.w	r2, r3, #2
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	330c      	adds	r3, #12
 800c72a:	2202      	movs	r2, #2
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f8e2 	bl	800c8f8 <USBD_CtlSendData>
      break;
 800c734:	e004      	b.n	800c740 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f873 	bl	800c824 <USBD_CtlError>
      break;
 800c73e:	bf00      	nop
  }
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	885b      	ldrh	r3, [r3, #2]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d106      	bne.n	800c768 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f926 	bl	800c9b4 <USBD_CtlSendStatus>
  }
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c780:	3b01      	subs	r3, #1
 800c782:	2b02      	cmp	r3, #2
 800c784:	d80b      	bhi.n	800c79e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	885b      	ldrh	r3, [r3, #2]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d10c      	bne.n	800c7a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f90c 	bl	800c9b4 <USBD_CtlSendStatus>
      }
      break;
 800c79c:	e004      	b.n	800c7a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f83f 	bl	800c824 <USBD_CtlError>
      break;
 800c7a6:	e000      	b.n	800c7aa <USBD_ClrFeature+0x3a>
      break;
 800c7a8:	bf00      	nop
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781a      	ldrb	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	785a      	ldrb	r2, [r3, #1]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	3302      	adds	r3, #2
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	3303      	adds	r3, #3
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	021b      	lsls	r3, r3, #8
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4413      	add	r3, r2
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	3305      	adds	r3, #5
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	021b      	lsls	r3, r3, #8
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	4413      	add	r3, r2
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	3306      	adds	r3, #6
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	3307      	adds	r3, #7
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	b29b      	uxth	r3, r3
 800c812:	4413      	add	r3, r2
 800c814:	b29a      	uxth	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	80da      	strh	r2, [r3, #6]

}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr

0800c824 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c82e:	2180      	movs	r1, #128	@ 0x80
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fc61 	bl	800d0f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c836:	2100      	movs	r1, #0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fc5d 	bl	800d0f8 <USBD_LL_StallEP>
}
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b086      	sub	sp, #24
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c852:	2300      	movs	r3, #0
 800c854:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d032      	beq.n	800c8c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f000 f834 	bl	800c8ca <USBD_GetLen>
 800c862:	4603      	mov	r3, r0
 800c864:	3301      	adds	r3, #1
 800c866:	b29b      	uxth	r3, r3
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c870:	7dfb      	ldrb	r3, [r7, #23]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	75fa      	strb	r2, [r7, #23]
 800c876:	461a      	mov	r2, r3
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	4413      	add	r3, r2
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	7812      	ldrb	r2, [r2, #0]
 800c880:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	1c5a      	adds	r2, r3, #1
 800c886:	75fa      	strb	r2, [r7, #23]
 800c888:	461a      	mov	r2, r3
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	4413      	add	r3, r2
 800c88e:	2203      	movs	r2, #3
 800c890:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c892:	e012      	b.n	800c8ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	60fa      	str	r2, [r7, #12]
 800c89a:	7dfa      	ldrb	r2, [r7, #23]
 800c89c:	1c51      	adds	r1, r2, #1
 800c89e:	75f9      	strb	r1, [r7, #23]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	440a      	add	r2, r1
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	75fa      	strb	r2, [r7, #23]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1e8      	bne.n	800c894 <USBD_GetString+0x4e>
    }
  }
}
 800c8c2:	bf00      	nop
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c8d6:	e005      	b.n	800c8e4 <USBD_GetLen+0x1a>
  {
    len++;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f5      	bne.n	800c8d8 <USBD_GetLen+0xe>
  }

  return len;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bc80      	pop	{r7}
 800c8f6:	4770      	bx	lr

0800c8f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	4613      	mov	r3, r2
 800c904:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2202      	movs	r2, #2
 800c90a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c90e:	88fa      	ldrh	r2, [r7, #6]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c914:	88fa      	ldrh	r2, [r7, #6]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c91a:	88fb      	ldrh	r3, [r7, #6]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	2100      	movs	r1, #0
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 fc72 	bl	800d20a <USBD_LL_Transmit>

  return USBD_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4613      	mov	r3, r2
 800c93c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c93e:	88fb      	ldrh	r3, [r7, #6]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	2100      	movs	r1, #0
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 fc60 	bl	800d20a <USBD_LL_Transmit>

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2203      	movs	r2, #3
 800c966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c96a:	88fa      	ldrh	r2, [r7, #6]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c972:	88fa      	ldrh	r2, [r7, #6]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c97a:	88fb      	ldrh	r3, [r7, #6]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	2100      	movs	r1, #0
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 fc65 	bl	800d250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c99e:	88fb      	ldrh	r3, [r7, #6]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 fc53 	bl	800d250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2204      	movs	r2, #4
 800c9c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fc1d 	bl	800d20a <USBD_LL_Transmit>

  return USBD_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2205      	movs	r2, #5
 800c9e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fc2d 	bl	800d250 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca04:	2200      	movs	r2, #0
 800ca06:	4912      	ldr	r1, [pc, #72]	@ (800ca50 <MX_USB_DEVICE_Init+0x50>)
 800ca08:	4812      	ldr	r0, [pc, #72]	@ (800ca54 <MX_USB_DEVICE_Init+0x54>)
 800ca0a:	f7fe ff62 	bl	800b8d2 <USBD_Init>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca14:	f7f7 f998 	bl	8003d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca18:	490f      	ldr	r1, [pc, #60]	@ (800ca58 <MX_USB_DEVICE_Init+0x58>)
 800ca1a:	480e      	ldr	r0, [pc, #56]	@ (800ca54 <MX_USB_DEVICE_Init+0x54>)
 800ca1c:	f7fe ff84 	bl	800b928 <USBD_RegisterClass>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca26:	f7f7 f98f 	bl	8003d48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca2a:	490c      	ldr	r1, [pc, #48]	@ (800ca5c <MX_USB_DEVICE_Init+0x5c>)
 800ca2c:	4809      	ldr	r0, [pc, #36]	@ (800ca54 <MX_USB_DEVICE_Init+0x54>)
 800ca2e:	f7fe feb5 	bl	800b79c <USBD_CDC_RegisterInterface>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca38:	f7f7 f986 	bl	8003d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca3c:	4805      	ldr	r0, [pc, #20]	@ (800ca54 <MX_USB_DEVICE_Init+0x54>)
 800ca3e:	f7fe ff8c 	bl	800b95a <USBD_Start>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca48:	f7f7 f97e 	bl	8003d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca4c:	bf00      	nop
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20000154 	.word	0x20000154
 800ca54:	2000043c 	.word	0x2000043c
 800ca58:	20000040 	.word	0x20000040
 800ca5c:	20000144 	.word	0x20000144

0800ca60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca64:	2200      	movs	r2, #0
 800ca66:	4905      	ldr	r1, [pc, #20]	@ (800ca7c <CDC_Init_FS+0x1c>)
 800ca68:	4805      	ldr	r0, [pc, #20]	@ (800ca80 <CDC_Init_FS+0x20>)
 800ca6a:	f7fe fead 	bl	800b7c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca6e:	4905      	ldr	r1, [pc, #20]	@ (800ca84 <CDC_Init_FS+0x24>)
 800ca70:	4803      	ldr	r0, [pc, #12]	@ (800ca80 <CDC_Init_FS+0x20>)
 800ca72:	f7fe fec2 	bl	800b7fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20000ae8 	.word	0x20000ae8
 800ca80:	2000043c 	.word	0x2000043c
 800ca84:	20000700 	.word	0x20000700

0800ca88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bc80      	pop	{r7}
 800ca94:	4770      	bx	lr
	...

0800ca98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
 800caa4:	4613      	mov	r3, r2
 800caa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800caa8:	79fb      	ldrb	r3, [r7, #7]
 800caaa:	2b23      	cmp	r3, #35	@ 0x23
 800caac:	d84a      	bhi.n	800cb44 <CDC_Control_FS+0xac>
 800caae:	a201      	add	r2, pc, #4	@ (adr r2, 800cab4 <CDC_Control_FS+0x1c>)
 800cab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab4:	0800cb45 	.word	0x0800cb45
 800cab8:	0800cb45 	.word	0x0800cb45
 800cabc:	0800cb45 	.word	0x0800cb45
 800cac0:	0800cb45 	.word	0x0800cb45
 800cac4:	0800cb45 	.word	0x0800cb45
 800cac8:	0800cb45 	.word	0x0800cb45
 800cacc:	0800cb45 	.word	0x0800cb45
 800cad0:	0800cb45 	.word	0x0800cb45
 800cad4:	0800cb45 	.word	0x0800cb45
 800cad8:	0800cb45 	.word	0x0800cb45
 800cadc:	0800cb45 	.word	0x0800cb45
 800cae0:	0800cb45 	.word	0x0800cb45
 800cae4:	0800cb45 	.word	0x0800cb45
 800cae8:	0800cb45 	.word	0x0800cb45
 800caec:	0800cb45 	.word	0x0800cb45
 800caf0:	0800cb45 	.word	0x0800cb45
 800caf4:	0800cb45 	.word	0x0800cb45
 800caf8:	0800cb45 	.word	0x0800cb45
 800cafc:	0800cb45 	.word	0x0800cb45
 800cb00:	0800cb45 	.word	0x0800cb45
 800cb04:	0800cb45 	.word	0x0800cb45
 800cb08:	0800cb45 	.word	0x0800cb45
 800cb0c:	0800cb45 	.word	0x0800cb45
 800cb10:	0800cb45 	.word	0x0800cb45
 800cb14:	0800cb45 	.word	0x0800cb45
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	0800cb45 	.word	0x0800cb45
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb45 	.word	0x0800cb45
 800cb2c:	0800cb45 	.word	0x0800cb45
 800cb30:	0800cb45 	.word	0x0800cb45
 800cb34:	0800cb45 	.word	0x0800cb45
 800cb38:	0800cb45 	.word	0x0800cb45
 800cb3c:	0800cb45 	.word	0x0800cb45
 800cb40:	0800cb45 	.word	0x0800cb45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb44:	bf00      	nop
  }

  return (USBD_OK);
 800cb46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bc80      	pop	{r7}
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop

0800cb54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	480a      	ldr	r0, [pc, #40]	@ (800cb8c <CDC_Receive_FS+0x38>)
 800cb62:	f7fe fe4a 	bl	800b7fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb66:	4809      	ldr	r0, [pc, #36]	@ (800cb8c <CDC_Receive_FS+0x38>)
 800cb68:	f7fe fe89 	bl	800b87e <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d006      	beq.n	800cb82 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	4905      	ldr	r1, [pc, #20]	@ (800cb90 <CDC_Receive_FS+0x3c>)
 800cb7c:	4805      	ldr	r0, [pc, #20]	@ (800cb94 <CDC_Receive_FS+0x40>)
 800cb7e:	f000 fc71 	bl	800d464 <memcpy>
  }
  return (USBD_OK);
 800cb82:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	2000043c 	.word	0x2000043c
 800cb90:	20000700 	.word	0x20000700
 800cb94:	20000350 	.word	0x20000350

0800cb98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cba8:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e00b      	b.n	800cbd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbbe:	887b      	ldrh	r3, [r7, #2]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	4806      	ldr	r0, [pc, #24]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbc6:	f7fe fdff 	bl	800b7c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbca:	4805      	ldr	r0, [pc, #20]	@ (800cbe0 <CDC_Transmit_FS+0x48>)
 800cbcc:	f7fe fe28 	bl	800b820 <USBD_CDC_TransmitPacket>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	2000043c 	.word	0x2000043c

0800cbe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2212      	movs	r2, #18
 800cbf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbf6:	4b03      	ldr	r3, [pc, #12]	@ (800cc04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bc80      	pop	{r7}
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20000170 	.word	0x20000170

0800cc08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2204      	movs	r2, #4
 800cc18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc1a:	4b03      	ldr	r3, [pc, #12]	@ (800cc28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bc80      	pop	{r7}
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	20000184 	.word	0x20000184

0800cc2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d105      	bne.n	800cc4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	4907      	ldr	r1, [pc, #28]	@ (800cc60 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc42:	4808      	ldr	r0, [pc, #32]	@ (800cc64 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc44:	f7ff fdff 	bl	800c846 <USBD_GetString>
 800cc48:	e004      	b.n	800cc54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	4904      	ldr	r1, [pc, #16]	@ (800cc60 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc4e:	4805      	ldr	r0, [pc, #20]	@ (800cc64 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc50:	f7ff fdf9 	bl	800c846 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc54:	4b02      	ldr	r3, [pc, #8]	@ (800cc60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20000ed0 	.word	0x20000ed0
 800cc64:	0800e750 	.word	0x0800e750

0800cc68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	4904      	ldr	r1, [pc, #16]	@ (800cc88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc78:	4804      	ldr	r0, [pc, #16]	@ (800cc8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc7a:	f7ff fde4 	bl	800c846 <USBD_GetString>
  return USBD_StrDesc;
 800cc7e:	4b02      	ldr	r3, [pc, #8]	@ (800cc88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20000ed0 	.word	0x20000ed0
 800cc8c:	0800e768 	.word	0x0800e768

0800cc90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	6039      	str	r1, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	221a      	movs	r2, #26
 800cca0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cca2:	f000 f843 	bl	800cd2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cca6:	4b02      	ldr	r3, [pc, #8]	@ (800ccb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20000188 	.word	0x20000188

0800ccb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	@ (800cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	@ (800ccec <USBD_FS_ConfigStrDescriptor+0x38>)
 800cccc:	f7ff fdbb 	bl	800c846 <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	@ (800cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	@ (800ccec <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccd8:	f7ff fdb5 	bl	800c846 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20000ed0 	.word	0x20000ed0
 800ccec:	0800e77c 	.word	0x0800e77c

0800ccf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	4907      	ldr	r1, [pc, #28]	@ (800cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd06:	4808      	ldr	r0, [pc, #32]	@ (800cd28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd08:	f7ff fd9d 	bl	800c846 <USBD_GetString>
 800cd0c:	e004      	b.n	800cd18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	4904      	ldr	r1, [pc, #16]	@ (800cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd12:	4805      	ldr	r0, [pc, #20]	@ (800cd28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd14:	f7ff fd97 	bl	800c846 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd18:	4b02      	ldr	r3, [pc, #8]	@ (800cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20000ed0 	.word	0x20000ed0
 800cd28:	0800e788 	.word	0x0800e788

0800cd2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd32:	4b0f      	ldr	r3, [pc, #60]	@ (800cd70 <Get_SerialNum+0x44>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd38:	4b0e      	ldr	r3, [pc, #56]	@ (800cd74 <Get_SerialNum+0x48>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <Get_SerialNum+0x4c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4413      	add	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d009      	beq.n	800cd66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd52:	2208      	movs	r2, #8
 800cd54:	4909      	ldr	r1, [pc, #36]	@ (800cd7c <Get_SerialNum+0x50>)
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f000 f814 	bl	800cd84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd5c:	2204      	movs	r2, #4
 800cd5e:	4908      	ldr	r1, [pc, #32]	@ (800cd80 <Get_SerialNum+0x54>)
 800cd60:	68b8      	ldr	r0, [r7, #8]
 800cd62:	f000 f80f 	bl	800cd84 <IntToUnicode>
  }
}
 800cd66:	bf00      	nop
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	1ffff7e8 	.word	0x1ffff7e8
 800cd74:	1ffff7ec 	.word	0x1ffff7ec
 800cd78:	1ffff7f0 	.word	0x1ffff7f0
 800cd7c:	2000018a 	.word	0x2000018a
 800cd80:	2000019a 	.word	0x2000019a

0800cd84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]
 800cd9a:	e027      	b.n	800cdec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	0f1b      	lsrs	r3, r3, #28
 800cda0:	2b09      	cmp	r3, #9
 800cda2:	d80b      	bhi.n	800cdbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	0f1b      	lsrs	r3, r3, #28
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4619      	mov	r1, r3
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	440b      	add	r3, r1
 800cdb4:	3230      	adds	r2, #48	@ 0x30
 800cdb6:	b2d2      	uxtb	r2, r2
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	e00a      	b.n	800cdd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	0f1b      	lsrs	r3, r3, #28
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	440b      	add	r3, r1
 800cdcc:	3237      	adds	r2, #55	@ 0x37
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	011b      	lsls	r3, r3, #4
 800cdd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	3301      	adds	r3, #1
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	4413      	add	r3, r2
 800cde2:	2200      	movs	r2, #0
 800cde4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	3301      	adds	r3, #1
 800cdea:	75fb      	strb	r3, [r7, #23]
 800cdec:	7dfa      	ldrb	r2, [r7, #23]
 800cdee:	79fb      	ldrb	r3, [r7, #7]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d3d3      	bcc.n	800cd9c <IntToUnicode+0x18>
  }
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	371c      	adds	r7, #28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bc80      	pop	{r7}
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ce44 <HAL_PCD_MspInit+0x44>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d113      	bne.n	800ce3a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce12:	4b0d      	ldr	r3, [pc, #52]	@ (800ce48 <HAL_PCD_MspInit+0x48>)
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	4a0c      	ldr	r2, [pc, #48]	@ (800ce48 <HAL_PCD_MspInit+0x48>)
 800ce18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce1c:	61d3      	str	r3, [r2, #28]
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce48 <HAL_PCD_MspInit+0x48>)
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	2014      	movs	r0, #20
 800ce30:	f7f7 fd6f 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ce34:	2014      	movs	r0, #20
 800ce36:	f7f7 fd88 	bl	800494a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce3a:	bf00      	nop
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	40005c00 	.word	0x40005c00
 800ce48:	40021000 	.word	0x40021000

0800ce4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ce60:	4619      	mov	r1, r3
 800ce62:	4610      	mov	r0, r2
 800ce64:	f7fe fdc1 	bl	800b9ea <USBD_LL_SetupStage>
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ce82:	78fa      	ldrb	r2, [r7, #3]
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	4613      	mov	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	440b      	add	r3, r1
 800ce90:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	78fb      	ldrb	r3, [r7, #3]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7fe fdf3 	bl	800ba84 <USBD_LL_DataOutStage>
}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ceb8:	78fa      	ldrb	r2, [r7, #3]
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	440b      	add	r3, r1
 800cec6:	333c      	adds	r3, #60	@ 0x3c
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	4619      	mov	r1, r3
 800cece:	f7fe fe4a 	bl	800bb66 <USBD_LL_DataInStage>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b082      	sub	sp, #8
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe ff5a 	bl	800bda2 <USBD_LL_SOF>
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cefe:	2301      	movs	r3, #1
 800cf00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d001      	beq.n	800cf0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf0a:	f7f6 ff1d 	bl	8003d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf14:	7bfa      	ldrb	r2, [r7, #15]
 800cf16:	4611      	mov	r1, r2
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe ff0a 	bl	800bd32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fec3 	bl	800bcb0 <USBD_LL_Reset>
}
 800cf2a:	bf00      	nop
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
	...

0800cf34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe ff04 	bl	800bd50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	699b      	ldr	r3, [r3, #24]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d005      	beq.n	800cf5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf50:	4b04      	ldr	r3, [pc, #16]	@ (800cf64 <HAL_PCD_SuspendCallback+0x30>)
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	4a03      	ldr	r2, [pc, #12]	@ (800cf64 <HAL_PCD_SuspendCallback+0x30>)
 800cf56:	f043 0306 	orr.w	r3, r3, #6
 800cf5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	e000ed00 	.word	0xe000ed00

0800cf68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fe fefe 	bl	800bd78 <USBD_LL_Resume>
}
 800cf7c:	bf00      	nop
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf8c:	4a28      	ldr	r2, [pc, #160]	@ (800d030 <USBD_LL_Init+0xac>)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a26      	ldr	r2, [pc, #152]	@ (800d030 <USBD_LL_Init+0xac>)
 800cf98:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf9c:	4b24      	ldr	r3, [pc, #144]	@ (800d030 <USBD_LL_Init+0xac>)
 800cf9e:	4a25      	ldr	r2, [pc, #148]	@ (800d034 <USBD_LL_Init+0xb0>)
 800cfa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cfa2:	4b23      	ldr	r3, [pc, #140]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfa4:	2208      	movs	r2, #8
 800cfa6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cfa8:	4b21      	ldr	r3, [pc, #132]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfaa:	2202      	movs	r2, #2
 800cfac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cfae:	4b20      	ldr	r3, [pc, #128]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cfb4:	4b1e      	ldr	r3, [pc, #120]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfba:	4b1d      	ldr	r3, [pc, #116]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfc0:	481b      	ldr	r0, [pc, #108]	@ (800d030 <USBD_LL_Init+0xac>)
 800cfc2:	f7f8 fcfd 	bl	80059c0 <HAL_PCD_Init>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cfcc:	f7f6 febc 	bl	8003d48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfd6:	2318      	movs	r3, #24
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2100      	movs	r1, #0
 800cfdc:	f7fa f83c 	bl	8007058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfe6:	2358      	movs	r3, #88	@ 0x58
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2180      	movs	r1, #128	@ 0x80
 800cfec:	f7fa f834 	bl	8007058 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cff6:	23c0      	movs	r3, #192	@ 0xc0
 800cff8:	2200      	movs	r2, #0
 800cffa:	2181      	movs	r1, #129	@ 0x81
 800cffc:	f7fa f82c 	bl	8007058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d006:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d00a:	2200      	movs	r2, #0
 800d00c:	2101      	movs	r1, #1
 800d00e:	f7fa f823 	bl	8007058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d01c:	2200      	movs	r2, #0
 800d01e:	2182      	movs	r1, #130	@ 0x82
 800d020:	f7fa f81a 	bl	8007058 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	200010d0 	.word	0x200010d0
 800d034:	40005c00 	.word	0x40005c00

0800d038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d04e:	4618      	mov	r0, r3
 800d050:	f7f8 fdc1 	bl	8005bd6 <HAL_PCD_Start>
 800d054:	4603      	mov	r3, r0
 800d056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d058:	7bfb      	ldrb	r3, [r7, #15]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 f94e 	bl	800d2fc <USBD_Get_USB_Status>
 800d060:	4603      	mov	r3, r0
 800d062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d064:	7bbb      	ldrb	r3, [r7, #14]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	4608      	mov	r0, r1
 800d078:	4611      	mov	r1, r2
 800d07a:	461a      	mov	r2, r3
 800d07c:	4603      	mov	r3, r0
 800d07e:	70fb      	strb	r3, [r7, #3]
 800d080:	460b      	mov	r3, r1
 800d082:	70bb      	strb	r3, [r7, #2]
 800d084:	4613      	mov	r3, r2
 800d086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d096:	78bb      	ldrb	r3, [r7, #2]
 800d098:	883a      	ldrh	r2, [r7, #0]
 800d09a:	78f9      	ldrb	r1, [r7, #3]
 800d09c:	f7f8 ff39 	bl	8005f12 <HAL_PCD_EP_Open>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 f928 	bl	800d2fc <USBD_Get_USB_Status>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0d4:	78fa      	ldrb	r2, [r7, #3]
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7f8 ff80 	bl	8005fde <HAL_PCD_EP_Close>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 f909 	bl	800d2fc <USBD_Get_USB_Status>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d112:	78fa      	ldrb	r2, [r7, #3]
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f7f9 f840 	bl	800619c <HAL_PCD_EP_SetStall>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	4618      	mov	r0, r3
 800d124:	f000 f8ea 	bl	800d2fc <USBD_Get_USB_Status>
 800d128:	4603      	mov	r3, r0
 800d12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	460b      	mov	r3, r1
 800d140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d150:	78fa      	ldrb	r2, [r7, #3]
 800d152:	4611      	mov	r1, r2
 800d154:	4618      	mov	r0, r3
 800d156:	f7f9 f881 	bl	800625c <HAL_PCD_EP_ClrStall>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
 800d160:	4618      	mov	r0, r3
 800d162:	f000 f8cb 	bl	800d2fc <USBD_Get_USB_Status>
 800d166:	4603      	mov	r3, r0
 800d168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d186:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da0c      	bge.n	800d1aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d196:	68f9      	ldr	r1, [r7, #12]
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	4613      	mov	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	e00b      	b.n	800d1c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	440b      	add	r3, r1
 800d1bc:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d1c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bc80      	pop	{r7}
 800d1ca:	4770      	bx	lr

0800d1cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7f8 fe6c 	bl	8005ec8 <HAL_PCD_SetAddress>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 f880 	bl	800d2fc <USBD_Get_USB_Status>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d200:	7bbb      	ldrb	r3, [r7, #14]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b086      	sub	sp, #24
 800d20e:	af00      	add	r7, sp, #0
 800d210:	60f8      	str	r0, [r7, #12]
 800d212:	607a      	str	r2, [r7, #4]
 800d214:	461a      	mov	r2, r3
 800d216:	460b      	mov	r3, r1
 800d218:	72fb      	strb	r3, [r7, #11]
 800d21a:	4613      	mov	r3, r2
 800d21c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d22c:	893b      	ldrh	r3, [r7, #8]
 800d22e:	7af9      	ldrb	r1, [r7, #11]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	f7f8 ff70 	bl	8006116 <HAL_PCD_EP_Transmit>
 800d236:	4603      	mov	r3, r0
 800d238:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23a:	7dfb      	ldrb	r3, [r7, #23]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 f85d 	bl	800d2fc <USBD_Get_USB_Status>
 800d242:	4603      	mov	r3, r0
 800d244:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d246:	7dbb      	ldrb	r3, [r7, #22]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	461a      	mov	r2, r3
 800d25c:	460b      	mov	r3, r1
 800d25e:	72fb      	strb	r3, [r7, #11]
 800d260:	4613      	mov	r3, r2
 800d262:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d272:	893b      	ldrh	r3, [r7, #8]
 800d274:	7af9      	ldrb	r1, [r7, #11]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	f7f8 fef9 	bl	800606e <HAL_PCD_EP_Receive>
 800d27c:	4603      	mov	r3, r0
 800d27e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	4618      	mov	r0, r3
 800d284:	f000 f83a 	bl	800d2fc <USBD_Get_USB_Status>
 800d288:	4603      	mov	r3, r0
 800d28a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d28c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f8 ff1b 	bl	80060e8 <HAL_PCD_EP_GetRxCount>
 800d2b2:	4603      	mov	r3, r0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2c4:	4b02      	ldr	r3, [pc, #8]	@ (800d2d0 <USBD_static_malloc+0x14>)
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bc80      	pop	{r7}
 800d2ce:	4770      	bx	lr
 800d2d0:	200013bc 	.word	0x200013bc

0800d2d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]

}
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bc80      	pop	{r7}
 800d2e4:	4770      	bx	lr

0800d2e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b083      	sub	sp, #12
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2f2:	bf00      	nop
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bc80      	pop	{r7}
 800d2fa:	4770      	bx	lr

0800d2fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d817      	bhi.n	800d340 <USBD_Get_USB_Status+0x44>
 800d310:	a201      	add	r2, pc, #4	@ (adr r2, 800d318 <USBD_Get_USB_Status+0x1c>)
 800d312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d316:	bf00      	nop
 800d318:	0800d329 	.word	0x0800d329
 800d31c:	0800d32f 	.word	0x0800d32f
 800d320:	0800d335 	.word	0x0800d335
 800d324:	0800d33b 	.word	0x0800d33b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
    break;
 800d32c:	e00b      	b.n	800d346 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	73fb      	strb	r3, [r7, #15]
    break;
 800d332:	e008      	b.n	800d346 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d334:	2301      	movs	r3, #1
 800d336:	73fb      	strb	r3, [r7, #15]
    break;
 800d338:	e005      	b.n	800d346 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d33a:	2302      	movs	r3, #2
 800d33c:	73fb      	strb	r3, [r7, #15]
    break;
 800d33e:	e002      	b.n	800d346 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d340:	2302      	movs	r3, #2
 800d342:	73fb      	strb	r3, [r7, #15]
    break;
 800d344:	bf00      	nop
  }
  return usb_status;
 800d346:	7bfb      	ldrb	r3, [r7, #15]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bc80      	pop	{r7}
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop

0800d354 <sniprintf>:
 800d354:	b40c      	push	{r2, r3}
 800d356:	b530      	push	{r4, r5, lr}
 800d358:	4b17      	ldr	r3, [pc, #92]	@ (800d3b8 <sniprintf+0x64>)
 800d35a:	1e0c      	subs	r4, r1, #0
 800d35c:	681d      	ldr	r5, [r3, #0]
 800d35e:	b09d      	sub	sp, #116	@ 0x74
 800d360:	da08      	bge.n	800d374 <sniprintf+0x20>
 800d362:	238b      	movs	r3, #139	@ 0x8b
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	602b      	str	r3, [r5, #0]
 800d36a:	b01d      	add	sp, #116	@ 0x74
 800d36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d370:	b002      	add	sp, #8
 800d372:	4770      	bx	lr
 800d374:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d378:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d37c:	bf0c      	ite	eq
 800d37e:	4623      	moveq	r3, r4
 800d380:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d38c:	9002      	str	r0, [sp, #8]
 800d38e:	9006      	str	r0, [sp, #24]
 800d390:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d394:	4628      	mov	r0, r5
 800d396:	ab21      	add	r3, sp, #132	@ 0x84
 800d398:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d39a:	a902      	add	r1, sp, #8
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	f000 f9c1 	bl	800d724 <_svfiprintf_r>
 800d3a2:	1c43      	adds	r3, r0, #1
 800d3a4:	bfbc      	itt	lt
 800d3a6:	238b      	movlt	r3, #139	@ 0x8b
 800d3a8:	602b      	strlt	r3, [r5, #0]
 800d3aa:	2c00      	cmp	r4, #0
 800d3ac:	d0dd      	beq.n	800d36a <sniprintf+0x16>
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	e7d9      	b.n	800d36a <sniprintf+0x16>
 800d3b6:	bf00      	nop
 800d3b8:	200001a4 	.word	0x200001a4

0800d3bc <siprintf>:
 800d3bc:	b40e      	push	{r1, r2, r3}
 800d3be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d3c2:	b500      	push	{lr}
 800d3c4:	b09c      	sub	sp, #112	@ 0x70
 800d3c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800d3c8:	9002      	str	r0, [sp, #8]
 800d3ca:	9006      	str	r0, [sp, #24]
 800d3cc:	9107      	str	r1, [sp, #28]
 800d3ce:	9104      	str	r1, [sp, #16]
 800d3d0:	4808      	ldr	r0, [pc, #32]	@ (800d3f4 <siprintf+0x38>)
 800d3d2:	4909      	ldr	r1, [pc, #36]	@ (800d3f8 <siprintf+0x3c>)
 800d3d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d8:	9105      	str	r1, [sp, #20]
 800d3da:	6800      	ldr	r0, [r0, #0]
 800d3dc:	a902      	add	r1, sp, #8
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	f000 f9a0 	bl	800d724 <_svfiprintf_r>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	9b02      	ldr	r3, [sp, #8]
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	b01c      	add	sp, #112	@ 0x70
 800d3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3f0:	b003      	add	sp, #12
 800d3f2:	4770      	bx	lr
 800d3f4:	200001a4 	.word	0x200001a4
 800d3f8:	ffff0208 	.word	0xffff0208

0800d3fc <memset>:
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	4402      	add	r2, r0
 800d400:	4293      	cmp	r3, r2
 800d402:	d100      	bne.n	800d406 <memset+0xa>
 800d404:	4770      	bx	lr
 800d406:	f803 1b01 	strb.w	r1, [r3], #1
 800d40a:	e7f9      	b.n	800d400 <memset+0x4>

0800d40c <__errno>:
 800d40c:	4b01      	ldr	r3, [pc, #4]	@ (800d414 <__errno+0x8>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	200001a4 	.word	0x200001a4

0800d418 <__libc_init_array>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	2600      	movs	r6, #0
 800d41c:	4d0c      	ldr	r5, [pc, #48]	@ (800d450 <__libc_init_array+0x38>)
 800d41e:	4c0d      	ldr	r4, [pc, #52]	@ (800d454 <__libc_init_array+0x3c>)
 800d420:	1b64      	subs	r4, r4, r5
 800d422:	10a4      	asrs	r4, r4, #2
 800d424:	42a6      	cmp	r6, r4
 800d426:	d109      	bne.n	800d43c <__libc_init_array+0x24>
 800d428:	f000 fc78 	bl	800dd1c <_init>
 800d42c:	2600      	movs	r6, #0
 800d42e:	4d0a      	ldr	r5, [pc, #40]	@ (800d458 <__libc_init_array+0x40>)
 800d430:	4c0a      	ldr	r4, [pc, #40]	@ (800d45c <__libc_init_array+0x44>)
 800d432:	1b64      	subs	r4, r4, r5
 800d434:	10a4      	asrs	r4, r4, #2
 800d436:	42a6      	cmp	r6, r4
 800d438:	d105      	bne.n	800d446 <__libc_init_array+0x2e>
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d440:	4798      	blx	r3
 800d442:	3601      	adds	r6, #1
 800d444:	e7ee      	b.n	800d424 <__libc_init_array+0xc>
 800d446:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44a:	4798      	blx	r3
 800d44c:	3601      	adds	r6, #1
 800d44e:	e7f2      	b.n	800d436 <__libc_init_array+0x1e>
 800d450:	0800e7fc 	.word	0x0800e7fc
 800d454:	0800e7fc 	.word	0x0800e7fc
 800d458:	0800e7fc 	.word	0x0800e7fc
 800d45c:	0800e800 	.word	0x0800e800

0800d460 <__retarget_lock_acquire_recursive>:
 800d460:	4770      	bx	lr

0800d462 <__retarget_lock_release_recursive>:
 800d462:	4770      	bx	lr

0800d464 <memcpy>:
 800d464:	440a      	add	r2, r1
 800d466:	4291      	cmp	r1, r2
 800d468:	f100 33ff 	add.w	r3, r0, #4294967295
 800d46c:	d100      	bne.n	800d470 <memcpy+0xc>
 800d46e:	4770      	bx	lr
 800d470:	b510      	push	{r4, lr}
 800d472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d476:	4291      	cmp	r1, r2
 800d478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d47c:	d1f9      	bne.n	800d472 <memcpy+0xe>
 800d47e:	bd10      	pop	{r4, pc}

0800d480 <_free_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4605      	mov	r5, r0
 800d484:	2900      	cmp	r1, #0
 800d486:	d040      	beq.n	800d50a <_free_r+0x8a>
 800d488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48c:	1f0c      	subs	r4, r1, #4
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfb8      	it	lt
 800d492:	18e4      	addlt	r4, r4, r3
 800d494:	f000 f8de 	bl	800d654 <__malloc_lock>
 800d498:	4a1c      	ldr	r2, [pc, #112]	@ (800d50c <_free_r+0x8c>)
 800d49a:	6813      	ldr	r3, [r2, #0]
 800d49c:	b933      	cbnz	r3, 800d4ac <_free_r+0x2c>
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	6014      	str	r4, [r2, #0]
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a8:	f000 b8da 	b.w	800d660 <__malloc_unlock>
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	d908      	bls.n	800d4c2 <_free_r+0x42>
 800d4b0:	6820      	ldr	r0, [r4, #0]
 800d4b2:	1821      	adds	r1, r4, r0
 800d4b4:	428b      	cmp	r3, r1
 800d4b6:	bf01      	itttt	eq
 800d4b8:	6819      	ldreq	r1, [r3, #0]
 800d4ba:	685b      	ldreq	r3, [r3, #4]
 800d4bc:	1809      	addeq	r1, r1, r0
 800d4be:	6021      	streq	r1, [r4, #0]
 800d4c0:	e7ed      	b.n	800d49e <_free_r+0x1e>
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	b10b      	cbz	r3, 800d4cc <_free_r+0x4c>
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	d9fa      	bls.n	800d4c2 <_free_r+0x42>
 800d4cc:	6811      	ldr	r1, [r2, #0]
 800d4ce:	1850      	adds	r0, r2, r1
 800d4d0:	42a0      	cmp	r0, r4
 800d4d2:	d10b      	bne.n	800d4ec <_free_r+0x6c>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	4401      	add	r1, r0
 800d4d8:	1850      	adds	r0, r2, r1
 800d4da:	4283      	cmp	r3, r0
 800d4dc:	6011      	str	r1, [r2, #0]
 800d4de:	d1e0      	bne.n	800d4a2 <_free_r+0x22>
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	4408      	add	r0, r1
 800d4e6:	6010      	str	r0, [r2, #0]
 800d4e8:	6053      	str	r3, [r2, #4]
 800d4ea:	e7da      	b.n	800d4a2 <_free_r+0x22>
 800d4ec:	d902      	bls.n	800d4f4 <_free_r+0x74>
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	602b      	str	r3, [r5, #0]
 800d4f2:	e7d6      	b.n	800d4a2 <_free_r+0x22>
 800d4f4:	6820      	ldr	r0, [r4, #0]
 800d4f6:	1821      	adds	r1, r4, r0
 800d4f8:	428b      	cmp	r3, r1
 800d4fa:	bf01      	itttt	eq
 800d4fc:	6819      	ldreq	r1, [r3, #0]
 800d4fe:	685b      	ldreq	r3, [r3, #4]
 800d500:	1809      	addeq	r1, r1, r0
 800d502:	6021      	streq	r1, [r4, #0]
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6054      	str	r4, [r2, #4]
 800d508:	e7cb      	b.n	800d4a2 <_free_r+0x22>
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	20001720 	.word	0x20001720

0800d510 <sbrk_aligned>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	4e0f      	ldr	r6, [pc, #60]	@ (800d550 <sbrk_aligned+0x40>)
 800d514:	460c      	mov	r4, r1
 800d516:	6831      	ldr	r1, [r6, #0]
 800d518:	4605      	mov	r5, r0
 800d51a:	b911      	cbnz	r1, 800d522 <sbrk_aligned+0x12>
 800d51c:	f000 fbaa 	bl	800dc74 <_sbrk_r>
 800d520:	6030      	str	r0, [r6, #0]
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f000 fba5 	bl	800dc74 <_sbrk_r>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	d103      	bne.n	800d536 <sbrk_aligned+0x26>
 800d52e:	f04f 34ff 	mov.w	r4, #4294967295
 800d532:	4620      	mov	r0, r4
 800d534:	bd70      	pop	{r4, r5, r6, pc}
 800d536:	1cc4      	adds	r4, r0, #3
 800d538:	f024 0403 	bic.w	r4, r4, #3
 800d53c:	42a0      	cmp	r0, r4
 800d53e:	d0f8      	beq.n	800d532 <sbrk_aligned+0x22>
 800d540:	1a21      	subs	r1, r4, r0
 800d542:	4628      	mov	r0, r5
 800d544:	f000 fb96 	bl	800dc74 <_sbrk_r>
 800d548:	3001      	adds	r0, #1
 800d54a:	d1f2      	bne.n	800d532 <sbrk_aligned+0x22>
 800d54c:	e7ef      	b.n	800d52e <sbrk_aligned+0x1e>
 800d54e:	bf00      	nop
 800d550:	2000171c 	.word	0x2000171c

0800d554 <_malloc_r>:
 800d554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d558:	1ccd      	adds	r5, r1, #3
 800d55a:	f025 0503 	bic.w	r5, r5, #3
 800d55e:	3508      	adds	r5, #8
 800d560:	2d0c      	cmp	r5, #12
 800d562:	bf38      	it	cc
 800d564:	250c      	movcc	r5, #12
 800d566:	2d00      	cmp	r5, #0
 800d568:	4606      	mov	r6, r0
 800d56a:	db01      	blt.n	800d570 <_malloc_r+0x1c>
 800d56c:	42a9      	cmp	r1, r5
 800d56e:	d904      	bls.n	800d57a <_malloc_r+0x26>
 800d570:	230c      	movs	r3, #12
 800d572:	6033      	str	r3, [r6, #0]
 800d574:	2000      	movs	r0, #0
 800d576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d57a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d650 <_malloc_r+0xfc>
 800d57e:	f000 f869 	bl	800d654 <__malloc_lock>
 800d582:	f8d8 3000 	ldr.w	r3, [r8]
 800d586:	461c      	mov	r4, r3
 800d588:	bb44      	cbnz	r4, 800d5dc <_malloc_r+0x88>
 800d58a:	4629      	mov	r1, r5
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff ffbf 	bl	800d510 <sbrk_aligned>
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	4604      	mov	r4, r0
 800d596:	d158      	bne.n	800d64a <_malloc_r+0xf6>
 800d598:	f8d8 4000 	ldr.w	r4, [r8]
 800d59c:	4627      	mov	r7, r4
 800d59e:	2f00      	cmp	r7, #0
 800d5a0:	d143      	bne.n	800d62a <_malloc_r+0xd6>
 800d5a2:	2c00      	cmp	r4, #0
 800d5a4:	d04b      	beq.n	800d63e <_malloc_r+0xea>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	eb04 0903 	add.w	r9, r4, r3
 800d5b0:	f000 fb60 	bl	800dc74 <_sbrk_r>
 800d5b4:	4581      	cmp	r9, r0
 800d5b6:	d142      	bne.n	800d63e <_malloc_r+0xea>
 800d5b8:	6821      	ldr	r1, [r4, #0]
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	1a6d      	subs	r5, r5, r1
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7ff ffa6 	bl	800d510 <sbrk_aligned>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d03a      	beq.n	800d63e <_malloc_r+0xea>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	442b      	add	r3, r5
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	bb62      	cbnz	r2, 800d630 <_malloc_r+0xdc>
 800d5d6:	f8c8 7000 	str.w	r7, [r8]
 800d5da:	e00f      	b.n	800d5fc <_malloc_r+0xa8>
 800d5dc:	6822      	ldr	r2, [r4, #0]
 800d5de:	1b52      	subs	r2, r2, r5
 800d5e0:	d420      	bmi.n	800d624 <_malloc_r+0xd0>
 800d5e2:	2a0b      	cmp	r2, #11
 800d5e4:	d917      	bls.n	800d616 <_malloc_r+0xc2>
 800d5e6:	1961      	adds	r1, r4, r5
 800d5e8:	42a3      	cmp	r3, r4
 800d5ea:	6025      	str	r5, [r4, #0]
 800d5ec:	bf18      	it	ne
 800d5ee:	6059      	strne	r1, [r3, #4]
 800d5f0:	6863      	ldr	r3, [r4, #4]
 800d5f2:	bf08      	it	eq
 800d5f4:	f8c8 1000 	streq.w	r1, [r8]
 800d5f8:	5162      	str	r2, [r4, r5]
 800d5fa:	604b      	str	r3, [r1, #4]
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f000 f82f 	bl	800d660 <__malloc_unlock>
 800d602:	f104 000b 	add.w	r0, r4, #11
 800d606:	1d23      	adds	r3, r4, #4
 800d608:	f020 0007 	bic.w	r0, r0, #7
 800d60c:	1ac2      	subs	r2, r0, r3
 800d60e:	bf1c      	itt	ne
 800d610:	1a1b      	subne	r3, r3, r0
 800d612:	50a3      	strne	r3, [r4, r2]
 800d614:	e7af      	b.n	800d576 <_malloc_r+0x22>
 800d616:	6862      	ldr	r2, [r4, #4]
 800d618:	42a3      	cmp	r3, r4
 800d61a:	bf0c      	ite	eq
 800d61c:	f8c8 2000 	streq.w	r2, [r8]
 800d620:	605a      	strne	r2, [r3, #4]
 800d622:	e7eb      	b.n	800d5fc <_malloc_r+0xa8>
 800d624:	4623      	mov	r3, r4
 800d626:	6864      	ldr	r4, [r4, #4]
 800d628:	e7ae      	b.n	800d588 <_malloc_r+0x34>
 800d62a:	463c      	mov	r4, r7
 800d62c:	687f      	ldr	r7, [r7, #4]
 800d62e:	e7b6      	b.n	800d59e <_malloc_r+0x4a>
 800d630:	461a      	mov	r2, r3
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	42a3      	cmp	r3, r4
 800d636:	d1fb      	bne.n	800d630 <_malloc_r+0xdc>
 800d638:	2300      	movs	r3, #0
 800d63a:	6053      	str	r3, [r2, #4]
 800d63c:	e7de      	b.n	800d5fc <_malloc_r+0xa8>
 800d63e:	230c      	movs	r3, #12
 800d640:	4630      	mov	r0, r6
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f000 f80c 	bl	800d660 <__malloc_unlock>
 800d648:	e794      	b.n	800d574 <_malloc_r+0x20>
 800d64a:	6005      	str	r5, [r0, #0]
 800d64c:	e7d6      	b.n	800d5fc <_malloc_r+0xa8>
 800d64e:	bf00      	nop
 800d650:	20001720 	.word	0x20001720

0800d654 <__malloc_lock>:
 800d654:	4801      	ldr	r0, [pc, #4]	@ (800d65c <__malloc_lock+0x8>)
 800d656:	f7ff bf03 	b.w	800d460 <__retarget_lock_acquire_recursive>
 800d65a:	bf00      	nop
 800d65c:	20001718 	.word	0x20001718

0800d660 <__malloc_unlock>:
 800d660:	4801      	ldr	r0, [pc, #4]	@ (800d668 <__malloc_unlock+0x8>)
 800d662:	f7ff befe 	b.w	800d462 <__retarget_lock_release_recursive>
 800d666:	bf00      	nop
 800d668:	20001718 	.word	0x20001718

0800d66c <__ssputs_r>:
 800d66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d670:	461f      	mov	r7, r3
 800d672:	688e      	ldr	r6, [r1, #8]
 800d674:	4682      	mov	sl, r0
 800d676:	42be      	cmp	r6, r7
 800d678:	460c      	mov	r4, r1
 800d67a:	4690      	mov	r8, r2
 800d67c:	680b      	ldr	r3, [r1, #0]
 800d67e:	d82d      	bhi.n	800d6dc <__ssputs_r+0x70>
 800d680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d684:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d688:	d026      	beq.n	800d6d8 <__ssputs_r+0x6c>
 800d68a:	6965      	ldr	r5, [r4, #20]
 800d68c:	6909      	ldr	r1, [r1, #16]
 800d68e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d692:	eba3 0901 	sub.w	r9, r3, r1
 800d696:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d69a:	1c7b      	adds	r3, r7, #1
 800d69c:	444b      	add	r3, r9
 800d69e:	106d      	asrs	r5, r5, #1
 800d6a0:	429d      	cmp	r5, r3
 800d6a2:	bf38      	it	cc
 800d6a4:	461d      	movcc	r5, r3
 800d6a6:	0553      	lsls	r3, r2, #21
 800d6a8:	d527      	bpl.n	800d6fa <__ssputs_r+0x8e>
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	f7ff ff52 	bl	800d554 <_malloc_r>
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	b360      	cbz	r0, 800d70e <__ssputs_r+0xa2>
 800d6b4:	464a      	mov	r2, r9
 800d6b6:	6921      	ldr	r1, [r4, #16]
 800d6b8:	f7ff fed4 	bl	800d464 <memcpy>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d6c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6c6:	81a3      	strh	r3, [r4, #12]
 800d6c8:	6126      	str	r6, [r4, #16]
 800d6ca:	444e      	add	r6, r9
 800d6cc:	6026      	str	r6, [r4, #0]
 800d6ce:	463e      	mov	r6, r7
 800d6d0:	6165      	str	r5, [r4, #20]
 800d6d2:	eba5 0509 	sub.w	r5, r5, r9
 800d6d6:	60a5      	str	r5, [r4, #8]
 800d6d8:	42be      	cmp	r6, r7
 800d6da:	d900      	bls.n	800d6de <__ssputs_r+0x72>
 800d6dc:	463e      	mov	r6, r7
 800d6de:	4632      	mov	r2, r6
 800d6e0:	4641      	mov	r1, r8
 800d6e2:	6820      	ldr	r0, [r4, #0]
 800d6e4:	f000 faac 	bl	800dc40 <memmove>
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	68a3      	ldr	r3, [r4, #8]
 800d6ec:	1b9b      	subs	r3, r3, r6
 800d6ee:	60a3      	str	r3, [r4, #8]
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	4433      	add	r3, r6
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	f000 fad8 	bl	800dcb0 <_realloc_r>
 800d700:	4606      	mov	r6, r0
 800d702:	2800      	cmp	r0, #0
 800d704:	d1e0      	bne.n	800d6c8 <__ssputs_r+0x5c>
 800d706:	4650      	mov	r0, sl
 800d708:	6921      	ldr	r1, [r4, #16]
 800d70a:	f7ff feb9 	bl	800d480 <_free_r>
 800d70e:	230c      	movs	r3, #12
 800d710:	f8ca 3000 	str.w	r3, [sl]
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	f04f 30ff 	mov.w	r0, #4294967295
 800d71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d71e:	81a3      	strh	r3, [r4, #12]
 800d720:	e7e9      	b.n	800d6f6 <__ssputs_r+0x8a>
	...

0800d724 <_svfiprintf_r>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	4698      	mov	r8, r3
 800d72a:	898b      	ldrh	r3, [r1, #12]
 800d72c:	4607      	mov	r7, r0
 800d72e:	061b      	lsls	r3, r3, #24
 800d730:	460d      	mov	r5, r1
 800d732:	4614      	mov	r4, r2
 800d734:	b09d      	sub	sp, #116	@ 0x74
 800d736:	d510      	bpl.n	800d75a <_svfiprintf_r+0x36>
 800d738:	690b      	ldr	r3, [r1, #16]
 800d73a:	b973      	cbnz	r3, 800d75a <_svfiprintf_r+0x36>
 800d73c:	2140      	movs	r1, #64	@ 0x40
 800d73e:	f7ff ff09 	bl	800d554 <_malloc_r>
 800d742:	6028      	str	r0, [r5, #0]
 800d744:	6128      	str	r0, [r5, #16]
 800d746:	b930      	cbnz	r0, 800d756 <_svfiprintf_r+0x32>
 800d748:	230c      	movs	r3, #12
 800d74a:	603b      	str	r3, [r7, #0]
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	b01d      	add	sp, #116	@ 0x74
 800d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d756:	2340      	movs	r3, #64	@ 0x40
 800d758:	616b      	str	r3, [r5, #20]
 800d75a:	2300      	movs	r3, #0
 800d75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d75e:	2320      	movs	r3, #32
 800d760:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d764:	2330      	movs	r3, #48	@ 0x30
 800d766:	f04f 0901 	mov.w	r9, #1
 800d76a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d76e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d908 <_svfiprintf_r+0x1e4>
 800d772:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d776:	4623      	mov	r3, r4
 800d778:	469a      	mov	sl, r3
 800d77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d77e:	b10a      	cbz	r2, 800d784 <_svfiprintf_r+0x60>
 800d780:	2a25      	cmp	r2, #37	@ 0x25
 800d782:	d1f9      	bne.n	800d778 <_svfiprintf_r+0x54>
 800d784:	ebba 0b04 	subs.w	fp, sl, r4
 800d788:	d00b      	beq.n	800d7a2 <_svfiprintf_r+0x7e>
 800d78a:	465b      	mov	r3, fp
 800d78c:	4622      	mov	r2, r4
 800d78e:	4629      	mov	r1, r5
 800d790:	4638      	mov	r0, r7
 800d792:	f7ff ff6b 	bl	800d66c <__ssputs_r>
 800d796:	3001      	adds	r0, #1
 800d798:	f000 80a7 	beq.w	800d8ea <_svfiprintf_r+0x1c6>
 800d79c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d79e:	445a      	add	r2, fp
 800d7a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 809f 	beq.w	800d8ea <_svfiprintf_r+0x1c6>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b6:	f10a 0a01 	add.w	sl, sl, #1
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	9307      	str	r3, [sp, #28]
 800d7be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7c4:	4654      	mov	r4, sl
 800d7c6:	2205      	movs	r2, #5
 800d7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7cc:	484e      	ldr	r0, [pc, #312]	@ (800d908 <_svfiprintf_r+0x1e4>)
 800d7ce:	f000 fa61 	bl	800dc94 <memchr>
 800d7d2:	9a04      	ldr	r2, [sp, #16]
 800d7d4:	b9d8      	cbnz	r0, 800d80e <_svfiprintf_r+0xea>
 800d7d6:	06d0      	lsls	r0, r2, #27
 800d7d8:	bf44      	itt	mi
 800d7da:	2320      	movmi	r3, #32
 800d7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e0:	0711      	lsls	r1, r2, #28
 800d7e2:	bf44      	itt	mi
 800d7e4:	232b      	movmi	r3, #43	@ 0x2b
 800d7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7f0:	d015      	beq.n	800d81e <_svfiprintf_r+0xfa>
 800d7f2:	4654      	mov	r4, sl
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	f04f 0c0a 	mov.w	ip, #10
 800d7fa:	9a07      	ldr	r2, [sp, #28]
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d802:	3b30      	subs	r3, #48	@ 0x30
 800d804:	2b09      	cmp	r3, #9
 800d806:	d94b      	bls.n	800d8a0 <_svfiprintf_r+0x17c>
 800d808:	b1b0      	cbz	r0, 800d838 <_svfiprintf_r+0x114>
 800d80a:	9207      	str	r2, [sp, #28]
 800d80c:	e014      	b.n	800d838 <_svfiprintf_r+0x114>
 800d80e:	eba0 0308 	sub.w	r3, r0, r8
 800d812:	fa09 f303 	lsl.w	r3, r9, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	46a2      	mov	sl, r4
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	e7d2      	b.n	800d7c4 <_svfiprintf_r+0xa0>
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	1d19      	adds	r1, r3, #4
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	9103      	str	r1, [sp, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	bfbb      	ittet	lt
 800d82a:	425b      	neglt	r3, r3
 800d82c:	f042 0202 	orrlt.w	r2, r2, #2
 800d830:	9307      	strge	r3, [sp, #28]
 800d832:	9307      	strlt	r3, [sp, #28]
 800d834:	bfb8      	it	lt
 800d836:	9204      	strlt	r2, [sp, #16]
 800d838:	7823      	ldrb	r3, [r4, #0]
 800d83a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d83c:	d10a      	bne.n	800d854 <_svfiprintf_r+0x130>
 800d83e:	7863      	ldrb	r3, [r4, #1]
 800d840:	2b2a      	cmp	r3, #42	@ 0x2a
 800d842:	d132      	bne.n	800d8aa <_svfiprintf_r+0x186>
 800d844:	9b03      	ldr	r3, [sp, #12]
 800d846:	3402      	adds	r4, #2
 800d848:	1d1a      	adds	r2, r3, #4
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	9203      	str	r2, [sp, #12]
 800d84e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d852:	9305      	str	r3, [sp, #20]
 800d854:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d90c <_svfiprintf_r+0x1e8>
 800d858:	2203      	movs	r2, #3
 800d85a:	4650      	mov	r0, sl
 800d85c:	7821      	ldrb	r1, [r4, #0]
 800d85e:	f000 fa19 	bl	800dc94 <memchr>
 800d862:	b138      	cbz	r0, 800d874 <_svfiprintf_r+0x150>
 800d864:	2240      	movs	r2, #64	@ 0x40
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	eba0 000a 	sub.w	r0, r0, sl
 800d86c:	4082      	lsls	r2, r0
 800d86e:	4313      	orrs	r3, r2
 800d870:	3401      	adds	r4, #1
 800d872:	9304      	str	r3, [sp, #16]
 800d874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d878:	2206      	movs	r2, #6
 800d87a:	4825      	ldr	r0, [pc, #148]	@ (800d910 <_svfiprintf_r+0x1ec>)
 800d87c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d880:	f000 fa08 	bl	800dc94 <memchr>
 800d884:	2800      	cmp	r0, #0
 800d886:	d036      	beq.n	800d8f6 <_svfiprintf_r+0x1d2>
 800d888:	4b22      	ldr	r3, [pc, #136]	@ (800d914 <_svfiprintf_r+0x1f0>)
 800d88a:	bb1b      	cbnz	r3, 800d8d4 <_svfiprintf_r+0x1b0>
 800d88c:	9b03      	ldr	r3, [sp, #12]
 800d88e:	3307      	adds	r3, #7
 800d890:	f023 0307 	bic.w	r3, r3, #7
 800d894:	3308      	adds	r3, #8
 800d896:	9303      	str	r3, [sp, #12]
 800d898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89a:	4433      	add	r3, r6
 800d89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d89e:	e76a      	b.n	800d776 <_svfiprintf_r+0x52>
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a8:	e7a8      	b.n	800d7fc <_svfiprintf_r+0xd8>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f04f 0c0a 	mov.w	ip, #10
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	3401      	adds	r4, #1
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8bc:	3a30      	subs	r2, #48	@ 0x30
 800d8be:	2a09      	cmp	r2, #9
 800d8c0:	d903      	bls.n	800d8ca <_svfiprintf_r+0x1a6>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d0c6      	beq.n	800d854 <_svfiprintf_r+0x130>
 800d8c6:	9105      	str	r1, [sp, #20]
 800d8c8:	e7c4      	b.n	800d854 <_svfiprintf_r+0x130>
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8d2:	e7f0      	b.n	800d8b6 <_svfiprintf_r+0x192>
 800d8d4:	ab03      	add	r3, sp, #12
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	462a      	mov	r2, r5
 800d8da:	4638      	mov	r0, r7
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <_svfiprintf_r+0x1f4>)
 800d8de:	a904      	add	r1, sp, #16
 800d8e0:	f3af 8000 	nop.w
 800d8e4:	1c42      	adds	r2, r0, #1
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	d1d6      	bne.n	800d898 <_svfiprintf_r+0x174>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	065b      	lsls	r3, r3, #25
 800d8ee:	f53f af2d 	bmi.w	800d74c <_svfiprintf_r+0x28>
 800d8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8f4:	e72c      	b.n	800d750 <_svfiprintf_r+0x2c>
 800d8f6:	ab03      	add	r3, sp, #12
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	462a      	mov	r2, r5
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	4b06      	ldr	r3, [pc, #24]	@ (800d918 <_svfiprintf_r+0x1f4>)
 800d900:	a904      	add	r1, sp, #16
 800d902:	f000 f87d 	bl	800da00 <_printf_i>
 800d906:	e7ed      	b.n	800d8e4 <_svfiprintf_r+0x1c0>
 800d908:	0800e7c0 	.word	0x0800e7c0
 800d90c:	0800e7c6 	.word	0x0800e7c6
 800d910:	0800e7ca 	.word	0x0800e7ca
 800d914:	00000000 	.word	0x00000000
 800d918:	0800d66d 	.word	0x0800d66d

0800d91c <_printf_common>:
 800d91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d920:	4616      	mov	r6, r2
 800d922:	4698      	mov	r8, r3
 800d924:	688a      	ldr	r2, [r1, #8]
 800d926:	690b      	ldr	r3, [r1, #16]
 800d928:	4607      	mov	r7, r0
 800d92a:	4293      	cmp	r3, r2
 800d92c:	bfb8      	it	lt
 800d92e:	4613      	movlt	r3, r2
 800d930:	6033      	str	r3, [r6, #0]
 800d932:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d936:	460c      	mov	r4, r1
 800d938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d93c:	b10a      	cbz	r2, 800d942 <_printf_common+0x26>
 800d93e:	3301      	adds	r3, #1
 800d940:	6033      	str	r3, [r6, #0]
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	0699      	lsls	r1, r3, #26
 800d946:	bf42      	ittt	mi
 800d948:	6833      	ldrmi	r3, [r6, #0]
 800d94a:	3302      	addmi	r3, #2
 800d94c:	6033      	strmi	r3, [r6, #0]
 800d94e:	6825      	ldr	r5, [r4, #0]
 800d950:	f015 0506 	ands.w	r5, r5, #6
 800d954:	d106      	bne.n	800d964 <_printf_common+0x48>
 800d956:	f104 0a19 	add.w	sl, r4, #25
 800d95a:	68e3      	ldr	r3, [r4, #12]
 800d95c:	6832      	ldr	r2, [r6, #0]
 800d95e:	1a9b      	subs	r3, r3, r2
 800d960:	42ab      	cmp	r3, r5
 800d962:	dc2b      	bgt.n	800d9bc <_printf_common+0xa0>
 800d964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d968:	6822      	ldr	r2, [r4, #0]
 800d96a:	3b00      	subs	r3, #0
 800d96c:	bf18      	it	ne
 800d96e:	2301      	movne	r3, #1
 800d970:	0692      	lsls	r2, r2, #26
 800d972:	d430      	bmi.n	800d9d6 <_printf_common+0xba>
 800d974:	4641      	mov	r1, r8
 800d976:	4638      	mov	r0, r7
 800d978:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d97c:	47c8      	blx	r9
 800d97e:	3001      	adds	r0, #1
 800d980:	d023      	beq.n	800d9ca <_printf_common+0xae>
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	6922      	ldr	r2, [r4, #16]
 800d986:	f003 0306 	and.w	r3, r3, #6
 800d98a:	2b04      	cmp	r3, #4
 800d98c:	bf14      	ite	ne
 800d98e:	2500      	movne	r5, #0
 800d990:	6833      	ldreq	r3, [r6, #0]
 800d992:	f04f 0600 	mov.w	r6, #0
 800d996:	bf08      	it	eq
 800d998:	68e5      	ldreq	r5, [r4, #12]
 800d99a:	f104 041a 	add.w	r4, r4, #26
 800d99e:	bf08      	it	eq
 800d9a0:	1aed      	subeq	r5, r5, r3
 800d9a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d9a6:	bf08      	it	eq
 800d9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfc4      	itt	gt
 800d9b0:	1a9b      	subgt	r3, r3, r2
 800d9b2:	18ed      	addgt	r5, r5, r3
 800d9b4:	42b5      	cmp	r5, r6
 800d9b6:	d11a      	bne.n	800d9ee <_printf_common+0xd2>
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e008      	b.n	800d9ce <_printf_common+0xb2>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	4652      	mov	r2, sl
 800d9c0:	4641      	mov	r1, r8
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	47c8      	blx	r9
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	d103      	bne.n	800d9d2 <_printf_common+0xb6>
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d2:	3501      	adds	r5, #1
 800d9d4:	e7c1      	b.n	800d95a <_printf_common+0x3e>
 800d9d6:	2030      	movs	r0, #48	@ 0x30
 800d9d8:	18e1      	adds	r1, r4, r3
 800d9da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9e4:	4422      	add	r2, r4
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9ec:	e7c2      	b.n	800d974 <_printf_common+0x58>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4622      	mov	r2, r4
 800d9f2:	4641      	mov	r1, r8
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	47c8      	blx	r9
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	d0e6      	beq.n	800d9ca <_printf_common+0xae>
 800d9fc:	3601      	adds	r6, #1
 800d9fe:	e7d9      	b.n	800d9b4 <_printf_common+0x98>

0800da00 <_printf_i>:
 800da00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da04:	7e0f      	ldrb	r7, [r1, #24]
 800da06:	4691      	mov	r9, r2
 800da08:	2f78      	cmp	r7, #120	@ 0x78
 800da0a:	4680      	mov	r8, r0
 800da0c:	460c      	mov	r4, r1
 800da0e:	469a      	mov	sl, r3
 800da10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da16:	d807      	bhi.n	800da28 <_printf_i+0x28>
 800da18:	2f62      	cmp	r7, #98	@ 0x62
 800da1a:	d80a      	bhi.n	800da32 <_printf_i+0x32>
 800da1c:	2f00      	cmp	r7, #0
 800da1e:	f000 80d3 	beq.w	800dbc8 <_printf_i+0x1c8>
 800da22:	2f58      	cmp	r7, #88	@ 0x58
 800da24:	f000 80ba 	beq.w	800db9c <_printf_i+0x19c>
 800da28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da30:	e03a      	b.n	800daa8 <_printf_i+0xa8>
 800da32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da36:	2b15      	cmp	r3, #21
 800da38:	d8f6      	bhi.n	800da28 <_printf_i+0x28>
 800da3a:	a101      	add	r1, pc, #4	@ (adr r1, 800da40 <_printf_i+0x40>)
 800da3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da40:	0800da99 	.word	0x0800da99
 800da44:	0800daad 	.word	0x0800daad
 800da48:	0800da29 	.word	0x0800da29
 800da4c:	0800da29 	.word	0x0800da29
 800da50:	0800da29 	.word	0x0800da29
 800da54:	0800da29 	.word	0x0800da29
 800da58:	0800daad 	.word	0x0800daad
 800da5c:	0800da29 	.word	0x0800da29
 800da60:	0800da29 	.word	0x0800da29
 800da64:	0800da29 	.word	0x0800da29
 800da68:	0800da29 	.word	0x0800da29
 800da6c:	0800dbaf 	.word	0x0800dbaf
 800da70:	0800dad7 	.word	0x0800dad7
 800da74:	0800db69 	.word	0x0800db69
 800da78:	0800da29 	.word	0x0800da29
 800da7c:	0800da29 	.word	0x0800da29
 800da80:	0800dbd1 	.word	0x0800dbd1
 800da84:	0800da29 	.word	0x0800da29
 800da88:	0800dad7 	.word	0x0800dad7
 800da8c:	0800da29 	.word	0x0800da29
 800da90:	0800da29 	.word	0x0800da29
 800da94:	0800db71 	.word	0x0800db71
 800da98:	6833      	ldr	r3, [r6, #0]
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6032      	str	r2, [r6, #0]
 800daa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daa8:	2301      	movs	r3, #1
 800daaa:	e09e      	b.n	800dbea <_printf_i+0x1ea>
 800daac:	6833      	ldr	r3, [r6, #0]
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	1d19      	adds	r1, r3, #4
 800dab2:	6031      	str	r1, [r6, #0]
 800dab4:	0606      	lsls	r6, r0, #24
 800dab6:	d501      	bpl.n	800dabc <_printf_i+0xbc>
 800dab8:	681d      	ldr	r5, [r3, #0]
 800daba:	e003      	b.n	800dac4 <_printf_i+0xc4>
 800dabc:	0645      	lsls	r5, r0, #25
 800dabe:	d5fb      	bpl.n	800dab8 <_printf_i+0xb8>
 800dac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	da03      	bge.n	800dad0 <_printf_i+0xd0>
 800dac8:	232d      	movs	r3, #45	@ 0x2d
 800daca:	426d      	negs	r5, r5
 800dacc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dad0:	230a      	movs	r3, #10
 800dad2:	4859      	ldr	r0, [pc, #356]	@ (800dc38 <_printf_i+0x238>)
 800dad4:	e011      	b.n	800dafa <_printf_i+0xfa>
 800dad6:	6821      	ldr	r1, [r4, #0]
 800dad8:	6833      	ldr	r3, [r6, #0]
 800dada:	0608      	lsls	r0, r1, #24
 800dadc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dae0:	d402      	bmi.n	800dae8 <_printf_i+0xe8>
 800dae2:	0649      	lsls	r1, r1, #25
 800dae4:	bf48      	it	mi
 800dae6:	b2ad      	uxthmi	r5, r5
 800dae8:	2f6f      	cmp	r7, #111	@ 0x6f
 800daea:	6033      	str	r3, [r6, #0]
 800daec:	bf14      	ite	ne
 800daee:	230a      	movne	r3, #10
 800daf0:	2308      	moveq	r3, #8
 800daf2:	4851      	ldr	r0, [pc, #324]	@ (800dc38 <_printf_i+0x238>)
 800daf4:	2100      	movs	r1, #0
 800daf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dafa:	6866      	ldr	r6, [r4, #4]
 800dafc:	2e00      	cmp	r6, #0
 800dafe:	bfa8      	it	ge
 800db00:	6821      	ldrge	r1, [r4, #0]
 800db02:	60a6      	str	r6, [r4, #8]
 800db04:	bfa4      	itt	ge
 800db06:	f021 0104 	bicge.w	r1, r1, #4
 800db0a:	6021      	strge	r1, [r4, #0]
 800db0c:	b90d      	cbnz	r5, 800db12 <_printf_i+0x112>
 800db0e:	2e00      	cmp	r6, #0
 800db10:	d04b      	beq.n	800dbaa <_printf_i+0x1aa>
 800db12:	4616      	mov	r6, r2
 800db14:	fbb5 f1f3 	udiv	r1, r5, r3
 800db18:	fb03 5711 	mls	r7, r3, r1, r5
 800db1c:	5dc7      	ldrb	r7, [r0, r7]
 800db1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db22:	462f      	mov	r7, r5
 800db24:	42bb      	cmp	r3, r7
 800db26:	460d      	mov	r5, r1
 800db28:	d9f4      	bls.n	800db14 <_printf_i+0x114>
 800db2a:	2b08      	cmp	r3, #8
 800db2c:	d10b      	bne.n	800db46 <_printf_i+0x146>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	07df      	lsls	r7, r3, #31
 800db32:	d508      	bpl.n	800db46 <_printf_i+0x146>
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	6861      	ldr	r1, [r4, #4]
 800db38:	4299      	cmp	r1, r3
 800db3a:	bfde      	ittt	le
 800db3c:	2330      	movle	r3, #48	@ 0x30
 800db3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db42:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db46:	1b92      	subs	r2, r2, r6
 800db48:	6122      	str	r2, [r4, #16]
 800db4a:	464b      	mov	r3, r9
 800db4c:	4621      	mov	r1, r4
 800db4e:	4640      	mov	r0, r8
 800db50:	f8cd a000 	str.w	sl, [sp]
 800db54:	aa03      	add	r2, sp, #12
 800db56:	f7ff fee1 	bl	800d91c <_printf_common>
 800db5a:	3001      	adds	r0, #1
 800db5c:	d14a      	bne.n	800dbf4 <_printf_i+0x1f4>
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295
 800db62:	b004      	add	sp, #16
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	f043 0320 	orr.w	r3, r3, #32
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	2778      	movs	r7, #120	@ 0x78
 800db72:	4832      	ldr	r0, [pc, #200]	@ (800dc3c <_printf_i+0x23c>)
 800db74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	6831      	ldr	r1, [r6, #0]
 800db7c:	061f      	lsls	r7, r3, #24
 800db7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800db82:	d402      	bmi.n	800db8a <_printf_i+0x18a>
 800db84:	065f      	lsls	r7, r3, #25
 800db86:	bf48      	it	mi
 800db88:	b2ad      	uxthmi	r5, r5
 800db8a:	6031      	str	r1, [r6, #0]
 800db8c:	07d9      	lsls	r1, r3, #31
 800db8e:	bf44      	itt	mi
 800db90:	f043 0320 	orrmi.w	r3, r3, #32
 800db94:	6023      	strmi	r3, [r4, #0]
 800db96:	b11d      	cbz	r5, 800dba0 <_printf_i+0x1a0>
 800db98:	2310      	movs	r3, #16
 800db9a:	e7ab      	b.n	800daf4 <_printf_i+0xf4>
 800db9c:	4826      	ldr	r0, [pc, #152]	@ (800dc38 <_printf_i+0x238>)
 800db9e:	e7e9      	b.n	800db74 <_printf_i+0x174>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	f023 0320 	bic.w	r3, r3, #32
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	e7f6      	b.n	800db98 <_printf_i+0x198>
 800dbaa:	4616      	mov	r6, r2
 800dbac:	e7bd      	b.n	800db2a <_printf_i+0x12a>
 800dbae:	6833      	ldr	r3, [r6, #0]
 800dbb0:	6825      	ldr	r5, [r4, #0]
 800dbb2:	1d18      	adds	r0, r3, #4
 800dbb4:	6961      	ldr	r1, [r4, #20]
 800dbb6:	6030      	str	r0, [r6, #0]
 800dbb8:	062e      	lsls	r6, r5, #24
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	d501      	bpl.n	800dbc2 <_printf_i+0x1c2>
 800dbbe:	6019      	str	r1, [r3, #0]
 800dbc0:	e002      	b.n	800dbc8 <_printf_i+0x1c8>
 800dbc2:	0668      	lsls	r0, r5, #25
 800dbc4:	d5fb      	bpl.n	800dbbe <_printf_i+0x1be>
 800dbc6:	8019      	strh	r1, [r3, #0]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4616      	mov	r6, r2
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	e7bc      	b.n	800db4a <_printf_i+0x14a>
 800dbd0:	6833      	ldr	r3, [r6, #0]
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	1d1a      	adds	r2, r3, #4
 800dbd6:	6032      	str	r2, [r6, #0]
 800dbd8:	681e      	ldr	r6, [r3, #0]
 800dbda:	6862      	ldr	r2, [r4, #4]
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f000 f859 	bl	800dc94 <memchr>
 800dbe2:	b108      	cbz	r0, 800dbe8 <_printf_i+0x1e8>
 800dbe4:	1b80      	subs	r0, r0, r6
 800dbe6:	6060      	str	r0, [r4, #4]
 800dbe8:	6863      	ldr	r3, [r4, #4]
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	2300      	movs	r3, #0
 800dbee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf2:	e7aa      	b.n	800db4a <_printf_i+0x14a>
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	47d0      	blx	sl
 800dbfe:	3001      	adds	r0, #1
 800dc00:	d0ad      	beq.n	800db5e <_printf_i+0x15e>
 800dc02:	6823      	ldr	r3, [r4, #0]
 800dc04:	079b      	lsls	r3, r3, #30
 800dc06:	d413      	bmi.n	800dc30 <_printf_i+0x230>
 800dc08:	68e0      	ldr	r0, [r4, #12]
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	4298      	cmp	r0, r3
 800dc0e:	bfb8      	it	lt
 800dc10:	4618      	movlt	r0, r3
 800dc12:	e7a6      	b.n	800db62 <_printf_i+0x162>
 800dc14:	2301      	movs	r3, #1
 800dc16:	4632      	mov	r2, r6
 800dc18:	4649      	mov	r1, r9
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	47d0      	blx	sl
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d09d      	beq.n	800db5e <_printf_i+0x15e>
 800dc22:	3501      	adds	r5, #1
 800dc24:	68e3      	ldr	r3, [r4, #12]
 800dc26:	9903      	ldr	r1, [sp, #12]
 800dc28:	1a5b      	subs	r3, r3, r1
 800dc2a:	42ab      	cmp	r3, r5
 800dc2c:	dcf2      	bgt.n	800dc14 <_printf_i+0x214>
 800dc2e:	e7eb      	b.n	800dc08 <_printf_i+0x208>
 800dc30:	2500      	movs	r5, #0
 800dc32:	f104 0619 	add.w	r6, r4, #25
 800dc36:	e7f5      	b.n	800dc24 <_printf_i+0x224>
 800dc38:	0800e7d1 	.word	0x0800e7d1
 800dc3c:	0800e7e2 	.word	0x0800e7e2

0800dc40 <memmove>:
 800dc40:	4288      	cmp	r0, r1
 800dc42:	b510      	push	{r4, lr}
 800dc44:	eb01 0402 	add.w	r4, r1, r2
 800dc48:	d902      	bls.n	800dc50 <memmove+0x10>
 800dc4a:	4284      	cmp	r4, r0
 800dc4c:	4623      	mov	r3, r4
 800dc4e:	d807      	bhi.n	800dc60 <memmove+0x20>
 800dc50:	1e43      	subs	r3, r0, #1
 800dc52:	42a1      	cmp	r1, r4
 800dc54:	d008      	beq.n	800dc68 <memmove+0x28>
 800dc56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc5e:	e7f8      	b.n	800dc52 <memmove+0x12>
 800dc60:	4601      	mov	r1, r0
 800dc62:	4402      	add	r2, r0
 800dc64:	428a      	cmp	r2, r1
 800dc66:	d100      	bne.n	800dc6a <memmove+0x2a>
 800dc68:	bd10      	pop	{r4, pc}
 800dc6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc72:	e7f7      	b.n	800dc64 <memmove+0x24>

0800dc74 <_sbrk_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	2300      	movs	r3, #0
 800dc78:	4d05      	ldr	r5, [pc, #20]	@ (800dc90 <_sbrk_r+0x1c>)
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f7f6 fc88 	bl	8004594 <_sbrk>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_sbrk_r+0x1a>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_sbrk_r+0x1a>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	20001714 	.word	0x20001714

0800dc94 <memchr>:
 800dc94:	4603      	mov	r3, r0
 800dc96:	b510      	push	{r4, lr}
 800dc98:	b2c9      	uxtb	r1, r1
 800dc9a:	4402      	add	r2, r0
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	d101      	bne.n	800dca6 <memchr+0x12>
 800dca2:	2000      	movs	r0, #0
 800dca4:	e003      	b.n	800dcae <memchr+0x1a>
 800dca6:	7804      	ldrb	r4, [r0, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	428c      	cmp	r4, r1
 800dcac:	d1f6      	bne.n	800dc9c <memchr+0x8>
 800dcae:	bd10      	pop	{r4, pc}

0800dcb0 <_realloc_r>:
 800dcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	4615      	mov	r5, r2
 800dcb8:	460c      	mov	r4, r1
 800dcba:	b921      	cbnz	r1, 800dcc6 <_realloc_r+0x16>
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc2:	f7ff bc47 	b.w	800d554 <_malloc_r>
 800dcc6:	b92a      	cbnz	r2, 800dcd4 <_realloc_r+0x24>
 800dcc8:	f7ff fbda 	bl	800d480 <_free_r>
 800dccc:	2400      	movs	r4, #0
 800dcce:	4620      	mov	r0, r4
 800dcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd4:	f000 f81a 	bl	800dd0c <_malloc_usable_size_r>
 800dcd8:	4285      	cmp	r5, r0
 800dcda:	4606      	mov	r6, r0
 800dcdc:	d802      	bhi.n	800dce4 <_realloc_r+0x34>
 800dcde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dce2:	d8f4      	bhi.n	800dcce <_realloc_r+0x1e>
 800dce4:	4629      	mov	r1, r5
 800dce6:	4640      	mov	r0, r8
 800dce8:	f7ff fc34 	bl	800d554 <_malloc_r>
 800dcec:	4607      	mov	r7, r0
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d0ec      	beq.n	800dccc <_realloc_r+0x1c>
 800dcf2:	42b5      	cmp	r5, r6
 800dcf4:	462a      	mov	r2, r5
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	bf28      	it	cs
 800dcfa:	4632      	movcs	r2, r6
 800dcfc:	f7ff fbb2 	bl	800d464 <memcpy>
 800dd00:	4621      	mov	r1, r4
 800dd02:	4640      	mov	r0, r8
 800dd04:	f7ff fbbc 	bl	800d480 <_free_r>
 800dd08:	463c      	mov	r4, r7
 800dd0a:	e7e0      	b.n	800dcce <_realloc_r+0x1e>

0800dd0c <_malloc_usable_size_r>:
 800dd0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd10:	1f18      	subs	r0, r3, #4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	bfbc      	itt	lt
 800dd16:	580b      	ldrlt	r3, [r1, r0]
 800dd18:	18c0      	addlt	r0, r0, r3
 800dd1a:	4770      	bx	lr

0800dd1c <_init>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	bf00      	nop
 800dd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd22:	bc08      	pop	{r3}
 800dd24:	469e      	mov	lr, r3
 800dd26:	4770      	bx	lr

0800dd28 <_fini>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

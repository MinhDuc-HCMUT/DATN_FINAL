
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a5c  0800db20  0800db20  0000eb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e57c  0800e57c  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e57c  0800e57c  0000f57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e584  0800e584  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e584  0800e584  0000f584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e588  0800e588  0000f588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e58c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e780  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e780  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa4d  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004899  00000000  00000000  0002ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  0002f508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ca  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  000324ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021142  00000000  00000000  0004ec13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a53  00000000  00000000  0006fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001047a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007674  00000000  00000000  001047ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800db08 	.word	0x0800db08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800db08 	.word	0x0800db08

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 f943 	bl	80043f8 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f004 ff38 	bl	8005090 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 faf0 	bl	8004a5c <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fc7f 	bl	8004d92 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fac5 	bl	8004a5c <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e420 	.word	0x0800e420
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e428 	.word	0x0800e428
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fc32 	bl	8004d92 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fc1e 	bl	8004d92 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f003 ff4e 	bl	80043f8 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fbf5 	bl	8004d64 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f003 ff39 	bl	80043f8 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fbe3 	bl	8004d64 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f003 ff11 	bl	80043f8 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fbbb 	bl	8004d64 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e420 	.word	0x0800e420
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e428 	.word	0x0800e428

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f003 fecc 	bl	80043f8 <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f003 febd 	bl	80043e4 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f003 feb6 	bl	80043f8 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f003 feaa 	bl	80043e4 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f007 fea9 	bl	800857e <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f007 ff26 	bl	80086a2 <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f007 ff07 	bl	80086a2 <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f007 feec 	bl	80086a2 <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b68:	20ef      	movs	r0, #239	@ 0xef
 8000b6a:	f7ff fe53 	bl	8000814 <USART_SendByte>
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fe50 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b74:	20ff      	movs	r0, #255	@ 0xff
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x0D);
 8000b9e:	200d      	movs	r0, #13
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
 8000baa:	2011      	movs	r0, #17
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f7ff fe41 	bl	8000838 <receive_finger>
 8000bb6:	4603      	mov	r3, r0

}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3315      	adds	r3, #21
 8000bca:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bcc:	20ef      	movs	r0, #239	@ 0xef
 8000bce:	f7ff fe21 	bl	8000814 <USART_SendByte>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	f7ff fe1b 	bl	8000814 <USART_SendByte>
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	f7ff fe18 	bl	8000814 <USART_SendByte>
 8000be4:	20ff      	movs	r0, #255	@ 0xff
 8000be6:	f7ff fe15 	bl	8000814 <USART_SendByte>
 8000bea:	20ff      	movs	r0, #255	@ 0xff
 8000bec:	f7ff fe12 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fe0f 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe0c 	bl	8000814 <USART_SendByte>
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f7ff fe09 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f7ff fe06 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fe03 	bl	8000814 <USART_SendByte>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fdff 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdfc 	bl	8000814 <USART_SendByte>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff fdf9 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fdf6 	bl	8000814 <USART_SendByte>
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdf2 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000c30:	200c      	movs	r0, #12
 8000c32:	f7ff fe01 	bl	8000838 <receive_finger>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c48:	f003 fd78 	bl	800473c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fe50 	bl	800490c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c6c:	f003 fd8c 	bl	8004788 <HAL_FLASH_Lock>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c84:	f003 fd5a 	bl	800473c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	4615      	mov	r5, r2
 8000c90:	4622      	mov	r2, r4
 8000c92:	462b      	mov	r3, r5
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2001      	movs	r0, #1
 8000c98:	f003 fce0 	bl	800465c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c9c:	f003 fd74 	bl	8004788 <HAL_FLASH_Lock>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}

08000ca8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cb6:	f003 fd41 	bl	800473c <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	82fb      	strh	r3, [r7, #22]
 8000cbe:	e00c      	b.n	8000cda <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	18d0      	adds	r0, r2, r3
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ffd2 	bl	8000c78 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	82fb      	strh	r3, [r7, #22]
 8000cda:	8afa      	ldrh	r2, [r7, #22]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ee      	bcc.n	8000cc0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ce2:	f003 fd51 	bl	8004788 <HAL_FLASH_Lock>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	82fb      	strh	r3, [r7, #22]
 8000d4a:	e00c      	b.n	8000d66 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d4c:	8afa      	ldrh	r2, [r7, #22]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	780a      	ldrb	r2, [r1, #0]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	3301      	adds	r3, #1
 8000d64:	82fb      	strh	r3, [r7, #22]
 8000d66:	8afa      	ldrh	r2, [r7, #22]
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3ee      	bcc.n	8000d4c <Flash_Read_Array+0x14>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d96:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d98:	e002      	b.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000020 	.word	0x20000020

08000db0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000db6:	f7ff fd9b 	bl	80008f0 <collect_finger>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <check_fingerprint_status+0x24>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000040a 	.word	0x2000040a

08000dd8 <process_fingerprint>:
void process_fingerprint()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <process_fingerprint+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <process_fingerprint+0x1c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dea:	f002 fb03 	bl	80033f4 <read_finger>
    }
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000040a 	.word	0x2000040a

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	@ 0x40
 8000dfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f003 fa99 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f9a7 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fadd 	bl	80013c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e0a:	f000 fa2d 	bl	8001268 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000e0e:	f000 f9fd 	bl	800120c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000e12:	f000 faad 	bl	8001370 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e16:	f000 fa5d 	bl	80012d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e1a:	f00b fc5f 	bl	800c6dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000e1e:	f002 fe2f 	bl	8003a80 <TM_MFRC522_Init>
  KeyPad_Init();
 8000e22:	f7ff fb0b 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000e26:	2302      	movs	r3, #2
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	224e      	movs	r2, #78	@ 0x4e
 8000e2e:	49b7      	ldr	r1, [pc, #732]	@ (800110c <main+0x314>)
 8000e30:	48b7      	ldr	r0, [pc, #732]	@ (8001110 <main+0x318>)
 8000e32:	f7ff f9f9 	bl	8000228 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	48b5      	ldr	r0, [pc, #724]	@ (8001114 <main+0x31c>)
 8000e3e:	f003 ffa8 	bl	8004d92 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e48:	48b2      	ldr	r0, [pc, #712]	@ (8001114 <main+0x31c>)
 8000e4a:	f003 ffa2 	bl	8004d92 <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2100      	movs	r1, #0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	801a      	strh	r2, [r3, #0]
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2206      	movs	r2, #6
 8000e66:	4619      	mov	r1, r3
 8000e68:	48ab      	ldr	r0, [pc, #684]	@ (8001118 <main+0x320>)
 8000e6a:	f7ff ff65 	bl	8000d38 <Flash_Read_Array>
  stored_password[6] = '\0';
 8000e6e:	2300      	movs	r3, #0
 8000e70:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7a:	e00c      	b.n	8000e96 <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8000e7c:	f107 0218 	add.w	r2, r7, #24
 8000e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d002      	beq.n	8000e90 <main+0x98>
          is_empty = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000e8e:	e005      	b.n	8000e9c <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8000e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	ddef      	ble.n	8000e7c <main+0x84>
      }
  }
  if (is_empty) {
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0xae>
      set_default_password();
 8000ea2:	f002 fd0b 	bl	80038bc <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ea6:	489d      	ldr	r0, [pc, #628]	@ (800111c <main+0x324>)
 8000ea8:	f006 ff72 	bl	8007d90 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000eac:	f001 f83a 	bl	8001f24 <checkcountUID>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <main+0xc2>
  {
      startadd();
 8000eb6:	f001 fead 	bl	8002c14 <startadd>
  }
  int incorrect_attempts = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000ebe:	4894      	ldr	r0, [pc, #592]	@ (8001110 <main+0x318>)
 8000ec0:	f7ff fa8c 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4891      	ldr	r0, [pc, #580]	@ (8001110 <main+0x318>)
 8000eca:	f7ff fa1d 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000ece:	4994      	ldr	r1, [pc, #592]	@ (8001120 <main+0x328>)
 8000ed0:	488f      	ldr	r0, [pc, #572]	@ (8001110 <main+0x318>)
 8000ed2:	f7ff fa6c 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đ���n khi có phím nhấn.
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f7ff fbea 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000ee2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ee6:	2b23      	cmp	r3, #35	@ 0x23
 8000ee8:	d166      	bne.n	8000fb8 <main+0x1c0>
    {
    	buzzer(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 fd76 	bl	80039dc <buzzer>
        char entered_password[7] = {0};
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2100      	movs	r1, #0
 8000efa:	460a      	mov	r2, r1
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	460a      	mov	r2, r1
 8000f00:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000f02:	4a88      	ldr	r2, [pc, #544]	@ (8001124 <main+0x32c>)
 8000f04:	4988      	ldr	r1, [pc, #544]	@ (8001128 <main+0x330>)
 8000f06:	4882      	ldr	r0, [pc, #520]	@ (8001110 <main+0x318>)
 8000f08:	f7ff fa78 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fc3f 	bl	8003794 <enter_password>
        if (check_password(entered_password)) {
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fca6 	bl	800386c <check_password>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000f26:	4a7f      	ldr	r2, [pc, #508]	@ (8001124 <main+0x32c>)
 8000f28:	4980      	ldr	r1, [pc, #512]	@ (800112c <main+0x334>)
 8000f2a:	4879      	ldr	r0, [pc, #484]	@ (8001110 <main+0x318>)
 8000f2c:	f7ff fa66 	bl	80003fc <CLCD_I2C_Display>
            opendoor();
 8000f30:	f002 fd04 	bl	800393c <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f38:	e036      	b.n	8000fa8 <main+0x1b0>
        } else {
            incorrect_attempts++;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000f40:	4a78      	ldr	r2, [pc, #480]	@ (8001124 <main+0x32c>)
 8000f42:	497b      	ldr	r1, [pc, #492]	@ (8001130 <main+0x338>)
 8000f44:	4872      	ldr	r0, [pc, #456]	@ (8001110 <main+0x318>)
 8000f46:	f7ff fa59 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f002 fd46 	bl	80039dc <buzzer>
            int delay_time = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <main+0x168>
                delay_time = 5;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f5e:	e00a      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d102      	bne.n	8000f6c <main+0x174>
                delay_time = 10;
 8000f66:	230a      	movs	r3, #10
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f6a:	e004      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8000f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	dd01      	ble.n	8000f76 <main+0x17e>
                delay_time = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7a:	e012      	b.n	8000fa2 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	4a6c      	ldr	r2, [pc, #432]	@ (8001134 <main+0x33c>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	f00c f8dc 	bl	800d140 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8001138 <main+0x340>)
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4860      	ldr	r0, [pc, #384]	@ (8001110 <main+0x318>)
 8000f90:	f7ff fa34 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f98:	f003 fa2e 	bl	80043f8 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dce9      	bgt.n	8000f7c <main+0x184>
            }
        }
        HAL_Delay(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fac:	f003 fa24 	bl	80043f8 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000fb0:	4857      	ldr	r0, [pc, #348]	@ (8001110 <main+0x318>)
 8000fb2:	f7ff fa13 	bl	80003dc <CLCD_I2C_Clear>
 8000fb6:	e0a3      	b.n	8001100 <main+0x308>
    }
    else if (selected_key != 0)
 8000fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d067      	beq.n	8001090 <main+0x298>
    {
    	buzzer(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f002 fd0b 	bl	80039dc <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <main+0x344>)
 8000fce:	220f      	movs	r2, #15
 8000fd0:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000fd2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fd6:	3b41      	subs	r3, #65	@ 0x41
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	f200 8090 	bhi.w	80010fe <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	484b      	ldr	r0, [pc, #300]	@ (8001110 <main+0x318>)
 8000fe4:	f7ff f990 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000fe8:	4955      	ldr	r1, [pc, #340]	@ (8001140 <main+0x348>)
 8000fea:	4849      	ldr	r0, [pc, #292]	@ (8001110 <main+0x318>)
 8000fec:	f7ff f9df 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000ff0:	e011      	b.n	8001016 <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000ff2:	4854      	ldr	r0, [pc, #336]	@ (8001144 <main+0x34c>)
 8000ff4:	f002 fd68 	bl	8003ac8 <TM_MFRC522_Check>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <main+0x21e>
                {
                    key = CheckListUID(CardID);
 8000ffe:	4851      	ldr	r0, [pc, #324]	@ (8001144 <main+0x34c>)
 8001000:	f000 ff60 	bl	8001ec4 <CheckListUID>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 7;
 800100a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800100e:	09db      	lsrs	r3, r3, #7
 8001010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8001014:	e003      	b.n	800101e <main+0x226>
            while (exitmenu)
 8001016:	4b49      	ldr	r3, [pc, #292]	@ (800113c <main+0x344>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e9      	bne.n	8000ff2 <main+0x1fa>
                }
            }

            switch (key)
 800101e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11b      	bne.n	800105e <main+0x266>
            {
            case 0:
                if (selected_key == 'A')
 8001026:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800102a:	2b41      	cmp	r3, #65	@ 0x41
 800102c:	d102      	bne.n	8001034 <main+0x23c>
                    RFID();
 800102e:	f000 fa9b 	bl	8001568 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8001032:	e02b      	b.n	800108c <main+0x294>
                else if (selected_key == 'B')
 8001034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001038:	2b42      	cmp	r3, #66	@ 0x42
 800103a:	d102      	bne.n	8001042 <main+0x24a>
                    FACEID();
 800103c:	f001 f8e6 	bl	800220c <FACEID>
                break;
 8001040:	e024      	b.n	800108c <main+0x294>
                else if (selected_key == 'C')
 8001042:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001046:	2b43      	cmp	r3, #67	@ 0x43
 8001048:	d102      	bne.n	8001050 <main+0x258>
                    FINGER();
 800104a:	f001 fc99 	bl	8002980 <FINGER>
                break;
 800104e:	e01d      	b.n	800108c <main+0x294>
                else if (selected_key == 'D')
 8001050:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001054:	2b44      	cmp	r3, #68	@ 0x44
 8001056:	d119      	bne.n	800108c <main+0x294>
                    PASSWORD();
 8001058:	f001 fd26 	bl	8002aa8 <PASSWORD>
                break;
 800105c:	e016      	b.n	800108c <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 800105e:	482c      	ldr	r0, [pc, #176]	@ (8001110 <main+0x318>)
 8001060:	f7ff f9bc 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	4829      	ldr	r0, [pc, #164]	@ (8001110 <main+0x318>)
 800106a:	f7ff f94d 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 800106e:	4936      	ldr	r1, [pc, #216]	@ (8001148 <main+0x350>)
 8001070:	4827      	ldr	r0, [pc, #156]	@ (8001110 <main+0x318>)
 8001072:	f7ff f99c 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(5);
 8001076:	2005      	movs	r0, #5
 8001078:	f002 fcb0 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 800107c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001080:	f003 f9ba 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <main+0x318>)
 8001086:	f7ff f9a9 	bl	80003dc <CLCD_I2C_Clear>
                break;
 800108a:	e000      	b.n	800108e <main+0x296>
                break;
 800108c:	bf00      	nop
            }
            break;
 800108e:	e037      	b.n	8001100 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001090:	482c      	ldr	r0, [pc, #176]	@ (8001144 <main+0x34c>)
 8001092:	f002 fd19 	bl	8003ac8 <TM_MFRC522_Check>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d128      	bne.n	80010ee <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 800109c:	4829      	ldr	r0, [pc, #164]	@ (8001144 <main+0x34c>)
 800109e:	f000 ff11 	bl	8001ec4 <CheckListUID>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00e      	beq.n	80010c6 <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 80010a8:	4819      	ldr	r0, [pc, #100]	@ (8001110 <main+0x318>)
 80010aa:	f7ff f997 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <main+0x318>)
 80010b4:	f7ff f928 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80010b8:	491c      	ldr	r1, [pc, #112]	@ (800112c <main+0x334>)
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <main+0x318>)
 80010bc:	f7ff f977 	bl	80003ae <CLCD_I2C_WriteString>
            opendoor();
 80010c0:	f002 fc3c 	bl	800393c <opendoor>
 80010c4:	e01c      	b.n	8001100 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 80010c6:	4812      	ldr	r0, [pc, #72]	@ (8001110 <main+0x318>)
 80010c8:	f7ff f988 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <main+0x318>)
 80010d2:	f7ff f919 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 80010d6:	491d      	ldr	r1, [pc, #116]	@ (800114c <main+0x354>)
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <main+0x318>)
 80010da:	f7ff f968 	bl	80003ae <CLCD_I2C_WriteString>
            buzzer(5);
 80010de:	2005      	movs	r0, #5
 80010e0:	f002 fc7c 	bl	80039dc <buzzer>
            HAL_Delay(2000);
 80010e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010e8:	f003 f986 	bl	80043f8 <HAL_Delay>
 80010ec:	e008      	b.n	8001100 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <main+0x358>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <main+0x308>
    {
        startface();
 80010f8:	f002 fb14 	bl	8003724 <startface>
 80010fc:	e000      	b.n	8001100 <main+0x308>
            break;
 80010fe:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 8001100:	f7ff fe56 	bl	8000db0 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 8001104:	f7ff fe68 	bl	8000dd8 <process_fingerprint>
  {
 8001108:	e6d9      	b.n	8000ebe <main+0xc6>
 800110a:	bf00      	nop
 800110c:	2000021c 	.word	0x2000021c
 8001110:	200003d8 	.word	0x200003d8
 8001114:	40010800 	.word	0x40010800
 8001118:	0800f400 	.word	0x0800f400
 800111c:	200002c8 	.word	0x200002c8
 8001120:	0800db20 	.word	0x0800db20
 8001124:	0800db30 	.word	0x0800db30
 8001128:	0800db34 	.word	0x0800db34
 800112c:	0800db44 	.word	0x0800db44
 8001130:	0800db50 	.word	0x0800db50
 8001134:	0800db60 	.word	0x0800db60
 8001138:	0800db70 	.word	0x0800db70
 800113c:	20000020 	.word	0x20000020
 8001140:	0800db80 	.word	0x0800db80
 8001144:	200003e4 	.word	0x200003e4
 8001148:	0800db90 	.word	0x0800db90
 800114c:	0800dba0 	.word	0x0800dba0
 8001150:	20000350 	.word	0x20000350

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	@ 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	2228      	movs	r2, #40	@ 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c f840 	bl	800d1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fe04 	bl	8006db8 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011b6:	f002 fc35 	bl	8003a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 f870 	bl	80072bc <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011e2:	f002 fc1f 	bl	8003a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e6:	2310      	movs	r3, #16
 80011e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 f9fa 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fe:	f002 fc11 	bl	8003a24 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C2_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_I2C2_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C2_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_I2C2_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C2_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_I2C2_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_I2C2_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_I2C2_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_I2C2_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_I2C2_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_I2C2_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_I2C2_Init+0x50>)
 800124a:	f003 fddd 	bl	8004e08 <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001254:	f002 fbe6 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000021c 	.word	0x2000021c
 8001260:	40005800 	.word	0x40005800
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2230      	movs	r2, #48	@ 0x30
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f006 fa4d 	bl	8007758 <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f002 fbae 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000270 	.word	0x20000270
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <MX_TIM2_Init+0x98>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_TIM2_Init+0x98>)
 80012fa:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_TIM2_Init+0x98>)
 8001308:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM2_Init+0x98>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM2_Init+0x98>)
 800131c:	f006 fce8 	bl	8007cf0 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001326:	f002 fb7d 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM2_Init+0x98>)
 8001338:	f006 fe84 	bl	8008044 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001342:	f002 fb6f 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM2_Init+0x98>)
 8001354:	f007 f856 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800135e:	f002 fb61 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002c8 	.word	0x200002c8

08001370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_USART1_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800137c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a8:	f007 f89c 	bl	80084e4 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f002 fb37 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000310 	.word	0x20000310
 80013c0:	40013800 	.word	0x40013800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a51      	ldr	r2, [pc, #324]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4f      	ldr	r3, [pc, #316]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a4b      	ldr	r2, [pc, #300]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <MX_GPIO_Init+0x190>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800143e:	4846      	ldr	r0, [pc, #280]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001440:	f003 fca7 	bl	8004d92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001444:	2200      	movs	r2, #0
 8001446:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800144a:	4844      	ldr	r0, [pc, #272]	@ (800155c <MX_GPIO_Init+0x198>)
 800144c:	f003 fca1 	bl	8004d92 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	4840      	ldr	r0, [pc, #256]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001458:	f003 fc9b 	bl	8004d92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 800145c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	483b      	ldr	r0, [pc, #236]	@ (8001560 <MX_GPIO_Init+0x19c>)
 8001472:	f003 faf3 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8001476:	2303      	movs	r3, #3
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_GPIO_Init+0x194>)
 800148a:	f003 fae7 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800148e:	2310      	movs	r3, #16
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014a6:	f003 fad9 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80014aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4826      	ldr	r0, [pc, #152]	@ (800155c <MX_GPIO_Init+0x198>)
 80014c4:	f003 faca 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014ce:	2311      	movs	r3, #17
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014e2:	f003 fabb 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80014e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001500:	f003 faac 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001504:	2308      	movs	r3, #8
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_GPIO_Init+0x198>)
 800151c:	f003 fa9e 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_GPIO_Init+0x1a0>)
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <MX_GPIO_Init+0x198>)
 8001536:	f003 fa91 	bl	8004a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	2017      	movs	r0, #23
 8001540:	f003 f855 	bl	80045ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001544:	2017      	movs	r0, #23
 8001546:	f003 f86e 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	10110000 	.word	0x10110000

08001568 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
	buzzer(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f002 fa34 	bl	80039dc <buzzer>
	exitmenu = Delaymenu;
 8001574:	4ba8      	ldr	r3, [pc, #672]	@ (8001818 <RFID+0x2b0>)
 8001576:	2214      	movs	r2, #20
 8001578:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800157a:	23ff      	movs	r3, #255	@ 0xff
 800157c:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 800157e:	4aa7      	ldr	r2, [pc, #668]	@ (800181c <RFID+0x2b4>)
 8001580:	49a7      	ldr	r1, [pc, #668]	@ (8001820 <RFID+0x2b8>)
 8001582:	48a8      	ldr	r0, [pc, #672]	@ (8001824 <RFID+0x2bc>)
 8001584:	f7fe ff3a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8001588:	e37a      	b.n	8001c80 <RFID+0x718>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f7ff f890 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001590:	4603      	mov	r3, r0
 8001592:	737b      	strb	r3, [r7, #13]
		if (key_pressed =='*')
 8001594:	7b7b      	ldrb	r3, [r7, #13]
 8001596:	2b2a      	cmp	r3, #42	@ 0x2a
 8001598:	d131      	bne.n	80015fe <RFID+0x96>
		{
			buzzer(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f002 fa1e 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 80015a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001818 <RFID+0x2b0>)
 80015a2:	2214      	movs	r2, #20
 80015a4:	701a      	strb	r2, [r3, #0]
			status++;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	3301      	adds	r3, #1
 80015aa:	75fb      	strb	r3, [r7, #23]
			status = (status > 2) ? 0 : status;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d801      	bhi.n	80015b6 <RFID+0x4e>
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	e000      	b.n	80015b8 <RFID+0x50>
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d012      	beq.n	80015e6 <RFID+0x7e>
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	dc16      	bgt.n	80015f2 <RFID+0x8a>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <RFID+0x66>
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d006      	beq.n	80015da <RFID+0x72>
 80015cc:	e011      	b.n	80015f2 <RFID+0x8a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80015ce:	4a96      	ldr	r2, [pc, #600]	@ (8001828 <RFID+0x2c0>)
 80015d0:	4993      	ldr	r1, [pc, #588]	@ (8001820 <RFID+0x2b8>)
 80015d2:	4894      	ldr	r0, [pc, #592]	@ (8001824 <RFID+0x2bc>)
 80015d4:	f7fe ff12 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015d8:	e011      	b.n	80015fe <RFID+0x96>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80015da:	4a94      	ldr	r2, [pc, #592]	@ (800182c <RFID+0x2c4>)
 80015dc:	4990      	ldr	r1, [pc, #576]	@ (8001820 <RFID+0x2b8>)
 80015de:	4891      	ldr	r0, [pc, #580]	@ (8001824 <RFID+0x2bc>)
 80015e0:	f7fe ff0c 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015e4:	e00b      	b.n	80015fe <RFID+0x96>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80015e6:	4a92      	ldr	r2, [pc, #584]	@ (8001830 <RFID+0x2c8>)
 80015e8:	498d      	ldr	r1, [pc, #564]	@ (8001820 <RFID+0x2b8>)
 80015ea:	488e      	ldr	r0, [pc, #568]	@ (8001824 <RFID+0x2bc>)
 80015ec:	f7fe ff06 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015f0:	e005      	b.n	80015fe <RFID+0x96>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80015f2:	4a90      	ldr	r2, [pc, #576]	@ (8001834 <RFID+0x2cc>)
 80015f4:	498a      	ldr	r1, [pc, #552]	@ (8001820 <RFID+0x2b8>)
 80015f6:	488b      	ldr	r0, [pc, #556]	@ (8001824 <RFID+0x2bc>)
 80015f8:	f7fe ff00 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015fc:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	2b23      	cmp	r3, #35	@ 0x23
 8001602:	f040 833d 	bne.w	8001c80 <RFID+0x718>
		{
			buzzer(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f002 f9e8 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 800160c:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <RFID+0x2b0>)
 800160e:	2214      	movs	r2, #20
 8001610:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b02      	cmp	r3, #2
 8001616:	f000 8327 	beq.w	8001c68 <RFID+0x700>
 800161a:	2b02      	cmp	r3, #2
 800161c:	f300 832c 	bgt.w	8001c78 <RFID+0x710>
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <RFID+0xc4>
 8001624:	2b01      	cmp	r3, #1
 8001626:	f000 80bd 	beq.w	80017a4 <RFID+0x23c>
 800162a:	e325      	b.n	8001c78 <RFID+0x710>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800162c:	4a82      	ldr	r2, [pc, #520]	@ (8001838 <RFID+0x2d0>)
 800162e:	4983      	ldr	r1, [pc, #524]	@ (800183c <RFID+0x2d4>)
 8001630:	487c      	ldr	r0, [pc, #496]	@ (8001824 <RFID+0x2bc>)
 8001632:	f7fe fee3 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = -1;
 8001636:	23ff      	movs	r3, #255	@ 0xff
 8001638:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 800163e:	e0a7      	b.n	8001790 <RFID+0x228>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f7ff f835 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001646:	4603      	mov	r3, r0
 8001648:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 800164a:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <RFID+0x2b0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <RFID+0xfa>
					{
						CLCD_I2C_Clear(&LCD1);
 8001652:	4874      	ldr	r0, [pc, #464]	@ (8001824 <RFID+0x2bc>)
 8001654:	f7fe fec2 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800165c:	f002 fecc 	bl	80043f8 <HAL_Delay>
						return;
 8001660:	e316      	b.n	8001c90 <RFID+0x728>
					}
					if (key_pressed =='*')
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	2b2a      	cmp	r3, #42	@ 0x2a
 8001666:	d127      	bne.n	80016b8 <RFID+0x150>
					{
						buzzer(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f002 f9b7 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 800166e:	4b6a      	ldr	r3, [pc, #424]	@ (8001818 <RFID+0x2b0>)
 8001670:	2214      	movs	r2, #20
 8001672:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	3301      	adds	r3, #1
 8001678:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 1) ? (-1) : statusadd;
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d801      	bhi.n	8001684 <RFID+0x11c>
 8001680:	7dbb      	ldrb	r3, [r7, #22]
 8001682:	e000      	b.n	8001686 <RFID+0x11e>
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001688:	7dbb      	ldrb	r3, [r7, #22]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <RFID+0x12c>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d006      	beq.n	80016a0 <RFID+0x138>
 8001692:	e00b      	b.n	80016ac <RFID+0x144>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <RFID+0x2d8>)
 8001696:	496b      	ldr	r1, [pc, #428]	@ (8001844 <RFID+0x2dc>)
 8001698:	4862      	ldr	r0, [pc, #392]	@ (8001824 <RFID+0x2bc>)
 800169a:	f7fe feaf 	bl	80003fc <CLCD_I2C_Display>
							break;
 800169e:	e00b      	b.n	80016b8 <RFID+0x150>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80016a0:	4a69      	ldr	r2, [pc, #420]	@ (8001848 <RFID+0x2e0>)
 80016a2:	4968      	ldr	r1, [pc, #416]	@ (8001844 <RFID+0x2dc>)
 80016a4:	485f      	ldr	r0, [pc, #380]	@ (8001824 <RFID+0x2bc>)
 80016a6:	f7fe fea9 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016aa:	e005      	b.n	80016b8 <RFID+0x150>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80016ac:	4a61      	ldr	r2, [pc, #388]	@ (8001834 <RFID+0x2cc>)
 80016ae:	4965      	ldr	r1, [pc, #404]	@ (8001844 <RFID+0x2dc>)
 80016b0:	485c      	ldr	r0, [pc, #368]	@ (8001824 <RFID+0x2bc>)
 80016b2:	f7fe fea3 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016b6:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80016b8:	7b7b      	ldrb	r3, [r7, #13]
 80016ba:	2b23      	cmp	r3, #35	@ 0x23
 80016bc:	d168      	bne.n	8001790 <RFID+0x228>
					{
						buzzer(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f002 f98c 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 80016c4:	4b54      	ldr	r3, [pc, #336]	@ (8001818 <RFID+0x2b0>)
 80016c6:	2214      	movs	r2, #20
 80016c8:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80016ca:	7dbb      	ldrb	r3, [r7, #22]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <RFID+0x16e>
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d02d      	beq.n	8001730 <RFID+0x1c8>
 80016d4:	e059      	b.n	800178a <RFID+0x222>
						{
						case 0:
							uint8_t AdminID = InputID_ADMIN();
 80016d6:	f000 faff 	bl	8001cd8 <InputID_ADMIN>
 80016da:	4603      	mov	r3, r0
 80016dc:	71bb      	strb	r3, [r7, #6]
							uint8_t keyadd_admin = (statusadd << 7) + AdminID;
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	01db      	lsls	r3, r3, #7
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	4413      	add	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
							if (CheckKey(keyadd_admin)!=0)
 80016ea:	797b      	ldrb	r3, [r7, #5]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fd5f 	bl	80021b0 <CheckKey>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d011      	beq.n	800171c <RFID+0x1b4>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 80016f8:	4a54      	ldr	r2, [pc, #336]	@ (800184c <RFID+0x2e4>)
 80016fa:	4955      	ldr	r1, [pc, #340]	@ (8001850 <RFID+0x2e8>)
 80016fc:	4849      	ldr	r0, [pc, #292]	@ (8001824 <RFID+0x2bc>)
 80016fe:	f7fe fe7d 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8001702:	2003      	movs	r0, #3
 8001704:	f002 f96a 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 8001708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800170c:	f002 fe74 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001710:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <RFID+0x2d8>)
 8001712:	494c      	ldr	r1, [pc, #304]	@ (8001844 <RFID+0x2dc>)
 8001714:	4843      	ldr	r0, [pc, #268]	@ (8001824 <RFID+0x2bc>)
 8001716:	f7fe fe71 	bl	80003fc <CLCD_I2C_Display>
							else 
							{
								adduid(keyadd_admin);
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
							}
							break;
 800171a:	e039      	b.n	8001790 <RFID+0x228>
								adduid(keyadd_admin);
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fc32 	bl	8001f88 <adduid>
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001724:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <RFID+0x2d8>)
 8001726:	4947      	ldr	r1, [pc, #284]	@ (8001844 <RFID+0x2dc>)
 8001728:	483e      	ldr	r0, [pc, #248]	@ (8001824 <RFID+0x2bc>)
 800172a:	f7fe fe67 	bl	80003fc <CLCD_I2C_Display>
							break;
 800172e:	e02f      	b.n	8001790 <RFID+0x228>
						case 1:
							uint8_t UserID = InputID_USER();
 8001730:	f000 fb50 	bl	8001dd4 <InputID_USER>
 8001734:	4603      	mov	r3, r0
 8001736:	723b      	strb	r3, [r7, #8]
							uint8_t keyadd_user = (statusadd << 7) + UserID;
 8001738:	7dbb      	ldrb	r3, [r7, #22]
 800173a:	01db      	lsls	r3, r3, #7
 800173c:	b2da      	uxtb	r2, r3
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	71fb      	strb	r3, [r7, #7]
							if (CheckKey(keyadd_user)!=0)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd32 	bl	80021b0 <CheckKey>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <RFID+0x20e>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 8001752:	4a3e      	ldr	r2, [pc, #248]	@ (800184c <RFID+0x2e4>)
 8001754:	493e      	ldr	r1, [pc, #248]	@ (8001850 <RFID+0x2e8>)
 8001756:	4833      	ldr	r0, [pc, #204]	@ (8001824 <RFID+0x2bc>)
 8001758:	f7fe fe50 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 800175c:	2003      	movs	r0, #3
 800175e:	f002 f93d 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 8001762:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001766:	f002 fe47 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800176a:	4a37      	ldr	r2, [pc, #220]	@ (8001848 <RFID+0x2e0>)
 800176c:	4935      	ldr	r1, [pc, #212]	@ (8001844 <RFID+0x2dc>)
 800176e:	482d      	ldr	r0, [pc, #180]	@ (8001824 <RFID+0x2bc>)
 8001770:	f7fe fe44 	bl	80003fc <CLCD_I2C_Display>
							else 
							{
								adduid(keyadd_user);
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
							}
							break;
 8001774:	e00c      	b.n	8001790 <RFID+0x228>
								adduid(keyadd_user);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fc05 	bl	8001f88 <adduid>
								CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800177e:	4a32      	ldr	r2, [pc, #200]	@ (8001848 <RFID+0x2e0>)
 8001780:	4930      	ldr	r1, [pc, #192]	@ (8001844 <RFID+0x2dc>)
 8001782:	4828      	ldr	r0, [pc, #160]	@ (8001824 <RFID+0x2bc>)
 8001784:	f7fe fe3a 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001788:	e002      	b.n	8001790 <RFID+0x228>
						default:
							back = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	757b      	strb	r3, [r7, #21]
							break;
 800178e:	bf00      	nop
				while (back == 1)
 8001790:	7d7b      	ldrb	r3, [r7, #21]
 8001792:	2b01      	cmp	r3, #1
 8001794:	f43f af54 	beq.w	8001640 <RFID+0xd8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001798:	4a23      	ldr	r2, [pc, #140]	@ (8001828 <RFID+0x2c0>)
 800179a:	4921      	ldr	r1, [pc, #132]	@ (8001820 <RFID+0x2b8>)
 800179c:	4821      	ldr	r0, [pc, #132]	@ (8001824 <RFID+0x2bc>)
 800179e:	f7fe fe2d 	bl	80003fc <CLCD_I2C_Display>
				break;
 80017a2:	e26d      	b.n	8001c80 <RFID+0x718>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80017a4:	4a24      	ldr	r2, [pc, #144]	@ (8001838 <RFID+0x2d0>)
 80017a6:	4925      	ldr	r1, [pc, #148]	@ (800183c <RFID+0x2d4>)
 80017a8:	481e      	ldr	r0, [pc, #120]	@ (8001824 <RFID+0x2bc>)
 80017aa:	f7fe fe27 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 80017ae:	23ff      	movs	r3, #255	@ 0xff
 80017b0:	753b      	strb	r3, [r7, #20]
				uint8_t backrm = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	74fb      	strb	r3, [r7, #19]
				while (backrm == 1)
 80017b6:	e24d      	b.n	8001c54 <RFID+0x6ec>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f7fe ff79 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80017be:	4603      	mov	r3, r0
 80017c0:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <RFID+0x2b0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <RFID+0x272>
					{
						CLCD_I2C_Clear(&LCD1);
 80017ca:	4816      	ldr	r0, [pc, #88]	@ (8001824 <RFID+0x2bc>)
 80017cc:	f7fe fe06 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80017d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d4:	f002 fe10 	bl	80043f8 <HAL_Delay>
						return;
 80017d8:	e25a      	b.n	8001c90 <RFID+0x728>
					}
					if (key_pressed =='*')
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80017de:	d149      	bne.n	8001874 <RFID+0x30c>
					{
						buzzer(1);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f002 f8fb 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <RFID+0x2b0>)
 80017e8:	2214      	movs	r2, #20
 80017ea:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80017ec:	7d3b      	ldrb	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	753b      	strb	r3, [r7, #20]
						statusremove = (statusremove > 1) ? (-1) : statusremove;
 80017f2:	7d3b      	ldrb	r3, [r7, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d801      	bhi.n	80017fc <RFID+0x294>
 80017f8:	7d3b      	ldrb	r3, [r7, #20]
 80017fa:	e000      	b.n	80017fe <RFID+0x296>
 80017fc:	23ff      	movs	r3, #255	@ 0xff
 80017fe:	753b      	strb	r3, [r7, #20]
						switch (statusremove)
 8001800:	7d3b      	ldrb	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <RFID+0x2a4>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d028      	beq.n	800185c <RFID+0x2f4>
 800180a:	e02d      	b.n	8001868 <RFID+0x300>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 800180c:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <RFID+0x2ec>)
 800180e:	4912      	ldr	r1, [pc, #72]	@ (8001858 <RFID+0x2f0>)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <RFID+0x2bc>)
 8001812:	f7fe fdf3 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001816:	e02d      	b.n	8001874 <RFID+0x30c>
 8001818:	20000020 	.word	0x20000020
 800181c:	0800dbb0 	.word	0x0800dbb0
 8001820:	0800dbc0 	.word	0x0800dbc0
 8001824:	200003d8 	.word	0x200003d8
 8001828:	0800dbd0 	.word	0x0800dbd0
 800182c:	0800dbdc 	.word	0x0800dbdc
 8001830:	0800dbec 	.word	0x0800dbec
 8001834:	0800dbfc 	.word	0x0800dbfc
 8001838:	0800dc04 	.word	0x0800dc04
 800183c:	0800dc10 	.word	0x0800dc10
 8001840:	0800dc20 	.word	0x0800dc20
 8001844:	0800dc30 	.word	0x0800dc30
 8001848:	0800dc3c 	.word	0x0800dc3c
 800184c:	0800dc4c 	.word	0x0800dc4c
 8001850:	0800dc60 	.word	0x0800dc60
 8001854:	0800dc70 	.word	0x0800dc70
 8001858:	0800dc84 	.word	0x0800dc84
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 800185c:	4aae      	ldr	r2, [pc, #696]	@ (8001b18 <RFID+0x5b0>)
 800185e:	49af      	ldr	r1, [pc, #700]	@ (8001b1c <RFID+0x5b4>)
 8001860:	48af      	ldr	r0, [pc, #700]	@ (8001b20 <RFID+0x5b8>)
 8001862:	f7fe fdcb 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001866:	e005      	b.n	8001874 <RFID+0x30c>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001868:	4aae      	ldr	r2, [pc, #696]	@ (8001b24 <RFID+0x5bc>)
 800186a:	49ac      	ldr	r1, [pc, #688]	@ (8001b1c <RFID+0x5b4>)
 800186c:	48ac      	ldr	r0, [pc, #688]	@ (8001b20 <RFID+0x5b8>)
 800186e:	f7fe fdc5 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001872:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	2b23      	cmp	r3, #35	@ 0x23
 8001878:	f040 81ec 	bne.w	8001c54 <RFID+0x6ec>
					{
						buzzer(1);
 800187c:	2001      	movs	r0, #1
 800187e:	f002 f8ad 	bl	80039dc <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001882:	4aa9      	ldr	r2, [pc, #676]	@ (8001b28 <RFID+0x5c0>)
 8001884:	49a9      	ldr	r1, [pc, #676]	@ (8001b2c <RFID+0x5c4>)
 8001886:	48a6      	ldr	r0, [pc, #664]	@ (8001b20 <RFID+0x5b8>)
 8001888:	f7fe fdb8 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = Delaymenu;
 800188c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b30 <RFID+0x5c8>)
 800188e:	2214      	movs	r2, #20
 8001890:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001892:	7d3b      	ldrb	r3, [r7, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <RFID+0x338>
 8001898:	2b01      	cmp	r3, #1
 800189a:	f000 81d0 	beq.w	8001c3e <RFID+0x6d6>
 800189e:	e1d6      	b.n	8001c4e <RFID+0x6e6>
						{
						case 0:
							uint8_t statusrm1 = -1;
 80018a0:	23ff      	movs	r3, #255	@ 0xff
 80018a2:	74bb      	strb	r3, [r7, #18]
							uint8_t backrm1 = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	747b      	strb	r3, [r7, #17]
							while (backrm1 == 1)
 80018a8:	e1bf      	b.n	8001c2a <RFID+0x6c2>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80018aa:	200a      	movs	r0, #10
 80018ac:	f7fe ff00 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80018b0:	4603      	mov	r3, r0
 80018b2:	737b      	strb	r3, [r7, #13]
								if (exitmenu == 0)
 80018b4:	4b9e      	ldr	r3, [pc, #632]	@ (8001b30 <RFID+0x5c8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <RFID+0x364>
								{
									CLCD_I2C_Clear(&LCD1);
 80018bc:	4898      	ldr	r0, [pc, #608]	@ (8001b20 <RFID+0x5b8>)
 80018be:	f7fe fd8d 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80018c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c6:	f002 fd97 	bl	80043f8 <HAL_Delay>
									return;
 80018ca:	e1e1      	b.n	8001c90 <RFID+0x728>
								}
								if (key_pressed =='*')
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80018d0:	d124      	bne.n	800191c <RFID+0x3b4>
								{
									buzzer(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f002 f882 	bl	80039dc <buzzer>
									statusrm1++;
 80018d8:	7cbb      	ldrb	r3, [r7, #18]
 80018da:	3301      	adds	r3, #1
 80018dc:	74bb      	strb	r3, [r7, #18]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 80018de:	7cbb      	ldrb	r3, [r7, #18]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d801      	bhi.n	80018e8 <RFID+0x380>
 80018e4:	7cbb      	ldrb	r3, [r7, #18]
 80018e6:	e000      	b.n	80018ea <RFID+0x382>
 80018e8:	2300      	movs	r3, #0
 80018ea:	74bb      	strb	r3, [r7, #18]
									switch (statusrm1)
 80018ec:	7cbb      	ldrb	r3, [r7, #18]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <RFID+0x390>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d006      	beq.n	8001904 <RFID+0x39c>
 80018f6:	e00b      	b.n	8001910 <RFID+0x3a8>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 80018f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001b34 <RFID+0x5cc>)
 80018fa:	498f      	ldr	r1, [pc, #572]	@ (8001b38 <RFID+0x5d0>)
 80018fc:	4888      	ldr	r0, [pc, #544]	@ (8001b20 <RFID+0x5b8>)
 80018fe:	f7fe fd7d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001902:	e00b      	b.n	800191c <RFID+0x3b4>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001904:	4a8d      	ldr	r2, [pc, #564]	@ (8001b3c <RFID+0x5d4>)
 8001906:	498c      	ldr	r1, [pc, #560]	@ (8001b38 <RFID+0x5d0>)
 8001908:	4885      	ldr	r0, [pc, #532]	@ (8001b20 <RFID+0x5b8>)
 800190a:	f7fe fd77 	bl	80003fc <CLCD_I2C_Display>
										break;
 800190e:	e005      	b.n	800191c <RFID+0x3b4>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001910:	4a84      	ldr	r2, [pc, #528]	@ (8001b24 <RFID+0x5bc>)
 8001912:	4989      	ldr	r1, [pc, #548]	@ (8001b38 <RFID+0x5d0>)
 8001914:	4882      	ldr	r0, [pc, #520]	@ (8001b20 <RFID+0x5b8>)
 8001916:	f7fe fd71 	bl	80003fc <CLCD_I2C_Display>
										break;
 800191a:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800191c:	7b7b      	ldrb	r3, [r7, #13]
 800191e:	2b23      	cmp	r3, #35	@ 0x23
 8001920:	f040 8183 	bne.w	8001c2a <RFID+0x6c2>
								{
									buzzer(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f002 f859 	bl	80039dc <buzzer>
									exitmenu = Delaymenu;
 800192a:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <RFID+0x5c8>)
 800192c:	2214      	movs	r2, #20
 800192e:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <RFID+0x3d6>
 8001936:	2b01      	cmp	r3, #1
 8001938:	f000 8112 	beq.w	8001b60 <RFID+0x5f8>
 800193c:	e172      	b.n	8001c24 <RFID+0x6bc>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800193e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b28 <RFID+0x5c0>)
 8001940:	497a      	ldr	r1, [pc, #488]	@ (8001b2c <RFID+0x5c4>)
 8001942:	4877      	ldr	r0, [pc, #476]	@ (8001b20 <RFID+0x5b8>)
 8001944:	f7fe fd5a 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = -1;
 8001948:	23ff      	movs	r3, #255	@ 0xff
 800194a:	743b      	strb	r3, [r7, #16]
										uint8_t backrm10 = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
										while (backrm10 == 1)
 8001950:	e0d8      	b.n	8001b04 <RFID+0x59c>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001952:	200a      	movs	r0, #10
 8001954:	f7fe feac 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001958:	4603      	mov	r3, r0
 800195a:	737b      	strb	r3, [r7, #13]
											if (exitmenu == 0)
 800195c:	4b74      	ldr	r3, [pc, #464]	@ (8001b30 <RFID+0x5c8>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <RFID+0x40c>
											{
												CLCD_I2C_Clear(&LCD1);
 8001964:	486e      	ldr	r0, [pc, #440]	@ (8001b20 <RFID+0x5b8>)
 8001966:	f7fe fd39 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 800196a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800196e:	f002 fd43 	bl	80043f8 <HAL_Delay>
												return;
 8001972:	e18d      	b.n	8001c90 <RFID+0x728>
											}
											if (key_pressed =='*')
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	2b2a      	cmp	r3, #42	@ 0x2a
 8001978:	d127      	bne.n	80019ca <RFID+0x462>
											{
												buzzer(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f002 f82e 	bl	80039dc <buzzer>
												exitmenu = Delaymenu;
 8001980:	4b6b      	ldr	r3, [pc, #428]	@ (8001b30 <RFID+0x5c8>)
 8001982:	2214      	movs	r2, #20
 8001984:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001986:	7c3b      	ldrb	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	743b      	strb	r3, [r7, #16]
												statusadd = (statusadd > 1) ? (-1) : statusadd;
 800198c:	7c3b      	ldrb	r3, [r7, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d801      	bhi.n	8001996 <RFID+0x42e>
 8001992:	7c3b      	ldrb	r3, [r7, #16]
 8001994:	e000      	b.n	8001998 <RFID+0x430>
 8001996:	23ff      	movs	r3, #255	@ 0xff
 8001998:	743b      	strb	r3, [r7, #16]
												switch (statusadd)
 800199a:	7c3b      	ldrb	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <RFID+0x43e>
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d006      	beq.n	80019b2 <RFID+0x44a>
 80019a4:	e00b      	b.n	80019be <RFID+0x456>
												{
												case 0:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 80019a6:	4a66      	ldr	r2, [pc, #408]	@ (8001b40 <RFID+0x5d8>)
 80019a8:	4966      	ldr	r1, [pc, #408]	@ (8001b44 <RFID+0x5dc>)
 80019aa:	485d      	ldr	r0, [pc, #372]	@ (8001b20 <RFID+0x5b8>)
 80019ac:	f7fe fd26 	bl	80003fc <CLCD_I2C_Display>
													break;
 80019b0:	e00b      	b.n	80019ca <RFID+0x462>
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 80019b2:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <RFID+0x5e0>)
 80019b4:	4963      	ldr	r1, [pc, #396]	@ (8001b44 <RFID+0x5dc>)
 80019b6:	485a      	ldr	r0, [pc, #360]	@ (8001b20 <RFID+0x5b8>)
 80019b8:	f7fe fd20 	bl	80003fc <CLCD_I2C_Display>
													break;
 80019bc:	e005      	b.n	80019ca <RFID+0x462>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");
 80019be:	4a59      	ldr	r2, [pc, #356]	@ (8001b24 <RFID+0x5bc>)
 80019c0:	4960      	ldr	r1, [pc, #384]	@ (8001b44 <RFID+0x5dc>)
 80019c2:	4857      	ldr	r0, [pc, #348]	@ (8001b20 <RFID+0x5b8>)
 80019c4:	f7fe fd1a 	bl	80003fc <CLCD_I2C_Display>
													break;
 80019c8:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	2b23      	cmp	r3, #35	@ 0x23
 80019ce:	f040 8099 	bne.w	8001b04 <RFID+0x59c>
											{
												buzzer(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f002 f802 	bl	80039dc <buzzer>
												exitmenu = Delaymenu;
 80019d8:	4b55      	ldr	r3, [pc, #340]	@ (8001b30 <RFID+0x5c8>)
 80019da:	2214      	movs	r2, #20
 80019dc:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 80019de:	7c3b      	ldrb	r3, [r7, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <RFID+0x482>
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d045      	beq.n	8001a74 <RFID+0x50c>
 80019e8:	e089      	b.n	8001afe <RFID+0x596>
												{
													case 0: 
														uint8_t AdminID = InputID_ADMIN();
 80019ea:	f000 f975 	bl	8001cd8 <InputID_ADMIN>
 80019ee:	4603      	mov	r3, r0
 80019f0:	72bb      	strb	r3, [r7, #10]
														uint8_t keyadd_admin = (statusadd << 7) + AdminID;
 80019f2:	7c3b      	ldrb	r3, [r7, #16]
 80019f4:	01db      	lsls	r3, r3, #7
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	7abb      	ldrb	r3, [r7, #10]
 80019fa:	4413      	add	r3, r2
 80019fc:	727b      	strb	r3, [r7, #9]
														if (CheckKey(keyadd_admin)==0)
 80019fe:	7a7b      	ldrb	r3, [r7, #9]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fbd5 	bl	80021b0 <CheckKey>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d111      	bne.n	8001a30 <RFID+0x4c8>
														{
															CLCD_I2C_Display(&LCD1,"ID do not existing"," Pick another ID");
 8001a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b4c <RFID+0x5e4>)
 8001a0e:	4950      	ldr	r1, [pc, #320]	@ (8001b50 <RFID+0x5e8>)
 8001a10:	4843      	ldr	r0, [pc, #268]	@ (8001b20 <RFID+0x5b8>)
 8001a12:	f7fe fcf3 	bl	80003fc <CLCD_I2C_Display>
															buzzer(3);
 8001a16:	2003      	movs	r0, #3
 8001a18:	f001 ffe0 	bl	80039dc <buzzer>
															HAL_Delay(1000);
 8001a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a20:	f002 fcea 	bl	80043f8 <HAL_Delay>
															CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001a24:	4a46      	ldr	r2, [pc, #280]	@ (8001b40 <RFID+0x5d8>)
 8001a26:	4947      	ldr	r1, [pc, #284]	@ (8001b44 <RFID+0x5dc>)
 8001a28:	483d      	ldr	r0, [pc, #244]	@ (8001b20 <RFID+0x5b8>)
 8001a2a:	f7fe fce7 	bl	80003fc <CLCD_I2C_Display>
															else
															{
																CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
															}
														}
														break;
 8001a2e:	e069      	b.n	8001b04 <RFID+0x59c>
															removeuid(CheckKey(keyadd_admin));
 8001a30:	7a7b      	ldrb	r3, [r7, #9]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fbbc 	bl	80021b0 <CheckKey>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f8dc 	bl	8002bf8 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE ADMIN CARD","   SUCCESSFUL  ");
 8001a40:	4a44      	ldr	r2, [pc, #272]	@ (8001b54 <RFID+0x5ec>)
 8001a42:	4945      	ldr	r1, [pc, #276]	@ (8001b58 <RFID+0x5f0>)
 8001a44:	4836      	ldr	r0, [pc, #216]	@ (8001b20 <RFID+0x5b8>)
 8001a46:	f7fe fcd9 	bl	80003fc <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a4e:	f002 fcd3 	bl	80043f8 <HAL_Delay>
															if (checkcountUID() == 0)
 8001a52:	f000 fa67 	bl	8001f24 <checkcountUID>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <RFID+0x500>
																startadd();
 8001a5c:	f001 f8da 	bl	8002c14 <startadd>
																exitmenu = 0;
 8001a60:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <RFID+0x5c8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
														break;
 8001a66:	e04d      	b.n	8001b04 <RFID+0x59c>
																CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001a68:	4a35      	ldr	r2, [pc, #212]	@ (8001b40 <RFID+0x5d8>)
 8001a6a:	4936      	ldr	r1, [pc, #216]	@ (8001b44 <RFID+0x5dc>)
 8001a6c:	482c      	ldr	r0, [pc, #176]	@ (8001b20 <RFID+0x5b8>)
 8001a6e:	f7fe fcc5 	bl	80003fc <CLCD_I2C_Display>
														break;
 8001a72:	e047      	b.n	8001b04 <RFID+0x59c>
													case 1:
														uint8_t UserID = InputID_USER();
 8001a74:	f000 f9ae 	bl	8001dd4 <InputID_USER>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	733b      	strb	r3, [r7, #12]
														uint8_t keyadd_user = (statusadd << 7) + UserID;
 8001a7c:	7c3b      	ldrb	r3, [r7, #16]
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	7b3b      	ldrb	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	72fb      	strb	r3, [r7, #11]
														if (CheckKey(keyadd_user)==0)
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fb90 	bl	80021b0 <CheckKey>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d111      	bne.n	8001aba <RFID+0x552>
														{
															CLCD_I2C_Display(&LCD1,"ID do not existing"," Pick another ID");
 8001a96:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <RFID+0x5e4>)
 8001a98:	492d      	ldr	r1, [pc, #180]	@ (8001b50 <RFID+0x5e8>)
 8001a9a:	4821      	ldr	r0, [pc, #132]	@ (8001b20 <RFID+0x5b8>)
 8001a9c:	f7fe fcae 	bl	80003fc <CLCD_I2C_Display>
															buzzer(3);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f001 ff9b 	bl	80039dc <buzzer>
															HAL_Delay(1000);
 8001aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aaa:	f002 fca5 	bl	80043f8 <HAL_Delay>
															CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001aae:	4a26      	ldr	r2, [pc, #152]	@ (8001b48 <RFID+0x5e0>)
 8001ab0:	4924      	ldr	r1, [pc, #144]	@ (8001b44 <RFID+0x5dc>)
 8001ab2:	481b      	ldr	r0, [pc, #108]	@ (8001b20 <RFID+0x5b8>)
 8001ab4:	f7fe fca2 	bl	80003fc <CLCD_I2C_Display>
															else
															{
																CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
															}
														}
														break;
 8001ab8:	e024      	b.n	8001b04 <RFID+0x59c>
															removeuid(CheckKey(keyadd_user));
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fb77 	bl	80021b0 <CheckKey>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 f897 	bl	8002bf8 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE USER CARD","   SUCCESSFUL  ");
 8001aca:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <RFID+0x5ec>)
 8001acc:	4923      	ldr	r1, [pc, #140]	@ (8001b5c <RFID+0x5f4>)
 8001ace:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <RFID+0x5b8>)
 8001ad0:	f7fe fc94 	bl	80003fc <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad8:	f002 fc8e 	bl	80043f8 <HAL_Delay>
															if (checkcountUID() == 0)
 8001adc:	f000 fa22 	bl	8001f24 <checkcountUID>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <RFID+0x58a>
																startadd();
 8001ae6:	f001 f895 	bl	8002c14 <startadd>
																exitmenu = 0;
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <RFID+0x5c8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
														break;
 8001af0:	e008      	b.n	8001b04 <RFID+0x59c>
																CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001af2:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <RFID+0x5e0>)
 8001af4:	4913      	ldr	r1, [pc, #76]	@ (8001b44 <RFID+0x5dc>)
 8001af6:	480a      	ldr	r0, [pc, #40]	@ (8001b20 <RFID+0x5b8>)
 8001af8:	f7fe fc80 	bl	80003fc <CLCD_I2C_Display>
														break;
 8001afc:	e002      	b.n	8001b04 <RFID+0x59c>
													default:
														backrm10 = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
														break;
 8001b02:	bf00      	nop
										while (backrm10 == 1)
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f43f af23 	beq.w	8001952 <RFID+0x3ea>
												}		
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001b0c:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <RFID+0x5cc>)
 8001b0e:	490a      	ldr	r1, [pc, #40]	@ (8001b38 <RFID+0x5d0>)
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <RFID+0x5b8>)
 8001b12:	f7fe fc73 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001b16:	e088      	b.n	8001c2a <RFID+0x6c2>
 8001b18:	0800dc94 	.word	0x0800dc94
 8001b1c:	0800dc84 	.word	0x0800dc84
 8001b20:	200003d8 	.word	0x200003d8
 8001b24:	0800dbfc 	.word	0x0800dbfc
 8001b28:	0800dc04 	.word	0x0800dc04
 8001b2c:	0800dc10 	.word	0x0800dc10
 8001b30:	20000020 	.word	0x20000020
 8001b34:	0800dca4 	.word	0x0800dca4
 8001b38:	0800dcb4 	.word	0x0800dcb4
 8001b3c:	0800dcc4 	.word	0x0800dcc4
 8001b40:	0800dcd4 	.word	0x0800dcd4
 8001b44:	0800dce8 	.word	0x0800dce8
 8001b48:	0800dcf8 	.word	0x0800dcf8
 8001b4c:	0800dc4c 	.word	0x0800dc4c
 8001b50:	0800dd08 	.word	0x0800dd08
 8001b54:	0800dd1c 	.word	0x0800dd1c
 8001b58:	0800dd2c 	.word	0x0800dd2c
 8001b5c:	0800dd40 	.word	0x0800dd40
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001b60:	4a4d      	ldr	r2, [pc, #308]	@ (8001c98 <RFID+0x730>)
 8001b62:	494e      	ldr	r1, [pc, #312]	@ (8001c9c <RFID+0x734>)
 8001b64:	484e      	ldr	r0, [pc, #312]	@ (8001ca0 <RFID+0x738>)
 8001b66:	f7fe fc49 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001b6e:	e050      	b.n	8001c12 <RFID+0x6aa>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f7fe fd9d 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001b76:	4603      	mov	r3, r0
 8001b78:	737b      	strb	r3, [r7, #13]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001b7a:	484a      	ldr	r0, [pc, #296]	@ (8001ca4 <RFID+0x73c>)
 8001b7c:	f001 ffa4 	bl	8003ac8 <TM_MFRC522_Check>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d13d      	bne.n	8001c02 <RFID+0x69a>
											{
												if (CheckListUID(CardID) != 0)
 8001b86:	4847      	ldr	r0, [pc, #284]	@ (8001ca4 <RFID+0x73c>)
 8001b88:	f000 f99c 	bl	8001ec4 <CheckListUID>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d026      	beq.n	8001be0 <RFID+0x678>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001b92:	4844      	ldr	r0, [pc, #272]	@ (8001ca4 <RFID+0x73c>)
 8001b94:	f000 f996 	bl	8001ec4 <CheckListUID>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fb08 	bl	80021b0 <CheckKey>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 f828 	bl	8002bf8 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001ba8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ca8 <RFID+0x740>)
 8001baa:	4940      	ldr	r1, [pc, #256]	@ (8001cac <RFID+0x744>)
 8001bac:	483c      	ldr	r0, [pc, #240]	@ (8001ca0 <RFID+0x738>)
 8001bae:	f7fe fc25 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb6:	f002 fc1f 	bl	80043f8 <HAL_Delay>
													if (checkcountUID() == 0)
 8001bba:	f000 f9b3 	bl	8001f24 <checkcountUID>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <RFID+0x66c>
													{
														startadd();
 8001bc4:	f001 f826 	bl	8002c14 <startadd>
														rmquet = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73bb      	strb	r3, [r7, #14]
														exitmenu = 0;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <RFID+0x748>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
														return;
 8001bd2:	e05d      	b.n	8001c90 <RFID+0x728>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001bd4:	4a30      	ldr	r2, [pc, #192]	@ (8001c98 <RFID+0x730>)
 8001bd6:	4931      	ldr	r1, [pc, #196]	@ (8001c9c <RFID+0x734>)
 8001bd8:	4831      	ldr	r0, [pc, #196]	@ (8001ca0 <RFID+0x738>)
 8001bda:	f7fe fc0f 	bl	80003fc <CLCD_I2C_Display>
 8001bde:	e010      	b.n	8001c02 <RFID+0x69a>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   This Card","  Do not exist");
 8001be0:	4a34      	ldr	r2, [pc, #208]	@ (8001cb4 <RFID+0x74c>)
 8001be2:	4935      	ldr	r1, [pc, #212]	@ (8001cb8 <RFID+0x750>)
 8001be4:	482e      	ldr	r0, [pc, #184]	@ (8001ca0 <RFID+0x738>)
 8001be6:	f7fe fc09 	bl	80003fc <CLCD_I2C_Display>
													buzzer(3);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f001 fef6 	bl	80039dc <buzzer>
													HAL_Delay(1000);
 8001bf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bf4:	f002 fc00 	bl	80043f8 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001bf8:	4a27      	ldr	r2, [pc, #156]	@ (8001c98 <RFID+0x730>)
 8001bfa:	4928      	ldr	r1, [pc, #160]	@ (8001c9c <RFID+0x734>)
 8001bfc:	4828      	ldr	r0, [pc, #160]	@ (8001ca0 <RFID+0x738>)
 8001bfe:	f7fe fbfd 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001c02:	7b7b      	ldrb	r3, [r7, #13]
 8001c04:	2b23      	cmp	r3, #35	@ 0x23
 8001c06:	d104      	bne.n	8001c12 <RFID+0x6aa>
											{
												buzzer(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f001 fee7 	bl	80039dc <buzzer>
												rmquet = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ab      	bne.n	8001b70 <RFID+0x608>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001c18:	4a28      	ldr	r2, [pc, #160]	@ (8001cbc <RFID+0x754>)
 8001c1a:	4929      	ldr	r1, [pc, #164]	@ (8001cc0 <RFID+0x758>)
 8001c1c:	4820      	ldr	r0, [pc, #128]	@ (8001ca0 <RFID+0x738>)
 8001c1e:	f7fe fbed 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c22:	e002      	b.n	8001c2a <RFID+0x6c2>
									default:
										backrm1 = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	747b      	strb	r3, [r7, #17]
										break;
 8001c28:	bf00      	nop
							while (backrm1 == 1)
 8001c2a:	7c7b      	ldrb	r3, [r7, #17]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f43f ae3c 	beq.w	80018aa <RFID+0x342>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001c32:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <RFID+0x75c>)
 8001c34:	4924      	ldr	r1, [pc, #144]	@ (8001cc8 <RFID+0x760>)
 8001c36:	481a      	ldr	r0, [pc, #104]	@ (8001ca0 <RFID+0x738>)
 8001c38:	f7fe fbe0 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001c3c:	e00a      	b.n	8001c54 <RFID+0x6ec>
						case 1:
							remoall();
 8001c3e:	f001 f85f 	bl	8002d00 <remoall>
							startadd();
 8001c42:	f000 ffe7 	bl	8002c14 <startadd>
							exitmenu = 0;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <RFID+0x748>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
							break;
 8001c4c:	e002      	b.n	8001c54 <RFID+0x6ec>
						default:
							backrm = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	74fb      	strb	r3, [r7, #19]
							break;
 8001c52:	bf00      	nop
				while (backrm == 1)
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f43f adae 	beq.w	80017b8 <RFID+0x250>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ccc <RFID+0x764>)
 8001c5e:	491c      	ldr	r1, [pc, #112]	@ (8001cd0 <RFID+0x768>)
 8001c60:	480f      	ldr	r0, [pc, #60]	@ (8001ca0 <RFID+0x738>)
 8001c62:	f7fe fbcb 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001c66:	e00b      	b.n	8001c80 <RFID+0x718>
			case 2:
				checkthe();
 8001c68:	f000 fa06 	bl	8002078 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001c6c:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <RFID+0x76c>)
 8001c6e:	4918      	ldr	r1, [pc, #96]	@ (8001cd0 <RFID+0x768>)
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <RFID+0x738>)
 8001c72:	f7fe fbc3 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001c76:	e003      	b.n	8001c80 <RFID+0x718>
			default:
				exitmenu = 0;
 8001c78:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <RFID+0x748>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
				break;
 8001c7e:	bf00      	nop
	while (exitmenu )
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <RFID+0x748>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f ac80 	bne.w	800158a <RFID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <RFID+0x738>)
 8001c8c:	f7fe fba6 	bl	80003dc <CLCD_I2C_Clear>
}
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800dbfc 	.word	0x0800dbfc
 8001c9c:	0800dd54 	.word	0x0800dd54
 8001ca0:	200003d8 	.word	0x200003d8
 8001ca4:	200003e4 	.word	0x200003e4
 8001ca8:	0800dd1c 	.word	0x0800dd1c
 8001cac:	0800dd64 	.word	0x0800dd64
 8001cb0:	20000020 	.word	0x20000020
 8001cb4:	0800dd74 	.word	0x0800dd74
 8001cb8:	0800dd84 	.word	0x0800dd84
 8001cbc:	0800dcc4 	.word	0x0800dcc4
 8001cc0:	0800dcb4 	.word	0x0800dcb4
 8001cc4:	0800dc70 	.word	0x0800dc70
 8001cc8:	0800dc84 	.word	0x0800dc84
 8001ccc:	0800dbdc 	.word	0x0800dbdc
 8001cd0:	0800dbc0 	.word	0x0800dbc0
 8001cd4:	0800dbec 	.word	0x0800dbec

08001cd8 <InputID_ADMIN>:

uint8_t InputID_ADMIN()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	80bb      	strh	r3, [r7, #4]
    char id_str[3] = {0};
 8001ce2:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <InputID_ADMIN+0xe8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	803b      	strh	r3, [r7, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	70bb      	strb	r3, [r7, #2]
    uint8_t index = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-28):", "ID= ");
 8001cf0:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <InputID_ADMIN+0xec>)
 8001cf2:	4935      	ldr	r1, [pc, #212]	@ (8001dc8 <InputID_ADMIN+0xf0>)
 8001cf4:	4835      	ldr	r0, [pc, #212]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001cf6:	f7fe fb81 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f7fe fcd8 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001d00:	4603      	mov	r3, r0
 8001d02:	70fb      	strb	r3, [r7, #3]
        if (key >= '0' && key <= '9' && index < 2)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d08:	d916      	bls.n	8001d38 <InputID_ADMIN+0x60>
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	2b39      	cmp	r3, #57	@ 0x39
 8001d0e:	d813      	bhi.n	8001d38 <InputID_ADMIN+0x60>
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d810      	bhi.n	8001d38 <InputID_ADMIN+0x60>
        {
            buzzer(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f001 fe60 	bl	80039dc <buzzer>
            id_str[index++] = key;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	71fa      	strb	r2, [r7, #7]
 8001d22:	3308      	adds	r3, #8
 8001d24:	443b      	add	r3, r7
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	f803 2c08 	strb.w	r2, [r3, #-8]
            CLCD_I2C_WriteChar(&LCD1, key);
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4826      	ldr	r0, [pc, #152]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001d32:	f7fe fb2c 	bl	800038e <CLCD_I2C_WriteChar>
 8001d36:	e02d      	b.n	8001d94 <InputID_ADMIN+0xbc>
        }
        else if (key == '#' && index > 0)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b23      	cmp	r3, #35	@ 0x23
 8001d3c:	d1dd      	bne.n	8001cfa <InputID_ADMIN+0x22>
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0da      	beq.n	8001cfa <InputID_ADMIN+0x22>
        {
            buzzer(1);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f001 fe49 	bl	80039dc <buzzer>
            id = atoi(id_str);
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f00b f96f 	bl	800d030 <atoi>
 8001d52:	4603      	mov	r3, r0
 8001d54:	80bb      	strh	r3, [r7, #4]
            if (id >= 1 && id <= 28)
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <InputID_ADMIN+0x8a>
 8001d5c:	88bb      	ldrh	r3, [r7, #4]
 8001d5e:	2b1c      	cmp	r3, #28
 8001d60:	d919      	bls.n	8001d96 <InputID_ADMIN+0xbe>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-28):");
 8001d62:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <InputID_ADMIN+0xf0>)
 8001d64:	491a      	ldr	r1, [pc, #104]	@ (8001dd0 <InputID_ADMIN+0xf8>)
 8001d66:	4819      	ldr	r0, [pc, #100]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001d68:	f7fe fb48 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8001d6c:	2005      	movs	r0, #5
 8001d6e:	f001 fe35 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 8001d72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d76:	f002 fb3f 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID (1-28):", "ID= ");
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <InputID_ADMIN+0xec>)
 8001d7c:	4912      	ldr	r1, [pc, #72]	@ (8001dc8 <InputID_ADMIN+0xf0>)
 8001d7e:	4813      	ldr	r0, [pc, #76]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001d80:	f7fe fb3c 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8001d84:	463b      	mov	r3, r7
 8001d86:	2203      	movs	r2, #3
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00b fa2c 	bl	800d1e8 <memset>
                index = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	71fb      	strb	r3, [r7, #7]
    {
 8001d94:	e7b1      	b.n	8001cfa <InputID_ADMIN+0x22>
            }
        }
    }
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8001d96:	2201      	movs	r2, #1
 8001d98:	2104      	movs	r1, #4
 8001d9a:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001d9c:	f7fe fab4 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8001da0:	463b      	mov	r3, r7
 8001da2:	4619      	mov	r1, r3
 8001da4:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <InputID_ADMIN+0xf4>)
 8001da6:	f7fe fb02 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8001daa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dae:	f002 fb23 	bl	80043f8 <HAL_Delay>
	return id;
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	b2db      	uxtb	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800ddbc 	.word	0x0800ddbc
 8001dc4:	0800dd94 	.word	0x0800dd94
 8001dc8:	0800dd9c 	.word	0x0800dd9c
 8001dcc:	200003d8 	.word	0x200003d8
 8001dd0:	0800ddb0 	.word	0x0800ddb0

08001dd4 <InputID_USER>:

uint8_t InputID_USER()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	81bb      	strh	r3, [r7, #12]
    char id_str[4] = {0};
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
    uint8_t index = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-100):", "ID= ");
 8001de6:	4a33      	ldr	r2, [pc, #204]	@ (8001eb4 <InputID_USER+0xe0>)
 8001de8:	4933      	ldr	r1, [pc, #204]	@ (8001eb8 <InputID_USER+0xe4>)
 8001dea:	4834      	ldr	r0, [pc, #208]	@ (8001ebc <InputID_USER+0xe8>)
 8001dec:	f7fe fb06 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f7fe fc5d 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001df6:	4603      	mov	r3, r0
 8001df8:	72fb      	strb	r3, [r7, #11]
        if (key >= '0' && key <= '9' && index < 3)
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	2b2f      	cmp	r3, #47	@ 0x2f
 8001dfe:	d916      	bls.n	8001e2e <InputID_USER+0x5a>
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	2b39      	cmp	r3, #57	@ 0x39
 8001e04:	d813      	bhi.n	8001e2e <InputID_USER+0x5a>
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d810      	bhi.n	8001e2e <InputID_USER+0x5a>
        {
            buzzer(1);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f001 fde5 	bl	80039dc <buzzer>
            id_str[index++] = key;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	73fa      	strb	r2, [r7, #15]
 8001e18:	3310      	adds	r3, #16
 8001e1a:	443b      	add	r3, r7
 8001e1c:	7afa      	ldrb	r2, [r7, #11]
 8001e1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
            CLCD_I2C_WriteChar(&LCD1, key);
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4825      	ldr	r0, [pc, #148]	@ (8001ebc <InputID_USER+0xe8>)
 8001e28:	f7fe fab1 	bl	800038e <CLCD_I2C_WriteChar>
 8001e2c:	e02d      	b.n	8001e8a <InputID_USER+0xb6>
        }
        else if (key == '#' && index > 0)
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	2b23      	cmp	r3, #35	@ 0x23
 8001e32:	d1dd      	bne.n	8001df0 <InputID_USER+0x1c>
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0da      	beq.n	8001df0 <InputID_USER+0x1c>
        {
            buzzer(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f001 fdce 	bl	80039dc <buzzer>
            id = atoi(id_str);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00b f8f4 	bl	800d030 <atoi>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81bb      	strh	r3, [r7, #12]
            if (id >= 1 && id <= 100)
 8001e4c:	89bb      	ldrh	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <InputID_USER+0x84>
 8001e52:	89bb      	ldrh	r3, [r7, #12]
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d919      	bls.n	8001e8c <InputID_USER+0xb8>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-100):");
 8001e58:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <InputID_USER+0xe4>)
 8001e5a:	4919      	ldr	r1, [pc, #100]	@ (8001ec0 <InputID_USER+0xec>)
 8001e5c:	4817      	ldr	r0, [pc, #92]	@ (8001ebc <InputID_USER+0xe8>)
 8001e5e:	f7fe facd 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8001e62:	2005      	movs	r0, #5
 8001e64:	f001 fdba 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 8001e68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e6c:	f002 fac4 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID (1-100):", "ID= ");
 8001e70:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <InputID_USER+0xe0>)
 8001e72:	4911      	ldr	r1, [pc, #68]	@ (8001eb8 <InputID_USER+0xe4>)
 8001e74:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <InputID_USER+0xe8>)
 8001e76:	f7fe fac1 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00b f9b1 	bl	800d1e8 <memset>
                index = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
    {
 8001e8a:	e7b1      	b.n	8001df0 <InputID_USER+0x1c>
            }
        }
    }
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2104      	movs	r1, #4
 8001e90:	480a      	ldr	r0, [pc, #40]	@ (8001ebc <InputID_USER+0xe8>)
 8001e92:	f7fe fa39 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4808      	ldr	r0, [pc, #32]	@ (8001ebc <InputID_USER+0xe8>)
 8001e9c:	f7fe fa87 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8001ea0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea4:	f002 faa8 	bl	80043f8 <HAL_Delay>
	return id;
 8001ea8:	89bb      	ldrh	r3, [r7, #12]
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	0800dd94 	.word	0x0800dd94
 8001eb8:	0800ddc0 	.word	0x0800ddc0
 8001ebc:	200003d8 	.word	0x200003d8
 8001ec0:	0800ddb0 	.word	0x0800ddb0

08001ec4 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    uint32_t pt = StartAddressUID;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <CheckListUID+0x5c>)
 8001ece:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001ed0:	e018      	b.n	8001f04 <CheckListUID+0x40>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3306      	adds	r3, #6
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ff15 	bl	8000d06 <Flash_Read_2Byte>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d10a      	bne.n	8001efe <CheckListUID+0x3a>
        {
            if (CheckUID(data, pt) == 1)
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fe58 	bl	8002ba0 <CheckUID>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d103      	bne.n	8001efe <CheckListUID+0x3a>
                return *(uint8_t *)(pt + 5);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3305      	adds	r3, #5
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	e00b      	b.n	8001f16 <CheckListUID+0x52>
        }
        pt = pt + 8;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3308      	adds	r3, #8
 8001f02:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3305      	adds	r3, #5
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fef0 	bl	8000cee <Flash_Read_Byte>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2bff      	cmp	r3, #255	@ 0xff
 8001f12:	d1de      	bne.n	8001ed2 <CheckListUID+0xe>
    }
    return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	0800f000 	.word	0x0800f000

08001f24 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
    uint32_t pt = StartAddressUID;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <checkcountUID+0x60>)
 8001f2c:	607b      	str	r3, [r7, #4]
    uint8_t count = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	70fb      	strb	r3, [r7, #3]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001f32:	e019      	b.n	8001f68 <checkcountUID+0x44>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3306      	adds	r3, #6
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fee4 	bl	8000d06 <Flash_Read_2Byte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d10b      	bne.n	8001f62 <checkcountUID+0x3e>
        {
            if ((Flash_Read_Byte(pt + 5) & 0x80) == 0)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3305      	adds	r3, #5
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fecd 	bl	8000cee <Flash_Read_Byte>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db02      	blt.n	8001f62 <checkcountUID+0x3e>
            {
                count++;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	70fb      	strb	r3, [r7, #3]
            }
        }
        pt = pt + 8;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3308      	adds	r3, #8
 8001f66:	607b      	str	r3, [r7, #4]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3305      	adds	r3, #5
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe febe 	bl	8000cee <Flash_Read_Byte>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2bff      	cmp	r3, #255	@ 0xff
 8001f76:	d1dd      	bne.n	8001f34 <checkcountUID+0x10>
    }
    return count;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800f000 	.word	0x0800f000

08001f88 <adduid>:

void adduid(uint8_t key)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
    setaddress();
 8001f92:	f000 fe99 	bl	8002cc8 <setaddress>
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001f96:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <adduid+0xd0>)
 8001f98:	4930      	ldr	r1, [pc, #192]	@ (800205c <adduid+0xd4>)
 8001f9a:	4831      	ldr	r0, [pc, #196]	@ (8002060 <adduid+0xd8>)
 8001f9c:	f7fe fa2e 	bl	80003fc <CLCD_I2C_Display>
    while (exitmenu)
 8001fa0:	e053      	b.n	800204a <adduid+0xc2>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8001fa2:	4830      	ldr	r0, [pc, #192]	@ (8002064 <adduid+0xdc>)
 8001fa4:	f001 fd90 	bl	8003ac8 <TM_MFRC522_Check>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d143      	bne.n	8002036 <adduid+0xae>
        {
            HAL_Delay(100);
 8001fae:	2064      	movs	r0, #100	@ 0x64
 8001fb0:	f002 fa22 	bl	80043f8 <HAL_Delay>
            if (CheckListUID(CardID) == 0)
 8001fb4:	482b      	ldr	r0, [pc, #172]	@ (8002064 <adduid+0xdc>)
 8001fb6:	f7ff ff85 	bl	8001ec4 <CheckListUID>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d122      	bne.n	8002006 <adduid+0x7e>
            {
                buzzer(1);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f001 fd0b 	bl	80039dc <buzzer>
                CardID[5] = key;
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <adduid+0xdc>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	7153      	strb	r3, [r2, #5]
                Flash_Write_Array(AddressUID, CardID, 6);
 8001fcc:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <adduid+0xe0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2206      	movs	r2, #6
 8001fd2:	4924      	ldr	r1, [pc, #144]	@ (8002064 <adduid+0xdc>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fe67 	bl	8000ca8 <Flash_Write_Array>
                AddressUID += 8;
 8001fda:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <adduid+0xe0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <adduid+0xe0>)
 8001fe2:	6013      	str	r3, [r2, #0]
                CLCD_I2C_Clear(&LCD1);
 8001fe4:	481e      	ldr	r0, [pc, #120]	@ (8002060 <adduid+0xd8>)
 8001fe6:	f7fe f9f9 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	481c      	ldr	r0, [pc, #112]	@ (8002060 <adduid+0xd8>)
 8001ff0:	f7fe f98a 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8001ff4:	491d      	ldr	r1, [pc, #116]	@ (800206c <adduid+0xe4>)
 8001ff6:	481a      	ldr	r0, [pc, #104]	@ (8002060 <adduid+0xd8>)
 8001ff8:	f7fe f9d9 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8001ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002000:	f002 f9fa 	bl	80043f8 <HAL_Delay>
                return;
 8002004:	e025      	b.n	8002052 <adduid+0xca>
            }
            else
            {
                CLCD_I2C_Clear(&LCD1);
 8002006:	4816      	ldr	r0, [pc, #88]	@ (8002060 <adduid+0xd8>)
 8002008:	f7fe f9e8 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	4813      	ldr	r0, [pc, #76]	@ (8002060 <adduid+0xd8>)
 8002012:	f7fe f979 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002016:	4916      	ldr	r1, [pc, #88]	@ (8002070 <adduid+0xe8>)
 8002018:	4811      	ldr	r0, [pc, #68]	@ (8002060 <adduid+0xd8>)
 800201a:	f7fe f9c8 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(3);
 800201e:	2003      	movs	r0, #3
 8002020:	f001 fcdc 	bl	80039dc <buzzer>
                HAL_Delay(1000);
 8002024:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002028:	f002 f9e6 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <adduid+0xd0>)
 800202e:	490b      	ldr	r1, [pc, #44]	@ (800205c <adduid+0xd4>)
 8002030:	480b      	ldr	r0, [pc, #44]	@ (8002060 <adduid+0xd8>)
 8002032:	f7fe f9e3 	bl	80003fc <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8002036:	2064      	movs	r0, #100	@ 0x64
 8002038:	f7fe fb3a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800203c:	4603      	mov	r3, r0
 800203e:	2b23      	cmp	r3, #35	@ 0x23
 8002040:	d103      	bne.n	800204a <adduid+0xc2>
        {
            buzzer(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f001 fcca 	bl	80039dc <buzzer>
            return;
 8002048:	e003      	b.n	8002052 <adduid+0xca>
    while (exitmenu)
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <adduid+0xec>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1a7      	bne.n	8001fa2 <adduid+0x1a>
        }
    }
}
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800dbfc 	.word	0x0800dbfc
 800205c:	0800ddd4 	.word	0x0800ddd4
 8002060:	200003d8 	.word	0x200003d8
 8002064:	200003e4 	.word	0x200003e4
 8002068:	20000024 	.word	0x20000024
 800206c:	0800dde0 	.word	0x0800dde0
 8002070:	0800ddf0 	.word	0x0800ddf0
 8002074:	20000020 	.word	0x20000020

08002078 <checkthe>:

void checkthe(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
    exitmenu = 30;
 800207e:	4b42      	ldr	r3, [pc, #264]	@ (8002188 <checkthe+0x110>)
 8002080:	221e      	movs	r2, #30
 8002082:	701a      	strb	r2, [r3, #0]
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002084:	4a41      	ldr	r2, [pc, #260]	@ (800218c <checkthe+0x114>)
 8002086:	4942      	ldr	r1, [pc, #264]	@ (8002190 <checkthe+0x118>)
 8002088:	4842      	ldr	r0, [pc, #264]	@ (8002194 <checkthe+0x11c>)
 800208a:	f7fe f9b7 	bl	80003fc <CLCD_I2C_Display>
    while (exitmenu)
 800208e:	e074      	b.n	800217a <checkthe+0x102>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8002090:	4841      	ldr	r0, [pc, #260]	@ (8002198 <checkthe+0x120>)
 8002092:	f001 fd19 	bl	8003ac8 <TM_MFRC522_Check>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d164      	bne.n	8002166 <checkthe+0xee>
        {
            if (CheckListUID(CardID) == 0)
 800209c:	483e      	ldr	r0, [pc, #248]	@ (8002198 <checkthe+0x120>)
 800209e:	f7ff ff11 	bl	8001ec4 <CheckListUID>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11c      	bne.n	80020e2 <checkthe+0x6a>
            {
                CLCD_I2C_Clear(&LCD1);
 80020a8:	483a      	ldr	r0, [pc, #232]	@ (8002194 <checkthe+0x11c>)
 80020aa:	f7fe f997 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	4838      	ldr	r0, [pc, #224]	@ (8002194 <checkthe+0x11c>)
 80020b4:	f7fe f928 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 80020b8:	4938      	ldr	r1, [pc, #224]	@ (800219c <checkthe+0x124>)
 80020ba:	4836      	ldr	r0, [pc, #216]	@ (8002194 <checkthe+0x11c>)
 80020bc:	f7fe f977 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(3);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f001 fc8b 	bl	80039dc <buzzer>
                HAL_Delay(1000);
 80020c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ca:	f002 f995 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80020ce:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <checkthe+0x114>)
 80020d0:	492f      	ldr	r1, [pc, #188]	@ (8002190 <checkthe+0x118>)
 80020d2:	4830      	ldr	r0, [pc, #192]	@ (8002194 <checkthe+0x11c>)
 80020d4:	f7fe f992 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 80020d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020dc:	f002 f98c 	bl	80043f8 <HAL_Delay>
 80020e0:	e041      	b.n	8002166 <checkthe+0xee>
            }
            else
            {
                uint8_t key = CheckListUID(CardID);
 80020e2:	482d      	ldr	r0, [pc, #180]	@ (8002198 <checkthe+0x120>)
 80020e4:	f7ff feee 	bl	8001ec4 <CheckListUID>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]
                uint8_t key2 = key & 0x7F;
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020f2:	75bb      	strb	r3, [r7, #22]
                uint8_t key1 = (key & 0x80) >> 7;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	09db      	lsrs	r3, r3, #7
 80020f8:	757b      	strb	r3, [r7, #21]
                CLCD_I2C_Clear(&LCD1);
 80020fa:	4826      	ldr	r0, [pc, #152]	@ (8002194 <checkthe+0x11c>)
 80020fc:	f7fe f96e 	bl	80003dc <CLCD_I2C_Clear>
                buzzer(1);
 8002100:	2001      	movs	r0, #1
 8002102:	f001 fc6b 	bl	80039dc <buzzer>
                switch (key1)
 8002106:	7d7b      	ldrb	r3, [r7, #21]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <checkthe+0xa8>
                {
                case 0:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	4820      	ldr	r0, [pc, #128]	@ (8002194 <checkthe+0x11c>)
 8002112:	f7fe f8f9 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8002116:	4922      	ldr	r1, [pc, #136]	@ (80021a0 <checkthe+0x128>)
 8002118:	481e      	ldr	r0, [pc, #120]	@ (8002194 <checkthe+0x11c>)
 800211a:	f7fe f948 	bl	80003ae <CLCD_I2C_WriteString>
                    break;
 800211e:	e009      	b.n	8002134 <checkthe+0xbc>
                default:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	481b      	ldr	r0, [pc, #108]	@ (8002194 <checkthe+0x11c>)
 8002126:	f7fe f8ef 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "USER CARD");
 800212a:	491e      	ldr	r1, [pc, #120]	@ (80021a4 <checkthe+0x12c>)
 800212c:	4819      	ldr	r0, [pc, #100]	@ (8002194 <checkthe+0x11c>)
 800212e:	f7fe f93e 	bl	80003ae <CLCD_I2C_WriteString>
                    break;
 8002132:	bf00      	nop
                }
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "Card ID: %d", key2);
 8002134:	7dbb      	ldrb	r3, [r7, #22]
 8002136:	1d38      	adds	r0, r7, #4
 8002138:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <checkthe+0x130>)
 800213a:	2110      	movs	r1, #16
 800213c:	f00b f800 	bl	800d140 <sniprintf>
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	2100      	movs	r1, #0
 8002144:	4813      	ldr	r0, [pc, #76]	@ (8002194 <checkthe+0x11c>)
 8002146:	f7fe f8df 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, buffer);
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4811      	ldr	r0, [pc, #68]	@ (8002194 <checkthe+0x11c>)
 8002150:	f7fe f92d 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8002154:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002158:	f002 f94e 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <checkthe+0x114>)
 800215e:	4913      	ldr	r1, [pc, #76]	@ (80021ac <checkthe+0x134>)
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <checkthe+0x11c>)
 8002162:	f7fe f94b 	bl	80003fc <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8002166:	2064      	movs	r0, #100	@ 0x64
 8002168:	f7fe faa2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800216c:	4603      	mov	r3, r0
 800216e:	2b23      	cmp	r3, #35	@ 0x23
 8002170:	d103      	bne.n	800217a <checkthe+0x102>
        {
            buzzer(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f001 fc32 	bl	80039dc <buzzer>
            return;
 8002178:	e003      	b.n	8002182 <checkthe+0x10a>
    while (exitmenu)
 800217a:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <checkthe+0x110>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d186      	bne.n	8002090 <checkthe+0x18>
        }
    }
}
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000020 	.word	0x20000020
 800218c:	0800dbfc 	.word	0x0800dbfc
 8002190:	0800ddd4 	.word	0x0800ddd4
 8002194:	200003d8 	.word	0x200003d8
 8002198:	200003e4 	.word	0x200003e4
 800219c:	0800de00 	.word	0x0800de00
 80021a0:	0800de10 	.word	0x0800de10
 80021a4:	0800de1c 	.word	0x0800de1c
 80021a8:	0800de28 	.word	0x0800de28
 80021ac:	0800dd54 	.word	0x0800dd54

080021b0 <CheckKey>:

uint32_t CheckKey(uint8_t key)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
    uint32_t pt = StartAddressUID;
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <CheckKey+0x58>)
 80021bc:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 80021be:	e015      	b.n	80021ec <CheckKey+0x3c>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3306      	adds	r3, #6
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fd9e 	bl	8000d06 <Flash_Read_2Byte>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d107      	bne.n	80021e6 <CheckKey+0x36>
        {
            if (*(uint8_t *)(pt + 5) == key)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3305      	adds	r3, #5
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	79fa      	ldrb	r2, [r7, #7]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d101      	bne.n	80021e6 <CheckKey+0x36>
                return pt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	e00b      	b.n	80021fe <CheckKey+0x4e>
        }
        pt = pt + 8;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3308      	adds	r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3305      	adds	r3, #5
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd7c 	bl	8000cee <Flash_Read_Byte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2bff      	cmp	r3, #255	@ 0xff
 80021fa:	d1e1      	bne.n	80021c0 <CheckKey+0x10>
    }
    return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	0800f000 	.word	0x0800f000

0800220c <FACEID>:

void FACEID(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
	buzzer(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f001 fbe2 	bl	80039dc <buzzer>
	exitmenu = Delaymenu;
 8002218:	4bae      	ldr	r3, [pc, #696]	@ (80024d4 <FACEID+0x2c8>)
 800221a:	2214      	movs	r2, #20
 800221c:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800221e:	23ff      	movs	r3, #255	@ 0xff
 8002220:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 8002222:	4aad      	ldr	r2, [pc, #692]	@ (80024d8 <FACEID+0x2cc>)
 8002224:	49ad      	ldr	r1, [pc, #692]	@ (80024dc <FACEID+0x2d0>)
 8002226:	48ae      	ldr	r0, [pc, #696]	@ (80024e0 <FACEID+0x2d4>)
 8002228:	f7fe f8e8 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 800222c:	e378      	b.n	8002920 <FACEID+0x714>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800222e:	200a      	movs	r0, #10
 8002230:	f7fe fa3e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002234:	4603      	mov	r3, r0
 8002236:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 8002238:	7a3b      	ldrb	r3, [r7, #8]
 800223a:	2b2a      	cmp	r3, #42	@ 0x2a
 800223c:	d127      	bne.n	800228e <FACEID+0x82>
		{
			buzzer(1);
 800223e:	2001      	movs	r0, #1
 8002240:	f001 fbcc 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 8002244:	4ba3      	ldr	r3, [pc, #652]	@ (80024d4 <FACEID+0x2c8>)
 8002246:	2214      	movs	r2, #20
 8002248:	701a      	strb	r2, [r3, #0]
			status++;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d801      	bhi.n	800225a <FACEID+0x4e>
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	e000      	b.n	800225c <FACEID+0x50>
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
			switch (status)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <FACEID+0x5e>
 8002264:	2b01      	cmp	r3, #1
 8002266:	d006      	beq.n	8002276 <FACEID+0x6a>
 8002268:	e00b      	b.n	8002282 <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800226a:	4a9e      	ldr	r2, [pc, #632]	@ (80024e4 <FACEID+0x2d8>)
 800226c:	499b      	ldr	r1, [pc, #620]	@ (80024dc <FACEID+0x2d0>)
 800226e:	489c      	ldr	r0, [pc, #624]	@ (80024e0 <FACEID+0x2d4>)
 8002270:	f7fe f8c4 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002274:	e00b      	b.n	800228e <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002276:	4a9c      	ldr	r2, [pc, #624]	@ (80024e8 <FACEID+0x2dc>)
 8002278:	4998      	ldr	r1, [pc, #608]	@ (80024dc <FACEID+0x2d0>)
 800227a:	4899      	ldr	r0, [pc, #612]	@ (80024e0 <FACEID+0x2d4>)
 800227c:	f7fe f8be 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002280:	e005      	b.n	800228e <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002282:	4a9a      	ldr	r2, [pc, #616]	@ (80024ec <FACEID+0x2e0>)
 8002284:	4995      	ldr	r1, [pc, #596]	@ (80024dc <FACEID+0x2d0>)
 8002286:	4896      	ldr	r0, [pc, #600]	@ (80024e0 <FACEID+0x2d4>)
 8002288:	f7fe f8b8 	bl	80003fc <CLCD_I2C_Display>
				break;
 800228c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 800228e:	7a3b      	ldrb	r3, [r7, #8]
 8002290:	2b23      	cmp	r3, #35	@ 0x23
 8002292:	f040 8345 	bne.w	8002920 <FACEID+0x714>
		{
			buzzer(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f001 fba0 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 800229c:	4b8d      	ldr	r3, [pc, #564]	@ (80024d4 <FACEID+0x2c8>)
 800229e:	2214      	movs	r2, #20
 80022a0:	701a      	strb	r2, [r3, #0]
			switch (status)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <FACEID+0xa4>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f000 813f 	beq.w	800252c <FACEID+0x320>
 80022ae:	e333      	b.n	8002918 <FACEID+0x70c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80022b0:	4a8f      	ldr	r2, [pc, #572]	@ (80024f0 <FACEID+0x2e4>)
 80022b2:	4990      	ldr	r1, [pc, #576]	@ (80024f4 <FACEID+0x2e8>)
 80022b4:	488a      	ldr	r0, [pc, #552]	@ (80024e0 <FACEID+0x2d4>)
 80022b6:	f7fe f8a1 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 80022c2:	e0fc      	b.n	80024be <FACEID+0x2b2>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80022c4:	200a      	movs	r0, #10
 80022c6:	f7fe f9f3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80022ca:	4603      	mov	r3, r0
 80022cc:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 80022ce:	4b81      	ldr	r3, [pc, #516]	@ (80024d4 <FACEID+0x2c8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <FACEID+0xda>
					{
						CLCD_I2C_Clear(&LCD1);
 80022d6:	4882      	ldr	r0, [pc, #520]	@ (80024e0 <FACEID+0x2d4>)
 80022d8:	f7fe f880 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80022dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022e0:	f002 f88a 	bl	80043f8 <HAL_Delay>
						return;
 80022e4:	e324      	b.n	8002930 <FACEID+0x724>
					}
					if (key_pressed == '*')
 80022e6:	7a3b      	ldrb	r3, [r7, #8]
 80022e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ea:	d13d      	bne.n	8002368 <FACEID+0x15c>
					{
						buzzer(1);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f001 fb75 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 80022f2:	4b78      	ldr	r3, [pc, #480]	@ (80024d4 <FACEID+0x2c8>)
 80022f4:	2214      	movs	r2, #20
 80022f6:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d801      	bhi.n	8002308 <FACEID+0xfc>
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	e000      	b.n	800230a <FACEID+0xfe>
 8002308:	2300      	movs	r3, #0
 800230a:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	3b01      	subs	r3, #1
 8002310:	2b03      	cmp	r3, #3
 8002312:	d823      	bhi.n	800235c <FACEID+0x150>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <FACEID+0x110>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800232d 	.word	0x0800232d
 8002320:	08002339 	.word	0x08002339
 8002324:	08002345 	.word	0x08002345
 8002328:	08002351 	.word	0x08002351
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 800232c:	4a72      	ldr	r2, [pc, #456]	@ (80024f8 <FACEID+0x2ec>)
 800232e:	4973      	ldr	r1, [pc, #460]	@ (80024fc <FACEID+0x2f0>)
 8002330:	486b      	ldr	r0, [pc, #428]	@ (80024e0 <FACEID+0x2d4>)
 8002332:	f7fe f863 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002336:	e017      	b.n	8002368 <FACEID+0x15c>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002338:	4a71      	ldr	r2, [pc, #452]	@ (8002500 <FACEID+0x2f4>)
 800233a:	4970      	ldr	r1, [pc, #448]	@ (80024fc <FACEID+0x2f0>)
 800233c:	4868      	ldr	r0, [pc, #416]	@ (80024e0 <FACEID+0x2d4>)
 800233e:	f7fe f85d 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002342:	e011      	b.n	8002368 <FACEID+0x15c>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002344:	4a6f      	ldr	r2, [pc, #444]	@ (8002504 <FACEID+0x2f8>)
 8002346:	496d      	ldr	r1, [pc, #436]	@ (80024fc <FACEID+0x2f0>)
 8002348:	4865      	ldr	r0, [pc, #404]	@ (80024e0 <FACEID+0x2d4>)
 800234a:	f7fe f857 	bl	80003fc <CLCD_I2C_Display>
							break;
 800234e:	e00b      	b.n	8002368 <FACEID+0x15c>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002350:	4a6d      	ldr	r2, [pc, #436]	@ (8002508 <FACEID+0x2fc>)
 8002352:	496a      	ldr	r1, [pc, #424]	@ (80024fc <FACEID+0x2f0>)
 8002354:	4862      	ldr	r0, [pc, #392]	@ (80024e0 <FACEID+0x2d4>)
 8002356:	f7fe f851 	bl	80003fc <CLCD_I2C_Display>
							break;
 800235a:	e005      	b.n	8002368 <FACEID+0x15c>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 800235c:	4a63      	ldr	r2, [pc, #396]	@ (80024ec <FACEID+0x2e0>)
 800235e:	4967      	ldr	r1, [pc, #412]	@ (80024fc <FACEID+0x2f0>)
 8002360:	485f      	ldr	r0, [pc, #380]	@ (80024e0 <FACEID+0x2d4>)
 8002362:	f7fe f84b 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002366:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002368:	7a3b      	ldrb	r3, [r7, #8]
 800236a:	2b23      	cmp	r3, #35	@ 0x23
 800236c:	f040 80a7 	bne.w	80024be <FACEID+0x2b2>
					{
						buzzer(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f001 fb33 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 8002376:	4b57      	ldr	r3, [pc, #348]	@ (80024d4 <FACEID+0x2c8>)
 8002378:	2214      	movs	r2, #20
 800237a:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002380:	7bbb      	ldrb	r3, [r7, #14]
 8002382:	3b01      	subs	r3, #1
 8002384:	2b03      	cmp	r3, #3
 8002386:	f200 8097 	bhi.w	80024b8 <FACEID+0x2ac>
 800238a:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <FACEID+0x184>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023e7 	.word	0x080023e7
 8002398:	0800242d 	.word	0x0800242d
 800239c:	08002473 	.word	0x08002473
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd98 	bl	8002ed8 <checkfaceid>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d011      	beq.n	80023d2 <FACEID+0x1c6>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 80023ae:	4a57      	ldr	r2, [pc, #348]	@ (800250c <FACEID+0x300>)
 80023b0:	4957      	ldr	r1, [pc, #348]	@ (8002510 <FACEID+0x304>)
 80023b2:	484b      	ldr	r0, [pc, #300]	@ (80024e0 <FACEID+0x2d4>)
 80023b4:	f7fe f822 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f001 fb0f 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 80023be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023c2:	f002 f819 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80023c6:	4a4c      	ldr	r2, [pc, #304]	@ (80024f8 <FACEID+0x2ec>)
 80023c8:	494c      	ldr	r1, [pc, #304]	@ (80024fc <FACEID+0x2f0>)
 80023ca:	4845      	ldr	r0, [pc, #276]	@ (80024e0 <FACEID+0x2d4>)
 80023cc:	f7fe f816 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 80023d0:	e075      	b.n	80024be <FACEID+0x2b2>
								addface(keyadd1);
 80023d2:	79bb      	ldrb	r3, [r7, #6]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fcbd 	bl	8002d54 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80023da:	4a47      	ldr	r2, [pc, #284]	@ (80024f8 <FACEID+0x2ec>)
 80023dc:	4947      	ldr	r1, [pc, #284]	@ (80024fc <FACEID+0x2f0>)
 80023de:	4840      	ldr	r0, [pc, #256]	@ (80024e0 <FACEID+0x2d4>)
 80023e0:	f7fe f80c 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023e4:	e06b      	b.n	80024be <FACEID+0x2b2>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fd75 	bl	8002ed8 <checkfaceid>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <FACEID+0x20c>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 80023f4:	4a47      	ldr	r2, [pc, #284]	@ (8002514 <FACEID+0x308>)
 80023f6:	4948      	ldr	r1, [pc, #288]	@ (8002518 <FACEID+0x30c>)
 80023f8:	4839      	ldr	r0, [pc, #228]	@ (80024e0 <FACEID+0x2d4>)
 80023fa:	f7fd ffff 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80023fe:	2003      	movs	r0, #3
 8002400:	f001 faec 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 8002404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002408:	f001 fff6 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 800240c:	4a3c      	ldr	r2, [pc, #240]	@ (8002500 <FACEID+0x2f4>)
 800240e:	493b      	ldr	r1, [pc, #236]	@ (80024fc <FACEID+0x2f0>)
 8002410:	4833      	ldr	r0, [pc, #204]	@ (80024e0 <FACEID+0x2d4>)
 8002412:	f7fd fff3 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 8002416:	e052      	b.n	80024be <FACEID+0x2b2>
								addface(keyadd1);
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fc9a 	bl	8002d54 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002420:	4a37      	ldr	r2, [pc, #220]	@ (8002500 <FACEID+0x2f4>)
 8002422:	4936      	ldr	r1, [pc, #216]	@ (80024fc <FACEID+0x2f0>)
 8002424:	482e      	ldr	r0, [pc, #184]	@ (80024e0 <FACEID+0x2d4>)
 8002426:	f7fd ffe9 	bl	80003fc <CLCD_I2C_Display>
							break;
 800242a:	e048      	b.n	80024be <FACEID+0x2b2>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fd52 	bl	8002ed8 <checkfaceid>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d011      	beq.n	800245e <FACEID+0x252>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 800243a:	4a38      	ldr	r2, [pc, #224]	@ (800251c <FACEID+0x310>)
 800243c:	4938      	ldr	r1, [pc, #224]	@ (8002520 <FACEID+0x314>)
 800243e:	4828      	ldr	r0, [pc, #160]	@ (80024e0 <FACEID+0x2d4>)
 8002440:	f7fd ffdc 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002444:	2003      	movs	r0, #3
 8002446:	f001 fac9 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 800244a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800244e:	f001 ffd3 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002452:	4a2c      	ldr	r2, [pc, #176]	@ (8002504 <FACEID+0x2f8>)
 8002454:	4929      	ldr	r1, [pc, #164]	@ (80024fc <FACEID+0x2f0>)
 8002456:	4822      	ldr	r0, [pc, #136]	@ (80024e0 <FACEID+0x2d4>)
 8002458:	f7fd ffd0 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 800245c:	e02f      	b.n	80024be <FACEID+0x2b2>
								addface(keyadd1);
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fc77 	bl	8002d54 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002466:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <FACEID+0x2f8>)
 8002468:	4924      	ldr	r1, [pc, #144]	@ (80024fc <FACEID+0x2f0>)
 800246a:	481d      	ldr	r0, [pc, #116]	@ (80024e0 <FACEID+0x2d4>)
 800246c:	f7fd ffc6 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002470:	e025      	b.n	80024be <FACEID+0x2b2>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fd2f 	bl	8002ed8 <checkfaceid>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d011      	beq.n	80024a4 <FACEID+0x298>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <FACEID+0x318>)
 8002482:	4929      	ldr	r1, [pc, #164]	@ (8002528 <FACEID+0x31c>)
 8002484:	4816      	ldr	r0, [pc, #88]	@ (80024e0 <FACEID+0x2d4>)
 8002486:	f7fd ffb9 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 800248a:	2003      	movs	r0, #3
 800248c:	f001 faa6 	bl	80039dc <buzzer>
								HAL_Delay(1000);
 8002490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002494:	f001 ffb0 	bl	80043f8 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <FACEID+0x2fc>)
 800249a:	4918      	ldr	r1, [pc, #96]	@ (80024fc <FACEID+0x2f0>)
 800249c:	4810      	ldr	r0, [pc, #64]	@ (80024e0 <FACEID+0x2d4>)
 800249e:	f7fd ffad 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80024a2:	e00c      	b.n	80024be <FACEID+0x2b2>
								addface(keyadd1);
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fc54 	bl	8002d54 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80024ac:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <FACEID+0x2fc>)
 80024ae:	4913      	ldr	r1, [pc, #76]	@ (80024fc <FACEID+0x2f0>)
 80024b0:	480b      	ldr	r0, [pc, #44]	@ (80024e0 <FACEID+0x2d4>)
 80024b2:	f7fd ffa3 	bl	80003fc <CLCD_I2C_Display>
							break;
 80024b6:	e002      	b.n	80024be <FACEID+0x2b2>
						default:
							back = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	737b      	strb	r3, [r7, #13]
							break;
 80024bc:	bf00      	nop
				while (back == 1)
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f43f aeff 	beq.w	80022c4 <FACEID+0xb8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80024c6:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <FACEID+0x2d8>)
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <FACEID+0x2d0>)
 80024ca:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <FACEID+0x2d4>)
 80024cc:	f7fd ff96 	bl	80003fc <CLCD_I2C_Display>
				break;
 80024d0:	e226      	b.n	8002920 <FACEID+0x714>
 80024d2:	bf00      	nop
 80024d4:	20000020 	.word	0x20000020
 80024d8:	0800dbb0 	.word	0x0800dbb0
 80024dc:	0800de34 	.word	0x0800de34
 80024e0:	200003d8 	.word	0x200003d8
 80024e4:	0800de48 	.word	0x0800de48
 80024e8:	0800de58 	.word	0x0800de58
 80024ec:	0800dbfc 	.word	0x0800dbfc
 80024f0:	0800dc04 	.word	0x0800dc04
 80024f4:	0800dc10 	.word	0x0800dc10
 80024f8:	0800de6c 	.word	0x0800de6c
 80024fc:	0800de78 	.word	0x0800de78
 8002500:	0800de84 	.word	0x0800de84
 8002504:	0800de90 	.word	0x0800de90
 8002508:	0800de9c 	.word	0x0800de9c
 800250c:	0800dea8 	.word	0x0800dea8
 8002510:	0800debc 	.word	0x0800debc
 8002514:	0800decc 	.word	0x0800decc
 8002518:	0800dee0 	.word	0x0800dee0
 800251c:	0800def0 	.word	0x0800def0
 8002520:	0800df04 	.word	0x0800df04
 8002524:	0800df14 	.word	0x0800df14
 8002528:	0800df28 	.word	0x0800df28
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800252c:	4aa8      	ldr	r2, [pc, #672]	@ (80027d0 <FACEID+0x5c4>)
 800252e:	49a9      	ldr	r1, [pc, #676]	@ (80027d4 <FACEID+0x5c8>)
 8002530:	48a9      	ldr	r0, [pc, #676]	@ (80027d8 <FACEID+0x5cc>)
 8002532:	f7fd ff63 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 800253e:	e1e1      	b.n	8002904 <FACEID+0x6f8>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002540:	200a      	movs	r0, #10
 8002542:	f7fe f8b5 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002546:	4603      	mov	r3, r0
 8002548:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800254a:	4ba4      	ldr	r3, [pc, #656]	@ (80027dc <FACEID+0x5d0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <FACEID+0x356>
					{
						CLCD_I2C_Clear(&LCD1);
 8002552:	48a1      	ldr	r0, [pc, #644]	@ (80027d8 <FACEID+0x5cc>)
 8002554:	f7fd ff42 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002558:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800255c:	f001 ff4c 	bl	80043f8 <HAL_Delay>
						return;
 8002560:	e1e6      	b.n	8002930 <FACEID+0x724>
					}
					if (key_pressed == '*')
 8002562:	7a3b      	ldrb	r3, [r7, #8]
 8002564:	2b2a      	cmp	r3, #42	@ 0x2a
 8002566:	d127      	bne.n	80025b8 <FACEID+0x3ac>
					{
						buzzer(1);
 8002568:	2001      	movs	r0, #1
 800256a:	f001 fa37 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 800256e:	4b9b      	ldr	r3, [pc, #620]	@ (80027dc <FACEID+0x5d0>)
 8002570:	2214      	movs	r2, #20
 8002572:	701a      	strb	r2, [r3, #0]
						statusrm++;
 8002574:	7b3b      	ldrb	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d801      	bhi.n	8002584 <FACEID+0x378>
 8002580:	7b3b      	ldrb	r3, [r7, #12]
 8002582:	e000      	b.n	8002586 <FACEID+0x37a>
 8002584:	2300      	movs	r3, #0
 8002586:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 8002588:	7b3b      	ldrb	r3, [r7, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <FACEID+0x388>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d006      	beq.n	80025a0 <FACEID+0x394>
 8002592:	e00b      	b.n	80025ac <FACEID+0x3a0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002594:	4a92      	ldr	r2, [pc, #584]	@ (80027e0 <FACEID+0x5d4>)
 8002596:	4993      	ldr	r1, [pc, #588]	@ (80027e4 <FACEID+0x5d8>)
 8002598:	488f      	ldr	r0, [pc, #572]	@ (80027d8 <FACEID+0x5cc>)
 800259a:	f7fd ff2f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800259e:	e00b      	b.n	80025b8 <FACEID+0x3ac>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80025a0:	4a91      	ldr	r2, [pc, #580]	@ (80027e8 <FACEID+0x5dc>)
 80025a2:	4990      	ldr	r1, [pc, #576]	@ (80027e4 <FACEID+0x5d8>)
 80025a4:	488c      	ldr	r0, [pc, #560]	@ (80027d8 <FACEID+0x5cc>)
 80025a6:	f7fd ff29 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025aa:	e005      	b.n	80025b8 <FACEID+0x3ac>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80025ac:	4a8f      	ldr	r2, [pc, #572]	@ (80027ec <FACEID+0x5e0>)
 80025ae:	498d      	ldr	r1, [pc, #564]	@ (80027e4 <FACEID+0x5d8>)
 80025b0:	4889      	ldr	r0, [pc, #548]	@ (80027d8 <FACEID+0x5cc>)
 80025b2:	f7fd ff23 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025b6:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80025b8:	7a3b      	ldrb	r3, [r7, #8]
 80025ba:	2b23      	cmp	r3, #35	@ 0x23
 80025bc:	f040 81a2 	bne.w	8002904 <FACEID+0x6f8>
					{
						buzzer(1);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f001 fa0b 	bl	80039dc <buzzer>
						exitmenu = Delaymenu;
 80025c6:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <FACEID+0x5d0>)
 80025c8:	2214      	movs	r2, #20
 80025ca:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d003      	beq.n	80025da <FACEID+0x3ce>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	f000 8161 	beq.w	800289a <FACEID+0x68e>
 80025d8:	e191      	b.n	80028fe <FACEID+0x6f2>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80025da:	4a7d      	ldr	r2, [pc, #500]	@ (80027d0 <FACEID+0x5c4>)
 80025dc:	497d      	ldr	r1, [pc, #500]	@ (80027d4 <FACEID+0x5c8>)
 80025de:	487e      	ldr	r0, [pc, #504]	@ (80027d8 <FACEID+0x5cc>)
 80025e0:	f7fd ff0c 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 80025ec:	e14b      	b.n	8002886 <FACEID+0x67a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80025ee:	200a      	movs	r0, #10
 80025f0:	f7fe f85e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80025f4:	4603      	mov	r3, r0
 80025f6:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 80025f8:	4b78      	ldr	r3, [pc, #480]	@ (80027dc <FACEID+0x5d0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <FACEID+0x404>
								{
									CLCD_I2C_Clear(&LCD1);
 8002600:	4875      	ldr	r0, [pc, #468]	@ (80027d8 <FACEID+0x5cc>)
 8002602:	f7fd feeb 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8002606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260a:	f001 fef5 	bl	80043f8 <HAL_Delay>
									return;
 800260e:	e18f      	b.n	8002930 <FACEID+0x724>
								}
								if (key_pressed == '*')
 8002610:	7a3b      	ldrb	r3, [r7, #8]
 8002612:	2b2a      	cmp	r3, #42	@ 0x2a
 8002614:	d13c      	bne.n	8002690 <FACEID+0x484>
								{
									buzzer(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f001 f9e0 	bl	80039dc <buzzer>
									exitmenu = Delaymenu;
 800261c:	4b6f      	ldr	r3, [pc, #444]	@ (80027dc <FACEID+0x5d0>)
 800261e:	2214      	movs	r2, #20
 8002620:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 8002622:	7abb      	ldrb	r3, [r7, #10]
 8002624:	3301      	adds	r3, #1
 8002626:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 8002628:	7abb      	ldrb	r3, [r7, #10]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d801      	bhi.n	8002632 <FACEID+0x426>
 800262e:	7abb      	ldrb	r3, [r7, #10]
 8002630:	e000      	b.n	8002634 <FACEID+0x428>
 8002632:	2300      	movs	r3, #0
 8002634:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 8002636:	7abb      	ldrb	r3, [r7, #10]
 8002638:	3b01      	subs	r3, #1
 800263a:	2b03      	cmp	r3, #3
 800263c:	d822      	bhi.n	8002684 <FACEID+0x478>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <FACEID+0x438>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	08002661 	.word	0x08002661
 800264c:	0800266d 	.word	0x0800266d
 8002650:	08002679 	.word	0x08002679
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002654:	4a66      	ldr	r2, [pc, #408]	@ (80027f0 <FACEID+0x5e4>)
 8002656:	4967      	ldr	r1, [pc, #412]	@ (80027f4 <FACEID+0x5e8>)
 8002658:	485f      	ldr	r0, [pc, #380]	@ (80027d8 <FACEID+0x5cc>)
 800265a:	f7fd fecf 	bl	80003fc <CLCD_I2C_Display>
										break;
 800265e:	e017      	b.n	8002690 <FACEID+0x484>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002660:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <FACEID+0x5ec>)
 8002662:	4964      	ldr	r1, [pc, #400]	@ (80027f4 <FACEID+0x5e8>)
 8002664:	485c      	ldr	r0, [pc, #368]	@ (80027d8 <FACEID+0x5cc>)
 8002666:	f7fd fec9 	bl	80003fc <CLCD_I2C_Display>
										break;
 800266a:	e011      	b.n	8002690 <FACEID+0x484>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <FACEID+0x5f0>)
 800266e:	4961      	ldr	r1, [pc, #388]	@ (80027f4 <FACEID+0x5e8>)
 8002670:	4859      	ldr	r0, [pc, #356]	@ (80027d8 <FACEID+0x5cc>)
 8002672:	f7fd fec3 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002676:	e00b      	b.n	8002690 <FACEID+0x484>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002678:	4a61      	ldr	r2, [pc, #388]	@ (8002800 <FACEID+0x5f4>)
 800267a:	495e      	ldr	r1, [pc, #376]	@ (80027f4 <FACEID+0x5e8>)
 800267c:	4856      	ldr	r0, [pc, #344]	@ (80027d8 <FACEID+0x5cc>)
 800267e:	f7fd febd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002682:	e005      	b.n	8002690 <FACEID+0x484>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 8002684:	4a5f      	ldr	r2, [pc, #380]	@ (8002804 <FACEID+0x5f8>)
 8002686:	495b      	ldr	r1, [pc, #364]	@ (80027f4 <FACEID+0x5e8>)
 8002688:	4853      	ldr	r0, [pc, #332]	@ (80027d8 <FACEID+0x5cc>)
 800268a:	f7fd feb7 	bl	80003fc <CLCD_I2C_Display>
										break;
 800268e:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 8002690:	7a3b      	ldrb	r3, [r7, #8]
 8002692:	2b23      	cmp	r3, #35	@ 0x23
 8002694:	f040 80f7 	bne.w	8002886 <FACEID+0x67a>
								{
									buzzer(1);
 8002698:	2001      	movs	r0, #1
 800269a:	f001 f99f 	bl	80039dc <buzzer>
									exitmenu = Delaymenu;
 800269e:	4b4f      	ldr	r3, [pc, #316]	@ (80027dc <FACEID+0x5d0>)
 80026a0:	2214      	movs	r2, #20
 80026a2:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80026a4:	7abb      	ldrb	r3, [r7, #10]
 80026a6:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	f200 80e7 	bhi.w	8002880 <FACEID+0x674>
 80026b2:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <FACEID+0x4ac>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	08002721 	.word	0x08002721
 80026c0:	08002779 	.word	0x08002779
 80026c4:	08002829 	.word	0x08002829
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fc04 	bl	8002ed8 <checkfaceid>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d111      	bne.n	80026fa <FACEID+0x4ee>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 80026d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002808 <FACEID+0x5fc>)
 80026d8:	494c      	ldr	r1, [pc, #304]	@ (800280c <FACEID+0x600>)
 80026da:	483f      	ldr	r0, [pc, #252]	@ (80027d8 <FACEID+0x5cc>)
 80026dc:	f7fd fe8e 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f001 f97b 	bl	80039dc <buzzer>
											HAL_Delay(1000);
 80026e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ea:	f001 fe85 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80026ee:	4a40      	ldr	r2, [pc, #256]	@ (80027f0 <FACEID+0x5e4>)
 80026f0:	4940      	ldr	r1, [pc, #256]	@ (80027f4 <FACEID+0x5e8>)
 80026f2:	4839      	ldr	r0, [pc, #228]	@ (80027d8 <FACEID+0x5cc>)
 80026f4:	f7fd fe82 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 80026f8:	e0c5      	b.n	8002886 <FACEID+0x67a>
											removeface(keyrm1);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fb8b 	bl	8002e18 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002702:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <FACEID+0x604>)
 8002704:	4943      	ldr	r1, [pc, #268]	@ (8002814 <FACEID+0x608>)
 8002706:	4834      	ldr	r0, [pc, #208]	@ (80027d8 <FACEID+0x5cc>)
 8002708:	f7fd fe78 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800270c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002710:	f001 fe72 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002714:	4a36      	ldr	r2, [pc, #216]	@ (80027f0 <FACEID+0x5e4>)
 8002716:	4937      	ldr	r1, [pc, #220]	@ (80027f4 <FACEID+0x5e8>)
 8002718:	482f      	ldr	r0, [pc, #188]	@ (80027d8 <FACEID+0x5cc>)
 800271a:	f7fd fe6f 	bl	80003fc <CLCD_I2C_Display>
										break;
 800271e:	e0b2      	b.n	8002886 <FACEID+0x67a>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fbd8 	bl	8002ed8 <checkfaceid>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d111      	bne.n	8002752 <FACEID+0x546>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <FACEID+0x5fc>)
 8002730:	4939      	ldr	r1, [pc, #228]	@ (8002818 <FACEID+0x60c>)
 8002732:	4829      	ldr	r0, [pc, #164]	@ (80027d8 <FACEID+0x5cc>)
 8002734:	f7fd fe62 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002738:	2003      	movs	r0, #3
 800273a:	f001 f94f 	bl	80039dc <buzzer>
											HAL_Delay(1000);
 800273e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002742:	f001 fe59 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002746:	4a2c      	ldr	r2, [pc, #176]	@ (80027f8 <FACEID+0x5ec>)
 8002748:	492a      	ldr	r1, [pc, #168]	@ (80027f4 <FACEID+0x5e8>)
 800274a:	4823      	ldr	r0, [pc, #140]	@ (80027d8 <FACEID+0x5cc>)
 800274c:	f7fd fe56 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 8002750:	e099      	b.n	8002886 <FACEID+0x67a>
											removeface(keyrm1);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fb5f 	bl	8002e18 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 800275a:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <FACEID+0x604>)
 800275c:	492f      	ldr	r1, [pc, #188]	@ (800281c <FACEID+0x610>)
 800275e:	481e      	ldr	r0, [pc, #120]	@ (80027d8 <FACEID+0x5cc>)
 8002760:	f7fd fe4c 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002768:	f001 fe46 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800276c:	4a22      	ldr	r2, [pc, #136]	@ (80027f8 <FACEID+0x5ec>)
 800276e:	4921      	ldr	r1, [pc, #132]	@ (80027f4 <FACEID+0x5e8>)
 8002770:	4819      	ldr	r0, [pc, #100]	@ (80027d8 <FACEID+0x5cc>)
 8002772:	f7fd fe43 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002776:	e086      	b.n	8002886 <FACEID+0x67a>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fbac 	bl	8002ed8 <checkfaceid>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d111      	bne.n	80027aa <FACEID+0x59e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 8002786:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <FACEID+0x5fc>)
 8002788:	4925      	ldr	r1, [pc, #148]	@ (8002820 <FACEID+0x614>)
 800278a:	4813      	ldr	r0, [pc, #76]	@ (80027d8 <FACEID+0x5cc>)
 800278c:	f7fd fe36 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002790:	2003      	movs	r0, #3
 8002792:	f001 f923 	bl	80039dc <buzzer>
											HAL_Delay(1000);
 8002796:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800279a:	f001 fe2d 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 800279e:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <FACEID+0x5f0>)
 80027a0:	4914      	ldr	r1, [pc, #80]	@ (80027f4 <FACEID+0x5e8>)
 80027a2:	480d      	ldr	r0, [pc, #52]	@ (80027d8 <FACEID+0x5cc>)
 80027a4:	f7fd fe2a 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 80027a8:	e06d      	b.n	8002886 <FACEID+0x67a>
											removeface(keyrm1);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fb33 	bl	8002e18 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <FACEID+0x604>)
 80027b4:	491b      	ldr	r1, [pc, #108]	@ (8002824 <FACEID+0x618>)
 80027b6:	4808      	ldr	r0, [pc, #32]	@ (80027d8 <FACEID+0x5cc>)
 80027b8:	f7fd fe20 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80027bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027c0:	f001 fe1a 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <FACEID+0x5f0>)
 80027c6:	490b      	ldr	r1, [pc, #44]	@ (80027f4 <FACEID+0x5e8>)
 80027c8:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <FACEID+0x5cc>)
 80027ca:	f7fd fe17 	bl	80003fc <CLCD_I2C_Display>
										break;
 80027ce:	e05a      	b.n	8002886 <FACEID+0x67a>
 80027d0:	0800dc04 	.word	0x0800dc04
 80027d4:	0800dc10 	.word	0x0800dc10
 80027d8:	200003d8 	.word	0x200003d8
 80027dc:	20000020 	.word	0x20000020
 80027e0:	0800df38 	.word	0x0800df38
 80027e4:	0800df4c 	.word	0x0800df4c
 80027e8:	0800dc94 	.word	0x0800dc94
 80027ec:	0800dbfc 	.word	0x0800dbfc
 80027f0:	0800df5c 	.word	0x0800df5c
 80027f4:	0800dcb4 	.word	0x0800dcb4
 80027f8:	0800df70 	.word	0x0800df70
 80027fc:	0800df84 	.word	0x0800df84
 8002800:	0800df98 	.word	0x0800df98
 8002804:	0800dfac 	.word	0x0800dfac
 8002808:	0800dfb8 	.word	0x0800dfb8
 800280c:	0800dfc8 	.word	0x0800dfc8
 8002810:	0800dd1c 	.word	0x0800dd1c
 8002814:	0800dfd8 	.word	0x0800dfd8
 8002818:	0800dfe8 	.word	0x0800dfe8
 800281c:	0800dff8 	.word	0x0800dff8
 8002820:	0800e008 	.word	0x0800e008
 8002824:	0800e018 	.word	0x0800e018
									case 4:
										if (checkfaceid(keyrm1) == 0)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fb54 	bl	8002ed8 <checkfaceid>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d111      	bne.n	800285a <FACEID+0x64e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002836:	4a40      	ldr	r2, [pc, #256]	@ (8002938 <FACEID+0x72c>)
 8002838:	4940      	ldr	r1, [pc, #256]	@ (800293c <FACEID+0x730>)
 800283a:	4841      	ldr	r0, [pc, #260]	@ (8002940 <FACEID+0x734>)
 800283c:	f7fd fdde 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002840:	2003      	movs	r0, #3
 8002842:	f001 f8cb 	bl	80039dc <buzzer>
											HAL_Delay(1000);
 8002846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800284a:	f001 fdd5 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 800284e:	4a3d      	ldr	r2, [pc, #244]	@ (8002944 <FACEID+0x738>)
 8002850:	493d      	ldr	r1, [pc, #244]	@ (8002948 <FACEID+0x73c>)
 8002852:	483b      	ldr	r0, [pc, #236]	@ (8002940 <FACEID+0x734>)
 8002854:	f7fd fdd2 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002858:	e015      	b.n	8002886 <FACEID+0x67a>
											removeface(keyrm1);
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fadb 	bl	8002e18 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 8002862:	4a3a      	ldr	r2, [pc, #232]	@ (800294c <FACEID+0x740>)
 8002864:	493a      	ldr	r1, [pc, #232]	@ (8002950 <FACEID+0x744>)
 8002866:	4836      	ldr	r0, [pc, #216]	@ (8002940 <FACEID+0x734>)
 8002868:	f7fd fdc8 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800286c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002870:	f001 fdc2 	bl	80043f8 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002874:	4a33      	ldr	r2, [pc, #204]	@ (8002944 <FACEID+0x738>)
 8002876:	4934      	ldr	r1, [pc, #208]	@ (8002948 <FACEID+0x73c>)
 8002878:	4831      	ldr	r0, [pc, #196]	@ (8002940 <FACEID+0x734>)
 800287a:	f7fd fdbf 	bl	80003fc <CLCD_I2C_Display>
										break;
 800287e:	e002      	b.n	8002886 <FACEID+0x67a>
									default:
										backrm1 = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	727b      	strb	r3, [r7, #9]
										break;
 8002884:	bf00      	nop
							while (backrm1 == 1)
 8002886:	7a7b      	ldrb	r3, [r7, #9]
 8002888:	2b01      	cmp	r3, #1
 800288a:	f43f aeb0 	beq.w	80025ee <FACEID+0x3e2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800288e:	4a31      	ldr	r2, [pc, #196]	@ (8002954 <FACEID+0x748>)
 8002890:	4931      	ldr	r1, [pc, #196]	@ (8002958 <FACEID+0x74c>)
 8002892:	482b      	ldr	r0, [pc, #172]	@ (8002940 <FACEID+0x734>)
 8002894:	f7fd fdb2 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002898:	e034      	b.n	8002904 <FACEID+0x6f8>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 800289a:	4930      	ldr	r1, [pc, #192]	@ (800295c <FACEID+0x750>)
 800289c:	4830      	ldr	r0, [pc, #192]	@ (8002960 <FACEID+0x754>)
 800289e:	f00a fc83 	bl	800d1a8 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 80028a2:	2107      	movs	r1, #7
 80028a4:	482e      	ldr	r0, [pc, #184]	@ (8002960 <FACEID+0x754>)
 80028a6:	f009 ffe5 	bl	800c874 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80028aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002964 <FACEID+0x758>)
 80028ac:	492e      	ldr	r1, [pc, #184]	@ (8002968 <FACEID+0x75c>)
 80028ae:	4824      	ldr	r0, [pc, #144]	@ (8002940 <FACEID+0x734>)
 80028b0:	f7fd fda4 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <FACEID+0x760>)
 80028b6:	223c      	movs	r2, #60	@ 0x3c
 80028b8:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	2100      	movs	r1, #0
 80028be:	482c      	ldr	r0, [pc, #176]	@ (8002970 <FACEID+0x764>)
 80028c0:	f00a fc92 	bl	800d1e8 <memset>
							while(exitmenu != 0){
 80028c4:	e013      	b.n	80028ee <FACEID+0x6e2>
								if(Rx_Buffer[0] == 'T'){
 80028c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <FACEID+0x764>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	2b54      	cmp	r3, #84	@ 0x54
 80028ce:	d10e      	bne.n	80028ee <FACEID+0x6e2>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 80028d0:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <FACEID+0x740>)
 80028d2:	4928      	ldr	r1, [pc, #160]	@ (8002974 <FACEID+0x768>)
 80028d4:	481a      	ldr	r0, [pc, #104]	@ (8002940 <FACEID+0x734>)
 80028d6:	f7fd fd91 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 80028da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028de:	f001 fd8b 	bl	80043f8 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80028e2:	2280      	movs	r2, #128	@ 0x80
 80028e4:	2100      	movs	r1, #0
 80028e6:	4822      	ldr	r0, [pc, #136]	@ (8002970 <FACEID+0x764>)
 80028e8:	f00a fc7e 	bl	800d1e8 <memset>
									break;
 80028ec:	e003      	b.n	80028f6 <FACEID+0x6ea>
							while(exitmenu != 0){
 80028ee:	4b1f      	ldr	r3, [pc, #124]	@ (800296c <FACEID+0x760>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e7      	bne.n	80028c6 <FACEID+0x6ba>
								}
							}
							exitmenu = 0;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <FACEID+0x760>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 80028fc:	e002      	b.n	8002904 <FACEID+0x6f8>
						default:
							backrm=0;
 80028fe:	2300      	movs	r3, #0
 8002900:	72fb      	strb	r3, [r7, #11]
							break;
 8002902:	bf00      	nop
				while (backrm == 1)
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f43f ae1a 	beq.w	8002540 <FACEID+0x334>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800290c:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <FACEID+0x76c>)
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <FACEID+0x770>)
 8002910:	480b      	ldr	r0, [pc, #44]	@ (8002940 <FACEID+0x734>)
 8002912:	f7fd fd73 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002916:	e003      	b.n	8002920 <FACEID+0x714>
			default:
				exitmenu=0;
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <FACEID+0x760>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
				break;
 800291e:	bf00      	nop
	while (exitmenu )
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <FACEID+0x760>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f ac82 	bne.w	800222e <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <FACEID+0x734>)
 800292c:	f7fd fd56 	bl	80003dc <CLCD_I2C_Clear>
}
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	0800dfb8 	.word	0x0800dfb8
 800293c:	0800e028 	.word	0x0800e028
 8002940:	200003d8 	.word	0x200003d8
 8002944:	0800df98 	.word	0x0800df98
 8002948:	0800dcb4 	.word	0x0800dcb4
 800294c:	0800dd1c 	.word	0x0800dd1c
 8002950:	0800e038 	.word	0x0800e038
 8002954:	0800df38 	.word	0x0800df38
 8002958:	0800df4c 	.word	0x0800df4c
 800295c:	0800e048 	.word	0x0800e048
 8002960:	200003d0 	.word	0x200003d0
 8002964:	0800db30 	.word	0x0800db30
 8002968:	0800e050 	.word	0x0800e050
 800296c:	20000020 	.word	0x20000020
 8002970:	20000350 	.word	0x20000350
 8002974:	0800e05c 	.word	0x0800e05c
 8002978:	0800de58 	.word	0x0800de58
 800297c:	0800de34 	.word	0x0800de34

08002980 <FINGER>:
void FINGER(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	buzzer(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f001 f828 	bl	80039dc <buzzer>
	exitmenu = Delaymenu;
 800298c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <FINGER+0x108>)
 800298e:	2214      	movs	r2, #20
 8002990:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002992:	23ff      	movs	r3, #255	@ 0xff
 8002994:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 8002996:	4a3d      	ldr	r2, [pc, #244]	@ (8002a8c <FINGER+0x10c>)
 8002998:	493d      	ldr	r1, [pc, #244]	@ (8002a90 <FINGER+0x110>)
 800299a:	483e      	ldr	r0, [pc, #248]	@ (8002a94 <FINGER+0x114>)
 800299c:	f7fd fd2e 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80029a0:	e068      	b.n	8002a74 <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f7fd fe84 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80029a8:	4603      	mov	r3, r0
 80029aa:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80029b0:	d131      	bne.n	8002a16 <FINGER+0x96>
		{
			buzzer(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f001 f812 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <FINGER+0x108>)
 80029ba:	2214      	movs	r2, #20
 80029bc:	701a      	strb	r2, [r3, #0]
			status++;
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	3301      	adds	r3, #1
 80029c2:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d801      	bhi.n	80029ce <FINGER+0x4e>
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	e000      	b.n	80029d0 <FINGER+0x50>
 80029ce:	2300      	movs	r3, #0
 80029d0:	71fb      	strb	r3, [r7, #7]
			switch (status)
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d012      	beq.n	80029fe <FINGER+0x7e>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	dc16      	bgt.n	8002a0a <FINGER+0x8a>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <FINGER+0x66>
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d006      	beq.n	80029f2 <FINGER+0x72>
 80029e4:	e011      	b.n	8002a0a <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <FINGER+0x118>)
 80029e8:	4929      	ldr	r1, [pc, #164]	@ (8002a90 <FINGER+0x110>)
 80029ea:	482a      	ldr	r0, [pc, #168]	@ (8002a94 <FINGER+0x114>)
 80029ec:	f7fd fd06 	bl	80003fc <CLCD_I2C_Display>
				break;
 80029f0:	e011      	b.n	8002a16 <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 80029f2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a9c <FINGER+0x11c>)
 80029f4:	4926      	ldr	r1, [pc, #152]	@ (8002a90 <FINGER+0x110>)
 80029f6:	4827      	ldr	r0, [pc, #156]	@ (8002a94 <FINGER+0x114>)
 80029f8:	f7fd fd00 	bl	80003fc <CLCD_I2C_Display>
				break;
 80029fc:	e00b      	b.n	8002a16 <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 80029fe:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <FINGER+0x120>)
 8002a00:	4923      	ldr	r1, [pc, #140]	@ (8002a90 <FINGER+0x110>)
 8002a02:	4824      	ldr	r0, [pc, #144]	@ (8002a94 <FINGER+0x114>)
 8002a04:	f7fd fcfa 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a08:	e005      	b.n	8002a16 <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002a0a:	4a26      	ldr	r2, [pc, #152]	@ (8002aa4 <FINGER+0x124>)
 8002a0c:	4920      	ldr	r1, [pc, #128]	@ (8002a90 <FINGER+0x110>)
 8002a0e:	4821      	ldr	r0, [pc, #132]	@ (8002a94 <FINGER+0x114>)
 8002a10:	f7fd fcf4 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002a14:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002a16:	79bb      	ldrb	r3, [r7, #6]
 8002a18:	2b23      	cmp	r3, #35	@ 0x23
 8002a1a:	d12b      	bne.n	8002a74 <FINGER+0xf4>
		{
			buzzer(1);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f000 ffdd 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <FINGER+0x108>)
 8002a24:	2214      	movs	r2, #20
 8002a26:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d016      	beq.n	8002a5c <FINGER+0xdc>
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	dc1c      	bgt.n	8002a6c <FINGER+0xec>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <FINGER+0xbc>
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d008      	beq.n	8002a4c <FINGER+0xcc>
 8002a3a:	e017      	b.n	8002a6c <FINGER+0xec>
			{
			case 0:
                add_finger();
 8002a3c:	f000 fa88 	bl	8002f50 <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002a40:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <FINGER+0x118>)
 8002a42:	4913      	ldr	r1, [pc, #76]	@ (8002a90 <FINGER+0x110>)
 8002a44:	4813      	ldr	r0, [pc, #76]	@ (8002a94 <FINGER+0x114>)
 8002a46:	f7fd fcd9 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a4a:	e013      	b.n	8002a74 <FINGER+0xf4>
            case 1:
                remove_id_finger();
 8002a4c:	f000 fd5c 	bl	8003508 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <FINGER+0x11c>)
 8002a52:	490f      	ldr	r1, [pc, #60]	@ (8002a90 <FINGER+0x110>)
 8002a54:	480f      	ldr	r0, [pc, #60]	@ (8002a94 <FINGER+0x114>)
 8002a56:	f7fd fcd1 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a5a:	e00b      	b.n	8002a74 <FINGER+0xf4>
            case 2:
                remove_all_finger();
 8002a5c:	f000 fe14 	bl	8003688 <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002a60:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <FINGER+0x120>)
 8002a62:	490b      	ldr	r1, [pc, #44]	@ (8002a90 <FINGER+0x110>)
 8002a64:	480b      	ldr	r0, [pc, #44]	@ (8002a94 <FINGER+0x114>)
 8002a66:	f7fd fcc9 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a6a:	e003      	b.n	8002a74 <FINGER+0xf4>
            default:
                exitmenu = 0;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <FINGER+0x108>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
                break;
 8002a72:	bf00      	nop
	while (exitmenu )
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <FINGER+0x108>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d192      	bne.n	80029a2 <FINGER+0x22>
            }
        }
    }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000020 	.word	0x20000020
 8002a8c:	0800dbb0 	.word	0x0800dbb0
 8002a90:	0800e06c 	.word	0x0800e06c
 8002a94:	200003d8 	.word	0x200003d8
 8002a98:	0800e07c 	.word	0x0800e07c
 8002a9c:	0800e08c 	.word	0x0800e08c
 8002aa0:	0800e0a0 	.word	0x0800e0a0
 8002aa4:	0800dbfc 	.word	0x0800dbfc

08002aa8 <PASSWORD>:


void PASSWORD(void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	buzzer(1);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f000 ff94 	bl	80039dc <buzzer>
	exitmenu = Delaymenu;
 8002ab4:	4b33      	ldr	r3, [pc, #204]	@ (8002b84 <PASSWORD+0xdc>)
 8002ab6:	2214      	movs	r2, #20
 8002ab8:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002aba:	23ff      	movs	r3, #255	@ 0xff
 8002abc:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002abe:	4a32      	ldr	r2, [pc, #200]	@ (8002b88 <PASSWORD+0xe0>)
 8002ac0:	4932      	ldr	r1, [pc, #200]	@ (8002b8c <PASSWORD+0xe4>)
 8002ac2:	4833      	ldr	r0, [pc, #204]	@ (8002b90 <PASSWORD+0xe8>)
 8002ac4:	f7fd fc9a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ac8:	e052      	b.n	8002b70 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002aca:	200a      	movs	r0, #10
 8002acc:	f7fd fdf0 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002ad4:	79bb      	ldrb	r3, [r7, #6]
 8002ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ad8:	d127      	bne.n	8002b2a <PASSWORD+0x82>
		{
			buzzer(1);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 ff7e 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 8002ae0:	4b28      	ldr	r3, [pc, #160]	@ (8002b84 <PASSWORD+0xdc>)
 8002ae2:	2214      	movs	r2, #20
 8002ae4:	701a      	strb	r2, [r3, #0]
			status++;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d801      	bhi.n	8002af6 <PASSWORD+0x4e>
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	e000      	b.n	8002af8 <PASSWORD+0x50>
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <PASSWORD+0x5e>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d006      	beq.n	8002b12 <PASSWORD+0x6a>
 8002b04:	e00b      	b.n	8002b1e <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002b06:	4a23      	ldr	r2, [pc, #140]	@ (8002b94 <PASSWORD+0xec>)
 8002b08:	4920      	ldr	r1, [pc, #128]	@ (8002b8c <PASSWORD+0xe4>)
 8002b0a:	4821      	ldr	r0, [pc, #132]	@ (8002b90 <PASSWORD+0xe8>)
 8002b0c:	f7fd fc76 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b10:	e00b      	b.n	8002b2a <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <PASSWORD+0xf0>)
 8002b14:	491d      	ldr	r1, [pc, #116]	@ (8002b8c <PASSWORD+0xe4>)
 8002b16:	481e      	ldr	r0, [pc, #120]	@ (8002b90 <PASSWORD+0xe8>)
 8002b18:	f7fd fc70 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b1c:	e005      	b.n	8002b2a <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <PASSWORD+0xf4>)
 8002b20:	491a      	ldr	r1, [pc, #104]	@ (8002b8c <PASSWORD+0xe4>)
 8002b22:	481b      	ldr	r0, [pc, #108]	@ (8002b90 <PASSWORD+0xe8>)
 8002b24:	f7fd fc6a 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b28:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	2b23      	cmp	r3, #35	@ 0x23
 8002b2e:	d11f      	bne.n	8002b70 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002b30:	2001      	movs	r0, #1
 8002b32:	f000 ff53 	bl	80039dc <buzzer>
			exitmenu = Delaymenu;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <PASSWORD+0xdc>)
 8002b38:	2214      	movs	r2, #20
 8002b3a:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <PASSWORD+0xa0>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d008      	beq.n	8002b58 <PASSWORD+0xb0>
 8002b46:	e00f      	b.n	8002b68 <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002b48:	f000 fe56 	bl	80037f8 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <PASSWORD+0xec>)
 8002b4e:	490f      	ldr	r1, [pc, #60]	@ (8002b8c <PASSWORD+0xe4>)
 8002b50:	480f      	ldr	r0, [pc, #60]	@ (8002b90 <PASSWORD+0xe8>)
 8002b52:	f7fd fc53 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002b56:	e00b      	b.n	8002b70 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002b58:	f000 feb0 	bl	80038bc <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <PASSWORD+0xf0>)
 8002b5e:	490b      	ldr	r1, [pc, #44]	@ (8002b8c <PASSWORD+0xe4>)
 8002b60:	480b      	ldr	r0, [pc, #44]	@ (8002b90 <PASSWORD+0xe8>)
 8002b62:	f7fd fc4b 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002b66:	e003      	b.n	8002b70 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <PASSWORD+0xdc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
                break;
 8002b6e:	bf00      	nop
	while (exitmenu )
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <PASSWORD+0xdc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1a8      	bne.n	8002aca <PASSWORD+0x22>
            }
        }
    }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000020 	.word	0x20000020
 8002b88:	0800dbb0 	.word	0x0800dbb0
 8002b8c:	0800e0b0 	.word	0x0800e0b0
 8002b90:	200003d8 	.word	0x200003d8
 8002b94:	0800e0c4 	.word	0x0800e0c4
 8002b98:	0800e0d4 	.word	0x0800e0d4
 8002b9c:	0800dbfc 	.word	0x0800dbfc

08002ba0 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	2208      	movs	r2, #8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f7fe f8c0 	bl	8000d38 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002bb8:	7cbb      	ldrb	r3, [r7, #18]
 8002bba:	2bff      	cmp	r3, #255	@ 0xff
 8002bbc:	d001      	beq.n	8002bc2 <CheckUID+0x22>
		return 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e016      	b.n	8002bf0 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
 8002bc6:	e00f      	b.n	8002be8 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <CheckUID+0x42>
			return 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e006      	b.n	8002bf0 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	3301      	adds	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d9ec      	bls.n	8002bc8 <CheckUID+0x28>
	}
	return 1;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <removeuid>:

void removeuid(uint32_t addressrm)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3306      	adds	r3, #6
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe f836 	bl	8000c78 <Flash_Write_2Byte>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <startadd>:
void startadd(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002c18:	4a22      	ldr	r2, [pc, #136]	@ (8002ca4 <startadd+0x90>)
 8002c1a:	4923      	ldr	r1, [pc, #140]	@ (8002ca8 <startadd+0x94>)
 8002c1c:	4823      	ldr	r0, [pc, #140]	@ (8002cac <startadd+0x98>)
 8002c1e:	f7fd fbed 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 8002c22:	f000 f851 	bl	8002cc8 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c26:	4822      	ldr	r0, [pc, #136]	@ (8002cb0 <startadd+0x9c>)
 8002c28:	f000 ff4e 	bl	8003ac8 <TM_MFRC522_Check>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002c32:	481f      	ldr	r0, [pc, #124]	@ (8002cb0 <startadd+0x9c>)
 8002c34:	f7ff f946 	bl	8001ec4 <CheckListUID>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <startadd+0x4a>
				{
					CardID[5] = 0x01;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <startadd+0x9c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <startadd+0xa0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2206      	movs	r2, #6
 8002c4a:	4919      	ldr	r1, [pc, #100]	@ (8002cb0 <startadd+0x9c>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f82b 	bl	8000ca8 <Flash_Write_Array>
					AddressUID += 8;
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <startadd+0xa0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3308      	adds	r3, #8
 8002c58:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <startadd+0xa0>)
 8002c5a:	6013      	str	r3, [r2, #0]
					break;
 8002c5c:	e011      	b.n	8002c82 <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002c5e:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <startadd+0xa4>)
 8002c60:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <startadd+0xa8>)
 8002c62:	4812      	ldr	r0, [pc, #72]	@ (8002cac <startadd+0x98>)
 8002c64:	f7fd fbca 	bl	80003fc <CLCD_I2C_Display>
					buzzer(5);
 8002c68:	2005      	movs	r0, #5
 8002c6a:	f000 feb7 	bl	80039dc <buzzer>
					HAL_Delay(1000);
 8002c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c72:	f001 fbc1 	bl	80043f8 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002c76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca4 <startadd+0x90>)
 8002c78:	490b      	ldr	r1, [pc, #44]	@ (8002ca8 <startadd+0x94>)
 8002c7a:	480c      	ldr	r0, [pc, #48]	@ (8002cac <startadd+0x98>)
 8002c7c:	f7fd fbbe 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c80:	e7d1      	b.n	8002c26 <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002c82:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc0 <startadd+0xac>)
 8002c84:	490f      	ldr	r1, [pc, #60]	@ (8002cc4 <startadd+0xb0>)
 8002c86:	4809      	ldr	r0, [pc, #36]	@ (8002cac <startadd+0x98>)
 8002c88:	f7fd fbb8 	bl	80003fc <CLCD_I2C_Display>
	buzzer(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f000 fea5 	bl	80039dc <buzzer>
	HAL_Delay(1000);
 8002c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c96:	f001 fbaf 	bl	80043f8 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002c9a:	4804      	ldr	r0, [pc, #16]	@ (8002cac <startadd+0x98>)
 8002c9c:	f7fd fb9e 	bl	80003dc <CLCD_I2C_Clear>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	0800e0e4 	.word	0x0800e0e4
 8002ca8:	0800dd54 	.word	0x0800dd54
 8002cac:	200003d8 	.word	0x200003d8
 8002cb0:	200003e4 	.word	0x200003e4
 8002cb4:	20000024 	.word	0x20000024
 8002cb8:	0800e0f8 	.word	0x0800e0f8
 8002cbc:	0800e10c 	.word	0x0800e10c
 8002cc0:	0800e11c 	.word	0x0800e11c
 8002cc4:	0800e12c 	.word	0x0800e12c

08002cc8 <setaddress>:
void setaddress(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <setaddress+0x30>)
 8002cd0:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002cd2:	e002      	b.n	8002cda <setaddress+0x12>
	{
		pt = pt + 8;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3305      	adds	r3, #5
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f805 	bl	8000cee <Flash_Read_Byte>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2bff      	cmp	r3, #255	@ 0xff
 8002ce8:	d1f4      	bne.n	8002cd4 <setaddress+0xc>
	}
	AddressUID = pt;
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <setaddress+0x34>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	0800f000 	.word	0x0800f000
 8002cfc:	20000024 	.word	0x20000024

08002d00 <remoall>:

void remoall(){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <remoall+0x4c>)
 8002d08:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002d0a:	e00f      	b.n	8002d2c <remoall+0x2c>
		Flash_Erase(pt);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fd ff97 	bl	8000c40 <Flash_Erase>
		pt = pt + 0x400;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d18:	607b      	str	r3, [r7, #4]
		if(pt == 0x801000)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <remoall+0x50>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d104      	bne.n	8002d2c <remoall+0x2c>
		{
		      set_default_password();
 8002d22:	f000 fdcb 	bl	80038bc <set_default_password>
		      remove_all_finger();
 8002d26:	f000 fcaf 	bl	8003688 <remove_all_finger>
		      break;
 8002d2a:	e00b      	b.n	8002d44 <remoall+0x44>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd fff6 	bl	8000d1e <Flash_Read_8Byte>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	bf08      	it	eq
 8002d3c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002d40:	d1e4      	bne.n	8002d0c <remoall+0xc>
		}
	}
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	0800f000 	.word	0x0800f000
 8002d50:	00801000 	.word	0x00801000

08002d54 <addface>:

void addface(uint8_t key)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002d5e:	2280      	movs	r2, #128	@ 0x80
 8002d60:	2100      	movs	r1, #0
 8002d62:	4823      	ldr	r0, [pc, #140]	@ (8002df0 <addface+0x9c>)
 8002d64:	f00a fa40 	bl	800d1e8 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4921      	ldr	r1, [pc, #132]	@ (8002df4 <addface+0xa0>)
 8002d6e:	4822      	ldr	r0, [pc, #136]	@ (8002df8 <addface+0xa4>)
 8002d70:	f00a fa1a 	bl	800d1a8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002d74:	2105      	movs	r1, #5
 8002d76:	4820      	ldr	r0, [pc, #128]	@ (8002df8 <addface+0xa4>)
 8002d78:	f009 fd7c 	bl	800c874 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <addface+0xa8>)
 8002d7e:	4920      	ldr	r1, [pc, #128]	@ (8002e00 <addface+0xac>)
 8002d80:	4820      	ldr	r0, [pc, #128]	@ (8002e04 <addface+0xb0>)
 8002d82:	f7fd fb3b 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <addface+0xb4>)
 8002d88:	223c      	movs	r2, #60	@ 0x3c
 8002d8a:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8002d8c:	e023      	b.n	8002dd6 <addface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <addface+0x9c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	2b54      	cmp	r3, #84	@ 0x54
 8002d96:	d10c      	bne.n	8002db2 <addface+0x5e>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 8002d98:	4a1c      	ldr	r2, [pc, #112]	@ (8002e0c <addface+0xb8>)
 8002d9a:	491d      	ldr	r1, [pc, #116]	@ (8002e10 <addface+0xbc>)
 8002d9c:	4819      	ldr	r0, [pc, #100]	@ (8002e04 <addface+0xb0>)
 8002d9e:	f7fd fb2d 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f000 fe1a 	bl	80039dc <buzzer>
			HAL_Delay(2000);
 8002da8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002dac:	f001 fb24 	bl	80043f8 <HAL_Delay>
			break;
 8002db0:	e015      	b.n	8002dde <addface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <addface+0x9c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	2b46      	cmp	r3, #70	@ 0x46
 8002dba:	d10c      	bne.n	8002dd6 <addface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <addface+0xa8>)
 8002dbe:	4915      	ldr	r1, [pc, #84]	@ (8002e14 <addface+0xc0>)
 8002dc0:	4810      	ldr	r0, [pc, #64]	@ (8002e04 <addface+0xb0>)
 8002dc2:	f7fd fb1b 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8002dc6:	2005      	movs	r0, #5
 8002dc8:	f000 fe08 	bl	80039dc <buzzer>
			HAL_Delay(2000);
 8002dcc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002dd0:	f001 fb12 	bl	80043f8 <HAL_Delay>
			break;
 8002dd4:	e003      	b.n	8002dde <addface+0x8a>
	while(exitmenu != 0){
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <addface+0xb4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1d7      	bne.n	8002d8e <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002dde:	2280      	movs	r2, #128	@ 0x80
 8002de0:	2100      	movs	r1, #0
 8002de2:	4803      	ldr	r0, [pc, #12]	@ (8002df0 <addface+0x9c>)
 8002de4:	f00a fa00 	bl	800d1e8 <memset>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000350 	.word	0x20000350
 8002df4:	0800e13c 	.word	0x0800e13c
 8002df8:	200003d0 	.word	0x200003d0
 8002dfc:	0800db30 	.word	0x0800db30
 8002e00:	0800e050 	.word	0x0800e050
 8002e04:	200003d8 	.word	0x200003d8
 8002e08:	20000020 	.word	0x20000020
 8002e0c:	0800dde0 	.word	0x0800dde0
 8002e10:	0800e144 	.word	0x0800e144
 8002e14:	0800e154 	.word	0x0800e154

08002e18 <removeface>:
void removeface(uint8_t key)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	2100      	movs	r1, #0
 8002e26:	4823      	ldr	r0, [pc, #140]	@ (8002eb4 <removeface+0x9c>)
 8002e28:	f00a f9de 	bl	800d1e8 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4921      	ldr	r1, [pc, #132]	@ (8002eb8 <removeface+0xa0>)
 8002e32:	4822      	ldr	r0, [pc, #136]	@ (8002ebc <removeface+0xa4>)
 8002e34:	f00a f9b8 	bl	800d1a8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002e38:	2105      	movs	r1, #5
 8002e3a:	4820      	ldr	r0, [pc, #128]	@ (8002ebc <removeface+0xa4>)
 8002e3c:	f009 fd1a 	bl	800c874 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002e40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <removeface+0xa8>)
 8002e42:	4920      	ldr	r1, [pc, #128]	@ (8002ec4 <removeface+0xac>)
 8002e44:	4820      	ldr	r0, [pc, #128]	@ (8002ec8 <removeface+0xb0>)
 8002e46:	f7fd fad9 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8002e4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <removeface+0xb4>)
 8002e4c:	223c      	movs	r2, #60	@ 0x3c
 8002e4e:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8002e50:	e023      	b.n	8002e9a <removeface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <removeface+0x9c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	2b54      	cmp	r3, #84	@ 0x54
 8002e5a:	d10c      	bne.n	8002e76 <removeface+0x5e>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <removeface+0xa8>)
 8002e5e:	491c      	ldr	r1, [pc, #112]	@ (8002ed0 <removeface+0xb8>)
 8002e60:	4819      	ldr	r0, [pc, #100]	@ (8002ec8 <removeface+0xb0>)
 8002e62:	f7fd facb 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f000 fdb8 	bl	80039dc <buzzer>
			HAL_Delay(2000);
 8002e6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e70:	f001 fac2 	bl	80043f8 <HAL_Delay>
			break;
 8002e74:	e015      	b.n	8002ea2 <removeface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 8002e76:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <removeface+0x9c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	2b46      	cmp	r3, #70	@ 0x46
 8002e7e:	d10c      	bne.n	8002e9a <removeface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 8002e80:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <removeface+0xa8>)
 8002e82:	4914      	ldr	r1, [pc, #80]	@ (8002ed4 <removeface+0xbc>)
 8002e84:	4810      	ldr	r0, [pc, #64]	@ (8002ec8 <removeface+0xb0>)
 8002e86:	f7fd fab9 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8002e8a:	2005      	movs	r0, #5
 8002e8c:	f000 fda6 	bl	80039dc <buzzer>
			HAL_Delay(2000);
 8002e90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e94:	f001 fab0 	bl	80043f8 <HAL_Delay>
			break;
 8002e98:	e003      	b.n	8002ea2 <removeface+0x8a>
	while(exitmenu != 0){
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <removeface+0xb4>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1d7      	bne.n	8002e52 <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <removeface+0x9c>)
 8002ea8:	f00a f99e 	bl	800d1e8 <memset>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000350 	.word	0x20000350
 8002eb8:	0800e164 	.word	0x0800e164
 8002ebc:	200003d0 	.word	0x200003d0
 8002ec0:	0800db30 	.word	0x0800db30
 8002ec4:	0800e050 	.word	0x0800e050
 8002ec8:	200003d8 	.word	0x200003d8
 8002ecc:	20000020 	.word	0x20000020
 8002ed0:	0800e16c 	.word	0x0800e16c
 8002ed4:	0800e17c 	.word	0x0800e17c

08002ed8 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4817      	ldr	r0, [pc, #92]	@ (8002f44 <checkfaceid+0x6c>)
 8002ee8:	f00a f97e 	bl	800d1e8 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4915      	ldr	r1, [pc, #84]	@ (8002f48 <checkfaceid+0x70>)
 8002ef2:	4816      	ldr	r0, [pc, #88]	@ (8002f4c <checkfaceid+0x74>)
 8002ef4:	f00a f958 	bl	800d1a8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8002ef8:	2105      	movs	r1, #5
 8002efa:	4814      	ldr	r0, [pc, #80]	@ (8002f4c <checkfaceid+0x74>)
 8002efc:	f009 fcba 	bl	800c874 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8002f00:	e000      	b.n	8002f04 <checkfaceid+0x2c>
			continue;
 8002f02:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <checkfaceid+0x6c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f9      	beq.n	8002f02 <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 8002f0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f12:	f001 fa71 	bl	80043f8 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <checkfaceid+0x6c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	2b54      	cmp	r3, #84	@ 0x54
 8002f1e:	d101      	bne.n	8002f24 <checkfaceid+0x4c>
		return key;
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	e00b      	b.n	8002f3c <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <checkfaceid+0x6c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	2b46      	cmp	r3, #70	@ 0x46
 8002f2c:	d101      	bne.n	8002f32 <checkfaceid+0x5a>
		return 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e004      	b.n	8002f3c <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002f32:	2280      	movs	r2, #128	@ 0x80
 8002f34:	2100      	movs	r1, #0
 8002f36:	4803      	ldr	r0, [pc, #12]	@ (8002f44 <checkfaceid+0x6c>)
 8002f38:	f00a f956 	bl	800d1e8 <memset>
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000350 	.word	0x20000350
 8002f48:	0800e18c 	.word	0x0800e18c
 8002f4c:	200003d0 	.word	0x200003d0

08002f50 <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	81bb      	strh	r3, [r7, #12]
    char id_str[4] = {0};
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
    uint8_t index = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-162):", "ID= ");
 8002f62:	4ab8      	ldr	r2, [pc, #736]	@ (8003244 <add_finger+0x2f4>)
 8002f64:	49b8      	ldr	r1, [pc, #736]	@ (8003248 <add_finger+0x2f8>)
 8002f66:	48b9      	ldr	r0, [pc, #740]	@ (800324c <add_finger+0x2fc>)
 8002f68:	f7fd fa48 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7fd fb9f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002f72:	4603      	mov	r3, r0
 8002f74:	72fb      	strb	r3, [r7, #11]
        if (key >= '0' && key <= '9' && index < 3)
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f7a:	d916      	bls.n	8002faa <add_finger+0x5a>
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	2b39      	cmp	r3, #57	@ 0x39
 8002f80:	d813      	bhi.n	8002faa <add_finger+0x5a>
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d810      	bhi.n	8002faa <add_finger+0x5a>
        {
            buzzer(1);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f000 fd27 	bl	80039dc <buzzer>
            id_str[index++] = key;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	73fa      	strb	r2, [r7, #15]
 8002f94:	3310      	adds	r3, #16
 8002f96:	443b      	add	r3, r7
 8002f98:	7afa      	ldrb	r2, [r7, #11]
 8002f9a:	f803 2c10 	strb.w	r2, [r3, #-16]
            CLCD_I2C_WriteChar(&LCD1, key);
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	48aa      	ldr	r0, [pc, #680]	@ (800324c <add_finger+0x2fc>)
 8002fa4:	f7fd f9f3 	bl	800038e <CLCD_I2C_WriteChar>
 8002fa8:	e02d      	b.n	8003006 <add_finger+0xb6>
        }
        else if (key == '#' && index > 0)
 8002faa:	7afb      	ldrb	r3, [r7, #11]
 8002fac:	2b23      	cmp	r3, #35	@ 0x23
 8002fae:	d1dd      	bne.n	8002f6c <add_finger+0x1c>
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0da      	beq.n	8002f6c <add_finger+0x1c>
        {
            buzzer(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fd10 	bl	80039dc <buzzer>
            id = atoi(id_str);
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f00a f836 	bl	800d030 <atoi>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	81bb      	strh	r3, [r7, #12]
            if (id >= 1 && id <= 162)
 8002fc8:	89bb      	ldrh	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <add_finger+0x84>
 8002fce:	89bb      	ldrh	r3, [r7, #12]
 8002fd0:	2ba2      	cmp	r3, #162	@ 0xa2
 8002fd2:	d919      	bls.n	8003008 <add_finger+0xb8>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-162):");
 8002fd4:	4a9c      	ldr	r2, [pc, #624]	@ (8003248 <add_finger+0x2f8>)
 8002fd6:	499e      	ldr	r1, [pc, #632]	@ (8003250 <add_finger+0x300>)
 8002fd8:	489c      	ldr	r0, [pc, #624]	@ (800324c <add_finger+0x2fc>)
 8002fda:	f7fd fa0f 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8002fde:	2005      	movs	r0, #5
 8002fe0:	f000 fcfc 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 8002fe4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002fe8:	f001 fa06 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID (1-162):", "ID= ");
 8002fec:	4a95      	ldr	r2, [pc, #596]	@ (8003244 <add_finger+0x2f4>)
 8002fee:	4996      	ldr	r1, [pc, #600]	@ (8003248 <add_finger+0x2f8>)
 8002ff0:	4896      	ldr	r0, [pc, #600]	@ (800324c <add_finger+0x2fc>)
 8002ff2:	f7fd fa03 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f00a f8f3 	bl	800d1e8 <memset>
                index = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
    {
 8003006:	e7b1      	b.n	8002f6c <add_finger+0x1c>
            }
        }
    }
    ID = id;
 8003008:	4a92      	ldr	r2, [pc, #584]	@ (8003254 <add_finger+0x304>)
 800300a:	89bb      	ldrh	r3, [r7, #12]
 800300c:	8013      	strh	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800300e:	2201      	movs	r2, #1
 8003010:	2104      	movs	r1, #4
 8003012:	488e      	ldr	r0, [pc, #568]	@ (800324c <add_finger+0x2fc>)
 8003014:	f7fd f978 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8003018:	463b      	mov	r3, r7
 800301a:	4619      	mov	r1, r3
 800301c:	488b      	ldr	r0, [pc, #556]	@ (800324c <add_finger+0x2fc>)
 800301e:	f7fd f9c6 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8003022:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003026:	f001 f9e7 	bl	80043f8 <HAL_Delay>

    uint32_t start_time = HAL_GetTick();
 800302a:	f001 f9db 	bl	80043e4 <HAL_GetTick>
 800302e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 8003030:	f001 f9d8 	bl	80043e4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800303e:	4293      	cmp	r3, r2
 8003040:	d90c      	bls.n	800305c <add_finger+0x10c>
        {
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8003042:	4a85      	ldr	r2, [pc, #532]	@ (8003258 <add_finger+0x308>)
 8003044:	4985      	ldr	r1, [pc, #532]	@ (800325c <add_finger+0x30c>)
 8003046:	4881      	ldr	r0, [pc, #516]	@ (800324c <add_finger+0x2fc>)
 8003048:	f7fd f9d8 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 800304c:	2005      	movs	r0, #5
 800304e:	f000 fcc5 	bl	80039dc <buzzer>
            HAL_Delay(2000);
 8003052:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003056:	f001 f9cf 	bl	80043f8 <HAL_Delay>
            return;
 800305a:	e1b8      	b.n	80033ce <add_finger+0x47e>
        }

        collect_finger();
 800305c:	f7fd fc48 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 8003060:	4a7f      	ldr	r2, [pc, #508]	@ (8003260 <add_finger+0x310>)
 8003062:	4980      	ldr	r1, [pc, #512]	@ (8003264 <add_finger+0x314>)
 8003064:	4879      	ldr	r0, [pc, #484]	@ (800324c <add_finger+0x2fc>)
 8003066:	f7fd f9c9 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 800306a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800306e:	f001 f9c3 	bl	80043f8 <HAL_Delay>

        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003072:	2201      	movs	r2, #1
 8003074:	2100      	movs	r1, #0
 8003076:	4875      	ldr	r0, [pc, #468]	@ (800324c <add_finger+0x2fc>)
 8003078:	f7fd f946 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 800307c:	497a      	ldr	r1, [pc, #488]	@ (8003268 <add_finger+0x318>)
 800307e:	4873      	ldr	r0, [pc, #460]	@ (800324c <add_finger+0x2fc>)
 8003080:	f7fd f995 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003084:	4b79      	ldr	r3, [pc, #484]	@ (800326c <add_finger+0x31c>)
 8003086:	22ff      	movs	r2, #255	@ 0xff
 8003088:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 800308a:	e021      	b.n	80030d0 <add_finger+0x180>
            collect_finger();
 800308c:	f7fd fc30 	bl	80008f0 <collect_finger>
            collect_finger();
 8003090:	f7fd fc2e 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8003094:	f7fd fc2c 	bl	80008f0 <collect_finger>
 8003098:	4603      	mov	r3, r0
 800309a:	4a74      	ldr	r2, [pc, #464]	@ (800326c <add_finger+0x31c>)
 800309c:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 800309e:	f001 f9a1 	bl	80043e4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d90f      	bls.n	80030d0 <add_finger+0x180>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 80030b0:	4a69      	ldr	r2, [pc, #420]	@ (8003258 <add_finger+0x308>)
 80030b2:	496a      	ldr	r1, [pc, #424]	@ (800325c <add_finger+0x30c>)
 80030b4:	4865      	ldr	r0, [pc, #404]	@ (800324c <add_finger+0x2fc>)
 80030b6:	f7fd f9a1 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 80030ba:	2005      	movs	r0, #5
 80030bc:	f000 fc8e 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 80030c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030c4:	f001 f998 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 80030c8:	4b69      	ldr	r3, [pc, #420]	@ (8003270 <add_finger+0x320>)
 80030ca:	2214      	movs	r2, #20
 80030cc:	701a      	strb	r2, [r3, #0]
                return;
 80030ce:	e17e      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00){
 80030d0:	4b66      	ldr	r3, [pc, #408]	@ (800326c <add_finger+0x31c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1d9      	bne.n	800308c <add_finger+0x13c>
            }
        }
        tmp=0xff;
 80030d8:	4b64      	ldr	r3, [pc, #400]	@ (800326c <add_finger+0x31c>)
 80030da:	22ff      	movs	r2, #255	@ 0xff
 80030dc:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030de:	2201      	movs	r2, #1
 80030e0:	2100      	movs	r1, #0
 80030e2:	485a      	ldr	r0, [pc, #360]	@ (800324c <add_finger+0x2fc>)
 80030e4:	f7fd f910 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 80030e8:	4962      	ldr	r1, [pc, #392]	@ (8003274 <add_finger+0x324>)
 80030ea:	4858      	ldr	r0, [pc, #352]	@ (800324c <add_finger+0x2fc>)
 80030ec:	f7fd f95f 	bl	80003ae <CLCD_I2C_WriteString>
 80030f0:	2064      	movs	r0, #100	@ 0x64
 80030f2:	f001 f981 	bl	80043f8 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2100      	movs	r1, #0
 80030fa:	4854      	ldr	r0, [pc, #336]	@ (800324c <add_finger+0x2fc>)
 80030fc:	f7fd f904 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8003100:	495d      	ldr	r1, [pc, #372]	@ (8003278 <add_finger+0x328>)
 8003102:	4852      	ldr	r0, [pc, #328]	@ (800324c <add_finger+0x2fc>)
 8003104:	f7fd f953 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003108:	4b58      	ldr	r3, [pc, #352]	@ (800326c <add_finger+0x31c>)
 800310a:	22ff      	movs	r2, #255	@ 0xff
 800310c:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 800310e:	e01e      	b.n	800314e <add_finger+0x1fe>
            tmp=img2tz(0x01);
 8003110:	2001      	movs	r0, #1
 8003112:	f7fd fc19 	bl	8000948 <img2tz>
 8003116:	4603      	mov	r3, r0
 8003118:	4a54      	ldr	r2, [pc, #336]	@ (800326c <add_finger+0x31c>)
 800311a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 800311c:	f001 f962 	bl	80043e4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800312a:	4293      	cmp	r3, r2
 800312c:	d90f      	bls.n	800314e <add_finger+0x1fe>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 800312e:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <add_finger+0x308>)
 8003130:	494a      	ldr	r1, [pc, #296]	@ (800325c <add_finger+0x30c>)
 8003132:	4846      	ldr	r0, [pc, #280]	@ (800324c <add_finger+0x2fc>)
 8003134:	f7fd f962 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003138:	2005      	movs	r0, #5
 800313a:	f000 fc4f 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 800313e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003142:	f001 f959 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <add_finger+0x320>)
 8003148:	2214      	movs	r2, #20
 800314a:	701a      	strb	r2, [r3, #0]
                return;
 800314c:	e13f      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00){
 800314e:	4b47      	ldr	r3, [pc, #284]	@ (800326c <add_finger+0x31c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1dc      	bne.n	8003110 <add_finger+0x1c0>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003156:	2201      	movs	r2, #1
 8003158:	2100      	movs	r1, #0
 800315a:	483c      	ldr	r0, [pc, #240]	@ (800324c <add_finger+0x2fc>)
 800315c:	f7fd f8d4 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 8003160:	4946      	ldr	r1, [pc, #280]	@ (800327c <add_finger+0x32c>)
 8003162:	483a      	ldr	r0, [pc, #232]	@ (800324c <add_finger+0x2fc>)
 8003164:	f7fd f923 	bl	80003ae <CLCD_I2C_WriteString>
 8003168:	2064      	movs	r0, #100	@ 0x64
 800316a:	f001 f945 	bl	80043f8 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800316e:	2201      	movs	r2, #1
 8003170:	2100      	movs	r1, #0
 8003172:	4836      	ldr	r0, [pc, #216]	@ (800324c <add_finger+0x2fc>)
 8003174:	f7fd f8c8 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8003178:	493b      	ldr	r1, [pc, #236]	@ (8003268 <add_finger+0x318>)
 800317a:	4834      	ldr	r0, [pc, #208]	@ (800324c <add_finger+0x2fc>)
 800317c:	f7fd f917 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003180:	4b3a      	ldr	r3, [pc, #232]	@ (800326c <add_finger+0x31c>)
 8003182:	22ff      	movs	r2, #255	@ 0xff
 8003184:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 8003186:	e021      	b.n	80031cc <add_finger+0x27c>
            collect_finger();
 8003188:	f7fd fbb2 	bl	80008f0 <collect_finger>
            collect_finger();
 800318c:	f7fd fbb0 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 8003190:	f7fd fbae 	bl	80008f0 <collect_finger>
 8003194:	4603      	mov	r3, r0
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <add_finger+0x31c>)
 8003198:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 800319a:	f001 f923 	bl	80043e4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d90f      	bls.n	80031cc <add_finger+0x27c>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 80031ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <add_finger+0x308>)
 80031ae:	492b      	ldr	r1, [pc, #172]	@ (800325c <add_finger+0x30c>)
 80031b0:	4826      	ldr	r0, [pc, #152]	@ (800324c <add_finger+0x2fc>)
 80031b2:	f7fd f923 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 80031b6:	2005      	movs	r0, #5
 80031b8:	f000 fc10 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 80031bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031c0:	f001 f91a 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 80031c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <add_finger+0x320>)
 80031c6:	2214      	movs	r2, #20
 80031c8:	701a      	strb	r2, [r3, #0]
                return;
 80031ca:	e100      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00)    {
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <add_finger+0x31c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1d9      	bne.n	8003188 <add_finger+0x238>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80031d4:	2201      	movs	r2, #1
 80031d6:	2100      	movs	r1, #0
 80031d8:	481c      	ldr	r0, [pc, #112]	@ (800324c <add_finger+0x2fc>)
 80031da:	f7fd f895 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 80031de:	4925      	ldr	r1, [pc, #148]	@ (8003274 <add_finger+0x324>)
 80031e0:	481a      	ldr	r0, [pc, #104]	@ (800324c <add_finger+0x2fc>)
 80031e2:	f7fd f8e4 	bl	80003ae <CLCD_I2C_WriteString>
 80031e6:	2064      	movs	r0, #100	@ 0x64
 80031e8:	f001 f906 	bl	80043f8 <HAL_Delay>
        tmp=0xff;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <add_finger+0x31c>)
 80031ee:	22ff      	movs	r2, #255	@ 0xff
 80031f0:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80031f2:	2201      	movs	r2, #1
 80031f4:	2100      	movs	r1, #0
 80031f6:	4815      	ldr	r0, [pc, #84]	@ (800324c <add_finger+0x2fc>)
 80031f8:	f7fd f886 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 80031fc:	491e      	ldr	r1, [pc, #120]	@ (8003278 <add_finger+0x328>)
 80031fe:	4813      	ldr	r0, [pc, #76]	@ (800324c <add_finger+0x2fc>)
 8003200:	f7fd f8d5 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {
 8003204:	e03c      	b.n	8003280 <add_finger+0x330>
            tmp=img2tz(0x02);
 8003206:	2002      	movs	r0, #2
 8003208:	f7fd fb9e 	bl	8000948 <img2tz>
 800320c:	4603      	mov	r3, r0
 800320e:	4a17      	ldr	r2, [pc, #92]	@ (800326c <add_finger+0x31c>)
 8003210:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 8003212:	f001 f8e7 	bl	80043e4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003220:	4293      	cmp	r3, r2
 8003222:	d92d      	bls.n	8003280 <add_finger+0x330>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8003224:	4a0c      	ldr	r2, [pc, #48]	@ (8003258 <add_finger+0x308>)
 8003226:	490d      	ldr	r1, [pc, #52]	@ (800325c <add_finger+0x30c>)
 8003228:	4808      	ldr	r0, [pc, #32]	@ (800324c <add_finger+0x2fc>)
 800322a:	f7fd f8e7 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 800322e:	2005      	movs	r0, #5
 8003230:	f000 fbd4 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 8003234:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003238:	f001 f8de 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <add_finger+0x320>)
 800323e:	2214      	movs	r2, #20
 8003240:	701a      	strb	r2, [r3, #0]
                return;
 8003242:	e0c4      	b.n	80033ce <add_finger+0x47e>
 8003244:	0800dd94 	.word	0x0800dd94
 8003248:	0800e194 	.word	0x0800e194
 800324c:	200003d8 	.word	0x200003d8
 8003250:	0800ddb0 	.word	0x0800ddb0
 8003254:	20000408 	.word	0x20000408
 8003258:	0800e1a8 	.word	0x0800e1a8
 800325c:	0800e1b4 	.word	0x0800e1b4
 8003260:	0800e1bc 	.word	0x0800e1bc
 8003264:	0800e1d4 	.word	0x0800e1d4
 8003268:	0800e1e8 	.word	0x0800e1e8
 800326c:	20000404 	.word	0x20000404
 8003270:	20000020 	.word	0x20000020
 8003274:	0800e204 	.word	0x0800e204
 8003278:	0800e218 	.word	0x0800e218
 800327c:	0800e230 	.word	0x0800e230
        while(tmp!=0x00)    {
 8003280:	4b54      	ldr	r3, [pc, #336]	@ (80033d4 <add_finger+0x484>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1be      	bne.n	8003206 <add_finger+0x2b6>
            }
        }
        tmp=0xff;
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <add_finger+0x484>)
 800328a:	22ff      	movs	r2, #255	@ 0xff
 800328c:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)
 800328e:	e036      	b.n	80032fe <add_finger+0x3ae>
        {
            tmp=match();
 8003290:	f7fd fb96 	bl	80009c0 <match>
 8003294:	4603      	mov	r3, r0
 8003296:	4a4f      	ldr	r2, [pc, #316]	@ (80033d4 <add_finger+0x484>)
 8003298:	6013      	str	r3, [r2, #0]
            if (tmp==0x08 || tmp==0x01)
 800329a:	4b4e      	ldr	r3, [pc, #312]	@ (80033d4 <add_finger+0x484>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d003      	beq.n	80032aa <add_finger+0x35a>
 80032a2:	4b4c      	ldr	r3, [pc, #304]	@ (80033d4 <add_finger+0x484>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d110      	bne.n	80032cc <add_finger+0x37c>
            {
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80032aa:	2201      	movs	r2, #1
 80032ac:	2100      	movs	r1, #0
 80032ae:	484a      	ldr	r0, [pc, #296]	@ (80033d8 <add_finger+0x488>)
 80032b0:	f7fd f82a 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 80032b4:	4949      	ldr	r1, [pc, #292]	@ (80033dc <add_finger+0x48c>)
 80032b6:	4848      	ldr	r0, [pc, #288]	@ (80033d8 <add_finger+0x488>)
 80032b8:	f7fd f879 	bl	80003ae <CLCD_I2C_WriteString>
 80032bc:	2005      	movs	r0, #5
 80032be:	f000 fb8d 	bl	80039dc <buzzer>
 80032c2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80032c6:	f001 f897 	bl	80043f8 <HAL_Delay>
                return;
 80032ca:	e080      	b.n	80033ce <add_finger+0x47e>
            }
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 80032cc:	f001 f88a 	bl	80043e4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80032da:	4293      	cmp	r3, r2
 80032dc:	d90f      	bls.n	80032fe <add_finger+0x3ae>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 80032de:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <add_finger+0x490>)
 80032e0:	4940      	ldr	r1, [pc, #256]	@ (80033e4 <add_finger+0x494>)
 80032e2:	483d      	ldr	r0, [pc, #244]	@ (80033d8 <add_finger+0x488>)
 80032e4:	f7fd f88a 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 80032e8:	2005      	movs	r0, #5
 80032ea:	f000 fb77 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 80032ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032f2:	f001 f881 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 80032f6:	4b3c      	ldr	r3, [pc, #240]	@ (80033e8 <add_finger+0x498>)
 80032f8:	2214      	movs	r2, #20
 80032fa:	701a      	strb	r2, [r3, #0]
                return;
 80032fc:	e067      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00)
 80032fe:	4b35      	ldr	r3, [pc, #212]	@ (80033d4 <add_finger+0x484>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1c4      	bne.n	8003290 <add_finger+0x340>
            }
        }
        tmp=0xff;
 8003306:	4b33      	ldr	r3, [pc, #204]	@ (80033d4 <add_finger+0x484>)
 8003308:	22ff      	movs	r2, #255	@ 0xff
 800330a:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 800330c:	e01d      	b.n	800334a <add_finger+0x3fa>
            tmp=regmodel();
 800330e:	f7fd fb83 	bl	8000a18 <regmodel>
 8003312:	4603      	mov	r3, r0
 8003314:	4a2f      	ldr	r2, [pc, #188]	@ (80033d4 <add_finger+0x484>)
 8003316:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 8003318:	f001 f864 	bl	80043e4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003326:	4293      	cmp	r3, r2
 8003328:	d90f      	bls.n	800334a <add_finger+0x3fa>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 800332a:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <add_finger+0x490>)
 800332c:	492d      	ldr	r1, [pc, #180]	@ (80033e4 <add_finger+0x494>)
 800332e:	482a      	ldr	r0, [pc, #168]	@ (80033d8 <add_finger+0x488>)
 8003330:	f7fd f864 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003334:	2005      	movs	r0, #5
 8003336:	f000 fb51 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 800333a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800333e:	f001 f85b 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 8003342:	4b29      	ldr	r3, [pc, #164]	@ (80033e8 <add_finger+0x498>)
 8003344:	2214      	movs	r2, #20
 8003346:	701a      	strb	r2, [r3, #0]
                return;
 8003348:	e041      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00){
 800334a:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <add_finger+0x484>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1dd      	bne.n	800330e <add_finger+0x3be>
            }
        }
        tmp=0xff;
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <add_finger+0x484>)
 8003354:	22ff      	movs	r2, #255	@ 0xff
 8003356:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003358:	e021      	b.n	800339e <add_finger+0x44e>
            tmp=store(ID);
 800335a:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <add_finger+0x49c>)
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fb85 	bl	8000a70 <store>
 8003366:	4603      	mov	r3, r0
 8003368:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <add_finger+0x484>)
 800336a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time > 15000) // 15 seconds timeout
 800336c:	f001 f83a 	bl	80043e4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800337a:	4293      	cmp	r3, r2
 800337c:	d90f      	bls.n	800339e <add_finger+0x44e>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <add_finger+0x490>)
 8003380:	4918      	ldr	r1, [pc, #96]	@ (80033e4 <add_finger+0x494>)
 8003382:	4815      	ldr	r0, [pc, #84]	@ (80033d8 <add_finger+0x488>)
 8003384:	f7fd f83a 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003388:	2005      	movs	r0, #5
 800338a:	f000 fb27 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 800338e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003392:	f001 f831 	bl	80043f8 <HAL_Delay>
                exitmenu = Delaymenu;
 8003396:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <add_finger+0x498>)
 8003398:	2214      	movs	r2, #20
 800339a:	701a      	strb	r2, [r3, #0]
                return;
 800339c:	e017      	b.n	80033ce <add_finger+0x47e>
        while(tmp!=0x00){
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <add_finger+0x484>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1d9      	bne.n	800335a <add_finger+0x40a>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80033a6:	2201      	movs	r2, #1
 80033a8:	2100      	movs	r1, #0
 80033aa:	480b      	ldr	r0, [pc, #44]	@ (80033d8 <add_finger+0x488>)
 80033ac:	f7fc ffac 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 80033b0:	490f      	ldr	r1, [pc, #60]	@ (80033f0 <add_finger+0x4a0>)
 80033b2:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <add_finger+0x488>)
 80033b4:	f7fc fffb 	bl	80003ae <CLCD_I2C_WriteString>
        buzzer(1);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f000 fb0f 	bl	80039dc <buzzer>
        HAL_Delay(1500);
 80033be:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80033c2:	f001 f819 	bl	80043f8 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 80033c6:	4804      	ldr	r0, [pc, #16]	@ (80033d8 <add_finger+0x488>)
 80033c8:	f7fd f808 	bl	80003dc <CLCD_I2C_Clear>
        break;
 80033cc:	bf00      	nop
    }
}
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000404 	.word	0x20000404
 80033d8:	200003d8 	.word	0x200003d8
 80033dc:	0800e244 	.word	0x0800e244
 80033e0:	0800e1a8 	.word	0x0800e1a8
 80033e4:	0800e1b4 	.word	0x0800e1b4
 80033e8:	20000020 	.word	0x20000020
 80033ec:	20000408 	.word	0x20000408
 80033f0:	0800e254 	.word	0x0800e254

080033f4 <read_finger>:
//----------end them van tay---------------
void read_finger()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 80033f8:	4b3a      	ldr	r3, [pc, #232]	@ (80034e4 <read_finger+0xf0>)
 80033fa:	22ff      	movs	r2, #255	@ 0xff
 80033fc:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 80033fe:	f000 fff1 	bl	80043e4 <HAL_GetTick>
 8003402:	4603      	mov	r3, r0
 8003404:	4a38      	ldr	r2, [pc, #224]	@ (80034e8 <read_finger+0xf4>)
 8003406:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8003408:	e013      	b.n	8003432 <read_finger+0x3e>
		tmp=collect_finger();
 800340a:	f7fd fa71 	bl	80008f0 <collect_finger>
 800340e:	4603      	mov	r3, r0
 8003410:	4a34      	ldr	r2, [pc, #208]	@ (80034e4 <read_finger+0xf0>)
 8003412:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8003414:	f000 ffe6 	bl	80043e4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	4b33      	ldr	r3, [pc, #204]	@ (80034e8 <read_finger+0xf4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003424:	d305      	bcc.n	8003432 <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8003426:	f000 ffdd 	bl	80043e4 <HAL_GetTick>
 800342a:	4603      	mov	r3, r0
 800342c:	4a2e      	ldr	r2, [pc, #184]	@ (80034e8 <read_finger+0xf4>)
 800342e:	6013      	str	r3, [r2, #0]
		return;}
 8003430:	e056      	b.n	80034e0 <read_finger+0xec>
	while(tmp!=0x00){
 8003432:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <read_finger+0xf0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e7      	bne.n	800340a <read_finger+0x16>

	}
	tmp=0xff;
 800343a:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <read_finger+0xf0>)
 800343c:	22ff      	movs	r2, #255	@ 0xff
 800343e:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8003440:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <read_finger+0xf0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <read_finger+0x60>
 8003448:	2001      	movs	r0, #1
 800344a:	f7fd fa7d 	bl	8000948 <img2tz>
 800344e:	4603      	mov	r3, r0
 8003450:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <read_finger+0xf0>)
 8003452:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <read_finger+0xf0>)
 8003456:	22ff      	movs	r2, #255	@ 0xff
 8003458:	601a      	str	r2, [r3, #0]
	tmp=search();
 800345a:	f7fd fb48 	bl	8000aee <search>
 800345e:	4603      	mov	r3, r0
 8003460:	4a20      	ldr	r2, [pc, #128]	@ (80034e4 <read_finger+0xf0>)
 8003462:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8003464:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <read_finger+0xf0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d117      	bne.n	800349c <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <read_finger+0xf0>)
 800346e:	22ff      	movs	r2, #255	@ 0xff
 8003470:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 8003472:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <read_finger+0xf8>)
 8003474:	491e      	ldr	r1, [pc, #120]	@ (80034f0 <read_finger+0xfc>)
 8003476:	481f      	ldr	r0, [pc, #124]	@ (80034f4 <read_finger+0x100>)
 8003478:	f7fc ffc0 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess,"-ID = %d  ", pID); // Use %d for integer
 800347c:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <read_finger+0x104>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	491e      	ldr	r1, [pc, #120]	@ (80034fc <read_finger+0x108>)
 8003484:	481e      	ldr	r0, [pc, #120]	@ (8003500 <read_finger+0x10c>)
 8003486:	f009 fe8f 	bl	800d1a8 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 800348a:	491d      	ldr	r1, [pc, #116]	@ (8003500 <read_finger+0x10c>)
 800348c:	4819      	ldr	r0, [pc, #100]	@ (80034f4 <read_finger+0x100>)
 800348e:	f7fc ff8e 	bl	80003ae <CLCD_I2C_WriteString>
		opendoor();
 8003492:	f000 fa53 	bl	800393c <opendoor>
		CLCD_I2C_Clear(&LCD1);
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <read_finger+0x100>)
 8003498:	f7fc ffa0 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 800349c:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <read_finger+0xf0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d11d      	bne.n	80034e0 <read_finger+0xec>
	{
		tmp=0xff;
 80034a4:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <read_finger+0xf0>)
 80034a6:	22ff      	movs	r2, #255	@ 0xff
 80034a8:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80034aa:	2201      	movs	r2, #1
 80034ac:	2100      	movs	r1, #0
 80034ae:	4811      	ldr	r0, [pc, #68]	@ (80034f4 <read_finger+0x100>)
 80034b0:	f7fc ff2a 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 80034b4:	4913      	ldr	r1, [pc, #76]	@ (8003504 <read_finger+0x110>)
 80034b6:	480f      	ldr	r0, [pc, #60]	@ (80034f4 <read_finger+0x100>)
 80034b8:	f7fc ff79 	bl	80003ae <CLCD_I2C_WriteString>
 80034bc:	2005      	movs	r0, #5
 80034be:	f000 fa8d 	bl	80039dc <buzzer>
 80034c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034c6:	f000 ff97 	bl	80043f8 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 80034ca:	490d      	ldr	r1, [pc, #52]	@ (8003500 <read_finger+0x10c>)
 80034cc:	4809      	ldr	r0, [pc, #36]	@ (80034f4 <read_finger+0x100>)
 80034ce:	f7fc ff6e 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 80034d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034d6:	f000 ff8f 	bl	80043f8 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 80034da:	4806      	ldr	r0, [pc, #24]	@ (80034f4 <read_finger+0x100>)
 80034dc:	f7fc ff7e 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000404 	.word	0x20000404
 80034e8:	200003f4 	.word	0x200003f4
 80034ec:	0800e268 	.word	0x0800e268
 80034f0:	0800db44 	.word	0x0800db44
 80034f4:	200003d8 	.word	0x200003d8
 80034f8:	20000218 	.word	0x20000218
 80034fc:	0800e270 	.word	0x0800e270
 8003500:	200003f8 	.word	0x200003f8
 8003504:	0800e27c 	.word	0x0800e27c

08003508 <remove_id_finger>:
void remove_id_finger()
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	83bb      	strh	r3, [r7, #28]
    char id_str[4] = {0};
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
    uint8_t index = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	77fb      	strb	r3, [r7, #31]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 800351a:	4a4f      	ldr	r2, [pc, #316]	@ (8003658 <remove_id_finger+0x150>)
 800351c:	494f      	ldr	r1, [pc, #316]	@ (800365c <remove_id_finger+0x154>)
 800351e:	4850      	ldr	r0, [pc, #320]	@ (8003660 <remove_id_finger+0x158>)
 8003520:	f7fc ff6c 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003524:	200a      	movs	r0, #10
 8003526:	f7fd f8c3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800352a:	4603      	mov	r3, r0
 800352c:	76fb      	strb	r3, [r7, #27]
        if (key >= '0' && key <= '9' && index < 3)
 800352e:	7efb      	ldrb	r3, [r7, #27]
 8003530:	2b2f      	cmp	r3, #47	@ 0x2f
 8003532:	d916      	bls.n	8003562 <remove_id_finger+0x5a>
 8003534:	7efb      	ldrb	r3, [r7, #27]
 8003536:	2b39      	cmp	r3, #57	@ 0x39
 8003538:	d813      	bhi.n	8003562 <remove_id_finger+0x5a>
 800353a:	7ffb      	ldrb	r3, [r7, #31]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d810      	bhi.n	8003562 <remove_id_finger+0x5a>
        {
            buzzer(1);
 8003540:	2001      	movs	r0, #1
 8003542:	f000 fa4b 	bl	80039dc <buzzer>
            id_str[index++] = key;
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	77fa      	strb	r2, [r7, #31]
 800354c:	3320      	adds	r3, #32
 800354e:	443b      	add	r3, r7
 8003550:	7efa      	ldrb	r2, [r7, #27]
 8003552:	f803 2c0c 	strb.w	r2, [r3, #-12]
            CLCD_I2C_WriteChar(&LCD1, key);
 8003556:	7efb      	ldrb	r3, [r7, #27]
 8003558:	4619      	mov	r1, r3
 800355a:	4841      	ldr	r0, [pc, #260]	@ (8003660 <remove_id_finger+0x158>)
 800355c:	f7fc ff17 	bl	800038e <CLCD_I2C_WriteChar>
 8003560:	e02f      	b.n	80035c2 <remove_id_finger+0xba>
        }
        else if (key == '#' && index > 0)
 8003562:	7efb      	ldrb	r3, [r7, #27]
 8003564:	2b23      	cmp	r3, #35	@ 0x23
 8003566:	d1dd      	bne.n	8003524 <remove_id_finger+0x1c>
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0da      	beq.n	8003524 <remove_id_finger+0x1c>
        {
            buzzer(1);
 800356e:	2001      	movs	r0, #1
 8003570:	f000 fa34 	bl	80039dc <buzzer>
            id = atoi(id_str);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4618      	mov	r0, r3
 800357a:	f009 fd59 	bl	800d030 <atoi>
 800357e:	4603      	mov	r3, r0
 8003580:	83bb      	strh	r3, [r7, #28]
            if (id >= 1 && id <= 162)
 8003582:	8bbb      	ldrh	r3, [r7, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <remove_id_finger+0x86>
 8003588:	8bbb      	ldrh	r3, [r7, #28]
 800358a:	2ba2      	cmp	r3, #162	@ 0xa2
 800358c:	d91a      	bls.n	80035c4 <remove_id_finger+0xbc>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-162):");
 800358e:	4a35      	ldr	r2, [pc, #212]	@ (8003664 <remove_id_finger+0x15c>)
 8003590:	4935      	ldr	r1, [pc, #212]	@ (8003668 <remove_id_finger+0x160>)
 8003592:	4833      	ldr	r0, [pc, #204]	@ (8003660 <remove_id_finger+0x158>)
 8003594:	f7fc ff32 	bl	80003fc <CLCD_I2C_Display>
                buzzer(5);
 8003598:	2005      	movs	r0, #5
 800359a:	f000 fa1f 	bl	80039dc <buzzer>
                HAL_Delay(2000);
 800359e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80035a2:	f000 ff29 	bl	80043f8 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <remove_id_finger+0x150>)
 80035a8:	492c      	ldr	r1, [pc, #176]	@ (800365c <remove_id_finger+0x154>)
 80035aa:	482d      	ldr	r0, [pc, #180]	@ (8003660 <remove_id_finger+0x158>)
 80035ac:	f7fc ff26 	bl	80003fc <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2204      	movs	r2, #4
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f009 fe15 	bl	800d1e8 <memset>
                index = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	77fb      	strb	r3, [r7, #31]
    {
 80035c2:	e7af      	b.n	8003524 <remove_id_finger+0x1c>
            }
        }
    }
    ID = id;
 80035c4:	4a29      	ldr	r2, [pc, #164]	@ (800366c <remove_id_finger+0x164>)
 80035c6:	8bbb      	ldrh	r3, [r7, #28]
 80035c8:	8013      	strh	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80035ca:	2201      	movs	r2, #1
 80035cc:	2104      	movs	r1, #4
 80035ce:	4824      	ldr	r0, [pc, #144]	@ (8003660 <remove_id_finger+0x158>)
 80035d0:	f7fc fe9a 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4619      	mov	r1, r3
 80035da:	4821      	ldr	r0, [pc, #132]	@ (8003660 <remove_id_finger+0x158>)
 80035dc:	f7fc fee7 	bl	80003ae <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 80035e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035e4:	f000 ff08 	bl	80043f8 <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 80035e8:	4a21      	ldr	r2, [pc, #132]	@ (8003670 <remove_id_finger+0x168>)
 80035ea:	4922      	ldr	r1, [pc, #136]	@ (8003674 <remove_id_finger+0x16c>)
 80035ec:	481c      	ldr	r0, [pc, #112]	@ (8003660 <remove_id_finger+0x158>)
 80035ee:	f7fc ff05 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_id_finger(ID);
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <remove_id_finger+0x164>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fadf 	bl	8000bbc <delete_id_finger>
 80035fe:	4603      	mov	r3, r0
 8003600:	76bb      	strb	r3, [r7, #26]
    if (result == 0x00)
 8003602:	7ebb      	ldrb	r3, [r7, #26]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <remove_id_finger+0x11c>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 8003608:	4a1b      	ldr	r2, [pc, #108]	@ (8003678 <remove_id_finger+0x170>)
 800360a:	491c      	ldr	r1, [pc, #112]	@ (800367c <remove_id_finger+0x174>)
 800360c:	4814      	ldr	r0, [pc, #80]	@ (8003660 <remove_id_finger+0x158>)
 800360e:	f7fc fef5 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003612:	2001      	movs	r0, #1
 8003614:	f000 f9e2 	bl	80039dc <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <remove_id_finger+0x178>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 800361e:	f000 f87b 	bl	8003718 <reset_fingerprint_module>
 8003622:	e00e      	b.n	8003642 <remove_id_finger+0x13a>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003624:	7ebb      	ldrb	r3, [r7, #26]
 8003626:	1d38      	adds	r0, r7, #4
 8003628:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <remove_id_finger+0x17c>)
 800362a:	2110      	movs	r1, #16
 800362c:	f009 fd88 	bl	800d140 <sniprintf>
        buzzer(5);
 8003630:	2005      	movs	r0, #5
 8003632:	f000 f9d3 	bl	80039dc <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	461a      	mov	r2, r3
 800363a:	4910      	ldr	r1, [pc, #64]	@ (800367c <remove_id_finger+0x174>)
 800363c:	4808      	ldr	r0, [pc, #32]	@ (8003660 <remove_id_finger+0x158>)
 800363e:	f7fc fedd 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003642:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003646:	f000 fed7 	bl	80043f8 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 800364a:	4805      	ldr	r0, [pc, #20]	@ (8003660 <remove_id_finger+0x158>)
 800364c:	f7fc fec6 	bl	80003dc <CLCD_I2C_Clear>
}
 8003650:	bf00      	nop
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	0800dd94 	.word	0x0800dd94
 800365c:	0800e290 	.word	0x0800e290
 8003660:	200003d8 	.word	0x200003d8
 8003664:	0800e194 	.word	0x0800e194
 8003668:	0800ddb0 	.word	0x0800ddb0
 800366c:	20000408 	.word	0x20000408
 8003670:	0800db30 	.word	0x0800db30
 8003674:	0800e2a4 	.word	0x0800e2a4
 8003678:	0800e2b4 	.word	0x0800e2b4
 800367c:	0800e2c4 	.word	0x0800e2c4
 8003680:	2000040a 	.word	0x2000040a
 8003684:	0800e2d4 	.word	0x0800e2d4

08003688 <remove_all_finger>:

void remove_all_finger()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 800368e:	4a1a      	ldr	r2, [pc, #104]	@ (80036f8 <remove_all_finger+0x70>)
 8003690:	491a      	ldr	r1, [pc, #104]	@ (80036fc <remove_all_finger+0x74>)
 8003692:	481b      	ldr	r0, [pc, #108]	@ (8003700 <remove_all_finger+0x78>)
 8003694:	f7fc feb2 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = empty();
 8003698:	f7fd fa64 	bl	8000b64 <empty>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <remove_all_finger+0x3a>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 80036a6:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <remove_all_finger+0x7c>)
 80036a8:	4917      	ldr	r1, [pc, #92]	@ (8003708 <remove_all_finger+0x80>)
 80036aa:	4815      	ldr	r0, [pc, #84]	@ (8003700 <remove_all_finger+0x78>)
 80036ac:	f7fc fea6 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 80036b0:	2001      	movs	r0, #1
 80036b2:	f000 f993 	bl	80039dc <buzzer>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <remove_all_finger+0x84>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 80036bc:	f000 f82c 	bl	8003718 <reset_fingerprint_module>
 80036c0:	e00e      	b.n	80036e0 <remove_all_finger+0x58>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	1d38      	adds	r0, r7, #4
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <remove_all_finger+0x88>)
 80036c8:	2110      	movs	r1, #16
 80036ca:	f009 fd39 	bl	800d140 <sniprintf>
        buzzer(5);
 80036ce:	2005      	movs	r0, #5
 80036d0:	f000 f984 	bl	80039dc <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	461a      	mov	r2, r3
 80036d8:	490e      	ldr	r1, [pc, #56]	@ (8003714 <remove_all_finger+0x8c>)
 80036da:	4809      	ldr	r0, [pc, #36]	@ (8003700 <remove_all_finger+0x78>)
 80036dc:	f7fc fe8e 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 80036e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80036e4:	f000 fe88 	bl	80043f8 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80036e8:	4805      	ldr	r0, [pc, #20]	@ (8003700 <remove_all_finger+0x78>)
 80036ea:	f7fc fe77 	bl	80003dc <CLCD_I2C_Clear>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	0800e2e8 	.word	0x0800e2e8
 80036fc:	0800e2f8 	.word	0x0800e2f8
 8003700:	200003d8 	.word	0x200003d8
 8003704:	0800e308 	.word	0x0800e308
 8003708:	0800e318 	.word	0x0800e318
 800370c:	2000040a 	.word	0x2000040a
 8003710:	0800e2d4 	.word	0x0800e2d4
 8003714:	0800e2c4 	.word	0x0800e2c4

08003718 <reset_fingerprint_module>:

void reset_fingerprint_module()
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
    // This can be a hardware reset or a software reset command
    // Example:
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_RESET);
    // HAL_Delay(100);
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_SET);
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <startface>:
void startface(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8003728:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <startface+0x5c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b25b      	sxtb	r3, r3
 800372e:	2b59      	cmp	r3, #89	@ 0x59
 8003730:	d10e      	bne.n	8003750 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 8003732:	4814      	ldr	r0, [pc, #80]	@ (8003784 <startface+0x60>)
 8003734:	f7fc fe52 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	4811      	ldr	r0, [pc, #68]	@ (8003784 <startface+0x60>)
 800373e:	f7fc fde3 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8003742:	4911      	ldr	r1, [pc, #68]	@ (8003788 <startface+0x64>)
 8003744:	480f      	ldr	r0, [pc, #60]	@ (8003784 <startface+0x60>)
 8003746:	f7fc fe32 	bl	80003ae <CLCD_I2C_WriteString>
        opendoor();
 800374a:	f000 f8f7 	bl	800393c <opendoor>
 800374e:	e010      	b.n	8003772 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <startface+0x5c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b25b      	sxtb	r3, r3
 8003756:	2b4e      	cmp	r3, #78	@ 0x4e
 8003758:	d10b      	bne.n	8003772 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 800375a:	4a0c      	ldr	r2, [pc, #48]	@ (800378c <startface+0x68>)
 800375c:	490c      	ldr	r1, [pc, #48]	@ (8003790 <startface+0x6c>)
 800375e:	4809      	ldr	r0, [pc, #36]	@ (8003784 <startface+0x60>)
 8003760:	f7fc fe4c 	bl	80003fc <CLCD_I2C_Display>
		buzzer(5);
 8003764:	2005      	movs	r0, #5
 8003766:	f000 f939 	bl	80039dc <buzzer>
        HAL_Delay(2000);
 800376a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800376e:	f000 fe43 	bl	80043f8 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	2100      	movs	r1, #0
 8003776:	4802      	ldr	r0, [pc, #8]	@ (8003780 <startface+0x5c>)
 8003778:	f009 fd36 	bl	800d1e8 <memset>
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000350 	.word	0x20000350
 8003784:	200003d8 	.word	0x200003d8
 8003788:	0800db44 	.word	0x0800db44
 800378c:	0800e328 	.word	0x0800e328
 8003790:	0800e338 	.word	0x0800e338

08003794 <enter_password>:

void enter_password(char *password) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e01c      	b.n	80037dc <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 80037a2:	200a      	movs	r0, #10
 80037a4:	f7fc ff84 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80037a8:	4603      	mov	r3, r0
 80037aa:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f7      	beq.n	80037a2 <enter_password+0xe>
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80037b6:	d9f4      	bls.n	80037a2 <enter_password+0xe>
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	2b39      	cmp	r3, #57	@ 0x39
 80037bc:	d8f1      	bhi.n	80037a2 <enter_password+0xe>
        buzzer(1);
 80037be:	2001      	movs	r0, #1
 80037c0:	f000 f90c 	bl	80039dc <buzzer>
        password[i] = key;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	7afa      	ldrb	r2, [r7, #11]
 80037cc:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 80037ce:	212a      	movs	r1, #42	@ 0x2a
 80037d0:	4808      	ldr	r0, [pc, #32]	@ (80037f4 <enter_password+0x60>)
 80037d2:	f7fc fddc 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	dddf      	ble.n	80037a2 <enter_password+0xe>
    }
    password[6] = '\0';
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3306      	adds	r3, #6
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200003d8 	.word	0x200003d8

080037f8 <change_password>:

void change_password(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 80037fe:	2300      	movs	r3, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2100      	movs	r1, #0
 8003806:	460a      	mov	r2, r1
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	460a      	mov	r2, r1
 800380c:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 800380e:	4a11      	ldr	r2, [pc, #68]	@ (8003854 <change_password+0x5c>)
 8003810:	4911      	ldr	r1, [pc, #68]	@ (8003858 <change_password+0x60>)
 8003812:	4812      	ldr	r0, [pc, #72]	@ (800385c <change_password+0x64>)
 8003814:	f7fc fdf2 	bl	80003fc <CLCD_I2C_Display>
    enter_password(new_password);
 8003818:	463b      	mov	r3, r7
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ffba 	bl	8003794 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003820:	480f      	ldr	r0, [pc, #60]	@ (8003860 <change_password+0x68>)
 8003822:	f7fd fa0d 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 8003826:	463b      	mov	r3, r7
 8003828:	2206      	movs	r2, #6
 800382a:	4619      	mov	r1, r3
 800382c:	480c      	ldr	r0, [pc, #48]	@ (8003860 <change_password+0x68>)
 800382e:	f7fd fa3b 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 8003832:	4a0c      	ldr	r2, [pc, #48]	@ (8003864 <change_password+0x6c>)
 8003834:	490c      	ldr	r1, [pc, #48]	@ (8003868 <change_password+0x70>)
 8003836:	4809      	ldr	r0, [pc, #36]	@ (800385c <change_password+0x64>)
 8003838:	f7fc fde0 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 800383c:	2001      	movs	r0, #1
 800383e:	f000 f8cd 	bl	80039dc <buzzer>
    HAL_Delay(2000);
 8003842:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003846:	f000 fdd7 	bl	80043f8 <HAL_Delay>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	0800e348 	.word	0x0800e348
 8003858:	0800e350 	.word	0x0800e350
 800385c:	200003d8 	.word	0x200003d8
 8003860:	0800f400 	.word	0x0800f400
 8003864:	0800e308 	.word	0x0800e308
 8003868:	0800e360 	.word	0x0800e360

0800386c <check_password>:

uint8_t check_password(char *password) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2100      	movs	r1, #0
 800387e:	460a      	mov	r2, r1
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	460a      	mov	r2, r1
 8003884:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	2206      	movs	r2, #6
 800388c:	4619      	mov	r1, r3
 800388e:	480a      	ldr	r0, [pc, #40]	@ (80038b8 <check_password+0x4c>)
 8003890:	f7fd fa52 	bl	8000d38 <Flash_Read_Array>
    stored_password[6] = '\0';
 8003894:	2300      	movs	r3, #0
 8003896:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc fc54 	bl	800014c <strcmp>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	0800f400 	.word	0x0800f400

080038bc <set_default_password>:

void set_default_password(void) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 80038c2:	4a16      	ldr	r2, [pc, #88]	@ (800391c <set_default_password+0x60>)
 80038c4:	463b      	mov	r3, r7
 80038c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038ca:	6018      	str	r0, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 80038d0:	4813      	ldr	r0, [pc, #76]	@ (8003920 <set_default_password+0x64>)
 80038d2:	f7fd f9b5 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 80038d6:	463b      	mov	r3, r7
 80038d8:	2206      	movs	r2, #6
 80038da:	4619      	mov	r1, r3
 80038dc:	4810      	ldr	r0, [pc, #64]	@ (8003920 <set_default_password+0x64>)
 80038de:	f7fd f9e3 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 80038e2:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <set_default_password+0x68>)
 80038e4:	4910      	ldr	r1, [pc, #64]	@ (8003928 <set_default_password+0x6c>)
 80038e6:	4811      	ldr	r0, [pc, #68]	@ (800392c <set_default_password+0x70>)
 80038e8:	f7fc fd88 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f000 f875 	bl	80039dc <buzzer>
    HAL_Delay(1500);
 80038f2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80038f6:	f000 fd7f 	bl	80043f8 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 80038fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <set_default_password+0x74>)
 80038fc:	490d      	ldr	r1, [pc, #52]	@ (8003934 <set_default_password+0x78>)
 80038fe:	480b      	ldr	r0, [pc, #44]	@ (800392c <set_default_password+0x70>)
 8003900:	f7fc fd7c 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003904:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003908:	f000 fd76 	bl	80043f8 <HAL_Delay>
    exitmenu=0;
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <set_default_password+0x7c>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0800e3a0 	.word	0x0800e3a0
 8003920:	0800f400 	.word	0x0800f400
 8003924:	0800e308 	.word	0x0800e308
 8003928:	0800e374 	.word	0x0800e374
 800392c:	200003d8 	.word	0x200003d8
 8003930:	0800e384 	.word	0x0800e384
 8003934:	0800e390 	.word	0x0800e390
 8003938:	20000020 	.word	0x20000020

0800393c <opendoor>:

void opendoor(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
    buzzer(1);
 8003942:	2001      	movs	r0, #1
 8003944:	f000 f84a 	bl	80039dc <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003948:	2201      	movs	r2, #1
 800394a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800394e:	481e      	ldr	r0, [pc, #120]	@ (80039c8 <opendoor+0x8c>)
 8003950:	f001 fa1f 	bl	8004d92 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 8003954:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003958:	f000 fd4e 	bl	80043f8 <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 800395c:	f000 fd42 	bl	80043e4 <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003962:	e01b      	b.n	800399c <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 8003964:	f000 fd3e 	bl	80043e4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 8003972:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <opendoor+0x90>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 800397c:	4638      	mov	r0, r7
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <opendoor+0x94>)
 8003982:	2110      	movs	r1, #16
 8003984:	f009 fbdc 	bl	800d140 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 8003988:	463b      	mov	r3, r7
 800398a:	461a      	mov	r2, r3
 800398c:	4911      	ldr	r1, [pc, #68]	@ (80039d4 <opendoor+0x98>)
 800398e:	4812      	ldr	r0, [pc, #72]	@ (80039d8 <opendoor+0x9c>)
 8003990:	f7fc fd34 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003994:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003998:	f000 fd2e 	bl	80043f8 <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 800399c:	f000 fd22 	bl	80043e4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d9da      	bls.n	8003964 <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80039b4:	4804      	ldr	r0, [pc, #16]	@ (80039c8 <opendoor+0x8c>)
 80039b6:	f001 f9ec 	bl	8004d92 <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 80039ba:	4807      	ldr	r0, [pc, #28]	@ (80039d8 <opendoor+0x9c>)
 80039bc:	f7fc fd0e 	bl	80003dc <CLCD_I2C_Clear>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40010800 	.word	0x40010800
 80039cc:	10624dd3 	.word	0x10624dd3
 80039d0:	0800e3a8 	.word	0x0800e3a8
 80039d4:	0800e3b4 	.word	0x0800e3b4
 80039d8:	200003d8 	.word	0x200003d8

080039dc <buzzer>:
void buzzer( uint8_t countbeep)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 80039e6:	e011      	b.n	8003a0c <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039ee:	480c      	ldr	r0, [pc, #48]	@ (8003a20 <buzzer+0x44>)
 80039f0:	f001 f9cf 	bl	8004d92 <HAL_GPIO_WritePin>
		HAL_Delay(120);
 80039f4:	2078      	movs	r0, #120	@ 0x78
 80039f6:	f000 fcff 	bl	80043f8 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 80039fa:	2201      	movs	r2, #1
 80039fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a00:	4807      	ldr	r0, [pc, #28]	@ (8003a20 <buzzer+0x44>)
 8003a02:	f001 f9c6 	bl	8004d92 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003a06:	2032      	movs	r0, #50	@ 0x32
 8003a08:	f000 fcf6 	bl	80043f8 <HAL_Delay>
	while(countbeep--)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	71fa      	strb	r2, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e8      	bne.n	80039e8 <buzzer+0xc>
	}
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40010800 	.word	0x40010800

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <Error_Handler+0x8>

08003a30 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003a3e:	bf00      	nop
 8003a40:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <TM_SPI_Send+0x4c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d1f8      	bne.n	8003a40 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003a4e:	f107 0208 	add.w	r2, r7, #8
 8003a52:	f107 010c 	add.w	r1, r7, #12
 8003a56:	230a      	movs	r3, #10
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4807      	ldr	r0, [pc, #28]	@ (8003a7c <TM_SPI_Send+0x4c>)
 8003a5e:	f003 feff 	bl	8007860 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003a62:	bf00      	nop
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <TM_SPI_Send+0x4c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d0f8      	beq.n	8003a64 <TM_SPI_Send+0x34>
	return data_re[0];
 8003a72:	7a3b      	ldrb	r3, [r7, #8]

}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000270 	.word	0x20000270

08003a80 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003a84:	f000 f8d5 	bl	8003c32 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003a88:	218d      	movs	r1, #141	@ 0x8d
 8003a8a:	202a      	movs	r0, #42	@ 0x2a
 8003a8c:	f000 f836 	bl	8003afc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003a90:	213e      	movs	r1, #62	@ 0x3e
 8003a92:	202b      	movs	r0, #43	@ 0x2b
 8003a94:	f000 f832 	bl	8003afc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003a98:	211e      	movs	r1, #30
 8003a9a:	202d      	movs	r0, #45	@ 0x2d
 8003a9c:	f000 f82e 	bl	8003afc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	202c      	movs	r0, #44	@ 0x2c
 8003aa4:	f000 f82a 	bl	8003afc <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003aa8:	2170      	movs	r1, #112	@ 0x70
 8003aaa:	2026      	movs	r0, #38	@ 0x26
 8003aac:	f000 f826 	bl	8003afc <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003ab0:	2140      	movs	r1, #64	@ 0x40
 8003ab2:	2015      	movs	r0, #21
 8003ab4:	f000 f822 	bl	8003afc <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003ab8:	213d      	movs	r1, #61	@ 0x3d
 8003aba:	2011      	movs	r0, #17
 8003abc:	f000 f81e 	bl	8003afc <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003ac0:	f000 f8a2 	bl	8003c08 <TM_MFRC522_AntennaOn>
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	2026      	movs	r0, #38	@ 0x26
 8003ad4:	f000 f8b5 	bl	8003c42 <TM_MFRC522_Request>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9a1 	bl	8003e2a <TM_MFRC522_Anticoll>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003aec:	f000 fa23 	bl	8003f36 <TM_MFRC522_Halt>
	return status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	460a      	mov	r2, r1
 8003b06:	71fb      	strb	r3, [r7, #7]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2110      	movs	r1, #16
 8003b10:	480c      	ldr	r0, [pc, #48]	@ (8003b44 <TM_MFRC522_WriteRegister+0x48>)
 8003b12:	f001 f93e 	bl	8004d92 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff84 	bl	8003a30 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003b28:	79bb      	ldrb	r3, [r7, #6]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff80 	bl	8003a30 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003b30:	2201      	movs	r2, #1
 8003b32:	2110      	movs	r1, #16
 8003b34:	4803      	ldr	r0, [pc, #12]	@ (8003b44 <TM_MFRC522_WriteRegister+0x48>)
 8003b36:	f001 f92c 	bl	8004d92 <HAL_GPIO_WritePin>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40010800 	.word	0x40010800

08003b48 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003b52:	2200      	movs	r2, #0
 8003b54:	2110      	movs	r1, #16
 8003b56:	480f      	ldr	r0, [pc, #60]	@ (8003b94 <TM_MFRC522_ReadRegister+0x4c>)
 8003b58:	f001 f91b 	bl	8004d92 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff5d 	bl	8003a30 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7ff ff5a 	bl	8003a30 <TM_SPI_Send>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003b80:	2201      	movs	r2, #1
 8003b82:	2110      	movs	r1, #16
 8003b84:	4803      	ldr	r0, [pc, #12]	@ (8003b94 <TM_MFRC522_ReadRegister+0x4c>)
 8003b86:	f001 f904 	bl	8004d92 <HAL_GPIO_WritePin>

	return val;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40010800 	.word	0x40010800

08003b98 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	71fb      	strb	r3, [r7, #7]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffcc 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79bb      	ldrb	r3, [r7, #6]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff9c 	bl	8003afc <TM_MFRC522_WriteRegister>
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffb2 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003be4:	4603      	mov	r3, r0
 8003be6:	b25a      	sxtb	r2, r3
 8003be8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	b25b      	sxtb	r3, r3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff7e 	bl	8003afc <TM_MFRC522_WriteRegister>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003c0e:	2014      	movs	r0, #20
 8003c10:	f7ff ff9a 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003c22:	2103      	movs	r1, #3
 8003c24:	2014      	movs	r0, #20
 8003c26:	f7ff ffb7 	bl	8003b98 <TM_MFRC522_SetBitMask>
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003c32:	b580      	push	{r7, lr}
 8003c34:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003c36:	210f      	movs	r1, #15
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7ff ff5f 	bl	8003afc <TM_MFRC522_WriteRegister>
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	4603      	mov	r3, r0
 8003c4a:	6039      	str	r1, [r7, #0]
 8003c4c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003c4e:	2107      	movs	r1, #7
 8003c50:	200d      	movs	r0, #13
 8003c52:	f7ff ff53 	bl	8003afc <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	79fa      	ldrb	r2, [r7, #7]
 8003c5a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	200c      	movs	r0, #12
 8003c6a:	f000 f80f 	bl	8003c8c <TM_MFRC522_ToCard>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <TM_MFRC522_Request+0x3c>
 8003c78:	89bb      	ldrh	r3, [r7, #12]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d001      	beq.n	8003c82 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	4603      	mov	r3, r0
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d006      	beq.n	8003cbe <TM_MFRC522_ToCard+0x32>
 8003cb0:	2b0e      	cmp	r3, #14
 8003cb2:	d109      	bne.n	8003cc8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003cb4:	2312      	movs	r3, #18
 8003cb6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003cb8:	2310      	movs	r3, #16
 8003cba:	757b      	strb	r3, [r7, #21]
			break;
 8003cbc:	e005      	b.n	8003cca <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003cbe:	2377      	movs	r3, #119	@ 0x77
 8003cc0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003cc2:	2330      	movs	r3, #48	@ 0x30
 8003cc4:	757b      	strb	r3, [r7, #21]
			break;
 8003cc6:	e000      	b.n	8003cca <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003cc8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003cca:	7dbb      	ldrb	r3, [r7, #22]
 8003ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f7ff ff11 	bl	8003afc <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	2004      	movs	r0, #4
 8003cde:	f7ff ff75 	bl	8003bcc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003ce2:	2180      	movs	r1, #128	@ 0x80
 8003ce4:	200a      	movs	r0, #10
 8003ce6:	f7ff ff57 	bl	8003b98 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003cea:	2100      	movs	r1, #0
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7ff ff05 	bl	8003afc <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	827b      	strh	r3, [r7, #18]
 8003cf6:	e00a      	b.n	8003d0e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	2009      	movs	r0, #9
 8003d04:	f7ff fefa 	bl	8003afc <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003d08:	8a7b      	ldrh	r3, [r7, #18]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	827b      	strh	r3, [r7, #18]
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	8a7a      	ldrh	r2, [r7, #18]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d3ef      	bcc.n	8003cf8 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7ff feed 	bl	8003afc <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d103      	bne.n	8003d30 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	200d      	movs	r0, #13
 8003d2c:	f7ff ff34 	bl	8003b98 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003d30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003d34:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003d36:	2004      	movs	r0, #4
 8003d38:	f7ff ff06 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	753b      	strb	r3, [r7, #20]
		i--;
 8003d40:	8a7b      	ldrh	r3, [r7, #18]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003d46:	8a7b      	ldrh	r3, [r7, #18]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <TM_MFRC522_ToCard+0xd6>
 8003d4c:	7d3b      	ldrb	r3, [r7, #20]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <TM_MFRC522_ToCard+0xd6>
 8003d56:	7d3a      	ldrb	r2, [r7, #20]
 8003d58:	7d7b      	ldrb	r3, [r7, #21]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0e9      	beq.n	8003d36 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003d62:	2180      	movs	r1, #128	@ 0x80
 8003d64:	200d      	movs	r0, #13
 8003d66:	f7ff ff31 	bl	8003bcc <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003d6a:	8a7b      	ldrh	r3, [r7, #18]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d057      	beq.n	8003e20 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003d70:	2006      	movs	r0, #6
 8003d72:	f7ff fee9 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f003 031b 	and.w	r3, r3, #27
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d14d      	bne.n	8003e1c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003d84:	7d3a      	ldrb	r2, [r7, #20]
 8003d86:	7dbb      	ldrb	r3, [r7, #22]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d140      	bne.n	8003e20 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003d9e:	200a      	movs	r0, #10
 8003da0:	f7ff fed2 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003da4:	4603      	mov	r3, r0
 8003da6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003da8:	200c      	movs	r0, #12
 8003daa:	f7ff fecd 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003db6:	7c7b      	ldrb	r3, [r7, #17]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003dbc:	7d3b      	ldrb	r3, [r7, #20]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	7c7b      	ldrb	r3, [r7, #17]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e005      	b.n	8003de0 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003dd4:	7d3b      	ldrb	r3, [r7, #20]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003de0:	7d3b      	ldrb	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003dea:	7d3b      	ldrb	r3, [r7, #20]
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d901      	bls.n	8003df4 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003df0:	2310      	movs	r3, #16
 8003df2:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003df4:	2300      	movs	r3, #0
 8003df6:	827b      	strh	r3, [r7, #18]
 8003df8:	e00a      	b.n	8003e10 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003dfa:	8a7b      	ldrh	r3, [r7, #18]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	18d4      	adds	r4, r2, r3
 8003e00:	2009      	movs	r0, #9
 8003e02:	f7ff fea1 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003e06:	4603      	mov	r3, r0
 8003e08:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003e0a:	8a7b      	ldrh	r3, [r7, #18]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	827b      	strh	r3, [r7, #18]
 8003e10:	7d3b      	ldrb	r3, [r7, #20]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8a7a      	ldrh	r2, [r7, #18]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3ef      	bcc.n	8003dfa <TM_MFRC522_ToCard+0x16e>
 8003e1a:	e001      	b.n	8003e20 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}

08003e2a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003e36:	2100      	movs	r1, #0
 8003e38:	200d      	movs	r0, #13
 8003e3a:	f7ff fe5f 	bl	8003afc <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2293      	movs	r2, #147	@ 0x93
 8003e42:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	2220      	movs	r2, #32
 8003e4a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003e4c:	f107 030a 	add.w	r3, r7, #10
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	200c      	movs	r0, #12
 8003e5a:	f7ff ff17 	bl	8003c8c <TM_MFRC522_ToCard>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d118      	bne.n	8003e9a <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73bb      	strb	r3, [r7, #14]
 8003e6c:	e009      	b.n	8003e82 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	4053      	eors	r3, r2
 8003e7a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003e7c:	7bbb      	ldrb	r3, [r7, #14]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	73bb      	strb	r3, [r7, #14]
 8003e82:	7bbb      	ldrb	r3, [r7, #14]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d9f2      	bls.n	8003e6e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003e88:	7bbb      	ldrb	r3, [r7, #14]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	7b7a      	ldrb	r2, [r7, #13]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8003e96:	2302      	movs	r3, #2
 8003e98:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	460b      	mov	r3, r1
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	2005      	movs	r0, #5
 8003eb6:	f7ff fe89 	bl	8003bcc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	200a      	movs	r0, #10
 8003ebe:	f7ff fe6b 	bl	8003b98 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
 8003ec6:	e00a      	b.n	8003ede <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	2009      	movs	r0, #9
 8003ed4:	f7ff fe12 	bl	8003afc <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	3301      	adds	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
 8003ede:	7dfa      	ldrb	r2, [r7, #23]
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3f0      	bcc.n	8003ec8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f7ff fe07 	bl	8003afc <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003eee:	23ff      	movs	r3, #255	@ 0xff
 8003ef0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f7ff fe28 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75bb      	strb	r3, [r7, #22]
		i--;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <TM_MFRC522_CalculateCRC+0x6e>
 8003f08:	7dbb      	ldrb	r3, [r7, #22]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ef      	beq.n	8003ef2 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003f12:	2022      	movs	r0, #34	@ 0x22
 8003f14:	f7ff fe18 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1c5c      	adds	r4, r3, #1
 8003f24:	2021      	movs	r0, #33	@ 0x21
 8003f26:	f7ff fe0f 	bl	8003b48 <TM_MFRC522_ReadRegister>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	7023      	strb	r3, [r4, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}

08003f36 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003f3c:	2350      	movs	r3, #80	@ 0x50
 8003f3e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003f44:	463b      	mov	r3, r7
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	463b      	mov	r3, r7
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ffa9 	bl	8003ea4 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003f52:	463a      	mov	r2, r7
 8003f54:	4639      	mov	r1, r7
 8003f56:	1dbb      	adds	r3, r7, #6
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	200c      	movs	r0, #12
 8003f60:	f7ff fe94 	bl	8003c8c <TM_MFRC522_ToCard>



}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f72:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6193      	str	r3, [r2, #24]
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <HAL_MspInit+0x5c>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <HAL_MspInit+0x60>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	@ (8003fcc <HAL_MspInit+0x60>)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 0310 	add.w	r3, r7, #16
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <HAL_I2C_MspInit+0x74>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d124      	bne.n	800403a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff0:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8003ff6:	f043 0308 	orr.w	r3, r3, #8
 8003ffa:	6193      	str	r3, [r2, #24]
 8003ffc:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004008:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800400c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400e:	2312      	movs	r3, #18
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004016:	f107 0310 	add.w	r3, r7, #16
 800401a:	4619      	mov	r1, r3
 800401c:	480b      	ldr	r0, [pc, #44]	@ (800404c <HAL_I2C_MspInit+0x7c>)
 800401e:	f000 fd1d 	bl	8004a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8004028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800402c:	61d3      	str	r3, [r2, #28]
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_I2C_MspInit+0x78>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800403a:	bf00      	nop
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40005800 	.word	0x40005800
 8004048:	40021000 	.word	0x40021000
 800404c:	40010c00 	.word	0x40010c00

08004050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0310 	add.w	r3, r7, #16
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <HAL_SPI_MspInit+0x88>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d12f      	bne.n	80040d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004070:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 8004076:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800407a:	6193      	str	r3, [r2, #24]
 800407c:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	4a13      	ldr	r2, [pc, #76]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	6193      	str	r3, [r2, #24]
 8004094:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_SPI_MspInit+0x8c>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80040a0:	23a0      	movs	r3, #160	@ 0xa0
 80040a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a4:	2302      	movs	r3, #2
 80040a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040a8:	2303      	movs	r3, #3
 80040aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 0310 	add.w	r3, r7, #16
 80040b0:	4619      	mov	r1, r3
 80040b2:	480b      	ldr	r0, [pc, #44]	@ (80040e0 <HAL_SPI_MspInit+0x90>)
 80040b4:	f000 fcd2 	bl	8004a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040b8:	2340      	movs	r3, #64	@ 0x40
 80040ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	4619      	mov	r1, r3
 80040ca:	4805      	ldr	r0, [pc, #20]	@ (80040e0 <HAL_SPI_MspInit+0x90>)
 80040cc:	f000 fcc6 	bl	8004a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040d0:	bf00      	nop
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40013000 	.word	0x40013000
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40010800 	.word	0x40010800

080040e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d113      	bne.n	800411e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <HAL_TIM_Base_MspInit+0x44>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004128 <HAL_TIM_Base_MspInit+0x44>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	61d3      	str	r3, [r2, #28]
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_TIM_Base_MspInit+0x44>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	201c      	movs	r0, #28
 8004114:	f000 fa6b 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004118:	201c      	movs	r0, #28
 800411a:	f000 fa84 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a22      	ldr	r2, [pc, #136]	@ (80041d0 <HAL_UART_MspInit+0xa4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d13d      	bne.n	80041c8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	4a20      	ldr	r2, [pc, #128]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 8004152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004156:	6193      	str	r3, [r2, #24]
 8004158:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4a1a      	ldr	r2, [pc, #104]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	6193      	str	r3, [r2, #24]
 8004170:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <HAL_UART_MspInit+0xa8>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800417c:	2340      	movs	r3, #64	@ 0x40
 800417e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004184:	2303      	movs	r3, #3
 8004186:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	4812      	ldr	r0, [pc, #72]	@ (80041d8 <HAL_UART_MspInit+0xac>)
 8004190:	f000 fc64 	bl	8004a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	4619      	mov	r1, r3
 80041a6:	480c      	ldr	r0, [pc, #48]	@ (80041d8 <HAL_UART_MspInit+0xac>)
 80041a8:	f000 fc58 	bl	8004a5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_UART_MspInit+0xb0>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c2:	4a06      	ldr	r2, [pc, #24]	@ (80041dc <HAL_UART_MspInit+0xb0>)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80041c8:	bf00      	nop
 80041ca:	3728      	adds	r7, #40	@ 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013800 	.word	0x40013800
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40010c00 	.word	0x40010c00
 80041dc:	40010000 	.word	0x40010000

080041e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <NMI_Handler+0x4>

080041e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <HardFault_Handler+0x4>

080041f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <MemManage_Handler+0x4>

080041f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <BusFault_Handler+0x4>

08004200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <UsageFault_Handler+0x4>

08004208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004230:	f000 f8c6 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800423c:	4802      	ldr	r0, [pc, #8]	@ (8004248 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800423e:	f001 fb5e 	bl	80058fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200010d0 	.word	0x200010d0

0800424c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004250:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004254:	f000 fdb6 	bl	8004dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004260:	4802      	ldr	r0, [pc, #8]	@ (800426c <TIM2_IRQHandler+0x10>)
 8004262:	f003 fde7 	bl	8007e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200002c8 	.word	0x200002c8

08004270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004278:	4a14      	ldr	r2, [pc, #80]	@ (80042cc <_sbrk+0x5c>)
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <_sbrk+0x60>)
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004284:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <_sbrk+0x64>)
 800428e:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <_sbrk+0x68>)
 8004290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <_sbrk+0x64>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d207      	bcs.n	80042b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042a0:	f008 ffaa 	bl	800d1f8 <__errno>
 80042a4:	4603      	mov	r3, r0
 80042a6:	220c      	movs	r2, #12
 80042a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
 80042ae:	e009      	b.n	80042c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <_sbrk+0x64>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042b6:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	4a05      	ldr	r2, [pc, #20]	@ (80042d4 <_sbrk+0x64>)
 80042c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042c2:	68fb      	ldr	r3, [r7, #12]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20005000 	.word	0x20005000
 80042d0:	00000400 	.word	0x00000400
 80042d4:	2000040c 	.word	0x2000040c
 80042d8:	20001728 	.word	0x20001728

080042dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80042e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80042ea:	e003      	b.n	80042f4 <LoopCopyDataInit>

080042ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80042ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042f2:	3104      	adds	r1, #4

080042f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80042f4:	480a      	ldr	r0, [pc, #40]	@ (8004320 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80042f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80042fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80042fc:	d3f6      	bcc.n	80042ec <CopyDataInit>
  ldr r2, =_sbss
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004300:	e002      	b.n	8004308 <LoopFillZerobss>

08004302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004304:	f842 3b04 	str.w	r3, [r2], #4

08004308 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004308:	4b08      	ldr	r3, [pc, #32]	@ (800432c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800430a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800430c:	d3f9      	bcc.n	8004302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800430e:	f7ff ffe5 	bl	80042dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004312:	f008 ff77 	bl	800d204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004316:	f7fc fd6f 	bl	8000df8 <main>
  bx lr
 800431a:	4770      	bx	lr
  ldr r3, =_sidata
 800431c:	0800e58c 	.word	0x0800e58c
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004324:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004328:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 800432c:	20001724 	.word	0x20001724

08004330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC1_2_IRQHandler>
	...

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_Init+0x28>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a07      	ldr	r2, [pc, #28]	@ (800435c <HAL_Init+0x28>)
 800433e:	f043 0310 	orr.w	r3, r3, #16
 8004342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004344:	2003      	movs	r0, #3
 8004346:	f000 f947 	bl	80045d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800434a:	2000      	movs	r0, #0
 800434c:	f000 f808 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004350:	f7ff fe0c 	bl	8003f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_InitTick+0x54>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_InitTick+0x58>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004376:	fbb3 f3f1 	udiv	r3, r3, r1
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f95f 	bl	8004642 <HAL_SYSTICK_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00e      	b.n	80043ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80a      	bhi.n	80043aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f000 f927 	bl	80045ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a0:	4a06      	ldr	r2, [pc, #24]	@ (80043bc <HAL_InitTick+0x5c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000028 	.word	0x20000028
 80043b8:	20000030 	.word	0x20000030
 80043bc:	2000002c 	.word	0x2000002c

080043c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_IncTick+0x1c>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_IncTick+0x20>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a03      	ldr	r2, [pc, #12]	@ (80043e0 <HAL_IncTick+0x20>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	20000030 	.word	0x20000030
 80043e0:	20000410 	.word	0x20000410

080043e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b02      	ldr	r3, [pc, #8]	@ (80043f4 <HAL_GetTick+0x10>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	20000410 	.word	0x20000410

080043f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff fff0 	bl	80043e4 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d005      	beq.n	800441e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_Delay+0x44>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800441e:	bf00      	nop
 8004420:	f7ff ffe0 	bl	80043e4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f7      	bhi.n	8004420 <HAL_Delay+0x28>
  {
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000030 	.word	0x20000030

08004440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800446c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004472:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	60d3      	str	r3, [r2, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <__NVIC_GetPriorityGrouping+0x18>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	db0b      	blt.n	80044ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4906      	ldr	r1, [pc, #24]	@ (80044d8 <__NVIC_EnableIRQ+0x34>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2001      	movs	r0, #1
 80044c6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db0a      	blt.n	8004506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	490c      	ldr	r1, [pc, #48]	@ (8004528 <__NVIC_SetPriority+0x4c>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	440b      	add	r3, r1
 8004500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004504:	e00a      	b.n	800451c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4908      	ldr	r1, [pc, #32]	@ (800452c <__NVIC_SetPriority+0x50>)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3b04      	subs	r3, #4
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	440b      	add	r3, r1
 800451a:	761a      	strb	r2, [r3, #24]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	@ 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	bf28      	it	cs
 800454e:	2304      	movcs	r3, #4
 8004550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3304      	adds	r3, #4
 8004556:	2b06      	cmp	r3, #6
 8004558:	d902      	bls.n	8004560 <NVIC_EncodePriority+0x30>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3b03      	subs	r3, #3
 800455e:	e000      	b.n	8004562 <NVIC_EncodePriority+0x32>
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004578:	f04f 31ff 	mov.w	r1, #4294967295
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43d9      	mvns	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	4313      	orrs	r3, r2
         );
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	@ 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045a4:	d301      	bcc.n	80045aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045aa:	4a0a      	ldr	r2, [pc, #40]	@ (80045d4 <SysTick_Config+0x40>)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b2:	210f      	movs	r1, #15
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f7ff ff90 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <SysTick_Config+0x40>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c2:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <SysTick_Config+0x40>)
 80045c4:	2207      	movs	r2, #7
 80045c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000e010 	.word	0xe000e010

080045d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff2d 	bl	8004440 <__NVIC_SetPriorityGrouping>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004600:	f7ff ff42 	bl	8004488 <__NVIC_GetPriorityGrouping>
 8004604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7ff ff90 	bl	8004530 <NVIC_EncodePriority>
 8004610:	4602      	mov	r2, r0
 8004612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff5f 	bl	80044dc <__NVIC_SetPriority>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff35 	bl	80044a4 <__NVIC_EnableIRQ>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ffa2 	bl	8004594 <SysTick_Config>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004676:	4b2f      	ldr	r3, [pc, #188]	@ (8004734 <HAL_FLASH_Program+0xd8>)
 8004678:	7e1b      	ldrb	r3, [r3, #24]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_FLASH_Program+0x26>
 800467e:	2302      	movs	r3, #2
 8004680:	e054      	b.n	800472c <HAL_FLASH_Program+0xd0>
 8004682:	4b2c      	ldr	r3, [pc, #176]	@ (8004734 <HAL_FLASH_Program+0xd8>)
 8004684:	2201      	movs	r2, #1
 8004686:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004688:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800468c:	f000 f8a8 	bl	80047e0 <FLASH_WaitForLastOperation>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d144      	bne.n	8004724 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80046a0:	2301      	movs	r3, #1
 80046a2:	757b      	strb	r3, [r7, #21]
 80046a4:	e007      	b.n	80046b6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d102      	bne.n	80046b2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80046ac:	2302      	movs	r3, #2
 80046ae:	757b      	strb	r3, [r7, #21]
 80046b0:	e001      	b.n	80046b6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80046b2:	2304      	movs	r3, #4
 80046b4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	75bb      	strb	r3, [r7, #22]
 80046ba:	e02d      	b.n	8004718 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80046bc:	7dbb      	ldrb	r3, [r7, #22]
 80046be:	005a      	lsls	r2, r3, #1
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	eb02 0c03 	add.w	ip, r2, r3
 80046c6:	7dbb      	ldrb	r3, [r7, #22]
 80046c8:	0119      	lsls	r1, r3, #4
 80046ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ce:	f1c1 0620 	rsb	r6, r1, #32
 80046d2:	f1a1 0020 	sub.w	r0, r1, #32
 80046d6:	fa22 f401 	lsr.w	r4, r2, r1
 80046da:	fa03 f606 	lsl.w	r6, r3, r6
 80046de:	4334      	orrs	r4, r6
 80046e0:	fa23 f000 	lsr.w	r0, r3, r0
 80046e4:	4304      	orrs	r4, r0
 80046e6:	fa23 f501 	lsr.w	r5, r3, r1
 80046ea:	b2a3      	uxth	r3, r4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4660      	mov	r0, ip
 80046f0:	f000 f85a 	bl	80047a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80046f8:	f000 f872 	bl	80047e0 <FLASH_WaitForLastOperation>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004700:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_FLASH_Program+0xdc>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <HAL_FLASH_Program+0xdc>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004712:	7dbb      	ldrb	r3, [r7, #22]
 8004714:	3301      	adds	r3, #1
 8004716:	75bb      	strb	r3, [r7, #22]
 8004718:	7dba      	ldrb	r2, [r7, #22]
 800471a:	7d7b      	ldrb	r3, [r7, #21]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3cd      	bcc.n	80046bc <HAL_FLASH_Program+0x60>
 8004720:	e000      	b.n	8004724 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004722:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004724:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <HAL_FLASH_Program+0xd8>)
 8004726:	2200      	movs	r2, #0
 8004728:	761a      	strb	r2, [r3, #24]

  return status;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004734:	20000418 	.word	0x20000418
 8004738:	40022000 	.word	0x40022000

0800473c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <HAL_FLASH_Unlock+0x40>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004752:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_FLASH_Unlock+0x40>)
 8004754:	4a0a      	ldr	r2, [pc, #40]	@ (8004780 <HAL_FLASH_Unlock+0x44>)
 8004756:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004758:	4b08      	ldr	r3, [pc, #32]	@ (800477c <HAL_FLASH_Unlock+0x40>)
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_FLASH_Unlock+0x48>)
 800475c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <HAL_FLASH_Unlock+0x40>)
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800476e:	79fb      	ldrb	r3, [r7, #7]
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	45670123 	.word	0x45670123
 8004784:	cdef89ab 	.word	0xcdef89ab

08004788 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_FLASH_Lock+0x1c>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_FLASH_Lock+0x1c>)
 8004792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004796:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40022000 	.word	0x40022000

080047a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <FLASH_Program_HalfWord+0x30>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <FLASH_Program_HalfWord+0x34>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	4a07      	ldr	r2, [pc, #28]	@ (80047dc <FLASH_Program_HalfWord+0x34>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	887a      	ldrh	r2, [r7, #2]
 80047ca:	801a      	strh	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000418 	.word	0x20000418
 80047dc:	40022000 	.word	0x40022000

080047e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80047e8:	f7ff fdfc 	bl	80043e4 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80047ee:	e010      	b.n	8004812 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d00c      	beq.n	8004812 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <FLASH_WaitForLastOperation+0x2e>
 80047fe:	f7ff fdf1 	bl	80043e4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	429a      	cmp	r2, r3
 800480c:	d201      	bcs.n	8004812 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e025      	b.n	800485e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e8      	bne.n	80047f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800482a:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 800482c:	2220      	movs	r2, #32
 800482e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004830:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004848:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <FLASH_WaitForLastOperation+0x88>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004854:	f000 f80a 	bl	800486c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40022000 	.word	0x40022000

0800486c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004876:	4b23      	ldr	r3, [pc, #140]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004882:	4b21      	ldr	r3, [pc, #132]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f043 0302 	orr.w	r3, r3, #2
 800488a:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 800488c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f043 0310 	orr.w	r3, r3, #16
 8004894:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004896:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80048a2:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 80048ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80048b6:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00b      	beq.n	80048da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80048c2:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f043 0304 	orr.w	r3, r3, #4
 80048ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004908 <FLASH_SetErrorCode+0x9c>)
 80048cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f240 1201 	movw	r2, #257	@ 0x101
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d106      	bne.n	80048f2 <FLASH_SetErrorCode+0x86>
 80048e4:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4a06      	ldr	r2, [pc, #24]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	61d3      	str	r3, [r2, #28]
}  
 80048f0:	e002      	b.n	80048f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80048f2:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <FLASH_SetErrorCode+0x98>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60d3      	str	r3, [r2, #12]
}  
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40022000 	.word	0x40022000
 8004908:	20000418 	.word	0x20000418

0800490c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800491e:	4b2f      	ldr	r3, [pc, #188]	@ (80049dc <HAL_FLASHEx_Erase+0xd0>)
 8004920:	7e1b      	ldrb	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_FLASHEx_Erase+0x1e>
 8004926:	2302      	movs	r3, #2
 8004928:	e053      	b.n	80049d2 <HAL_FLASHEx_Erase+0xc6>
 800492a:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <HAL_FLASHEx_Erase+0xd0>)
 800492c:	2201      	movs	r2, #1
 800492e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d116      	bne.n	8004966 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004938:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800493c:	f7ff ff50 	bl	80047e0 <FLASH_WaitForLastOperation>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d141      	bne.n	80049ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004946:	2001      	movs	r0, #1
 8004948:	f000 f84c 	bl	80049e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800494c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004950:	f7ff ff46 	bl	80047e0 <FLASH_WaitForLastOperation>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004958:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_FLASHEx_Erase+0xd4>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4a20      	ldr	r2, [pc, #128]	@ (80049e0 <HAL_FLASHEx_Erase+0xd4>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6113      	str	r3, [r2, #16]
 8004964:	e031      	b.n	80049ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004966:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800496a:	f7ff ff39 	bl	80047e0 <FLASH_WaitForLastOperation>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d12a      	bne.n	80049ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	e019      	b.n	80049b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004984:	68b8      	ldr	r0, [r7, #8]
 8004986:	f000 f849 	bl	8004a1c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800498a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800498e:	f7ff ff27 	bl	80047e0 <FLASH_WaitForLastOperation>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004996:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_FLASHEx_Erase+0xd4>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4a11      	ldr	r2, [pc, #68]	@ (80049e0 <HAL_FLASHEx_Erase+0xd4>)
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	601a      	str	r2, [r3, #0]
            break;
 80049ae:	e00c      	b.n	80049ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	029a      	lsls	r2, r3, #10
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	4413      	add	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3dc      	bcc.n	8004984 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049ca:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <HAL_FLASHEx_Erase+0xd0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	761a      	strb	r2, [r3, #24]

  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000418 	.word	0x20000418
 80049e0:	40022000 	.word	0x40022000

080049e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049ec:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <FLASH_MassErase+0x30>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <FLASH_MassErase+0x34>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <FLASH_MassErase+0x34>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <FLASH_MassErase+0x34>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	4a05      	ldr	r2, [pc, #20]	@ (8004a18 <FLASH_MassErase+0x34>)
 8004a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a08:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000418 	.word	0x20000418
 8004a18:	40022000 	.word	0x40022000

08004a1c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <FLASH_PageErase+0x38>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <FLASH_PageErase+0x3c>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a58 <FLASH_PageErase+0x3c>)
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004a36:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <FLASH_PageErase+0x3c>)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <FLASH_PageErase+0x3c>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4a05      	ldr	r2, [pc, #20]	@ (8004a58 <FLASH_PageErase+0x3c>)
 8004a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a46:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000418 	.word	0x20000418
 8004a58:	40022000 	.word	0x40022000

08004a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b08b      	sub	sp, #44	@ 0x2c
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a6e:	e169      	b.n	8004d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a70:	2201      	movs	r2, #1
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	f040 8158 	bne.w	8004d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a9a      	ldr	r2, [pc, #616]	@ (8004cfc <HAL_GPIO_Init+0x2a0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d05e      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
 8004a98:	4a98      	ldr	r2, [pc, #608]	@ (8004cfc <HAL_GPIO_Init+0x2a0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d875      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004a9e:	4a98      	ldr	r2, [pc, #608]	@ (8004d00 <HAL_GPIO_Init+0x2a4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d058      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
 8004aa4:	4a96      	ldr	r2, [pc, #600]	@ (8004d00 <HAL_GPIO_Init+0x2a4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d86f      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004aaa:	4a96      	ldr	r2, [pc, #600]	@ (8004d04 <HAL_GPIO_Init+0x2a8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d052      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
 8004ab0:	4a94      	ldr	r2, [pc, #592]	@ (8004d04 <HAL_GPIO_Init+0x2a8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d869      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004ab6:	4a94      	ldr	r2, [pc, #592]	@ (8004d08 <HAL_GPIO_Init+0x2ac>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04c      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
 8004abc:	4a92      	ldr	r2, [pc, #584]	@ (8004d08 <HAL_GPIO_Init+0x2ac>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d863      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004ac2:	4a92      	ldr	r2, [pc, #584]	@ (8004d0c <HAL_GPIO_Init+0x2b0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d046      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
 8004ac8:	4a90      	ldr	r2, [pc, #576]	@ (8004d0c <HAL_GPIO_Init+0x2b0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d85d      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004ace:	2b12      	cmp	r3, #18
 8004ad0:	d82a      	bhi.n	8004b28 <HAL_GPIO_Init+0xcc>
 8004ad2:	2b12      	cmp	r3, #18
 8004ad4:	d859      	bhi.n	8004b8a <HAL_GPIO_Init+0x12e>
 8004ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <HAL_GPIO_Init+0x80>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b57 	.word	0x08004b57
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b43 	.word	0x08004b43
 8004ae8:	08004b85 	.word	0x08004b85
 8004aec:	08004b8b 	.word	0x08004b8b
 8004af0:	08004b8b 	.word	0x08004b8b
 8004af4:	08004b8b 	.word	0x08004b8b
 8004af8:	08004b8b 	.word	0x08004b8b
 8004afc:	08004b8b 	.word	0x08004b8b
 8004b00:	08004b8b 	.word	0x08004b8b
 8004b04:	08004b8b 	.word	0x08004b8b
 8004b08:	08004b8b 	.word	0x08004b8b
 8004b0c:	08004b8b 	.word	0x08004b8b
 8004b10:	08004b8b 	.word	0x08004b8b
 8004b14:	08004b8b 	.word	0x08004b8b
 8004b18:	08004b8b 	.word	0x08004b8b
 8004b1c:	08004b8b 	.word	0x08004b8b
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	4a79      	ldr	r2, [pc, #484]	@ (8004d10 <HAL_GPIO_Init+0x2b4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b2e:	e02c      	b.n	8004b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	623b      	str	r3, [r7, #32]
          break;
 8004b36:	e029      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	623b      	str	r3, [r7, #32]
          break;
 8004b40:	e024      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	3308      	adds	r3, #8
 8004b48:	623b      	str	r3, [r7, #32]
          break;
 8004b4a:	e01f      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	330c      	adds	r3, #12
 8004b52:	623b      	str	r3, [r7, #32]
          break;
 8004b54:	e01a      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b5e:	2304      	movs	r3, #4
 8004b60:	623b      	str	r3, [r7, #32]
          break;
 8004b62:	e013      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	611a      	str	r2, [r3, #16]
          break;
 8004b76:	e009      	b.n	8004b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b78:	2308      	movs	r3, #8
 8004b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	615a      	str	r2, [r3, #20]
          break;
 8004b82:	e003      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b84:	2300      	movs	r3, #0
 8004b86:	623b      	str	r3, [r7, #32]
          break;
 8004b88:	e000      	b.n	8004b8c <HAL_GPIO_Init+0x130>
          break;
 8004b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2bff      	cmp	r3, #255	@ 0xff
 8004b90:	d801      	bhi.n	8004b96 <HAL_GPIO_Init+0x13a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	e001      	b.n	8004b9a <HAL_GPIO_Init+0x13e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2bff      	cmp	r3, #255	@ 0xff
 8004ba0:	d802      	bhi.n	8004ba8 <HAL_GPIO_Init+0x14c>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	e002      	b.n	8004bae <HAL_GPIO_Init+0x152>
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	3b08      	subs	r3, #8
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	210f      	movs	r1, #15
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	6a39      	ldr	r1, [r7, #32]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80b1 	beq.w	8004d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	4a4c      	ldr	r2, [pc, #304]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6193      	str	r3, [r2, #24]
 8004be8:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004bf4:	4a48      	ldr	r2, [pc, #288]	@ (8004d18 <HAL_GPIO_Init+0x2bc>)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a40      	ldr	r2, [pc, #256]	@ (8004d1c <HAL_GPIO_Init+0x2c0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_GPIO_Init+0x1ec>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3f      	ldr	r2, [pc, #252]	@ (8004d20 <HAL_GPIO_Init+0x2c4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00d      	beq.n	8004c44 <HAL_GPIO_Init+0x1e8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d24 <HAL_GPIO_Init+0x2c8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <HAL_GPIO_Init+0x1e4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3d      	ldr	r2, [pc, #244]	@ (8004d28 <HAL_GPIO_Init+0x2cc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_GPIO_Init+0x1e0>
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e006      	b.n	8004c4a <HAL_GPIO_Init+0x1ee>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	e004      	b.n	8004c4a <HAL_GPIO_Init+0x1ee>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e002      	b.n	8004c4a <HAL_GPIO_Init+0x1ee>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_GPIO_Init+0x1ee>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4c:	f002 0203 	and.w	r2, r2, #3
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	4093      	lsls	r3, r2
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c5a:	492f      	ldr	r1, [pc, #188]	@ (8004d18 <HAL_GPIO_Init+0x2bc>)
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	3302      	adds	r3, #2
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c74:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	492c      	ldr	r1, [pc, #176]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
 8004c80:	e006      	b.n	8004c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c82:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	4928      	ldr	r1, [pc, #160]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d006      	beq.n	8004caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c9c:	4b23      	ldr	r3, [pc, #140]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4922      	ldr	r1, [pc, #136]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	e006      	b.n	8004cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004caa:	4b20      	ldr	r3, [pc, #128]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	491e      	ldr	r1, [pc, #120]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d006      	beq.n	8004cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4918      	ldr	r1, [pc, #96]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	e006      	b.n	8004ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cd2:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	4914      	ldr	r1, [pc, #80]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d021      	beq.n	8004d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cec:	4b0f      	ldr	r3, [pc, #60]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	490e      	ldr	r1, [pc, #56]	@ (8004d2c <HAL_GPIO_Init+0x2d0>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60cb      	str	r3, [r1, #12]
 8004cf8:	e021      	b.n	8004d3e <HAL_GPIO_Init+0x2e2>
 8004cfa:	bf00      	nop
 8004cfc:	10320000 	.word	0x10320000
 8004d00:	10310000 	.word	0x10310000
 8004d04:	10220000 	.word	0x10220000
 8004d08:	10210000 	.word	0x10210000
 8004d0c:	10120000 	.word	0x10120000
 8004d10:	10110000 	.word	0x10110000
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010800 	.word	0x40010800
 8004d20:	40010c00 	.word	0x40010c00
 8004d24:	40011000 	.word	0x40011000
 8004d28:	40011400 	.word	0x40011400
 8004d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_GPIO_Init+0x304>)
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	4909      	ldr	r1, [pc, #36]	@ (8004d60 <HAL_GPIO_Init+0x304>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	3301      	adds	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f ae8e 	bne.w	8004a70 <HAL_GPIO_Init+0x14>
  }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	372c      	adds	r7, #44	@ 0x2c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	40010400 	.word	0x40010400

08004d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e001      	b.n	8004d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	807b      	strh	r3, [r7, #2]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004da2:	787b      	ldrb	r3, [r7, #1]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004da8:	887a      	ldrh	r2, [r7, #2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004dae:	e003      	b.n	8004db8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	611a      	str	r2, [r3, #16]
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr
	...

08004dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dce:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dda:	4a05      	ldr	r2, [pc, #20]	@ (8004df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f806 	bl	8004df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e12b      	b.n	8005072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff f8ce 	bl	8003fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	@ 0x24
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f002 fb78 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 8004e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4a81      	ldr	r2, [pc, #516]	@ (800507c <HAL_I2C_Init+0x274>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d807      	bhi.n	8004e8c <HAL_I2C_Init+0x84>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a80      	ldr	r2, [pc, #512]	@ (8005080 <HAL_I2C_Init+0x278>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bf94      	ite	ls
 8004e84:	2301      	movls	r3, #1
 8004e86:	2300      	movhi	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e006      	b.n	8004e9a <HAL_I2C_Init+0x92>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005084 <HAL_I2C_Init+0x27c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bf94      	ite	ls
 8004e94:	2301      	movls	r3, #1
 8004e96:	2300      	movhi	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0e7      	b.n	8005072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a78      	ldr	r2, [pc, #480]	@ (8005088 <HAL_I2C_Init+0x280>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0c9b      	lsrs	r3, r3, #18
 8004eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800507c <HAL_I2C_Init+0x274>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <HAL_I2C_Init+0xd4>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	e009      	b.n	8004ef0 <HAL_I2C_Init+0xe8>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	4a69      	ldr	r2, [pc, #420]	@ (800508c <HAL_I2C_Init+0x284>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	099b      	lsrs	r3, r3, #6
 8004eee:	3301      	adds	r3, #1
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	495c      	ldr	r1, [pc, #368]	@ (800507c <HAL_I2C_Init+0x274>)
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d819      	bhi.n	8004f44 <HAL_I2C_Init+0x13c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1e59      	subs	r1, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f24:	400b      	ands	r3, r1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_I2C_Init+0x138>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1e59      	subs	r1, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3e:	e051      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f40:	2304      	movs	r3, #4
 8004f42:	e04f      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d111      	bne.n	8004f70 <HAL_I2C_Init+0x168>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1e58      	subs	r0, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	440b      	add	r3, r1
 8004f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e012      	b.n	8004f96 <HAL_I2C_Init+0x18e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1e58      	subs	r0, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	0099      	lsls	r1, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Init+0x196>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e022      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_I2C_Init+0x1bc>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1e58      	subs	r0, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	440b      	add	r3, r1
 8004fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc2:	e00f      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1e58      	subs	r0, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	0099      	lsls	r1, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	6809      	ldr	r1, [r1, #0]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005012:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6911      	ldr	r1, [r2, #16]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	430b      	orrs	r3, r1
 8005026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	000186a0 	.word	0x000186a0
 8005080:	001e847f 	.word	0x001e847f
 8005084:	003d08ff 	.word	0x003d08ff
 8005088:	431bde83 	.word	0x431bde83
 800508c:	10624dd3 	.word	0x10624dd3

08005090 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	461a      	mov	r2, r3
 800509c:	460b      	mov	r3, r1
 800509e:	817b      	strh	r3, [r7, #10]
 80050a0:	4613      	mov	r3, r2
 80050a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050a4:	f7ff f99e 	bl	80043e4 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	f040 80e0 	bne.w	8005278 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2319      	movs	r3, #25
 80050be:	2201      	movs	r2, #1
 80050c0:	4970      	ldr	r1, [pc, #448]	@ (8005284 <HAL_I2C_Master_Transmit+0x1f4>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f964 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
 80050d0:	e0d3      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_I2C_Master_Transmit+0x50>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0cc      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d007      	beq.n	8005106 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2221      	movs	r2, #33	@ 0x21
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2210      	movs	r2, #16
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	893a      	ldrh	r2, [r7, #8]
 8005136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a50      	ldr	r2, [pc, #320]	@ (8005288 <HAL_I2C_Master_Transmit+0x1f8>)
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005148:	8979      	ldrh	r1, [r7, #10]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f89c 	bl	800528c <I2C_MasterRequestWrite>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e08d      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005174:	e066      	b.n	8005244 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	6a39      	ldr	r1, [r7, #32]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f9de 	bl	800553c <I2C_WaitOnTXEFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	2b04      	cmp	r3, #4
 800518c:	d107      	bne.n	800519e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e06b      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d11b      	bne.n	8005218 <HAL_I2C_Master_Transmit+0x188>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d017      	beq.n	8005218 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6a39      	ldr	r1, [r7, #32]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f9ce 	bl	80055be <I2C_WaitOnBTFFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	2b04      	cmp	r3, #4
 800522e:	d107      	bne.n	8005240 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e01a      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d194      	bne.n	8005176 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800525a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	00100002 	.word	0x00100002
 8005288:	ffff0000 	.word	0xffff0000

0800528c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	460b      	mov	r3, r1
 800529a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d006      	beq.n	80052b6 <I2C_MasterRequestWrite+0x2a>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d003      	beq.n	80052b6 <I2C_MasterRequestWrite+0x2a>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b4:	d108      	bne.n	80052c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e00b      	b.n	80052e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	2b12      	cmp	r3, #18
 80052ce:	d107      	bne.n	80052e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f84f 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005306:	d103      	bne.n	8005310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e035      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531c:	d108      	bne.n	8005330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	e01b      	b.n	8005368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	11db      	asrs	r3, r3, #7
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f063 030f 	orn	r3, r3, #15
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	490e      	ldr	r1, [pc, #56]	@ (8005388 <I2C_MasterRequestWrite+0xfc>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f875 	bl	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e010      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4907      	ldr	r1, [pc, #28]	@ (800538c <I2C_MasterRequestWrite+0x100>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f865 	bl	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00010008 	.word	0x00010008
 800538c:	00010002 	.word	0x00010002

08005390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a0:	e025      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d021      	beq.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7ff f81b 	bl	80043e4 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d116      	bne.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e023      	b.n	8005436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10d      	bne.n	8005414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	e00c      	b.n	800542e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	43da      	mvns	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4013      	ands	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	429a      	cmp	r2, r3
 8005432:	d0b6      	beq.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544c:	e051      	b.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	d123      	bne.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e046      	b.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d021      	beq.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fe ff99 	bl	80043e4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e020      	b.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10c      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e00b      	b.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d18d      	bne.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005548:	e02d      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f878 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e02d      	b.n	80055b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d021      	beq.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe ff3f 	bl	80043e4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e007      	b.n	80055b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b80      	cmp	r3, #128	@ 0x80
 80055b2:	d1ca      	bne.n	800554a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ca:	e02d      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f837 	bl	8005640 <I2C_IsAcknowledgeFailed>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e02d      	b.n	8005638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d021      	beq.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fe fefe 	bl	80043e4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d1ca      	bne.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005656:	d11b      	bne.n	8005690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	f043 0204 	orr.w	r2, r3, #4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800569c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569e:	b08b      	sub	sp, #44	@ 0x2c
 80056a0:	af06      	add	r7, sp, #24
 80056a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0fd      	b.n	80058aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f007 fa0a 	bl	800cadc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2203      	movs	r2, #3
 80056cc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f003 f981 	bl	80089dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	687e      	ldr	r6, [r7, #4]
 80056e2:	466d      	mov	r5, sp
 80056e4:	f106 0410 	add.w	r4, r6, #16
 80056e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	1d33      	adds	r3, r6, #4
 80056f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f4:	6838      	ldr	r0, [r7, #0]
 80056f6:	f003 f94b 	bl	8008990 <USB_CoreInit>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0ce      	b.n	80058aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f003 f97c 	bl	8008a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e04c      	b.n	80057b8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3301      	adds	r3, #1
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	b298      	uxth	r0, r3
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	3336      	adds	r3, #54	@ 0x36
 800575c:	4602      	mov	r2, r0
 800575e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	3303      	adds	r3, #3
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	440b      	add	r3, r1
 8005784:	3338      	adds	r3, #56	@ 0x38
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	440b      	add	r3, r1
 8005798:	333c      	adds	r3, #60	@ 0x3c
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	440b      	add	r3, r1
 80057ac:	3340      	adds	r3, #64	@ 0x40
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	3301      	adds	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
 80057b8:	7bfa      	ldrb	r2, [r7, #15]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3ad      	bcc.n	800571e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	e044      	b.n	8005852 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057c8:	7bfa      	ldrb	r2, [r7, #15]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	440b      	add	r3, r1
 80057d6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057de:	7bfa      	ldrb	r2, [r7, #15]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	3301      	adds	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3b5      	bcc.n	80057c8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	687e      	ldr	r6, [r7, #4]
 8005864:	466d      	mov	r5, sp
 8005866:	f106 0410 	add.w	r4, r6, #16
 800586a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800586c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	1d33      	adds	r3, r6, #4
 8005874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005876:	6838      	ldr	r0, [r7, #0]
 8005878:	f003 f8d6 	bl	8008a28 <USB_DevInit>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e00d      	b.n	80058aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 faf7 	bl	800ae96 <USB_DevDisconnect>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_PCD_Start+0x16>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e016      	b.n	80058f6 <HAL_PCD_Start+0x44>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 f86b 	bl	80089b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80058da:	2101      	movs	r1, #1
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f007 fb70 	bl	800cfc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f005 facb 	bl	800ae82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b088      	sub	sp, #32
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f005 facd 	bl	800aeaa <USB_ReadInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591a:	d102      	bne.n	8005922 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb5f 	bl	8005fe0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f005 fabf 	bl	800aeaa <USB_ReadInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005936:	d112      	bne.n	800595e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594a:	b292      	uxth	r2, r2
 800594c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f007 f93e 	bl	800cbd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005956:	2100      	movs	r1, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f923 	bl	8005ba4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f005 faa1 	bl	800aeaa <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005972:	d10b      	bne.n	800598c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005986:	b292      	uxth	r2, r2
 8005988:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f005 fa8a 	bl	800aeaa <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a0:	d10b      	bne.n	80059ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b4:	b292      	uxth	r2, r2
 80059b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f005 fa73 	bl	800aeaa <USB_ReadInterrupts>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ce:	d126      	bne.n	8005a1e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	b292      	uxth	r2, r2
 80059e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0208 	bic.w	r2, r2, #8
 80059fa:	b292      	uxth	r2, r2
 80059fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f007 f91f 	bl	800cc44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f005 fa41 	bl	800aeaa <USB_ReadInterrupts>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a32:	f040 8082 	bne.w	8005b3a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e010      	b.n	8005a5e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
 8005a4a:	8812      	ldrh	r2, [r2, #0]
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	3320      	adds	r3, #32
 8005a52:	443b      	add	r3, r7
 8005a54:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	d9eb      	bls.n	8005a3c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	b292      	uxth	r2, r2
 8005a78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	b292      	uxth	r2, r2
 8005a90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a94:	bf00      	nop
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f6      	beq.n	8005a96 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aba:	b292      	uxth	r2, r2
 8005abc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e00f      	b.n	8005ae6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005ac6:	7ffb      	ldrb	r3, [r7, #31]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	4611      	mov	r1, r2
 8005ace:	7ffa      	ldrb	r2, [r7, #31]
 8005ad0:	0092      	lsls	r2, r2, #2
 8005ad2:	440a      	add	r2, r1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	3320      	adds	r3, #32
 8005ad8:	443b      	add	r3, r7
 8005ada:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005ade:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	d9ec      	bls.n	8005ac6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	b292      	uxth	r2, r2
 8005b00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b16:	b292      	uxth	r2, r2
 8005b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0204 	orr.w	r2, r2, #4
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f007 f86b 	bl	800cc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f005 f9b3 	bl	800aeaa <USB_ReadInterrupts>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4e:	d10e      	bne.n	8005b6e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005b62:	b292      	uxth	r2, r2
 8005b64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f007 f824 	bl	800cbb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f005 f999 	bl	800aeaa <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	d10b      	bne.n	8005b9c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b96:	b292      	uxth	r2, r2
 8005b98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_PCD_SetAddress+0x1a>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e013      	b.n	8005be6 <HAL_PCD_SetAddress+0x42>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f005 f940 	bl	800ae5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	70fb      	strb	r3, [r7, #3]
 8005c00:	460b      	mov	r3, r1
 8005c02:	803b      	strh	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da0e      	bge.n	8005c32 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	705a      	strb	r2, [r3, #1]
 8005c30:	e00e      	b.n	8005c50 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	f003 0207 	and.w	r2, r3, #7
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005c5c:	883a      	ldrh	r2, [r7, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	78ba      	ldrb	r2, [r7, #2]
 8005c66:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c7a:	78bb      	ldrb	r3, [r7, #2]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d102      	bne.n	8005c86 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_PCD_EP_Open+0xa6>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e00e      	b.n	8005cb2 <HAL_PCD_EP_Open+0xc4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f002 fee0 	bl	8008a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da0e      	bge.n	8005cec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	705a      	strb	r2, [r3, #1]
 8005cea:	e00e      	b.n	8005d0a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 0207 	and.w	r2, r3, #7
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_PCD_EP_Close+0x6a>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e00e      	b.n	8005d42 <HAL_PCD_EP_Close+0x88>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68f9      	ldr	r1, [r7, #12]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f003 fa02 	bl	800913c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	460b      	mov	r3, r1
 8005d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	f003 0207 	and.w	r2, r3, #7
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2200      	movs	r2, #0
 8005d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d8a:	7afb      	ldrb	r3, [r7, #11]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f003 fbb4 	bl	8009514 <USB_EPStartXfer>
 8005dac:	e005      	b.n	8005dba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f003 fbad 	bl	8009514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f003 0207 	and.w	r2, r3, #7
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fb5a 	bl	8009514 <USB_EPStartXfer>
 8005e60:	e005      	b.n	8005e6e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6979      	ldr	r1, [r7, #20]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f003 fb53 	bl	8009514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 0207 	and.w	r2, r3, #7
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d901      	bls.n	8005e96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e04c      	b.n	8005f30 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da0e      	bge.n	8005ebc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	705a      	strb	r2, [r3, #1]
 8005eba:	e00c      	b.n	8005ed6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_PCD_EP_SetStall+0x7e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e01c      	b.n	8005f30 <HAL_PCD_EP_SetStall+0xb8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f004 feac 	bl	800ac62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f004 ffd1 	bl	800aec8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	f003 020f 	and.w	r2, r3, #15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d901      	bls.n	8005f56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e040      	b.n	8005fd8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da0e      	bge.n	8005f7c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	705a      	strb	r2, [r3, #1]
 8005f7a:	e00e      	b.n	8005f9a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 0207 	and.w	r2, r3, #7
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_PCD_EP_ClrStall+0x82>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e00e      	b.n	8005fd8 <HAL_PCD_EP_ClrStall+0xa0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f004 fe9a 	bl	800ad02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08e      	sub	sp, #56	@ 0x38
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005fe8:	e2de      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ff2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005ff4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8006000:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8157 	bne.w	80062b8 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800600a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d151      	bne.n	80060b8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006024:	81fb      	strh	r3, [r7, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	89fb      	ldrh	r3, [r7, #14]
 800602c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3328      	adds	r3, #40	@ 0x28
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006046:	b29b      	uxth	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	3302      	adds	r3, #2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	441a      	add	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f006 fd81 	bl	800cb82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 828d 	beq.w	80065a8 <PCD_EP_ISR_Handler+0x5c8>
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 8288 	bne.w	80065a8 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060b6:	e277      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80060c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d034      	beq.n	800613c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060da:	b29b      	uxth	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	4413      	add	r3, r2
 80060e6:	3306      	adds	r3, #6
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006110:	b29b      	uxth	r3, r3
 8006112:	f004 ff28 	bl	800af66 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006122:	4013      	ands	r3, r2
 8006124:	823b      	strh	r3, [r7, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	8a3a      	ldrh	r2, [r7, #16]
 800612c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006130:	b292      	uxth	r2, r2
 8006132:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f006 fcf7 	bl	800cb28 <HAL_PCD_SetupStageCallback>
 800613a:	e235      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800613c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006140:	2b00      	cmp	r3, #0
 8006142:	f280 8231 	bge.w	80065a8 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006152:	4013      	ands	r3, r2
 8006154:	83bb      	strh	r3, [r7, #28]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	8bba      	ldrh	r2, [r7, #28]
 800615c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006160:	b292      	uxth	r2, r2
 8006162:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	3306      	adds	r3, #6
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d019      	beq.n	80061cc <PCD_EP_ISR_Handler+0x1ec>
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d015      	beq.n	80061cc <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	6959      	ldr	r1, [r3, #20]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f004 fed8 	bl	800af66 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	441a      	add	r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f006 fcc0 	bl	800cb4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d112      	bne.n	800621a <PCD_EP_ISR_Handler+0x23a>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80061fe:	b29a      	uxth	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006212:	b29a      	uxth	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e02f      	b.n	800627a <PCD_EP_ISR_Handler+0x29a>
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006220:	d813      	bhi.n	800624a <PCD_EP_ISR_Handler+0x26a>
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	633b      	str	r3, [r7, #48]	@ 0x30
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <PCD_EP_ISR_Handler+0x25c>
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	3301      	adds	r3, #1
 800623a:	633b      	str	r3, [r7, #48]	@ 0x30
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	b29b      	uxth	r3, r3
 8006240:	029b      	lsls	r3, r3, #10
 8006242:	b29a      	uxth	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e017      	b.n	800627a <PCD_EP_ISR_Handler+0x29a>
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <PCD_EP_ISR_Handler+0x284>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	3b01      	subs	r3, #1
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006274:	b29a      	uxth	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628a:	827b      	strh	r3, [r7, #18]
 800628c:	8a7b      	ldrh	r3, [r7, #18]
 800628e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006292:	827b      	strh	r3, [r7, #18]
 8006294:	8a7b      	ldrh	r3, [r7, #18]
 8006296:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800629a:	827b      	strh	r3, [r7, #18]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
 80062b6:	e177      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f280 80ea 	bge.w	80064a8 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062ea:	4013      	ands	r3, r2
 80062ec:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80062fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006302:	b292      	uxth	r2, r2
 8006304:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006306:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	7b1b      	ldrb	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d122      	bne.n	800636a <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	3306      	adds	r3, #6
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800634c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 800634e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8087 	beq.w	8006464 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	6959      	ldr	r1, [r3, #20]
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	88da      	ldrh	r2, [r3, #6]
 8006362:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006364:	f004 fdff 	bl	800af66 <USB_ReadPMA>
 8006368:	e07c      	b.n	8006464 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d108      	bne.n	8006384 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006372:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006374:	461a      	mov	r2, r3
 8006376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f923 	bl	80065c4 <HAL_PCD_EP_DB_Receive>
 800637e:	4603      	mov	r3, r0
 8006380:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006382:	e06f      	b.n	8006464 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d021      	beq.n	8006422 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	3302      	adds	r3, #2
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006406:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006408:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02a      	beq.n	8006464 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	6959      	ldr	r1, [r3, #20]
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	891a      	ldrh	r2, [r3, #8]
 800641a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800641c:	f004 fda3 	bl	800af66 <USB_ReadPMA>
 8006420:	e020      	b.n	8006464 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	4413      	add	r3, r2
 8006436:	3306      	adds	r3, #6
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800644c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	6959      	ldr	r1, [r3, #20]
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	895a      	ldrh	r2, [r3, #10]
 800645e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006460:	f004 fd81 	bl	800af66 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800646a:	441a      	add	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006476:	441a      	add	r2, r3
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <PCD_EP_ISR_Handler+0x4ae>
 8006484:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	d206      	bcs.n	800649c <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f006 fb59 	bl	800cb4c <HAL_PCD_DataOutStageCallback>
 800649a:	e005      	b.n	80064a8 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f003 f836 	bl	8009514 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80064a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d07a      	beq.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80064b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80064dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e0:	843b      	strh	r3, [r7, #32]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	441a      	add	r2, r3
 80064f0:	8c3b      	ldrh	r3, [r7, #32]
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d108      	bne.n	8006518 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800650a:	2b02      	cmp	r3, #2
 800650c:	d146      	bne.n	800659c <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800650e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d141      	bne.n	800659c <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	3302      	adds	r3, #2
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006540:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	8bfb      	ldrh	r3, [r7, #30]
 8006548:	429a      	cmp	r2, r3
 800654a:	d906      	bls.n	800655a <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	8bfb      	ldrh	r3, [r7, #30]
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	619a      	str	r2, [r3, #24]
 8006558:	e002      	b.n	8006560 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	2200      	movs	r2, #0
 800655e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f006 fb07 	bl	800cb82 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8006574:	e018      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	8bfb      	ldrh	r3, [r7, #30]
 800657c:	441a      	add	r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	69da      	ldr	r2, [r3, #28]
 8006586:	8bfb      	ldrh	r3, [r7, #30]
 8006588:	441a      	add	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006594:	4618      	mov	r0, r3
 8006596:	f002 ffbd 	bl	8009514 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800659a:	e005      	b.n	80065a8 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800659c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800659e:	461a      	mov	r2, r3
 80065a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f91b 	bl	80067de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f6ff ad18 	blt.w	8005fea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3738      	adds	r7, #56	@ 0x38
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d07e      	beq.n	80066da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4413      	add	r3, r2
 80065f0:	3302      	adds	r3, #2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006604:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	8b7b      	ldrh	r3, [r7, #26]
 800660c:	429a      	cmp	r2, r3
 800660e:	d306      	bcc.n	800661e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	8b7b      	ldrh	r3, [r7, #26]
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	619a      	str	r2, [r3, #24]
 800661c:	e002      	b.n	8006624 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d123      	bne.n	8006674 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006646:	833b      	strh	r3, [r7, #24]
 8006648:	8b3b      	ldrh	r3, [r7, #24]
 800664a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800664e:	833b      	strh	r3, [r7, #24]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	8b3b      	ldrh	r3, [r7, #24]
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01f      	beq.n	80066be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006698:	82fb      	strh	r3, [r7, #22]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	8afb      	ldrh	r3, [r7, #22]
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80066be:	8b7b      	ldrh	r3, [r7, #26]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8087 	beq.w	80067d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	891a      	ldrh	r2, [r3, #8]
 80066d2:	8b7b      	ldrh	r3, [r7, #26]
 80066d4:	f004 fc47 	bl	800af66 <USB_ReadPMA>
 80066d8:	e07c      	b.n	80067d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4413      	add	r3, r2
 80066ee:	3306      	adds	r3, #6
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006702:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	8b7b      	ldrh	r3, [r7, #26]
 800670a:	429a      	cmp	r2, r3
 800670c:	d306      	bcc.n	800671c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	8b7b      	ldrh	r3, [r7, #26]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	619a      	str	r2, [r3, #24]
 800671a:	e002      	b.n	8006722 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d123      	bne.n	8006772 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006744:	83fb      	strh	r3, [r7, #30]
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800674c:	83fb      	strh	r3, [r7, #30]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8bfb      	ldrh	r3, [r7, #30]
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11f      	bne.n	80067bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	83bb      	strh	r3, [r7, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8bbb      	ldrh	r3, [r7, #28]
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6959      	ldr	r1, [r3, #20]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	895a      	ldrh	r2, [r3, #10]
 80067ce:	8b7b      	ldrh	r3, [r7, #26]
 80067d0:	f004 fbc9 	bl	800af66 <USB_ReadPMA>
    }
  }

  return count;
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b094      	sub	sp, #80	@ 0x50
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8138 	beq.w	8006a68 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	3302      	adds	r3, #2
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006820:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800682c:	429a      	cmp	r2, r3
 800682e:	d907      	bls.n	8006840 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	619a      	str	r2, [r3, #24]
 800683e:	e002      	b.n	8006846 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d12c      	bne.n	80068a8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f006 f994 	bl	800cb82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 823a 	beq.w	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	82fb      	strh	r3, [r7, #22]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	8afb      	ldrh	r3, [r7, #22]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	e218      	b.n	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01f      	beq.n	80068f2 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	441a      	add	r2, r3
 80068dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	f040 81ee 	bne.w	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006906:	441a      	add	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006914:	441a      	add	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d309      	bcc.n	800693a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e015      	b.n	8006966 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006950:	e009      	b.n	8006966 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d155      	bne.n	8006a1a <HAL_PCD_EP_DB_Transmit+0x23c>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	011a      	lsls	r2, r3, #4
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006998:	2b00      	cmp	r3, #0
 800699a:	d112      	bne.n	80069c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	e047      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x274>
 80069c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80069c6:	d811      	bhi.n	80069ec <HAL_PCD_EP_DB_Transmit+0x20e>
 80069c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_PCD_EP_DB_Transmit+0x200>
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069da:	3301      	adds	r3, #1
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e032      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x274>
 80069ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <HAL_PCD_EP_DB_Transmit+0x224>
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	3b01      	subs	r3, #1
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e01b      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x274>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d117      	bne.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x274>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	4413      	add	r3, r2
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	011a      	lsls	r2, r3, #4
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	4413      	add	r3, r2
 8006a44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6959      	ldr	r1, [r3, #20]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	891a      	ldrh	r2, [r3, #8]
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f004 fa3c 	bl	800aede <USB_WritePMA>
 8006a66:	e138      	b.n	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3306      	adds	r3, #6
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a90:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d307      	bcc.n	8006ab0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	619a      	str	r2, [r3, #24]
 8006aae:	e002      	b.n	8006ab6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12e      	bne.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f006 f85c 	bl	800cb82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 8102 	bne.w	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
 8006b1a:	e0de      	b.n	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d11f      	bne.n	8006b66 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b40:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 80b4 	bne.w	8006cda <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b88:	441a      	add	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d309      	bcc.n	8006bae <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	621a      	str	r2, [r3, #32]
 8006bac:	e015      	b.n	8006bda <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006bb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bba:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006bc4:	e009      	b.n	8006bda <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d155      	bne.n	8006c94 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	4413      	add	r3, r2
 8006bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d112      	bne.n	8006c3c <HAL_PCD_EP_DB_Transmit+0x45e>
 8006c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e044      	b.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c40:	d811      	bhi.n	8006c66 <HAL_PCD_EP_DB_Transmit+0x488>
 8006c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c54:	3301      	adds	r3, #1
 8006c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	029b      	lsls	r3, r3, #10
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e02f      	b.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <HAL_PCD_EP_DB_Transmit+0x49e>
 8006c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	029b      	lsls	r3, r3, #10
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e018      	b.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d114      	bne.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006caa:	4413      	add	r3, r2
 8006cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	011a      	lsls	r2, r3, #4
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6959      	ldr	r1, [r3, #20]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	895a      	ldrh	r2, [r3, #10]
 8006cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f004 f902 	bl	800aede <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf4:	82bb      	strh	r3, [r7, #20]
 8006cf6:	8abb      	ldrh	r3, [r7, #20]
 8006cf8:	f083 0310 	eor.w	r3, r3, #16
 8006cfc:	82bb      	strh	r3, [r7, #20]
 8006cfe:	8abb      	ldrh	r3, [r7, #20]
 8006d00:	f083 0320 	eor.w	r3, r3, #32
 8006d04:	82bb      	strh	r3, [r7, #20]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	8abb      	ldrh	r3, [r7, #20]
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3750      	adds	r7, #80	@ 0x50
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	817b      	strh	r3, [r7, #10]
 8006d42:	4613      	mov	r3, r2
 8006d44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006d46:	897b      	ldrh	r3, [r7, #10]
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d52:	897b      	ldrh	r3, [r7, #10]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e009      	b.n	8006d7e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d6a:	897a      	ldrh	r2, [r7, #10]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006d7e:	893b      	ldrh	r3, [r7, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d107      	bne.n	8006d94 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2200      	movs	r2, #0
 8006d88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	80da      	strh	r2, [r3, #6]
 8006d92:	e00b      	b.n	8006dac <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2201      	movs	r2, #1
 8006d98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e272      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8087 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dd8:	4b92      	ldr	r3, [pc, #584]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006de4:	4b8f      	ldr	r3, [pc, #572]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d112      	bne.n	8006e16 <HAL_RCC_OscConfig+0x5e>
 8006df0:	4b8c      	ldr	r3, [pc, #560]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dfc:	d10b      	bne.n	8006e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfe:	4b89      	ldr	r3, [pc, #548]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06c      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x12c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d168      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e24c      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCC_OscConfig+0x76>
 8006e20:	4b80      	ldr	r3, [pc, #512]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7f      	ldr	r2, [pc, #508]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e02e      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x98>
 8006e36:	4b7b      	ldr	r3, [pc, #492]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4b78      	ldr	r3, [pc, #480]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a77      	ldr	r2, [pc, #476]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e01d      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0xbc>
 8006e5a:	4b72      	ldr	r3, [pc, #456]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a71      	ldr	r2, [pc, #452]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b6f      	ldr	r3, [pc, #444]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e74:	4b6b      	ldr	r3, [pc, #428]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a6a      	ldr	r2, [pc, #424]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	4b68      	ldr	r3, [pc, #416]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a67      	ldr	r2, [pc, #412]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d013      	beq.n	8006ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd faa6 	bl	80043e4 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e9c:	f7fd faa2 	bl	80043e4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b64      	cmp	r3, #100	@ 0x64
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e200      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eae:	4b5d      	ldr	r3, [pc, #372]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0xe4>
 8006eba:	e014      	b.n	8006ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebc:	f7fd fa92 	bl	80043e4 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec4:	f7fd fa8e 	bl	80043e4 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	@ 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e1ec      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ed6:	4b53      	ldr	r3, [pc, #332]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x10c>
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d063      	beq.n	8006fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006efe:	4b49      	ldr	r3, [pc, #292]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d11c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x18c>
 8006f0a:	4b46      	ldr	r3, [pc, #280]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d116      	bne.n	8006f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f16:	4b43      	ldr	r3, [pc, #268]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <HAL_RCC_OscConfig+0x176>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d001      	beq.n	8006f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e1c0      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4939      	ldr	r1, [pc, #228]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f42:	e03a      	b.n	8006fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d020      	beq.n	8006f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f4c:	4b36      	ldr	r3, [pc, #216]	@ (8007028 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f52:	f7fd fa47 	bl	80043e4 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5a:	f7fd fa43 	bl	80043e4 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e1a1      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f78:	4b2a      	ldr	r3, [pc, #168]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4927      	ldr	r1, [pc, #156]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]
 8006f8c:	e015      	b.n	8006fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8e:	4b26      	ldr	r3, [pc, #152]	@ (8007028 <HAL_RCC_OscConfig+0x270>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f94:	f7fd fa26 	bl	80043e4 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9c:	f7fd fa22 	bl	80043e4 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e180      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fae:	4b1d      	ldr	r3, [pc, #116]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03a      	beq.n	800703c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d019      	beq.n	8007002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fce:	4b17      	ldr	r3, [pc, #92]	@ (800702c <HAL_RCC_OscConfig+0x274>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd4:	f7fd fa06 	bl	80043e4 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fdc:	f7fd fa02 	bl	80043e4 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e160      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f000 fad8 	bl	80075b0 <RCC_Delay>
 8007000:	e01c      	b.n	800703c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007002:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <HAL_RCC_OscConfig+0x274>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007008:	f7fd f9ec 	bl	80043e4 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700e:	e00f      	b.n	8007030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007010:	f7fd f9e8 	bl	80043e4 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d908      	bls.n	8007030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e146      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
 8007022:	bf00      	nop
 8007024:	40021000 	.word	0x40021000
 8007028:	42420000 	.word	0x42420000
 800702c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007030:	4b92      	ldr	r3, [pc, #584]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e9      	bne.n	8007010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a6 	beq.w	8007196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704e:	4b8b      	ldr	r3, [pc, #556]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	4b88      	ldr	r3, [pc, #544]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	4a87      	ldr	r2, [pc, #540]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007064:	61d3      	str	r3, [r2, #28]
 8007066:	4b85      	ldr	r3, [pc, #532]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706e:	60bb      	str	r3, [r7, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007076:	4b82      	ldr	r3, [pc, #520]	@ (8007280 <HAL_RCC_OscConfig+0x4c8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d118      	bne.n	80070b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007082:	4b7f      	ldr	r3, [pc, #508]	@ (8007280 <HAL_RCC_OscConfig+0x4c8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a7e      	ldr	r2, [pc, #504]	@ (8007280 <HAL_RCC_OscConfig+0x4c8>)
 8007088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800708c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708e:	f7fd f9a9 	bl	80043e4 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007096:	f7fd f9a5 	bl	80043e4 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b64      	cmp	r3, #100	@ 0x64
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e103      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a8:	4b75      	ldr	r3, [pc, #468]	@ (8007280 <HAL_RCC_OscConfig+0x4c8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <HAL_RCC_OscConfig+0x312>
 80070bc:	4b6f      	ldr	r3, [pc, #444]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	4a6e      	ldr	r2, [pc, #440]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6213      	str	r3, [r2, #32]
 80070c8:	e02d      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <HAL_RCC_OscConfig+0x334>
 80070d2:	4b6a      	ldr	r3, [pc, #424]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	4a69      	ldr	r2, [pc, #420]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	6213      	str	r3, [r2, #32]
 80070de:	4b67      	ldr	r3, [pc, #412]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a66      	ldr	r2, [pc, #408]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	f023 0304 	bic.w	r3, r3, #4
 80070e8:	6213      	str	r3, [r2, #32]
 80070ea:	e01c      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	d10c      	bne.n	800710e <HAL_RCC_OscConfig+0x356>
 80070f4:	4b61      	ldr	r3, [pc, #388]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	4a60      	ldr	r2, [pc, #384]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	6213      	str	r3, [r2, #32]
 8007100:	4b5e      	ldr	r3, [pc, #376]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	4a5d      	ldr	r2, [pc, #372]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	6213      	str	r3, [r2, #32]
 800710c:	e00b      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 800710e:	4b5b      	ldr	r3, [pc, #364]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	4a5a      	ldr	r2, [pc, #360]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	6213      	str	r3, [r2, #32]
 800711a:	4b58      	ldr	r3, [pc, #352]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	4a57      	ldr	r2, [pc, #348]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d015      	beq.n	800715a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fd f959 	bl	80043e4 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fd f955 	bl	80043e4 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0b1      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	4b4b      	ldr	r3, [pc, #300]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ee      	beq.n	8007136 <HAL_RCC_OscConfig+0x37e>
 8007158:	e014      	b.n	8007184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800715a:	f7fd f943 	bl	80043e4 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007160:	e00a      	b.n	8007178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fd f93f 	bl	80043e4 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e09b      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007178:	4b40      	ldr	r3, [pc, #256]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ee      	bne.n	8007162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d105      	bne.n	8007196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800718a:	4b3c      	ldr	r3, [pc, #240]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4a3b      	ldr	r2, [pc, #236]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8087 	beq.w	80072ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a0:	4b36      	ldr	r3, [pc, #216]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d061      	beq.n	8007270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d146      	bne.n	8007242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b4:	4b33      	ldr	r3, [pc, #204]	@ (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ba:	f7fd f913 	bl	80043e4 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fd f90f 	bl	80043e4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e06d      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071d4:	4b29      	ldr	r3, [pc, #164]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e8:	d108      	bne.n	80071fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071ea:	4b24      	ldr	r3, [pc, #144]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4921      	ldr	r1, [pc, #132]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071fc:	4b1f      	ldr	r3, [pc, #124]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a19      	ldr	r1, [r3, #32]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720c:	430b      	orrs	r3, r1
 800720e:	491b      	ldr	r1, [pc, #108]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007214:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721a:	f7fd f8e3 	bl	80043e4 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007222:	f7fd f8df 	bl	80043e4 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e03d      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007234:	4b11      	ldr	r3, [pc, #68]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x46a>
 8007240:	e035      	b.n	80072ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fd f8cc 	bl	80043e4 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007250:	f7fd f8c8 	bl	80043e4 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e026      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007262:	4b06      	ldr	r3, [pc, #24]	@ (800727c <HAL_RCC_OscConfig+0x4c4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x498>
 800726e:	e01e      	b.n	80072ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d107      	bne.n	8007288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e019      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
 800727c:	40021000 	.word	0x40021000
 8007280:	40007000 	.word	0x40007000
 8007284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007288:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <HAL_RCC_OscConfig+0x500>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	429a      	cmp	r2, r3
 800729a:	d106      	bne.n	80072aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d001      	beq.n	80072ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40021000 	.word	0x40021000

080072bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0d0      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b6a      	ldr	r3, [pc, #424]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d910      	bls.n	8007300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b67      	ldr	r3, [pc, #412]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f023 0207 	bic.w	r2, r3, #7
 80072e6:	4965      	ldr	r1, [pc, #404]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ee:	4b63      	ldr	r3, [pc, #396]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d001      	beq.n	8007300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0b8      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d020      	beq.n	800734e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007318:	4b59      	ldr	r3, [pc, #356]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4a58      	ldr	r2, [pc, #352]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800731e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007330:	4b53      	ldr	r3, [pc, #332]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	4a52      	ldr	r2, [pc, #328]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800733a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800733c:	4b50      	ldr	r3, [pc, #320]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	494d      	ldr	r1, [pc, #308]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800734a:	4313      	orrs	r3, r2
 800734c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d040      	beq.n	80073dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d107      	bne.n	8007372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007362:	4b47      	ldr	r3, [pc, #284]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d115      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e07f      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d107      	bne.n	800738a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	4b41      	ldr	r3, [pc, #260]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e073      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738a:	4b3d      	ldr	r3, [pc, #244]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e06b      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800739a:	4b39      	ldr	r3, [pc, #228]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f023 0203 	bic.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4936      	ldr	r1, [pc, #216]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073ac:	f7fd f81a 	bl	80043e4 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b2:	e00a      	b.n	80073ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b4:	f7fd f816 	bl	80043e4 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e053      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f003 020c 	and.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	429a      	cmp	r2, r3
 80073da:	d1eb      	bne.n	80073b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073dc:	4b27      	ldr	r3, [pc, #156]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d210      	bcs.n	800740c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ea:	4b24      	ldr	r3, [pc, #144]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f023 0207 	bic.w	r2, r3, #7
 80073f2:	4922      	ldr	r1, [pc, #136]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fa:	4b20      	ldr	r3, [pc, #128]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e032      	b.n	8007472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007418:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4916      	ldr	r1, [pc, #88]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007426:	4313      	orrs	r3, r2
 8007428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007436:	4b12      	ldr	r3, [pc, #72]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	490e      	ldr	r1, [pc, #56]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800744a:	f000 f821 	bl	8007490 <HAL_RCC_GetSysClockFreq>
 800744e:	4602      	mov	r2, r0
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	490a      	ldr	r1, [pc, #40]	@ (8007484 <HAL_RCC_ClockConfig+0x1c8>)
 800745c:	5ccb      	ldrb	r3, [r1, r3]
 800745e:	fa22 f303 	lsr.w	r3, r2, r3
 8007462:	4a09      	ldr	r2, [pc, #36]	@ (8007488 <HAL_RCC_ClockConfig+0x1cc>)
 8007464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007466:	4b09      	ldr	r3, [pc, #36]	@ (800748c <HAL_RCC_ClockConfig+0x1d0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7fc ff78 	bl	8004360 <HAL_InitTick>

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40022000 	.word	0x40022000
 8007480:	40021000 	.word	0x40021000
 8007484:	0800e430 	.word	0x0800e430
 8007488:	20000028 	.word	0x20000028
 800748c:	2000002c 	.word	0x2000002c

08007490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007490:	b490      	push	{r4, r7}
 8007492:	b08a      	sub	sp, #40	@ 0x28
 8007494:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007496:	4b29      	ldr	r3, [pc, #164]	@ (800753c <HAL_RCC_GetSysClockFreq+0xac>)
 8007498:	1d3c      	adds	r4, r7, #4
 800749a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800749c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80074a0:	f240 2301 	movw	r3, #513	@ 0x201
 80074a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80074ba:	4b21      	ldr	r3, [pc, #132]	@ (8007540 <HAL_RCC_GetSysClockFreq+0xb0>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d002      	beq.n	80074d0 <HAL_RCC_GetSysClockFreq+0x40>
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d003      	beq.n	80074d6 <HAL_RCC_GetSysClockFreq+0x46>
 80074ce:	e02b      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074d2:	623b      	str	r3, [r7, #32]
      break;
 80074d4:	e02b      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	0c9b      	lsrs	r3, r3, #18
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	3328      	adds	r3, #40	@ 0x28
 80074e0:	443b      	add	r3, r7
 80074e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80074e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074f2:	4b13      	ldr	r3, [pc, #76]	@ (8007540 <HAL_RCC_GetSysClockFreq+0xb0>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	0c5b      	lsrs	r3, r3, #17
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	3328      	adds	r3, #40	@ 0x28
 80074fe:	443b      	add	r3, r7
 8007500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4a0e      	ldr	r2, [pc, #56]	@ (8007544 <HAL_RCC_GetSysClockFreq+0xb4>)
 800750a:	fb03 f202 	mul.w	r2, r3, r2
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
 8007516:	e004      	b.n	8007522 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4a0b      	ldr	r2, [pc, #44]	@ (8007548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	623b      	str	r3, [r7, #32]
      break;
 8007526:	e002      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <HAL_RCC_GetSysClockFreq+0xb4>)
 800752a:	623b      	str	r3, [r7, #32]
      break;
 800752c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800752e:	6a3b      	ldr	r3, [r7, #32]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	@ 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bc90      	pop	{r4, r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	0800e3c8 	.word	0x0800e3c8
 8007540:	40021000 	.word	0x40021000
 8007544:	007a1200 	.word	0x007a1200
 8007548:	003d0900 	.word	0x003d0900

0800754c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007550:	4b02      	ldr	r3, [pc, #8]	@ (800755c <HAL_RCC_GetHCLKFreq+0x10>)
 8007552:	681b      	ldr	r3, [r3, #0]
}
 8007554:	4618      	mov	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	20000028 	.word	0x20000028

08007560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007564:	f7ff fff2 	bl	800754c <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4903      	ldr	r1, [pc, #12]	@ (8007584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40021000 	.word	0x40021000
 8007584:	0800e440 	.word	0x0800e440

08007588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800758c:	f7ff ffde 	bl	800754c <HAL_RCC_GetHCLKFreq>
 8007590:	4602      	mov	r2, r0
 8007592:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	0adb      	lsrs	r3, r3, #11
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	4903      	ldr	r1, [pc, #12]	@ (80075ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800759e:	5ccb      	ldrb	r3, [r1, r3]
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40021000 	.word	0x40021000
 80075ac:	0800e440 	.word	0x0800e440

080075b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075b8:	4b0a      	ldr	r3, [pc, #40]	@ (80075e4 <RCC_Delay+0x34>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0a      	ldr	r2, [pc, #40]	@ (80075e8 <RCC_Delay+0x38>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	0a5b      	lsrs	r3, r3, #9
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80075cc:	bf00      	nop
  }
  while (Delay --);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1e5a      	subs	r2, r3, #1
 80075d2:	60fa      	str	r2, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f9      	bne.n	80075cc <RCC_Delay+0x1c>
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr
 80075e4:	20000028 	.word	0x20000028
 80075e8:	10624dd3 	.word	0x10624dd3

080075ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d07d      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760c:	4b4f      	ldr	r3, [pc, #316]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10d      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007618:	4b4c      	ldr	r3, [pc, #304]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	4a4b      	ldr	r2, [pc, #300]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007622:	61d3      	str	r3, [r2, #28]
 8007624:	4b49      	ldr	r3, [pc, #292]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007634:	4b46      	ldr	r3, [pc, #280]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d118      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007640:	4b43      	ldr	r3, [pc, #268]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a42      	ldr	r2, [pc, #264]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800764a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800764c:	f7fc feca 	bl	80043e4 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007654:	f7fc fec6 	bl	80043e4 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b64      	cmp	r3, #100	@ 0x64
 8007660:	d901      	bls.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e06d      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007666:	4b3a      	ldr	r3, [pc, #232]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007672:	4b36      	ldr	r3, [pc, #216]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d02e      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d027      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007690:	4b2e      	ldr	r3, [pc, #184]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800769a:	4b2e      	ldr	r3, [pc, #184]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076a0:	4b2c      	ldr	r3, [pc, #176]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076a6:	4a29      	ldr	r2, [pc, #164]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d014      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b6:	f7fc fe95 	bl	80043e4 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076bc:	e00a      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076be:	f7fc fe91 	bl	80043e4 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e036      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0ee      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076e0:	4b1a      	ldr	r3, [pc, #104]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4917      	ldr	r1, [pc, #92]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d105      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f8:	4b14      	ldr	r3, [pc, #80]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4a13      	ldr	r2, [pc, #76]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007710:	4b0e      	ldr	r3, [pc, #56]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	490b      	ldr	r1, [pc, #44]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771e:	4313      	orrs	r3, r2
 8007720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800772e:	4b07      	ldr	r3, [pc, #28]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	4904      	ldr	r1, [pc, #16]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000
 8007750:	40007000 	.word	0x40007000
 8007754:	42420440 	.word	0x42420440

08007758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e076      	b.n	8007858 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d108      	bne.n	8007784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777a:	d009      	beq.n	8007790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	61da      	str	r2, [r3, #28]
 8007782:	e005      	b.n	8007790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fc fc50 	bl	8004050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007814:	ea42 0103 	orr.w	r1, r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	0c1a      	lsrs	r2, r3, #16
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f002 0204 	and.w	r2, r2, #4
 8007836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	@ 0x30
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800786e:	2301      	movs	r3, #1
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x26>
 8007882:	2302      	movs	r3, #2
 8007884:	e18a      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x33c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788e:	f7fc fda9 	bl	80043e4 <HAL_GetTick>
 8007892:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078a4:	887b      	ldrh	r3, [r7, #2]
 80078a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d00f      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x70>
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078b6:	d107      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x68>
 80078c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d003      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078c8:	2302      	movs	r3, #2
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80078ce:	e15b      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x82>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x82>
 80078dc:	887b      	ldrh	r3, [r7, #2]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80078e8:	e14e      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d003      	beq.n	80078fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2205      	movs	r2, #5
 80078fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	887a      	ldrh	r2, [r7, #2]
 800790e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	887a      	ldrh	r2, [r7, #2]
 8007914:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	887a      	ldrh	r2, [r7, #2]
 8007920:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	887a      	ldrh	r2, [r7, #2]
 8007926:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793e:	2b40      	cmp	r3, #64	@ 0x40
 8007940:	d007      	beq.n	8007952 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795a:	d178      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <HAL_SPI_TransmitReceive+0x10a>
 8007964:	8b7b      	ldrh	r3, [r7, #26]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d166      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	881a      	ldrh	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	1c9a      	adds	r2, r3, #2
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800798e:	e053      	b.n	8007a38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d11b      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x176>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d016      	beq.n	80079d6 <HAL_SPI_TransmitReceive+0x176>
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d113      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	881a      	ldrh	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079be:	1c9a      	adds	r2, r3, #2
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d119      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x1b8>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d014      	beq.n	8007a18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f8:	b292      	uxth	r2, r2
 80079fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	1c9a      	adds	r2, r3, #2
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a14:	2301      	movs	r3, #1
 8007a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a18:	f7fc fce4 	bl	80043e4 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d807      	bhi.n	8007a38 <HAL_SPI_TransmitReceive+0x1d8>
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d003      	beq.n	8007a38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007a36:	e0a7      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1a6      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x130>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1a1      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x130>
 8007a4c:	e07c      	b.n	8007b48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x1fc>
 8007a56:	8b7b      	ldrh	r3, [r7, #26]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d16b      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	7812      	ldrb	r2, [r2, #0]
 8007a68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a82:	e057      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d11c      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x26c>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d017      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x26c>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d114      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	330c      	adds	r3, #12
 8007aac:	7812      	ldrb	r2, [r2, #0]
 8007aae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d119      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x2ae>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d014      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b0e:	f7fc fc69 	bl	80043e4 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d803      	bhi.n	8007b26 <HAL_SPI_TransmitReceive+0x2c6>
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d102      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x2cc>
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007b32:	e029      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1a2      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x224>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d19d      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f8b1 	bl	8007cb4 <SPI_EndRxTxTransaction>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2220      	movs	r2, #32
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007b64:	e010      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	e000      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007b98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3730      	adds	r7, #48	@ 0x30
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bb4:	f7fc fc16 	bl	80043e4 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bc4:	f7fc fc0e 	bl	80043e4 <HAL_GetTick>
 8007bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bca:	4b39      	ldr	r3, [pc, #228]	@ (8007cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	015b      	lsls	r3, r3, #5
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	fb02 f303 	mul.w	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bda:	e054      	b.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d050      	beq.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be4:	f7fc fbfe 	bl	80043e4 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d902      	bls.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d13d      	bne.n	8007c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c12:	d111      	bne.n	8007c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1c:	d004      	beq.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c26:	d107      	bne.n	8007c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c40:	d10f      	bne.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e017      	b.n	8007ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d19b      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20000028 	.word	0x20000028

08007cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2180      	movs	r1, #128	@ 0x80
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ff6a 	bl	8007ba4 <SPI_WaitFlagStateUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e000      	b.n	8007ce8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e041      	b.n	8007d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fc f9e4 	bl	80040e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f000 fa70 	bl	8008214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d001      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e03a      	b.n	8007e1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a18      	ldr	r2, [pc, #96]	@ (8007e28 <HAL_TIM_Base_Start_IT+0x98>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x58>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd2:	d009      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x58>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a14      	ldr	r2, [pc, #80]	@ (8007e2c <HAL_TIM_Base_Start_IT+0x9c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x58>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <HAL_TIM_Base_Start_IT+0xa0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d111      	bne.n	8007e0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d010      	beq.n	8007e1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0201 	orr.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0a:	e007      	b.n	8007e1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40000400 	.word	0x40000400
 8007e30:	40000800 	.word	0x40000800

08007e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d122      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d11b      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0202 	mvn.w	r2, #2
 8007e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9b1 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9a4 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9b3 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d122      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d11b      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0204 	mvn.w	r2, #4
 8007eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f987 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8007ed0:	e005      	b.n	8007ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f97a 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f989 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d122      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d11b      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0208 	mvn.w	r2, #8
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f95d 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f950 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f95f 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d122      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d11b      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f06f 0210 	mvn.w	r2, #16
 8007f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2208      	movs	r2, #8
 8007f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f933 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8007f78:	e005      	b.n	8007f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f926 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f935 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d10e      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d107      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0201 	mvn.w	r2, #1
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7f8 fee2 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc2:	2b80      	cmp	r3, #128	@ 0x80
 8007fc4:	d10e      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d107      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa77 	bl	80084d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fee:	2b40      	cmp	r3, #64	@ 0x40
 8007ff0:	d10e      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d107      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8f9 	bl	8008202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b20      	cmp	r3, #32
 800801c:	d10e      	bne.n	800803c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d107      	bne.n	800803c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f06f 0220 	mvn.w	r2, #32
 8008034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa42 	bl	80084c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIM_ConfigClockSource+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e0b3      	b.n	80081c4 <HAL_TIM_ConfigClockSource+0x180>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800807a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008094:	d03e      	beq.n	8008114 <HAL_TIM_ConfigClockSource+0xd0>
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809a:	f200 8087 	bhi.w	80081ac <HAL_TIM_ConfigClockSource+0x168>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	f000 8085 	beq.w	80081b0 <HAL_TIM_ConfigClockSource+0x16c>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080aa:	d87f      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080ac:	2b70      	cmp	r3, #112	@ 0x70
 80080ae:	d01a      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0xa2>
 80080b0:	2b70      	cmp	r3, #112	@ 0x70
 80080b2:	d87b      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080b4:	2b60      	cmp	r3, #96	@ 0x60
 80080b6:	d050      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x116>
 80080b8:	2b60      	cmp	r3, #96	@ 0x60
 80080ba:	d877      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080bc:	2b50      	cmp	r3, #80	@ 0x50
 80080be:	d03c      	beq.n	800813a <HAL_TIM_ConfigClockSource+0xf6>
 80080c0:	2b50      	cmp	r3, #80	@ 0x50
 80080c2:	d873      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080c4:	2b40      	cmp	r3, #64	@ 0x40
 80080c6:	d058      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x136>
 80080c8:	2b40      	cmp	r3, #64	@ 0x40
 80080ca:	d86f      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080cc:	2b30      	cmp	r3, #48	@ 0x30
 80080ce:	d064      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x156>
 80080d0:	2b30      	cmp	r3, #48	@ 0x30
 80080d2:	d86b      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d060      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x156>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d867      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d05c      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x156>
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d05a      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80080e4:	e062      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6899      	ldr	r1, [r3, #8]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f000 f966 	bl	80083c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008108:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	609a      	str	r2, [r3, #8]
      break;
 8008112:	e04e      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	6899      	ldr	r1, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f000 f94f 	bl	80083c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008136:	609a      	str	r2, [r3, #8]
      break;
 8008138:	e03b      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	461a      	mov	r2, r3
 8008148:	f000 f8c6 	bl	80082d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2150      	movs	r1, #80	@ 0x50
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f91d 	bl	8008392 <TIM_ITRx_SetConfig>
      break;
 8008158:	e02b      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6859      	ldr	r1, [r3, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	461a      	mov	r2, r3
 8008168:	f000 f8e4 	bl	8008334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2160      	movs	r1, #96	@ 0x60
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f90d 	bl	8008392 <TIM_ITRx_SetConfig>
      break;
 8008178:	e01b      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6859      	ldr	r1, [r3, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	461a      	mov	r2, r3
 8008188:	f000 f8a6 	bl	80082d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2140      	movs	r1, #64	@ 0x40
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f8fd 	bl	8008392 <TIM_ITRx_SetConfig>
      break;
 8008198:	e00b      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f000 f8f4 	bl	8008392 <TIM_ITRx_SetConfig>
        break;
 80081aa:	e002      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081ac:	bf00      	nop
 80081ae:	e000      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr

08008202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a29      	ldr	r2, [pc, #164]	@ (80082cc <TIM_Base_SetConfig+0xb8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00b      	beq.n	8008244 <TIM_Base_SetConfig+0x30>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008232:	d007      	beq.n	8008244 <TIM_Base_SetConfig+0x30>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a26      	ldr	r2, [pc, #152]	@ (80082d0 <TIM_Base_SetConfig+0xbc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d003      	beq.n	8008244 <TIM_Base_SetConfig+0x30>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a25      	ldr	r2, [pc, #148]	@ (80082d4 <TIM_Base_SetConfig+0xc0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d108      	bne.n	8008256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <TIM_Base_SetConfig+0xb8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00b      	beq.n	8008276 <TIM_Base_SetConfig+0x62>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008264:	d007      	beq.n	8008276 <TIM_Base_SetConfig+0x62>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <TIM_Base_SetConfig+0xbc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_Base_SetConfig+0x62>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a18      	ldr	r2, [pc, #96]	@ (80082d4 <TIM_Base_SetConfig+0xc0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d108      	bne.n	8008288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800827c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a07      	ldr	r2, [pc, #28]	@ (80082cc <TIM_Base_SetConfig+0xb8>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d103      	bne.n	80082bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	615a      	str	r2, [r3, #20]
}
 80082c2:	bf00      	nop
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40000400 	.word	0x40000400
 80082d4:	40000800 	.word	0x40000800

080082d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f023 0201 	bic.w	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f023 030a 	bic.w	r3, r3, #10
 8008314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	f023 0210 	bic.w	r2, r3, #16
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800835e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	031b      	lsls	r3, r3, #12
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	4313      	orrs	r3, r2
 8008368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	621a      	str	r2, [r3, #32]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr

08008392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f043 0307 	orr.w	r3, r3, #7
 80083b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	609a      	str	r2, [r3, #8]
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	021a      	lsls	r2, r3, #8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	609a      	str	r2, [r3, #8]
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr

08008404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008418:	2302      	movs	r3, #2
 800841a:	e046      	b.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a16      	ldr	r2, [pc, #88]	@ (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008468:	d009      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a12      	ldr	r2, [pc, #72]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a10      	ldr	r2, [pc, #64]	@ (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d10c      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4313      	orrs	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800

080084c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e03f      	b.n	8008576 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fb fe0e 	bl	800412c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2224      	movs	r2, #36	@ 0x24
 8008514:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f9a3 	bl	8008874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800853c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695a      	ldr	r2, [r3, #20]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800854c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800855c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b08a      	sub	sp, #40	@ 0x28
 8008582:	af02      	add	r7, sp, #8
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b20      	cmp	r3, #32
 800859c:	d17c      	bne.n	8008698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_UART_Transmit+0x2c>
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e075      	b.n	800869a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_UART_Transmit+0x3e>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e06e      	b.n	800869a <HAL_UART_Transmit+0x11c>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2221      	movs	r2, #33	@ 0x21
 80085ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80085d2:	f7fb ff07 	bl	80043e4 <HAL_GetTick>
 80085d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ec:	d108      	bne.n	8008600 <HAL_UART_Transmit+0x82>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d104      	bne.n	8008600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	e003      	b.n	8008608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008610:	e02a      	b.n	8008668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2200      	movs	r2, #0
 800861a:	2180      	movs	r1, #128	@ 0x80
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 f8df 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e036      	b.n	800869a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	3302      	adds	r3, #2
 8008646:	61bb      	str	r3, [r7, #24]
 8008648:	e007      	b.n	800865a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	3301      	adds	r3, #1
 8008658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800865e:	b29b      	uxth	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	b29a      	uxth	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1cf      	bne.n	8008612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2200      	movs	r2, #0
 800867a:	2140      	movs	r1, #64	@ 0x40
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f8af 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e006      	b.n	800869a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e000      	b.n	800869a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008698:	2302      	movs	r3, #2
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b08a      	sub	sp, #40	@ 0x28
 80086a6:	af02      	add	r7, sp, #8
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b20      	cmp	r3, #32
 80086c0:	f040 8089 	bne.w	80087d6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_UART_Receive+0x2e>
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e081      	b.n	80087d8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_UART_Receive+0x40>
 80086de:	2302      	movs	r3, #2
 80086e0:	e07a      	b.n	80087d8 <HAL_UART_Receive+0x136>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2222      	movs	r2, #34	@ 0x22
 80086f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80086f8:	f7fb fe74 	bl	80043e4 <HAL_GetTick>
 80086fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	88fa      	ldrh	r2, [r7, #6]
 8008702:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008712:	d108      	bne.n	8008726 <HAL_UART_Receive+0x84>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e003      	b.n	800872e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008736:	e043      	b.n	80087c0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	2120      	movs	r1, #32
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f84c 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e042      	b.n	80087d8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008764:	b29a      	uxth	r2, r3
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	3302      	adds	r3, #2
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	e01f      	b.n	80087b2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877a:	d007      	beq.n	800878c <HAL_UART_Receive+0xea>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <HAL_UART_Receive+0xf8>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e008      	b.n	80087ac <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	3301      	adds	r3, #1
 80087b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1b6      	bne.n	8008738 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f0:	e02c      	b.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d028      	beq.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <UART_WaitOnFlagUntilTimeout+0x30>
 8008800:	f7fb fdf0 	bl	80043e4 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	429a      	cmp	r2, r3
 800880e:	d21d      	bcs.n	800884c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800881e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e00f      	b.n	800886c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4013      	ands	r3, r2
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	461a      	mov	r2, r3
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	429a      	cmp	r2, r3
 8008868:	d0c3      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80088ae:	f023 030c 	bic.w	r3, r3, #12
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	430b      	orrs	r3, r1
 80088ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008988 <UART_SetConfig+0x114>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d103      	bne.n	80088e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088dc:	f7fe fe54 	bl	8007588 <HAL_RCC_GetPCLK2Freq>
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	e002      	b.n	80088ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088e4:	f7fe fe3c 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 80088e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009a      	lsls	r2, r3, #2
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008900:	4a22      	ldr	r2, [pc, #136]	@ (800898c <UART_SetConfig+0x118>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	095b      	lsrs	r3, r3, #5
 8008908:	0119      	lsls	r1, r3, #4
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009a      	lsls	r2, r3, #2
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008920:	4b1a      	ldr	r3, [pc, #104]	@ (800898c <UART_SetConfig+0x118>)
 8008922:	fba3 0302 	umull	r0, r3, r3, r2
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2064      	movs	r0, #100	@ 0x64
 800892a:	fb00 f303 	mul.w	r3, r0, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	3332      	adds	r3, #50	@ 0x32
 8008934:	4a15      	ldr	r2, [pc, #84]	@ (800898c <UART_SetConfig+0x118>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008940:	4419      	add	r1, r3
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009a      	lsls	r2, r3, #2
 800894c:	441a      	add	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	fbb2 f2f3 	udiv	r2, r2, r3
 8008958:	4b0c      	ldr	r3, [pc, #48]	@ (800898c <UART_SetConfig+0x118>)
 800895a:	fba3 0302 	umull	r0, r3, r3, r2
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	2064      	movs	r0, #100	@ 0x64
 8008962:	fb00 f303 	mul.w	r3, r0, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	3332      	adds	r3, #50	@ 0x32
 800896c:	4a07      	ldr	r2, [pc, #28]	@ (800898c <UART_SetConfig+0x118>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	f003 020f 	and.w	r2, r3, #15
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	440a      	add	r2, r1
 800897e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	40013800 	.word	0x40013800
 800898c:	51eb851f 	.word	0x51eb851f

08008990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008990:	b084      	sub	sp, #16
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	f107 0014 	add.w	r0, r7, #20
 800899e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	b004      	add	sp, #16
 80089ae:	4770      	bx	lr

080089b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089c0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80089c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr

080089dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089e4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80089e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	43db      	mvns	r3, r3
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4013      	ands	r3, r2
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr

08008a10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr

08008a28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a28:	b084      	sub	sp, #16
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	f107 0014 	add.w	r0, r7, #20
 8008a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	b004      	add	sp, #16
 8008a66:	4770      	bx	lr

08008a68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b09b      	sub	sp, #108	@ 0x6c
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d81f      	bhi.n	8008ada <USB_ActivateEndpoint+0x72>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <USB_ActivateEndpoint+0x38>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008acd 	.word	0x08008acd
 8008aa8:	08008ae3 	.word	0x08008ae3
 8008aac:	08008abf 	.word	0x08008abf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ab0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008ab4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ab8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008abc:	e012      	b.n	8008ae4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008abe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008ac2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008ac6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008aca:	e00b      	b.n	8008ae4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008acc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008ad0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ad4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008ad8:	e004      	b.n	8008ae4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008ae0:	e000      	b.n	8008ae4 <USB_ActivateEndpoint+0x7c>
      break;
 8008ae2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	7b1b      	ldrb	r3, [r3, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 8149 	bne.w	8008de6 <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8084 	beq.w	8008c66 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	4413      	add	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	011a      	lsls	r2, r3, #4
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	81fb      	strh	r3, [r7, #14]
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d01b      	beq.n	8008be2 <USB_ActivateEndpoint+0x17a>
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc0:	81bb      	strh	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	441a      	add	r2, r3
 8008bcc:	89bb      	ldrh	r3, [r7, #12]
 8008bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d020      	beq.n	8008c2c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c00:	813b      	strh	r3, [r7, #8]
 8008c02:	893b      	ldrh	r3, [r7, #8]
 8008c04:	f083 0320 	eor.w	r3, r3, #32
 8008c08:	813b      	strh	r3, [r7, #8]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	8013      	strh	r3, [r2, #0]
 8008c2a:	e27f      	b.n	800912c <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c42:	817b      	strh	r3, [r7, #10]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	897b      	ldrh	r3, [r7, #10]
 8008c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	8013      	strh	r3, [r2, #0]
 8008c64:	e262      	b.n	800912c <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c76:	4413      	add	r3, r2
 8008c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	011a      	lsls	r2, r3, #4
 8008c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	4413      	add	r3, r2
 8008cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	011a      	lsls	r2, r3, #4
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008cbc:	623b      	str	r3, [r7, #32]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d112      	bne.n	8008cec <USB_ActivateEndpoint+0x284>
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	e02f      	b.n	8008d4c <USB_ActivateEndpoint+0x2e4>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cf2:	d813      	bhi.n	8008d1c <USB_ActivateEndpoint+0x2b4>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	085b      	lsrs	r3, r3, #1
 8008cfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <USB_ActivateEndpoint+0x2a6>
 8008d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	029b      	lsls	r3, r3, #10
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	e017      	b.n	8008d4c <USB_ActivateEndpoint+0x2e4>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 031f 	and.w	r3, r3, #31
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <USB_ActivateEndpoint+0x2ce>
 8008d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d32:	3b01      	subs	r3, #1
 8008d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	029b      	lsls	r3, r3, #10
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	83fb      	strh	r3, [r7, #30]
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <USB_ActivateEndpoint+0x334>
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d7a:	83bb      	strh	r3, [r7, #28]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	8bbb      	ldrh	r3, [r7, #28]
 8008d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db2:	837b      	strh	r3, [r7, #26]
 8008db4:	8b7b      	ldrh	r3, [r7, #26]
 8008db6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dba:	837b      	strh	r3, [r7, #26]
 8008dbc:	8b7b      	ldrh	r3, [r7, #26]
 8008dbe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008dc2:	837b      	strh	r3, [r7, #26]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	8b7b      	ldrh	r3, [r7, #26]
 8008dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	8013      	strh	r3, [r2, #0]
 8008de4:	e1a2      	b.n	800912c <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dfc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	441a      	add	r2, r3
 8008e0a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e32:	4413      	add	r3, r2
 8008e34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	011a      	lsls	r2, r3, #4
 8008e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	891b      	ldrh	r3, [r3, #8]
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e66:	4413      	add	r3, r2
 8008e68:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	011a      	lsls	r2, r3, #4
 8008e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	895b      	ldrh	r3, [r3, #10]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e88:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 8091 	bne.w	8008fb6 <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008ea2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01b      	beq.n	8008ee4 <USB_ActivateEndpoint+0x47c>
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008ef2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01b      	beq.n	8008f34 <USB_ActivateEndpoint+0x4cc>
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	441a      	add	r2, r3
 8008f1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008f4c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f52:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008f54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f56:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f5a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	441a      	add	r2, r3
 8008f66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f92:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	441a      	add	r2, r3
 8008f9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	8013      	strh	r3, [r2, #0]
 8008fb4:	e0ba      	b.n	800912c <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008fc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01d      	beq.n	800900e <USB_ActivateEndpoint+0x5a6>
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	441a      	add	r2, r3
 8008ff6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009002:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800900a:	b29b      	uxth	r3, r3
 800900c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800901e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01d      	beq.n	8009066 <USB_ActivateEndpoint+0x5fe>
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800903c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009040:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800905a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800905e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009062:	b29b      	uxth	r3, r3
 8009064:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	78db      	ldrb	r3, [r3, #3]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d024      	beq.n	80090b8 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009084:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800908c:	f083 0320 	eor.w	r3, r3, #32
 8009090:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
 80090b6:	e01d      	b.n	80090f4 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80090e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	b29b      	uxth	r3, r3
 8009102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	441a      	add	r2, r3
 8009116:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009128:	b29b      	uxth	r3, r3
 800912a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800912c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009130:	4618      	mov	r0, r3
 8009132:	376c      	adds	r7, #108	@ 0x6c
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop

0800913c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800913c:	b480      	push	{r7}
 800913e:	b08d      	sub	sp, #52	@ 0x34
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	7b1b      	ldrb	r3, [r3, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 808e 	bne.w	800926c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	785b      	ldrb	r3, [r3, #1]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d044      	beq.n	80091e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	81bb      	strh	r3, [r7, #12]
 8009166:	89bb      	ldrh	r3, [r7, #12]
 8009168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01b      	beq.n	80091a8 <USB_DeactivateEndpoint+0x6c>
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009186:	817b      	strh	r3, [r7, #10]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	441a      	add	r2, r3
 8009192:	897b      	ldrh	r3, [r7, #10]
 8009194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800919c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091be:	813b      	strh	r3, [r7, #8]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	441a      	add	r2, r3
 80091ca:	893b      	ldrh	r3, [r7, #8]
 80091cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091dc:	b29b      	uxth	r3, r3
 80091de:	8013      	strh	r3, [r2, #0]
 80091e0:	e192      	b.n	8009508 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	827b      	strh	r3, [r7, #18]
 80091f0:	8a7b      	ldrh	r3, [r7, #18]
 80091f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01b      	beq.n	8009232 <USB_DeactivateEndpoint+0xf6>
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800920c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009210:	823b      	strh	r3, [r7, #16]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	441a      	add	r2, r3
 800921c:	8a3b      	ldrh	r3, [r7, #16]
 800921e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009226:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800922a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922e:	b29b      	uxth	r3, r3
 8009230:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009248:	81fb      	strh	r3, [r7, #14]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	441a      	add	r2, r3
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800925a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009266:	b29b      	uxth	r3, r3
 8009268:	8013      	strh	r3, [r2, #0]
 800926a:	e14d      	b.n	8009508 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f040 80a5 	bne.w	80093c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	843b      	strh	r3, [r7, #32]
 8009284:	8c3b      	ldrh	r3, [r7, #32]
 8009286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d01b      	beq.n	80092c6 <USB_DeactivateEndpoint+0x18a>
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a4:	83fb      	strh	r3, [r7, #30]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	441a      	add	r2, r3
 80092b0:	8bfb      	ldrh	r3, [r7, #30]
 80092b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	83bb      	strh	r3, [r7, #28]
 80092d4:	8bbb      	ldrh	r3, [r7, #28]
 80092d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01b      	beq.n	8009316 <USB_DeactivateEndpoint+0x1da>
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f4:	837b      	strh	r3, [r7, #26]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	8b7b      	ldrh	r3, [r7, #26]
 8009302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800930e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009312:	b29b      	uxth	r3, r3
 8009314:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800932c:	833b      	strh	r3, [r7, #24]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	441a      	add	r2, r3
 8009338:	8b3b      	ldrh	r3, [r7, #24]
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009364:	82fb      	strh	r3, [r7, #22]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	441a      	add	r2, r3
 8009370:	8afb      	ldrh	r3, [r7, #22]
 8009372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800937a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800937e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009382:	b29b      	uxth	r3, r3
 8009384:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800939c:	82bb      	strh	r3, [r7, #20]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	441a      	add	r2, r3
 80093a8:	8abb      	ldrh	r3, [r7, #20]
 80093aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	8013      	strh	r3, [r2, #0]
 80093be:	e0a3      	b.n	8009508 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80093ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80093d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01b      	beq.n	8009410 <USB_DeactivateEndpoint+0x2d4>
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	441a      	add	r2, r3
 80093fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80093fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940c:	b29b      	uxth	r3, r3
 800940e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800941e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01b      	beq.n	8009460 <USB_DeactivateEndpoint+0x324>
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800943a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	441a      	add	r2, r3
 800944a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800944c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009458:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800945c:	b29b      	uxth	r3, r3
 800945e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009476:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	441a      	add	r2, r3
 8009482:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800948c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	441a      	add	r2, r3
 80094f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009504:	b29b      	uxth	r3, r3
 8009506:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3734      	adds	r7, #52	@ 0x34
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b0c4      	sub	sp, #272	@ 0x110
 8009518:	af00      	add	r7, sp, #0
 800951a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800951e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009522:	6018      	str	r0, [r3, #0]
 8009524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009528:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800952c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800952e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009532:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b01      	cmp	r3, #1
 800953c:	f040 86ec 	bne.w	800a318 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009540:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009544:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009550:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	429a      	cmp	r2, r3
 800955a:	d908      	bls.n	800956e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800955c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800956c:	e007      	b.n	800957e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800956e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009572:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800957e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009582:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	7b1b      	ldrb	r3, [r3, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d142      	bne.n	8009614 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800958e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009592:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6959      	ldr	r1, [r3, #20]
 800959a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800959e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	88da      	ldrh	r2, [r3, #6]
 80095a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80095b0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80095b4:	6800      	ldr	r0, [r0, #0]
 80095b6:	f001 fc92 	bl	800aede <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	4413      	add	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	011a      	lsls	r2, r3, #4
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	4413      	add	r3, r2
 80095f0:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 80095f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009602:	b29a      	uxth	r2, r3
 8009604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009608:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	f000 be34 	b.w	800a27c <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009614:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009618:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	78db      	ldrb	r3, [r3, #3]
 8009620:	2b02      	cmp	r3, #2
 8009622:	f040 843b 	bne.w	8009e9c <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800962a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a1a      	ldr	r2, [r3, #32]
 8009632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009636:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	429a      	cmp	r2, r3
 8009640:	f240 83b8 	bls.w	8009db4 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009648:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009652:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800966e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	441a      	add	r2, r3
 8009688:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800968c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009694:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969c:	b29b      	uxth	r3, r3
 800969e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80096a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096b6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 81b4 	beq.w	8009a4e <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d16d      	bne.n	80097de <USB_EPStartXfer+0x2ca>
 8009702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009706:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800970e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009712:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800971c:	b29b      	uxth	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	4413      	add	r3, r2
 8009724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800972a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	011a      	lsls	r2, r3, #4
 8009734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009736:	4413      	add	r3, r2
 8009738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800973c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800973e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d112      	bne.n	800976c <USB_EPStartXfer+0x258>
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b29b      	uxth	r3, r3
 800974c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009750:	b29a      	uxth	r2, r3
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	801a      	strh	r2, [r3, #0]
 8009756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29a      	uxth	r2, r3
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	e05d      	b.n	8009828 <USB_EPStartXfer+0x314>
 800976c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009770:	2b3e      	cmp	r3, #62	@ 0x3e
 8009772:	d817      	bhi.n	80097a4 <USB_EPStartXfer+0x290>
 8009774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800977e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <USB_EPStartXfer+0x280>
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978e:	3301      	adds	r3, #1
 8009790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009798:	b29b      	uxth	r3, r3
 800979a:	029b      	lsls	r3, r3, #10
 800979c:	b29a      	uxth	r2, r3
 800979e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	e041      	b.n	8009828 <USB_EPStartXfer+0x314>
 80097a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80097ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <USB_EPStartXfer+0x2b0>
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097be:	3b01      	subs	r3, #1
 80097c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	029b      	lsls	r3, r3, #10
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	801a      	strh	r2, [r3, #0]
 80097dc:	e024      	b.n	8009828 <USB_EPStartXfer+0x314>
 80097de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d11c      	bne.n	8009828 <USB_EPStartXfer+0x314>
 80097ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009802:	4413      	add	r3, r2
 8009804:	637b      	str	r3, [r7, #52]	@ 0x34
 8009806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800980a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	011a      	lsls	r2, r3, #4
 8009814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009816:	4413      	add	r3, r2
 8009818:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30
 800981e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009822:	b29a      	uxth	r2, r3
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800982c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	895b      	ldrh	r3, [r3, #10]
 8009834:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800983c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6959      	ldr	r1, [r3, #20]
 8009844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009848:	b29b      	uxth	r3, r3
 800984a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800984e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009852:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	f001 fb41 	bl	800aede <USB_WritePMA>
            ep->xfer_buff += len;
 800985c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009860:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695a      	ldr	r2, [r3, #20]
 8009868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800986c:	441a      	add	r2, r3
 800986e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009872:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800987a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800987e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a1a      	ldr	r2, [r3, #32]
 8009886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800988a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	429a      	cmp	r2, r3
 8009894:	d90f      	bls.n	80098b6 <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8009896:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800989a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6a1a      	ldr	r2, [r3, #32]
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	621a      	str	r2, [r3, #32]
 80098b4:	e00e      	b.n	80098d4 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 80098b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 80098c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2200      	movs	r2, #0
 80098d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d16d      	bne.n	80099c0 <USB_EPStartXfer+0x4ac>
 80098e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fe:	b29b      	uxth	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	4413      	add	r3, r2
 8009906:	61fb      	str	r3, [r7, #28]
 8009908:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800990c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	011a      	lsls	r2, r3, #4
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d112      	bne.n	800994e <USB_EPStartXfer+0x43a>
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009932:	b29a      	uxth	r2, r3
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009946:	b29a      	uxth	r2, r3
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	e063      	b.n	8009a16 <USB_EPStartXfer+0x502>
 800994e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009952:	2b3e      	cmp	r3, #62	@ 0x3e
 8009954:	d817      	bhi.n	8009986 <USB_EPStartXfer+0x472>
 8009956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <USB_EPStartXfer+0x462>
 800996c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009976:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800997a:	b29b      	uxth	r3, r3
 800997c:	029b      	lsls	r3, r3, #10
 800997e:	b29a      	uxth	r2, r3
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	e047      	b.n	8009a16 <USB_EPStartXfer+0x502>
 8009986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009994:	f003 031f 	and.w	r3, r3, #31
 8009998:	2b00      	cmp	r3, #0
 800999a:	d104      	bne.n	80099a6 <USB_EPStartXfer+0x492>
 800999c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099a0:	3b01      	subs	r3, #1
 80099a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80099a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	029b      	lsls	r3, r3, #10
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	e02a      	b.n	8009a16 <USB_EPStartXfer+0x502>
 80099c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d122      	bne.n	8009a16 <USB_EPStartXfer+0x502>
 80099d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	627b      	str	r3, [r7, #36]	@ 0x24
 80099dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	4413      	add	r3, r2
 80099f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80099f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	011a      	lsls	r2, r3, #4
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	4413      	add	r3, r2
 8009a06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a0a:	623b      	str	r3, [r7, #32]
 8009a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	891b      	ldrh	r3, [r3, #8]
 8009a22:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6959      	ldr	r1, [r3, #20]
 8009a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009a3c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009a40:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009a44:	6800      	ldr	r0, [r0, #0]
 8009a46:	f001 fa4a 	bl	800aede <USB_WritePMA>
 8009a4a:	f000 bc17 	b.w	800a27c <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d16d      	bne.n	8009b3a <USB_EPStartXfer+0x626>
 8009a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a7e:	4413      	add	r3, r2
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	011a      	lsls	r2, r3, #4
 8009a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a92:	4413      	add	r3, r2
 8009a94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d112      	bne.n	8009ac8 <USB_EPStartXfer+0x5b4>
 8009aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e063      	b.n	8009b90 <USB_EPStartXfer+0x67c>
 8009ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ace:	d817      	bhi.n	8009b00 <USB_EPStartXfer+0x5ec>
 8009ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad4:	085b      	lsrs	r3, r3, #1
 8009ad6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <USB_EPStartXfer+0x5dc>
 8009ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aea:	3301      	adds	r3, #1
 8009aec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	029b      	lsls	r3, r3, #10
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009afc:	801a      	strh	r2, [r3, #0]
 8009afe:	e047      	b.n	8009b90 <USB_EPStartXfer+0x67c>
 8009b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b04:	095b      	lsrs	r3, r3, #5
 8009b06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <USB_EPStartXfer+0x60c>
 8009b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	029b      	lsls	r3, r3, #10
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b36:	801a      	strh	r2, [r3, #0]
 8009b38:	e02a      	b.n	8009b90 <USB_EPStartXfer+0x67c>
 8009b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d122      	bne.n	8009b90 <USB_EPStartXfer+0x67c>
 8009b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b6a:	4413      	add	r3, r2
 8009b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	011a      	lsls	r2, r3, #4
 8009b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b7e:	4413      	add	r3, r2
 8009b80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	891b      	ldrh	r3, [r3, #8]
 8009b9c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6959      	ldr	r1, [r3, #20]
 8009bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009bb6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009bba:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009bbe:	6800      	ldr	r0, [r0, #0]
 8009bc0:	f001 f98d 	bl	800aede <USB_WritePMA>
            ep->xfer_buff += len;
 8009bc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695a      	ldr	r2, [r3, #20]
 8009bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd4:	441a      	add	r2, r3
 8009bd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009be6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d90f      	bls.n	8009c1e <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009bfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6a1a      	ldr	r2, [r3, #32]
 8009c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	621a      	str	r2, [r3, #32]
 8009c1c:	e00e      	b.n	8009c3c <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d16d      	bne.n	8009d34 <USB_EPStartXfer+0x820>
 8009c58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c78:	4413      	add	r3, r2
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	011a      	lsls	r2, r3, #4
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d112      	bne.n	8009cc2 <USB_EPStartXfer+0x7ae>
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009caa:	801a      	strh	r2, [r3, #0]
 8009cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	e05d      	b.n	8009d7e <USB_EPStartXfer+0x86a>
 8009cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cc8:	d817      	bhi.n	8009cfa <USB_EPStartXfer+0x7e6>
 8009cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cce:	085b      	lsrs	r3, r3, #1
 8009cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <USB_EPStartXfer+0x7d6>
 8009ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	029b      	lsls	r3, r3, #10
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	801a      	strh	r2, [r3, #0]
 8009cf8:	e041      	b.n	8009d7e <USB_EPStartXfer+0x86a>
 8009cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <USB_EPStartXfer+0x806>
 8009d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d14:	3b01      	subs	r3, #1
 8009d16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	029b      	lsls	r3, r3, #10
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	801a      	strh	r2, [r3, #0]
 8009d32:	e024      	b.n	8009d7e <USB_EPStartXfer+0x86a>
 8009d34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d11c      	bne.n	8009d7e <USB_EPStartXfer+0x86a>
 8009d44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	461a      	mov	r2, r3
 8009d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d58:	4413      	add	r3, r2
 8009d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	011a      	lsls	r2, r3, #4
 8009d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	895b      	ldrh	r3, [r3, #10]
 8009d8a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6959      	ldr	r1, [r3, #20]
 8009d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009da4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009da8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009dac:	6800      	ldr	r0, [r0, #0]
 8009dae:	f001 f896 	bl	800aede <USB_WritePMA>
 8009db2:	e263      	b.n	800a27c <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009db4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009db8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	441a      	add	r2, r3
 8009e08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e40:	4413      	add	r3, r2
 8009e42:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	011a      	lsls	r2, r3, #4
 8009e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e54:	4413      	add	r3, r2
 8009e56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	891b      	ldrh	r3, [r3, #8]
 8009e72:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6959      	ldr	r1, [r3, #20]
 8009e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009e8c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009e90:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009e94:	6800      	ldr	r0, [r0, #0]
 8009e96:	f001 f822 	bl	800aede <USB_WritePMA>
 8009e9a:	e1ef      	b.n	800a27c <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80aa 	beq.w	800a018 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ec4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ed0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d16d      	bne.n	8009fbc <USB_EPStartXfer+0xaa8>
 8009ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f00:	4413      	add	r3, r2
 8009f02:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	011a      	lsls	r2, r3, #4
 8009f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f14:	4413      	add	r3, r2
 8009f16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d112      	bne.n	8009f4a <USB_EPStartXfer+0xa36>
 8009f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f46:	801a      	strh	r2, [r3, #0]
 8009f48:	e05d      	b.n	800a006 <USB_EPStartXfer+0xaf2>
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f50:	d817      	bhi.n	8009f82 <USB_EPStartXfer+0xa6e>
 8009f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f56:	085b      	lsrs	r3, r3, #1
 8009f58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d004      	beq.n	8009f72 <USB_EPStartXfer+0xa5e>
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	029b      	lsls	r3, r3, #10
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	e041      	b.n	800a006 <USB_EPStartXfer+0xaf2>
 8009f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d104      	bne.n	8009fa2 <USB_EPStartXfer+0xa8e>
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	029b      	lsls	r3, r3, #10
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fb8:	801a      	strh	r2, [r3, #0]
 8009fba:	e024      	b.n	800a006 <USB_EPStartXfer+0xaf2>
 8009fbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d11c      	bne.n	800a006 <USB_EPStartXfer+0xaf2>
 8009fcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fe0:	4413      	add	r3, r2
 8009fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fe8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	011a      	lsls	r2, r3, #4
 8009ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ffa:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a000:	b29a      	uxth	r2, r3
 800a002:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a004:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a006:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a00a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	895b      	ldrh	r3, [r3, #10]
 800a012:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800a016:	e0b2      	b.n	800a17e <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a018:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a01c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d171      	bne.n	800a10c <USB_EPStartXfer+0xbf8>
 800a028:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a02c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a03a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a04c:	4413      	add	r3, r2
 800a04e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a056:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	011a      	lsls	r2, r3, #4
 800a060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a064:	4413      	add	r3, r2
 800a066:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a06a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a06c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d112      	bne.n	800a09a <USB_EPStartXfer+0xb86>
 800a074:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a092:	b29a      	uxth	r2, r3
 800a094:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a096:	801a      	strh	r2, [r3, #0]
 800a098:	e069      	b.n	800a16e <USB_EPStartXfer+0xc5a>
 800a09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0a0:	d817      	bhi.n	800a0d2 <USB_EPStartXfer+0xbbe>
 800a0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0a6:	085b      	lsrs	r3, r3, #1
 800a0a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d004      	beq.n	800a0c2 <USB_EPStartXfer+0xbae>
 800a0b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0bc:	3301      	adds	r3, #1
 800a0be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e04d      	b.n	800a16e <USB_EPStartXfer+0xc5a>
 800a0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <USB_EPStartXfer+0xbde>
 800a0e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	029b      	lsls	r3, r3, #10
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a104:	b29a      	uxth	r2, r3
 800a106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a108:	801a      	strh	r2, [r3, #0]
 800a10a:	e030      	b.n	800a16e <USB_EPStartXfer+0xc5a>
 800a10c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a110:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d128      	bne.n	800a16e <USB_EPStartXfer+0xc5a>
 800a11c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a120:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a12e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a140:	4413      	add	r3, r2
 800a142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a14a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	011a      	lsls	r2, r3, #4
 800a154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a15e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a166:	b29a      	uxth	r2, r3
 800a168:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a16c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a16e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a172:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	891b      	ldrh	r3, [r3, #8]
 800a17a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a17e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a182:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6959      	ldr	r1, [r3, #20]
 800a18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a18e:	b29b      	uxth	r3, r3
 800a190:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a194:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a198:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f000 fe9e 	bl	800aede <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a1a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	785b      	ldrb	r3, [r3, #1]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d12e      	bne.n	800a210 <USB_EPStartXfer+0xcfc>
 800a1b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a1dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	441a      	add	r2, r3
 800a1f6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a1fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a206:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	8013      	strh	r3, [r2, #0]
 800a20e:	e035      	b.n	800a27c <USB_EPStartXfer+0xd68>
 800a210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a214:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d12d      	bne.n	800a27c <USB_EPStartXfer+0xd68>
 800a220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a224:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a22e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a246:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a24a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a24e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a258:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	441a      	add	r2, r3
 800a264:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a27c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a280:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a28a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a29e:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a2a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2aa:	8013      	strh	r3, [r2, #0]
 800a2ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2b0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a2b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a2b8:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a2bc:	8812      	ldrh	r2, [r2, #0]
 800a2be:	f082 0210 	eor.w	r2, r2, #16
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2c8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a2cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a2d0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a2d4:	8812      	ldrh	r2, [r2, #0]
 800a2d6:	f082 0220 	eor.w	r2, r2, #32
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	441a      	add	r2, r3
 800a2f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2fa:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a30c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a310:	b29b      	uxth	r3, r3
 800a312:	8013      	strh	r3, [r2, #0]
 800a314:	f000 bc9f 	b.w	800ac56 <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a318:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a31c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	7b1b      	ldrb	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 80ae 	bne.w	800a486 <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a32a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a32e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	699a      	ldr	r2, [r3, #24]
 800a336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a33a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	429a      	cmp	r2, r3
 800a344:	d917      	bls.n	800a376 <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a346:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a34a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a35a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a36c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	619a      	str	r2, [r3, #24]
 800a374:	e00e      	b.n	800a394 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a37a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a38a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2200      	movs	r2, #0
 800a392:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a398:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	011a      	lsls	r2, r3, #4
 800a3cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a3d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d116      	bne.n	800a410 <USB_EPStartXfer+0xefc>
 800a3e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a406:	b29a      	uxth	r2, r3
 800a408:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a40c:	801a      	strh	r2, [r3, #0]
 800a40e:	e3e8      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
 800a410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a414:	2b3e      	cmp	r3, #62	@ 0x3e
 800a416:	d818      	bhi.n	800a44a <USB_EPStartXfer+0xf36>
 800a418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a41c:	085b      	lsrs	r3, r3, #1
 800a41e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <USB_EPStartXfer+0xf24>
 800a42e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a432:	3301      	adds	r3, #1
 800a434:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	e3cb      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
 800a44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a458:	f003 031f 	and.w	r3, r3, #31
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d104      	bne.n	800a46a <USB_EPStartXfer+0xf56>
 800a460:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a464:	3b01      	subs	r3, #1
 800a466:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a46a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a46e:	b29b      	uxth	r3, r3
 800a470:	029b      	lsls	r3, r3, #10
 800a472:	b29b      	uxth	r3, r3
 800a474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	e3ad      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a48a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	78db      	ldrb	r3, [r3, #3]
 800a492:	2b02      	cmp	r3, #2
 800a494:	f040 8200 	bne.w	800a898 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 8091 	bne.w	800a5cc <USB_EPStartXfer+0x10b8>
 800a4aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	011a      	lsls	r2, r3, #4
 800a4e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d116      	bne.n	800a52e <USB_EPStartXfer+0x101a>
 800a500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a512:	801a      	strh	r2, [r3, #0]
 800a514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a524:	b29a      	uxth	r2, r3
 800a526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a52a:	801a      	strh	r2, [r3, #0]
 800a52c:	e083      	b.n	800a636 <USB_EPStartXfer+0x1122>
 800a52e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a532:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a53c:	d820      	bhi.n	800a580 <USB_EPStartXfer+0x106c>
 800a53e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a542:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a550:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a554:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <USB_EPStartXfer+0x105a>
 800a564:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a568:	3301      	adds	r3, #1
 800a56a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a56e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a572:	b29b      	uxth	r3, r3
 800a574:	029b      	lsls	r3, r3, #10
 800a576:	b29a      	uxth	r2, r3
 800a578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e05a      	b.n	800a636 <USB_EPStartXfer+0x1122>
 800a580:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a584:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a596:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f003 031f 	and.w	r3, r3, #31
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <USB_EPStartXfer+0x109c>
 800a5a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	029b      	lsls	r3, r3, #10
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	e034      	b.n	800a636 <USB_EPStartXfer+0x1122>
 800a5cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d12c      	bne.n	800a636 <USB_EPStartXfer+0x1122>
 800a5dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a600:	4413      	add	r3, r2
 800a602:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a60a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	011a      	lsls	r2, r3, #4
 800a614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a618:	4413      	add	r3, r2
 800a61a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a61e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a622:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a626:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	b29a      	uxth	r2, r3
 800a630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a634:	801a      	strh	r2, [r3, #0]
 800a636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a63a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a648:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f040 8091 	bne.w	800a778 <USB_EPStartXfer+0x1264>
 800a656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a65a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a668:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a672:	b29b      	uxth	r3, r3
 800a674:	461a      	mov	r2, r3
 800a676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a67a:	4413      	add	r3, r2
 800a67c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a684:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	011a      	lsls	r2, r3, #4
 800a68e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a692:	4413      	add	r3, r2
 800a694:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a69c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d116      	bne.n	800a6da <USB_EPStartXfer+0x11c6>
 800a6ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6be:	801a      	strh	r2, [r3, #0]
 800a6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6d6:	801a      	strh	r2, [r3, #0]
 800a6d8:	e07c      	b.n	800a7d4 <USB_EPStartXfer+0x12c0>
 800a6da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6e8:	d820      	bhi.n	800a72c <USB_EPStartXfer+0x1218>
 800a6ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	085b      	lsrs	r3, r3, #1
 800a6f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a700:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <USB_EPStartXfer+0x1206>
 800a710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a714:	3301      	adds	r3, #1
 800a716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a71e:	b29b      	uxth	r3, r3
 800a720:	029b      	lsls	r3, r3, #10
 800a722:	b29a      	uxth	r2, r3
 800a724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	e053      	b.n	800a7d4 <USB_EPStartXfer+0x12c0>
 800a72c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a730:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a73e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a742:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f003 031f 	and.w	r3, r3, #31
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <USB_EPStartXfer+0x1248>
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a756:	3b01      	subs	r3, #1
 800a758:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a760:	b29b      	uxth	r3, r3
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76e:	b29a      	uxth	r2, r3
 800a770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a774:	801a      	strh	r2, [r3, #0]
 800a776:	e02d      	b.n	800a7d4 <USB_EPStartXfer+0x12c0>
 800a778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a77c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d125      	bne.n	800a7d4 <USB_EPStartXfer+0x12c0>
 800a788:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a78c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a796:	b29b      	uxth	r3, r3
 800a798:	461a      	mov	r2, r3
 800a79a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a79e:	4413      	add	r3, r2
 800a7a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	011a      	lsls	r2, r3, #4
 800a7b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a7c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a7d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 81fe 	beq.w	800abe2 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a806:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a80a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <USB_EPStartXfer+0x130a>
 800a812:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10d      	bne.n	800a83a <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a81e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 81db 	bne.w	800abe2 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a82c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	f040 81d4 	bne.w	800abe2 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a83a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a848:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a860:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a872:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	441a      	add	r2, r3
 800a87e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a88a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a88e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a892:	b29b      	uxth	r3, r3
 800a894:	8013      	strh	r3, [r2, #0]
 800a896:	e1a4      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a89c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	f040 819a 	bne.w	800abde <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a8aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d917      	bls.n	800a8f6 <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a8c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a8d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	619a      	str	r2, [r3, #24]
 800a8f4:	e00e      	b.n	800a914 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a8f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a90a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2200      	movs	r2, #0
 800a912:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a918:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d178      	bne.n	800aa16 <USB_EPStartXfer+0x1502>
 800a924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a932:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a936:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a940:	b29b      	uxth	r3, r3
 800a942:	461a      	mov	r2, r3
 800a944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a948:	4413      	add	r3, r2
 800a94a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a94e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a952:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	011a      	lsls	r2, r3, #4
 800a95c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a960:	4413      	add	r3, r2
 800a962:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a966:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d116      	bne.n	800a9a0 <USB_EPStartXfer+0x148c>
 800a972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a97e:	b29a      	uxth	r2, r3
 800a980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a996:	b29a      	uxth	r2, r3
 800a998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a99c:	801a      	strh	r2, [r3, #0]
 800a99e:	e06b      	b.n	800aa78 <USB_EPStartXfer+0x1564>
 800a9a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9a6:	d818      	bhi.n	800a9da <USB_EPStartXfer+0x14c6>
 800a9a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <USB_EPStartXfer+0x14b4>
 800a9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	029b      	lsls	r3, r3, #10
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	e04e      	b.n	800aa78 <USB_EPStartXfer+0x1564>
 800a9da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9de:	095b      	lsrs	r3, r3, #5
 800a9e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9e8:	f003 031f 	and.w	r3, r3, #31
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <USB_EPStartXfer+0x14e6>
 800a9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	029b      	lsls	r3, r3, #10
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e030      	b.n	800aa78 <USB_EPStartXfer+0x1564>
 800aa16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d128      	bne.n	800aa78 <USB_EPStartXfer+0x1564>
 800aa26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	011a      	lsls	r2, r3, #4
 800aa5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa62:	4413      	add	r3, r2
 800aa64:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	785b      	ldrb	r3, [r3, #1]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d178      	bne.n	800ab88 <USB_EPStartXfer+0x1674>
 800aa96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aaba:	4413      	add	r3, r2
 800aabc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aac0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aac4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	011a      	lsls	r2, r3, #4
 800aace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aad2:	4413      	add	r3, r2
 800aad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aad8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d116      	bne.n	800ab12 <USB_EPStartXfer+0x15fe>
 800aae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aaf6:	801a      	strh	r2, [r3, #0]
 800aaf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ab0e:	801a      	strh	r2, [r3, #0]
 800ab10:	e067      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
 800ab12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab16:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab18:	d818      	bhi.n	800ab4c <USB_EPStartXfer+0x1638>
 800ab1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <USB_EPStartXfer+0x1626>
 800ab30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab34:	3301      	adds	r3, #1
 800ab36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	029b      	lsls	r3, r3, #10
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	e04a      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
 800ab4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <USB_EPStartXfer+0x1658>
 800ab62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab66:	3b01      	subs	r3, #1
 800ab68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	029b      	lsls	r3, r3, #10
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ab84:	801a      	strh	r2, [r3, #0]
 800ab86:	e02c      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
 800ab88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d124      	bne.n	800abe2 <USB_EPStartXfer+0x16ce>
 800ab98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abae:	4413      	add	r3, r2
 800abb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	011a      	lsls	r2, r3, #4
 800abc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abc6:	4413      	add	r3, r2
 800abc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800abcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abda:	801a      	strh	r2, [r3, #0]
 800abdc:	e001      	b.n	800abe2 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e03a      	b.n	800ac58 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac08:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ac0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ac10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac14:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ac18:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ac1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ac24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	441a      	add	r2, r3
 800ac3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ac42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d020      	beq.n	800acb6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8a:	81bb      	strh	r3, [r7, #12]
 800ac8c:	89bb      	ldrh	r3, [r7, #12]
 800ac8e:	f083 0310 	eor.w	r3, r3, #16
 800ac92:	81bb      	strh	r3, [r7, #12]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	441a      	add	r2, r3
 800ac9e:	89bb      	ldrh	r3, [r7, #12]
 800aca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	8013      	strh	r3, [r2, #0]
 800acb4:	e01f      	b.n	800acf6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800accc:	81fb      	strh	r3, [r7, #14]
 800acce:	89fb      	ldrh	r3, [r7, #14]
 800acd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acd4:	81fb      	strh	r3, [r7, #14]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	441a      	add	r2, r3
 800ace0:	89fb      	ldrh	r3, [r7, #14]
 800ace2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ace6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bc80      	pop	{r7}
 800ad00:	4770      	bx	lr

0800ad02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b087      	sub	sp, #28
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	7b1b      	ldrb	r3, [r3, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f040 809d 	bne.w	800ae50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d04c      	beq.n	800adb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	823b      	strh	r3, [r7, #16]
 800ad2c:	8a3b      	ldrh	r3, [r7, #16]
 800ad2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d01b      	beq.n	800ad6e <USB_EPClearStall+0x6c>
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4c:	81fb      	strh	r3, [r7, #14]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	441a      	add	r2, r3
 800ad58:	89fb      	ldrh	r3, [r7, #14]
 800ad5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	78db      	ldrb	r3, [r3, #3]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d06c      	beq.n	800ae50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad8c:	81bb      	strh	r3, [r7, #12]
 800ad8e:	89bb      	ldrh	r3, [r7, #12]
 800ad90:	f083 0320 	eor.w	r3, r3, #32
 800ad94:	81bb      	strh	r3, [r7, #12]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	441a      	add	r2, r3
 800ada0:	89bb      	ldrh	r3, [r7, #12]
 800ada2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ada6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	8013      	strh	r3, [r2, #0]
 800adb6:	e04b      	b.n	800ae50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	82fb      	strh	r3, [r7, #22]
 800adc6:	8afb      	ldrh	r3, [r7, #22]
 800adc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01b      	beq.n	800ae08 <USB_EPClearStall+0x106>
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
 800adde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ade2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade6:	82bb      	strh	r3, [r7, #20]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	441a      	add	r2, r3
 800adf2:	8abb      	ldrh	r3, [r7, #20]
 800adf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae1e:	827b      	strh	r3, [r7, #18]
 800ae20:	8a7b      	ldrh	r3, [r7, #18]
 800ae22:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae26:	827b      	strh	r3, [r7, #18]
 800ae28:	8a7b      	ldrh	r3, [r7, #18]
 800ae2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae2e:	827b      	strh	r3, [r7, #18]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	441a      	add	r2, r3
 800ae3a:	8a7b      	ldrh	r3, [r7, #18]
 800ae3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ae68:	78fb      	ldrb	r3, [r7, #3]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d103      	bne.n	800ae76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2280      	movs	r2, #128	@ 0x80
 800ae72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr

0800ae82 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bc80      	pop	{r7}
 800ae94:	4770      	bx	lr

0800ae96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bc80      	pop	{r7}
 800aea8:	4770      	bx	lr

0800aeaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b085      	sub	sp, #20
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aebc:	68fb      	ldr	r3, [r7, #12]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bc80      	pop	{r7}
 800aec6:	4770      	bx	lr

0800aec8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bc80      	pop	{r7}
 800aedc:	4770      	bx	lr

0800aede <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aede:	b480      	push	{r7}
 800aee0:	b08d      	sub	sp, #52	@ 0x34
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	4611      	mov	r1, r2
 800aeea:	461a      	mov	r2, r3
 800aeec:	460b      	mov	r3, r1
 800aeee:	80fb      	strh	r3, [r7, #6]
 800aef0:	4613      	mov	r3, r2
 800aef2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aef4:	88bb      	ldrh	r3, [r7, #4]
 800aef6:	3301      	adds	r3, #1
 800aef8:	085b      	lsrs	r3, r3, #1
 800aefa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af04:	88fb      	ldrh	r3, [r7, #6]
 800af06:	005a      	lsls	r2, r3, #1
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af10:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af16:	e01d      	b.n	800af54 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	3301      	adds	r3, #1
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	461a      	mov	r2, r3
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	4313      	orrs	r3, r2
 800af32:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	b29a      	uxth	r2, r3
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	3302      	adds	r3, #2
 800af40:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af44:	3302      	adds	r3, #2
 800af46:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	3301      	adds	r3, #1
 800af4c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800af4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af50:	3b01      	subs	r3, #1
 800af52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1de      	bne.n	800af18 <USB_WritePMA+0x3a>
  }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3734      	adds	r7, #52	@ 0x34
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af66:	b480      	push	{r7}
 800af68:	b08b      	sub	sp, #44	@ 0x2c
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	4611      	mov	r1, r2
 800af72:	461a      	mov	r2, r3
 800af74:	460b      	mov	r3, r1
 800af76:	80fb      	strh	r3, [r7, #6]
 800af78:	4613      	mov	r3, r2
 800af7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800af7c:	88bb      	ldrh	r3, [r7, #4]
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	b29b      	uxth	r3, r3
 800af82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	005a      	lsls	r2, r3, #1
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af98:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af9e:	e01b      	b.n	800afd8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	3302      	adds	r3, #2
 800afac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	3301      	adds	r3, #1
 800afba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	0a1b      	lsrs	r3, r3, #8
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	3301      	adds	r3, #1
 800afca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	3302      	adds	r3, #2
 800afd0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	3b01      	subs	r3, #1
 800afd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e0      	bne.n	800afa0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800afde:	88bb      	ldrh	r3, [r7, #4]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	701a      	strb	r2, [r3, #0]
  }
}
 800affa:	bf00      	nop
 800affc:	372c      	adds	r7, #44	@ 0x2c
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	4770      	bx	lr

0800b004 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7c1b      	ldrb	r3, [r3, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d115      	bne.n	800b048 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b01c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b020:	2202      	movs	r2, #2
 800b022:	2181      	movs	r1, #129	@ 0x81
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f001 fe90 	bl	800cd4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b034:	2202      	movs	r2, #2
 800b036:	2101      	movs	r1, #1
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 fe86 	bl	800cd4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b046:	e012      	b.n	800b06e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b048:	2340      	movs	r3, #64	@ 0x40
 800b04a:	2202      	movs	r2, #2
 800b04c:	2181      	movs	r1, #129	@ 0x81
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 fe7b 	bl	800cd4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b05a:	2340      	movs	r3, #64	@ 0x40
 800b05c:	2202      	movs	r2, #2
 800b05e:	2101      	movs	r1, #1
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 fe72 	bl	800cd4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b06e:	2308      	movs	r3, #8
 800b070:	2203      	movs	r2, #3
 800b072:	2182      	movs	r1, #130	@ 0x82
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fe68 	bl	800cd4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b080:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b084:	f001 ff88 	bl	800cf98 <USBD_static_malloc>
 800b088:	4602      	mov	r2, r0
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b09a:	2301      	movs	r3, #1
 800b09c:	73fb      	strb	r3, [r7, #15]
 800b09e:	e026      	b.n	800b0ee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7c1b      	ldrb	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 ff28 	bl	800cf2c <USBD_LL_PrepareReceive>
 800b0dc:	e007      	b.n	800b0ee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0e4:	2340      	movs	r3, #64	@ 0x40
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 ff1f 	bl	800cf2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b108:	2181      	movs	r1, #129	@ 0x81
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 fe43 	bl	800cd96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b116:	2101      	movs	r1, #1
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 fe3c 	bl	800cd96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b126:	2182      	movs	r1, #130	@ 0x82
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f001 fe34 	bl	800cd96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00e      	beq.n	800b15c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 ff2e 	bl	800cfb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b176:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d039      	beq.n	800b204 <USBD_CDC_Setup+0x9e>
 800b190:	2b20      	cmp	r3, #32
 800b192:	d17f      	bne.n	800b294 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	88db      	ldrh	r3, [r3, #6]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d029      	beq.n	800b1f0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b25b      	sxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	da11      	bge.n	800b1ca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b1b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	88d2      	ldrh	r2, [r2, #6]
 800b1b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1ba:	6939      	ldr	r1, [r7, #16]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	88db      	ldrh	r3, [r3, #6]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 fa06 	bl	800c5d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b1c8:	e06b      	b.n	800b2a2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	785a      	ldrb	r2, [r3, #1]
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	88db      	ldrh	r3, [r3, #6]
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1e0:	6939      	ldr	r1, [r7, #16]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	88db      	ldrh	r3, [r3, #6]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f001 fa21 	bl	800c630 <USBD_CtlPrepareRx>
      break;
 800b1ee:	e058      	b.n	800b2a2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	7850      	ldrb	r0, [r2, #1]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	4798      	blx	r3
      break;
 800b202:	e04e      	b.n	800b2a2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	785b      	ldrb	r3, [r3, #1]
 800b208:	2b0b      	cmp	r3, #11
 800b20a:	d02e      	beq.n	800b26a <USBD_CDC_Setup+0x104>
 800b20c:	2b0b      	cmp	r3, #11
 800b20e:	dc38      	bgt.n	800b282 <USBD_CDC_Setup+0x11c>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <USBD_CDC_Setup+0xb4>
 800b214:	2b0a      	cmp	r3, #10
 800b216:	d014      	beq.n	800b242 <USBD_CDC_Setup+0xdc>
 800b218:	e033      	b.n	800b282 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b220:	2b03      	cmp	r3, #3
 800b222:	d107      	bne.n	800b234 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b224:	f107 030c 	add.w	r3, r7, #12
 800b228:	2202      	movs	r2, #2
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 f9d1 	bl	800c5d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b232:	e02e      	b.n	800b292 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f962 	bl	800c500 <USBD_CtlError>
            ret = USBD_FAIL;
 800b23c:	2302      	movs	r3, #2
 800b23e:	75fb      	strb	r3, [r7, #23]
          break;
 800b240:	e027      	b.n	800b292 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d107      	bne.n	800b25c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b24c:	f107 030f 	add.w	r3, r7, #15
 800b250:	2201      	movs	r2, #1
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 f9bd 	bl	800c5d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b25a:	e01a      	b.n	800b292 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f94e 	bl	800c500 <USBD_CtlError>
            ret = USBD_FAIL;
 800b264:	2302      	movs	r3, #2
 800b266:	75fb      	strb	r3, [r7, #23]
          break;
 800b268:	e013      	b.n	800b292 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b270:	2b03      	cmp	r3, #3
 800b272:	d00d      	beq.n	800b290 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f001 f942 	bl	800c500 <USBD_CtlError>
            ret = USBD_FAIL;
 800b27c:	2302      	movs	r3, #2
 800b27e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b280:	e006      	b.n	800b290 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 f93b 	bl	800c500 <USBD_CtlError>
          ret = USBD_FAIL;
 800b28a:	2302      	movs	r3, #2
 800b28c:	75fb      	strb	r3, [r7, #23]
          break;
 800b28e:	e000      	b.n	800b292 <USBD_CDC_Setup+0x12c>
          break;
 800b290:	bf00      	nop
      }
      break;
 800b292:	e006      	b.n	800b2a2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 f932 	bl	800c500 <USBD_CtlError>
      ret = USBD_FAIL;
 800b29c:	2302      	movs	r3, #2
 800b29e:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a0:	bf00      	nop
  }

  return ret;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2c6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d03a      	beq.n	800b348 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b2d2:	78fa      	ldrb	r2, [r7, #3]
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	331c      	adds	r3, #28
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d029      	beq.n	800b33c <USBD_CDC_DataIn+0x90>
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	6879      	ldr	r1, [r7, #4]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	331c      	adds	r3, #28
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	78f9      	ldrb	r1, [r7, #3]
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	460b      	mov	r3, r1
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	440b      	add	r3, r1
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	4403      	add	r3, r0
 800b308:	3338      	adds	r3, #56	@ 0x38
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d110      	bne.n	800b33c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b31a:	78fa      	ldrb	r2, [r7, #3]
 800b31c:	6879      	ldr	r1, [r7, #4]
 800b31e:	4613      	mov	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	440b      	add	r3, r1
 800b328:	331c      	adds	r3, #28
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b32e:	78f9      	ldrb	r1, [r7, #3]
 800b330:	2300      	movs	r3, #0
 800b332:	2200      	movs	r2, #0
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fdd6 	bl	800cee6 <USBD_LL_Transmit>
 800b33a:	e003      	b.n	800b344 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	e000      	b.n	800b34a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b348:	2302      	movs	r3, #2
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b084      	sub	sp, #16
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b364:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fe01 	bl	800cf72 <USBD_LL_GetRxDataSize>
 800b370:	4602      	mov	r2, r0
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00d      	beq.n	800b39e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b396:	4611      	mov	r1, r2
 800b398:	4798      	blx	r3

    return USBD_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	e000      	b.n	800b3a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b39e:	2302      	movs	r3, #2
  }
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d014      	beq.n	800b3ec <USBD_CDC_EP0_RxReady+0x44>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b3c8:	2bff      	cmp	r3, #255	@ 0xff
 800b3ca:	d00f      	beq.n	800b3ec <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b3da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	22ff      	movs	r2, #255	@ 0xff
 800b3e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2243      	movs	r2, #67	@ 0x43
 800b404:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b406:	4b03      	ldr	r3, [pc, #12]	@ (800b414 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	200000bc 	.word	0x200000bc

0800b418 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2243      	movs	r2, #67	@ 0x43
 800b424:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b426:	4b03      	ldr	r3, [pc, #12]	@ (800b434 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b428:	4618      	mov	r0, r3
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bc80      	pop	{r7}
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20000078 	.word	0x20000078

0800b438 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2243      	movs	r2, #67	@ 0x43
 800b444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b446:	4b03      	ldr	r3, [pc, #12]	@ (800b454 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bc80      	pop	{r7}
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20000100 	.word	0x20000100

0800b458 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	220a      	movs	r2, #10
 800b464:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b466:	4b03      	ldr	r3, [pc, #12]	@ (800b474 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000034 	.word	0x20000034

0800b478 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b482:	2302      	movs	r3, #2
 800b484:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b498:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b4c2:	88fa      	ldrh	r2, [r7, #6]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b085      	sub	sp, #20
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc80      	pop	{r7}
 800b4fa:	4770      	bx	lr

0800b4fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b50a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b512:	2b00      	cmp	r3, #0
 800b514:	d01c      	beq.n	800b550 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d115      	bne.n	800b54c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b53e:	b29b      	uxth	r3, r3
 800b540:	2181      	movs	r1, #129	@ 0x81
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 fccf 	bl	800cee6 <USBD_LL_Transmit>

      return USBD_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	e002      	b.n	800b552 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e000      	b.n	800b552 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b550:	2302      	movs	r3, #2
  }
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b568:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	2b00      	cmp	r3, #0
 800b572:	d017      	beq.n	800b5a4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7c1b      	ldrb	r3, [r3, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b586:	2101      	movs	r1, #1
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 fccf 	bl	800cf2c <USBD_LL_PrepareReceive>
 800b58e:	e007      	b.n	800b5a0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b596:	2340      	movs	r3, #64	@ 0x40
 800b598:	2101      	movs	r1, #1
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 fcc6 	bl	800cf2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e000      	b.n	800b5a6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b5a4:	2302      	movs	r3, #2
  }
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	e01a      	b.n	800b5fc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	79fa      	ldrb	r2, [r7, #7]
 800b5f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f001 fb33 	bl	800cc60 <USBD_LL_Init>

  return USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d006      	beq.n	800b626 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	e001      	b.n	800b62a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b626:	2302      	movs	r3, #2
 800b628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	bc80      	pop	{r7}
 800b634:	4770      	bx	lr

0800b636 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 fb68 	bl	800cd14 <USBD_LL_Start>

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bc80      	pop	{r7}
 800b660:	4770      	bx	lr

0800b662 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b66e:	2302      	movs	r3, #2
 800b670:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00c      	beq.n	800b696 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	78fa      	ldrb	r2, [r7, #3]
 800b686:	4611      	mov	r1, r2
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	4798      	blx	r3
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b696:	7bfb      	ldrb	r3, [r7, #15]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	78fa      	ldrb	r2, [r7, #3]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fed8 	bl	800c48e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d016      	beq.n	800b730 <USBD_LL_SetupStage+0x6a>
 800b702:	2b02      	cmp	r3, #2
 800b704:	d81c      	bhi.n	800b740 <USBD_LL_SetupStage+0x7a>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <USBD_LL_SetupStage+0x4a>
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d008      	beq.n	800b720 <USBD_LL_SetupStage+0x5a>
 800b70e:	e017      	b.n	800b740 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f9cb 	bl	800bab4 <USBD_StdDevReq>
      break;
 800b71e:	e01a      	b.n	800b756 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fa2d 	bl	800bb88 <USBD_StdItfReq>
      break;
 800b72e:	e012      	b.n	800b756 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa6d 	bl	800bc18 <USBD_StdEPReq>
      break;
 800b73e:	e00a      	b.n	800b756 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b746:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 fb40 	bl	800cdd4 <USBD_LL_StallEP>
      break;
 800b754:	bf00      	nop
  }

  return USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	460b      	mov	r3, r1
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d14b      	bne.n	800b80c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b77a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b782:	2b03      	cmp	r3, #3
 800b784:	d134      	bne.n	800b7f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	68da      	ldr	r2, [r3, #12]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d919      	bls.n	800b7c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	1ad2      	subs	r2, r2, r3
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d203      	bcs.n	800b7b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	e002      	b.n	800b7ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 ff54 	bl	800c66c <USBD_CtlContinueRx>
 800b7c4:	e038      	b.n	800b838 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d105      	bne.n	800b7e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 ff51 	bl	800c690 <USBD_CtlSendStatus>
 800b7ee:	e023      	b.n	800b838 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7f6:	2b05      	cmp	r3, #5
 800b7f8:	d11e      	bne.n	800b838 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f001 fae5 	bl	800cdd4 <USBD_LL_StallEP>
 800b80a:	e015      	b.n	800b838 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00d      	beq.n	800b834 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d108      	bne.n	800b834 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	7afa      	ldrb	r2, [r7, #11]
 800b82c:	4611      	mov	r1, r2
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	4798      	blx	r3
 800b832:	e001      	b.n	800b838 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b834:	2302      	movs	r3, #2
 800b836:	e000      	b.n	800b83a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	460b      	mov	r3, r1
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b850:	7afb      	ldrb	r3, [r7, #11]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d17f      	bne.n	800b956 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3314      	adds	r3, #20
 800b85a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b862:	2b02      	cmp	r3, #2
 800b864:	d15c      	bne.n	800b920 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d915      	bls.n	800b89e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	b29b      	uxth	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 febe 	bl	800c60c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b890:	2300      	movs	r3, #0
 800b892:	2200      	movs	r2, #0
 800b894:	2100      	movs	r1, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f001 fb48 	bl	800cf2c <USBD_LL_PrepareReceive>
 800b89c:	e04e      	b.n	800b93c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	6912      	ldr	r2, [r2, #16]
 800b8a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8aa:	fb01 f202 	mul.w	r2, r1, r2
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11c      	bne.n	800b8ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d316      	bcc.n	800b8ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20f      	bcs.n	800b8ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 fe9a 	bl	800c60c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f001 fb20 	bl	800cf2c <USBD_LL_PrepareReceive>
 800b8ec:	e026      	b.n	800b93c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b900:	2b03      	cmp	r3, #3
 800b902:	d105      	bne.n	800b910 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b910:	2180      	movs	r1, #128	@ 0x80
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f001 fa5e 	bl	800cdd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 fecc 	bl	800c6b6 <USBD_CtlReceiveStatus>
 800b91e:	e00d      	b.n	800b93c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b926:	2b04      	cmp	r3, #4
 800b928:	d004      	beq.n	800b934 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b934:	2180      	movs	r1, #128	@ 0x80
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f001 fa4c 	bl	800cdd4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b942:	2b01      	cmp	r3, #1
 800b944:	d11d      	bne.n	800b982 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f7ff fe81 	bl	800b64e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b954:	e015      	b.n	800b982 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d108      	bne.n	800b97e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	7afa      	ldrb	r2, [r7, #11]
 800b976:	4611      	mov	r1, r2
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	4798      	blx	r3
 800b97c:	e001      	b.n	800b982 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b97e:	2302      	movs	r3, #2
 800b980:	e000      	b.n	800b984 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b994:	2340      	movs	r3, #64	@ 0x40
 800b996:	2200      	movs	r2, #0
 800b998:	2100      	movs	r1, #0
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 f9d5 	bl	800cd4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2240      	movs	r2, #64	@ 0x40
 800b9ac:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9b0:	2340      	movs	r3, #64	@ 0x40
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2180      	movs	r1, #128	@ 0x80
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f001 f9c7 	bl	800cd4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2240      	movs	r2, #64	@ 0x40
 800b9c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d009      	beq.n	800ba04 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	6852      	ldr	r2, [r2, #4]
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	4611      	mov	r1, r2
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
  }

  return USBD_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	78fa      	ldrb	r2, [r7, #3]
 800ba1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bc80      	pop	{r7}
 800ba2a:	4770      	bx	lr

0800ba2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2204      	movs	r2, #4
 800ba44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bc80      	pop	{r7}
 800ba52:	4770      	bx	lr

0800ba54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	d105      	bne.n	800ba72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr

0800ba7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d10b      	bne.n	800baa8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baca:	2b40      	cmp	r3, #64	@ 0x40
 800bacc:	d005      	beq.n	800bada <USBD_StdDevReq+0x26>
 800bace:	2b40      	cmp	r3, #64	@ 0x40
 800bad0:	d84f      	bhi.n	800bb72 <USBD_StdDevReq+0xbe>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d009      	beq.n	800baea <USBD_StdDevReq+0x36>
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d14b      	bne.n	800bb72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	4798      	blx	r3
      break;
 800bae8:	e048      	b.n	800bb7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	2b09      	cmp	r3, #9
 800baf0:	d839      	bhi.n	800bb66 <USBD_StdDevReq+0xb2>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <USBD_StdDevReq+0x44>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb49 	.word	0x0800bb49
 800bafc:	0800bb5d 	.word	0x0800bb5d
 800bb00:	0800bb67 	.word	0x0800bb67
 800bb04:	0800bb53 	.word	0x0800bb53
 800bb08:	0800bb67 	.word	0x0800bb67
 800bb0c:	0800bb2b 	.word	0x0800bb2b
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb67 	.word	0x0800bb67
 800bb18:	0800bb3f 	.word	0x0800bb3f
 800bb1c:	0800bb35 	.word	0x0800bb35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9dc 	bl	800bee0 <USBD_GetDescriptor>
          break;
 800bb28:	e022      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fb3f 	bl	800c1b0 <USBD_SetAddress>
          break;
 800bb32:	e01d      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fb7e 	bl	800c238 <USBD_SetConfig>
          break;
 800bb3c:	e018      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fc07 	bl	800c354 <USBD_GetConfig>
          break;
 800bb46:	e013      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fc37 	bl	800c3be <USBD_GetStatus>
          break;
 800bb50:	e00e      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fc65 	bl	800c424 <USBD_SetFeature>
          break;
 800bb5a:	e009      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fc74 	bl	800c44c <USBD_ClrFeature>
          break;
 800bb64:	e004      	b.n	800bb70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fcc9 	bl	800c500 <USBD_CtlError>
          break;
 800bb6e:	bf00      	nop
      }
      break;
 800bb70:	e004      	b.n	800bb7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fcc3 	bl	800c500 <USBD_CtlError>
      break;
 800bb7a:	bf00      	nop
  }

  return ret;
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop

0800bb88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb9e:	2b40      	cmp	r3, #64	@ 0x40
 800bba0:	d005      	beq.n	800bbae <USBD_StdItfReq+0x26>
 800bba2:	2b40      	cmp	r3, #64	@ 0x40
 800bba4:	d82e      	bhi.n	800bc04 <USBD_StdItfReq+0x7c>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <USBD_StdItfReq+0x26>
 800bbaa:	2b20      	cmp	r3, #32
 800bbac:	d12a      	bne.n	800bc04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d81d      	bhi.n	800bbf6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	889b      	ldrh	r3, [r3, #4]
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d813      	bhi.n	800bbec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	6839      	ldr	r1, [r7, #0]
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	4798      	blx	r3
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d110      	bne.n	800bc00 <USBD_StdItfReq+0x78>
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fd53 	bl	800c690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbea:	e009      	b.n	800bc00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fc86 	bl	800c500 <USBD_CtlError>
          break;
 800bbf4:	e004      	b.n	800bc00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fc81 	bl	800c500 <USBD_CtlError>
          break;
 800bbfe:	e000      	b.n	800bc02 <USBD_StdItfReq+0x7a>
          break;
 800bc00:	bf00      	nop
      }
      break;
 800bc02:	e004      	b.n	800bc0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fc7a 	bl	800c500 <USBD_CtlError>
      break;
 800bc0c:	bf00      	nop
  }

  return USBD_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	889b      	ldrh	r3, [r3, #4]
 800bc2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc34:	2b40      	cmp	r3, #64	@ 0x40
 800bc36:	d007      	beq.n	800bc48 <USBD_StdEPReq+0x30>
 800bc38:	2b40      	cmp	r3, #64	@ 0x40
 800bc3a:	f200 8146 	bhi.w	800beca <USBD_StdEPReq+0x2b2>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <USBD_StdEPReq+0x40>
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	f040 8141 	bne.w	800beca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
      break;
 800bc56:	e13d      	b.n	800bed4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	d10a      	bne.n	800bc7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	e12d      	b.n	800bed6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	785b      	ldrb	r3, [r3, #1]
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d007      	beq.n	800bc92 <USBD_StdEPReq+0x7a>
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	f300 811b 	bgt.w	800bebe <USBD_StdEPReq+0x2a6>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d072      	beq.n	800bd72 <USBD_StdEPReq+0x15a>
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d03a      	beq.n	800bd06 <USBD_StdEPReq+0xee>
 800bc90:	e115      	b.n	800bebe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d002      	beq.n	800bca2 <USBD_StdEPReq+0x8a>
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d015      	beq.n	800bccc <USBD_StdEPReq+0xb4>
 800bca0:	e02b      	b.n	800bcfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00c      	beq.n	800bcc2 <USBD_StdEPReq+0xaa>
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	2b80      	cmp	r3, #128	@ 0x80
 800bcac:	d009      	beq.n	800bcc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f001 f88e 	bl	800cdd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bcb8:	2180      	movs	r1, #128	@ 0x80
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 f88a 	bl	800cdd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcc0:	e020      	b.n	800bd04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fc1b 	bl	800c500 <USBD_CtlError>
              break;
 800bcca:	e01b      	b.n	800bd04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	885b      	ldrh	r3, [r3, #2]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10e      	bne.n	800bcf2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <USBD_StdEPReq+0xda>
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	2b80      	cmp	r3, #128	@ 0x80
 800bcde:	d008      	beq.n	800bcf2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	88db      	ldrh	r3, [r3, #6]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d104      	bne.n	800bcf2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f001 f871 	bl	800cdd4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fccc 	bl	800c690 <USBD_CtlSendStatus>

              break;
 800bcf8:	e004      	b.n	800bd04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fbff 	bl	800c500 <USBD_CtlError>
              break;
 800bd02:	bf00      	nop
          }
          break;
 800bd04:	e0e0      	b.n	800bec8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d002      	beq.n	800bd16 <USBD_StdEPReq+0xfe>
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d015      	beq.n	800bd40 <USBD_StdEPReq+0x128>
 800bd14:	e026      	b.n	800bd64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00c      	beq.n	800bd36 <USBD_StdEPReq+0x11e>
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b80      	cmp	r3, #128	@ 0x80
 800bd20:	d009      	beq.n	800bd36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f001 f854 	bl	800cdd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd2c:	2180      	movs	r1, #128	@ 0x80
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 f850 	bl	800cdd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd34:	e01c      	b.n	800bd70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fbe1 	bl	800c500 <USBD_CtlError>
              break;
 800bd3e:	e017      	b.n	800bd70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d112      	bne.n	800bd6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f001 f85b 	bl	800ce12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fc97 	bl	800c690 <USBD_CtlSendStatus>
              }
              break;
 800bd62:	e004      	b.n	800bd6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fbca 	bl	800c500 <USBD_CtlError>
              break;
 800bd6c:	e000      	b.n	800bd70 <USBD_StdEPReq+0x158>
              break;
 800bd6e:	bf00      	nop
          }
          break;
 800bd70:	e0aa      	b.n	800bec8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d002      	beq.n	800bd82 <USBD_StdEPReq+0x16a>
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d032      	beq.n	800bde6 <USBD_StdEPReq+0x1ce>
 800bd80:	e097      	b.n	800beb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <USBD_StdEPReq+0x180>
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	2b80      	cmp	r3, #128	@ 0x80
 800bd8c:	d004      	beq.n	800bd98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fbb5 	bl	800c500 <USBD_CtlError>
                break;
 800bd96:	e091      	b.n	800bebc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da0b      	bge.n	800bdb8 <USBD_StdEPReq+0x1a0>
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	3310      	adds	r3, #16
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	e00b      	b.n	800bdd0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	3304      	adds	r3, #4
 800bdd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2202      	movs	r2, #2
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fbf8 	bl	800c5d4 <USBD_CtlSendData>
              break;
 800bde4:	e06a      	b.n	800bebc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bde6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	da11      	bge.n	800be12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	f003 020f 	and.w	r2, r3, #15
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	440b      	add	r3, r1
 800be00:	3318      	adds	r3, #24
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d117      	bne.n	800be38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fb78 	bl	800c500 <USBD_CtlError>
                  break;
 800be10:	e054      	b.n	800bebc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	f003 020f 	and.w	r2, r3, #15
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d104      	bne.n	800be38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fb65 	bl	800c500 <USBD_CtlError>
                  break;
 800be36:	e041      	b.n	800bebc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	da0b      	bge.n	800be58 <USBD_StdEPReq+0x240>
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	3310      	adds	r3, #16
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	4413      	add	r3, r2
 800be54:	3304      	adds	r3, #4
 800be56:	e00b      	b.n	800be70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	3304      	adds	r3, #4
 800be70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be72:	7bbb      	ldrb	r3, [r7, #14]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <USBD_StdEPReq+0x266>
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	2b80      	cmp	r3, #128	@ 0x80
 800be7c:	d103      	bne.n	800be86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	e00e      	b.n	800bea4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 ffe0 	bl	800ce50 <USBD_LL_IsStallEP>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2201      	movs	r2, #1
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	e002      	b.n	800bea4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2202      	movs	r2, #2
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fb92 	bl	800c5d4 <USBD_CtlSendData>
              break;
 800beb0:	e004      	b.n	800bebc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fb23 	bl	800c500 <USBD_CtlError>
              break;
 800beba:	bf00      	nop
          }
          break;
 800bebc:	e004      	b.n	800bec8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fb1d 	bl	800c500 <USBD_CtlError>
          break;
 800bec6:	bf00      	nop
      }
      break;
 800bec8:	e004      	b.n	800bed4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fb17 	bl	800c500 <USBD_CtlError>
      break;
 800bed2:	bf00      	nop
  }

  return ret;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
	...

0800bee0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800beea:	2300      	movs	r3, #0
 800beec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bef2:	2300      	movs	r3, #0
 800bef4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	885b      	ldrh	r3, [r3, #2]
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	b29b      	uxth	r3, r3
 800befe:	3b01      	subs	r3, #1
 800bf00:	2b06      	cmp	r3, #6
 800bf02:	f200 8128 	bhi.w	800c156 <USBD_GetDescriptor+0x276>
 800bf06:	a201      	add	r2, pc, #4	@ (adr r2, 800bf0c <USBD_GetDescriptor+0x2c>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf29 	.word	0x0800bf29
 800bf10:	0800bf41 	.word	0x0800bf41
 800bf14:	0800bf81 	.word	0x0800bf81
 800bf18:	0800c157 	.word	0x0800c157
 800bf1c:	0800c157 	.word	0x0800c157
 800bf20:	0800c0f7 	.word	0x0800c0f7
 800bf24:	0800c123 	.word	0x0800c123
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
      break;
 800bf3e:	e112      	b.n	800c166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7c1b      	ldrb	r3, [r3, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10d      	bne.n	800bf64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf50:	f107 0208 	add.w	r2, r7, #8
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
 800bf58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	2202      	movs	r2, #2
 800bf60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf62:	e100      	b.n	800c166 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6c:	f107 0208 	add.w	r2, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	701a      	strb	r2, [r3, #0]
      break;
 800bf7e:	e0f2      	b.n	800c166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	885b      	ldrh	r3, [r3, #2]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b05      	cmp	r3, #5
 800bf88:	f200 80ac 	bhi.w	800c0e4 <USBD_GetDescriptor+0x204>
 800bf8c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf94 <USBD_GetDescriptor+0xb4>)
 800bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf92:	bf00      	nop
 800bf94:	0800bfad 	.word	0x0800bfad
 800bf98:	0800bfe1 	.word	0x0800bfe1
 800bf9c:	0800c015 	.word	0x0800c015
 800bfa0:	0800c049 	.word	0x0800c049
 800bfa4:	0800c07d 	.word	0x0800c07d
 800bfa8:	0800c0b1 	.word	0x0800c0b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00b      	beq.n	800bfd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	7c12      	ldrb	r2, [r2, #16]
 800bfc4:	f107 0108 	add.w	r1, r7, #8
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4798      	blx	r3
 800bfcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfce:	e091      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa94 	bl	800c500 <USBD_CtlError>
            err++;
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bfde:	e089      	b.n	800c0f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00b      	beq.n	800c004 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	7c12      	ldrb	r2, [r2, #16]
 800bff8:	f107 0108 	add.w	r1, r7, #8
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
 800c000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c002:	e077      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa7a 	bl	800c500 <USBD_CtlError>
            err++;
 800c00c:	7afb      	ldrb	r3, [r7, #11]
 800c00e:	3301      	adds	r3, #1
 800c010:	72fb      	strb	r3, [r7, #11]
          break;
 800c012:	e06f      	b.n	800c0f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	7c12      	ldrb	r2, [r2, #16]
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
 800c034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c036:	e05d      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fa60 	bl	800c500 <USBD_CtlError>
            err++;
 800c040:	7afb      	ldrb	r3, [r7, #11]
 800c042:	3301      	adds	r3, #1
 800c044:	72fb      	strb	r3, [r7, #11]
          break;
 800c046:	e055      	b.n	800c0f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00b      	beq.n	800c06c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	7c12      	ldrb	r2, [r2, #16]
 800c060:	f107 0108 	add.w	r1, r7, #8
 800c064:	4610      	mov	r0, r2
 800c066:	4798      	blx	r3
 800c068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c06a:	e043      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fa46 	bl	800c500 <USBD_CtlError>
            err++;
 800c074:	7afb      	ldrb	r3, [r7, #11]
 800c076:	3301      	adds	r3, #1
 800c078:	72fb      	strb	r3, [r7, #11]
          break;
 800c07a:	e03b      	b.n	800c0f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00b      	beq.n	800c0a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	7c12      	ldrb	r2, [r2, #16]
 800c094:	f107 0108 	add.w	r1, r7, #8
 800c098:	4610      	mov	r0, r2
 800c09a:	4798      	blx	r3
 800c09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c09e:	e029      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fa2c 	bl	800c500 <USBD_CtlError>
            err++;
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ae:	e021      	b.n	800c0f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	7c12      	ldrb	r2, [r2, #16]
 800c0c8:	f107 0108 	add.w	r1, r7, #8
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	4798      	blx	r3
 800c0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0d2:	e00f      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa12 	bl	800c500 <USBD_CtlError>
            err++;
 800c0dc:	7afb      	ldrb	r3, [r7, #11]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0e2:	e007      	b.n	800c0f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fa0a 	bl	800c500 <USBD_CtlError>
          err++;
 800c0ec:	7afb      	ldrb	r3, [r7, #11]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c0f2:	e038      	b.n	800c166 <USBD_GetDescriptor+0x286>
 800c0f4:	e037      	b.n	800c166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	7c1b      	ldrb	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d109      	bne.n	800c112 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c106:	f107 0208 	add.w	r2, r7, #8
 800c10a:	4610      	mov	r0, r2
 800c10c:	4798      	blx	r3
 800c10e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c110:	e029      	b.n	800c166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f9f3 	bl	800c500 <USBD_CtlError>
        err++;
 800c11a:	7afb      	ldrb	r3, [r7, #11]
 800c11c:	3301      	adds	r3, #1
 800c11e:	72fb      	strb	r3, [r7, #11]
      break;
 800c120:	e021      	b.n	800c166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	7c1b      	ldrb	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10d      	bne.n	800c146 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c132:	f107 0208 	add.w	r2, r7, #8
 800c136:	4610      	mov	r0, r2
 800c138:	4798      	blx	r3
 800c13a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	3301      	adds	r3, #1
 800c140:	2207      	movs	r2, #7
 800c142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c144:	e00f      	b.n	800c166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f9d9 	bl	800c500 <USBD_CtlError>
        err++;
 800c14e:	7afb      	ldrb	r3, [r7, #11]
 800c150:	3301      	adds	r3, #1
 800c152:	72fb      	strb	r3, [r7, #11]
      break;
 800c154:	e007      	b.n	800c166 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f9d1 	bl	800c500 <USBD_CtlError>
      err++;
 800c15e:	7afb      	ldrb	r3, [r7, #11]
 800c160:	3301      	adds	r3, #1
 800c162:	72fb      	strb	r3, [r7, #11]
      break;
 800c164:	bf00      	nop
  }

  if (err != 0U)
 800c166:	7afb      	ldrb	r3, [r7, #11]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d11c      	bne.n	800c1a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c16c:	893b      	ldrh	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d011      	beq.n	800c196 <USBD_GetDescriptor+0x2b6>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	88db      	ldrh	r3, [r3, #6]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00d      	beq.n	800c196 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	88da      	ldrh	r2, [r3, #6]
 800c17e:	893b      	ldrh	r3, [r7, #8]
 800c180:	4293      	cmp	r3, r2
 800c182:	bf28      	it	cs
 800c184:	4613      	movcs	r3, r2
 800c186:	b29b      	uxth	r3, r3
 800c188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c18a:	893b      	ldrh	r3, [r7, #8]
 800c18c:	461a      	mov	r2, r3
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fa1f 	bl	800c5d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa76 	bl	800c690 <USBD_CtlSendStatus>
 800c1a4:	e000      	b.n	800c1a8 <USBD_GetDescriptor+0x2c8>
    return;
 800c1a6:	bf00      	nop
    }
  }
}
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop

0800c1b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	889b      	ldrh	r3, [r3, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d130      	bne.n	800c224 <USBD_SetAddress+0x74>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88db      	ldrh	r3, [r3, #6]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d12c      	bne.n	800c224 <USBD_SetAddress+0x74>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1d0:	d828      	bhi.n	800c224 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	885b      	ldrh	r3, [r3, #2]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e4:	2b03      	cmp	r3, #3
 800c1e6:	d104      	bne.n	800c1f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f988 	bl	800c500 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f0:	e01d      	b.n	800c22e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7bfa      	ldrb	r2, [r7, #15]
 800c1f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fe52 	bl	800cea8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fa43 	bl	800c690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d004      	beq.n	800c21a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c218:	e009      	b.n	800c22e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c222:	e004      	b.n	800c22e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f96a 	bl	800c500 <USBD_CtlError>
  }
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	885b      	ldrh	r3, [r3, #2]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	4b41      	ldr	r3, [pc, #260]	@ (800c350 <USBD_SetConfig+0x118>)
 800c24a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c24c:	4b40      	ldr	r3, [pc, #256]	@ (800c350 <USBD_SetConfig+0x118>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d904      	bls.n	800c25e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f952 	bl	800c500 <USBD_CtlError>
 800c25c:	e075      	b.n	800c34a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c264:	2b02      	cmp	r3, #2
 800c266:	d002      	beq.n	800c26e <USBD_SetConfig+0x36>
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d023      	beq.n	800c2b4 <USBD_SetConfig+0x7c>
 800c26c:	e062      	b.n	800c334 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c26e:	4b38      	ldr	r3, [pc, #224]	@ (800c350 <USBD_SetConfig+0x118>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d01a      	beq.n	800c2ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c276:	4b36      	ldr	r3, [pc, #216]	@ (800c350 <USBD_SetConfig+0x118>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2203      	movs	r2, #3
 800c284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c288:	4b31      	ldr	r3, [pc, #196]	@ (800c350 <USBD_SetConfig+0x118>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff f9e7 	bl	800b662 <USBD_SetClassConfig>
 800c294:	4603      	mov	r3, r0
 800c296:	2b02      	cmp	r3, #2
 800c298:	d104      	bne.n	800c2a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f92f 	bl	800c500 <USBD_CtlError>
            return;
 800c2a2:	e052      	b.n	800c34a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f9f3 	bl	800c690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2aa:	e04e      	b.n	800c34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f9ef 	bl	800c690 <USBD_CtlSendStatus>
        break;
 800c2b2:	e04a      	b.n	800c34a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c2b4:	4b26      	ldr	r3, [pc, #152]	@ (800c350 <USBD_SetConfig+0x118>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d112      	bne.n	800c2e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c2c4:	4b22      	ldr	r3, [pc, #136]	@ (800c350 <USBD_SetConfig+0x118>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c2ce:	4b20      	ldr	r3, [pc, #128]	@ (800c350 <USBD_SetConfig+0x118>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff f9e3 	bl	800b6a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f9d8 	bl	800c690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2e0:	e033      	b.n	800c34a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c350 <USBD_SetConfig+0x118>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d01d      	beq.n	800c32c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff f9d1 	bl	800b6a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c2fe:	4b14      	ldr	r3, [pc, #80]	@ (800c350 <USBD_SetConfig+0x118>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c308:	4b11      	ldr	r3, [pc, #68]	@ (800c350 <USBD_SetConfig+0x118>)
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f9a7 	bl	800b662 <USBD_SetClassConfig>
 800c314:	4603      	mov	r3, r0
 800c316:	2b02      	cmp	r3, #2
 800c318:	d104      	bne.n	800c324 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f8ef 	bl	800c500 <USBD_CtlError>
            return;
 800c322:	e012      	b.n	800c34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 f9b3 	bl	800c690 <USBD_CtlSendStatus>
        break;
 800c32a:	e00e      	b.n	800c34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f9af 	bl	800c690 <USBD_CtlSendStatus>
        break;
 800c332:	e00a      	b.n	800c34a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f8e2 	bl	800c500 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c33c:	4b04      	ldr	r3, [pc, #16]	@ (800c350 <USBD_SetConfig+0x118>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff f9ac 	bl	800b6a0 <USBD_ClrClassConfig>
        break;
 800c348:	bf00      	nop
    }
  }
}
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20000438 	.word	0x20000438

0800c354 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	88db      	ldrh	r3, [r3, #6]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d004      	beq.n	800c370 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f8c9 	bl	800c500 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c36e:	e022      	b.n	800c3b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c376:	2b02      	cmp	r3, #2
 800c378:	dc02      	bgt.n	800c380 <USBD_GetConfig+0x2c>
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dc03      	bgt.n	800c386 <USBD_GetConfig+0x32>
 800c37e:	e015      	b.n	800c3ac <USBD_GetConfig+0x58>
 800c380:	2b03      	cmp	r3, #3
 800c382:	d00b      	beq.n	800c39c <USBD_GetConfig+0x48>
 800c384:	e012      	b.n	800c3ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3308      	adds	r3, #8
 800c390:	2201      	movs	r2, #1
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f91d 	bl	800c5d4 <USBD_CtlSendData>
        break;
 800c39a:	e00c      	b.n	800c3b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f915 	bl	800c5d4 <USBD_CtlSendData>
        break;
 800c3aa:	e004      	b.n	800c3b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f8a6 	bl	800c500 <USBD_CtlError>
        break;
 800c3b4:	bf00      	nop
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d81e      	bhi.n	800c412 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	88db      	ldrh	r3, [r3, #6]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d004      	beq.n	800c3e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f88e 	bl	800c500 <USBD_CtlError>
        break;
 800c3e4:	e01a      	b.n	800c41c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	f043 0202 	orr.w	r2, r3, #2
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	330c      	adds	r3, #12
 800c406:	2202      	movs	r2, #2
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f8e2 	bl	800c5d4 <USBD_CtlSendData>
      break;
 800c410:	e004      	b.n	800c41c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f873 	bl	800c500 <USBD_CtlError>
      break;
 800c41a:	bf00      	nop
  }
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	885b      	ldrh	r3, [r3, #2]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d106      	bne.n	800c444 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f926 	bl	800c690 <USBD_CtlSendStatus>
  }
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45c:	3b01      	subs	r3, #1
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d80b      	bhi.n	800c47a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	885b      	ldrh	r3, [r3, #2]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d10c      	bne.n	800c484 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f90c 	bl	800c690 <USBD_CtlSendStatus>
      }
      break;
 800c478:	e004      	b.n	800c484 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f83f 	bl	800c500 <USBD_CtlError>
      break;
 800c482:	e000      	b.n	800c486 <USBD_ClrFeature+0x3a>
      break;
 800c484:	bf00      	nop
  }
}
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	785a      	ldrb	r2, [r3, #1]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	3303      	adds	r3, #3
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	4413      	add	r3, r2
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	3305      	adds	r3, #5
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	021b      	lsls	r3, r3, #8
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	4413      	add	r3, r2
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	3306      	adds	r3, #6
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3307      	adds	r3, #7
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4413      	add	r3, r2
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	80da      	strh	r2, [r3, #6]

}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bc80      	pop	{r7}
 800c4fe:	4770      	bx	lr

0800c500 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c50a:	2180      	movs	r1, #128	@ 0x80
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fc61 	bl	800cdd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c512:	2100      	movs	r1, #0
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fc5d 	bl	800cdd4 <USBD_LL_StallEP>
}
 800c51a:	bf00      	nop
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b086      	sub	sp, #24
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d032      	beq.n	800c59e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f834 	bl	800c5a6 <USBD_GetLen>
 800c53e:	4603      	mov	r3, r0
 800c540:	3301      	adds	r3, #1
 800c542:	b29b      	uxth	r3, r3
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	b29a      	uxth	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c54c:	7dfb      	ldrb	r3, [r7, #23]
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	75fa      	strb	r2, [r7, #23]
 800c552:	461a      	mov	r2, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4413      	add	r3, r2
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7812      	ldrb	r2, [r2, #0]
 800c55c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	75fa      	strb	r2, [r7, #23]
 800c564:	461a      	mov	r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	2203      	movs	r2, #3
 800c56c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c56e:	e012      	b.n	800c596 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	60fa      	str	r2, [r7, #12]
 800c576:	7dfa      	ldrb	r2, [r7, #23]
 800c578:	1c51      	adds	r1, r2, #1
 800c57a:	75f9      	strb	r1, [r7, #23]
 800c57c:	4611      	mov	r1, r2
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	440a      	add	r2, r1
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	75fa      	strb	r2, [r7, #23]
 800c58c:	461a      	mov	r2, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4413      	add	r3, r2
 800c592:	2200      	movs	r2, #0
 800c594:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e8      	bne.n	800c570 <USBD_GetString+0x4e>
    }
  }
}
 800c59e:	bf00      	nop
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b085      	sub	sp, #20
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c5b2:	e005      	b.n	800c5c0 <USBD_GetLen+0x1a>
  {
    len++;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1f5      	bne.n	800c5b4 <USBD_GetLen+0xe>
  }

  return len;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bc80      	pop	{r7}
 800c5d2:	4770      	bx	lr

0800c5d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c5ea:	88fa      	ldrh	r2, [r7, #6]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c5f0:	88fa      	ldrh	r2, [r7, #6]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5f6:	88fb      	ldrh	r3, [r7, #6]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 fc72 	bl	800cee6 <USBD_LL_Transmit>

  return USBD_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	4613      	mov	r3, r2
 800c618:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	2100      	movs	r1, #0
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fc60 	bl	800cee6 <USBD_LL_Transmit>

  return USBD_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	4613      	mov	r3, r2
 800c63c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2203      	movs	r2, #3
 800c642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c646:	88fa      	ldrh	r2, [r7, #6]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c64e:	88fa      	ldrh	r2, [r7, #6]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c656:	88fb      	ldrh	r3, [r7, #6]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	2100      	movs	r1, #0
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 fc65 	bl	800cf2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	4613      	mov	r3, r2
 800c678:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	2100      	movs	r1, #0
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fc53 	bl	800cf2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2204      	movs	r2, #4
 800c69c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fc1d 	bl	800cee6 <USBD_LL_Transmit>

  return USBD_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2205      	movs	r2, #5
 800c6c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fc2d 	bl	800cf2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4912      	ldr	r1, [pc, #72]	@ (800c72c <MX_USB_DEVICE_Init+0x50>)
 800c6e4:	4812      	ldr	r0, [pc, #72]	@ (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c6e6:	f7fe ff62 	bl	800b5ae <USBD_Init>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6f0:	f7f7 f998 	bl	8003a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6f4:	490f      	ldr	r1, [pc, #60]	@ (800c734 <MX_USB_DEVICE_Init+0x58>)
 800c6f6:	480e      	ldr	r0, [pc, #56]	@ (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c6f8:	f7fe ff84 	bl	800b604 <USBD_RegisterClass>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c702:	f7f7 f98f 	bl	8003a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c706:	490c      	ldr	r1, [pc, #48]	@ (800c738 <MX_USB_DEVICE_Init+0x5c>)
 800c708:	4809      	ldr	r0, [pc, #36]	@ (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c70a:	f7fe feb5 	bl	800b478 <USBD_CDC_RegisterInterface>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c714:	f7f7 f986 	bl	8003a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c718:	4805      	ldr	r0, [pc, #20]	@ (800c730 <MX_USB_DEVICE_Init+0x54>)
 800c71a:	f7fe ff8c 	bl	800b636 <USBD_Start>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c724:	f7f7 f97e 	bl	8003a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20000154 	.word	0x20000154
 800c730:	2000043c 	.word	0x2000043c
 800c734:	20000040 	.word	0x20000040
 800c738:	20000144 	.word	0x20000144

0800c73c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c740:	2200      	movs	r2, #0
 800c742:	4905      	ldr	r1, [pc, #20]	@ (800c758 <CDC_Init_FS+0x1c>)
 800c744:	4805      	ldr	r0, [pc, #20]	@ (800c75c <CDC_Init_FS+0x20>)
 800c746:	f7fe fead 	bl	800b4a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c74a:	4905      	ldr	r1, [pc, #20]	@ (800c760 <CDC_Init_FS+0x24>)
 800c74c:	4803      	ldr	r0, [pc, #12]	@ (800c75c <CDC_Init_FS+0x20>)
 800c74e:	f7fe fec2 	bl	800b4d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c752:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c754:	4618      	mov	r0, r3
 800c756:	bd80      	pop	{r7, pc}
 800c758:	20000ae8 	.word	0x20000ae8
 800c75c:	2000043c 	.word	0x2000043c
 800c760:	20000700 	.word	0x20000700

0800c764 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c764:	b480      	push	{r7}
 800c766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c768:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr
	...

0800c774 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
 800c780:	4613      	mov	r3, r2
 800c782:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b23      	cmp	r3, #35	@ 0x23
 800c788:	d84a      	bhi.n	800c820 <CDC_Control_FS+0xac>
 800c78a:	a201      	add	r2, pc, #4	@ (adr r2, 800c790 <CDC_Control_FS+0x1c>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c821 	.word	0x0800c821
 800c794:	0800c821 	.word	0x0800c821
 800c798:	0800c821 	.word	0x0800c821
 800c79c:	0800c821 	.word	0x0800c821
 800c7a0:	0800c821 	.word	0x0800c821
 800c7a4:	0800c821 	.word	0x0800c821
 800c7a8:	0800c821 	.word	0x0800c821
 800c7ac:	0800c821 	.word	0x0800c821
 800c7b0:	0800c821 	.word	0x0800c821
 800c7b4:	0800c821 	.word	0x0800c821
 800c7b8:	0800c821 	.word	0x0800c821
 800c7bc:	0800c821 	.word	0x0800c821
 800c7c0:	0800c821 	.word	0x0800c821
 800c7c4:	0800c821 	.word	0x0800c821
 800c7c8:	0800c821 	.word	0x0800c821
 800c7cc:	0800c821 	.word	0x0800c821
 800c7d0:	0800c821 	.word	0x0800c821
 800c7d4:	0800c821 	.word	0x0800c821
 800c7d8:	0800c821 	.word	0x0800c821
 800c7dc:	0800c821 	.word	0x0800c821
 800c7e0:	0800c821 	.word	0x0800c821
 800c7e4:	0800c821 	.word	0x0800c821
 800c7e8:	0800c821 	.word	0x0800c821
 800c7ec:	0800c821 	.word	0x0800c821
 800c7f0:	0800c821 	.word	0x0800c821
 800c7f4:	0800c821 	.word	0x0800c821
 800c7f8:	0800c821 	.word	0x0800c821
 800c7fc:	0800c821 	.word	0x0800c821
 800c800:	0800c821 	.word	0x0800c821
 800c804:	0800c821 	.word	0x0800c821
 800c808:	0800c821 	.word	0x0800c821
 800c80c:	0800c821 	.word	0x0800c821
 800c810:	0800c821 	.word	0x0800c821
 800c814:	0800c821 	.word	0x0800c821
 800c818:	0800c821 	.word	0x0800c821
 800c81c:	0800c821 	.word	0x0800c821
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c820:	bf00      	nop
  }

  return (USBD_OK);
 800c822:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	480a      	ldr	r0, [pc, #40]	@ (800c868 <CDC_Receive_FS+0x38>)
 800c83e:	f7fe fe4a 	bl	800b4d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c842:	4809      	ldr	r0, [pc, #36]	@ (800c868 <CDC_Receive_FS+0x38>)
 800c844:	f7fe fe89 	bl	800b55a <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d006      	beq.n	800c85e <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	461a      	mov	r2, r3
 800c856:	4905      	ldr	r1, [pc, #20]	@ (800c86c <CDC_Receive_FS+0x3c>)
 800c858:	4805      	ldr	r0, [pc, #20]	@ (800c870 <CDC_Receive_FS+0x40>)
 800c85a:	f000 fcf9 	bl	800d250 <memcpy>
  }
  return (USBD_OK);
 800c85e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	2000043c 	.word	0x2000043c
 800c86c:	20000700 	.word	0x20000700
 800c870:	20000350 	.word	0x20000350

0800c874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c884:	4b0d      	ldr	r3, [pc, #52]	@ (800c8bc <CDC_Transmit_FS+0x48>)
 800c886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c88a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c896:	2301      	movs	r3, #1
 800c898:	e00b      	b.n	800c8b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c89a:	887b      	ldrh	r3, [r7, #2]
 800c89c:	461a      	mov	r2, r3
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	4806      	ldr	r0, [pc, #24]	@ (800c8bc <CDC_Transmit_FS+0x48>)
 800c8a2:	f7fe fdff 	bl	800b4a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c8a6:	4805      	ldr	r0, [pc, #20]	@ (800c8bc <CDC_Transmit_FS+0x48>)
 800c8a8:	f7fe fe28 	bl	800b4fc <USBD_CDC_TransmitPacket>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	2000043c 	.word	0x2000043c

0800c8c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2212      	movs	r2, #18
 800c8d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c8d2:	4b03      	ldr	r3, [pc, #12]	@ (800c8e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bc80      	pop	{r7}
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000170 	.word	0x20000170

0800c8e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	6039      	str	r1, [r7, #0]
 800c8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2204      	movs	r2, #4
 800c8f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8f6:	4b03      	ldr	r3, [pc, #12]	@ (800c904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bc80      	pop	{r7}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20000184 	.word	0x20000184

0800c908 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	6039      	str	r1, [r7, #0]
 800c912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	4907      	ldr	r1, [pc, #28]	@ (800c93c <USBD_FS_ProductStrDescriptor+0x34>)
 800c91e:	4808      	ldr	r0, [pc, #32]	@ (800c940 <USBD_FS_ProductStrDescriptor+0x38>)
 800c920:	f7ff fdff 	bl	800c522 <USBD_GetString>
 800c924:	e004      	b.n	800c930 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	4904      	ldr	r1, [pc, #16]	@ (800c93c <USBD_FS_ProductStrDescriptor+0x34>)
 800c92a:	4805      	ldr	r0, [pc, #20]	@ (800c940 <USBD_FS_ProductStrDescriptor+0x38>)
 800c92c:	f7ff fdf9 	bl	800c522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c930:	4b02      	ldr	r3, [pc, #8]	@ (800c93c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c932:	4618      	mov	r0, r3
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	20000ed0 	.word	0x20000ed0
 800c940:	0800e3d8 	.word	0x0800e3d8

0800c944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	6039      	str	r1, [r7, #0]
 800c94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	4904      	ldr	r1, [pc, #16]	@ (800c964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c954:	4804      	ldr	r0, [pc, #16]	@ (800c968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c956:	f7ff fde4 	bl	800c522 <USBD_GetString>
  return USBD_StrDesc;
 800c95a:	4b02      	ldr	r3, [pc, #8]	@ (800c964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20000ed0 	.word	0x20000ed0
 800c968:	0800e3f0 	.word	0x0800e3f0

0800c96c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	4603      	mov	r3, r0
 800c974:	6039      	str	r1, [r7, #0]
 800c976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	221a      	movs	r2, #26
 800c97c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c97e:	f000 f843 	bl	800ca08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c982:	4b02      	ldr	r3, [pc, #8]	@ (800c98c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20000188 	.word	0x20000188

0800c990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	6039      	str	r1, [r7, #0]
 800c99a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c99c:	79fb      	ldrb	r3, [r7, #7]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d105      	bne.n	800c9ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4907      	ldr	r1, [pc, #28]	@ (800c9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c9a6:	4808      	ldr	r0, [pc, #32]	@ (800c9c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c9a8:	f7ff fdbb 	bl	800c522 <USBD_GetString>
 800c9ac:	e004      	b.n	800c9b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	4904      	ldr	r1, [pc, #16]	@ (800c9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c9b2:	4805      	ldr	r0, [pc, #20]	@ (800c9c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c9b4:	f7ff fdb5 	bl	800c522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9b8:	4b02      	ldr	r3, [pc, #8]	@ (800c9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000ed0 	.word	0x20000ed0
 800c9c8:	0800e404 	.word	0x0800e404

0800c9cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d105      	bne.n	800c9ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	4907      	ldr	r1, [pc, #28]	@ (800ca00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9e2:	4808      	ldr	r0, [pc, #32]	@ (800ca04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9e4:	f7ff fd9d 	bl	800c522 <USBD_GetString>
 800c9e8:	e004      	b.n	800c9f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	4904      	ldr	r1, [pc, #16]	@ (800ca00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9ee:	4805      	ldr	r0, [pc, #20]	@ (800ca04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9f0:	f7ff fd97 	bl	800c522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ca00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000ed0 	.word	0x20000ed0
 800ca04:	0800e410 	.word	0x0800e410

0800ca08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ca4c <Get_SerialNum+0x44>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca14:	4b0e      	ldr	r3, [pc, #56]	@ (800ca50 <Get_SerialNum+0x48>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <Get_SerialNum+0x4c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d009      	beq.n	800ca42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca2e:	2208      	movs	r2, #8
 800ca30:	4909      	ldr	r1, [pc, #36]	@ (800ca58 <Get_SerialNum+0x50>)
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 f814 	bl	800ca60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca38:	2204      	movs	r2, #4
 800ca3a:	4908      	ldr	r1, [pc, #32]	@ (800ca5c <Get_SerialNum+0x54>)
 800ca3c:	68b8      	ldr	r0, [r7, #8]
 800ca3e:	f000 f80f 	bl	800ca60 <IntToUnicode>
  }
}
 800ca42:	bf00      	nop
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	1ffff7e8 	.word	0x1ffff7e8
 800ca50:	1ffff7ec 	.word	0x1ffff7ec
 800ca54:	1ffff7f0 	.word	0x1ffff7f0
 800ca58:	2000018a 	.word	0x2000018a
 800ca5c:	2000019a 	.word	0x2000019a

0800ca60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca72:	2300      	movs	r3, #0
 800ca74:	75fb      	strb	r3, [r7, #23]
 800ca76:	e027      	b.n	800cac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	0f1b      	lsrs	r3, r3, #28
 800ca7c:	2b09      	cmp	r3, #9
 800ca7e:	d80b      	bhi.n	800ca98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	0f1b      	lsrs	r3, r3, #28
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	440b      	add	r3, r1
 800ca90:	3230      	adds	r2, #48	@ 0x30
 800ca92:	b2d2      	uxtb	r2, r2
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	e00a      	b.n	800caae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	0f1b      	lsrs	r3, r3, #28
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4619      	mov	r1, r3
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	440b      	add	r3, r1
 800caa8:	3237      	adds	r2, #55	@ 0x37
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	3301      	adds	r3, #1
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	4413      	add	r3, r2
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	3301      	adds	r3, #1
 800cac6:	75fb      	strb	r3, [r7, #23]
 800cac8:	7dfa      	ldrb	r2, [r7, #23]
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d3d3      	bcc.n	800ca78 <IntToUnicode+0x18>
  }
}
 800cad0:	bf00      	nop
 800cad2:	bf00      	nop
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bc80      	pop	{r7}
 800cada:	4770      	bx	lr

0800cadc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a0d      	ldr	r2, [pc, #52]	@ (800cb20 <HAL_PCD_MspInit+0x44>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d113      	bne.n	800cb16 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800caee:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <HAL_PCD_MspInit+0x48>)
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	4a0c      	ldr	r2, [pc, #48]	@ (800cb24 <HAL_PCD_MspInit+0x48>)
 800caf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800caf8:	61d3      	str	r3, [r2, #28]
 800cafa:	4b0a      	ldr	r3, [pc, #40]	@ (800cb24 <HAL_PCD_MspInit+0x48>)
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cb06:	2200      	movs	r2, #0
 800cb08:	2100      	movs	r1, #0
 800cb0a:	2014      	movs	r0, #20
 800cb0c:	f7f7 fd6f 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cb10:	2014      	movs	r0, #20
 800cb12:	f7f7 fd88 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	40005c00 	.word	0x40005c00
 800cb24:	40021000 	.word	0x40021000

0800cb28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	f7fe fdc1 	bl	800b6c6 <USBD_LL_SetupStage>
}
 800cb44:	bf00      	nop
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800cb5e:	78fa      	ldrb	r2, [r7, #3]
 800cb60:	6879      	ldr	r1, [r7, #4]
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	440b      	add	r3, r1
 800cb6c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	78fb      	ldrb	r3, [r7, #3]
 800cb74:	4619      	mov	r1, r3
 800cb76:	f7fe fdf3 	bl	800b760 <USBD_LL_DataOutStage>
}
 800cb7a:	bf00      	nop
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b082      	sub	sp, #8
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	440b      	add	r3, r1
 800cba2:	333c      	adds	r3, #60	@ 0x3c
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	78fb      	ldrb	r3, [r7, #3]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	f7fe fe4a 	bl	800b842 <USBD_LL_DataInStage>
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe ff5a 	bl	800ba7e <USBD_LL_SOF>
}
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b084      	sub	sp, #16
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d001      	beq.n	800cbea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbe6:	f7f6 ff1d 	bl	8003a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cbf0:	7bfa      	ldrb	r2, [r7, #15]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe ff0a 	bl	800ba0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe fec3 	bl	800b98c <USBD_LL_Reset>
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fe ff04 	bl	800ba2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d005      	beq.n	800cc38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc2c:	4b04      	ldr	r3, [pc, #16]	@ (800cc40 <HAL_PCD_SuspendCallback+0x30>)
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	4a03      	ldr	r2, [pc, #12]	@ (800cc40 <HAL_PCD_SuspendCallback+0x30>)
 800cc32:	f043 0306 	orr.w	r3, r3, #6
 800cc36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	e000ed00 	.word	0xe000ed00

0800cc44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fefe 	bl	800ba54 <USBD_LL_Resume>
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc68:	4a28      	ldr	r2, [pc, #160]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a26      	ldr	r2, [pc, #152]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cc78:	4b24      	ldr	r3, [pc, #144]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc7a:	4a25      	ldr	r2, [pc, #148]	@ (800cd10 <USBD_LL_Init+0xb0>)
 800cc7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc7e:	4b23      	ldr	r3, [pc, #140]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc80:	2208      	movs	r2, #8
 800cc82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc84:	4b21      	ldr	r3, [pc, #132]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc86:	2202      	movs	r2, #2
 800cc88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc8a:	4b20      	ldr	r3, [pc, #128]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc90:	4b1e      	ldr	r3, [pc, #120]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc96:	4b1d      	ldr	r3, [pc, #116]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc9c:	481b      	ldr	r0, [pc, #108]	@ (800cd0c <USBD_LL_Init+0xac>)
 800cc9e:	f7f8 fcfd 	bl	800569c <HAL_PCD_Init>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cca8:	f7f6 febc 	bl	8003a24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccb2:	2318      	movs	r3, #24
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	f7fa f83c 	bl	8006d34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccc2:	2358      	movs	r3, #88	@ 0x58
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2180      	movs	r1, #128	@ 0x80
 800ccc8:	f7fa f834 	bl	8006d34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccd2:	23c0      	movs	r3, #192	@ 0xc0
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2181      	movs	r1, #129	@ 0x81
 800ccd8:	f7fa f82c 	bl	8006d34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cce2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cce6:	2200      	movs	r2, #0
 800cce8:	2101      	movs	r1, #1
 800ccea:	f7fa f823 	bl	8006d34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2182      	movs	r1, #130	@ 0x82
 800ccfc:	f7fa f81a 	bl	8006d34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200010d0 	.word	0x200010d0
 800cd10:	40005c00 	.word	0x40005c00

0800cd14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7f8 fdc1 	bl	80058b2 <HAL_PCD_Start>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 f94e 	bl	800cfd8 <USBD_Get_USB_Status>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd40:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	4608      	mov	r0, r1
 800cd54:	4611      	mov	r1, r2
 800cd56:	461a      	mov	r2, r3
 800cd58:	4603      	mov	r3, r0
 800cd5a:	70fb      	strb	r3, [r7, #3]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70bb      	strb	r3, [r7, #2]
 800cd60:	4613      	mov	r3, r2
 800cd62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cd72:	78bb      	ldrb	r3, [r7, #2]
 800cd74:	883a      	ldrh	r2, [r7, #0]
 800cd76:	78f9      	ldrb	r1, [r7, #3]
 800cd78:	f7f8 ff39 	bl	8005bee <HAL_PCD_EP_Open>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f928 	bl	800cfd8 <USBD_Get_USB_Status>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b084      	sub	sp, #16
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdb0:	78fa      	ldrb	r2, [r7, #3]
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7f8 ff80 	bl	8005cba <HAL_PCD_EP_Close>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 f909 	bl	800cfd8 <USBD_Get_USB_Status>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdee:	78fa      	ldrb	r2, [r7, #3]
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7f9 f840 	bl	8005e78 <HAL_PCD_EP_SetStall>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 f8ea 	bl	800cfd8 <USBD_Get_USB_Status>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f9 f881 	bl	8005f38 <HAL_PCD_EP_ClrStall>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f8cb 	bl	800cfd8 <USBD_Get_USB_Status>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	da0c      	bge.n	800ce86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	440b      	add	r3, r1
 800ce80:	3302      	adds	r3, #2
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	e00b      	b.n	800ce9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce8c:	68f9      	ldr	r1, [r7, #12]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800ce9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bc80      	pop	{r7}
 800cea6:	4770      	bx	lr

0800cea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cec2:	78fa      	ldrb	r2, [r7, #3]
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f8 fe6c 	bl	8005ba4 <HAL_PCD_SetAddress>
 800cecc:	4603      	mov	r3, r0
 800cece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 f880 	bl	800cfd8 <USBD_Get_USB_Status>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b086      	sub	sp, #24
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	60f8      	str	r0, [r7, #12]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	461a      	mov	r2, r3
 800cef2:	460b      	mov	r3, r1
 800cef4:	72fb      	strb	r3, [r7, #11]
 800cef6:	4613      	mov	r3, r2
 800cef8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf08:	893b      	ldrh	r3, [r7, #8]
 800cf0a:	7af9      	ldrb	r1, [r7, #11]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	f7f8 ff70 	bl	8005df2 <HAL_PCD_EP_Transmit>
 800cf12:	4603      	mov	r3, r0
 800cf14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 f85d 	bl	800cfd8 <USBD_Get_USB_Status>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf22:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	607a      	str	r2, [r7, #4]
 800cf36:	461a      	mov	r2, r3
 800cf38:	460b      	mov	r3, r1
 800cf3a:	72fb      	strb	r3, [r7, #11]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf4e:	893b      	ldrh	r3, [r7, #8]
 800cf50:	7af9      	ldrb	r1, [r7, #11]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	f7f8 fef9 	bl	8005d4a <HAL_PCD_EP_Receive>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf5c:	7dfb      	ldrb	r3, [r7, #23]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 f83a 	bl	800cfd8 <USBD_Get_USB_Status>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf68:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf84:	78fa      	ldrb	r2, [r7, #3]
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7f8 ff1b 	bl	8005dc4 <HAL_PCD_EP_GetRxCount>
 800cf8e:	4603      	mov	r3, r0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cfa0:	4b02      	ldr	r3, [pc, #8]	@ (800cfac <USBD_static_malloc+0x14>)
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bc80      	pop	{r7}
 800cfaa:	4770      	bx	lr
 800cfac:	200013bc 	.word	0x200013bc

0800cfb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]

}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bc80      	pop	{r7}
 800cfc0:	4770      	bx	lr

0800cfc2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	460b      	mov	r3, r1
 800cfcc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cfce:	bf00      	nop
 800cfd0:	370c      	adds	r7, #12
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bc80      	pop	{r7}
 800cfd6:	4770      	bx	lr

0800cfd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d817      	bhi.n	800d01c <USBD_Get_USB_Status+0x44>
 800cfec:	a201      	add	r2, pc, #4	@ (adr r2, 800cff4 <USBD_Get_USB_Status+0x1c>)
 800cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff2:	bf00      	nop
 800cff4:	0800d005 	.word	0x0800d005
 800cff8:	0800d00b 	.word	0x0800d00b
 800cffc:	0800d011 	.word	0x0800d011
 800d000:	0800d017 	.word	0x0800d017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
    break;
 800d008:	e00b      	b.n	800d022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d00a:	2302      	movs	r3, #2
 800d00c:	73fb      	strb	r3, [r7, #15]
    break;
 800d00e:	e008      	b.n	800d022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]
    break;
 800d014:	e005      	b.n	800d022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d016:	2302      	movs	r3, #2
 800d018:	73fb      	strb	r3, [r7, #15]
    break;
 800d01a:	e002      	b.n	800d022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d01c:	2302      	movs	r3, #2
 800d01e:	73fb      	strb	r3, [r7, #15]
    break;
 800d020:	bf00      	nop
  }
  return usb_status;
 800d022:	7bfb      	ldrb	r3, [r7, #15]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	bc80      	pop	{r7}
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop

0800d030 <atoi>:
 800d030:	220a      	movs	r2, #10
 800d032:	2100      	movs	r1, #0
 800d034:	f000 b87a 	b.w	800d12c <strtol>

0800d038 <_strtol_l.constprop.0>:
 800d038:	2b24      	cmp	r3, #36	@ 0x24
 800d03a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d03e:	4686      	mov	lr, r0
 800d040:	4690      	mov	r8, r2
 800d042:	d801      	bhi.n	800d048 <_strtol_l.constprop.0+0x10>
 800d044:	2b01      	cmp	r3, #1
 800d046:	d106      	bne.n	800d056 <_strtol_l.constprop.0+0x1e>
 800d048:	f000 f8d6 	bl	800d1f8 <__errno>
 800d04c:	2316      	movs	r3, #22
 800d04e:	6003      	str	r3, [r0, #0]
 800d050:	2000      	movs	r0, #0
 800d052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d056:	460d      	mov	r5, r1
 800d058:	4833      	ldr	r0, [pc, #204]	@ (800d128 <_strtol_l.constprop.0+0xf0>)
 800d05a:	462a      	mov	r2, r5
 800d05c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d060:	5d06      	ldrb	r6, [r0, r4]
 800d062:	f016 0608 	ands.w	r6, r6, #8
 800d066:	d1f8      	bne.n	800d05a <_strtol_l.constprop.0+0x22>
 800d068:	2c2d      	cmp	r4, #45	@ 0x2d
 800d06a:	d12d      	bne.n	800d0c8 <_strtol_l.constprop.0+0x90>
 800d06c:	2601      	movs	r6, #1
 800d06e:	782c      	ldrb	r4, [r5, #0]
 800d070:	1c95      	adds	r5, r2, #2
 800d072:	f033 0210 	bics.w	r2, r3, #16
 800d076:	d109      	bne.n	800d08c <_strtol_l.constprop.0+0x54>
 800d078:	2c30      	cmp	r4, #48	@ 0x30
 800d07a:	d12a      	bne.n	800d0d2 <_strtol_l.constprop.0+0x9a>
 800d07c:	782a      	ldrb	r2, [r5, #0]
 800d07e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d082:	2a58      	cmp	r2, #88	@ 0x58
 800d084:	d125      	bne.n	800d0d2 <_strtol_l.constprop.0+0x9a>
 800d086:	2310      	movs	r3, #16
 800d088:	786c      	ldrb	r4, [r5, #1]
 800d08a:	3502      	adds	r5, #2
 800d08c:	2200      	movs	r2, #0
 800d08e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d092:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d096:	fbbc f9f3 	udiv	r9, ip, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0a4:	2f09      	cmp	r7, #9
 800d0a6:	d81b      	bhi.n	800d0e0 <_strtol_l.constprop.0+0xa8>
 800d0a8:	463c      	mov	r4, r7
 800d0aa:	42a3      	cmp	r3, r4
 800d0ac:	dd27      	ble.n	800d0fe <_strtol_l.constprop.0+0xc6>
 800d0ae:	1c57      	adds	r7, r2, #1
 800d0b0:	d007      	beq.n	800d0c2 <_strtol_l.constprop.0+0x8a>
 800d0b2:	4581      	cmp	r9, r0
 800d0b4:	d320      	bcc.n	800d0f8 <_strtol_l.constprop.0+0xc0>
 800d0b6:	d101      	bne.n	800d0bc <_strtol_l.constprop.0+0x84>
 800d0b8:	45a2      	cmp	sl, r4
 800d0ba:	db1d      	blt.n	800d0f8 <_strtol_l.constprop.0+0xc0>
 800d0bc:	2201      	movs	r2, #1
 800d0be:	fb00 4003 	mla	r0, r0, r3, r4
 800d0c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0c6:	e7eb      	b.n	800d0a0 <_strtol_l.constprop.0+0x68>
 800d0c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800d0ca:	bf04      	itt	eq
 800d0cc:	782c      	ldrbeq	r4, [r5, #0]
 800d0ce:	1c95      	addeq	r5, r2, #2
 800d0d0:	e7cf      	b.n	800d072 <_strtol_l.constprop.0+0x3a>
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1da      	bne.n	800d08c <_strtol_l.constprop.0+0x54>
 800d0d6:	2c30      	cmp	r4, #48	@ 0x30
 800d0d8:	bf0c      	ite	eq
 800d0da:	2308      	moveq	r3, #8
 800d0dc:	230a      	movne	r3, #10
 800d0de:	e7d5      	b.n	800d08c <_strtol_l.constprop.0+0x54>
 800d0e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0e4:	2f19      	cmp	r7, #25
 800d0e6:	d801      	bhi.n	800d0ec <_strtol_l.constprop.0+0xb4>
 800d0e8:	3c37      	subs	r4, #55	@ 0x37
 800d0ea:	e7de      	b.n	800d0aa <_strtol_l.constprop.0+0x72>
 800d0ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0f0:	2f19      	cmp	r7, #25
 800d0f2:	d804      	bhi.n	800d0fe <_strtol_l.constprop.0+0xc6>
 800d0f4:	3c57      	subs	r4, #87	@ 0x57
 800d0f6:	e7d8      	b.n	800d0aa <_strtol_l.constprop.0+0x72>
 800d0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fc:	e7e1      	b.n	800d0c2 <_strtol_l.constprop.0+0x8a>
 800d0fe:	1c53      	adds	r3, r2, #1
 800d100:	d108      	bne.n	800d114 <_strtol_l.constprop.0+0xdc>
 800d102:	2322      	movs	r3, #34	@ 0x22
 800d104:	4660      	mov	r0, ip
 800d106:	f8ce 3000 	str.w	r3, [lr]
 800d10a:	f1b8 0f00 	cmp.w	r8, #0
 800d10e:	d0a0      	beq.n	800d052 <_strtol_l.constprop.0+0x1a>
 800d110:	1e69      	subs	r1, r5, #1
 800d112:	e006      	b.n	800d122 <_strtol_l.constprop.0+0xea>
 800d114:	b106      	cbz	r6, 800d118 <_strtol_l.constprop.0+0xe0>
 800d116:	4240      	negs	r0, r0
 800d118:	f1b8 0f00 	cmp.w	r8, #0
 800d11c:	d099      	beq.n	800d052 <_strtol_l.constprop.0+0x1a>
 800d11e:	2a00      	cmp	r2, #0
 800d120:	d1f6      	bne.n	800d110 <_strtol_l.constprop.0+0xd8>
 800d122:	f8c8 1000 	str.w	r1, [r8]
 800d126:	e794      	b.n	800d052 <_strtol_l.constprop.0+0x1a>
 800d128:	0800e449 	.word	0x0800e449

0800d12c <strtol>:
 800d12c:	4613      	mov	r3, r2
 800d12e:	460a      	mov	r2, r1
 800d130:	4601      	mov	r1, r0
 800d132:	4802      	ldr	r0, [pc, #8]	@ (800d13c <strtol+0x10>)
 800d134:	6800      	ldr	r0, [r0, #0]
 800d136:	f7ff bf7f 	b.w	800d038 <_strtol_l.constprop.0>
 800d13a:	bf00      	nop
 800d13c:	200001a4 	.word	0x200001a4

0800d140 <sniprintf>:
 800d140:	b40c      	push	{r2, r3}
 800d142:	b530      	push	{r4, r5, lr}
 800d144:	4b17      	ldr	r3, [pc, #92]	@ (800d1a4 <sniprintf+0x64>)
 800d146:	1e0c      	subs	r4, r1, #0
 800d148:	681d      	ldr	r5, [r3, #0]
 800d14a:	b09d      	sub	sp, #116	@ 0x74
 800d14c:	da08      	bge.n	800d160 <sniprintf+0x20>
 800d14e:	238b      	movs	r3, #139	@ 0x8b
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	b01d      	add	sp, #116	@ 0x74
 800d158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d15c:	b002      	add	sp, #8
 800d15e:	4770      	bx	lr
 800d160:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d164:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d168:	bf0c      	ite	eq
 800d16a:	4623      	moveq	r3, r4
 800d16c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d178:	9002      	str	r0, [sp, #8]
 800d17a:	9006      	str	r0, [sp, #24]
 800d17c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d180:	4628      	mov	r0, r5
 800d182:	ab21      	add	r3, sp, #132	@ 0x84
 800d184:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d186:	a902      	add	r1, sp, #8
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	f000 f9c1 	bl	800d510 <_svfiprintf_r>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	bfbc      	itt	lt
 800d192:	238b      	movlt	r3, #139	@ 0x8b
 800d194:	602b      	strlt	r3, [r5, #0]
 800d196:	2c00      	cmp	r4, #0
 800d198:	d0dd      	beq.n	800d156 <sniprintf+0x16>
 800d19a:	2200      	movs	r2, #0
 800d19c:	9b02      	ldr	r3, [sp, #8]
 800d19e:	701a      	strb	r2, [r3, #0]
 800d1a0:	e7d9      	b.n	800d156 <sniprintf+0x16>
 800d1a2:	bf00      	nop
 800d1a4:	200001a4 	.word	0x200001a4

0800d1a8 <siprintf>:
 800d1a8:	b40e      	push	{r1, r2, r3}
 800d1aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d1ae:	b500      	push	{lr}
 800d1b0:	b09c      	sub	sp, #112	@ 0x70
 800d1b2:	ab1d      	add	r3, sp, #116	@ 0x74
 800d1b4:	9002      	str	r0, [sp, #8]
 800d1b6:	9006      	str	r0, [sp, #24]
 800d1b8:	9107      	str	r1, [sp, #28]
 800d1ba:	9104      	str	r1, [sp, #16]
 800d1bc:	4808      	ldr	r0, [pc, #32]	@ (800d1e0 <siprintf+0x38>)
 800d1be:	4909      	ldr	r1, [pc, #36]	@ (800d1e4 <siprintf+0x3c>)
 800d1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c4:	9105      	str	r1, [sp, #20]
 800d1c6:	6800      	ldr	r0, [r0, #0]
 800d1c8:	a902      	add	r1, sp, #8
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	f000 f9a0 	bl	800d510 <_svfiprintf_r>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	9b02      	ldr	r3, [sp, #8]
 800d1d4:	701a      	strb	r2, [r3, #0]
 800d1d6:	b01c      	add	sp, #112	@ 0x70
 800d1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1dc:	b003      	add	sp, #12
 800d1de:	4770      	bx	lr
 800d1e0:	200001a4 	.word	0x200001a4
 800d1e4:	ffff0208 	.word	0xffff0208

0800d1e8 <memset>:
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	4402      	add	r2, r0
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d100      	bne.n	800d1f2 <memset+0xa>
 800d1f0:	4770      	bx	lr
 800d1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1f6:	e7f9      	b.n	800d1ec <memset+0x4>

0800d1f8 <__errno>:
 800d1f8:	4b01      	ldr	r3, [pc, #4]	@ (800d200 <__errno+0x8>)
 800d1fa:	6818      	ldr	r0, [r3, #0]
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	200001a4 	.word	0x200001a4

0800d204 <__libc_init_array>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	2600      	movs	r6, #0
 800d208:	4d0c      	ldr	r5, [pc, #48]	@ (800d23c <__libc_init_array+0x38>)
 800d20a:	4c0d      	ldr	r4, [pc, #52]	@ (800d240 <__libc_init_array+0x3c>)
 800d20c:	1b64      	subs	r4, r4, r5
 800d20e:	10a4      	asrs	r4, r4, #2
 800d210:	42a6      	cmp	r6, r4
 800d212:	d109      	bne.n	800d228 <__libc_init_array+0x24>
 800d214:	f000 fc78 	bl	800db08 <_init>
 800d218:	2600      	movs	r6, #0
 800d21a:	4d0a      	ldr	r5, [pc, #40]	@ (800d244 <__libc_init_array+0x40>)
 800d21c:	4c0a      	ldr	r4, [pc, #40]	@ (800d248 <__libc_init_array+0x44>)
 800d21e:	1b64      	subs	r4, r4, r5
 800d220:	10a4      	asrs	r4, r4, #2
 800d222:	42a6      	cmp	r6, r4
 800d224:	d105      	bne.n	800d232 <__libc_init_array+0x2e>
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22c:	4798      	blx	r3
 800d22e:	3601      	adds	r6, #1
 800d230:	e7ee      	b.n	800d210 <__libc_init_array+0xc>
 800d232:	f855 3b04 	ldr.w	r3, [r5], #4
 800d236:	4798      	blx	r3
 800d238:	3601      	adds	r6, #1
 800d23a:	e7f2      	b.n	800d222 <__libc_init_array+0x1e>
 800d23c:	0800e584 	.word	0x0800e584
 800d240:	0800e584 	.word	0x0800e584
 800d244:	0800e584 	.word	0x0800e584
 800d248:	0800e588 	.word	0x0800e588

0800d24c <__retarget_lock_acquire_recursive>:
 800d24c:	4770      	bx	lr

0800d24e <__retarget_lock_release_recursive>:
 800d24e:	4770      	bx	lr

0800d250 <memcpy>:
 800d250:	440a      	add	r2, r1
 800d252:	4291      	cmp	r1, r2
 800d254:	f100 33ff 	add.w	r3, r0, #4294967295
 800d258:	d100      	bne.n	800d25c <memcpy+0xc>
 800d25a:	4770      	bx	lr
 800d25c:	b510      	push	{r4, lr}
 800d25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d262:	4291      	cmp	r1, r2
 800d264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d268:	d1f9      	bne.n	800d25e <memcpy+0xe>
 800d26a:	bd10      	pop	{r4, pc}

0800d26c <_free_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4605      	mov	r5, r0
 800d270:	2900      	cmp	r1, #0
 800d272:	d040      	beq.n	800d2f6 <_free_r+0x8a>
 800d274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d278:	1f0c      	subs	r4, r1, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	bfb8      	it	lt
 800d27e:	18e4      	addlt	r4, r4, r3
 800d280:	f000 f8de 	bl	800d440 <__malloc_lock>
 800d284:	4a1c      	ldr	r2, [pc, #112]	@ (800d2f8 <_free_r+0x8c>)
 800d286:	6813      	ldr	r3, [r2, #0]
 800d288:	b933      	cbnz	r3, 800d298 <_free_r+0x2c>
 800d28a:	6063      	str	r3, [r4, #4]
 800d28c:	6014      	str	r4, [r2, #0]
 800d28e:	4628      	mov	r0, r5
 800d290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d294:	f000 b8da 	b.w	800d44c <__malloc_unlock>
 800d298:	42a3      	cmp	r3, r4
 800d29a:	d908      	bls.n	800d2ae <_free_r+0x42>
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	1821      	adds	r1, r4, r0
 800d2a0:	428b      	cmp	r3, r1
 800d2a2:	bf01      	itttt	eq
 800d2a4:	6819      	ldreq	r1, [r3, #0]
 800d2a6:	685b      	ldreq	r3, [r3, #4]
 800d2a8:	1809      	addeq	r1, r1, r0
 800d2aa:	6021      	streq	r1, [r4, #0]
 800d2ac:	e7ed      	b.n	800d28a <_free_r+0x1e>
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	b10b      	cbz	r3, 800d2b8 <_free_r+0x4c>
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	d9fa      	bls.n	800d2ae <_free_r+0x42>
 800d2b8:	6811      	ldr	r1, [r2, #0]
 800d2ba:	1850      	adds	r0, r2, r1
 800d2bc:	42a0      	cmp	r0, r4
 800d2be:	d10b      	bne.n	800d2d8 <_free_r+0x6c>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	4401      	add	r1, r0
 800d2c4:	1850      	adds	r0, r2, r1
 800d2c6:	4283      	cmp	r3, r0
 800d2c8:	6011      	str	r1, [r2, #0]
 800d2ca:	d1e0      	bne.n	800d28e <_free_r+0x22>
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	4408      	add	r0, r1
 800d2d2:	6010      	str	r0, [r2, #0]
 800d2d4:	6053      	str	r3, [r2, #4]
 800d2d6:	e7da      	b.n	800d28e <_free_r+0x22>
 800d2d8:	d902      	bls.n	800d2e0 <_free_r+0x74>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	602b      	str	r3, [r5, #0]
 800d2de:	e7d6      	b.n	800d28e <_free_r+0x22>
 800d2e0:	6820      	ldr	r0, [r4, #0]
 800d2e2:	1821      	adds	r1, r4, r0
 800d2e4:	428b      	cmp	r3, r1
 800d2e6:	bf01      	itttt	eq
 800d2e8:	6819      	ldreq	r1, [r3, #0]
 800d2ea:	685b      	ldreq	r3, [r3, #4]
 800d2ec:	1809      	addeq	r1, r1, r0
 800d2ee:	6021      	streq	r1, [r4, #0]
 800d2f0:	6063      	str	r3, [r4, #4]
 800d2f2:	6054      	str	r4, [r2, #4]
 800d2f4:	e7cb      	b.n	800d28e <_free_r+0x22>
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20001720 	.word	0x20001720

0800d2fc <sbrk_aligned>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	4e0f      	ldr	r6, [pc, #60]	@ (800d33c <sbrk_aligned+0x40>)
 800d300:	460c      	mov	r4, r1
 800d302:	6831      	ldr	r1, [r6, #0]
 800d304:	4605      	mov	r5, r0
 800d306:	b911      	cbnz	r1, 800d30e <sbrk_aligned+0x12>
 800d308:	f000 fbaa 	bl	800da60 <_sbrk_r>
 800d30c:	6030      	str	r0, [r6, #0]
 800d30e:	4621      	mov	r1, r4
 800d310:	4628      	mov	r0, r5
 800d312:	f000 fba5 	bl	800da60 <_sbrk_r>
 800d316:	1c43      	adds	r3, r0, #1
 800d318:	d103      	bne.n	800d322 <sbrk_aligned+0x26>
 800d31a:	f04f 34ff 	mov.w	r4, #4294967295
 800d31e:	4620      	mov	r0, r4
 800d320:	bd70      	pop	{r4, r5, r6, pc}
 800d322:	1cc4      	adds	r4, r0, #3
 800d324:	f024 0403 	bic.w	r4, r4, #3
 800d328:	42a0      	cmp	r0, r4
 800d32a:	d0f8      	beq.n	800d31e <sbrk_aligned+0x22>
 800d32c:	1a21      	subs	r1, r4, r0
 800d32e:	4628      	mov	r0, r5
 800d330:	f000 fb96 	bl	800da60 <_sbrk_r>
 800d334:	3001      	adds	r0, #1
 800d336:	d1f2      	bne.n	800d31e <sbrk_aligned+0x22>
 800d338:	e7ef      	b.n	800d31a <sbrk_aligned+0x1e>
 800d33a:	bf00      	nop
 800d33c:	2000171c 	.word	0x2000171c

0800d340 <_malloc_r>:
 800d340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d344:	1ccd      	adds	r5, r1, #3
 800d346:	f025 0503 	bic.w	r5, r5, #3
 800d34a:	3508      	adds	r5, #8
 800d34c:	2d0c      	cmp	r5, #12
 800d34e:	bf38      	it	cc
 800d350:	250c      	movcc	r5, #12
 800d352:	2d00      	cmp	r5, #0
 800d354:	4606      	mov	r6, r0
 800d356:	db01      	blt.n	800d35c <_malloc_r+0x1c>
 800d358:	42a9      	cmp	r1, r5
 800d35a:	d904      	bls.n	800d366 <_malloc_r+0x26>
 800d35c:	230c      	movs	r3, #12
 800d35e:	6033      	str	r3, [r6, #0]
 800d360:	2000      	movs	r0, #0
 800d362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d43c <_malloc_r+0xfc>
 800d36a:	f000 f869 	bl	800d440 <__malloc_lock>
 800d36e:	f8d8 3000 	ldr.w	r3, [r8]
 800d372:	461c      	mov	r4, r3
 800d374:	bb44      	cbnz	r4, 800d3c8 <_malloc_r+0x88>
 800d376:	4629      	mov	r1, r5
 800d378:	4630      	mov	r0, r6
 800d37a:	f7ff ffbf 	bl	800d2fc <sbrk_aligned>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	4604      	mov	r4, r0
 800d382:	d158      	bne.n	800d436 <_malloc_r+0xf6>
 800d384:	f8d8 4000 	ldr.w	r4, [r8]
 800d388:	4627      	mov	r7, r4
 800d38a:	2f00      	cmp	r7, #0
 800d38c:	d143      	bne.n	800d416 <_malloc_r+0xd6>
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d04b      	beq.n	800d42a <_malloc_r+0xea>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	4639      	mov	r1, r7
 800d396:	4630      	mov	r0, r6
 800d398:	eb04 0903 	add.w	r9, r4, r3
 800d39c:	f000 fb60 	bl	800da60 <_sbrk_r>
 800d3a0:	4581      	cmp	r9, r0
 800d3a2:	d142      	bne.n	800d42a <_malloc_r+0xea>
 800d3a4:	6821      	ldr	r1, [r4, #0]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	1a6d      	subs	r5, r5, r1
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f7ff ffa6 	bl	800d2fc <sbrk_aligned>
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	d03a      	beq.n	800d42a <_malloc_r+0xea>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	442b      	add	r3, r5
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	bb62      	cbnz	r2, 800d41c <_malloc_r+0xdc>
 800d3c2:	f8c8 7000 	str.w	r7, [r8]
 800d3c6:	e00f      	b.n	800d3e8 <_malloc_r+0xa8>
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	1b52      	subs	r2, r2, r5
 800d3cc:	d420      	bmi.n	800d410 <_malloc_r+0xd0>
 800d3ce:	2a0b      	cmp	r2, #11
 800d3d0:	d917      	bls.n	800d402 <_malloc_r+0xc2>
 800d3d2:	1961      	adds	r1, r4, r5
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	6025      	str	r5, [r4, #0]
 800d3d8:	bf18      	it	ne
 800d3da:	6059      	strne	r1, [r3, #4]
 800d3dc:	6863      	ldr	r3, [r4, #4]
 800d3de:	bf08      	it	eq
 800d3e0:	f8c8 1000 	streq.w	r1, [r8]
 800d3e4:	5162      	str	r2, [r4, r5]
 800d3e6:	604b      	str	r3, [r1, #4]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f000 f82f 	bl	800d44c <__malloc_unlock>
 800d3ee:	f104 000b 	add.w	r0, r4, #11
 800d3f2:	1d23      	adds	r3, r4, #4
 800d3f4:	f020 0007 	bic.w	r0, r0, #7
 800d3f8:	1ac2      	subs	r2, r0, r3
 800d3fa:	bf1c      	itt	ne
 800d3fc:	1a1b      	subne	r3, r3, r0
 800d3fe:	50a3      	strne	r3, [r4, r2]
 800d400:	e7af      	b.n	800d362 <_malloc_r+0x22>
 800d402:	6862      	ldr	r2, [r4, #4]
 800d404:	42a3      	cmp	r3, r4
 800d406:	bf0c      	ite	eq
 800d408:	f8c8 2000 	streq.w	r2, [r8]
 800d40c:	605a      	strne	r2, [r3, #4]
 800d40e:	e7eb      	b.n	800d3e8 <_malloc_r+0xa8>
 800d410:	4623      	mov	r3, r4
 800d412:	6864      	ldr	r4, [r4, #4]
 800d414:	e7ae      	b.n	800d374 <_malloc_r+0x34>
 800d416:	463c      	mov	r4, r7
 800d418:	687f      	ldr	r7, [r7, #4]
 800d41a:	e7b6      	b.n	800d38a <_malloc_r+0x4a>
 800d41c:	461a      	mov	r2, r3
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	42a3      	cmp	r3, r4
 800d422:	d1fb      	bne.n	800d41c <_malloc_r+0xdc>
 800d424:	2300      	movs	r3, #0
 800d426:	6053      	str	r3, [r2, #4]
 800d428:	e7de      	b.n	800d3e8 <_malloc_r+0xa8>
 800d42a:	230c      	movs	r3, #12
 800d42c:	4630      	mov	r0, r6
 800d42e:	6033      	str	r3, [r6, #0]
 800d430:	f000 f80c 	bl	800d44c <__malloc_unlock>
 800d434:	e794      	b.n	800d360 <_malloc_r+0x20>
 800d436:	6005      	str	r5, [r0, #0]
 800d438:	e7d6      	b.n	800d3e8 <_malloc_r+0xa8>
 800d43a:	bf00      	nop
 800d43c:	20001720 	.word	0x20001720

0800d440 <__malloc_lock>:
 800d440:	4801      	ldr	r0, [pc, #4]	@ (800d448 <__malloc_lock+0x8>)
 800d442:	f7ff bf03 	b.w	800d24c <__retarget_lock_acquire_recursive>
 800d446:	bf00      	nop
 800d448:	20001718 	.word	0x20001718

0800d44c <__malloc_unlock>:
 800d44c:	4801      	ldr	r0, [pc, #4]	@ (800d454 <__malloc_unlock+0x8>)
 800d44e:	f7ff befe 	b.w	800d24e <__retarget_lock_release_recursive>
 800d452:	bf00      	nop
 800d454:	20001718 	.word	0x20001718

0800d458 <__ssputs_r>:
 800d458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d45c:	461f      	mov	r7, r3
 800d45e:	688e      	ldr	r6, [r1, #8]
 800d460:	4682      	mov	sl, r0
 800d462:	42be      	cmp	r6, r7
 800d464:	460c      	mov	r4, r1
 800d466:	4690      	mov	r8, r2
 800d468:	680b      	ldr	r3, [r1, #0]
 800d46a:	d82d      	bhi.n	800d4c8 <__ssputs_r+0x70>
 800d46c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d474:	d026      	beq.n	800d4c4 <__ssputs_r+0x6c>
 800d476:	6965      	ldr	r5, [r4, #20]
 800d478:	6909      	ldr	r1, [r1, #16]
 800d47a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d47e:	eba3 0901 	sub.w	r9, r3, r1
 800d482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d486:	1c7b      	adds	r3, r7, #1
 800d488:	444b      	add	r3, r9
 800d48a:	106d      	asrs	r5, r5, #1
 800d48c:	429d      	cmp	r5, r3
 800d48e:	bf38      	it	cc
 800d490:	461d      	movcc	r5, r3
 800d492:	0553      	lsls	r3, r2, #21
 800d494:	d527      	bpl.n	800d4e6 <__ssputs_r+0x8e>
 800d496:	4629      	mov	r1, r5
 800d498:	f7ff ff52 	bl	800d340 <_malloc_r>
 800d49c:	4606      	mov	r6, r0
 800d49e:	b360      	cbz	r0, 800d4fa <__ssputs_r+0xa2>
 800d4a0:	464a      	mov	r2, r9
 800d4a2:	6921      	ldr	r1, [r4, #16]
 800d4a4:	f7ff fed4 	bl	800d250 <memcpy>
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4b2:	81a3      	strh	r3, [r4, #12]
 800d4b4:	6126      	str	r6, [r4, #16]
 800d4b6:	444e      	add	r6, r9
 800d4b8:	6026      	str	r6, [r4, #0]
 800d4ba:	463e      	mov	r6, r7
 800d4bc:	6165      	str	r5, [r4, #20]
 800d4be:	eba5 0509 	sub.w	r5, r5, r9
 800d4c2:	60a5      	str	r5, [r4, #8]
 800d4c4:	42be      	cmp	r6, r7
 800d4c6:	d900      	bls.n	800d4ca <__ssputs_r+0x72>
 800d4c8:	463e      	mov	r6, r7
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	4641      	mov	r1, r8
 800d4ce:	6820      	ldr	r0, [r4, #0]
 800d4d0:	f000 faac 	bl	800da2c <memmove>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	68a3      	ldr	r3, [r4, #8]
 800d4d8:	1b9b      	subs	r3, r3, r6
 800d4da:	60a3      	str	r3, [r4, #8]
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	4433      	add	r3, r6
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e6:	462a      	mov	r2, r5
 800d4e8:	f000 fad8 	bl	800da9c <_realloc_r>
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d1e0      	bne.n	800d4b4 <__ssputs_r+0x5c>
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	6921      	ldr	r1, [r4, #16]
 800d4f6:	f7ff feb9 	bl	800d26c <_free_r>
 800d4fa:	230c      	movs	r3, #12
 800d4fc:	f8ca 3000 	str.w	r3, [sl]
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f04f 30ff 	mov.w	r0, #4294967295
 800d506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	e7e9      	b.n	800d4e2 <__ssputs_r+0x8a>
	...

0800d510 <_svfiprintf_r>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4698      	mov	r8, r3
 800d516:	898b      	ldrh	r3, [r1, #12]
 800d518:	4607      	mov	r7, r0
 800d51a:	061b      	lsls	r3, r3, #24
 800d51c:	460d      	mov	r5, r1
 800d51e:	4614      	mov	r4, r2
 800d520:	b09d      	sub	sp, #116	@ 0x74
 800d522:	d510      	bpl.n	800d546 <_svfiprintf_r+0x36>
 800d524:	690b      	ldr	r3, [r1, #16]
 800d526:	b973      	cbnz	r3, 800d546 <_svfiprintf_r+0x36>
 800d528:	2140      	movs	r1, #64	@ 0x40
 800d52a:	f7ff ff09 	bl	800d340 <_malloc_r>
 800d52e:	6028      	str	r0, [r5, #0]
 800d530:	6128      	str	r0, [r5, #16]
 800d532:	b930      	cbnz	r0, 800d542 <_svfiprintf_r+0x32>
 800d534:	230c      	movs	r3, #12
 800d536:	603b      	str	r3, [r7, #0]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	b01d      	add	sp, #116	@ 0x74
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d542:	2340      	movs	r3, #64	@ 0x40
 800d544:	616b      	str	r3, [r5, #20]
 800d546:	2300      	movs	r3, #0
 800d548:	9309      	str	r3, [sp, #36]	@ 0x24
 800d54a:	2320      	movs	r3, #32
 800d54c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d550:	2330      	movs	r3, #48	@ 0x30
 800d552:	f04f 0901 	mov.w	r9, #1
 800d556:	f8cd 800c 	str.w	r8, [sp, #12]
 800d55a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d6f4 <_svfiprintf_r+0x1e4>
 800d55e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d562:	4623      	mov	r3, r4
 800d564:	469a      	mov	sl, r3
 800d566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d56a:	b10a      	cbz	r2, 800d570 <_svfiprintf_r+0x60>
 800d56c:	2a25      	cmp	r2, #37	@ 0x25
 800d56e:	d1f9      	bne.n	800d564 <_svfiprintf_r+0x54>
 800d570:	ebba 0b04 	subs.w	fp, sl, r4
 800d574:	d00b      	beq.n	800d58e <_svfiprintf_r+0x7e>
 800d576:	465b      	mov	r3, fp
 800d578:	4622      	mov	r2, r4
 800d57a:	4629      	mov	r1, r5
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ff6b 	bl	800d458 <__ssputs_r>
 800d582:	3001      	adds	r0, #1
 800d584:	f000 80a7 	beq.w	800d6d6 <_svfiprintf_r+0x1c6>
 800d588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d58a:	445a      	add	r2, fp
 800d58c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d58e:	f89a 3000 	ldrb.w	r3, [sl]
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 809f 	beq.w	800d6d6 <_svfiprintf_r+0x1c6>
 800d598:	2300      	movs	r3, #0
 800d59a:	f04f 32ff 	mov.w	r2, #4294967295
 800d59e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5a2:	f10a 0a01 	add.w	sl, sl, #1
 800d5a6:	9304      	str	r3, [sp, #16]
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5b0:	4654      	mov	r4, sl
 800d5b2:	2205      	movs	r2, #5
 800d5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b8:	484e      	ldr	r0, [pc, #312]	@ (800d6f4 <_svfiprintf_r+0x1e4>)
 800d5ba:	f000 fa61 	bl	800da80 <memchr>
 800d5be:	9a04      	ldr	r2, [sp, #16]
 800d5c0:	b9d8      	cbnz	r0, 800d5fa <_svfiprintf_r+0xea>
 800d5c2:	06d0      	lsls	r0, r2, #27
 800d5c4:	bf44      	itt	mi
 800d5c6:	2320      	movmi	r3, #32
 800d5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5cc:	0711      	lsls	r1, r2, #28
 800d5ce:	bf44      	itt	mi
 800d5d0:	232b      	movmi	r3, #43	@ 0x2b
 800d5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5dc:	d015      	beq.n	800d60a <_svfiprintf_r+0xfa>
 800d5de:	4654      	mov	r4, sl
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	f04f 0c0a 	mov.w	ip, #10
 800d5e6:	9a07      	ldr	r2, [sp, #28]
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ee:	3b30      	subs	r3, #48	@ 0x30
 800d5f0:	2b09      	cmp	r3, #9
 800d5f2:	d94b      	bls.n	800d68c <_svfiprintf_r+0x17c>
 800d5f4:	b1b0      	cbz	r0, 800d624 <_svfiprintf_r+0x114>
 800d5f6:	9207      	str	r2, [sp, #28]
 800d5f8:	e014      	b.n	800d624 <_svfiprintf_r+0x114>
 800d5fa:	eba0 0308 	sub.w	r3, r0, r8
 800d5fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d602:	4313      	orrs	r3, r2
 800d604:	46a2      	mov	sl, r4
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	e7d2      	b.n	800d5b0 <_svfiprintf_r+0xa0>
 800d60a:	9b03      	ldr	r3, [sp, #12]
 800d60c:	1d19      	adds	r1, r3, #4
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	9103      	str	r1, [sp, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	bfbb      	ittet	lt
 800d616:	425b      	neglt	r3, r3
 800d618:	f042 0202 	orrlt.w	r2, r2, #2
 800d61c:	9307      	strge	r3, [sp, #28]
 800d61e:	9307      	strlt	r3, [sp, #28]
 800d620:	bfb8      	it	lt
 800d622:	9204      	strlt	r2, [sp, #16]
 800d624:	7823      	ldrb	r3, [r4, #0]
 800d626:	2b2e      	cmp	r3, #46	@ 0x2e
 800d628:	d10a      	bne.n	800d640 <_svfiprintf_r+0x130>
 800d62a:	7863      	ldrb	r3, [r4, #1]
 800d62c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d62e:	d132      	bne.n	800d696 <_svfiprintf_r+0x186>
 800d630:	9b03      	ldr	r3, [sp, #12]
 800d632:	3402      	adds	r4, #2
 800d634:	1d1a      	adds	r2, r3, #4
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	9203      	str	r2, [sp, #12]
 800d63a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d63e:	9305      	str	r3, [sp, #20]
 800d640:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d6f8 <_svfiprintf_r+0x1e8>
 800d644:	2203      	movs	r2, #3
 800d646:	4650      	mov	r0, sl
 800d648:	7821      	ldrb	r1, [r4, #0]
 800d64a:	f000 fa19 	bl	800da80 <memchr>
 800d64e:	b138      	cbz	r0, 800d660 <_svfiprintf_r+0x150>
 800d650:	2240      	movs	r2, #64	@ 0x40
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	eba0 000a 	sub.w	r0, r0, sl
 800d658:	4082      	lsls	r2, r0
 800d65a:	4313      	orrs	r3, r2
 800d65c:	3401      	adds	r4, #1
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	2206      	movs	r2, #6
 800d666:	4825      	ldr	r0, [pc, #148]	@ (800d6fc <_svfiprintf_r+0x1ec>)
 800d668:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d66c:	f000 fa08 	bl	800da80 <memchr>
 800d670:	2800      	cmp	r0, #0
 800d672:	d036      	beq.n	800d6e2 <_svfiprintf_r+0x1d2>
 800d674:	4b22      	ldr	r3, [pc, #136]	@ (800d700 <_svfiprintf_r+0x1f0>)
 800d676:	bb1b      	cbnz	r3, 800d6c0 <_svfiprintf_r+0x1b0>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	3307      	adds	r3, #7
 800d67c:	f023 0307 	bic.w	r3, r3, #7
 800d680:	3308      	adds	r3, #8
 800d682:	9303      	str	r3, [sp, #12]
 800d684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d686:	4433      	add	r3, r6
 800d688:	9309      	str	r3, [sp, #36]	@ 0x24
 800d68a:	e76a      	b.n	800d562 <_svfiprintf_r+0x52>
 800d68c:	460c      	mov	r4, r1
 800d68e:	2001      	movs	r0, #1
 800d690:	fb0c 3202 	mla	r2, ip, r2, r3
 800d694:	e7a8      	b.n	800d5e8 <_svfiprintf_r+0xd8>
 800d696:	2300      	movs	r3, #0
 800d698:	f04f 0c0a 	mov.w	ip, #10
 800d69c:	4619      	mov	r1, r3
 800d69e:	3401      	adds	r4, #1
 800d6a0:	9305      	str	r3, [sp, #20]
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6a8:	3a30      	subs	r2, #48	@ 0x30
 800d6aa:	2a09      	cmp	r2, #9
 800d6ac:	d903      	bls.n	800d6b6 <_svfiprintf_r+0x1a6>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0c6      	beq.n	800d640 <_svfiprintf_r+0x130>
 800d6b2:	9105      	str	r1, [sp, #20]
 800d6b4:	e7c4      	b.n	800d640 <_svfiprintf_r+0x130>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6be:	e7f0      	b.n	800d6a2 <_svfiprintf_r+0x192>
 800d6c0:	ab03      	add	r3, sp, #12
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d704 <_svfiprintf_r+0x1f4>)
 800d6ca:	a904      	add	r1, sp, #16
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	1c42      	adds	r2, r0, #1
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	d1d6      	bne.n	800d684 <_svfiprintf_r+0x174>
 800d6d6:	89ab      	ldrh	r3, [r5, #12]
 800d6d8:	065b      	lsls	r3, r3, #25
 800d6da:	f53f af2d 	bmi.w	800d538 <_svfiprintf_r+0x28>
 800d6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6e0:	e72c      	b.n	800d53c <_svfiprintf_r+0x2c>
 800d6e2:	ab03      	add	r3, sp, #12
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	4b06      	ldr	r3, [pc, #24]	@ (800d704 <_svfiprintf_r+0x1f4>)
 800d6ec:	a904      	add	r1, sp, #16
 800d6ee:	f000 f87d 	bl	800d7ec <_printf_i>
 800d6f2:	e7ed      	b.n	800d6d0 <_svfiprintf_r+0x1c0>
 800d6f4:	0800e549 	.word	0x0800e549
 800d6f8:	0800e54f 	.word	0x0800e54f
 800d6fc:	0800e553 	.word	0x0800e553
 800d700:	00000000 	.word	0x00000000
 800d704:	0800d459 	.word	0x0800d459

0800d708 <_printf_common>:
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	4616      	mov	r6, r2
 800d70e:	4698      	mov	r8, r3
 800d710:	688a      	ldr	r2, [r1, #8]
 800d712:	690b      	ldr	r3, [r1, #16]
 800d714:	4607      	mov	r7, r0
 800d716:	4293      	cmp	r3, r2
 800d718:	bfb8      	it	lt
 800d71a:	4613      	movlt	r3, r2
 800d71c:	6033      	str	r3, [r6, #0]
 800d71e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d722:	460c      	mov	r4, r1
 800d724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d728:	b10a      	cbz	r2, 800d72e <_printf_common+0x26>
 800d72a:	3301      	adds	r3, #1
 800d72c:	6033      	str	r3, [r6, #0]
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	0699      	lsls	r1, r3, #26
 800d732:	bf42      	ittt	mi
 800d734:	6833      	ldrmi	r3, [r6, #0]
 800d736:	3302      	addmi	r3, #2
 800d738:	6033      	strmi	r3, [r6, #0]
 800d73a:	6825      	ldr	r5, [r4, #0]
 800d73c:	f015 0506 	ands.w	r5, r5, #6
 800d740:	d106      	bne.n	800d750 <_printf_common+0x48>
 800d742:	f104 0a19 	add.w	sl, r4, #25
 800d746:	68e3      	ldr	r3, [r4, #12]
 800d748:	6832      	ldr	r2, [r6, #0]
 800d74a:	1a9b      	subs	r3, r3, r2
 800d74c:	42ab      	cmp	r3, r5
 800d74e:	dc2b      	bgt.n	800d7a8 <_printf_common+0xa0>
 800d750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d754:	6822      	ldr	r2, [r4, #0]
 800d756:	3b00      	subs	r3, #0
 800d758:	bf18      	it	ne
 800d75a:	2301      	movne	r3, #1
 800d75c:	0692      	lsls	r2, r2, #26
 800d75e:	d430      	bmi.n	800d7c2 <_printf_common+0xba>
 800d760:	4641      	mov	r1, r8
 800d762:	4638      	mov	r0, r7
 800d764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d768:	47c8      	blx	r9
 800d76a:	3001      	adds	r0, #1
 800d76c:	d023      	beq.n	800d7b6 <_printf_common+0xae>
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	6922      	ldr	r2, [r4, #16]
 800d772:	f003 0306 	and.w	r3, r3, #6
 800d776:	2b04      	cmp	r3, #4
 800d778:	bf14      	ite	ne
 800d77a:	2500      	movne	r5, #0
 800d77c:	6833      	ldreq	r3, [r6, #0]
 800d77e:	f04f 0600 	mov.w	r6, #0
 800d782:	bf08      	it	eq
 800d784:	68e5      	ldreq	r5, [r4, #12]
 800d786:	f104 041a 	add.w	r4, r4, #26
 800d78a:	bf08      	it	eq
 800d78c:	1aed      	subeq	r5, r5, r3
 800d78e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d792:	bf08      	it	eq
 800d794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d798:	4293      	cmp	r3, r2
 800d79a:	bfc4      	itt	gt
 800d79c:	1a9b      	subgt	r3, r3, r2
 800d79e:	18ed      	addgt	r5, r5, r3
 800d7a0:	42b5      	cmp	r5, r6
 800d7a2:	d11a      	bne.n	800d7da <_printf_common+0xd2>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e008      	b.n	800d7ba <_printf_common+0xb2>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4652      	mov	r2, sl
 800d7ac:	4641      	mov	r1, r8
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	47c8      	blx	r9
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	d103      	bne.n	800d7be <_printf_common+0xb6>
 800d7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	3501      	adds	r5, #1
 800d7c0:	e7c1      	b.n	800d746 <_printf_common+0x3e>
 800d7c2:	2030      	movs	r0, #48	@ 0x30
 800d7c4:	18e1      	adds	r1, r4, r3
 800d7c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7d0:	4422      	add	r2, r4
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7d8:	e7c2      	b.n	800d760 <_printf_common+0x58>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4622      	mov	r2, r4
 800d7de:	4641      	mov	r1, r8
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	47c8      	blx	r9
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	d0e6      	beq.n	800d7b6 <_printf_common+0xae>
 800d7e8:	3601      	adds	r6, #1
 800d7ea:	e7d9      	b.n	800d7a0 <_printf_common+0x98>

0800d7ec <_printf_i>:
 800d7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	7e0f      	ldrb	r7, [r1, #24]
 800d7f2:	4691      	mov	r9, r2
 800d7f4:	2f78      	cmp	r7, #120	@ 0x78
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	469a      	mov	sl, r3
 800d7fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d802:	d807      	bhi.n	800d814 <_printf_i+0x28>
 800d804:	2f62      	cmp	r7, #98	@ 0x62
 800d806:	d80a      	bhi.n	800d81e <_printf_i+0x32>
 800d808:	2f00      	cmp	r7, #0
 800d80a:	f000 80d3 	beq.w	800d9b4 <_printf_i+0x1c8>
 800d80e:	2f58      	cmp	r7, #88	@ 0x58
 800d810:	f000 80ba 	beq.w	800d988 <_printf_i+0x19c>
 800d814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d81c:	e03a      	b.n	800d894 <_printf_i+0xa8>
 800d81e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d822:	2b15      	cmp	r3, #21
 800d824:	d8f6      	bhi.n	800d814 <_printf_i+0x28>
 800d826:	a101      	add	r1, pc, #4	@ (adr r1, 800d82c <_printf_i+0x40>)
 800d828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d82c:	0800d885 	.word	0x0800d885
 800d830:	0800d899 	.word	0x0800d899
 800d834:	0800d815 	.word	0x0800d815
 800d838:	0800d815 	.word	0x0800d815
 800d83c:	0800d815 	.word	0x0800d815
 800d840:	0800d815 	.word	0x0800d815
 800d844:	0800d899 	.word	0x0800d899
 800d848:	0800d815 	.word	0x0800d815
 800d84c:	0800d815 	.word	0x0800d815
 800d850:	0800d815 	.word	0x0800d815
 800d854:	0800d815 	.word	0x0800d815
 800d858:	0800d99b 	.word	0x0800d99b
 800d85c:	0800d8c3 	.word	0x0800d8c3
 800d860:	0800d955 	.word	0x0800d955
 800d864:	0800d815 	.word	0x0800d815
 800d868:	0800d815 	.word	0x0800d815
 800d86c:	0800d9bd 	.word	0x0800d9bd
 800d870:	0800d815 	.word	0x0800d815
 800d874:	0800d8c3 	.word	0x0800d8c3
 800d878:	0800d815 	.word	0x0800d815
 800d87c:	0800d815 	.word	0x0800d815
 800d880:	0800d95d 	.word	0x0800d95d
 800d884:	6833      	ldr	r3, [r6, #0]
 800d886:	1d1a      	adds	r2, r3, #4
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6032      	str	r2, [r6, #0]
 800d88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d894:	2301      	movs	r3, #1
 800d896:	e09e      	b.n	800d9d6 <_printf_i+0x1ea>
 800d898:	6833      	ldr	r3, [r6, #0]
 800d89a:	6820      	ldr	r0, [r4, #0]
 800d89c:	1d19      	adds	r1, r3, #4
 800d89e:	6031      	str	r1, [r6, #0]
 800d8a0:	0606      	lsls	r6, r0, #24
 800d8a2:	d501      	bpl.n	800d8a8 <_printf_i+0xbc>
 800d8a4:	681d      	ldr	r5, [r3, #0]
 800d8a6:	e003      	b.n	800d8b0 <_printf_i+0xc4>
 800d8a8:	0645      	lsls	r5, r0, #25
 800d8aa:	d5fb      	bpl.n	800d8a4 <_printf_i+0xb8>
 800d8ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	da03      	bge.n	800d8bc <_printf_i+0xd0>
 800d8b4:	232d      	movs	r3, #45	@ 0x2d
 800d8b6:	426d      	negs	r5, r5
 800d8b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8bc:	230a      	movs	r3, #10
 800d8be:	4859      	ldr	r0, [pc, #356]	@ (800da24 <_printf_i+0x238>)
 800d8c0:	e011      	b.n	800d8e6 <_printf_i+0xfa>
 800d8c2:	6821      	ldr	r1, [r4, #0]
 800d8c4:	6833      	ldr	r3, [r6, #0]
 800d8c6:	0608      	lsls	r0, r1, #24
 800d8c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8cc:	d402      	bmi.n	800d8d4 <_printf_i+0xe8>
 800d8ce:	0649      	lsls	r1, r1, #25
 800d8d0:	bf48      	it	mi
 800d8d2:	b2ad      	uxthmi	r5, r5
 800d8d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8d6:	6033      	str	r3, [r6, #0]
 800d8d8:	bf14      	ite	ne
 800d8da:	230a      	movne	r3, #10
 800d8dc:	2308      	moveq	r3, #8
 800d8de:	4851      	ldr	r0, [pc, #324]	@ (800da24 <_printf_i+0x238>)
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8e6:	6866      	ldr	r6, [r4, #4]
 800d8e8:	2e00      	cmp	r6, #0
 800d8ea:	bfa8      	it	ge
 800d8ec:	6821      	ldrge	r1, [r4, #0]
 800d8ee:	60a6      	str	r6, [r4, #8]
 800d8f0:	bfa4      	itt	ge
 800d8f2:	f021 0104 	bicge.w	r1, r1, #4
 800d8f6:	6021      	strge	r1, [r4, #0]
 800d8f8:	b90d      	cbnz	r5, 800d8fe <_printf_i+0x112>
 800d8fa:	2e00      	cmp	r6, #0
 800d8fc:	d04b      	beq.n	800d996 <_printf_i+0x1aa>
 800d8fe:	4616      	mov	r6, r2
 800d900:	fbb5 f1f3 	udiv	r1, r5, r3
 800d904:	fb03 5711 	mls	r7, r3, r1, r5
 800d908:	5dc7      	ldrb	r7, [r0, r7]
 800d90a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d90e:	462f      	mov	r7, r5
 800d910:	42bb      	cmp	r3, r7
 800d912:	460d      	mov	r5, r1
 800d914:	d9f4      	bls.n	800d900 <_printf_i+0x114>
 800d916:	2b08      	cmp	r3, #8
 800d918:	d10b      	bne.n	800d932 <_printf_i+0x146>
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	07df      	lsls	r7, r3, #31
 800d91e:	d508      	bpl.n	800d932 <_printf_i+0x146>
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	6861      	ldr	r1, [r4, #4]
 800d924:	4299      	cmp	r1, r3
 800d926:	bfde      	ittt	le
 800d928:	2330      	movle	r3, #48	@ 0x30
 800d92a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d92e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d932:	1b92      	subs	r2, r2, r6
 800d934:	6122      	str	r2, [r4, #16]
 800d936:	464b      	mov	r3, r9
 800d938:	4621      	mov	r1, r4
 800d93a:	4640      	mov	r0, r8
 800d93c:	f8cd a000 	str.w	sl, [sp]
 800d940:	aa03      	add	r2, sp, #12
 800d942:	f7ff fee1 	bl	800d708 <_printf_common>
 800d946:	3001      	adds	r0, #1
 800d948:	d14a      	bne.n	800d9e0 <_printf_i+0x1f4>
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	b004      	add	sp, #16
 800d950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	f043 0320 	orr.w	r3, r3, #32
 800d95a:	6023      	str	r3, [r4, #0]
 800d95c:	2778      	movs	r7, #120	@ 0x78
 800d95e:	4832      	ldr	r0, [pc, #200]	@ (800da28 <_printf_i+0x23c>)
 800d960:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	6831      	ldr	r1, [r6, #0]
 800d968:	061f      	lsls	r7, r3, #24
 800d96a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d96e:	d402      	bmi.n	800d976 <_printf_i+0x18a>
 800d970:	065f      	lsls	r7, r3, #25
 800d972:	bf48      	it	mi
 800d974:	b2ad      	uxthmi	r5, r5
 800d976:	6031      	str	r1, [r6, #0]
 800d978:	07d9      	lsls	r1, r3, #31
 800d97a:	bf44      	itt	mi
 800d97c:	f043 0320 	orrmi.w	r3, r3, #32
 800d980:	6023      	strmi	r3, [r4, #0]
 800d982:	b11d      	cbz	r5, 800d98c <_printf_i+0x1a0>
 800d984:	2310      	movs	r3, #16
 800d986:	e7ab      	b.n	800d8e0 <_printf_i+0xf4>
 800d988:	4826      	ldr	r0, [pc, #152]	@ (800da24 <_printf_i+0x238>)
 800d98a:	e7e9      	b.n	800d960 <_printf_i+0x174>
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	f023 0320 	bic.w	r3, r3, #32
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	e7f6      	b.n	800d984 <_printf_i+0x198>
 800d996:	4616      	mov	r6, r2
 800d998:	e7bd      	b.n	800d916 <_printf_i+0x12a>
 800d99a:	6833      	ldr	r3, [r6, #0]
 800d99c:	6825      	ldr	r5, [r4, #0]
 800d99e:	1d18      	adds	r0, r3, #4
 800d9a0:	6961      	ldr	r1, [r4, #20]
 800d9a2:	6030      	str	r0, [r6, #0]
 800d9a4:	062e      	lsls	r6, r5, #24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	d501      	bpl.n	800d9ae <_printf_i+0x1c2>
 800d9aa:	6019      	str	r1, [r3, #0]
 800d9ac:	e002      	b.n	800d9b4 <_printf_i+0x1c8>
 800d9ae:	0668      	lsls	r0, r5, #25
 800d9b0:	d5fb      	bpl.n	800d9aa <_printf_i+0x1be>
 800d9b2:	8019      	strh	r1, [r3, #0]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4616      	mov	r6, r2
 800d9b8:	6123      	str	r3, [r4, #16]
 800d9ba:	e7bc      	b.n	800d936 <_printf_i+0x14a>
 800d9bc:	6833      	ldr	r3, [r6, #0]
 800d9be:	2100      	movs	r1, #0
 800d9c0:	1d1a      	adds	r2, r3, #4
 800d9c2:	6032      	str	r2, [r6, #0]
 800d9c4:	681e      	ldr	r6, [r3, #0]
 800d9c6:	6862      	ldr	r2, [r4, #4]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 f859 	bl	800da80 <memchr>
 800d9ce:	b108      	cbz	r0, 800d9d4 <_printf_i+0x1e8>
 800d9d0:	1b80      	subs	r0, r0, r6
 800d9d2:	6060      	str	r0, [r4, #4]
 800d9d4:	6863      	ldr	r3, [r4, #4]
 800d9d6:	6123      	str	r3, [r4, #16]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9de:	e7aa      	b.n	800d936 <_printf_i+0x14a>
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	6923      	ldr	r3, [r4, #16]
 800d9e8:	47d0      	blx	sl
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d0ad      	beq.n	800d94a <_printf_i+0x15e>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	079b      	lsls	r3, r3, #30
 800d9f2:	d413      	bmi.n	800da1c <_printf_i+0x230>
 800d9f4:	68e0      	ldr	r0, [r4, #12]
 800d9f6:	9b03      	ldr	r3, [sp, #12]
 800d9f8:	4298      	cmp	r0, r3
 800d9fa:	bfb8      	it	lt
 800d9fc:	4618      	movlt	r0, r3
 800d9fe:	e7a6      	b.n	800d94e <_printf_i+0x162>
 800da00:	2301      	movs	r3, #1
 800da02:	4632      	mov	r2, r6
 800da04:	4649      	mov	r1, r9
 800da06:	4640      	mov	r0, r8
 800da08:	47d0      	blx	sl
 800da0a:	3001      	adds	r0, #1
 800da0c:	d09d      	beq.n	800d94a <_printf_i+0x15e>
 800da0e:	3501      	adds	r5, #1
 800da10:	68e3      	ldr	r3, [r4, #12]
 800da12:	9903      	ldr	r1, [sp, #12]
 800da14:	1a5b      	subs	r3, r3, r1
 800da16:	42ab      	cmp	r3, r5
 800da18:	dcf2      	bgt.n	800da00 <_printf_i+0x214>
 800da1a:	e7eb      	b.n	800d9f4 <_printf_i+0x208>
 800da1c:	2500      	movs	r5, #0
 800da1e:	f104 0619 	add.w	r6, r4, #25
 800da22:	e7f5      	b.n	800da10 <_printf_i+0x224>
 800da24:	0800e55a 	.word	0x0800e55a
 800da28:	0800e56b 	.word	0x0800e56b

0800da2c <memmove>:
 800da2c:	4288      	cmp	r0, r1
 800da2e:	b510      	push	{r4, lr}
 800da30:	eb01 0402 	add.w	r4, r1, r2
 800da34:	d902      	bls.n	800da3c <memmove+0x10>
 800da36:	4284      	cmp	r4, r0
 800da38:	4623      	mov	r3, r4
 800da3a:	d807      	bhi.n	800da4c <memmove+0x20>
 800da3c:	1e43      	subs	r3, r0, #1
 800da3e:	42a1      	cmp	r1, r4
 800da40:	d008      	beq.n	800da54 <memmove+0x28>
 800da42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da4a:	e7f8      	b.n	800da3e <memmove+0x12>
 800da4c:	4601      	mov	r1, r0
 800da4e:	4402      	add	r2, r0
 800da50:	428a      	cmp	r2, r1
 800da52:	d100      	bne.n	800da56 <memmove+0x2a>
 800da54:	bd10      	pop	{r4, pc}
 800da56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da5e:	e7f7      	b.n	800da50 <memmove+0x24>

0800da60 <_sbrk_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	2300      	movs	r3, #0
 800da64:	4d05      	ldr	r5, [pc, #20]	@ (800da7c <_sbrk_r+0x1c>)
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	f7f6 fc00 	bl	8004270 <_sbrk>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_sbrk_r+0x1a>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_sbrk_r+0x1a>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	20001714 	.word	0x20001714

0800da80 <memchr>:
 800da80:	4603      	mov	r3, r0
 800da82:	b510      	push	{r4, lr}
 800da84:	b2c9      	uxtb	r1, r1
 800da86:	4402      	add	r2, r0
 800da88:	4293      	cmp	r3, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	d101      	bne.n	800da92 <memchr+0x12>
 800da8e:	2000      	movs	r0, #0
 800da90:	e003      	b.n	800da9a <memchr+0x1a>
 800da92:	7804      	ldrb	r4, [r0, #0]
 800da94:	3301      	adds	r3, #1
 800da96:	428c      	cmp	r4, r1
 800da98:	d1f6      	bne.n	800da88 <memchr+0x8>
 800da9a:	bd10      	pop	{r4, pc}

0800da9c <_realloc_r>:
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	4680      	mov	r8, r0
 800daa2:	4615      	mov	r5, r2
 800daa4:	460c      	mov	r4, r1
 800daa6:	b921      	cbnz	r1, 800dab2 <_realloc_r+0x16>
 800daa8:	4611      	mov	r1, r2
 800daaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	f7ff bc47 	b.w	800d340 <_malloc_r>
 800dab2:	b92a      	cbnz	r2, 800dac0 <_realloc_r+0x24>
 800dab4:	f7ff fbda 	bl	800d26c <_free_r>
 800dab8:	2400      	movs	r4, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac0:	f000 f81a 	bl	800daf8 <_malloc_usable_size_r>
 800dac4:	4285      	cmp	r5, r0
 800dac6:	4606      	mov	r6, r0
 800dac8:	d802      	bhi.n	800dad0 <_realloc_r+0x34>
 800daca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dace:	d8f4      	bhi.n	800daba <_realloc_r+0x1e>
 800dad0:	4629      	mov	r1, r5
 800dad2:	4640      	mov	r0, r8
 800dad4:	f7ff fc34 	bl	800d340 <_malloc_r>
 800dad8:	4607      	mov	r7, r0
 800dada:	2800      	cmp	r0, #0
 800dadc:	d0ec      	beq.n	800dab8 <_realloc_r+0x1c>
 800dade:	42b5      	cmp	r5, r6
 800dae0:	462a      	mov	r2, r5
 800dae2:	4621      	mov	r1, r4
 800dae4:	bf28      	it	cs
 800dae6:	4632      	movcs	r2, r6
 800dae8:	f7ff fbb2 	bl	800d250 <memcpy>
 800daec:	4621      	mov	r1, r4
 800daee:	4640      	mov	r0, r8
 800daf0:	f7ff fbbc 	bl	800d26c <_free_r>
 800daf4:	463c      	mov	r4, r7
 800daf6:	e7e0      	b.n	800daba <_realloc_r+0x1e>

0800daf8 <_malloc_usable_size_r>:
 800daf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dafc:	1f18      	subs	r0, r3, #4
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bfbc      	itt	lt
 800db02:	580b      	ldrlt	r3, [r1, r0]
 800db04:	18c0      	addlt	r0, r0, r3
 800db06:	4770      	bx	lr

0800db08 <_init>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr

0800db14 <_fini>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	bf00      	nop
 800db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1a:	bc08      	pop	{r3}
 800db1c:	469e      	mov	lr, r3
 800db1e:	4770      	bx	lr

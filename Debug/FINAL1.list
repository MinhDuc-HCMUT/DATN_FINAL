
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d564  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  0800d670  0800d670  0000e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df88  0800df88  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df88  0800df88  0000ef88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df90  0800df90  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df90  0800df90  0000ef90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df94  0800df94  0000ef94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800df98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001534  200001f8  0800e18c  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  0800e18c  0000f72c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa53  00000000  00000000  0000f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ca  00000000  00000000  00029c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e8  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c75f  00000000  00000000  00031538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020fd3  00000000  00000000  0004dc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ac1  00000000  00000000  0006ec6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010372b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007710  00000000  00000000  00103770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d658 	.word	0x0800d658

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d658 	.word	0x0800d658

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	4618      	mov	r0, r3
 800017e:	f003 fee3 	bl	8003f48 <HAL_Delay>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	b086      	sub	sp, #24
 800018e:	af02      	add	r7, sp, #8
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	f023 030f 	bic.w	r3, r3, #15
 80001a0:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	7adb      	ldrb	r3, [r3, #11]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d007      	beq.n	80001c0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001b8:	7bbb      	ldrb	r3, [r7, #14]
 80001ba:	f043 0308 	orr.w	r3, r3, #8
 80001be:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001c0:	78bb      	ldrb	r3, [r7, #2]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d108      	bne.n	80001d8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001ce:	7bbb      	ldrb	r3, [r7, #14]
 80001d0:	f043 0301 	orr.w	r3, r3, #1
 80001d4:	73bb      	strb	r3, [r7, #14]
 80001d6:	e00a      	b.n	80001ee <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001d8:	78bb      	ldrb	r3, [r7, #2]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d107      	bne.n	80001ee <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f023 0301 	bic.w	r3, r3, #1
 80001e4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f023 0301 	bic.w	r3, r3, #1
 80001ec:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f7ff ffb9 	bl	8000170 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	b2db      	uxtb	r3, r3
 800020a:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ffaf 	bl	8000170 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000212:	7bbb      	ldrb	r3, [r7, #14]
 8000214:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	6818      	ldr	r0, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	f107 0208 	add.w	r2, r7, #8
 8000224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2304      	movs	r3, #4
 800022c:	f004 fcd8 	bl	8004be0 <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	4611      	mov	r1, r2
 8000244:	461a      	mov	r2, r3
 8000246:	460b      	mov	r3, r1
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	4613      	mov	r3, r2
 800024c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	79ba      	ldrb	r2, [r7, #6]
 800025e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	7e3a      	ldrb	r2, [r7, #24]
 8000264:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2228      	movs	r2, #40	@ 0x28
 800026a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2206      	movs	r2, #6
 8000270:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	220c      	movs	r2, #12
 8000276:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2214      	movs	r2, #20
 800027c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2208      	movs	r2, #8
 8000282:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000284:	2032      	movs	r0, #50	@ 0x32
 8000286:	f7ff ff73 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800028a:	2200      	movs	r2, #0
 800028c:	2133      	movs	r1, #51	@ 0x33
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f7ff ff7b 	bl	800018a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2133      	movs	r1, #51	@ 0x33
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff76 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff66 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2132      	movs	r1, #50	@ 0x32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff6e 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff5e 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2120      	movs	r1, #32
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f7ff ff66 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002be:	2005      	movs	r0, #5
 80002c0:	f7ff ff56 	bl	8000170 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	79db      	ldrb	r3, [r3, #7]
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ff5c 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	7a1b      	ldrb	r3, [r3, #8]
 80002d6:	2200      	movs	r2, #0
 80002d8:	4619      	mov	r1, r3
 80002da:	68f8      	ldr	r0, [r7, #12]
 80002dc:	f7ff ff55 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	7a5b      	ldrb	r3, [r3, #9]
 80002e4:	2200      	movs	r2, #0
 80002e6:	4619      	mov	r1, r3
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f7ff ff4e 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	7a9b      	ldrb	r3, [r3, #10]
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	68f8      	ldr	r0, [r7, #12]
 80002f8:	f7ff ff47 	bl	800018a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	68f8      	ldr	r0, [r7, #12]
 8000302:	f7ff ff42 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000306:	2200      	movs	r2, #0
 8000308:	2102      	movs	r1, #2
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f7ff ff3d 	bl	800018a <CLCD_WriteI2C>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	78fa      	ldrb	r2, [r7, #3]
 8000332:	429a      	cmp	r2, r3
 8000334:	d303      	bcc.n	800033e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	795b      	ldrb	r3, [r3, #5]
 800033a:	3b01      	subs	r3, #1
 800033c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	799b      	ldrb	r3, [r3, #6]
 8000342:	78ba      	ldrb	r2, [r7, #2]
 8000344:	429a      	cmp	r2, r3
 8000346:	d303      	bcc.n	8000350 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	799b      	ldrb	r3, [r3, #6]
 800034c:	3b01      	subs	r3, #1
 800034e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000350:	78bb      	ldrb	r3, [r7, #2]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e013      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d103      	bne.n	800036a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	3340      	adds	r3, #64	@ 0x40
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	e00c      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800036a:	78bb      	ldrb	r3, [r7, #2]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d103      	bne.n	8000378 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	3314      	adds	r3, #20
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	e005      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000378:	78bb      	ldrb	r3, [r7, #2]
 800037a:	2b03      	cmp	r3, #3
 800037c:	d102      	bne.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	3354      	adds	r3, #84	@ 0x54
 8000382:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff fefa 	bl	800018a <CLCD_WriteI2C>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff feea 	bl	800018a <CLCD_WriteI2C>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003c8:	e007      	b.n	80003da <CLCD_I2C_WriteString+0x1c>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	603a      	str	r2, [r7, #0]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4619      	mov	r1, r3
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ffe2 	bl	800039e <CLCD_I2C_WriteChar>
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f3      	bne.n	80003ca <CLCD_I2C_WriteString+0xc>
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff fec6 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003fe:	2005      	movs	r0, #5
 8000400:	f7ff feb6 	bl	8000170 <CLCD_Delay>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffe7 	bl	80003ec <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	68f8      	ldr	r0, [r7, #12]
 8000424:	f7ff ff78 	bl	8000318 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f7ff ffc7 	bl	80003be <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2100      	movs	r1, #0
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff ff6f 	bl	8000318 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f7ff ffbe 	bl	80003be <CLCD_I2C_WriteString>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000452:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <KeyPad_Init+0xb0>)
 8000454:	2204      	movs	r2, #4
 8000456:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000458:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <KeyPad_Init+0xb0>)
 800045a:	2204      	movs	r2, #4
 800045c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	75fb      	strb	r3, [r7, #23]
 8000462:	e022      	b.n	80004aa <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	4a23      	ldr	r2, [pc, #140]	@ (8000500 <KeyPad_Init+0xb4>)
 8000474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000478:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800047a:	7dfb      	ldrb	r3, [r7, #23]
 800047c:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <KeyPad_Init+0xb8>)
 800047e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000482:	1d3a      	adds	r2, r7, #4
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f004 f890 	bl	80045ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <KeyPad_Init+0xb8>)
 8000490:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <KeyPad_Init+0xb4>)
 8000498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	f004 fa1f 	bl	80048e2 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 80004a4:	7dfb      	ldrb	r3, [r7, #23]
 80004a6:	3301      	adds	r3, #1
 80004a8:	75fb      	strb	r3, [r7, #23]
 80004aa:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <KeyPad_Init+0xb0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	7dfa      	ldrb	r2, [r7, #23]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d3d7      	bcc.n	8000464 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	75bb      	strb	r3, [r7, #22]
 80004b8:	e016      	b.n	80004e8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004c6:	7dbb      	ldrb	r3, [r7, #22]
 80004c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <KeyPad_Init+0xbc>)
 80004ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ce:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004d0:	7dbb      	ldrb	r3, [r7, #22]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <KeyPad_Init+0xc0>)
 80004d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f004 f865 	bl	80045ac <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004e2:	7dbb      	ldrb	r3, [r7, #22]
 80004e4:	3301      	adds	r3, #1
 80004e6:	75bb      	strb	r3, [r7, #22]
 80004e8:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <KeyPad_Init+0xb0>)
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	7dba      	ldrb	r2, [r7, #22]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d3e3      	bcc.n	80004ba <KeyPad_Init+0x6e>
  }
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000214 	.word	0x20000214
 8000500:	0800de2c 	.word	0x0800de2c
 8000504:	20000000 	.word	0x20000000
 8000508:	0800de34 	.word	0x0800de34
 800050c:	20000010 	.word	0x20000010

08000510 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000516:	2300      	movs	r3, #0
 8000518:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	e07e      	b.n	800061e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	71bb      	strb	r3, [r7, #6]
 8000524:	e00e      	b.n	8000544 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	4a42      	ldr	r2, [pc, #264]	@ (8000634 <KeyPad_Scan+0x124>)
 800052a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	4a41      	ldr	r2, [pc, #260]	@ (8000638 <KeyPad_Scan+0x128>)
 8000532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	f004 f9d2 	bl	80048e2 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	3301      	adds	r3, #1
 8000542:	71bb      	strb	r3, [r7, #6]
 8000544:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <KeyPad_Scan+0x12c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3eb      	bcc.n	8000526 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a38      	ldr	r2, [pc, #224]	@ (8000634 <KeyPad_Scan+0x124>)
 8000552:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a37      	ldr	r2, [pc, #220]	@ (8000638 <KeyPad_Scan+0x128>)
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f004 f9be 	bl	80048e2 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000566:	2005      	movs	r0, #5
 8000568:	f003 fcee 	bl	8003f48 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
 8000570:	e04d      	b.n	800060e <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4a32      	ldr	r2, [pc, #200]	@ (8000640 <KeyPad_Scan+0x130>)
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	4931      	ldr	r1, [pc, #196]	@ (8000644 <KeyPad_Scan+0x134>)
 800057e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f004 f995 	bl	80048b4 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d13b      	bne.n	8000608 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000590:	2014      	movs	r0, #20
 8000592:	f003 fcd9 	bl	8003f48 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <KeyPad_Scan+0x130>)
 800059a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	4928      	ldr	r1, [pc, #160]	@ (8000644 <KeyPad_Scan+0x134>)
 80005a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4610      	mov	r0, r2
 80005aa:	f004 f983 	bl	80048b4 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d129      	bne.n	8000608 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2201      	movs	r2, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	b21a      	sxth	r2, r3
 80005be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	3308      	adds	r3, #8
 80005cc:	2201      	movs	r2, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d8:	4313      	orrs	r3, r2
 80005da:	b21b      	sxth	r3, r3
 80005dc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005de:	e002      	b.n	80005e6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005e0:	2005      	movs	r0, #5
 80005e2:	f003 fcb1 	bl	8003f48 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005e6:	797b      	ldrb	r3, [r7, #5]
 80005e8:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <KeyPad_Scan+0x130>)
 80005ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	4914      	ldr	r1, [pc, #80]	@ (8000644 <KeyPad_Scan+0x134>)
 80005f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4610      	mov	r0, r2
 80005fa:	f004 f95b 	bl	80048b4 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0ed      	beq.n	80005e0 <KeyPad_Scan+0xd0>
          return key;
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	e011      	b.n	800062c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000608:	797b      	ldrb	r3, [r7, #5]
 800060a:	3301      	adds	r3, #1
 800060c:	717b      	strb	r3, [r7, #5]
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <KeyPad_Scan+0x12c>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	797a      	ldrb	r2, [r7, #5]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3ac      	bcc.n	8000572 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <KeyPad_Scan+0x12c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	429a      	cmp	r2, r3
 8000626:	f4ff af7b 	bcc.w	8000520 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800062a:	887b      	ldrh	r3, [r7, #2]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	0800de2c 	.word	0x0800de2c
 800063c:	20000214 	.word	0x20000214
 8000640:	20000010 	.word	0x20000010
 8000644:	0800de34 	.word	0x0800de34

08000648 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000650:	e00e      	b.n	8000670 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000652:	f7ff ff5d 	bl	8000510 <KeyPad_Scan>
 8000656:	4603      	mov	r3, r0
 8000658:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800065a:	897b      	ldrh	r3, [r7, #10]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d004      	beq.n	800066a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000666:	897b      	ldrh	r3, [r7, #10]
 8000668:	e024      	b.n	80006b4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800066a:	2014      	movs	r0, #20
 800066c:	f003 fc6c 	bl	8003f48 <HAL_Delay>
  while(Timeout_ms==0)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0ed      	beq.n	8000652 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000676:	f003 fc5d 	bl	8003f34 <HAL_GetTick>
 800067a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800067c:	e00e      	b.n	800069c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800067e:	f7ff ff47 	bl	8000510 <KeyPad_Scan>
 8000682:	4603      	mov	r3, r0
 8000684:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000686:	897b      	ldrh	r3, [r7, #10]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 800068e:	897b      	ldrh	r3, [r7, #10]
 8000690:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	e00e      	b.n	80006b4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000696:	2014      	movs	r0, #20
 8000698:	f003 fc56 	bl	8003f48 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800069c:	f003 fc4a 	bl	8003f34 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8e8      	bhi.n	800067e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000214 	.word	0x20000214

080006c0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffbd 	bl	8000648 <KeyPad_WaitForKey>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006d4:	4293      	cmp	r3, r2
 80006d6:	f300 809f 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006de:	dc1a      	bgt.n	8000716 <KeyPad_WaitForKeyGetChar+0x56>
 80006e0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006e4:	f300 8098 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006ec:	dc2a      	bgt.n	8000744 <KeyPad_WaitForKeyGetChar+0x84>
 80006ee:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006f2:	f300 8091 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006fa:	dc3b      	bgt.n	8000774 <KeyPad_WaitForKeyGetChar+0xb4>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d069      	beq.n	80007d4 <KeyPad_WaitForKeyGetChar+0x114>
 8000700:	2b00      	cmp	r3, #0
 8000702:	f2c0 8089 	blt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800070a:	f300 8085 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000712:	dc47      	bgt.n	80007a4 <KeyPad_WaitForKeyGetChar+0xe4>
 8000714:	e080      	b.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 8000716:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800071a:	2b07      	cmp	r3, #7
 800071c:	d87c      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800071e:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <KeyPad_WaitForKeyGetChar+0x64>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	080007e5 	.word	0x080007e5
 8000728:	080007f5 	.word	0x080007f5
 800072c:	08000819 	.word	0x08000819
 8000730:	08000805 	.word	0x08000805
 8000734:	08000819 	.word	0x08000819
 8000738:	08000819 	.word	0x08000819
 800073c:	08000819 	.word	0x08000819
 8000740:	08000815 	.word	0x08000815
 8000744:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000748:	2b07      	cmp	r3, #7
 800074a:	d865      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <KeyPad_WaitForKeyGetChar+0x94>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	080007e1 	.word	0x080007e1
 8000758:	080007f1 	.word	0x080007f1
 800075c:	08000819 	.word	0x08000819
 8000760:	08000801 	.word	0x08000801
 8000764:	08000819 	.word	0x08000819
 8000768:	08000819 	.word	0x08000819
 800076c:	08000819 	.word	0x08000819
 8000770:	08000811 	.word	0x08000811
 8000774:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000778:	2b07      	cmp	r3, #7
 800077a:	d84d      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800077c:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <KeyPad_WaitForKeyGetChar+0xc4>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007dd 	.word	0x080007dd
 8000788:	080007ed 	.word	0x080007ed
 800078c:	08000819 	.word	0x08000819
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000819 	.word	0x08000819
 8000798:	08000819 	.word	0x08000819
 800079c:	08000819 	.word	0x08000819
 80007a0:	0800080d 	.word	0x0800080d
 80007a4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d835      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80007ac:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <KeyPad_WaitForKeyGetChar+0xf4>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	080007d9 	.word	0x080007d9
 80007b8:	080007e9 	.word	0x080007e9
 80007bc:	08000819 	.word	0x08000819
 80007c0:	080007f9 	.word	0x080007f9
 80007c4:	08000819 	.word	0x08000819
 80007c8:	08000819 	.word	0x08000819
 80007cc:	08000819 	.word	0x08000819
 80007d0:	08000809 	.word	0x08000809
  {
    case 0x0000:
      return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e020      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007d8:	2331      	movs	r3, #49	@ 0x31
 80007da:	e01e      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007dc:	2332      	movs	r3, #50	@ 0x32
 80007de:	e01c      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007e0:	2333      	movs	r3, #51	@ 0x33
 80007e2:	e01a      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007e4:	2341      	movs	r3, #65	@ 0x41
 80007e6:	e018      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007e8:	2334      	movs	r3, #52	@ 0x34
 80007ea:	e016      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007ec:	2335      	movs	r3, #53	@ 0x35
 80007ee:	e014      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007f0:	2336      	movs	r3, #54	@ 0x36
 80007f2:	e012      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007f4:	2342      	movs	r3, #66	@ 0x42
 80007f6:	e010      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007f8:	2337      	movs	r3, #55	@ 0x37
 80007fa:	e00e      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007fc:	2338      	movs	r3, #56	@ 0x38
 80007fe:	e00c      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 8000800:	2339      	movs	r3, #57	@ 0x39
 8000802:	e00a      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 8000804:	2343      	movs	r3, #67	@ 0x43
 8000806:	e008      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 8000808:	232a      	movs	r3, #42	@ 0x2a
 800080a:	e006      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 800080c:	2330      	movs	r3, #48	@ 0x30
 800080e:	e004      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000810:	2323      	movs	r3, #35	@ 0x23
 8000812:	e002      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000814:	2344      	movs	r3, #68	@ 0x44
 8000816:	e000      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000818:	2300      	movs	r3, #0
	}
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop

08000824 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800082e:	1df9      	adds	r1, r7, #7
 8000830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000834:	2201      	movs	r2, #1
 8000836:	4803      	ldr	r0, [pc, #12]	@ (8000844 <USART_SendByte+0x20>)
 8000838:	f007 fc49 	bl	80080ce <HAL_UART_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000310 	.word	0x20000310

08000848 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000852:	bf00      	nop
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f107 0108 	add.w	r1, r7, #8
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <receive_finger+0x3c>)
 8000862:	f007 fcc6 	bl	80081f2 <HAL_UART_Receive>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f3      	beq.n	8000854 <receive_finger+0xc>
	p=D[len-3];
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3b03      	subs	r3, #3
 8000870:	3318      	adds	r3, #24
 8000872:	443b      	add	r3, r7
 8000874:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000878:	75fb      	strb	r3, [r7, #23]
	return p;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000310 	.word	0x20000310

08000888 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	b29a      	uxth	r2, r3
 8000896:	f107 0108 	add.w	r1, r7, #8
 800089a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089e:	4807      	ldr	r0, [pc, #28]	@ (80008bc <receive_finger_match+0x34>)
 80008a0:	f007 fca7 	bl	80081f2 <HAL_UART_Receive>
	p=D[len-5];
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3b05      	subs	r3, #5
 80008a8:	3318      	adds	r3, #24
 80008aa:	443b      	add	r3, r7
 80008ac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008b0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000310 	.word	0x20000310

080008c0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	23c8      	movs	r3, #200	@ 0xc8
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <receive_finger_search+0x38>)
 80008d6:	f007 fc8c 	bl	80081f2 <HAL_UART_Receive>
	p=D[len-7];
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b07      	subs	r3, #7
 80008de:	3320      	adds	r3, #32
 80008e0:	443b      	add	r3, r7
 80008e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008e6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008e8:	7dfa      	ldrb	r2, [r7, #23]
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <receive_finger_search+0x3c>)
 80008ec:	701a      	strb	r2, [r3, #0]

	return p;
 80008ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000310 	.word	0x20000310
 80008fc:	20000218 	.word	0x20000218

08000900 <collect_finger>:
int collect_finger(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000904:	20ef      	movs	r0, #239	@ 0xef
 8000906:	f7ff ff8d 	bl	8000824 <USART_SendByte>
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff8a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	f7ff ff87 	bl	8000824 <USART_SendByte>
 8000916:	20ff      	movs	r0, #255	@ 0xff
 8000918:	f7ff ff84 	bl	8000824 <USART_SendByte>
 800091c:	20ff      	movs	r0, #255	@ 0xff
 800091e:	f7ff ff81 	bl	8000824 <USART_SendByte>
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	f7ff ff7e 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff ff7b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff ff78 	bl	8000824 <USART_SendByte>
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff ff75 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff ff72 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff ff6f 	bl	8000824 <USART_SendByte>
 8000946:	2005      	movs	r0, #5
 8000948:	f7ff ff6c 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 800094c:	200c      	movs	r0, #12
 800094e:	f7ff ff7b 	bl	8000848 <receive_finger>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}

08000958 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3307      	adds	r3, #7
 800096a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800096c:	20ef      	movs	r0, #239	@ 0xef
 800096e:	f7ff ff59 	bl	8000824 <USART_SendByte>
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff56 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	f7ff ff53 	bl	8000824 <USART_SendByte>
 800097e:	20ff      	movs	r0, #255	@ 0xff
 8000980:	f7ff ff50 	bl	8000824 <USART_SendByte>
 8000984:	20ff      	movs	r0, #255	@ 0xff
 8000986:	f7ff ff4d 	bl	8000824 <USART_SendByte>
 800098a:	20ff      	movs	r0, #255	@ 0xff
 800098c:	f7ff ff4a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff47 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff44 	bl	8000824 <USART_SendByte>
 800099c:	2004      	movs	r0, #4
 800099e:	f7ff ff41 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x02);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff3e 	bl	8000824 <USART_SendByte>
   USART_SendByte(local);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff3a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff37 	bl	8000824 <USART_SendByte>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff32 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 80009c0:	200c      	movs	r0, #12
 80009c2:	f7ff ff41 	bl	8000848 <receive_finger>
 80009c6:	4603      	mov	r3, r0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009d4:	20ef      	movs	r0, #239	@ 0xef
 80009d6:	f7ff ff25 	bl	8000824 <USART_SendByte>
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff ff22 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009e0:	20ff      	movs	r0, #255	@ 0xff
 80009e2:	f7ff ff1f 	bl	8000824 <USART_SendByte>
 80009e6:	20ff      	movs	r0, #255	@ 0xff
 80009e8:	f7ff ff1c 	bl	8000824 <USART_SendByte>
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	f7ff ff19 	bl	8000824 <USART_SendByte>
 80009f2:	20ff      	movs	r0, #255	@ 0xff
 80009f4:	f7ff ff16 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff ff13 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff ff10 	bl	8000824 <USART_SendByte>
 8000a04:	2003      	movs	r0, #3
 8000a06:	f7ff ff0d 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x03);
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff ff0a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff ff07 	bl	8000824 <USART_SendByte>
 8000a16:	2007      	movs	r0, #7
 8000a18:	f7ff ff04 	bl	8000824 <USART_SendByte>
   return receive_finger_match(14);
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f7ff ff33 	bl	8000888 <receive_finger_match>
 8000a22:	4603      	mov	r3, r0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a2c:	20ef      	movs	r0, #239	@ 0xef
 8000a2e:	f7ff fef9 	bl	8000824 <USART_SendByte>
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fef6 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	f7ff fef3 	bl	8000824 <USART_SendByte>
 8000a3e:	20ff      	movs	r0, #255	@ 0xff
 8000a40:	f7ff fef0 	bl	8000824 <USART_SendByte>
 8000a44:	20ff      	movs	r0, #255	@ 0xff
 8000a46:	f7ff feed 	bl	8000824 <USART_SendByte>
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	f7ff feea 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fee7 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fee4 	bl	8000824 <USART_SendByte>
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f7ff fee1 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x05);
 8000a62:	2005      	movs	r0, #5
 8000a64:	f7ff fede 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fedb 	bl	8000824 <USART_SendByte>
 8000a6e:	2009      	movs	r0, #9
 8000a70:	f7ff fed8 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000a74:	200c      	movs	r0, #12
 8000a76:	f7ff fee7 	bl	8000848 <receive_finger>
 8000a7a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	330e      	adds	r3, #14
 8000a8e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a90:	20ef      	movs	r0, #239	@ 0xef
 8000a92:	f7ff fec7 	bl	8000824 <USART_SendByte>
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fec4 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a9c:	20ff      	movs	r0, #255	@ 0xff
 8000a9e:	f7ff fec1 	bl	8000824 <USART_SendByte>
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	f7ff febe 	bl	8000824 <USART_SendByte>
 8000aa8:	20ff      	movs	r0, #255	@ 0xff
 8000aaa:	f7ff febb 	bl	8000824 <USART_SendByte>
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	f7ff feb8 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff feb5 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff feb2 	bl	8000824 <USART_SendByte>
 8000ac0:	2006      	movs	r0, #6
 8000ac2:	f7ff feaf 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x06);
 8000ac6:	2006      	movs	r0, #6
 8000ac8:	f7ff feac 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fea9 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fea6 	bl	8000824 <USART_SendByte>
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fea2 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe9f 	bl	8000824 <USART_SendByte>
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe9b 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000aee:	200c      	movs	r0, #12
 8000af0:	f7ff feaa 	bl	8000848 <receive_finger>
 8000af4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b02:	20ef      	movs	r0, #239	@ 0xef
 8000b04:	f7ff fe8e 	bl	8000824 <USART_SendByte>
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe8b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000b0e:	20ff      	movs	r0, #255	@ 0xff
 8000b10:	f7ff fe88 	bl	8000824 <USART_SendByte>
 8000b14:	20ff      	movs	r0, #255	@ 0xff
 8000b16:	f7ff fe85 	bl	8000824 <USART_SendByte>
 8000b1a:	20ff      	movs	r0, #255	@ 0xff
 8000b1c:	f7ff fe82 	bl	8000824 <USART_SendByte>
 8000b20:	20ff      	movs	r0, #255	@ 0xff
 8000b22:	f7ff fe7f 	bl	8000824 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff fe7c 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fe79 	bl	8000824 <USART_SendByte>
 8000b32:	2008      	movs	r0, #8
 8000b34:	f7ff fe76 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x04);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f7ff fe73 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fe70 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fe6d 	bl	8000824 <USART_SendByte>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fe6a 	bl	8000824 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe67 	bl	8000824 <USART_SendByte>
 8000b56:	20ff      	movs	r0, #255	@ 0xff
 8000b58:	f7ff fe64 	bl	8000824 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff fe61 	bl	8000824 <USART_SendByte>
 8000b62:	200d      	movs	r0, #13
 8000b64:	f7ff fe5e 	bl	8000824 <USART_SendByte>
   return receive_finger_search(16);
 8000b68:	2010      	movs	r0, #16
 8000b6a:	f7ff fea9 	bl	80008c0 <receive_finger_search>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b78:	20ef      	movs	r0, #239	@ 0xef
 8000b7a:	f7ff fe53 	bl	8000824 <USART_SendByte>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe50 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b84:	20ff      	movs	r0, #255	@ 0xff
 8000b86:	f7ff fe4d 	bl	8000824 <USART_SendByte>
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f7ff fe4a 	bl	8000824 <USART_SendByte>
 8000b90:	20ff      	movs	r0, #255	@ 0xff
 8000b92:	f7ff fe47 	bl	8000824 <USART_SendByte>
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	f7ff fe44 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fe41 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fe3e 	bl	8000824 <USART_SendByte>
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff fe3b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x0D);
 8000bae:	200d      	movs	r0, #13
 8000bb0:	f7ff fe38 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fe35 	bl	8000824 <USART_SendByte>
 8000bba:	2011      	movs	r0, #17
 8000bbc:	f7ff fe32 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f7ff fe41 	bl	8000848 <receive_finger>
 8000bc6:	4603      	mov	r3, r0

}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3315      	adds	r3, #21
 8000bda:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bdc:	20ef      	movs	r0, #239	@ 0xef
 8000bde:	f7ff fe21 	bl	8000824 <USART_SendByte>
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fe1e 	bl	8000824 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000be8:	20ff      	movs	r0, #255	@ 0xff
 8000bea:	f7ff fe1b 	bl	8000824 <USART_SendByte>
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f7ff fe18 	bl	8000824 <USART_SendByte>
 8000bf4:	20ff      	movs	r0, #255	@ 0xff
 8000bf6:	f7ff fe15 	bl	8000824 <USART_SendByte>
 8000bfa:	20ff      	movs	r0, #255	@ 0xff
 8000bfc:	f7ff fe12 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x01);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fe0f 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fe0c 	bl	8000824 <USART_SendByte>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	f7ff fe09 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c12:	200c      	movs	r0, #12
 8000c14:	f7ff fe06 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe03 	bl	8000824 <USART_SendByte>
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fdff 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fdfc 	bl	8000824 <USART_SendByte>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fdf9 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fdf6 	bl	8000824 <USART_SendByte>
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fdf2 	bl	8000824 <USART_SendByte>
    return receive_finger(12);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f7ff fe01 	bl	8000848 <receive_finger>
 8000c46:	4603      	mov	r3, r0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c58:	f003 fb18 	bl	800428c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fbf0 	bl	800445c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c7c:	f003 fb2c 	bl	80042d8 <HAL_FLASH_Lock>
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c94:	f003 fafa 	bl	800428c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	462b      	mov	r3, r5
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f003 fa80 	bl	80041ac <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000cac:	f003 fb14 	bl	80042d8 <HAL_FLASH_Lock>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}

08000cb8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cc6:	f003 fae1 	bl	800428c <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	82fb      	strh	r3, [r7, #22]
 8000cce:	e00c      	b.n	8000cea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cd0:	8afa      	ldrh	r2, [r7, #22]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	18d0      	adds	r0, r2, r3
 8000cd6:	8afb      	ldrh	r3, [r7, #22]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4413      	add	r3, r2
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff ffd2 	bl	8000c88 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	82fb      	strh	r3, [r7, #22]
 8000cea:	8afa      	ldrh	r2, [r7, #22]
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3ee      	bcc.n	8000cd0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000cf2:	f003 faf1 	bl	80042d8 <HAL_FLASH_Lock>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <Flash_Read_Array>:
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
	return *(__IO uint64_t *)(address);
}
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d2e:	b480      	push	{r7}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	82fb      	strh	r3, [r7, #22]
 8000d40:	e00c      	b.n	8000d5c <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d42:	8afa      	ldrh	r2, [r7, #22]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	8afb      	ldrh	r3, [r7, #22]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	4413      	add	r3, r2
 8000d50:	780a      	ldrb	r2, [r1, #0]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d56:	8afb      	ldrh	r3, [r7, #22]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	82fb      	strh	r3, [r7, #22]
 8000d5c:	8afa      	ldrh	r2, [r7, #22]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3ee      	bcc.n	8000d42 <Flash_Read_Array+0x14>
	}
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8a:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d8c:	e002      	b.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000020 	.word	0x20000020

08000da4 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000daa:	f7ff fda9 	bl	8000900 <collect_finger>
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <check_fingerprint_status+0x24>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000411 	.word	0x20000411

08000dcc <process_fingerprint>:
void process_fingerprint()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <process_fingerprint+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <process_fingerprint+0x1c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dde:	f002 f8b1 	bl	8002f44 <read_finger>
    }
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000411 	.word	0x20000411

08000dec <InputID>:

uint8_t InputID(const char *prompt, uint8_t min, uint8_t max) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	70bb      	strb	r3, [r7, #2]
    uint16_t id = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	83fb      	strh	r3, [r7, #30]
    char id_str[4] = {0};
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    uint8_t index = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char display_prompt[16];
    snprintf(display_prompt, sizeof(display_prompt), "Enter ID (%d-%d):", min, max);
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
 8000e0c:	78bb      	ldrb	r3, [r7, #2]
 8000e0e:	f107 0008 	add.w	r0, r7, #8
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	4a4e      	ldr	r2, [pc, #312]	@ (8000f50 <InputID+0x164>)
 8000e18:	2110      	movs	r1, #16
 8000e1a:	f00b ff39 	bl	800cc90 <sniprintf>
    CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4a4c      	ldr	r2, [pc, #304]	@ (8000f54 <InputID+0x168>)
 8000e24:	4619      	mov	r1, r3
 8000e26:	484c      	ldr	r0, [pc, #304]	@ (8000f58 <InputID+0x16c>)
 8000e28:	f7ff faf0 	bl	800040c <CLCD_I2C_Display>
    uint32_t start_time = HAL_GetTick();
 8000e2c:	f003 f882 	bl	8003f34 <HAL_GetTick>
 8000e30:	6238      	str	r0, [r7, #32]
    while (1) {
        if (HAL_GetTick() - start_time > 15000) { // 15 seconds timeout
 8000e32:	f003 f87f 	bl	8003f34 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d910      	bls.n	8000e66 <InputID+0x7a>
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8000e44:	4a45      	ldr	r2, [pc, #276]	@ (8000f5c <InputID+0x170>)
 8000e46:	4946      	ldr	r1, [pc, #280]	@ (8000f60 <InputID+0x174>)
 8000e48:	4843      	ldr	r0, [pc, #268]	@ (8000f58 <InputID+0x16c>)
 8000e4a:	f7ff fadf 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f002 fb6c 	bl	800352c <buzzer>
            HAL_Delay(2000);
 8000e54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e58:	f003 f876 	bl	8003f48 <HAL_Delay>
            exitmenu = Delaymenu;
 8000e5c:	4b41      	ldr	r3, [pc, #260]	@ (8000f64 <InputID+0x178>)
 8000e5e:	2214      	movs	r2, #20
 8000e60:	701a      	strb	r2, [r3, #0]
            return 0; // Return 0 to indicate timeout
 8000e62:	2300      	movs	r3, #0
 8000e64:	e070      	b.n	8000f48 <InputID+0x15c>
        }
        char key = KeyPad_WaitForKeyGetChar(10);
 8000e66:	200a      	movs	r0, #10
 8000e68:	f7ff fc2a 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	777b      	strb	r3, [r7, #29]
        if (key >= '0' && key <= '9' && index < 3) {
 8000e70:	7f7b      	ldrb	r3, [r7, #29]
 8000e72:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e74:	d919      	bls.n	8000eaa <InputID+0xbe>
 8000e76:	7f7b      	ldrb	r3, [r7, #29]
 8000e78:	2b39      	cmp	r3, #57	@ 0x39
 8000e7a:	d816      	bhi.n	8000eaa <InputID+0xbe>
 8000e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d812      	bhi.n	8000eaa <InputID+0xbe>
            buzzer(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f002 fb51 	bl	800352c <buzzer>
            id_str[index++] = key;
 8000e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8000e94:	3328      	adds	r3, #40	@ 0x28
 8000e96:	443b      	add	r3, r7
 8000e98:	7f7a      	ldrb	r2, [r7, #29]
 8000e9a:	f803 2c10 	strb.w	r2, [r3, #-16]
            CLCD_I2C_WriteChar(&LCD1, key);
 8000e9e:	7f7b      	ldrb	r3, [r7, #29]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482d      	ldr	r0, [pc, #180]	@ (8000f58 <InputID+0x16c>)
 8000ea4:	f7ff fa7b 	bl	800039e <CLCD_I2C_WriteChar>
 8000ea8:	e03c      	b.n	8000f24 <InputID+0x138>
        } else if (key == '#' && index > 0) {
 8000eaa:	7f7b      	ldrb	r3, [r7, #29]
 8000eac:	2b23      	cmp	r3, #35	@ 0x23
 8000eae:	d1c0      	bne.n	8000e32 <InputID+0x46>
 8000eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0bc      	beq.n	8000e32 <InputID+0x46>
            buzzer(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f002 fb37 	bl	800352c <buzzer>
            id = atoi(id_str);
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fe5c 	bl	800cb80 <atoi>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	83fb      	strh	r3, [r7, #30]
            if (id >= min && id <= max) {
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	8bfa      	ldrh	r2, [r7, #30]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d304      	bcc.n	8000ee0 <InputID+0xf4>
 8000ed6:	78bb      	ldrb	r3, [r7, #2]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	8bfa      	ldrh	r2, [r7, #30]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d922      	bls.n	8000f26 <InputID+0x13a>
                break;
            } else {
                CLCD_I2C_Display(&LCD1, "Invalid ID", display_prompt);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4920      	ldr	r1, [pc, #128]	@ (8000f68 <InputID+0x17c>)
 8000ee8:	481b      	ldr	r0, [pc, #108]	@ (8000f58 <InputID+0x16c>)
 8000eea:	f7ff fa8f 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f002 fb1c 	bl	800352c <buzzer>
                HAL_Delay(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ef8:	f003 f826 	bl	8003f48 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <InputID+0x168>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <InputID+0x16c>)
 8000f06:	f7ff fa81 	bl	800040c <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2204      	movs	r2, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b ff10 	bl	800cd38 <memset>
                index = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                start_time = HAL_GetTick(); // Reset the timer
 8000f1e:	f003 f809 	bl	8003f34 <HAL_GetTick>
 8000f22:	6238      	str	r0, [r7, #32]
    while (1) {
 8000f24:	e785      	b.n	8000e32 <InputID+0x46>
            }
        }
    }
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2104      	movs	r1, #4
 8000f2a:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <InputID+0x16c>)
 8000f2c:	f7ff f9f4 	bl	8000318 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <InputID+0x16c>)
 8000f38:	f7ff fa41 	bl	80003be <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f40:	f003 f802 	bl	8003f48 <HAL_Delay>
    return id;
 8000f44:	8bfb      	ldrh	r3, [r7, #30]
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800d670 	.word	0x0800d670
 8000f54:	0800d684 	.word	0x0800d684
 8000f58:	200003dc 	.word	0x200003dc
 8000f5c:	0800d68c 	.word	0x0800d68c
 8000f60:	0800d698 	.word	0x0800d698
 8000f64:	20000020 	.word	0x20000020
 8000f68:	0800d6a0 	.word	0x0800d6a0

08000f6c <InputID_ADMIN>:

uint8_t InputID_ADMIN() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-27):", 1, 27);
 8000f70:	221b      	movs	r2, #27
 8000f72:	2101      	movs	r1, #1
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <InputID_ADMIN+0x14>)
 8000f76:	f7ff ff39 	bl	8000dec <InputID>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800d6ac 	.word	0x0800d6ac

08000f84 <InputID_USER>:

uint8_t InputID_USER() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-100):", 1, 100);
 8000f88:	2264      	movs	r2, #100	@ 0x64
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <InputID_USER+0x14>)
 8000f8e:	f7ff ff2d 	bl	8000dec <InputID>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800d6bc 	.word	0x0800d6bc

08000f9c <InputID_FINGER>:

uint8_t InputID_FINGER() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-127):", 1, 127);
 8000fa0:	227f      	movs	r2, #127	@ 0x7f
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <InputID_FINGER+0x14>)
 8000fa6:	f7ff ff21 	bl	8000dec <InputID>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800d6d0 	.word	0x0800d6d0

08000fb4 <InputID_FACE>:

uint8_t InputID_FACE() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-127):", 1, 127);
 8000fb8:	227f      	movs	r2, #127	@ 0x7f
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <InputID_FACE+0x14>)
 8000fbe:	f7ff ff15 	bl	8000dec <InputID>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0800d6d0 	.word	0x0800d6d0

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b090      	sub	sp, #64	@ 0x40
 8000fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f002 ff57 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f9a7 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fadd 	bl	8001598 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fde:	f000 fa2d 	bl	800143c <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fe2:	f000 f9fd 	bl	80013e0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 faad 	bl	8001544 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fea:	f000 fa5d 	bl	80014a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000fee:	f00b f91d 	bl	800c22c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000ff2:	f002 faed 	bl	80035d0 <TM_MFRC522_Init>
  KeyPad_Init();
 8000ff6:	f7ff fa29 	bl	800044c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2310      	movs	r3, #16
 8001000:	224e      	movs	r2, #78	@ 0x4e
 8001002:	49b7      	ldr	r1, [pc, #732]	@ (80012e0 <main+0x314>)
 8001004:	48b7      	ldr	r0, [pc, #732]	@ (80012e4 <main+0x318>)
 8001006:	f7ff f917 	bl	8000238 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001010:	48b5      	ldr	r0, [pc, #724]	@ (80012e8 <main+0x31c>)
 8001012:	f003 fc66 	bl	80048e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101c:	48b2      	ldr	r0, [pc, #712]	@ (80012e8 <main+0x31c>)
 800101e:	f003 fc60 	bl	80048e2 <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2100      	movs	r1, #0
 800102c:	460a      	mov	r2, r1
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	460a      	mov	r2, r1
 8001032:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	2206      	movs	r2, #6
 800103a:	4619      	mov	r1, r3
 800103c:	48ab      	ldr	r0, [pc, #684]	@ (80012ec <main+0x320>)
 800103e:	f7ff fe76 	bl	8000d2e <Flash_Read_Array>
  stored_password[6] = '\0';
 8001042:	2300      	movs	r3, #0
 8001044:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
 800104e:	e00c      	b.n	800106a <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2bff      	cmp	r3, #255	@ 0xff
 800105c:	d002      	beq.n	8001064 <main+0x98>
          is_empty = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8001062:	e005      	b.n	8001070 <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8001064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001066:	3301      	adds	r3, #1
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
 800106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106c:	2b05      	cmp	r3, #5
 800106e:	ddef      	ble.n	8001050 <main+0x84>
      }
  }
  if (is_empty) {
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <main+0xae>
      set_default_password();
 8001076:	f002 f9c9 	bl	800340c <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 800107a:	489d      	ldr	r0, [pc, #628]	@ (80012f0 <main+0x324>)
 800107c:	f006 fc30 	bl	80078e0 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8001080:	f000 ff28 	bl	8001ed4 <checkcountUID>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <main+0xc2>
  {
      startadd();
 800108a:	f001 fbb1 	bl	80027f0 <startadd>
  }
  int incorrect_attempts = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8001092:	4894      	ldr	r0, [pc, #592]	@ (80012e4 <main+0x318>)
 8001094:	f7ff f9aa 	bl	80003ec <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	4891      	ldr	r0, [pc, #580]	@ (80012e4 <main+0x318>)
 800109e:	f7ff f93b 	bl	8000318 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 80010a2:	4994      	ldr	r1, [pc, #592]	@ (80012f4 <main+0x328>)
 80010a4:	488f      	ldr	r0, [pc, #572]	@ (80012e4 <main+0x318>)
 80010a6:	f7ff f98a 	bl	80003be <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đ���n khi có phím nhấn.
 80010aa:	200a      	movs	r0, #10
 80010ac:	f7ff fb08 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 80010b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010ba:	2b23      	cmp	r3, #35	@ 0x23
 80010bc:	d166      	bne.n	800118c <main+0x1c0>
    {
    	buzzer(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f002 fa34 	bl	800352c <buzzer>
        char entered_password[7] = {0};
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	460a      	mov	r2, r1
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	460a      	mov	r2, r1
 80010d4:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 80010d6:	4a88      	ldr	r2, [pc, #544]	@ (80012f8 <main+0x32c>)
 80010d8:	4988      	ldr	r1, [pc, #544]	@ (80012fc <main+0x330>)
 80010da:	4882      	ldr	r0, [pc, #520]	@ (80012e4 <main+0x318>)
 80010dc:	f7ff f996 	bl	800040c <CLCD_I2C_Display>
        enter_password(entered_password);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f8fd 	bl	80032e4 <enter_password>
        if (check_password(entered_password)) {
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f964 	bl	80033bc <check_password>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 80010fa:	4a7f      	ldr	r2, [pc, #508]	@ (80012f8 <main+0x32c>)
 80010fc:	4980      	ldr	r1, [pc, #512]	@ (8001300 <main+0x334>)
 80010fe:	4879      	ldr	r0, [pc, #484]	@ (80012e4 <main+0x318>)
 8001100:	f7ff f984 	bl	800040c <CLCD_I2C_Display>
            opendoor();
 8001104:	f002 f9c2 	bl	800348c <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800110c:	e036      	b.n	800117c <main+0x1b0>
        } else {
            incorrect_attempts++;
 800110e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001110:	3301      	adds	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8001114:	4a78      	ldr	r2, [pc, #480]	@ (80012f8 <main+0x32c>)
 8001116:	497b      	ldr	r1, [pc, #492]	@ (8001304 <main+0x338>)
 8001118:	4872      	ldr	r0, [pc, #456]	@ (80012e4 <main+0x318>)
 800111a:	f7ff f977 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 800111e:	2005      	movs	r0, #5
 8001120:	f002 fa04 	bl	800352c <buzzer>
            int delay_time = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8001128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <main+0x168>
                delay_time = 5;
 800112e:	2305      	movs	r3, #5
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001132:	e00a      	b.n	800114a <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	2b02      	cmp	r3, #2
 8001138:	d102      	bne.n	8001140 <main+0x174>
                delay_time = 10;
 800113a:	230a      	movs	r3, #10
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800113e:	e004      	b.n	800114a <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8001140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001142:	2b02      	cmp	r3, #2
 8001144:	dd01      	ble.n	800114a <main+0x17e>
                delay_time = 20;
 8001146:	2314      	movs	r3, #20
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 800114a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
 800114e:	e012      	b.n	8001176 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8001150:	4638      	mov	r0, r7
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	4a6c      	ldr	r2, [pc, #432]	@ (8001308 <main+0x33c>)
 8001156:	2110      	movs	r1, #16
 8001158:	f00b fd9a 	bl	800cc90 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 800115c:	463b      	mov	r3, r7
 800115e:	4a6b      	ldr	r2, [pc, #428]	@ (800130c <main+0x340>)
 8001160:	4619      	mov	r1, r3
 8001162:	4860      	ldr	r0, [pc, #384]	@ (80012e4 <main+0x318>)
 8001164:	f7ff f952 	bl	800040c <CLCD_I2C_Display>
                HAL_Delay(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116c:	f002 feec 	bl	8003f48 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	3b01      	subs	r3, #1
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	dce9      	bgt.n	8001150 <main+0x184>
            }
        }
        HAL_Delay(2000);
 800117c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001180:	f002 fee2 	bl	8003f48 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8001184:	4857      	ldr	r0, [pc, #348]	@ (80012e4 <main+0x318>)
 8001186:	f7ff f931 	bl	80003ec <CLCD_I2C_Clear>
 800118a:	e0a3      	b.n	80012d4 <main+0x308>
    }
    else if (selected_key != 0)
 800118c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001190:	2b00      	cmp	r3, #0
 8001192:	d067      	beq.n	8001264 <main+0x298>
    {
    	buzzer(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f002 f9c9 	bl	800352c <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 80011a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <main+0x344>)
 80011a2:	220f      	movs	r2, #15
 80011a4:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 80011a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011aa:	3b41      	subs	r3, #65	@ 0x41
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	f200 8090 	bhi.w	80012d2 <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2100      	movs	r1, #0
 80011b6:	484b      	ldr	r0, [pc, #300]	@ (80012e4 <main+0x318>)
 80011b8:	f7ff f8ae 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 80011bc:	4955      	ldr	r1, [pc, #340]	@ (8001314 <main+0x348>)
 80011be:	4849      	ldr	r0, [pc, #292]	@ (80012e4 <main+0x318>)
 80011c0:	f7ff f8fd 	bl	80003be <CLCD_I2C_WriteString>

            while (exitmenu)
 80011c4:	e011      	b.n	80011ea <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 80011c6:	4854      	ldr	r0, [pc, #336]	@ (8001318 <main+0x34c>)
 80011c8:	f002 fa26 	bl	8003618 <TM_MFRC522_Check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10b      	bne.n	80011ea <main+0x21e>
                {
                    key = CheckListUID(CardID);
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <main+0x34c>)
 80011d4:	f000 fe4e 	bl	8001e74 <CheckListUID>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 7;
 80011de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e2:	09db      	lsrs	r3, r3, #7
 80011e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 80011e8:	e003      	b.n	80011f2 <main+0x226>
            while (exitmenu)
 80011ea:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <main+0x344>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1e9      	bne.n	80011c6 <main+0x1fa>
                }
            }

            switch (key)
 80011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d11b      	bne.n	8001232 <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 80011fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011fe:	2b41      	cmp	r3, #65	@ 0x41
 8001200:	d102      	bne.n	8001208 <main+0x23c>
                    RFID();
 8001202:	f000 fa9b 	bl	800173c <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8001206:	e02b      	b.n	8001260 <main+0x294>
                else if (selected_key == 'B')
 8001208:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800120c:	2b42      	cmp	r3, #66	@ 0x42
 800120e:	d102      	bne.n	8001216 <main+0x24a>
                    FACEID();
 8001210:	f000 ffd4 	bl	80021bc <FACEID>
                break;
 8001214:	e024      	b.n	8001260 <main+0x294>
                else if (selected_key == 'C')
 8001216:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800121a:	2b43      	cmp	r3, #67	@ 0x43
 800121c:	d102      	bne.n	8001224 <main+0x258>
                    FINGER();
 800121e:	f001 f93f 	bl	80024a0 <FINGER>
                break;
 8001222:	e01d      	b.n	8001260 <main+0x294>
                else if (selected_key == 'D')
 8001224:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001228:	2b44      	cmp	r3, #68	@ 0x44
 800122a:	d119      	bne.n	8001260 <main+0x294>
                    PASSWORD();
 800122c:	f001 fa2a 	bl	8002684 <PASSWORD>
                break;
 8001230:	e016      	b.n	8001260 <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 8001232:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <main+0x318>)
 8001234:	f7ff f8da 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <main+0x318>)
 800123e:	f7ff f86b 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8001242:	4936      	ldr	r1, [pc, #216]	@ (800131c <main+0x350>)
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <main+0x318>)
 8001246:	f7ff f8ba 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(5);
 800124a:	2005      	movs	r0, #5
 800124c:	f002 f96e 	bl	800352c <buzzer>
                HAL_Delay(2000);
 8001250:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001254:	f002 fe78 	bl	8003f48 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001258:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <main+0x318>)
 800125a:	f7ff f8c7 	bl	80003ec <CLCD_I2C_Clear>
                break;
 800125e:	e000      	b.n	8001262 <main+0x296>
                break;
 8001260:	bf00      	nop
            }
            break;
 8001262:	e037      	b.n	80012d4 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001264:	482c      	ldr	r0, [pc, #176]	@ (8001318 <main+0x34c>)
 8001266:	f002 f9d7 	bl	8003618 <TM_MFRC522_Check>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d128      	bne.n	80012c2 <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 8001270:	4829      	ldr	r0, [pc, #164]	@ (8001318 <main+0x34c>)
 8001272:	f000 fdff 	bl	8001e74 <CheckListUID>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00e      	beq.n	800129a <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 800127c:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <main+0x318>)
 800127e:	f7ff f8b5 	bl	80003ec <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <main+0x318>)
 8001288:	f7ff f846 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 800128c:	491c      	ldr	r1, [pc, #112]	@ (8001300 <main+0x334>)
 800128e:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <main+0x318>)
 8001290:	f7ff f895 	bl	80003be <CLCD_I2C_WriteString>
            opendoor();
 8001294:	f002 f8fa 	bl	800348c <opendoor>
 8001298:	e01c      	b.n	80012d4 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <main+0x318>)
 800129c:	f7ff f8a6 	bl	80003ec <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480f      	ldr	r0, [pc, #60]	@ (80012e4 <main+0x318>)
 80012a6:	f7ff f837 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 80012aa:	491d      	ldr	r1, [pc, #116]	@ (8001320 <main+0x354>)
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <main+0x318>)
 80012ae:	f7ff f886 	bl	80003be <CLCD_I2C_WriteString>
            buzzer(5);
 80012b2:	2005      	movs	r0, #5
 80012b4:	f002 f93a 	bl	800352c <buzzer>
            HAL_Delay(2000);
 80012b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012bc:	f002 fe44 	bl	8003f48 <HAL_Delay>
 80012c0:	e008      	b.n	80012d4 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <main+0x358>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <main+0x308>
    {
        startface();
 80012cc:	f001 ffd2 	bl	8003274 <startface>
 80012d0:	e000      	b.n	80012d4 <main+0x308>
            break;
 80012d2:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 80012d4:	f7ff fd66 	bl	8000da4 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 80012d8:	f7ff fd78 	bl	8000dcc <process_fingerprint>
  {
 80012dc:	e6d9      	b.n	8001092 <main+0xc6>
 80012de:	bf00      	nop
 80012e0:	2000021c 	.word	0x2000021c
 80012e4:	200003dc 	.word	0x200003dc
 80012e8:	40010800 	.word	0x40010800
 80012ec:	0800f400 	.word	0x0800f400
 80012f0:	200002c8 	.word	0x200002c8
 80012f4:	0800d6e4 	.word	0x0800d6e4
 80012f8:	0800d6f4 	.word	0x0800d6f4
 80012fc:	0800d6f8 	.word	0x0800d6f8
 8001300:	0800d708 	.word	0x0800d708
 8001304:	0800d714 	.word	0x0800d714
 8001308:	0800d724 	.word	0x0800d724
 800130c:	0800d734 	.word	0x0800d734
 8001310:	20000020 	.word	0x20000020
 8001314:	0800d744 	.word	0x0800d744
 8001318:	200003e8 	.word	0x200003e8
 800131c:	0800d754 	.word	0x0800d754
 8001320:	0800d764 	.word	0x0800d764
 8001324:	20000350 	.word	0x20000350

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	2228      	movs	r2, #40	@ 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00b fcfe 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001372:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001374:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800137e:	4618      	mov	r0, r3
 8001380:	f005 fac2 	bl	8006908 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800138a:	f002 f8f3 	bl	8003574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fd2e 	bl	8006e0c <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013b6:	f002 f8dd 	bl	8003574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013ba:	2310      	movs	r3, #16
 80013bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 feb8 	bl	800713c <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013d2:	f002 f8cf 	bl	8003574 <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	@ 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C2_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C2_Init+0x50>)
 800141e:	f003 fa9b 	bl	8004958 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f002 f8a4 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000021c 	.word	0x2000021c
 8001434:	40005800 	.word	0x40005800
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <MX_SPI1_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001470:	2230      	movs	r2, #48	@ 0x30
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800148e:	f005 ff0b 	bl	80072a8 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001498:	f002 f86c 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000270 	.word	0x20000270
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014ce:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014dc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014f0:	f006 f9a6 	bl	8007840 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fa:	f002 f83b 	bl	8003574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_TIM2_Init+0x98>)
 800150c:	f006 fb42 	bl	8007b94 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001516:	f002 f82d 	bl	8003574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <MX_TIM2_Init+0x98>)
 8001528:	f006 fd14 	bl	8007f54 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f002 f81f 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002c8 	.word	0x200002c8

08001544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_USART1_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001550:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800157c:	f006 fd5a 	bl	8008034 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f001 fff5 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000310 	.word	0x20000310
 8001594:	40013800 	.word	0x40013800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b52      	ldr	r3, [pc, #328]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <MX_GPIO_Init+0x190>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001612:	4846      	ldr	r0, [pc, #280]	@ (800172c <MX_GPIO_Init+0x194>)
 8001614:	f003 f965 	bl	80048e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001618:	2200      	movs	r2, #0
 800161a:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800161e:	4844      	ldr	r0, [pc, #272]	@ (8001730 <MX_GPIO_Init+0x198>)
 8001620:	f003 f95f 	bl	80048e2 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	4840      	ldr	r0, [pc, #256]	@ (800172c <MX_GPIO_Init+0x194>)
 800162c:	f003 f959 	bl	80048e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8001630:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	483b      	ldr	r0, [pc, #236]	@ (8001734 <MX_GPIO_Init+0x19c>)
 8001646:	f002 ffb1 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800164a:	2303      	movs	r3, #3
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	4833      	ldr	r0, [pc, #204]	@ (800172c <MX_GPIO_Init+0x194>)
 800165e:	f002 ffa5 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001662:	2310      	movs	r3, #16
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2302      	movs	r3, #2
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	482c      	ldr	r0, [pc, #176]	@ (800172c <MX_GPIO_Init+0x194>)
 800167a:	f002 ff97 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800167e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4826      	ldr	r0, [pc, #152]	@ (8001730 <MX_GPIO_Init+0x198>)
 8001698:	f002 ff88 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016a2:	2311      	movs	r3, #17
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <MX_GPIO_Init+0x194>)
 80016b6:	f002 ff79 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80016ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4816      	ldr	r0, [pc, #88]	@ (800172c <MX_GPIO_Init+0x194>)
 80016d4:	f002 ff6a 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_GPIO_Init+0x198>)
 80016f0:	f002 ff5c 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <MX_GPIO_Init+0x1a0>)
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4809      	ldr	r0, [pc, #36]	@ (8001730 <MX_GPIO_Init+0x198>)
 800170a:	f002 ff4f 	bl	80045ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	2017      	movs	r0, #23
 8001714:	f002 fd13 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001718:	2017      	movs	r0, #23
 800171a:	f002 fd2c 	bl	8004176 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	10110000 	.word	0x10110000

0800173c <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
	buzzer(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 fef2 	bl	800352c <buzzer>
	exitmenu = Delaymenu;
 8001748:	4ba3      	ldr	r3, [pc, #652]	@ (80019d8 <RFID+0x29c>)
 800174a:	2214      	movs	r2, #20
 800174c:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 8001752:	4aa2      	ldr	r2, [pc, #648]	@ (80019dc <RFID+0x2a0>)
 8001754:	49a2      	ldr	r1, [pc, #648]	@ (80019e0 <RFID+0x2a4>)
 8001756:	48a3      	ldr	r0, [pc, #652]	@ (80019e4 <RFID+0x2a8>)
 8001758:	f7fe fe58 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 800175c:	e35e      	b.n	8001e1c <RFID+0x6e0>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f7fe ffae 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001764:	4603      	mov	r3, r0
 8001766:	737b      	strb	r3, [r7, #13]
		if (key_pressed =='*')
 8001768:	7b7b      	ldrb	r3, [r7, #13]
 800176a:	2b2a      	cmp	r3, #42	@ 0x2a
 800176c:	d131      	bne.n	80017d2 <RFID+0x96>
		{
			buzzer(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f001 fedc 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 8001774:	4b98      	ldr	r3, [pc, #608]	@ (80019d8 <RFID+0x29c>)
 8001776:	2214      	movs	r2, #20
 8001778:	701a      	strb	r2, [r3, #0]
			status++;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	3301      	adds	r3, #1
 800177e:	75fb      	strb	r3, [r7, #23]
			status = (status > 2) ? (-1) : status;
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d801      	bhi.n	800178a <RFID+0x4e>
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	e000      	b.n	800178c <RFID+0x50>
 800178a:	23ff      	movs	r3, #255	@ 0xff
 800178c:	75fb      	strb	r3, [r7, #23]
			switch (status)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d012      	beq.n	80017ba <RFID+0x7e>
 8001794:	2b02      	cmp	r3, #2
 8001796:	dc16      	bgt.n	80017c6 <RFID+0x8a>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <RFID+0x66>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d006      	beq.n	80017ae <RFID+0x72>
 80017a0:	e011      	b.n	80017c6 <RFID+0x8a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80017a2:	4a91      	ldr	r2, [pc, #580]	@ (80019e8 <RFID+0x2ac>)
 80017a4:	498e      	ldr	r1, [pc, #568]	@ (80019e0 <RFID+0x2a4>)
 80017a6:	488f      	ldr	r0, [pc, #572]	@ (80019e4 <RFID+0x2a8>)
 80017a8:	f7fe fe30 	bl	800040c <CLCD_I2C_Display>
				break;
 80017ac:	e011      	b.n	80017d2 <RFID+0x96>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80017ae:	4a8f      	ldr	r2, [pc, #572]	@ (80019ec <RFID+0x2b0>)
 80017b0:	498b      	ldr	r1, [pc, #556]	@ (80019e0 <RFID+0x2a4>)
 80017b2:	488c      	ldr	r0, [pc, #560]	@ (80019e4 <RFID+0x2a8>)
 80017b4:	f7fe fe2a 	bl	800040c <CLCD_I2C_Display>
				break;
 80017b8:	e00b      	b.n	80017d2 <RFID+0x96>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80017ba:	4a8d      	ldr	r2, [pc, #564]	@ (80019f0 <RFID+0x2b4>)
 80017bc:	4988      	ldr	r1, [pc, #544]	@ (80019e0 <RFID+0x2a4>)
 80017be:	4889      	ldr	r0, [pc, #548]	@ (80019e4 <RFID+0x2a8>)
 80017c0:	f7fe fe24 	bl	800040c <CLCD_I2C_Display>
				break;
 80017c4:	e005      	b.n	80017d2 <RFID+0x96>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80017c6:	4a8b      	ldr	r2, [pc, #556]	@ (80019f4 <RFID+0x2b8>)
 80017c8:	4985      	ldr	r1, [pc, #532]	@ (80019e0 <RFID+0x2a4>)
 80017ca:	4886      	ldr	r0, [pc, #536]	@ (80019e4 <RFID+0x2a8>)
 80017cc:	f7fe fe1e 	bl	800040c <CLCD_I2C_Display>
				break;
 80017d0:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 80017d2:	7b7b      	ldrb	r3, [r7, #13]
 80017d4:	2b23      	cmp	r3, #35	@ 0x23
 80017d6:	f040 8321 	bne.w	8001e1c <RFID+0x6e0>
		{
			buzzer(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f001 fea6 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 80017e0:	4b7d      	ldr	r3, [pc, #500]	@ (80019d8 <RFID+0x29c>)
 80017e2:	2214      	movs	r2, #20
 80017e4:	701a      	strb	r2, [r3, #0]
			switch (status)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f000 830b 	beq.w	8001e04 <RFID+0x6c8>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f300 8310 	bgt.w	8001e14 <RFID+0x6d8>
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <RFID+0xc4>
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	f000 80ac 	beq.w	8001956 <RFID+0x21a>
 80017fe:	e309      	b.n	8001e14 <RFID+0x6d8>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001800:	4a7d      	ldr	r2, [pc, #500]	@ (80019f8 <RFID+0x2bc>)
 8001802:	497e      	ldr	r1, [pc, #504]	@ (80019fc <RFID+0x2c0>)
 8001804:	4877      	ldr	r0, [pc, #476]	@ (80019e4 <RFID+0x2a8>)
 8001806:	f7fe fe01 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusadd = -1;
 800180a:	23ff      	movs	r3, #255	@ 0xff
 800180c:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001812:	e096      	b.n	8001942 <RFID+0x206>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f7fe ff53 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 800181a:	4603      	mov	r3, r0
 800181c:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 800181e:	4b6e      	ldr	r3, [pc, #440]	@ (80019d8 <RFID+0x29c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <RFID+0xfa>
					{
						CLCD_I2C_Clear(&LCD1);
 8001826:	486f      	ldr	r0, [pc, #444]	@ (80019e4 <RFID+0x2a8>)
 8001828:	f7fe fde0 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001830:	f002 fb8a 	bl	8003f48 <HAL_Delay>
						return;
 8001834:	e2fa      	b.n	8001e2c <RFID+0x6f0>
					}
					if (key_pressed =='*')
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	2b2a      	cmp	r3, #42	@ 0x2a
 800183a:	d127      	bne.n	800188c <RFID+0x150>
					{
						buzzer(1);
 800183c:	2001      	movs	r0, #1
 800183e:	f001 fe75 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 8001842:	4b65      	ldr	r3, [pc, #404]	@ (80019d8 <RFID+0x29c>)
 8001844:	2214      	movs	r2, #20
 8001846:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001848:	7dbb      	ldrb	r3, [r7, #22]
 800184a:	3301      	adds	r3, #1
 800184c:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 1) ? (-1) : statusadd;
 800184e:	7dbb      	ldrb	r3, [r7, #22]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d801      	bhi.n	8001858 <RFID+0x11c>
 8001854:	7dbb      	ldrb	r3, [r7, #22]
 8001856:	e000      	b.n	800185a <RFID+0x11e>
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <RFID+0x12c>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d006      	beq.n	8001874 <RFID+0x138>
 8001866:	e00b      	b.n	8001880 <RFID+0x144>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <RFID+0x2c4>)
 800186a:	4966      	ldr	r1, [pc, #408]	@ (8001a04 <RFID+0x2c8>)
 800186c:	485d      	ldr	r0, [pc, #372]	@ (80019e4 <RFID+0x2a8>)
 800186e:	f7fe fdcd 	bl	800040c <CLCD_I2C_Display>
							break;
 8001872:	e00b      	b.n	800188c <RFID+0x150>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001874:	4a64      	ldr	r2, [pc, #400]	@ (8001a08 <RFID+0x2cc>)
 8001876:	4963      	ldr	r1, [pc, #396]	@ (8001a04 <RFID+0x2c8>)
 8001878:	485a      	ldr	r0, [pc, #360]	@ (80019e4 <RFID+0x2a8>)
 800187a:	f7fe fdc7 	bl	800040c <CLCD_I2C_Display>
							break;
 800187e:	e005      	b.n	800188c <RFID+0x150>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 8001880:	4a5c      	ldr	r2, [pc, #368]	@ (80019f4 <RFID+0x2b8>)
 8001882:	4960      	ldr	r1, [pc, #384]	@ (8001a04 <RFID+0x2c8>)
 8001884:	4857      	ldr	r0, [pc, #348]	@ (80019e4 <RFID+0x2a8>)
 8001886:	f7fe fdc1 	bl	800040c <CLCD_I2C_Display>
							break;
 800188a:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	2b23      	cmp	r3, #35	@ 0x23
 8001890:	d157      	bne.n	8001942 <RFID+0x206>
					{
						buzzer(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f001 fe4a 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 8001898:	4b4f      	ldr	r3, [pc, #316]	@ (80019d8 <RFID+0x29c>)
 800189a:	2214      	movs	r2, #20
 800189c:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 800189e:	7dbb      	ldrb	r3, [r7, #22]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <RFID+0x16e>
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d025      	beq.n	80018f4 <RFID+0x1b8>
 80018a8:	e048      	b.n	800193c <RFID+0x200>
						{
						case 0:
							uint8_t AdminID = InputID_ADMIN();
 80018aa:	f7ff fb5f 	bl	8000f6c <InputID_ADMIN>
 80018ae:	4603      	mov	r3, r0
 80018b0:	71bb      	strb	r3, [r7, #6]
							uint8_t keyadd_admin = (1 << 7) + AdminID;
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	3b80      	subs	r3, #128	@ 0x80
 80018b6:	717b      	strb	r3, [r7, #5]
							if (CheckKey(keyadd_admin)!=0)
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc50 	bl	8002160 <CheckKey>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <RFID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 80018c6:	4a51      	ldr	r2, [pc, #324]	@ (8001a0c <RFID+0x2d0>)
 80018c8:	4951      	ldr	r1, [pc, #324]	@ (8001a10 <RFID+0x2d4>)
 80018ca:	4846      	ldr	r0, [pc, #280]	@ (80019e4 <RFID+0x2a8>)
 80018cc:	f7fe fd9e 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 fe2b 	bl	800352c <buzzer>
								HAL_Delay(1000);
 80018d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018da:	f002 fb35 	bl	8003f48 <HAL_Delay>
 80018de:	e003      	b.n	80018e8 <RFID+0x1ac>
							}
							else
							{
								adduid(keyadd_admin);
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb28 	bl	8001f38 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018e8:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <RFID+0x2c4>)
 80018ea:	4946      	ldr	r1, [pc, #280]	@ (8001a04 <RFID+0x2c8>)
 80018ec:	483d      	ldr	r0, [pc, #244]	@ (80019e4 <RFID+0x2a8>)
 80018ee:	f7fe fd8d 	bl	800040c <CLCD_I2C_Display>
							break;
 80018f2:	e026      	b.n	8001942 <RFID+0x206>
						case 1:
							uint8_t UserID = InputID_USER();
 80018f4:	f7ff fb46 	bl	8000f84 <InputID_USER>
 80018f8:	4603      	mov	r3, r0
 80018fa:	723b      	strb	r3, [r7, #8]
							uint8_t keyadd_user = (0 << 7) + UserID;
 80018fc:	7a3b      	ldrb	r3, [r7, #8]
 80018fe:	71fb      	strb	r3, [r7, #7]
							if (CheckKey(keyadd_user)!=0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fc2c 	bl	8002160 <CheckKey>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <RFID+0x1ec>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 800190e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a0c <RFID+0x2d0>)
 8001910:	493f      	ldr	r1, [pc, #252]	@ (8001a10 <RFID+0x2d4>)
 8001912:	4834      	ldr	r0, [pc, #208]	@ (80019e4 <RFID+0x2a8>)
 8001914:	f7fe fd7a 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 8001918:	2003      	movs	r0, #3
 800191a:	f001 fe07 	bl	800352c <buzzer>
								HAL_Delay(1000);
 800191e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001922:	f002 fb11 	bl	8003f48 <HAL_Delay>
 8001926:	e003      	b.n	8001930 <RFID+0x1f4>
							}
							else
							{
								adduid(keyadd_user);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb04 	bl	8001f38 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001930:	4a35      	ldr	r2, [pc, #212]	@ (8001a08 <RFID+0x2cc>)
 8001932:	4934      	ldr	r1, [pc, #208]	@ (8001a04 <RFID+0x2c8>)
 8001934:	482b      	ldr	r0, [pc, #172]	@ (80019e4 <RFID+0x2a8>)
 8001936:	f7fe fd69 	bl	800040c <CLCD_I2C_Display>
							break;
 800193a:	e002      	b.n	8001942 <RFID+0x206>
						default:
							back = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	757b      	strb	r3, [r7, #21]
							break;
 8001940:	bf00      	nop
				while (back == 1)
 8001942:	7d7b      	ldrb	r3, [r7, #21]
 8001944:	2b01      	cmp	r3, #1
 8001946:	f43f af65 	beq.w	8001814 <RFID+0xd8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <RFID+0x2ac>)
 800194c:	4924      	ldr	r1, [pc, #144]	@ (80019e0 <RFID+0x2a4>)
 800194e:	4825      	ldr	r0, [pc, #148]	@ (80019e4 <RFID+0x2a8>)
 8001950:	f7fe fd5c 	bl	800040c <CLCD_I2C_Display>
				break;
 8001954:	e262      	b.n	8001e1c <RFID+0x6e0>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001956:	4a28      	ldr	r2, [pc, #160]	@ (80019f8 <RFID+0x2bc>)
 8001958:	4928      	ldr	r1, [pc, #160]	@ (80019fc <RFID+0x2c0>)
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <RFID+0x2a8>)
 800195c:	f7fe fd56 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001960:	23ff      	movs	r3, #255	@ 0xff
 8001962:	753b      	strb	r3, [r7, #20]
				uint8_t backrm = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	74fb      	strb	r3, [r7, #19]
				while (backrm == 1)
 8001968:	e242      	b.n	8001df0 <RFID+0x6b4>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f7fe fea8 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001970:	4603      	mov	r3, r0
 8001972:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <RFID+0x29c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <RFID+0x250>
					{
						CLCD_I2C_Clear(&LCD1);
 800197c:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <RFID+0x2a8>)
 800197e:	f7fe fd35 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001986:	f002 fadf 	bl	8003f48 <HAL_Delay>
						return;
 800198a:	e24f      	b.n	8001e2c <RFID+0x6f0>
					}
					if (key_pressed =='*')
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001990:	d14c      	bne.n	8001a2c <RFID+0x2f0>
					{
						buzzer(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 fdca 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <RFID+0x29c>)
 800199a:	2214      	movs	r2, #20
 800199c:	701a      	strb	r2, [r3, #0]
						statusremove++;
 800199e:	7d3b      	ldrb	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	753b      	strb	r3, [r7, #20]
						statusremove = (statusremove > 1) ? (-1) : statusremove;
 80019a4:	7d3b      	ldrb	r3, [r7, #20]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d801      	bhi.n	80019ae <RFID+0x272>
 80019aa:	7d3b      	ldrb	r3, [r7, #20]
 80019ac:	e000      	b.n	80019b0 <RFID+0x274>
 80019ae:	23ff      	movs	r3, #255	@ 0xff
 80019b0:	753b      	strb	r3, [r7, #20]
						switch (statusremove)
 80019b2:	7d3b      	ldrb	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <RFID+0x282>
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d006      	beq.n	80019ca <RFID+0x28e>
 80019bc:	e030      	b.n	8001a20 <RFID+0x2e4>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <RFID+0x2d8>)
 80019c0:	4915      	ldr	r1, [pc, #84]	@ (8001a18 <RFID+0x2dc>)
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <RFID+0x2a8>)
 80019c4:	f7fe fd22 	bl	800040c <CLCD_I2C_Display>
							break;
 80019c8:	e030      	b.n	8001a2c <RFID+0x2f0>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 80019ca:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <RFID+0x2e0>)
 80019cc:	4912      	ldr	r1, [pc, #72]	@ (8001a18 <RFID+0x2dc>)
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <RFID+0x2a8>)
 80019d0:	f7fe fd1c 	bl	800040c <CLCD_I2C_Display>
							break;
 80019d4:	e02a      	b.n	8001a2c <RFID+0x2f0>
 80019d6:	bf00      	nop
 80019d8:	20000020 	.word	0x20000020
 80019dc:	0800d774 	.word	0x0800d774
 80019e0:	0800d784 	.word	0x0800d784
 80019e4:	200003dc 	.word	0x200003dc
 80019e8:	0800d794 	.word	0x0800d794
 80019ec:	0800d7a0 	.word	0x0800d7a0
 80019f0:	0800d7b0 	.word	0x0800d7b0
 80019f4:	0800d7c0 	.word	0x0800d7c0
 80019f8:	0800d7c8 	.word	0x0800d7c8
 80019fc:	0800d7d4 	.word	0x0800d7d4
 8001a00:	0800d7e4 	.word	0x0800d7e4
 8001a04:	0800d7f4 	.word	0x0800d7f4
 8001a08:	0800d800 	.word	0x0800d800
 8001a0c:	0800d810 	.word	0x0800d810
 8001a10:	0800d824 	.word	0x0800d824
 8001a14:	0800d834 	.word	0x0800d834
 8001a18:	0800d848 	.word	0x0800d848
 8001a1c:	0800d858 	.word	0x0800d858
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001a20:	4aa8      	ldr	r2, [pc, #672]	@ (8001cc4 <RFID+0x588>)
 8001a22:	49a9      	ldr	r1, [pc, #676]	@ (8001cc8 <RFID+0x58c>)
 8001a24:	48a9      	ldr	r0, [pc, #676]	@ (8001ccc <RFID+0x590>)
 8001a26:	f7fe fcf1 	bl	800040c <CLCD_I2C_Display>
							break;
 8001a2a:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	2b23      	cmp	r3, #35	@ 0x23
 8001a30:	f040 81de 	bne.w	8001df0 <RFID+0x6b4>
					{
						buzzer(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f001 fd79 	bl	800352c <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a3a:	4aa5      	ldr	r2, [pc, #660]	@ (8001cd0 <RFID+0x594>)
 8001a3c:	49a5      	ldr	r1, [pc, #660]	@ (8001cd4 <RFID+0x598>)
 8001a3e:	48a3      	ldr	r0, [pc, #652]	@ (8001ccc <RFID+0x590>)
 8001a40:	f7fe fce4 	bl	800040c <CLCD_I2C_Display>
						exitmenu = Delaymenu;
 8001a44:	4ba4      	ldr	r3, [pc, #656]	@ (8001cd8 <RFID+0x59c>)
 8001a46:	2214      	movs	r2, #20
 8001a48:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001a4a:	7d3b      	ldrb	r3, [r7, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <RFID+0x31c>
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f000 81c2 	beq.w	8001dda <RFID+0x69e>
 8001a56:	e1c8      	b.n	8001dea <RFID+0x6ae>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001a58:	23ff      	movs	r3, #255	@ 0xff
 8001a5a:	74bb      	strb	r3, [r7, #18]
							uint8_t backrm1 = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	747b      	strb	r3, [r7, #17]
							while (backrm1 == 1)
 8001a60:	e1b1      	b.n	8001dc6 <RFID+0x68a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f7fe fe2c 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	737b      	strb	r3, [r7, #13]
								if (exitmenu == 0)
 8001a6c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd8 <RFID+0x59c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <RFID+0x348>
								{
									CLCD_I2C_Clear(&LCD1);
 8001a74:	4895      	ldr	r0, [pc, #596]	@ (8001ccc <RFID+0x590>)
 8001a76:	f7fe fcb9 	bl	80003ec <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7e:	f002 fa63 	bl	8003f48 <HAL_Delay>
									return;
 8001a82:	e1d3      	b.n	8001e2c <RFID+0x6f0>
								}
								if (key_pressed =='*')
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a88:	d124      	bne.n	8001ad4 <RFID+0x398>
								{
									buzzer(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f001 fd4e 	bl	800352c <buzzer>
									statusrm1++;
 8001a90:	7cbb      	ldrb	r3, [r7, #18]
 8001a92:	3301      	adds	r3, #1
 8001a94:	74bb      	strb	r3, [r7, #18]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001a96:	7cbb      	ldrb	r3, [r7, #18]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d801      	bhi.n	8001aa0 <RFID+0x364>
 8001a9c:	7cbb      	ldrb	r3, [r7, #18]
 8001a9e:	e000      	b.n	8001aa2 <RFID+0x366>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	74bb      	strb	r3, [r7, #18]
									switch (statusrm1)
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <RFID+0x374>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d006      	beq.n	8001abc <RFID+0x380>
 8001aae:	e00b      	b.n	8001ac8 <RFID+0x38c>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8001cdc <RFID+0x5a0>)
 8001ab2:	498b      	ldr	r1, [pc, #556]	@ (8001ce0 <RFID+0x5a4>)
 8001ab4:	4885      	ldr	r0, [pc, #532]	@ (8001ccc <RFID+0x590>)
 8001ab6:	f7fe fca9 	bl	800040c <CLCD_I2C_Display>
										break;
 8001aba:	e00b      	b.n	8001ad4 <RFID+0x398>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001abc:	4a89      	ldr	r2, [pc, #548]	@ (8001ce4 <RFID+0x5a8>)
 8001abe:	4988      	ldr	r1, [pc, #544]	@ (8001ce0 <RFID+0x5a4>)
 8001ac0:	4882      	ldr	r0, [pc, #520]	@ (8001ccc <RFID+0x590>)
 8001ac2:	f7fe fca3 	bl	800040c <CLCD_I2C_Display>
										break;
 8001ac6:	e005      	b.n	8001ad4 <RFID+0x398>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001ac8:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc4 <RFID+0x588>)
 8001aca:	4985      	ldr	r1, [pc, #532]	@ (8001ce0 <RFID+0x5a4>)
 8001acc:	487f      	ldr	r0, [pc, #508]	@ (8001ccc <RFID+0x590>)
 8001ace:	f7fe fc9d 	bl	800040c <CLCD_I2C_Display>
										break;
 8001ad2:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001ad4:	7b7b      	ldrb	r3, [r7, #13]
 8001ad6:	2b23      	cmp	r3, #35	@ 0x23
 8001ad8:	f040 8175 	bne.w	8001dc6 <RFID+0x68a>
								{
									buzzer(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f001 fd25 	bl	800352c <buzzer>
									exitmenu = Delaymenu;
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd8 <RFID+0x59c>)
 8001ae4:	2214      	movs	r2, #20
 8001ae6:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001ae8:	7cbb      	ldrb	r3, [r7, #18]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <RFID+0x3ba>
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f000 80e0 	beq.w	8001cb4 <RFID+0x578>
 8001af4:	e164      	b.n	8001dc0 <RFID+0x684>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001af6:	4a76      	ldr	r2, [pc, #472]	@ (8001cd0 <RFID+0x594>)
 8001af8:	4976      	ldr	r1, [pc, #472]	@ (8001cd4 <RFID+0x598>)
 8001afa:	4874      	ldr	r0, [pc, #464]	@ (8001ccc <RFID+0x590>)
 8001afc:	f7fe fc86 	bl	800040c <CLCD_I2C_Display>
										uint8_t statusadd = -1;
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	743b      	strb	r3, [r7, #16]
										uint8_t backrm10 = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
										while (backrm10 == 1)
 8001b08:	e0ca      	b.n	8001ca0 <RFID+0x564>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f7fe fdd8 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001b10:	4603      	mov	r3, r0
 8001b12:	737b      	strb	r3, [r7, #13]
											if (exitmenu == 0)
 8001b14:	4b70      	ldr	r3, [pc, #448]	@ (8001cd8 <RFID+0x59c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <RFID+0x3f0>
											{
												CLCD_I2C_Clear(&LCD1);
 8001b1c:	486b      	ldr	r0, [pc, #428]	@ (8001ccc <RFID+0x590>)
 8001b1e:	f7fe fc65 	bl	80003ec <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b26:	f002 fa0f 	bl	8003f48 <HAL_Delay>
												return;
 8001b2a:	e17f      	b.n	8001e2c <RFID+0x6f0>
											}
											if (key_pressed =='*')
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b30:	d127      	bne.n	8001b82 <RFID+0x446>
											{
												buzzer(1);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f001 fcfa 	bl	800352c <buzzer>
												exitmenu = Delaymenu;
 8001b38:	4b67      	ldr	r3, [pc, #412]	@ (8001cd8 <RFID+0x59c>)
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001b3e:	7c3b      	ldrb	r3, [r7, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	743b      	strb	r3, [r7, #16]
												statusadd = (statusadd > 1) ? (-1) : statusadd;
 8001b44:	7c3b      	ldrb	r3, [r7, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d801      	bhi.n	8001b4e <RFID+0x412>
 8001b4a:	7c3b      	ldrb	r3, [r7, #16]
 8001b4c:	e000      	b.n	8001b50 <RFID+0x414>
 8001b4e:	23ff      	movs	r3, #255	@ 0xff
 8001b50:	743b      	strb	r3, [r7, #16]
												switch (statusadd)
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <RFID+0x422>
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d006      	beq.n	8001b6a <RFID+0x42e>
 8001b5c:	e00b      	b.n	8001b76 <RFID+0x43a>
												{
												case 0:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001b5e:	4a62      	ldr	r2, [pc, #392]	@ (8001ce8 <RFID+0x5ac>)
 8001b60:	4962      	ldr	r1, [pc, #392]	@ (8001cec <RFID+0x5b0>)
 8001b62:	485a      	ldr	r0, [pc, #360]	@ (8001ccc <RFID+0x590>)
 8001b64:	f7fe fc52 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b68:	e00b      	b.n	8001b82 <RFID+0x446>
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001b6a:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <RFID+0x5b4>)
 8001b6c:	495f      	ldr	r1, [pc, #380]	@ (8001cec <RFID+0x5b0>)
 8001b6e:	4857      	ldr	r0, [pc, #348]	@ (8001ccc <RFID+0x590>)
 8001b70:	f7fe fc4c 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b74:	e005      	b.n	8001b82 <RFID+0x446>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");
 8001b76:	4a53      	ldr	r2, [pc, #332]	@ (8001cc4 <RFID+0x588>)
 8001b78:	495c      	ldr	r1, [pc, #368]	@ (8001cec <RFID+0x5b0>)
 8001b7a:	4854      	ldr	r0, [pc, #336]	@ (8001ccc <RFID+0x590>)
 8001b7c:	f7fe fc46 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b80:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001b82:	7b7b      	ldrb	r3, [r7, #13]
 8001b84:	2b23      	cmp	r3, #35	@ 0x23
 8001b86:	f040 808b 	bne.w	8001ca0 <RFID+0x564>
											{
												buzzer(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f001 fcce 	bl	800352c <buzzer>
												exitmenu = Delaymenu;
 8001b90:	4b51      	ldr	r3, [pc, #324]	@ (8001cd8 <RFID+0x59c>)
 8001b92:	2214      	movs	r2, #20
 8001b94:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001b96:	7c3b      	ldrb	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <RFID+0x466>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d041      	beq.n	8001c24 <RFID+0x4e8>
 8001ba0:	e07b      	b.n	8001c9a <RFID+0x55e>
												{
													case 0:
														uint8_t AdminID = InputID_ADMIN();
 8001ba2:	f7ff f9e3 	bl	8000f6c <InputID_ADMIN>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72bb      	strb	r3, [r7, #10]
														uint8_t keyadd_admin = (1 << 7) + AdminID;
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	3b80      	subs	r3, #128	@ 0x80
 8001bae:	727b      	strb	r3, [r7, #9]
														if (CheckKey(keyadd_admin)==0)
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fad4 	bl	8002160 <CheckKey>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d111      	bne.n	8001be2 <RFID+0x4a6>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf4 <RFID+0x5b8>)
 8001bc0:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <RFID+0x5bc>)
 8001bc2:	4842      	ldr	r0, [pc, #264]	@ (8001ccc <RFID+0x590>)
 8001bc4:	f7fe fc22 	bl	800040c <CLCD_I2C_Display>
															buzzer(3);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f001 fcaf 	bl	800352c <buzzer>
															HAL_Delay(1000);
 8001bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd2:	f002 f9b9 	bl	8003f48 <HAL_Delay>
															CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001bd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <RFID+0x5ac>)
 8001bd8:	4944      	ldr	r1, [pc, #272]	@ (8001cec <RFID+0x5b0>)
 8001bda:	483c      	ldr	r0, [pc, #240]	@ (8001ccc <RFID+0x590>)
 8001bdc:	f7fe fc16 	bl	800040c <CLCD_I2C_Display>
 8001be0:	e01a      	b.n	8001c18 <RFID+0x4dc>
														}
														else
														{
															removeuid(CheckKey(keyadd_admin));
 8001be2:	7a7b      	ldrb	r3, [r7, #9]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fabb 	bl	8002160 <CheckKey>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fdf1 	bl	80027d4 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE ADMIN CARD","   SUCCESSFUL  ");
 8001bf2:	4a42      	ldr	r2, [pc, #264]	@ (8001cfc <RFID+0x5c0>)
 8001bf4:	4942      	ldr	r1, [pc, #264]	@ (8001d00 <RFID+0x5c4>)
 8001bf6:	4835      	ldr	r0, [pc, #212]	@ (8001ccc <RFID+0x590>)
 8001bf8:	f7fe fc08 	bl	800040c <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c00:	f002 f9a2 	bl	8003f48 <HAL_Delay>
															if (checkcountUID() == 0)
 8001c04:	f000 f966 	bl	8001ed4 <checkcountUID>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <RFID+0x4dc>
															{
																startadd();
 8001c0e:	f000 fdef 	bl	80027f0 <startadd>
																exitmenu = 0;
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <RFID+0x59c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001c18:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <RFID+0x5ac>)
 8001c1a:	4934      	ldr	r1, [pc, #208]	@ (8001cec <RFID+0x5b0>)
 8001c1c:	482b      	ldr	r0, [pc, #172]	@ (8001ccc <RFID+0x590>)
 8001c1e:	f7fe fbf5 	bl	800040c <CLCD_I2C_Display>
														break;
 8001c22:	e03d      	b.n	8001ca0 <RFID+0x564>
													case 1:
														uint8_t UserID = InputID_USER();
 8001c24:	f7ff f9ae 	bl	8000f84 <InputID_USER>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	733b      	strb	r3, [r7, #12]
														uint8_t keyadd_user = (0 << 7) + UserID;
 8001c2c:	7b3b      	ldrb	r3, [r7, #12]
 8001c2e:	72fb      	strb	r3, [r7, #11]
														if (CheckKey(keyadd_user)==0)
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa94 	bl	8002160 <CheckKey>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <RFID+0x51c>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <RFID+0x5b8>)
 8001c40:	492d      	ldr	r1, [pc, #180]	@ (8001cf8 <RFID+0x5bc>)
 8001c42:	4822      	ldr	r0, [pc, #136]	@ (8001ccc <RFID+0x590>)
 8001c44:	f7fe fbe2 	bl	800040c <CLCD_I2C_Display>
															buzzer(3);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f001 fc6f 	bl	800352c <buzzer>
															HAL_Delay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f002 f979 	bl	8003f48 <HAL_Delay>
 8001c56:	e01a      	b.n	8001c8e <RFID+0x552>
														}
														else
														{
															removeuid(CheckKey(keyadd_user));
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fa80 	bl	8002160 <CheckKey>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fdb6 	bl	80027d4 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE USER CARD","   SUCCESSFUL  ");
 8001c68:	4a24      	ldr	r2, [pc, #144]	@ (8001cfc <RFID+0x5c0>)
 8001c6a:	4926      	ldr	r1, [pc, #152]	@ (8001d04 <RFID+0x5c8>)
 8001c6c:	4817      	ldr	r0, [pc, #92]	@ (8001ccc <RFID+0x590>)
 8001c6e:	f7fe fbcd 	bl	800040c <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c76:	f002 f967 	bl	8003f48 <HAL_Delay>
															if (checkcountUID() == 0)
 8001c7a:	f000 f92b 	bl	8001ed4 <checkcountUID>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <RFID+0x552>
															{
																startadd();
 8001c84:	f000 fdb4 	bl	80027f0 <startadd>
																exitmenu = 0;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <RFID+0x59c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <RFID+0x5b4>)
 8001c90:	4916      	ldr	r1, [pc, #88]	@ (8001cec <RFID+0x5b0>)
 8001c92:	480e      	ldr	r0, [pc, #56]	@ (8001ccc <RFID+0x590>)
 8001c94:	f7fe fbba 	bl	800040c <CLCD_I2C_Display>
														break;
 8001c98:	e002      	b.n	8001ca0 <RFID+0x564>
													default:
														backrm10 = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
														break;
 8001c9e:	bf00      	nop
										while (backrm10 == 1)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f43f af31 	beq.w	8001b0a <RFID+0x3ce>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <RFID+0x5a0>)
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <RFID+0x5a4>)
 8001cac:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <RFID+0x590>)
 8001cae:	f7fe fbad 	bl	800040c <CLCD_I2C_Display>
										break;
 8001cb2:	e088      	b.n	8001dc6 <RFID+0x68a>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001cb4:	4a03      	ldr	r2, [pc, #12]	@ (8001cc4 <RFID+0x588>)
 8001cb6:	4914      	ldr	r1, [pc, #80]	@ (8001d08 <RFID+0x5cc>)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <RFID+0x590>)
 8001cba:	f7fe fba7 	bl	800040c <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001cc2:	e074      	b.n	8001dae <RFID+0x672>
 8001cc4:	0800d7c0 	.word	0x0800d7c0
 8001cc8:	0800d848 	.word	0x0800d848
 8001ccc:	200003dc 	.word	0x200003dc
 8001cd0:	0800d7c8 	.word	0x0800d7c8
 8001cd4:	0800d7d4 	.word	0x0800d7d4
 8001cd8:	20000020 	.word	0x20000020
 8001cdc:	0800d868 	.word	0x0800d868
 8001ce0:	0800d878 	.word	0x0800d878
 8001ce4:	0800d888 	.word	0x0800d888
 8001ce8:	0800d898 	.word	0x0800d898
 8001cec:	0800d8ac 	.word	0x0800d8ac
 8001cf0:	0800d8bc 	.word	0x0800d8bc
 8001cf4:	0800d810 	.word	0x0800d810
 8001cf8:	0800d8cc 	.word	0x0800d8cc
 8001cfc:	0800d8dc 	.word	0x0800d8dc
 8001d00:	0800d8ec 	.word	0x0800d8ec
 8001d04:	0800d900 	.word	0x0800d900
 8001d08:	0800d914 	.word	0x0800d914
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7fe fcd7 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001d12:	4603      	mov	r3, r0
 8001d14:	737b      	strb	r3, [r7, #13]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001d16:	4847      	ldr	r0, [pc, #284]	@ (8001e34 <RFID+0x6f8>)
 8001d18:	f001 fc7e 	bl	8003618 <TM_MFRC522_Check>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13d      	bne.n	8001d9e <RFID+0x662>
											{
												if (CheckListUID(CardID) != 0)
 8001d22:	4844      	ldr	r0, [pc, #272]	@ (8001e34 <RFID+0x6f8>)
 8001d24:	f000 f8a6 	bl	8001e74 <CheckListUID>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d026      	beq.n	8001d7c <RFID+0x640>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001d2e:	4841      	ldr	r0, [pc, #260]	@ (8001e34 <RFID+0x6f8>)
 8001d30:	f000 f8a0 	bl	8001e74 <CheckListUID>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fa12 	bl	8002160 <CheckKey>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd48 	bl	80027d4 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001d44:	4a3c      	ldr	r2, [pc, #240]	@ (8001e38 <RFID+0x6fc>)
 8001d46:	493d      	ldr	r1, [pc, #244]	@ (8001e3c <RFID+0x700>)
 8001d48:	483d      	ldr	r0, [pc, #244]	@ (8001e40 <RFID+0x704>)
 8001d4a:	f7fe fb5f 	bl	800040c <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d52:	f002 f8f9 	bl	8003f48 <HAL_Delay>
													if (checkcountUID() == 0)
 8001d56:	f000 f8bd 	bl	8001ed4 <checkcountUID>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <RFID+0x634>
													{
														startadd();
 8001d60:	f000 fd46 	bl	80027f0 <startadd>
														rmquet = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73bb      	strb	r3, [r7, #14]
														exitmenu = 0;
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <RFID+0x708>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
														return;
 8001d6e:	e05d      	b.n	8001e2c <RFID+0x6f0>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d70:	4a35      	ldr	r2, [pc, #212]	@ (8001e48 <RFID+0x70c>)
 8001d72:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <RFID+0x710>)
 8001d74:	4832      	ldr	r0, [pc, #200]	@ (8001e40 <RFID+0x704>)
 8001d76:	f7fe fb49 	bl	800040c <CLCD_I2C_Display>
 8001d7a:	e010      	b.n	8001d9e <RFID+0x662>
													}
												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   This card","  Do not exist");
 8001d7c:	4a34      	ldr	r2, [pc, #208]	@ (8001e50 <RFID+0x714>)
 8001d7e:	4935      	ldr	r1, [pc, #212]	@ (8001e54 <RFID+0x718>)
 8001d80:	482f      	ldr	r0, [pc, #188]	@ (8001e40 <RFID+0x704>)
 8001d82:	f7fe fb43 	bl	800040c <CLCD_I2C_Display>
													buzzer(3);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f001 fbd0 	bl	800352c <buzzer>
													HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d90:	f002 f8da 	bl	8003f48 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d94:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <RFID+0x70c>)
 8001d96:	492d      	ldr	r1, [pc, #180]	@ (8001e4c <RFID+0x710>)
 8001d98:	4829      	ldr	r0, [pc, #164]	@ (8001e40 <RFID+0x704>)
 8001d9a:	f7fe fb37 	bl	800040c <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b23      	cmp	r3, #35	@ 0x23
 8001da2:	d104      	bne.n	8001dae <RFID+0x672>
											{
												buzzer(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f001 fbc1 	bl	800352c <buzzer>
												rmquet = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ab      	bne.n	8001d0c <RFID+0x5d0>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <RFID+0x71c>)
 8001db6:	4929      	ldr	r1, [pc, #164]	@ (8001e5c <RFID+0x720>)
 8001db8:	4821      	ldr	r0, [pc, #132]	@ (8001e40 <RFID+0x704>)
 8001dba:	f7fe fb27 	bl	800040c <CLCD_I2C_Display>
										break;
 8001dbe:	e002      	b.n	8001dc6 <RFID+0x68a>
									default:
										backrm1 = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	747b      	strb	r3, [r7, #17]
										break;
 8001dc4:	bf00      	nop
							while (backrm1 == 1)
 8001dc6:	7c7b      	ldrb	r3, [r7, #17]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f43f ae4a 	beq.w	8001a62 <RFID+0x326>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001dce:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <RFID+0x724>)
 8001dd0:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <RFID+0x728>)
 8001dd2:	481b      	ldr	r0, [pc, #108]	@ (8001e40 <RFID+0x704>)
 8001dd4:	f7fe fb1a 	bl	800040c <CLCD_I2C_Display>
							break;
 8001dd8:	e00a      	b.n	8001df0 <RFID+0x6b4>
						case 1:
							remoall();
 8001dda:	f000 fd7f 	bl	80028dc <remoall>
							startadd();
 8001dde:	f000 fd07 	bl	80027f0 <startadd>
							exitmenu = 0;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <RFID+0x708>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
							break;
 8001de8:	e002      	b.n	8001df0 <RFID+0x6b4>
						default:
							backrm = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	74fb      	strb	r3, [r7, #19]
							break;
 8001dee:	bf00      	nop
				while (backrm == 1)
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f43f adb9 	beq.w	800196a <RFID+0x22e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <RFID+0x72c>)
 8001dfa:	491c      	ldr	r1, [pc, #112]	@ (8001e6c <RFID+0x730>)
 8001dfc:	4810      	ldr	r0, [pc, #64]	@ (8001e40 <RFID+0x704>)
 8001dfe:	f7fe fb05 	bl	800040c <CLCD_I2C_Display>
				break;
 8001e02:	e00b      	b.n	8001e1c <RFID+0x6e0>
			case 2:
				checkthe();
 8001e04:	f000 f910 	bl	8002028 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <RFID+0x734>)
 8001e0a:	4918      	ldr	r1, [pc, #96]	@ (8001e6c <RFID+0x730>)
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <RFID+0x704>)
 8001e0e:	f7fe fafd 	bl	800040c <CLCD_I2C_Display>
				break;
 8001e12:	e003      	b.n	8001e1c <RFID+0x6e0>
			default:
				exitmenu = 0;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <RFID+0x708>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
				break;
 8001e1a:	bf00      	nop
	while (exitmenu )
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <RFID+0x708>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f ac9c 	bne.w	800175e <RFID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8001e26:	4806      	ldr	r0, [pc, #24]	@ (8001e40 <RFID+0x704>)
 8001e28:	f7fe fae0 	bl	80003ec <CLCD_I2C_Clear>
}
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200003e8 	.word	0x200003e8
 8001e38:	0800d8dc 	.word	0x0800d8dc
 8001e3c:	0800d924 	.word	0x0800d924
 8001e40:	200003dc 	.word	0x200003dc
 8001e44:	20000020 	.word	0x20000020
 8001e48:	0800d7c0 	.word	0x0800d7c0
 8001e4c:	0800d914 	.word	0x0800d914
 8001e50:	0800d934 	.word	0x0800d934
 8001e54:	0800d944 	.word	0x0800d944
 8001e58:	0800d888 	.word	0x0800d888
 8001e5c:	0800d878 	.word	0x0800d878
 8001e60:	0800d834 	.word	0x0800d834
 8001e64:	0800d848 	.word	0x0800d848
 8001e68:	0800d7a0 	.word	0x0800d7a0
 8001e6c:	0800d784 	.word	0x0800d784
 8001e70:	0800d7b0 	.word	0x0800d7b0

08001e74 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    uint32_t pt = StartAddressUID;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <CheckListUID+0x5c>)
 8001e7e:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001e80:	e018      	b.n	8001eb4 <CheckListUID+0x40>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3306      	adds	r3, #6
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff45 	bl	8000d16 <Flash_Read_2Byte>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10a      	bne.n	8001eae <CheckListUID+0x3a>
        {
            if (CheckUID(data, pt) == 1)
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fc6e 	bl	800277c <CheckUID>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <CheckListUID+0x3a>
                return *(uint8_t *)(pt + 5);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	e00b      	b.n	8001ec6 <CheckListUID+0x52>
        }
        pt = pt + 8;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3305      	adds	r3, #5
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff20 	bl	8000cfe <Flash_Read_Byte>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2bff      	cmp	r3, #255	@ 0xff
 8001ec2:	d1de      	bne.n	8001e82 <CheckListUID+0xe>
    }
    return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800f000 	.word	0x0800f000

08001ed4 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
    uint32_t pt = StartAddressUID;
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <checkcountUID+0x60>)
 8001edc:	607b      	str	r3, [r7, #4]
    uint8_t count = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	70fb      	strb	r3, [r7, #3]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001ee2:	e01a      	b.n	8001f1a <checkcountUID+0x46>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3306      	adds	r3, #6
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ff14 	bl	8000d16 <Flash_Read_2Byte>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d10c      	bne.n	8001f14 <checkcountUID+0x40>
        {
            if ((Flash_Read_Byte(pt + 5) >> 7) == 1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3305      	adds	r3, #5
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fefd 	bl	8000cfe <Flash_Read_Byte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	09db      	lsrs	r3, r3, #7
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <checkcountUID+0x40>
            {
                count++;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	3301      	adds	r3, #1
 8001f12:	70fb      	strb	r3, [r7, #3]
            }
        }
        pt = pt + 8;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3308      	adds	r3, #8
 8001f18:	607b      	str	r3, [r7, #4]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe feed 	bl	8000cfe <Flash_Read_Byte>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2bff      	cmp	r3, #255	@ 0xff
 8001f28:	d1dc      	bne.n	8001ee4 <checkcountUID+0x10>
    }
    return count;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800f000 	.word	0x0800f000

08001f38 <adduid>:

void adduid(uint8_t key)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    setaddress();
 8001f42:	f000 fcaf 	bl	80028a4 <setaddress>
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001f46:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <adduid+0xd0>)
 8001f48:	4930      	ldr	r1, [pc, #192]	@ (800200c <adduid+0xd4>)
 8001f4a:	4831      	ldr	r0, [pc, #196]	@ (8002010 <adduid+0xd8>)
 8001f4c:	f7fe fa5e 	bl	800040c <CLCD_I2C_Display>
    while (exitmenu)
 8001f50:	e053      	b.n	8001ffa <adduid+0xc2>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8001f52:	4830      	ldr	r0, [pc, #192]	@ (8002014 <adduid+0xdc>)
 8001f54:	f001 fb60 	bl	8003618 <TM_MFRC522_Check>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d143      	bne.n	8001fe6 <adduid+0xae>
        {
            HAL_Delay(100);
 8001f5e:	2064      	movs	r0, #100	@ 0x64
 8001f60:	f001 fff2 	bl	8003f48 <HAL_Delay>
            if (CheckListUID(CardID) == 0)
 8001f64:	482b      	ldr	r0, [pc, #172]	@ (8002014 <adduid+0xdc>)
 8001f66:	f7ff ff85 	bl	8001e74 <CheckListUID>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d122      	bne.n	8001fb6 <adduid+0x7e>
            {
                buzzer(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f001 fadb 	bl	800352c <buzzer>
                CardID[5] = key;
 8001f76:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <adduid+0xdc>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	7153      	strb	r3, [r2, #5]
                Flash_Write_Array(AddressUID, CardID, 6);
 8001f7c:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <adduid+0xe0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2206      	movs	r2, #6
 8001f82:	4924      	ldr	r1, [pc, #144]	@ (8002014 <adduid+0xdc>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe97 	bl	8000cb8 <Flash_Write_Array>
                AddressUID += 8;
 8001f8a:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <adduid+0xe0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <adduid+0xe0>)
 8001f92:	6013      	str	r3, [r2, #0]
                CLCD_I2C_Clear(&LCD1);
 8001f94:	481e      	ldr	r0, [pc, #120]	@ (8002010 <adduid+0xd8>)
 8001f96:	f7fe fa29 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	481c      	ldr	r0, [pc, #112]	@ (8002010 <adduid+0xd8>)
 8001fa0:	f7fe f9ba 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8001fa4:	491d      	ldr	r1, [pc, #116]	@ (800201c <adduid+0xe4>)
 8001fa6:	481a      	ldr	r0, [pc, #104]	@ (8002010 <adduid+0xd8>)
 8001fa8:	f7fe fa09 	bl	80003be <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8001fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb0:	f001 ffca 	bl	8003f48 <HAL_Delay>
                return;
 8001fb4:	e025      	b.n	8002002 <adduid+0xca>
            }
            else
            {
                CLCD_I2C_Clear(&LCD1);
 8001fb6:	4816      	ldr	r0, [pc, #88]	@ (8002010 <adduid+0xd8>)
 8001fb8:	f7fe fa18 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4813      	ldr	r0, [pc, #76]	@ (8002010 <adduid+0xd8>)
 8001fc2:	f7fe f9a9 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8001fc6:	4916      	ldr	r1, [pc, #88]	@ (8002020 <adduid+0xe8>)
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <adduid+0xd8>)
 8001fca:	f7fe f9f8 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(3);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f001 faac 	bl	800352c <buzzer>
                HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd8:	f001 ffb6 	bl	8003f48 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <adduid+0xd0>)
 8001fde:	490b      	ldr	r1, [pc, #44]	@ (800200c <adduid+0xd4>)
 8001fe0:	480b      	ldr	r0, [pc, #44]	@ (8002010 <adduid+0xd8>)
 8001fe2:	f7fe fa13 	bl	800040c <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8001fe6:	2064      	movs	r0, #100	@ 0x64
 8001fe8:	f7fe fb6a 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b23      	cmp	r3, #35	@ 0x23
 8001ff0:	d103      	bne.n	8001ffa <adduid+0xc2>
        {
            buzzer(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f001 fa9a 	bl	800352c <buzzer>
            return;
 8001ff8:	e003      	b.n	8002002 <adduid+0xca>
    while (exitmenu)
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <adduid+0xec>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1a7      	bne.n	8001f52 <adduid+0x1a>
        }
    }
}
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800d7c0 	.word	0x0800d7c0
 800200c:	0800d954 	.word	0x0800d954
 8002010:	200003dc 	.word	0x200003dc
 8002014:	200003e8 	.word	0x200003e8
 8002018:	20000024 	.word	0x20000024
 800201c:	0800d960 	.word	0x0800d960
 8002020:	0800d970 	.word	0x0800d970
 8002024:	20000020 	.word	0x20000020

08002028 <checkthe>:

void checkthe(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
    exitmenu = 30;
 800202e:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <checkthe+0x110>)
 8002030:	221e      	movs	r2, #30
 8002032:	701a      	strb	r2, [r3, #0]
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <checkthe+0x114>)
 8002036:	4942      	ldr	r1, [pc, #264]	@ (8002140 <checkthe+0x118>)
 8002038:	4842      	ldr	r0, [pc, #264]	@ (8002144 <checkthe+0x11c>)
 800203a:	f7fe f9e7 	bl	800040c <CLCD_I2C_Display>
    while (exitmenu)
 800203e:	e074      	b.n	800212a <checkthe+0x102>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8002040:	4841      	ldr	r0, [pc, #260]	@ (8002148 <checkthe+0x120>)
 8002042:	f001 fae9 	bl	8003618 <TM_MFRC522_Check>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d164      	bne.n	8002116 <checkthe+0xee>
        {
            if (CheckListUID(CardID) == 0)
 800204c:	483e      	ldr	r0, [pc, #248]	@ (8002148 <checkthe+0x120>)
 800204e:	f7ff ff11 	bl	8001e74 <CheckListUID>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11c      	bne.n	8002092 <checkthe+0x6a>
            {
                CLCD_I2C_Clear(&LCD1);
 8002058:	483a      	ldr	r0, [pc, #232]	@ (8002144 <checkthe+0x11c>)
 800205a:	f7fe f9c7 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	4838      	ldr	r0, [pc, #224]	@ (8002144 <checkthe+0x11c>)
 8002064:	f7fe f958 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002068:	4938      	ldr	r1, [pc, #224]	@ (800214c <checkthe+0x124>)
 800206a:	4836      	ldr	r0, [pc, #216]	@ (8002144 <checkthe+0x11c>)
 800206c:	f7fe f9a7 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(3);
 8002070:	2003      	movs	r0, #3
 8002072:	f001 fa5b 	bl	800352c <buzzer>
                HAL_Delay(1000);
 8002076:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207a:	f001 ff65 	bl	8003f48 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <checkthe+0x114>)
 8002080:	492f      	ldr	r1, [pc, #188]	@ (8002140 <checkthe+0x118>)
 8002082:	4830      	ldr	r0, [pc, #192]	@ (8002144 <checkthe+0x11c>)
 8002084:	f7fe f9c2 	bl	800040c <CLCD_I2C_Display>
                HAL_Delay(1000);
 8002088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208c:	f001 ff5c 	bl	8003f48 <HAL_Delay>
 8002090:	e041      	b.n	8002116 <checkthe+0xee>
            }
            else
            {
                uint8_t key = CheckListUID(CardID);
 8002092:	482d      	ldr	r0, [pc, #180]	@ (8002148 <checkthe+0x120>)
 8002094:	f7ff feee 	bl	8001e74 <CheckListUID>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]
                uint8_t key2 = key & 0x7F;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a2:	75bb      	strb	r3, [r7, #22]
                uint8_t key1 = (key & 0x80) >> 7;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	09db      	lsrs	r3, r3, #7
 80020a8:	757b      	strb	r3, [r7, #21]
                CLCD_I2C_Clear(&LCD1);
 80020aa:	4826      	ldr	r0, [pc, #152]	@ (8002144 <checkthe+0x11c>)
 80020ac:	f7fe f99e 	bl	80003ec <CLCD_I2C_Clear>
                buzzer(1);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f001 fa3b 	bl	800352c <buzzer>
                switch (key1)
 80020b6:	7d7b      	ldrb	r3, [r7, #21]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d109      	bne.n	80020d0 <checkthe+0xa8>
                {
                case 1:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	4820      	ldr	r0, [pc, #128]	@ (8002144 <checkthe+0x11c>)
 80020c2:	f7fe f929 	bl	8000318 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 80020c6:	4922      	ldr	r1, [pc, #136]	@ (8002150 <checkthe+0x128>)
 80020c8:	481e      	ldr	r0, [pc, #120]	@ (8002144 <checkthe+0x11c>)
 80020ca:	f7fe f978 	bl	80003be <CLCD_I2C_WriteString>
                    break;
 80020ce:	e009      	b.n	80020e4 <checkthe+0xbc>
                default:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	481b      	ldr	r0, [pc, #108]	@ (8002144 <checkthe+0x11c>)
 80020d6:	f7fe f91f 	bl	8000318 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "USER CARD");
 80020da:	491e      	ldr	r1, [pc, #120]	@ (8002154 <checkthe+0x12c>)
 80020dc:	4819      	ldr	r0, [pc, #100]	@ (8002144 <checkthe+0x11c>)
 80020de:	f7fe f96e 	bl	80003be <CLCD_I2C_WriteString>
                    break;
 80020e2:	bf00      	nop
                }
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "Card ID: %d", key2);
 80020e4:	7dbb      	ldrb	r3, [r7, #22]
 80020e6:	1d38      	adds	r0, r7, #4
 80020e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <checkthe+0x130>)
 80020ea:	2110      	movs	r1, #16
 80020ec:	f00a fdd0 	bl	800cc90 <sniprintf>
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2100      	movs	r1, #0
 80020f4:	4813      	ldr	r0, [pc, #76]	@ (8002144 <checkthe+0x11c>)
 80020f6:	f7fe f90f 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, buffer);
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4811      	ldr	r0, [pc, #68]	@ (8002144 <checkthe+0x11c>)
 8002100:	f7fe f95d 	bl	80003be <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002108:	f001 ff1e 	bl	8003f48 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 800210c:	4a0b      	ldr	r2, [pc, #44]	@ (800213c <checkthe+0x114>)
 800210e:	4913      	ldr	r1, [pc, #76]	@ (800215c <checkthe+0x134>)
 8002110:	480c      	ldr	r0, [pc, #48]	@ (8002144 <checkthe+0x11c>)
 8002112:	f7fe f97b 	bl	800040c <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8002116:	2064      	movs	r0, #100	@ 0x64
 8002118:	f7fe fad2 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 800211c:	4603      	mov	r3, r0
 800211e:	2b23      	cmp	r3, #35	@ 0x23
 8002120:	d103      	bne.n	800212a <checkthe+0x102>
        {
            buzzer(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f001 fa02 	bl	800352c <buzzer>
            return;
 8002128:	e003      	b.n	8002132 <checkthe+0x10a>
    while (exitmenu)
 800212a:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <checkthe+0x110>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d186      	bne.n	8002040 <checkthe+0x18>
        }
    }
}
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000020 	.word	0x20000020
 800213c:	0800d7c0 	.word	0x0800d7c0
 8002140:	0800d954 	.word	0x0800d954
 8002144:	200003dc 	.word	0x200003dc
 8002148:	200003e8 	.word	0x200003e8
 800214c:	0800d980 	.word	0x0800d980
 8002150:	0800d990 	.word	0x0800d990
 8002154:	0800d99c 	.word	0x0800d99c
 8002158:	0800d9a8 	.word	0x0800d9a8
 800215c:	0800d914 	.word	0x0800d914

08002160 <CheckKey>:

uint32_t CheckKey(uint8_t key)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    uint32_t pt = StartAddressUID;
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <CheckKey+0x58>)
 800216c:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 800216e:	e015      	b.n	800219c <CheckKey+0x3c>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3306      	adds	r3, #6
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fdce 	bl	8000d16 <Flash_Read_2Byte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002182:	429a      	cmp	r2, r3
 8002184:	d107      	bne.n	8002196 <CheckKey+0x36>
        {
            if (*(uint8_t *)(pt + 5) == key)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3305      	adds	r3, #5
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	79fa      	ldrb	r2, [r7, #7]
 800218e:	429a      	cmp	r2, r3
 8002190:	d101      	bne.n	8002196 <CheckKey+0x36>
                return pt;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	e00b      	b.n	80021ae <CheckKey+0x4e>
        }
        pt = pt + 8;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3308      	adds	r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3305      	adds	r3, #5
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fdac 	bl	8000cfe <Flash_Read_Byte>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2bff      	cmp	r3, #255	@ 0xff
 80021aa:	d1e1      	bne.n	8002170 <CheckKey+0x10>
    }
    return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	0800f000 	.word	0x0800f000

080021bc <FACEID>:

void FACEID(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	buzzer(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f001 f9b2 	bl	800352c <buzzer>
	exitmenu = Delaymenu;
 80021c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002440 <FACEID+0x284>)
 80021ca:	2214      	movs	r2, #20
 80021cc:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80021ce:	23ff      	movs	r3, #255	@ 0xff
 80021d0:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 80021d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002444 <FACEID+0x288>)
 80021d4:	499c      	ldr	r1, [pc, #624]	@ (8002448 <FACEID+0x28c>)
 80021d6:	489d      	ldr	r0, [pc, #628]	@ (800244c <FACEID+0x290>)
 80021d8:	f7fe f918 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80021dc:	e124      	b.n	8002428 <FACEID+0x26c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80021de:	200a      	movs	r0, #10
 80021e0:	f7fe fa6e 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80021e4:	4603      	mov	r3, r0
 80021e6:	713b      	strb	r3, [r7, #4]
		if (key_pressed == '*')
 80021e8:	793b      	ldrb	r3, [r7, #4]
 80021ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80021ec:	d127      	bne.n	800223e <FACEID+0x82>
		{
			buzzer(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f001 f99c 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 80021f4:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <FACEID+0x284>)
 80021f6:	2214      	movs	r2, #20
 80021f8:	701a      	strb	r2, [r3, #0]
			status++;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	3301      	adds	r3, #1
 80021fe:	71fb      	strb	r3, [r7, #7]
			status = (status > 1) ? (-1) : status;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d801      	bhi.n	800220a <FACEID+0x4e>
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	e000      	b.n	800220c <FACEID+0x50>
 800220a:	23ff      	movs	r3, #255	@ 0xff
 800220c:	71fb      	strb	r3, [r7, #7]
			switch (status)
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <FACEID+0x5e>
 8002214:	2b01      	cmp	r3, #1
 8002216:	d006      	beq.n	8002226 <FACEID+0x6a>
 8002218:	e00b      	b.n	8002232 <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800221a:	4a8d      	ldr	r2, [pc, #564]	@ (8002450 <FACEID+0x294>)
 800221c:	498a      	ldr	r1, [pc, #552]	@ (8002448 <FACEID+0x28c>)
 800221e:	488b      	ldr	r0, [pc, #556]	@ (800244c <FACEID+0x290>)
 8002220:	f7fe f8f4 	bl	800040c <CLCD_I2C_Display>
				break;
 8002224:	e00b      	b.n	800223e <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002226:	4a8b      	ldr	r2, [pc, #556]	@ (8002454 <FACEID+0x298>)
 8002228:	4987      	ldr	r1, [pc, #540]	@ (8002448 <FACEID+0x28c>)
 800222a:	4888      	ldr	r0, [pc, #544]	@ (800244c <FACEID+0x290>)
 800222c:	f7fe f8ee 	bl	800040c <CLCD_I2C_Display>
				break;
 8002230:	e005      	b.n	800223e <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002232:	4a89      	ldr	r2, [pc, #548]	@ (8002458 <FACEID+0x29c>)
 8002234:	4984      	ldr	r1, [pc, #528]	@ (8002448 <FACEID+0x28c>)
 8002236:	4885      	ldr	r0, [pc, #532]	@ (800244c <FACEID+0x290>)
 8002238:	f7fe f8e8 	bl	800040c <CLCD_I2C_Display>
				break;
 800223c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 800223e:	793b      	ldrb	r3, [r7, #4]
 8002240:	2b23      	cmp	r3, #35	@ 0x23
 8002242:	f040 80f1 	bne.w	8002428 <FACEID+0x26c>
		{
			buzzer(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f001 f970 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 800224c:	4b7c      	ldr	r3, [pc, #496]	@ (8002440 <FACEID+0x284>)
 800224e:	2214      	movs	r2, #20
 8002250:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <FACEID+0xa2>
 8002258:	2b01      	cmp	r3, #1
 800225a:	d022      	beq.n	80022a2 <FACEID+0xe6>
 800225c:	e0e0      	b.n	8002420 <FACEID+0x264>
			{
			case 0:
				uint8_t FaceID = InputID_FACE();
 800225e:	f7fe fea9 	bl	8000fb4 <InputID_FACE>
 8002262:	4603      	mov	r3, r0
 8002264:	70bb      	strb	r3, [r7, #2]
				if (checkfaceid(FaceID) != 0)
 8002266:	78bb      	ldrb	r3, [r7, #2]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fc23 	bl	8002ab4 <checkfaceid>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00c      	beq.n	800228e <FACEID+0xd2>
				{
					CLCD_I2C_Display(&LCD1,"    FACEID "," Face Existed ");
 8002274:	4a79      	ldr	r2, [pc, #484]	@ (800245c <FACEID+0x2a0>)
 8002276:	497a      	ldr	r1, [pc, #488]	@ (8002460 <FACEID+0x2a4>)
 8002278:	4874      	ldr	r0, [pc, #464]	@ (800244c <FACEID+0x290>)
 800227a:	f7fe f8c7 	bl	800040c <CLCD_I2C_Display>
					buzzer(3);
 800227e:	2003      	movs	r0, #3
 8002280:	f001 f954 	bl	800352c <buzzer>
					HAL_Delay(1000);
 8002284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002288:	f001 fe5e 	bl	8003f48 <HAL_Delay>
 800228c:	e003      	b.n	8002296 <FACEID+0xda>
				}
				else
				{
					addface(FaceID);
 800228e:	78bb      	ldrb	r3, [r7, #2]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fb45 	bl	8002920 <addface>
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 8002296:	4a6e      	ldr	r2, [pc, #440]	@ (8002450 <FACEID+0x294>)
 8002298:	496b      	ldr	r1, [pc, #428]	@ (8002448 <FACEID+0x28c>)
 800229a:	486c      	ldr	r0, [pc, #432]	@ (800244c <FACEID+0x290>)
 800229c:	f7fe f8b6 	bl	800040c <CLCD_I2C_Display>
				break;
 80022a0:	e0c2      	b.n	8002428 <FACEID+0x26c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80022a2:	4a70      	ldr	r2, [pc, #448]	@ (8002464 <FACEID+0x2a8>)
 80022a4:	4970      	ldr	r1, [pc, #448]	@ (8002468 <FACEID+0x2ac>)
 80022a6:	4869      	ldr	r0, [pc, #420]	@ (800244c <FACEID+0x290>)
 80022a8:	f7fe f8b0 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	71bb      	strb	r3, [r7, #6]
				uint8_t backrm = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	717b      	strb	r3, [r7, #5]
				while (backrm == 1)
 80022b4:	e0aa      	b.n	800240c <FACEID+0x250>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80022b6:	200a      	movs	r0, #10
 80022b8:	f7fe fa02 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80022bc:	4603      	mov	r3, r0
 80022be:	713b      	strb	r3, [r7, #4]
					if (exitmenu == 0)
 80022c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002440 <FACEID+0x284>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <FACEID+0x11c>
					{
						CLCD_I2C_Clear(&LCD1);
 80022c8:	4860      	ldr	r0, [pc, #384]	@ (800244c <FACEID+0x290>)
 80022ca:	f7fe f88f 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80022ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d2:	f001 fe39 	bl	8003f48 <HAL_Delay>
						return;
 80022d6:	e0af      	b.n	8002438 <FACEID+0x27c>
					}
					if (key_pressed == '*')
 80022d8:	793b      	ldrb	r3, [r7, #4]
 80022da:	2b2a      	cmp	r3, #42	@ 0x2a
 80022dc:	d127      	bne.n	800232e <FACEID+0x172>
					{
						buzzer(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f001 f924 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 80022e4:	4b56      	ldr	r3, [pc, #344]	@ (8002440 <FACEID+0x284>)
 80022e6:	2214      	movs	r2, #20
 80022e8:	701a      	strb	r2, [r3, #0]
						statusrm++;
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	3301      	adds	r3, #1
 80022ee:	71bb      	strb	r3, [r7, #6]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d801      	bhi.n	80022fa <FACEID+0x13e>
 80022f6:	79bb      	ldrb	r3, [r7, #6]
 80022f8:	e000      	b.n	80022fc <FACEID+0x140>
 80022fa:	2300      	movs	r3, #0
 80022fc:	71bb      	strb	r3, [r7, #6]
						switch (statusrm)
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d002      	beq.n	800230a <FACEID+0x14e>
 8002304:	2b02      	cmp	r3, #2
 8002306:	d006      	beq.n	8002316 <FACEID+0x15a>
 8002308:	e00b      	b.n	8002322 <FACEID+0x166>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800230a:	4a58      	ldr	r2, [pc, #352]	@ (800246c <FACEID+0x2b0>)
 800230c:	4958      	ldr	r1, [pc, #352]	@ (8002470 <FACEID+0x2b4>)
 800230e:	484f      	ldr	r0, [pc, #316]	@ (800244c <FACEID+0x290>)
 8002310:	f7fe f87c 	bl	800040c <CLCD_I2C_Display>
							break;
 8002314:	e00b      	b.n	800232e <FACEID+0x172>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove All");
 8002316:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <FACEID+0x2b8>)
 8002318:	4955      	ldr	r1, [pc, #340]	@ (8002470 <FACEID+0x2b4>)
 800231a:	484c      	ldr	r0, [pc, #304]	@ (800244c <FACEID+0x290>)
 800231c:	f7fe f876 	bl	800040c <CLCD_I2C_Display>
							break;
 8002320:	e005      	b.n	800232e <FACEID+0x172>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 8002322:	4a4d      	ldr	r2, [pc, #308]	@ (8002458 <FACEID+0x29c>)
 8002324:	4952      	ldr	r1, [pc, #328]	@ (8002470 <FACEID+0x2b4>)
 8002326:	4849      	ldr	r0, [pc, #292]	@ (800244c <FACEID+0x290>)
 8002328:	f7fe f870 	bl	800040c <CLCD_I2C_Display>
							break;
 800232c:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800232e:	793b      	ldrb	r3, [r7, #4]
 8002330:	2b23      	cmp	r3, #35	@ 0x23
 8002332:	d16b      	bne.n	800240c <FACEID+0x250>
					{
						buzzer(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f001 f8f9 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <FACEID+0x284>)
 800233c:	2214      	movs	r2, #20
 800233e:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d002      	beq.n	800234c <FACEID+0x190>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d02b      	beq.n	80023a2 <FACEID+0x1e6>
 800234a:	e05c      	b.n	8002406 <FACEID+0x24a>
						{
						case 1:
							uint8_t FaceID = InputID_FACE();
 800234c:	f7fe fe32 	bl	8000fb4 <InputID_FACE>
 8002350:	4603      	mov	r3, r0
 8002352:	70fb      	strb	r3, [r7, #3]
							if (checkfaceid(FaceID) == 0)
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fbac 	bl	8002ab4 <checkfaceid>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <FACEID+0x1c0>
							{
								CLCD_I2C_Display(&LCD1, "    FaceID ", "  Do Not Exist");
 8002362:	4a45      	ldr	r2, [pc, #276]	@ (8002478 <FACEID+0x2bc>)
 8002364:	4945      	ldr	r1, [pc, #276]	@ (800247c <FACEID+0x2c0>)
 8002366:	4839      	ldr	r0, [pc, #228]	@ (800244c <FACEID+0x290>)
 8002368:	f7fe f850 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 800236c:	2003      	movs	r0, #3
 800236e:	f001 f8dd 	bl	800352c <buzzer>
								HAL_Delay(1000);
 8002372:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002376:	f001 fde7 	bl	8003f48 <HAL_Delay>
 800237a:	e00c      	b.n	8002396 <FACEID+0x1da>
							}
							else
							{
								removeface(FaceID);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb34 	bl	80029ec <removeface>
								CLCD_I2C_Display(&LCD1,"REMOVE FACEID ","   SUCCESSFUL  ");
 8002384:	4a3e      	ldr	r2, [pc, #248]	@ (8002480 <FACEID+0x2c4>)
 8002386:	493f      	ldr	r1, [pc, #252]	@ (8002484 <FACEID+0x2c8>)
 8002388:	4830      	ldr	r0, [pc, #192]	@ (800244c <FACEID+0x290>)
 800238a:	f7fe f83f 	bl	800040c <CLCD_I2C_Display>
								HAL_Delay(1000);
 800238e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002392:	f001 fdd9 	bl	8003f48 <HAL_Delay>
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002396:	4a35      	ldr	r2, [pc, #212]	@ (800246c <FACEID+0x2b0>)
 8002398:	4935      	ldr	r1, [pc, #212]	@ (8002470 <FACEID+0x2b4>)
 800239a:	482c      	ldr	r0, [pc, #176]	@ (800244c <FACEID+0x290>)
 800239c:	f7fe f836 	bl	800040c <CLCD_I2C_Display>
							break;
 80023a0:	e034      	b.n	800240c <FACEID+0x250>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 80023a2:	4939      	ldr	r1, [pc, #228]	@ (8002488 <FACEID+0x2cc>)
 80023a4:	4839      	ldr	r0, [pc, #228]	@ (800248c <FACEID+0x2d0>)
 80023a6:	f00a fca7 	bl	800ccf8 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 80023aa:	2107      	movs	r1, #7
 80023ac:	4837      	ldr	r0, [pc, #220]	@ (800248c <FACEID+0x2d0>)
 80023ae:	f00a f809 	bl	800c3c4 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80023b2:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <FACEID+0x2d4>)
 80023b4:	4937      	ldr	r1, [pc, #220]	@ (8002494 <FACEID+0x2d8>)
 80023b6:	4825      	ldr	r0, [pc, #148]	@ (800244c <FACEID+0x290>)
 80023b8:	f7fe f828 	bl	800040c <CLCD_I2C_Display>
							exitmenu = 60;
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <FACEID+0x284>)
 80023be:	223c      	movs	r2, #60	@ 0x3c
 80023c0:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	2100      	movs	r1, #0
 80023c6:	4834      	ldr	r0, [pc, #208]	@ (8002498 <FACEID+0x2dc>)
 80023c8:	f00a fcb6 	bl	800cd38 <memset>
							while(exitmenu != 0){
 80023cc:	e013      	b.n	80023f6 <FACEID+0x23a>
								if(Rx_Buffer[0] == 'T'){
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <FACEID+0x2dc>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	2b54      	cmp	r3, #84	@ 0x54
 80023d6:	d10e      	bne.n	80023f6 <FACEID+0x23a>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 80023d8:	4a29      	ldr	r2, [pc, #164]	@ (8002480 <FACEID+0x2c4>)
 80023da:	4930      	ldr	r1, [pc, #192]	@ (800249c <FACEID+0x2e0>)
 80023dc:	481b      	ldr	r0, [pc, #108]	@ (800244c <FACEID+0x290>)
 80023de:	f7fe f815 	bl	800040c <CLCD_I2C_Display>
									HAL_Delay(2000);
 80023e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023e6:	f001 fdaf 	bl	8003f48 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	2100      	movs	r1, #0
 80023ee:	482a      	ldr	r0, [pc, #168]	@ (8002498 <FACEID+0x2dc>)
 80023f0:	f00a fca2 	bl	800cd38 <memset>
									break;
 80023f4:	e003      	b.n	80023fe <FACEID+0x242>
							while(exitmenu != 0){
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <FACEID+0x284>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e7      	bne.n	80023ce <FACEID+0x212>
								}
							}
							exitmenu = 0;
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <FACEID+0x284>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
							break;
 8002404:	e002      	b.n	800240c <FACEID+0x250>
						default:
							backrm=0;
 8002406:	2300      	movs	r3, #0
 8002408:	717b      	strb	r3, [r7, #5]
							break;
 800240a:	bf00      	nop
				while (backrm == 1)
 800240c:	797b      	ldrb	r3, [r7, #5]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f43f af51 	beq.w	80022b6 <FACEID+0xfa>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002414:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <FACEID+0x298>)
 8002416:	490c      	ldr	r1, [pc, #48]	@ (8002448 <FACEID+0x28c>)
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <FACEID+0x290>)
 800241a:	f7fd fff7 	bl	800040c <CLCD_I2C_Display>
				break;
 800241e:	e003      	b.n	8002428 <FACEID+0x26c>
			default:
				exitmenu=0;
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <FACEID+0x284>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
				break;
 8002426:	bf00      	nop
	while (exitmenu )
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <FACEID+0x284>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aed6 	bne.w	80021de <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <FACEID+0x290>)
 8002434:	f7fd ffda 	bl	80003ec <CLCD_I2C_Clear>
}
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000020 	.word	0x20000020
 8002444:	0800d774 	.word	0x0800d774
 8002448:	0800d9b4 	.word	0x0800d9b4
 800244c:	200003dc 	.word	0x200003dc
 8002450:	0800d9c8 	.word	0x0800d9c8
 8002454:	0800d9d8 	.word	0x0800d9d8
 8002458:	0800d7c0 	.word	0x0800d7c0
 800245c:	0800d9ec 	.word	0x0800d9ec
 8002460:	0800d9fc 	.word	0x0800d9fc
 8002464:	0800d7c8 	.word	0x0800d7c8
 8002468:	0800d7d4 	.word	0x0800d7d4
 800246c:	0800da08 	.word	0x0800da08
 8002470:	0800da1c 	.word	0x0800da1c
 8002474:	0800da2c 	.word	0x0800da2c
 8002478:	0800da3c 	.word	0x0800da3c
 800247c:	0800da4c 	.word	0x0800da4c
 8002480:	0800d8dc 	.word	0x0800d8dc
 8002484:	0800da58 	.word	0x0800da58
 8002488:	0800da68 	.word	0x0800da68
 800248c:	200003d0 	.word	0x200003d0
 8002490:	0800d6f4 	.word	0x0800d6f4
 8002494:	0800da70 	.word	0x0800da70
 8002498:	20000350 	.word	0x20000350
 800249c:	0800da7c 	.word	0x0800da7c

080024a0 <FINGER>:

void FINGER(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	buzzer(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f001 f840 	bl	800352c <buzzer>
	exitmenu = Delaymenu;
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <FINGER+0x1b4>)
 80024ae:	2214      	movs	r2, #20
 80024b0:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80024b2:	23ff      	movs	r3, #255	@ 0xff
 80024b4:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 80024b6:	4a68      	ldr	r2, [pc, #416]	@ (8002658 <FINGER+0x1b8>)
 80024b8:	4968      	ldr	r1, [pc, #416]	@ (800265c <FINGER+0x1bc>)
 80024ba:	4869      	ldr	r0, [pc, #420]	@ (8002660 <FINGER+0x1c0>)
 80024bc:	f7fd ffa6 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80024c0:	e0bc      	b.n	800263c <FINGER+0x19c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024c2:	200a      	movs	r0, #10
 80024c4:	f7fe f8fc 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80024c8:	4603      	mov	r3, r0
 80024ca:	713b      	strb	r3, [r7, #4]
		if (key_pressed == '*')
 80024cc:	793b      	ldrb	r3, [r7, #4]
 80024ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80024d0:	d127      	bne.n	8002522 <FINGER+0x82>
		{
			buzzer(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f001 f82a 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 80024d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002654 <FINGER+0x1b4>)
 80024da:	2214      	movs	r2, #20
 80024dc:	701a      	strb	r2, [r3, #0]
			status++;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	3301      	adds	r3, #1
 80024e2:	71fb      	strb	r3, [r7, #7]
			status = (status > 1) ? (-1) : status;
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d801      	bhi.n	80024ee <FINGER+0x4e>
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	e000      	b.n	80024f0 <FINGER+0x50>
 80024ee:	23ff      	movs	r3, #255	@ 0xff
 80024f0:	71fb      	strb	r3, [r7, #7]
			switch (status)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <FINGER+0x5e>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d006      	beq.n	800250a <FINGER+0x6a>
 80024fc:	e00b      	b.n	8002516 <FINGER+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 80024fe:	4a59      	ldr	r2, [pc, #356]	@ (8002664 <FINGER+0x1c4>)
 8002500:	4956      	ldr	r1, [pc, #344]	@ (800265c <FINGER+0x1bc>)
 8002502:	4857      	ldr	r0, [pc, #348]	@ (8002660 <FINGER+0x1c0>)
 8002504:	f7fd ff82 	bl	800040c <CLCD_I2C_Display>
				break;
 8002508:	e00b      	b.n	8002522 <FINGER+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 800250a:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <FINGER+0x1c8>)
 800250c:	4953      	ldr	r1, [pc, #332]	@ (800265c <FINGER+0x1bc>)
 800250e:	4854      	ldr	r0, [pc, #336]	@ (8002660 <FINGER+0x1c0>)
 8002510:	f7fd ff7c 	bl	800040c <CLCD_I2C_Display>
				break;
 8002514:	e005      	b.n	8002522 <FINGER+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002516:	4a55      	ldr	r2, [pc, #340]	@ (800266c <FINGER+0x1cc>)
 8002518:	4950      	ldr	r1, [pc, #320]	@ (800265c <FINGER+0x1bc>)
 800251a:	4851      	ldr	r0, [pc, #324]	@ (8002660 <FINGER+0x1c0>)
 800251c:	f7fd ff76 	bl	800040c <CLCD_I2C_Display>
				break;
 8002520:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002522:	793b      	ldrb	r3, [r7, #4]
 8002524:	2b23      	cmp	r3, #35	@ 0x23
 8002526:	f040 8089 	bne.w	800263c <FINGER+0x19c>
		{
			buzzer(1);
 800252a:	2001      	movs	r0, #1
 800252c:	f000 fffe 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 8002530:	4b48      	ldr	r3, [pc, #288]	@ (8002654 <FINGER+0x1b4>)
 8002532:	2214      	movs	r2, #20
 8002534:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <FINGER+0xa2>
 800253c:	2b01      	cmp	r3, #1
 800253e:	d008      	beq.n	8002552 <FINGER+0xb2>
 8002540:	e078      	b.n	8002634 <FINGER+0x194>
			{
			case 0:
			    add_finger();
 8002542:	f000 faf9 	bl	8002b38 <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002546:	4a47      	ldr	r2, [pc, #284]	@ (8002664 <FINGER+0x1c4>)
 8002548:	4944      	ldr	r1, [pc, #272]	@ (800265c <FINGER+0x1bc>)
 800254a:	4845      	ldr	r0, [pc, #276]	@ (8002660 <FINGER+0x1c0>)
 800254c:	f7fd ff5e 	bl	800040c <CLCD_I2C_Display>
				break;
 8002550:	e074      	b.n	800263c <FINGER+0x19c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002552:	4a47      	ldr	r2, [pc, #284]	@ (8002670 <FINGER+0x1d0>)
 8002554:	4947      	ldr	r1, [pc, #284]	@ (8002674 <FINGER+0x1d4>)
 8002556:	4842      	ldr	r0, [pc, #264]	@ (8002660 <FINGER+0x1c0>)
 8002558:	f7fd ff58 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	71bb      	strb	r3, [r7, #6]
				uint8_t backrm = 1;
 8002560:	2301      	movs	r3, #1
 8002562:	717b      	strb	r3, [r7, #5]
				while (backrm == 1)
 8002564:	e05d      	b.n	8002622 <FINGER+0x182>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002566:	200a      	movs	r0, #10
 8002568:	f7fe f8aa 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 800256c:	4603      	mov	r3, r0
 800256e:	713b      	strb	r3, [r7, #4]
					if (exitmenu == 0)
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <FINGER+0x1b4>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <FINGER+0xe8>
					{
						CLCD_I2C_Clear(&LCD1);
 8002578:	4839      	ldr	r0, [pc, #228]	@ (8002660 <FINGER+0x1c0>)
 800257a:	f7fd ff37 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800257e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002582:	f001 fce1 	bl	8003f48 <HAL_Delay>
						return;
 8002586:	e061      	b.n	800264c <FINGER+0x1ac>
					}
					if (key_pressed == '*')
 8002588:	793b      	ldrb	r3, [r7, #4]
 800258a:	2b2a      	cmp	r3, #42	@ 0x2a
 800258c:	d127      	bne.n	80025de <FINGER+0x13e>
					{
						buzzer(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f000 ffcc 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <FINGER+0x1b4>)
 8002596:	2214      	movs	r2, #20
 8002598:	701a      	strb	r2, [r3, #0]
						statusrm++;
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	3301      	adds	r3, #1
 800259e:	71bb      	strb	r3, [r7, #6]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d801      	bhi.n	80025aa <FINGER+0x10a>
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	e000      	b.n	80025ac <FINGER+0x10c>
 80025aa:	2300      	movs	r3, #0
 80025ac:	71bb      	strb	r3, [r7, #6]
						switch (statusrm)
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d002      	beq.n	80025ba <FINGER+0x11a>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d006      	beq.n	80025c6 <FINGER+0x126>
 80025b8:	e00b      	b.n	80025d2 <FINGER+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FINGER: REMOVE","=> Remove 1 Finger");
 80025ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <FINGER+0x1d8>)
 80025bc:	492f      	ldr	r1, [pc, #188]	@ (800267c <FINGER+0x1dc>)
 80025be:	4828      	ldr	r0, [pc, #160]	@ (8002660 <FINGER+0x1c0>)
 80025c0:	f7fd ff24 	bl	800040c <CLCD_I2C_Display>
							break;
 80025c4:	e00b      	b.n	80025de <FINGER+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"FINGER: REMOVE","=> Remove All");
 80025c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002680 <FINGER+0x1e0>)
 80025c8:	492c      	ldr	r1, [pc, #176]	@ (800267c <FINGER+0x1dc>)
 80025ca:	4825      	ldr	r0, [pc, #148]	@ (8002660 <FINGER+0x1c0>)
 80025cc:	f7fd ff1e 	bl	800040c <CLCD_I2C_Display>
							break;
 80025d0:	e005      	b.n	80025de <FINGER+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"FINGER: REMOVE","=> Back");
 80025d2:	4a26      	ldr	r2, [pc, #152]	@ (800266c <FINGER+0x1cc>)
 80025d4:	4929      	ldr	r1, [pc, #164]	@ (800267c <FINGER+0x1dc>)
 80025d6:	4822      	ldr	r0, [pc, #136]	@ (8002660 <FINGER+0x1c0>)
 80025d8:	f7fd ff18 	bl	800040c <CLCD_I2C_Display>
							break;
 80025dc:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80025de:	793b      	ldrb	r3, [r7, #4]
 80025e0:	2b23      	cmp	r3, #35	@ 0x23
 80025e2:	d11e      	bne.n	8002622 <FINGER+0x182>
					{
						buzzer(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f000 ffa1 	bl	800352c <buzzer>
						exitmenu = Delaymenu;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <FINGER+0x1b4>)
 80025ec:	2214      	movs	r2, #20
 80025ee:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d002      	beq.n	80025fc <FINGER+0x15c>
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d008      	beq.n	800260c <FINGER+0x16c>
 80025fa:	e00f      	b.n	800261c <FINGER+0x17c>
						{
						case 1:
							remove_id_finger();
 80025fc:	f000 fd2c 	bl	8003058 <remove_id_finger>
							CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove 1 Finger");
 8002600:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <FINGER+0x1d8>)
 8002602:	4916      	ldr	r1, [pc, #88]	@ (800265c <FINGER+0x1bc>)
 8002604:	4816      	ldr	r0, [pc, #88]	@ (8002660 <FINGER+0x1c0>)
 8002606:	f7fd ff01 	bl	800040c <CLCD_I2C_Display>
							break;
 800260a:	e00a      	b.n	8002622 <FINGER+0x182>
						case 2:
							remove_all_finger();
 800260c:	f000 fd94 	bl	8003138 <remove_all_finger>
							CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <FINGER+0x1e0>)
 8002612:	4912      	ldr	r1, [pc, #72]	@ (800265c <FINGER+0x1bc>)
 8002614:	4812      	ldr	r0, [pc, #72]	@ (8002660 <FINGER+0x1c0>)
 8002616:	f7fd fef9 	bl	800040c <CLCD_I2C_Display>
                			break;
 800261a:	e002      	b.n	8002622 <FINGER+0x182>
						default:
							backrm=0;
 800261c:	2300      	movs	r3, #0
 800261e:	717b      	strb	r3, [r7, #5]
							break;
 8002620:	bf00      	nop
				while (backrm == 1)
 8002622:	797b      	ldrb	r3, [r7, #5]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d09e      	beq.n	8002566 <FINGER+0xc6>
						}
					}
				}
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <FINGER+0x1c8>)
 800262a:	490c      	ldr	r1, [pc, #48]	@ (800265c <FINGER+0x1bc>)
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <FINGER+0x1c0>)
 800262e:	f7fd feed 	bl	800040c <CLCD_I2C_Display>
				break;
 8002632:	e003      	b.n	800263c <FINGER+0x19c>
			default:
				exitmenu=0;
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <FINGER+0x1b4>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
				break;
 800263a:	bf00      	nop
	while (exitmenu )
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <FINGER+0x1b4>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f47f af3e 	bne.w	80024c2 <FINGER+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <FINGER+0x1c0>)
 8002648:	f7fd fed0 	bl	80003ec <CLCD_I2C_Clear>
}
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000020 	.word	0x20000020
 8002658:	0800d774 	.word	0x0800d774
 800265c:	0800da8c 	.word	0x0800da8c
 8002660:	200003dc 	.word	0x200003dc
 8002664:	0800da9c 	.word	0x0800da9c
 8002668:	0800daac 	.word	0x0800daac
 800266c:	0800d7c0 	.word	0x0800d7c0
 8002670:	0800d7c8 	.word	0x0800d7c8
 8002674:	0800d7d4 	.word	0x0800d7d4
 8002678:	0800dac0 	.word	0x0800dac0
 800267c:	0800dad4 	.word	0x0800dad4
 8002680:	0800da2c 	.word	0x0800da2c

08002684 <PASSWORD>:

void PASSWORD(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
	buzzer(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 ff4e 	bl	800352c <buzzer>
	exitmenu = Delaymenu;
 8002690:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <PASSWORD+0xdc>)
 8002692:	2214      	movs	r2, #20
 8002694:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002696:	23ff      	movs	r3, #255	@ 0xff
 8002698:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 800269a:	4a32      	ldr	r2, [pc, #200]	@ (8002764 <PASSWORD+0xe0>)
 800269c:	4932      	ldr	r1, [pc, #200]	@ (8002768 <PASSWORD+0xe4>)
 800269e:	4833      	ldr	r0, [pc, #204]	@ (800276c <PASSWORD+0xe8>)
 80026a0:	f7fd feb4 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80026a4:	e052      	b.n	800274c <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80026a6:	200a      	movs	r0, #10
 80026a8:	f7fe f80a 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80026ac:	4603      	mov	r3, r0
 80026ae:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80026b4:	d127      	bne.n	8002706 <PASSWORD+0x82>
		{
			buzzer(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 ff38 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 80026bc:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <PASSWORD+0xdc>)
 80026be:	2214      	movs	r2, #20
 80026c0:	701a      	strb	r2, [r3, #0]
			status++;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	3301      	adds	r3, #1
 80026c6:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d801      	bhi.n	80026d2 <PASSWORD+0x4e>
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	e000      	b.n	80026d4 <PASSWORD+0x50>
 80026d2:	2300      	movs	r3, #0
 80026d4:	71fb      	strb	r3, [r7, #7]
			switch (status)
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <PASSWORD+0x5e>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d006      	beq.n	80026ee <PASSWORD+0x6a>
 80026e0:	e00b      	b.n	80026fa <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 80026e2:	4a23      	ldr	r2, [pc, #140]	@ (8002770 <PASSWORD+0xec>)
 80026e4:	4920      	ldr	r1, [pc, #128]	@ (8002768 <PASSWORD+0xe4>)
 80026e6:	4821      	ldr	r0, [pc, #132]	@ (800276c <PASSWORD+0xe8>)
 80026e8:	f7fd fe90 	bl	800040c <CLCD_I2C_Display>
				break;
 80026ec:	e00b      	b.n	8002706 <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 80026ee:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <PASSWORD+0xf0>)
 80026f0:	491d      	ldr	r1, [pc, #116]	@ (8002768 <PASSWORD+0xe4>)
 80026f2:	481e      	ldr	r0, [pc, #120]	@ (800276c <PASSWORD+0xe8>)
 80026f4:	f7fd fe8a 	bl	800040c <CLCD_I2C_Display>
				break;
 80026f8:	e005      	b.n	8002706 <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 80026fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <PASSWORD+0xf4>)
 80026fc:	491a      	ldr	r1, [pc, #104]	@ (8002768 <PASSWORD+0xe4>)
 80026fe:	481b      	ldr	r0, [pc, #108]	@ (800276c <PASSWORD+0xe8>)
 8002700:	f7fd fe84 	bl	800040c <CLCD_I2C_Display>
				break;
 8002704:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002706:	79bb      	ldrb	r3, [r7, #6]
 8002708:	2b23      	cmp	r3, #35	@ 0x23
 800270a:	d11f      	bne.n	800274c <PASSWORD+0xc8>
		{
			buzzer(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f000 ff0d 	bl	800352c <buzzer>
			exitmenu = Delaymenu;
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <PASSWORD+0xdc>)
 8002714:	2214      	movs	r2, #20
 8002716:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <PASSWORD+0xa0>
 800271e:	2b01      	cmp	r3, #1
 8002720:	d008      	beq.n	8002734 <PASSWORD+0xb0>
 8002722:	e00f      	b.n	8002744 <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002724:	f000 fe10 	bl	8003348 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002728:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <PASSWORD+0xec>)
 800272a:	490f      	ldr	r1, [pc, #60]	@ (8002768 <PASSWORD+0xe4>)
 800272c:	480f      	ldr	r0, [pc, #60]	@ (800276c <PASSWORD+0xe8>)
 800272e:	f7fd fe6d 	bl	800040c <CLCD_I2C_Display>
                break;
 8002732:	e00b      	b.n	800274c <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002734:	f000 fe6a 	bl	800340c <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002738:	4a0e      	ldr	r2, [pc, #56]	@ (8002774 <PASSWORD+0xf0>)
 800273a:	490b      	ldr	r1, [pc, #44]	@ (8002768 <PASSWORD+0xe4>)
 800273c:	480b      	ldr	r0, [pc, #44]	@ (800276c <PASSWORD+0xe8>)
 800273e:	f7fd fe65 	bl	800040c <CLCD_I2C_Display>
                break;
 8002742:	e003      	b.n	800274c <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <PASSWORD+0xdc>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
                break;
 800274a:	bf00      	nop
	while (exitmenu )
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <PASSWORD+0xdc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1a8      	bne.n	80026a6 <PASSWORD+0x22>
            }
        }
    }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000020 	.word	0x20000020
 8002764:	0800d774 	.word	0x0800d774
 8002768:	0800dae4 	.word	0x0800dae4
 800276c:	200003dc 	.word	0x200003dc
 8002770:	0800daf8 	.word	0x0800daf8
 8002774:	0800db08 	.word	0x0800db08
 8002778:	0800d7c0 	.word	0x0800d7c0

0800277c <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2208      	movs	r2, #8
 800278c:	4619      	mov	r1, r3
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7fe facd 	bl	8000d2e <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002794:	7cbb      	ldrb	r3, [r7, #18]
 8002796:	2bff      	cmp	r3, #255	@ 0xff
 8002798:	d001      	beq.n	800279e <CheckUID+0x22>
		return 0;
 800279a:	2300      	movs	r3, #0
 800279c:	e016      	b.n	80027cc <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
 80027a2:	e00f      	b.n	80027c4 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	3318      	adds	r3, #24
 80027b0:	443b      	add	r3, r7
 80027b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <CheckUID+0x42>
			return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e006      	b.n	80027cc <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	3301      	adds	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d9ec      	bls.n	80027a4 <CheckUID+0x28>
	}
	return 1;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <removeuid>:

void removeuid(uint32_t addressrm)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3306      	adds	r3, #6
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fa50 	bl	8000c88 <Flash_Write_2Byte>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <startadd>:
void startadd(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 80027f4:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <startadd+0x90>)
 80027f6:	4923      	ldr	r1, [pc, #140]	@ (8002884 <startadd+0x94>)
 80027f8:	4823      	ldr	r0, [pc, #140]	@ (8002888 <startadd+0x98>)
 80027fa:	f7fd fe07 	bl	800040c <CLCD_I2C_Display>
	setaddress();
 80027fe:	f000 f851 	bl	80028a4 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002802:	4822      	ldr	r0, [pc, #136]	@ (800288c <startadd+0x9c>)
 8002804:	f000 ff08 	bl	8003618 <TM_MFRC522_Check>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f9      	bne.n	8002802 <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 800280e:	481f      	ldr	r0, [pc, #124]	@ (800288c <startadd+0x9c>)
 8002810:	f7ff fb30 	bl	8001e74 <CheckListUID>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <startadd+0x4a>
				{
					CardID[5] = 0x81;
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <startadd+0x9c>)
 800281c:	2281      	movs	r2, #129	@ 0x81
 800281e:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <startadd+0xa0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2206      	movs	r2, #6
 8002826:	4919      	ldr	r1, [pc, #100]	@ (800288c <startadd+0x9c>)
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fa45 	bl	8000cb8 <Flash_Write_Array>
					AddressUID += 8;
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <startadd+0xa0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3308      	adds	r3, #8
 8002834:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <startadd+0xa0>)
 8002836:	6013      	str	r3, [r2, #0]
					break;
 8002838:	e011      	b.n	800285e <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 800283a:	4a16      	ldr	r2, [pc, #88]	@ (8002894 <startadd+0xa4>)
 800283c:	4916      	ldr	r1, [pc, #88]	@ (8002898 <startadd+0xa8>)
 800283e:	4812      	ldr	r0, [pc, #72]	@ (8002888 <startadd+0x98>)
 8002840:	f7fd fde4 	bl	800040c <CLCD_I2C_Display>
					buzzer(5);
 8002844:	2005      	movs	r0, #5
 8002846:	f000 fe71 	bl	800352c <buzzer>
					HAL_Delay(1000);
 800284a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800284e:	f001 fb7b 	bl	8003f48 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002852:	4a0b      	ldr	r2, [pc, #44]	@ (8002880 <startadd+0x90>)
 8002854:	490b      	ldr	r1, [pc, #44]	@ (8002884 <startadd+0x94>)
 8002856:	480c      	ldr	r0, [pc, #48]	@ (8002888 <startadd+0x98>)
 8002858:	f7fd fdd8 	bl	800040c <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800285c:	e7d1      	b.n	8002802 <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 800285e:	4a0f      	ldr	r2, [pc, #60]	@ (800289c <startadd+0xac>)
 8002860:	490f      	ldr	r1, [pc, #60]	@ (80028a0 <startadd+0xb0>)
 8002862:	4809      	ldr	r0, [pc, #36]	@ (8002888 <startadd+0x98>)
 8002864:	f7fd fdd2 	bl	800040c <CLCD_I2C_Display>
	buzzer(1);
 8002868:	2001      	movs	r0, #1
 800286a:	f000 fe5f 	bl	800352c <buzzer>
	HAL_Delay(1000);
 800286e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002872:	f001 fb69 	bl	8003f48 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002876:	4804      	ldr	r0, [pc, #16]	@ (8002888 <startadd+0x98>)
 8002878:	f7fd fdb8 	bl	80003ec <CLCD_I2C_Clear>
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0800db18 	.word	0x0800db18
 8002884:	0800d914 	.word	0x0800d914
 8002888:	200003dc 	.word	0x200003dc
 800288c:	200003e8 	.word	0x200003e8
 8002890:	20000024 	.word	0x20000024
 8002894:	0800db2c 	.word	0x0800db2c
 8002898:	0800db40 	.word	0x0800db40
 800289c:	0800db50 	.word	0x0800db50
 80028a0:	0800db60 	.word	0x0800db60

080028a4 <setaddress>:
void setaddress(void){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <setaddress+0x30>)
 80028ac:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80028ae:	e002      	b.n	80028b6 <setaddress+0x12>
	{
		pt = pt + 8;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3308      	adds	r3, #8
 80028b4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3305      	adds	r3, #5
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fa1f 	bl	8000cfe <Flash_Read_Byte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2bff      	cmp	r3, #255	@ 0xff
 80028c4:	d1f4      	bne.n	80028b0 <setaddress+0xc>
	}
	AddressUID = pt;
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <setaddress+0x34>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	0800f000 	.word	0x0800f000
 80028d8:	20000024 	.word	0x20000024

080028dc <remoall>:

void remoall(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <remoall+0x34>)
 80028e4:	607b      	str	r3, [r7, #4]
	Flash_Erase(pt);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f9b2 	bl	8000c50 <Flash_Erase>
	set_default_password();
 80028ec:	f000 fd8e 	bl	800340c <set_default_password>
	remove_all_finger();
 80028f0:	f000 fc22 	bl	8003138 <remove_all_finger>
	CLCD_I2C_Display(&LCD1, " REMOVE ALL CARD", "  SUCCESSFULLY");
 80028f4:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <remoall+0x38>)
 80028f6:	4908      	ldr	r1, [pc, #32]	@ (8002918 <remoall+0x3c>)
 80028f8:	4808      	ldr	r0, [pc, #32]	@ (800291c <remoall+0x40>)
 80028fa:	f7fd fd87 	bl	800040c <CLCD_I2C_Display>
	HAL_Delay(1000);
 80028fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002902:	f001 fb21 	bl	8003f48 <HAL_Delay>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	0800f000 	.word	0x0800f000
 8002914:	0800db70 	.word	0x0800db70
 8002918:	0800db80 	.word	0x0800db80
 800291c:	200003dc 	.word	0x200003dc

08002920 <addface>:

void addface(uint8_t key)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	2100      	movs	r1, #0
 800292e:	4825      	ldr	r0, [pc, #148]	@ (80029c4 <addface+0xa4>)
 8002930:	f00a fa02 	bl	800cd38 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Add.%d", key);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <addface+0xa8>)
 8002938:	210a      	movs	r1, #10
 800293a:	4824      	ldr	r0, [pc, #144]	@ (80029cc <addface+0xac>)
 800293c:	f00a f9a8 	bl	800cc90 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002940:	4822      	ldr	r0, [pc, #136]	@ (80029cc <addface+0xac>)
 8002942:	f7fd fc0d 	bl	8000160 <strlen>
 8002946:	4603      	mov	r3, r0
 8002948:	4619      	mov	r1, r3
 800294a:	4820      	ldr	r0, [pc, #128]	@ (80029cc <addface+0xac>)
 800294c:	f009 fd3a 	bl	800c3c4 <CDC_Transmit_FS>
    CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002950:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <addface+0xb0>)
 8002952:	4920      	ldr	r1, [pc, #128]	@ (80029d4 <addface+0xb4>)
 8002954:	4820      	ldr	r0, [pc, #128]	@ (80029d8 <addface+0xb8>)
 8002956:	f7fd fd59 	bl	800040c <CLCD_I2C_Display>
    exitmenu = 60;
 800295a:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <addface+0xbc>)
 800295c:	223c      	movs	r2, #60	@ 0x3c
 800295e:	701a      	strb	r2, [r3, #0]
    while(exitmenu != 0){
 8002960:	e023      	b.n	80029aa <addface+0x8a>
        if(Rx_Buffer[0] == 'T'){
 8002962:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <addface+0xa4>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b25b      	sxtb	r3, r3
 8002968:	2b54      	cmp	r3, #84	@ 0x54
 800296a:	d10c      	bne.n	8002986 <addface+0x66>
            CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <addface+0xc0>)
 800296e:	491d      	ldr	r1, [pc, #116]	@ (80029e4 <addface+0xc4>)
 8002970:	4819      	ldr	r0, [pc, #100]	@ (80029d8 <addface+0xb8>)
 8002972:	f7fd fd4b 	bl	800040c <CLCD_I2C_Display>
            buzzer(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f000 fdd8 	bl	800352c <buzzer>
            HAL_Delay(2000);
 800297c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002980:	f001 fae2 	bl	8003f48 <HAL_Delay>
            break;
 8002984:	e015      	b.n	80029b2 <addface+0x92>
        }
        else if(Rx_Buffer[0] == 'F'){
 8002986:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <addface+0xa4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b25b      	sxtb	r3, r3
 800298c:	2b46      	cmp	r3, #70	@ 0x46
 800298e:	d10c      	bne.n	80029aa <addface+0x8a>
            CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8002990:	4a0f      	ldr	r2, [pc, #60]	@ (80029d0 <addface+0xb0>)
 8002992:	4915      	ldr	r1, [pc, #84]	@ (80029e8 <addface+0xc8>)
 8002994:	4810      	ldr	r0, [pc, #64]	@ (80029d8 <addface+0xb8>)
 8002996:	f7fd fd39 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 800299a:	2005      	movs	r0, #5
 800299c:	f000 fdc6 	bl	800352c <buzzer>
            HAL_Delay(2000);
 80029a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029a4:	f001 fad0 	bl	8003f48 <HAL_Delay>
            break;
 80029a8:	e003      	b.n	80029b2 <addface+0x92>
    while(exitmenu != 0){
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <addface+0xbc>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1d7      	bne.n	8002962 <addface+0x42>
        }
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80029b2:	2280      	movs	r2, #128	@ 0x80
 80029b4:	2100      	movs	r1, #0
 80029b6:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <addface+0xa4>)
 80029b8:	f00a f9be 	bl	800cd38 <memset>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000350 	.word	0x20000350
 80029c8:	0800db94 	.word	0x0800db94
 80029cc:	200003d0 	.word	0x200003d0
 80029d0:	0800d6f4 	.word	0x0800d6f4
 80029d4:	0800da70 	.word	0x0800da70
 80029d8:	200003dc 	.word	0x200003dc
 80029dc:	20000020 	.word	0x20000020
 80029e0:	0800d960 	.word	0x0800d960
 80029e4:	0800db9c 	.word	0x0800db9c
 80029e8:	0800dbac 	.word	0x0800dbac

080029ec <removeface>:

void removeface(uint8_t key)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	2100      	movs	r1, #0
 80029fa:	4825      	ldr	r0, [pc, #148]	@ (8002a90 <removeface+0xa4>)
 80029fc:	f00a f99c 	bl	800cd38 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Rem.%d", key);
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4a24      	ldr	r2, [pc, #144]	@ (8002a94 <removeface+0xa8>)
 8002a04:	210a      	movs	r1, #10
 8002a06:	4824      	ldr	r0, [pc, #144]	@ (8002a98 <removeface+0xac>)
 8002a08:	f00a f942 	bl	800cc90 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002a0c:	4822      	ldr	r0, [pc, #136]	@ (8002a98 <removeface+0xac>)
 8002a0e:	f7fd fba7 	bl	8000160 <strlen>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4820      	ldr	r0, [pc, #128]	@ (8002a98 <removeface+0xac>)
 8002a18:	f009 fcd4 	bl	800c3c4 <CDC_Transmit_FS>
    CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <removeface+0xb0>)
 8002a1e:	4920      	ldr	r1, [pc, #128]	@ (8002aa0 <removeface+0xb4>)
 8002a20:	4820      	ldr	r0, [pc, #128]	@ (8002aa4 <removeface+0xb8>)
 8002a22:	f7fd fcf3 	bl	800040c <CLCD_I2C_Display>
    exitmenu = 60;
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <removeface+0xbc>)
 8002a28:	223c      	movs	r2, #60	@ 0x3c
 8002a2a:	701a      	strb	r2, [r3, #0]
    while(exitmenu != 0){
 8002a2c:	e023      	b.n	8002a76 <removeface+0x8a>
        if(Rx_Buffer[0] == 'T'){
 8002a2e:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <removeface+0xa4>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	2b54      	cmp	r3, #84	@ 0x54
 8002a36:	d10c      	bne.n	8002a52 <removeface+0x66>
            CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8002a38:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <removeface+0xb0>)
 8002a3a:	491c      	ldr	r1, [pc, #112]	@ (8002aac <removeface+0xc0>)
 8002a3c:	4819      	ldr	r0, [pc, #100]	@ (8002aa4 <removeface+0xb8>)
 8002a3e:	f7fd fce5 	bl	800040c <CLCD_I2C_Display>
            buzzer(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 fd72 	bl	800352c <buzzer>
            HAL_Delay(2000);
 8002a48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a4c:	f001 fa7c 	bl	8003f48 <HAL_Delay>
            break;
 8002a50:	e015      	b.n	8002a7e <removeface+0x92>
        }
        else if(Rx_Buffer[0] == 'F'){
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <removeface+0xa4>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b25b      	sxtb	r3, r3
 8002a58:	2b46      	cmp	r3, #70	@ 0x46
 8002a5a:	d10c      	bne.n	8002a76 <removeface+0x8a>
            CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a9c <removeface+0xb0>)
 8002a5e:	4914      	ldr	r1, [pc, #80]	@ (8002ab0 <removeface+0xc4>)
 8002a60:	4810      	ldr	r0, [pc, #64]	@ (8002aa4 <removeface+0xb8>)
 8002a62:	f7fd fcd3 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 8002a66:	2005      	movs	r0, #5
 8002a68:	f000 fd60 	bl	800352c <buzzer>
            HAL_Delay(2000);
 8002a6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a70:	f001 fa6a 	bl	8003f48 <HAL_Delay>
            break;
 8002a74:	e003      	b.n	8002a7e <removeface+0x92>
    while(exitmenu != 0){
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <removeface+0xbc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1d7      	bne.n	8002a2e <removeface+0x42>
        }
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	2100      	movs	r1, #0
 8002a82:	4803      	ldr	r0, [pc, #12]	@ (8002a90 <removeface+0xa4>)
 8002a84:	f00a f958 	bl	800cd38 <memset>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000350 	.word	0x20000350
 8002a94:	0800dbbc 	.word	0x0800dbbc
 8002a98:	200003d0 	.word	0x200003d0
 8002a9c:	0800d6f4 	.word	0x0800d6f4
 8002aa0:	0800da70 	.word	0x0800da70
 8002aa4:	200003dc 	.word	0x200003dc
 8002aa8:	20000020 	.word	0x20000020
 8002aac:	0800dbc4 	.word	0x0800dbc4
 8002ab0:	0800dbd4 	.word	0x0800dbd4

08002ab4 <checkfaceid>:

uint8_t checkfaceid(uint8_t key){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	481a      	ldr	r0, [pc, #104]	@ (8002b2c <checkfaceid+0x78>)
 8002ac4:	f00a f938 	bl	800cd38 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Che.%d", key);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <checkfaceid+0x7c>)
 8002acc:	210a      	movs	r1, #10
 8002ace:	4819      	ldr	r0, [pc, #100]	@ (8002b34 <checkfaceid+0x80>)
 8002ad0:	f00a f8de 	bl	800cc90 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002ad4:	4817      	ldr	r0, [pc, #92]	@ (8002b34 <checkfaceid+0x80>)
 8002ad6:	f7fd fb43 	bl	8000160 <strlen>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <checkfaceid+0x80>)
 8002ae0:	f009 fc70 	bl	800c3c4 <CDC_Transmit_FS>
    while(Rx_Buffer[0] == 0){
 8002ae4:	e000      	b.n	8002ae8 <checkfaceid+0x34>
        continue;
 8002ae6:	bf00      	nop
    while(Rx_Buffer[0] == 0){
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <checkfaceid+0x78>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f9      	beq.n	8002ae6 <checkfaceid+0x32>
    }
    HAL_Delay(1000);
 8002af2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002af6:	f001 fa27 	bl	8003f48 <HAL_Delay>
    if(Rx_Buffer[0] == 'T'){
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <checkfaceid+0x78>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	2b54      	cmp	r3, #84	@ 0x54
 8002b02:	d101      	bne.n	8002b08 <checkfaceid+0x54>
        return key;
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	e00c      	b.n	8002b22 <checkfaceid+0x6e>
    } else if(Rx_Buffer[0] == 'F'){
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <checkfaceid+0x78>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	2b46      	cmp	r3, #70	@ 0x46
 8002b10:	d101      	bne.n	8002b16 <checkfaceid+0x62>
        return 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e005      	b.n	8002b22 <checkfaceid+0x6e>
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002b16:	2280      	movs	r2, #128	@ 0x80
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4804      	ldr	r0, [pc, #16]	@ (8002b2c <checkfaceid+0x78>)
 8002b1c:	f00a f90c 	bl	800cd38 <memset>
    return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000350 	.word	0x20000350
 8002b30:	0800dbe4 	.word	0x0800dbe4
 8002b34:	200003d0 	.word	0x200003d0

08002b38 <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
    ID = InputID_FINGER();
 8002b3e:	f7fe fa2d 	bl	8000f9c <InputID_FINGER>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4bb5      	ldr	r3, [pc, #724]	@ (8002e1c <add_finger+0x2e4>)
 8002b48:	701a      	strb	r2, [r3, #0]
    if(CheckKeyFinger(ID)!=0)
 8002b4a:	4bb4      	ldr	r3, [pc, #720]	@ (8002e1c <add_finger+0x2e4>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fb3c 	bl	80031cc <CheckKeyFinger>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <add_finger+0x3c>
    {
		CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 8002b5a:	4ab1      	ldr	r2, [pc, #708]	@ (8002e20 <add_finger+0x2e8>)
 8002b5c:	49b1      	ldr	r1, [pc, #708]	@ (8002e24 <add_finger+0x2ec>)
 8002b5e:	48b2      	ldr	r0, [pc, #712]	@ (8002e28 <add_finger+0x2f0>)
 8002b60:	f7fd fc54 	bl	800040c <CLCD_I2C_Display>
		buzzer(3);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 fce1 	bl	800352c <buzzer>
		HAL_Delay(1000);
 8002b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b6e:	f001 f9eb 	bl	8003f48 <HAL_Delay>
 8002b72:	e1d5      	b.n	8002f20 <add_finger+0x3e8>
    }
    else{
        uint32_t start_time_finger = HAL_GetTick();
 8002b74:	f001 f9de 	bl	8003f34 <HAL_GetTick>
 8002b78:	6078      	str	r0, [r7, #4]
        while (1)
        {
            if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002b7a:	f001 f9db 	bl	8003f34 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d90c      	bls.n	8002ba6 <add_finger+0x6e>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002b8c:	4aa7      	ldr	r2, [pc, #668]	@ (8002e2c <add_finger+0x2f4>)
 8002b8e:	49a8      	ldr	r1, [pc, #672]	@ (8002e30 <add_finger+0x2f8>)
 8002b90:	48a5      	ldr	r0, [pc, #660]	@ (8002e28 <add_finger+0x2f0>)
 8002b92:	f7fd fc3b 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002b96:	2005      	movs	r0, #5
 8002b98:	f000 fcc8 	bl	800352c <buzzer>
                HAL_Delay(2000);
 8002b9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ba0:	f001 f9d2 	bl	8003f48 <HAL_Delay>
                return;
 8002ba4:	e1bc      	b.n	8002f20 <add_finger+0x3e8>
            }

            collect_finger();
 8002ba6:	f7fd feab 	bl	8000900 <collect_finger>
            CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 8002baa:	4aa2      	ldr	r2, [pc, #648]	@ (8002e34 <add_finger+0x2fc>)
 8002bac:	49a2      	ldr	r1, [pc, #648]	@ (8002e38 <add_finger+0x300>)
 8002bae:	489e      	ldr	r0, [pc, #632]	@ (8002e28 <add_finger+0x2f0>)
 8002bb0:	f7fd fc2c 	bl	800040c <CLCD_I2C_Display>
            HAL_Delay(1000);
 8002bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bb8:	f001 f9c6 	bl	8003f48 <HAL_Delay>

            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4899      	ldr	r0, [pc, #612]	@ (8002e28 <add_finger+0x2f0>)
 8002bc2:	f7fd fba9 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002bc6:	499d      	ldr	r1, [pc, #628]	@ (8002e3c <add_finger+0x304>)
 8002bc8:	4897      	ldr	r0, [pc, #604]	@ (8002e28 <add_finger+0x2f0>)
 8002bca:	f7fd fbf8 	bl	80003be <CLCD_I2C_WriteString>
            tmp=0xff;
 8002bce:	4b9c      	ldr	r3, [pc, #624]	@ (8002e40 <add_finger+0x308>)
 8002bd0:	22ff      	movs	r2, #255	@ 0xff
 8002bd2:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00){
 8002bd4:	e021      	b.n	8002c1a <add_finger+0xe2>
                collect_finger();
 8002bd6:	f7fd fe93 	bl	8000900 <collect_finger>
                collect_finger();
 8002bda:	f7fd fe91 	bl	8000900 <collect_finger>
                tmp= collect_finger();
 8002bde:	f7fd fe8f 	bl	8000900 <collect_finger>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a96      	ldr	r2, [pc, #600]	@ (8002e40 <add_finger+0x308>)
 8002be6:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002be8:	f001 f9a4 	bl	8003f34 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d90f      	bls.n	8002c1a <add_finger+0xe2>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002bfa:	4a8c      	ldr	r2, [pc, #560]	@ (8002e2c <add_finger+0x2f4>)
 8002bfc:	498c      	ldr	r1, [pc, #560]	@ (8002e30 <add_finger+0x2f8>)
 8002bfe:	488a      	ldr	r0, [pc, #552]	@ (8002e28 <add_finger+0x2f0>)
 8002c00:	f7fd fc04 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002c04:	2005      	movs	r0, #5
 8002c06:	f000 fc91 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002c0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c0e:	f001 f99b 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002c12:	4b8c      	ldr	r3, [pc, #560]	@ (8002e44 <add_finger+0x30c>)
 8002c14:	2214      	movs	r2, #20
 8002c16:	701a      	strb	r2, [r3, #0]
                    return;
 8002c18:	e182      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00){
 8002c1a:	4b89      	ldr	r3, [pc, #548]	@ (8002e40 <add_finger+0x308>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1d9      	bne.n	8002bd6 <add_finger+0x9e>
                }
            }
            tmp=0xff;
 8002c22:	4b87      	ldr	r3, [pc, #540]	@ (8002e40 <add_finger+0x308>)
 8002c24:	22ff      	movs	r2, #255	@ 0xff
 8002c26:	601a      	str	r2, [r3, #0]
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	487e      	ldr	r0, [pc, #504]	@ (8002e28 <add_finger+0x2f0>)
 8002c2e:	f7fd fb73 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002c32:	4985      	ldr	r1, [pc, #532]	@ (8002e48 <add_finger+0x310>)
 8002c34:	487c      	ldr	r0, [pc, #496]	@ (8002e28 <add_finger+0x2f0>)
 8002c36:	f7fd fbc2 	bl	80003be <CLCD_I2C_WriteString>
 8002c3a:	2064      	movs	r0, #100	@ 0x64
 8002c3c:	f001 f984 	bl	8003f48 <HAL_Delay>
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002c40:	2201      	movs	r2, #1
 8002c42:	2100      	movs	r1, #0
 8002c44:	4878      	ldr	r0, [pc, #480]	@ (8002e28 <add_finger+0x2f0>)
 8002c46:	f7fd fb67 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002c4a:	4980      	ldr	r1, [pc, #512]	@ (8002e4c <add_finger+0x314>)
 8002c4c:	4876      	ldr	r0, [pc, #472]	@ (8002e28 <add_finger+0x2f0>)
 8002c4e:	f7fd fbb6 	bl	80003be <CLCD_I2C_WriteString>
            tmp=0xff;
 8002c52:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <add_finger+0x308>)
 8002c54:	22ff      	movs	r2, #255	@ 0xff
 8002c56:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00)    {
 8002c58:	e01e      	b.n	8002c98 <add_finger+0x160>
                tmp=img2tz(0x01);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fd fe7c 	bl	8000958 <img2tz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a77      	ldr	r2, [pc, #476]	@ (8002e40 <add_finger+0x308>)
 8002c64:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002c66:	f001 f965 	bl	8003f34 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d90f      	bls.n	8002c98 <add_finger+0x160>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002c78:	4a6c      	ldr	r2, [pc, #432]	@ (8002e2c <add_finger+0x2f4>)
 8002c7a:	496d      	ldr	r1, [pc, #436]	@ (8002e30 <add_finger+0x2f8>)
 8002c7c:	486a      	ldr	r0, [pc, #424]	@ (8002e28 <add_finger+0x2f0>)
 8002c7e:	f7fd fbc5 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002c82:	2005      	movs	r0, #5
 8002c84:	f000 fc52 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002c88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c8c:	f001 f95c 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002c90:	4b6c      	ldr	r3, [pc, #432]	@ (8002e44 <add_finger+0x30c>)
 8002c92:	2214      	movs	r2, #20
 8002c94:	701a      	strb	r2, [r3, #0]
                    return;
 8002c96:	e143      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00)    {
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <add_finger+0x308>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1dc      	bne.n	8002c5a <add_finger+0x122>
                }
            }
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4860      	ldr	r0, [pc, #384]	@ (8002e28 <add_finger+0x2f0>)
 8002ca6:	f7fd fb37 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 8002caa:	4969      	ldr	r1, [pc, #420]	@ (8002e50 <add_finger+0x318>)
 8002cac:	485e      	ldr	r0, [pc, #376]	@ (8002e28 <add_finger+0x2f0>)
 8002cae:	f7fd fb86 	bl	80003be <CLCD_I2C_WriteString>
 8002cb2:	2064      	movs	r0, #100	@ 0x64
 8002cb4:	f001 f948 	bl	8003f48 <HAL_Delay>
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2100      	movs	r1, #0
 8002cbc:	485a      	ldr	r0, [pc, #360]	@ (8002e28 <add_finger+0x2f0>)
 8002cbe:	f7fd fb2b 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002cc2:	495e      	ldr	r1, [pc, #376]	@ (8002e3c <add_finger+0x304>)
 8002cc4:	4858      	ldr	r0, [pc, #352]	@ (8002e28 <add_finger+0x2f0>)
 8002cc6:	f7fd fb7a 	bl	80003be <CLCD_I2C_WriteString>
            tmp=0xff;
 8002cca:	4b5d      	ldr	r3, [pc, #372]	@ (8002e40 <add_finger+0x308>)
 8002ccc:	22ff      	movs	r2, #255	@ 0xff
 8002cce:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00)    {
 8002cd0:	e021      	b.n	8002d16 <add_finger+0x1de>
                collect_finger();
 8002cd2:	f7fd fe15 	bl	8000900 <collect_finger>
                collect_finger();
 8002cd6:	f7fd fe13 	bl	8000900 <collect_finger>
                tmp=collect_finger();
 8002cda:	f7fd fe11 	bl	8000900 <collect_finger>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a57      	ldr	r2, [pc, #348]	@ (8002e40 <add_finger+0x308>)
 8002ce2:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002ce4:	f001 f926 	bl	8003f34 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d90f      	bls.n	8002d16 <add_finger+0x1de>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8002e2c <add_finger+0x2f4>)
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <add_finger+0x2f8>)
 8002cfa:	484b      	ldr	r0, [pc, #300]	@ (8002e28 <add_finger+0x2f0>)
 8002cfc:	f7fd fb86 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002d00:	2005      	movs	r0, #5
 8002d02:	f000 fc13 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002d06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d0a:	f001 f91d 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e44 <add_finger+0x30c>)
 8002d10:	2214      	movs	r2, #20
 8002d12:	701a      	strb	r2, [r3, #0]
                    return;
 8002d14:	e104      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00)    {
 8002d16:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <add_finger+0x308>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1d9      	bne.n	8002cd2 <add_finger+0x19a>
                }
            }
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2100      	movs	r1, #0
 8002d22:	4841      	ldr	r0, [pc, #260]	@ (8002e28 <add_finger+0x2f0>)
 8002d24:	f7fd faf8 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002d28:	4947      	ldr	r1, [pc, #284]	@ (8002e48 <add_finger+0x310>)
 8002d2a:	483f      	ldr	r0, [pc, #252]	@ (8002e28 <add_finger+0x2f0>)
 8002d2c:	f7fd fb47 	bl	80003be <CLCD_I2C_WriteString>
 8002d30:	2064      	movs	r0, #100	@ 0x64
 8002d32:	f001 f909 	bl	8003f48 <HAL_Delay>
            tmp=0xff;
 8002d36:	4b42      	ldr	r3, [pc, #264]	@ (8002e40 <add_finger+0x308>)
 8002d38:	22ff      	movs	r2, #255	@ 0xff
 8002d3a:	601a      	str	r2, [r3, #0]
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4839      	ldr	r0, [pc, #228]	@ (8002e28 <add_finger+0x2f0>)
 8002d42:	f7fd fae9 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002d46:	4941      	ldr	r1, [pc, #260]	@ (8002e4c <add_finger+0x314>)
 8002d48:	4837      	ldr	r0, [pc, #220]	@ (8002e28 <add_finger+0x2f0>)
 8002d4a:	f7fd fb38 	bl	80003be <CLCD_I2C_WriteString>
            while(tmp!=0x00)    {
 8002d4e:	e01e      	b.n	8002d8e <add_finger+0x256>
                tmp=img2tz(0x02);
 8002d50:	2002      	movs	r0, #2
 8002d52:	f7fd fe01 	bl	8000958 <img2tz>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a39      	ldr	r2, [pc, #228]	@ (8002e40 <add_finger+0x308>)
 8002d5a:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002d5c:	f001 f8ea 	bl	8003f34 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d90f      	bls.n	8002d8e <add_finger+0x256>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <add_finger+0x2f4>)
 8002d70:	492f      	ldr	r1, [pc, #188]	@ (8002e30 <add_finger+0x2f8>)
 8002d72:	482d      	ldr	r0, [pc, #180]	@ (8002e28 <add_finger+0x2f0>)
 8002d74:	f7fd fb4a 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f000 fbd7 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002d7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d82:	f001 f8e1 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002d86:	4b2f      	ldr	r3, [pc, #188]	@ (8002e44 <add_finger+0x30c>)
 8002d88:	2214      	movs	r2, #20
 8002d8a:	701a      	strb	r2, [r3, #0]
                    return;
 8002d8c:	e0c8      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00)    {
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <add_finger+0x308>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1dc      	bne.n	8002d50 <add_finger+0x218>
                }
            }
            tmp=0xff;
 8002d96:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <add_finger+0x308>)
 8002d98:	22ff      	movs	r2, #255	@ 0xff
 8002d9a:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00)
 8002d9c:	e036      	b.n	8002e0c <add_finger+0x2d4>
            {
                tmp=match();
 8002d9e:	f7fd fe17 	bl	80009d0 <match>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a26      	ldr	r2, [pc, #152]	@ (8002e40 <add_finger+0x308>)
 8002da6:	6013      	str	r3, [r2, #0]
                if (tmp==0x08 || tmp==0x01)
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <add_finger+0x308>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d003      	beq.n	8002db8 <add_finger+0x280>
 8002db0:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <add_finger+0x308>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d110      	bne.n	8002dda <add_finger+0x2a2>
                {
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2100      	movs	r1, #0
 8002dbc:	481a      	ldr	r0, [pc, #104]	@ (8002e28 <add_finger+0x2f0>)
 8002dbe:	f7fd faab 	bl	8000318 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 8002dc2:	4924      	ldr	r1, [pc, #144]	@ (8002e54 <add_finger+0x31c>)
 8002dc4:	4818      	ldr	r0, [pc, #96]	@ (8002e28 <add_finger+0x2f0>)
 8002dc6:	f7fd fafa 	bl	80003be <CLCD_I2C_WriteString>
 8002dca:	2005      	movs	r0, #5
 8002dcc:	f000 fbae 	bl	800352c <buzzer>
 8002dd0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002dd4:	f001 f8b8 	bl	8003f48 <HAL_Delay>
                    return;
 8002dd8:	e0a2      	b.n	8002f20 <add_finger+0x3e8>
                }
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002dda:	f001 f8ab 	bl	8003f34 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d90f      	bls.n	8002e0c <add_finger+0x2d4>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002dec:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <add_finger+0x2f4>)
 8002dee:	4910      	ldr	r1, [pc, #64]	@ (8002e30 <add_finger+0x2f8>)
 8002df0:	480d      	ldr	r0, [pc, #52]	@ (8002e28 <add_finger+0x2f0>)
 8002df2:	f7fd fb0b 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002df6:	2005      	movs	r0, #5
 8002df8:	f000 fb98 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002dfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e00:	f001 f8a2 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <add_finger+0x30c>)
 8002e06:	2214      	movs	r2, #20
 8002e08:	701a      	strb	r2, [r3, #0]
                    return;
 8002e0a:	e089      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00)
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <add_finger+0x308>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1c4      	bne.n	8002d9e <add_finger+0x266>
                }
            }
            tmp=0xff;
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <add_finger+0x308>)
 8002e16:	22ff      	movs	r2, #255	@ 0xff
 8002e18:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00){
 8002e1a:	e03b      	b.n	8002e94 <add_finger+0x35c>
 8002e1c:	20000410 	.word	0x20000410
 8002e20:	0800d810 	.word	0x0800d810
 8002e24:	0800d824 	.word	0x0800d824
 8002e28:	200003dc 	.word	0x200003dc
 8002e2c:	0800d68c 	.word	0x0800d68c
 8002e30:	0800d698 	.word	0x0800d698
 8002e34:	0800dbec 	.word	0x0800dbec
 8002e38:	0800dc04 	.word	0x0800dc04
 8002e3c:	0800dc18 	.word	0x0800dc18
 8002e40:	2000040c 	.word	0x2000040c
 8002e44:	20000020 	.word	0x20000020
 8002e48:	0800dc34 	.word	0x0800dc34
 8002e4c:	0800dc48 	.word	0x0800dc48
 8002e50:	0800dc60 	.word	0x0800dc60
 8002e54:	0800dc74 	.word	0x0800dc74
                tmp=regmodel();
 8002e58:	f7fd fde6 	bl	8000a28 <regmodel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a32      	ldr	r2, [pc, #200]	@ (8002f28 <add_finger+0x3f0>)
 8002e60:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002e62:	f001 f867 	bl	8003f34 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d90f      	bls.n	8002e94 <add_finger+0x35c>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002e74:	4a2d      	ldr	r2, [pc, #180]	@ (8002f2c <add_finger+0x3f4>)
 8002e76:	492e      	ldr	r1, [pc, #184]	@ (8002f30 <add_finger+0x3f8>)
 8002e78:	482e      	ldr	r0, [pc, #184]	@ (8002f34 <add_finger+0x3fc>)
 8002e7a:	f7fd fac7 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002e7e:	2005      	movs	r0, #5
 8002e80:	f000 fb54 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002e84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e88:	f001 f85e 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <add_finger+0x400>)
 8002e8e:	2214      	movs	r2, #20
 8002e90:	701a      	strb	r2, [r3, #0]
                    return;
 8002e92:	e045      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00){
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <add_finger+0x3f0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1dd      	bne.n	8002e58 <add_finger+0x320>
                }
            }
            tmp=0xff;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <add_finger+0x3f0>)
 8002e9e:	22ff      	movs	r2, #255	@ 0xff
 8002ea0:	601a      	str	r2, [r3, #0]
            while(tmp!=0x00){
 8002ea2:	e020      	b.n	8002ee6 <add_finger+0x3ae>
                tmp=store(ID);
 8002ea4:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <add_finger+0x404>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fde9 	bl	8000a80 <store>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <add_finger+0x3f0>)
 8002eb2:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - start_time_finger > 20000) // 15 seconds timeout
 8002eb4:	f001 f83e 	bl	8003f34 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d90f      	bls.n	8002ee6 <add_finger+0x3ae>
                {
                    CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002ec6:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <add_finger+0x3f4>)
 8002ec8:	4919      	ldr	r1, [pc, #100]	@ (8002f30 <add_finger+0x3f8>)
 8002eca:	481a      	ldr	r0, [pc, #104]	@ (8002f34 <add_finger+0x3fc>)
 8002ecc:	f7fd fa9e 	bl	800040c <CLCD_I2C_Display>
                    buzzer(5);
 8002ed0:	2005      	movs	r0, #5
 8002ed2:	f000 fb2b 	bl	800352c <buzzer>
                    HAL_Delay(2000);
 8002ed6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002eda:	f001 f835 	bl	8003f48 <HAL_Delay>
                    exitmenu = Delaymenu;
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <add_finger+0x400>)
 8002ee0:	2214      	movs	r2, #20
 8002ee2:	701a      	strb	r2, [r3, #0]
                    return;
 8002ee4:	e01c      	b.n	8002f20 <add_finger+0x3e8>
            while(tmp!=0x00){
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <add_finger+0x3f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1da      	bne.n	8002ea4 <add_finger+0x36c>
                }
            }
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4810      	ldr	r0, [pc, #64]	@ (8002f34 <add_finger+0x3fc>)
 8002ef4:	f7fd fa10 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8002ef8:	4911      	ldr	r1, [pc, #68]	@ (8002f40 <add_finger+0x408>)
 8002efa:	480e      	ldr	r0, [pc, #56]	@ (8002f34 <add_finger+0x3fc>)
 8002efc:	f7fd fa5f 	bl	80003be <CLCD_I2C_WriteString>
            buzzer(1);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f000 fb13 	bl	800352c <buzzer>
        	AddFingerID(ID);
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <add_finger+0x404>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f980 	bl	8003210 <AddFingerID>
            HAL_Delay(1500);
 8002f10:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002f14:	f001 f818 	bl	8003f48 <HAL_Delay>
            CLCD_I2C_Clear(&LCD1);
 8002f18:	4806      	ldr	r0, [pc, #24]	@ (8002f34 <add_finger+0x3fc>)
 8002f1a:	f7fd fa67 	bl	80003ec <CLCD_I2C_Clear>
            break;
 8002f1e:	bf00      	nop
        }
    }
}
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000040c 	.word	0x2000040c
 8002f2c:	0800d68c 	.word	0x0800d68c
 8002f30:	0800d698 	.word	0x0800d698
 8002f34:	200003dc 	.word	0x200003dc
 8002f38:	20000020 	.word	0x20000020
 8002f3c:	20000410 	.word	0x20000410
 8002f40:	0800dc84 	.word	0x0800dc84

08002f44 <read_finger>:
//----------end them van tay---------------
void read_finger()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8002f48:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <read_finger+0xf0>)
 8002f4a:	22ff      	movs	r2, #255	@ 0xff
 8002f4c:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8002f4e:	f000 fff1 	bl	8003f34 <HAL_GetTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <read_finger+0xf4>)
 8002f56:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8002f58:	e013      	b.n	8002f82 <read_finger+0x3e>
		tmp=collect_finger();
 8002f5a:	f7fd fcd1 	bl	8000900 <collect_finger>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a34      	ldr	r2, [pc, #208]	@ (8003034 <read_finger+0xf0>)
 8002f62:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8002f64:	f000 ffe6 	bl	8003f34 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b33      	ldr	r3, [pc, #204]	@ (8003038 <read_finger+0xf4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002f74:	d305      	bcc.n	8002f82 <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8002f76:	f000 ffdd 	bl	8003f34 <HAL_GetTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003038 <read_finger+0xf4>)
 8002f7e:	6013      	str	r3, [r2, #0]
		return;}
 8002f80:	e056      	b.n	8003030 <read_finger+0xec>
	while(tmp!=0x00){
 8002f82:	4b2c      	ldr	r3, [pc, #176]	@ (8003034 <read_finger+0xf0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e7      	bne.n	8002f5a <read_finger+0x16>

	}
	tmp=0xff;
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <read_finger+0xf0>)
 8002f8c:	22ff      	movs	r2, #255	@ 0xff
 8002f8e:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <read_finger+0xf0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <read_finger+0x60>
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fd fcdd 	bl	8000958 <img2tz>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <read_finger+0xf0>)
 8002fa2:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <read_finger+0xf0>)
 8002fa6:	22ff      	movs	r2, #255	@ 0xff
 8002fa8:	601a      	str	r2, [r3, #0]
	tmp=search();
 8002faa:	f7fd fda8 	bl	8000afe <search>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a20      	ldr	r2, [pc, #128]	@ (8003034 <read_finger+0xf0>)
 8002fb2:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003034 <read_finger+0xf0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d117      	bne.n	8002fec <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <read_finger+0xf0>)
 8002fbe:	22ff      	movs	r2, #255	@ 0xff
 8002fc0:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <read_finger+0xf8>)
 8002fc4:	491e      	ldr	r1, [pc, #120]	@ (8003040 <read_finger+0xfc>)
 8002fc6:	481f      	ldr	r0, [pc, #124]	@ (8003044 <read_finger+0x100>)
 8002fc8:	f7fd fa20 	bl	800040c <CLCD_I2C_Display>
		sprintf(mess,"-ID = %d  ", pID); // Use %d for integer
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <read_finger+0x104>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	491e      	ldr	r1, [pc, #120]	@ (800304c <read_finger+0x108>)
 8002fd4:	481e      	ldr	r0, [pc, #120]	@ (8003050 <read_finger+0x10c>)
 8002fd6:	f009 fe8f 	bl	800ccf8 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002fda:	491d      	ldr	r1, [pc, #116]	@ (8003050 <read_finger+0x10c>)
 8002fdc:	4819      	ldr	r0, [pc, #100]	@ (8003044 <read_finger+0x100>)
 8002fde:	f7fd f9ee 	bl	80003be <CLCD_I2C_WriteString>
		opendoor();
 8002fe2:	f000 fa53 	bl	800348c <opendoor>
		CLCD_I2C_Clear(&LCD1);
 8002fe6:	4817      	ldr	r0, [pc, #92]	@ (8003044 <read_finger+0x100>)
 8002fe8:	f7fd fa00 	bl	80003ec <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8002fec:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <read_finger+0xf0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d11d      	bne.n	8003030 <read_finger+0xec>
	{
		tmp=0xff;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <read_finger+0xf0>)
 8002ff6:	22ff      	movs	r2, #255	@ 0xff
 8002ff8:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4811      	ldr	r0, [pc, #68]	@ (8003044 <read_finger+0x100>)
 8003000:	f7fd f98a 	bl	8000318 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 8003004:	4913      	ldr	r1, [pc, #76]	@ (8003054 <read_finger+0x110>)
 8003006:	480f      	ldr	r0, [pc, #60]	@ (8003044 <read_finger+0x100>)
 8003008:	f7fd f9d9 	bl	80003be <CLCD_I2C_WriteString>
 800300c:	2005      	movs	r0, #5
 800300e:	f000 fa8d 	bl	800352c <buzzer>
 8003012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003016:	f000 ff97 	bl	8003f48 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 800301a:	490d      	ldr	r1, [pc, #52]	@ (8003050 <read_finger+0x10c>)
 800301c:	4809      	ldr	r0, [pc, #36]	@ (8003044 <read_finger+0x100>)
 800301e:	f7fd f9ce 	bl	80003be <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8003022:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003026:	f000 ff8f 	bl	8003f48 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 800302a:	4806      	ldr	r0, [pc, #24]	@ (8003044 <read_finger+0x100>)
 800302c:	f7fd f9de 	bl	80003ec <CLCD_I2C_Clear>
	}
}
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000040c 	.word	0x2000040c
 8003038:	200003fc 	.word	0x200003fc
 800303c:	0800dc98 	.word	0x0800dc98
 8003040:	0800d708 	.word	0x0800d708
 8003044:	200003dc 	.word	0x200003dc
 8003048:	20000218 	.word	0x20000218
 800304c:	0800dca0 	.word	0x0800dca0
 8003050:	20000400 	.word	0x20000400
 8003054:	0800dcac 	.word	0x0800dcac

08003058 <remove_id_finger>:
void remove_id_finger()
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
    ID = InputID_FINGER();
 800305e:	f7fd ff9d 	bl	8000f9c <InputID_FINGER>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <remove_id_finger+0xb8>)
 8003068:	701a      	strb	r2, [r3, #0]
    if(CheckKeyFinger(ID)==0)
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <remove_id_finger+0xb8>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f8ac 	bl	80031cc <CheckKeyFinger>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <remove_id_finger+0x3c>
    {
		CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 800307a:	4a26      	ldr	r2, [pc, #152]	@ (8003114 <remove_id_finger+0xbc>)
 800307c:	4926      	ldr	r1, [pc, #152]	@ (8003118 <remove_id_finger+0xc0>)
 800307e:	4827      	ldr	r0, [pc, #156]	@ (800311c <remove_id_finger+0xc4>)
 8003080:	f7fd f9c4 	bl	800040c <CLCD_I2C_Display>
		buzzer(3);
 8003084:	2003      	movs	r0, #3
 8003086:	f000 fa51 	bl	800352c <buzzer>
		HAL_Delay(1000);
 800308a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800308e:	f000 ff5b 	bl	8003f48 <HAL_Delay>
			CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
		}
		HAL_Delay(2000);
		CLCD_I2C_Clear(&LCD1);
    }
}
 8003092:	e039      	b.n	8003108 <remove_id_finger+0xb0>
		CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 8003094:	4a22      	ldr	r2, [pc, #136]	@ (8003120 <remove_id_finger+0xc8>)
 8003096:	4923      	ldr	r1, [pc, #140]	@ (8003124 <remove_id_finger+0xcc>)
 8003098:	4820      	ldr	r0, [pc, #128]	@ (800311c <remove_id_finger+0xc4>)
 800309a:	f7fd f9b7 	bl	800040c <CLCD_I2C_Display>
		uint8_t result = delete_id_finger(ID);
 800309e:	4b1c      	ldr	r3, [pc, #112]	@ (8003110 <remove_id_finger+0xb8>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fd92 	bl	8000bcc <delete_id_finger>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75fb      	strb	r3, [r7, #23]
		if (result == 0x00)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d114      	bne.n	80030dc <remove_id_finger+0x84>
			CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 80030b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <remove_id_finger+0xd0>)
 80030b4:	491d      	ldr	r1, [pc, #116]	@ (800312c <remove_id_finger+0xd4>)
 80030b6:	4819      	ldr	r0, [pc, #100]	@ (800311c <remove_id_finger+0xc4>)
 80030b8:	f7fd f9a8 	bl	800040c <CLCD_I2C_Display>
			buzzer(1);
 80030bc:	2001      	movs	r0, #1
 80030be:	f000 fa35 	bl	800352c <buzzer>
	    	RemoveFingerID(CheckKeyFinger(ID));
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <remove_id_finger+0xb8>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f880 	bl	80031cc <CheckKeyFinger>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8c2 	bl	8003258 <RemoveFingerID>
			fingerprint_detected = 0;
 80030d4:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <remove_id_finger+0xd8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e00e      	b.n	80030fa <remove_id_finger+0xa2>
			snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	1d38      	adds	r0, r7, #4
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <remove_id_finger+0xdc>)
 80030e2:	2110      	movs	r1, #16
 80030e4:	f009 fdd4 	bl	800cc90 <sniprintf>
			buzzer(5);
 80030e8:	2005      	movs	r0, #5
 80030ea:	f000 fa1f 	bl	800352c <buzzer>
			CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	461a      	mov	r2, r3
 80030f2:	490e      	ldr	r1, [pc, #56]	@ (800312c <remove_id_finger+0xd4>)
 80030f4:	4809      	ldr	r0, [pc, #36]	@ (800311c <remove_id_finger+0xc4>)
 80030f6:	f7fd f989 	bl	800040c <CLCD_I2C_Display>
		HAL_Delay(2000);
 80030fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030fe:	f000 ff23 	bl	8003f48 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003102:	4806      	ldr	r0, [pc, #24]	@ (800311c <remove_id_finger+0xc4>)
 8003104:	f7fd f972 	bl	80003ec <CLCD_I2C_Clear>
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000410 	.word	0x20000410
 8003114:	0800d810 	.word	0x0800d810
 8003118:	0800d8cc 	.word	0x0800d8cc
 800311c:	200003dc 	.word	0x200003dc
 8003120:	0800d6f4 	.word	0x0800d6f4
 8003124:	0800dcc0 	.word	0x0800dcc0
 8003128:	0800dcd0 	.word	0x0800dcd0
 800312c:	0800dce0 	.word	0x0800dce0
 8003130:	20000411 	.word	0x20000411
 8003134:	0800dcf0 	.word	0x0800dcf0

08003138 <remove_all_finger>:

void remove_all_finger()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 800313e:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <remove_all_finger+0x70>)
 8003140:	491a      	ldr	r1, [pc, #104]	@ (80031ac <remove_all_finger+0x74>)
 8003142:	481b      	ldr	r0, [pc, #108]	@ (80031b0 <remove_all_finger+0x78>)
 8003144:	f7fd f962 	bl	800040c <CLCD_I2C_Display>
    uint8_t result = empty();
 8003148:	f7fd fd14 	bl	8000b74 <empty>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <remove_all_finger+0x3c>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <remove_all_finger+0x7c>)
 8003158:	4917      	ldr	r1, [pc, #92]	@ (80031b8 <remove_all_finger+0x80>)
 800315a:	4815      	ldr	r0, [pc, #84]	@ (80031b0 <remove_all_finger+0x78>)
 800315c:	f7fd f956 	bl	800040c <CLCD_I2C_Display>
        buzzer(1);
 8003160:	2001      	movs	r0, #1
 8003162:	f000 f9e3 	bl	800352c <buzzer>
    	Flash_Erase(StartAddressFingerID);
 8003166:	4815      	ldr	r0, [pc, #84]	@ (80031bc <remove_all_finger+0x84>)
 8003168:	f7fd fd72 	bl	8000c50 <Flash_Erase>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 800316c:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <remove_all_finger+0x88>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e00e      	b.n	8003192 <remove_all_finger+0x5a>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	1d38      	adds	r0, r7, #4
 8003178:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <remove_all_finger+0x8c>)
 800317a:	2110      	movs	r1, #16
 800317c:	f009 fd88 	bl	800cc90 <sniprintf>
        buzzer(5);
 8003180:	2005      	movs	r0, #5
 8003182:	f000 f9d3 	bl	800352c <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	461a      	mov	r2, r3
 800318a:	490f      	ldr	r1, [pc, #60]	@ (80031c8 <remove_all_finger+0x90>)
 800318c:	4808      	ldr	r0, [pc, #32]	@ (80031b0 <remove_all_finger+0x78>)
 800318e:	f7fd f93d 	bl	800040c <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003192:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003196:	f000 fed7 	bl	8003f48 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 800319a:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <remove_all_finger+0x78>)
 800319c:	f7fd f926 	bl	80003ec <CLCD_I2C_Clear>
}
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	0800dd04 	.word	0x0800dd04
 80031ac:	0800dd14 	.word	0x0800dd14
 80031b0:	200003dc 	.word	0x200003dc
 80031b4:	0800db70 	.word	0x0800db70
 80031b8:	0800dd24 	.word	0x0800dd24
 80031bc:	0800f800 	.word	0x0800f800
 80031c0:	20000411 	.word	0x20000411
 80031c4:	0800dcf0 	.word	0x0800dcf0
 80031c8:	0800dce0 	.word	0x0800dce0

080031cc <CheckKeyFinger>:
uint32_t CheckKeyFinger(uint8_t key)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
    uint32_t pt = StartAddressFingerID;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <CheckKeyFinger+0x40>)
 80031d8:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_2Byte(pt) != 0xFFFF)
 80031da:	e009      	b.n	80031f0 <CheckKeyFinger+0x24>
    {
        if (*(uint8_t *)(pt) == key)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d101      	bne.n	80031ea <CheckKeyFinger+0x1e>
            return pt;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	e00c      	b.n	8003204 <CheckKeyFinger+0x38>
        pt = pt + 2;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3302      	adds	r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_2Byte(pt) != 0xFFFF)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fd fd90 	bl	8000d16 <Flash_Read_2Byte>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031fe:	429a      	cmp	r2, r3
 8003200:	d1ec      	bne.n	80031dc <CheckKeyFinger+0x10>
	    }
    return 0;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0800f800 	.word	0x0800f800

08003210 <AddFingerID>:
void AddFingerID(uint8_t key)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressFingerID;
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <AddFingerID+0x40>)
 800321c:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_2Byte(pt) != 0xFFFF)
 800321e:	e002      	b.n	8003226 <AddFingerID+0x16>
	{
		pt = pt + 2;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3302      	adds	r3, #2
 8003224:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_2Byte(pt) != 0xFFFF)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7fd fd75 	bl	8000d16 <Flash_Read_2Byte>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003234:	429a      	cmp	r2, r3
 8003236:	d1f3      	bne.n	8003220 <AddFingerID+0x10>
	}
	FingerID[0] = key;
 8003238:	4a06      	ldr	r2, [pc, #24]	@ (8003254 <AddFingerID+0x44>)
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	7013      	strb	r3, [r2, #0]
	Flash_Write_Array(pt, FingerID, 1);
 800323e:	2201      	movs	r2, #1
 8003240:	4904      	ldr	r1, [pc, #16]	@ (8003254 <AddFingerID+0x44>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7fd fd38 	bl	8000cb8 <Flash_Write_Array>
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0800f800 	.word	0x0800f800
 8003254:	200003f8 	.word	0x200003f8

08003258 <RemoveFingerID>:

void RemoveFingerID(uint32_t addressrm)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm, 0xFFFF);
 8003260:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fd0f 	bl	8000c88 <Flash_Write_2Byte>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <startface>:


void startface(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8003278:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <startface+0x5c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b25b      	sxtb	r3, r3
 800327e:	2b59      	cmp	r3, #89	@ 0x59
 8003280:	d10e      	bne.n	80032a0 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 8003282:	4814      	ldr	r0, [pc, #80]	@ (80032d4 <startface+0x60>)
 8003284:	f7fd f8b2 	bl	80003ec <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	4811      	ldr	r0, [pc, #68]	@ (80032d4 <startface+0x60>)
 800328e:	f7fd f843 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8003292:	4911      	ldr	r1, [pc, #68]	@ (80032d8 <startface+0x64>)
 8003294:	480f      	ldr	r0, [pc, #60]	@ (80032d4 <startface+0x60>)
 8003296:	f7fd f892 	bl	80003be <CLCD_I2C_WriteString>
        opendoor();
 800329a:	f000 f8f7 	bl	800348c <opendoor>
 800329e:	e010      	b.n	80032c2 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <startface+0x5c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80032a8:	d10b      	bne.n	80032c2 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 80032aa:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <startface+0x68>)
 80032ac:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <startface+0x6c>)
 80032ae:	4809      	ldr	r0, [pc, #36]	@ (80032d4 <startface+0x60>)
 80032b0:	f7fd f8ac 	bl	800040c <CLCD_I2C_Display>
		buzzer(5);
 80032b4:	2005      	movs	r0, #5
 80032b6:	f000 f939 	bl	800352c <buzzer>
        HAL_Delay(2000);
 80032ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032be:	f000 fe43 	bl	8003f48 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80032c2:	2280      	movs	r2, #128	@ 0x80
 80032c4:	2100      	movs	r1, #0
 80032c6:	4802      	ldr	r0, [pc, #8]	@ (80032d0 <startface+0x5c>)
 80032c8:	f009 fd36 	bl	800cd38 <memset>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000350 	.word	0x20000350
 80032d4:	200003dc 	.word	0x200003dc
 80032d8:	0800d708 	.word	0x0800d708
 80032dc:	0800dd34 	.word	0x0800dd34
 80032e0:	0800dd44 	.word	0x0800dd44

080032e4 <enter_password>:

void enter_password(char *password) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e01c      	b.n	800332c <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 80032f2:	200a      	movs	r0, #10
 80032f4:	f7fd f9e4 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80032f8:	4603      	mov	r3, r0
 80032fa:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f7      	beq.n	80032f2 <enter_password+0xe>
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	2b2f      	cmp	r3, #47	@ 0x2f
 8003306:	d9f4      	bls.n	80032f2 <enter_password+0xe>
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	2b39      	cmp	r3, #57	@ 0x39
 800330c:	d8f1      	bhi.n	80032f2 <enter_password+0xe>
        buzzer(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f000 f90c 	bl	800352c <buzzer>
        password[i] = key;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	7afa      	ldrb	r2, [r7, #11]
 800331c:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 800331e:	212a      	movs	r1, #42	@ 0x2a
 8003320:	4808      	ldr	r0, [pc, #32]	@ (8003344 <enter_password+0x60>)
 8003322:	f7fd f83c 	bl	800039e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b05      	cmp	r3, #5
 8003330:	dddf      	ble.n	80032f2 <enter_password+0xe>
    }
    password[6] = '\0';
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3306      	adds	r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200003dc 	.word	0x200003dc

08003348 <change_password>:

void change_password(void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 800334e:	2300      	movs	r3, #0
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	2100      	movs	r1, #0
 8003356:	460a      	mov	r2, r1
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	460a      	mov	r2, r1
 800335c:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 800335e:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <change_password+0x5c>)
 8003360:	4911      	ldr	r1, [pc, #68]	@ (80033a8 <change_password+0x60>)
 8003362:	4812      	ldr	r0, [pc, #72]	@ (80033ac <change_password+0x64>)
 8003364:	f7fd f852 	bl	800040c <CLCD_I2C_Display>
    enter_password(new_password);
 8003368:	463b      	mov	r3, r7
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ffba 	bl	80032e4 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003370:	480f      	ldr	r0, [pc, #60]	@ (80033b0 <change_password+0x68>)
 8003372:	f7fd fc6d 	bl	8000c50 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 8003376:	463b      	mov	r3, r7
 8003378:	2206      	movs	r2, #6
 800337a:	4619      	mov	r1, r3
 800337c:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <change_password+0x68>)
 800337e:	f7fd fc9b 	bl	8000cb8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 8003382:	4a0c      	ldr	r2, [pc, #48]	@ (80033b4 <change_password+0x6c>)
 8003384:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <change_password+0x70>)
 8003386:	4809      	ldr	r0, [pc, #36]	@ (80033ac <change_password+0x64>)
 8003388:	f7fd f840 	bl	800040c <CLCD_I2C_Display>
    buzzer(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f000 f8cd 	bl	800352c <buzzer>
    HAL_Delay(2000);
 8003392:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003396:	f000 fdd7 	bl	8003f48 <HAL_Delay>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	0800dd54 	.word	0x0800dd54
 80033a8:	0800dd5c 	.word	0x0800dd5c
 80033ac:	200003dc 	.word	0x200003dc
 80033b0:	0800f400 	.word	0x0800f400
 80033b4:	0800db70 	.word	0x0800db70
 80033b8:	0800dd6c 	.word	0x0800dd6c

080033bc <check_password>:

uint8_t check_password(char *password) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	2100      	movs	r1, #0
 80033ce:	460a      	mov	r2, r1
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	460a      	mov	r2, r1
 80033d4:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	2206      	movs	r2, #6
 80033dc:	4619      	mov	r1, r3
 80033de:	480a      	ldr	r0, [pc, #40]	@ (8003408 <check_password+0x4c>)
 80033e0:	f7fd fca5 	bl	8000d2e <Flash_Read_Array>
    stored_password[6] = '\0';
 80033e4:	2300      	movs	r3, #0
 80033e6:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 80033e8:	f107 0308 	add.w	r3, r7, #8
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fc feac 	bl	800014c <strcmp>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0800f400 	.word	0x0800f400

0800340c <set_default_password>:

void set_default_password(void) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 8003412:	4a16      	ldr	r2, [pc, #88]	@ (800346c <set_default_password+0x60>)
 8003414:	463b      	mov	r3, r7
 8003416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341a:	6018      	str	r0, [r3, #0]
 800341c:	3304      	adds	r3, #4
 800341e:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003420:	4813      	ldr	r0, [pc, #76]	@ (8003470 <set_default_password+0x64>)
 8003422:	f7fd fc15 	bl	8000c50 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 8003426:	463b      	mov	r3, r7
 8003428:	2206      	movs	r2, #6
 800342a:	4619      	mov	r1, r3
 800342c:	4810      	ldr	r0, [pc, #64]	@ (8003470 <set_default_password+0x64>)
 800342e:	f7fd fc43 	bl	8000cb8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 8003432:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <set_default_password+0x68>)
 8003434:	4910      	ldr	r1, [pc, #64]	@ (8003478 <set_default_password+0x6c>)
 8003436:	4811      	ldr	r0, [pc, #68]	@ (800347c <set_default_password+0x70>)
 8003438:	f7fc ffe8 	bl	800040c <CLCD_I2C_Display>
    buzzer(1);
 800343c:	2001      	movs	r0, #1
 800343e:	f000 f875 	bl	800352c <buzzer>
    HAL_Delay(1500);
 8003442:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003446:	f000 fd7f 	bl	8003f48 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 800344a:	4a0d      	ldr	r2, [pc, #52]	@ (8003480 <set_default_password+0x74>)
 800344c:	490d      	ldr	r1, [pc, #52]	@ (8003484 <set_default_password+0x78>)
 800344e:	480b      	ldr	r0, [pc, #44]	@ (800347c <set_default_password+0x70>)
 8003450:	f7fc ffdc 	bl	800040c <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003454:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003458:	f000 fd76 	bl	8003f48 <HAL_Delay>
    exitmenu=0;
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <set_default_password+0x7c>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	0800ddac 	.word	0x0800ddac
 8003470:	0800f400 	.word	0x0800f400
 8003474:	0800db70 	.word	0x0800db70
 8003478:	0800dd80 	.word	0x0800dd80
 800347c:	200003dc 	.word	0x200003dc
 8003480:	0800dd90 	.word	0x0800dd90
 8003484:	0800dd9c 	.word	0x0800dd9c
 8003488:	20000020 	.word	0x20000020

0800348c <opendoor>:

void opendoor(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
    buzzer(1);
 8003492:	2001      	movs	r0, #1
 8003494:	f000 f84a 	bl	800352c <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003498:	2201      	movs	r2, #1
 800349a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800349e:	481e      	ldr	r0, [pc, #120]	@ (8003518 <opendoor+0x8c>)
 80034a0:	f001 fa1f 	bl	80048e2 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 80034a4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80034a8:	f000 fd4e 	bl	8003f48 <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 80034ac:	f000 fd42 	bl	8003f34 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 80034b2:	e01b      	b.n	80034ec <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 80034b4:	f000 fd3e 	bl	8003f34 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 80034c2:	4a16      	ldr	r2, [pc, #88]	@ (800351c <opendoor+0x90>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 80034cc:	4638      	mov	r0, r7
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a13      	ldr	r2, [pc, #76]	@ (8003520 <opendoor+0x94>)
 80034d2:	2110      	movs	r1, #16
 80034d4:	f009 fbdc 	bl	800cc90 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 80034d8:	463b      	mov	r3, r7
 80034da:	461a      	mov	r2, r3
 80034dc:	4911      	ldr	r1, [pc, #68]	@ (8003524 <opendoor+0x98>)
 80034de:	4812      	ldr	r0, [pc, #72]	@ (8003528 <opendoor+0x9c>)
 80034e0:	f7fc ff94 	bl	800040c <CLCD_I2C_Display>
        HAL_Delay(1000);
 80034e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034e8:	f000 fd2e 	bl	8003f48 <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 80034ec:	f000 fd22 	bl	8003f34 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d9da      	bls.n	80034b4 <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003504:	4804      	ldr	r0, [pc, #16]	@ (8003518 <opendoor+0x8c>)
 8003506:	f001 f9ec 	bl	80048e2 <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 800350a:	4807      	ldr	r0, [pc, #28]	@ (8003528 <opendoor+0x9c>)
 800350c:	f7fc ff6e 	bl	80003ec <CLCD_I2C_Clear>
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40010800 	.word	0x40010800
 800351c:	10624dd3 	.word	0x10624dd3
 8003520:	0800ddb4 	.word	0x0800ddb4
 8003524:	0800ddc0 	.word	0x0800ddc0
 8003528:	200003dc 	.word	0x200003dc

0800352c <buzzer>:
void buzzer( uint8_t countbeep)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 8003536:	e011      	b.n	800355c <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800353e:	480c      	ldr	r0, [pc, #48]	@ (8003570 <buzzer+0x44>)
 8003540:	f001 f9cf 	bl	80048e2 <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8003544:	2078      	movs	r0, #120	@ 0x78
 8003546:	f000 fcff 	bl	8003f48 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 800354a:	2201      	movs	r2, #1
 800354c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003550:	4807      	ldr	r0, [pc, #28]	@ (8003570 <buzzer+0x44>)
 8003552:	f001 f9c6 	bl	80048e2 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003556:	2032      	movs	r0, #50	@ 0x32
 8003558:	f000 fcf6 	bl	8003f48 <HAL_Delay>
	while(countbeep--)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	71fa      	strb	r2, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e8      	bne.n	8003538 <buzzer+0xc>
	}
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010800 	.word	0x40010800

08003574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <Error_Handler+0x8>

08003580 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 800358e:	bf00      	nop
 8003590:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <TM_SPI_Send+0x4c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d1f8      	bne.n	8003590 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 800359e:	f107 0208 	add.w	r2, r7, #8
 80035a2:	f107 010c 	add.w	r1, r7, #12
 80035a6:	230a      	movs	r3, #10
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	4807      	ldr	r0, [pc, #28]	@ (80035cc <TM_SPI_Send+0x4c>)
 80035ae:	f003 feff 	bl	80073b0 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80035b2:	bf00      	nop
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <TM_SPI_Send+0x4c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d0f8      	beq.n	80035b4 <TM_SPI_Send+0x34>
	return data_re[0];
 80035c2:	7a3b      	ldrb	r3, [r7, #8]

}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000270 	.word	0x20000270

080035d0 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 80035d4:	f000 f8d5 	bl	8003782 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80035d8:	218d      	movs	r1, #141	@ 0x8d
 80035da:	202a      	movs	r0, #42	@ 0x2a
 80035dc:	f000 f836 	bl	800364c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80035e0:	213e      	movs	r1, #62	@ 0x3e
 80035e2:	202b      	movs	r0, #43	@ 0x2b
 80035e4:	f000 f832 	bl	800364c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80035e8:	211e      	movs	r1, #30
 80035ea:	202d      	movs	r0, #45	@ 0x2d
 80035ec:	f000 f82e 	bl	800364c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80035f0:	2100      	movs	r1, #0
 80035f2:	202c      	movs	r0, #44	@ 0x2c
 80035f4:	f000 f82a 	bl	800364c <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80035f8:	2170      	movs	r1, #112	@ 0x70
 80035fa:	2026      	movs	r0, #38	@ 0x26
 80035fc:	f000 f826 	bl	800364c <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003600:	2140      	movs	r1, #64	@ 0x40
 8003602:	2015      	movs	r0, #21
 8003604:	f000 f822 	bl	800364c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003608:	213d      	movs	r1, #61	@ 0x3d
 800360a:	2011      	movs	r0, #17
 800360c:	f000 f81e 	bl	800364c <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003610:	f000 f8a2 	bl	8003758 <TM_MFRC522_AntennaOn>
}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}

08003618 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	2026      	movs	r0, #38	@ 0x26
 8003624:	f000 f8b5 	bl	8003792 <TM_MFRC522_Request>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f9a1 	bl	800397a <TM_MFRC522_Anticoll>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 800363c:	f000 fa23 	bl	8003a86 <TM_MFRC522_Halt>
	return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	71fb      	strb	r3, [r7, #7]
 8003658:	4613      	mov	r3, r2
 800365a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 800365c:	2200      	movs	r2, #0
 800365e:	2110      	movs	r1, #16
 8003660:	480c      	ldr	r0, [pc, #48]	@ (8003694 <TM_MFRC522_WriteRegister+0x48>)
 8003662:	f001 f93e 	bl	80048e2 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff84 	bl	8003580 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003678:	79bb      	ldrb	r3, [r7, #6]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff80 	bl	8003580 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003680:	2201      	movs	r2, #1
 8003682:	2110      	movs	r1, #16
 8003684:	4803      	ldr	r0, [pc, #12]	@ (8003694 <TM_MFRC522_WriteRegister+0x48>)
 8003686:	f001 f92c 	bl	80048e2 <HAL_GPIO_WritePin>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40010800 	.word	0x40010800

08003698 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80036a2:	2200      	movs	r2, #0
 80036a4:	2110      	movs	r1, #16
 80036a6:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <TM_MFRC522_ReadRegister+0x4c>)
 80036a8:	f001 f91b 	bl	80048e2 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff5d 	bl	8003580 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f7ff ff5a 	bl	8003580 <TM_SPI_Send>
 80036cc:	4603      	mov	r3, r0
 80036ce:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 80036d0:	2201      	movs	r2, #1
 80036d2:	2110      	movs	r1, #16
 80036d4:	4803      	ldr	r0, [pc, #12]	@ (80036e4 <TM_MFRC522_ReadRegister+0x4c>)
 80036d6:	f001 f904 	bl	80048e2 <HAL_GPIO_WritePin>

	return val;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010800 	.word	0x40010800

080036e8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	460a      	mov	r2, r1
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ffcc 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	79bb      	ldrb	r3, [r7, #6]
 8003706:	4313      	orrs	r3, r2
 8003708:	b2da      	uxtb	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff9c 	bl	800364c <TM_MFRC522_WriteRegister>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	460a      	mov	r2, r1
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	4613      	mov	r3, r2
 800372a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ffb2 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003734:	4603      	mov	r3, r0
 8003736:	b25a      	sxtb	r2, r3
 8003738:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800373c:	43db      	mvns	r3, r3
 800373e:	b25b      	sxtb	r3, r3
 8003740:	4013      	ands	r3, r2
 8003742:	b25b      	sxtb	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff7e 	bl	800364c <TM_MFRC522_WriteRegister>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800375e:	2014      	movs	r0, #20
 8003760:	f7ff ff9a 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003772:	2103      	movs	r1, #3
 8003774:	2014      	movs	r0, #20
 8003776:	f7ff ffb7 	bl	80036e8 <TM_MFRC522_SetBitMask>
	}
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003782:	b580      	push	{r7, lr}
 8003784:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003786:	210f      	movs	r1, #15
 8003788:	2001      	movs	r0, #1
 800378a:	f7ff ff5f 	bl	800364c <TM_MFRC522_WriteRegister>
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}

08003792 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af02      	add	r7, sp, #8
 8003798:	4603      	mov	r3, r0
 800379a:	6039      	str	r1, [r7, #0]
 800379c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800379e:	2107      	movs	r1, #7
 80037a0:	200d      	movs	r0, #13
 80037a2:	f7ff ff53 	bl	800364c <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	79fa      	ldrb	r2, [r7, #7]
 80037aa:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	200c      	movs	r0, #12
 80037ba:	f000 f80f 	bl	80037dc <TM_MFRC522_ToCard>
 80037be:	4603      	mov	r3, r0
 80037c0:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <TM_MFRC522_Request+0x3c>
 80037c8:	89bb      	ldrh	r3, [r7, #12]
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d001      	beq.n	80037d2 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80037ce:	2302      	movs	r3, #2
 80037d0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	4613      	mov	r3, r2
 80037ec:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80037ee:	2302      	movs	r3, #2
 80037f0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80037f6:	2300      	movs	r3, #0
 80037f8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d006      	beq.n	800380e <TM_MFRC522_ToCard+0x32>
 8003800:	2b0e      	cmp	r3, #14
 8003802:	d109      	bne.n	8003818 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003804:	2312      	movs	r3, #18
 8003806:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003808:	2310      	movs	r3, #16
 800380a:	757b      	strb	r3, [r7, #21]
			break;
 800380c:	e005      	b.n	800381a <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800380e:	2377      	movs	r3, #119	@ 0x77
 8003810:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003812:	2330      	movs	r3, #48	@ 0x30
 8003814:	757b      	strb	r3, [r7, #21]
			break;
 8003816:	e000      	b.n	800381a <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003818:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800381a:	7dbb      	ldrb	r3, [r7, #22]
 800381c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	2002      	movs	r0, #2
 8003826:	f7ff ff11 	bl	800364c <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800382a:	2180      	movs	r1, #128	@ 0x80
 800382c:	2004      	movs	r0, #4
 800382e:	f7ff ff75 	bl	800371c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003832:	2180      	movs	r1, #128	@ 0x80
 8003834:	200a      	movs	r0, #10
 8003836:	f7ff ff57 	bl	80036e8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800383a:	2100      	movs	r1, #0
 800383c:	2001      	movs	r0, #1
 800383e:	f7ff ff05 	bl	800364c <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003842:	2300      	movs	r3, #0
 8003844:	827b      	strh	r3, [r7, #18]
 8003846:	e00a      	b.n	800385e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003848:	8a7b      	ldrh	r3, [r7, #18]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	2009      	movs	r0, #9
 8003854:	f7ff fefa 	bl	800364c <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003858:	8a7b      	ldrh	r3, [r7, #18]
 800385a:	3301      	adds	r3, #1
 800385c:	827b      	strh	r3, [r7, #18]
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	b29b      	uxth	r3, r3
 8003862:	8a7a      	ldrh	r2, [r7, #18]
 8003864:	429a      	cmp	r2, r3
 8003866:	d3ef      	bcc.n	8003848 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	4619      	mov	r1, r3
 800386c:	2001      	movs	r0, #1
 800386e:	f7ff feed 	bl	800364c <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d103      	bne.n	8003880 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	200d      	movs	r0, #13
 800387c:	f7ff ff34 	bl	80036e8 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003880:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003884:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003886:	2004      	movs	r0, #4
 8003888:	f7ff ff06 	bl	8003698 <TM_MFRC522_ReadRegister>
 800388c:	4603      	mov	r3, r0
 800388e:	753b      	strb	r3, [r7, #20]
		i--;
 8003890:	8a7b      	ldrh	r3, [r7, #18]
 8003892:	3b01      	subs	r3, #1
 8003894:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003896:	8a7b      	ldrh	r3, [r7, #18]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <TM_MFRC522_ToCard+0xd6>
 800389c:	7d3b      	ldrb	r3, [r7, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <TM_MFRC522_ToCard+0xd6>
 80038a6:	7d3a      	ldrb	r2, [r7, #20]
 80038a8:	7d7b      	ldrb	r3, [r7, #21]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0e9      	beq.n	8003886 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 80038b2:	2180      	movs	r1, #128	@ 0x80
 80038b4:	200d      	movs	r0, #13
 80038b6:	f7ff ff31 	bl	800371c <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 80038ba:	8a7b      	ldrh	r3, [r7, #18]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d057      	beq.n	8003970 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80038c0:	2006      	movs	r0, #6
 80038c2:	f7ff fee9 	bl	8003698 <TM_MFRC522_ReadRegister>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f003 031b 	and.w	r3, r3, #27
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d14d      	bne.n	800396c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 80038d4:	7d3a      	ldrb	r2, [r7, #20]
 80038d6:	7dbb      	ldrb	r3, [r7, #22]
 80038d8:	4013      	ands	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d140      	bne.n	8003970 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80038ee:	200a      	movs	r0, #10
 80038f0:	f7ff fed2 	bl	8003698 <TM_MFRC522_ReadRegister>
 80038f4:	4603      	mov	r3, r0
 80038f6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80038f8:	200c      	movs	r0, #12
 80038fa:	f7ff fecd 	bl	8003698 <TM_MFRC522_ReadRegister>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003906:	7c7b      	ldrb	r3, [r7, #17]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 800390c:	7d3b      	ldrb	r3, [r7, #20]
 800390e:	3b01      	subs	r3, #1
 8003910:	b29b      	uxth	r3, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	b29a      	uxth	r2, r3
 8003916:	7c7b      	ldrb	r3, [r7, #17]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4413      	add	r3, r2
 800391c:	b29a      	uxth	r2, r3
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	e005      	b.n	8003930 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003924:	7d3b      	ldrb	r3, [r7, #20]
 8003926:	b29b      	uxth	r3, r3
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	b29a      	uxth	r2, r3
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003930:	7d3b      	ldrb	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 800393a:	7d3b      	ldrb	r3, [r7, #20]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d901      	bls.n	8003944 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003940:	2310      	movs	r3, #16
 8003942:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003944:	2300      	movs	r3, #0
 8003946:	827b      	strh	r3, [r7, #18]
 8003948:	e00a      	b.n	8003960 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 800394a:	8a7b      	ldrh	r3, [r7, #18]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	18d4      	adds	r4, r2, r3
 8003950:	2009      	movs	r0, #9
 8003952:	f7ff fea1 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003956:	4603      	mov	r3, r0
 8003958:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 800395a:	8a7b      	ldrh	r3, [r7, #18]
 800395c:	3301      	adds	r3, #1
 800395e:	827b      	strh	r3, [r7, #18]
 8003960:	7d3b      	ldrb	r3, [r7, #20]
 8003962:	b29b      	uxth	r3, r3
 8003964:	8a7a      	ldrh	r2, [r7, #18]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3ef      	bcc.n	800394a <TM_MFRC522_ToCard+0x16e>
 800396a:	e001      	b.n	8003970 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 800396c:	2302      	movs	r3, #2
 800396e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}

0800397a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af02      	add	r7, sp, #8
 8003980:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003986:	2100      	movs	r1, #0
 8003988:	200d      	movs	r0, #13
 800398a:	f7ff fe5f 	bl	800364c <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2293      	movs	r2, #147	@ 0x93
 8003992:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3301      	adds	r3, #1
 8003998:	2220      	movs	r2, #32
 800399a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800399c:	f107 030a 	add.w	r3, r7, #10
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	200c      	movs	r0, #12
 80039aa:	f7ff ff17 	bl	80037dc <TM_MFRC522_ToCard>
 80039ae:	4603      	mov	r3, r0
 80039b0:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d118      	bne.n	80039ea <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 80039b8:	2300      	movs	r3, #0
 80039ba:	73bb      	strb	r3, [r7, #14]
 80039bc:	e009      	b.n	80039d2 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80039be:	7bbb      	ldrb	r3, [r7, #14]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	4053      	eors	r3, r2
 80039ca:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	3301      	adds	r3, #1
 80039d0:	73bb      	strb	r3, [r7, #14]
 80039d2:	7bbb      	ldrb	r3, [r7, #14]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d9f2      	bls.n	80039be <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	7b7a      	ldrb	r2, [r7, #13]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80039e6:	2302      	movs	r3, #2
 80039e8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	460b      	mov	r3, r1
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003a02:	2104      	movs	r1, #4
 8003a04:	2005      	movs	r0, #5
 8003a06:	f7ff fe89 	bl	800371c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003a0a:	2180      	movs	r1, #128	@ 0x80
 8003a0c:	200a      	movs	r0, #10
 8003a0e:	f7ff fe6b 	bl	80036e8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e00a      	b.n	8003a2e <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	2009      	movs	r0, #9
 8003a24:	f7ff fe12 	bl	800364c <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
 8003a2e:	7dfa      	ldrb	r2, [r7, #23]
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3f0      	bcc.n	8003a18 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003a36:	2103      	movs	r1, #3
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f7ff fe07 	bl	800364c <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003a3e:	23ff      	movs	r3, #255	@ 0xff
 8003a40:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003a42:	2005      	movs	r0, #5
 8003a44:	f7ff fe28 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75bb      	strb	r3, [r7, #22]
		i--;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <TM_MFRC522_CalculateCRC+0x6e>
 8003a58:	7dbb      	ldrb	r3, [r7, #22]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ef      	beq.n	8003a42 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003a62:	2022      	movs	r0, #34	@ 0x22
 8003a64:	f7ff fe18 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1c5c      	adds	r4, r3, #1
 8003a74:	2021      	movs	r0, #33	@ 0x21
 8003a76:	f7ff fe0f 	bl	8003698 <TM_MFRC522_ReadRegister>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	7023      	strb	r3, [r4, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}

08003a86 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003a8c:	2350      	movs	r3, #80	@ 0x50
 8003a8e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003a94:	463b      	mov	r3, r7
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	463b      	mov	r3, r7
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ffa9 	bl	80039f4 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003aa2:	463a      	mov	r2, r7
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	1dbb      	adds	r3, r7, #6
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	2204      	movs	r2, #4
 8003aae:	200c      	movs	r0, #12
 8003ab0:	f7ff fe94 	bl	80037dc <TM_MFRC522_ToCard>



}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4a14      	ldr	r2, [pc, #80]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6193      	str	r3, [r2, #24]
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a0e      	ldr	r2, [pc, #56]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_MspInit+0x5c>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_MspInit+0x60>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_MspInit+0x60>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40010000 	.word	0x40010000

08003b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_I2C_MspInit+0x74>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d124      	bne.n	8003b8a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b40:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4a14      	ldr	r2, [pc, #80]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b46:	f043 0308 	orr.w	r3, r3, #8
 8003b4a:	6193      	str	r3, [r2, #24]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5e:	2312      	movs	r3, #18
 8003b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b62:	2303      	movs	r3, #3
 8003b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <HAL_I2C_MspInit+0x7c>)
 8003b6e:	f000 fd1d 	bl	80045ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b7c:	61d3      	str	r3, [r2, #28]
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_I2C_MspInit+0x78>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40005800 	.word	0x40005800
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40010c00 	.word	0x40010c00

08003ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 0310 	add.w	r3, r7, #16
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <HAL_SPI_MspInit+0x88>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d12f      	bne.n	8003c20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003bc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b14      	ldr	r3, [pc, #80]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <HAL_SPI_MspInit+0x8c>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003bf0:	23a0      	movs	r3, #160	@ 0xa0
 8003bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	4619      	mov	r1, r3
 8003c02:	480b      	ldr	r0, [pc, #44]	@ (8003c30 <HAL_SPI_MspInit+0x90>)
 8003c04:	f000 fcd2 	bl	80045ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c08:	2340      	movs	r3, #64	@ 0x40
 8003c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4805      	ldr	r0, [pc, #20]	@ (8003c30 <HAL_SPI_MspInit+0x90>)
 8003c1c:	f000 fcc6 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c20:	bf00      	nop
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40013000 	.word	0x40013000
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40010800 	.word	0x40010800

08003c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c44:	d113      	bne.n	8003c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_TIM_Base_MspInit+0x44>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c78 <HAL_TIM_Base_MspInit+0x44>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	61d3      	str	r3, [r2, #28]
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_TIM_Base_MspInit+0x44>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	201c      	movs	r0, #28
 8003c64:	f000 fa6b 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c68:	201c      	movs	r0, #28
 8003c6a:	f000 fa84 	bl	8004176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	@ 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a22      	ldr	r2, [pc, #136]	@ (8003d20 <HAL_UART_MspInit+0xa4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d13d      	bne.n	8003d18 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca6:	6193      	str	r3, [r2, #24]
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003cba:	f043 0308 	orr.w	r3, r3, #8
 8003cbe:	6193      	str	r3, [r2, #24]
 8003cc0:	4b18      	ldr	r3, [pc, #96]	@ (8003d24 <HAL_UART_MspInit+0xa8>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ccc:	2340      	movs	r3, #64	@ 0x40
 8003cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4812      	ldr	r0, [pc, #72]	@ (8003d28 <HAL_UART_MspInit+0xac>)
 8003ce0:	f000 fc64 	bl	80045ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	480c      	ldr	r0, [pc, #48]	@ (8003d28 <HAL_UART_MspInit+0xac>)
 8003cf8:	f000 fc58 	bl	80045ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_UART_MspInit+0xb0>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d12:	4a06      	ldr	r2, [pc, #24]	@ (8003d2c <HAL_UART_MspInit+0xb0>)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d18:	bf00      	nop
 8003d1a:	3728      	adds	r7, #40	@ 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40010c00 	.word	0x40010c00
 8003d2c:	40010000 	.word	0x40010000

08003d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <NMI_Handler+0x4>

08003d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <HardFault_Handler+0x4>

08003d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <MemManage_Handler+0x4>

08003d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <BusFault_Handler+0x4>

08003d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <UsageFault_Handler+0x4>

08003d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d80:	f000 f8c6 	bl	8003f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d8c:	4802      	ldr	r0, [pc, #8]	@ (8003d98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d8e:	f001 fb5e 	bl	800544e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200010d8 	.word	0x200010d8

08003d9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003da0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003da4:	f000 fdb6 	bl	8004914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}

08003dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003db0:	4802      	ldr	r0, [pc, #8]	@ (8003dbc <TIM2_IRQHandler+0x10>)
 8003db2:	f003 fde7 	bl	8007984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200002c8 	.word	0x200002c8

08003dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <_sbrk+0x5c>)
 8003dca:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <_sbrk+0x60>)
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <_sbrk+0x64>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <_sbrk+0x64>)
 8003dde:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <_sbrk+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d207      	bcs.n	8003e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df0:	f008 ffaa 	bl	800cd48 <__errno>
 8003df4:	4603      	mov	r3, r0
 8003df6:	220c      	movs	r2, #12
 8003df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	e009      	b.n	8003e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e00:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <_sbrk+0x64>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <_sbrk+0x64>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <_sbrk+0x64>)
 8003e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20005000 	.word	0x20005000
 8003e20:	00000400 	.word	0x00000400
 8003e24:	20000414 	.word	0x20000414
 8003e28:	20001730 	.word	0x20001730

08003e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e3a:	e003      	b.n	8003e44 <LoopCopyDataInit>

08003e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e42:	3104      	adds	r1, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e44:	480a      	ldr	r0, [pc, #40]	@ (8003e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e46:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e4c:	d3f6      	bcc.n	8003e3c <CopyDataInit>
  ldr r2, =_sbss
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e50:	e002      	b.n	8003e58 <LoopFillZerobss>

08003e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e54:	f842 3b04 	str.w	r3, [r2], #4

08003e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e5c:	d3f9      	bcc.n	8003e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e5e:	f7ff ffe5 	bl	8003e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e62:	f008 ff77 	bl	800cd54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e66:	f7fd f8b1 	bl	8000fcc <main>
  bx lr
 8003e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8003e6c:	0800df98 	.word	0x0800df98
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e74:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003e78:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003e7c:	2000172c 	.word	0x2000172c

08003e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC1_2_IRQHandler>
	...

08003e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e88:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <HAL_Init+0x28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a07      	ldr	r2, [pc, #28]	@ (8003eac <HAL_Init+0x28>)
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e94:	2003      	movs	r0, #3
 8003e96:	f000 f947 	bl	8004128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f000 f808 	bl	8003eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea0:	f7ff fe0c 	bl	8003abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000

08003eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eb8:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <HAL_InitTick+0x54>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_InitTick+0x58>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f95f 	bl	8004192 <HAL_SYSTICK_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00e      	b.n	8003efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d80a      	bhi.n	8003efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f000 f927 	bl	800413e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef0:	4a06      	ldr	r2, [pc, #24]	@ (8003f0c <HAL_InitTick+0x5c>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000028 	.word	0x20000028
 8003f08:	20000030 	.word	0x20000030
 8003f0c:	2000002c 	.word	0x2000002c

08003f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_IncTick+0x1c>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_IncTick+0x20>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a03      	ldr	r2, [pc, #12]	@ (8003f30 <HAL_IncTick+0x20>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	20000030 	.word	0x20000030
 8003f30:	20000418 	.word	0x20000418

08003f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return uwTick;
 8003f38:	4b02      	ldr	r3, [pc, #8]	@ (8003f44 <HAL_GetTick+0x10>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000418 	.word	0x20000418

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff fff0 	bl	8003f34 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffe0 	bl	8003f34 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000030 	.word	0x20000030

08003f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fac:	4013      	ands	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fdc:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 0307 	and.w	r3, r3, #7
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db0b      	blt.n	800401e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	f003 021f 	and.w	r2, r3, #31
 800400c:	4906      	ldr	r1, [pc, #24]	@ (8004028 <__NVIC_EnableIRQ+0x34>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2001      	movs	r0, #1
 8004016:	fa00 f202 	lsl.w	r2, r0, r2
 800401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100

0800402c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db0a      	blt.n	8004056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	490c      	ldr	r1, [pc, #48]	@ (8004078 <__NVIC_SetPriority+0x4c>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	440b      	add	r3, r1
 8004050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004054:	e00a      	b.n	800406c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4908      	ldr	r1, [pc, #32]	@ (800407c <__NVIC_SetPriority+0x50>)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3b04      	subs	r3, #4
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	440b      	add	r3, r1
 800406a:	761a      	strb	r2, [r3, #24]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000e100 	.word	0xe000e100
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	@ 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f1c3 0307 	rsb	r3, r3, #7
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf28      	it	cs
 800409e:	2304      	movcs	r3, #4
 80040a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3304      	adds	r3, #4
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d902      	bls.n	80040b0 <NVIC_EncodePriority+0x30>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3b03      	subs	r3, #3
 80040ae:	e000      	b.n	80040b2 <NVIC_EncodePriority+0x32>
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	401a      	ands	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	43d9      	mvns	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	4313      	orrs	r3, r2
         );
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	@ 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f4:	d301      	bcc.n	80040fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00f      	b.n	800411a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <SysTick_Config+0x40>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004102:	210f      	movs	r1, #15
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f7ff ff90 	bl	800402c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <SysTick_Config+0x40>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004112:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <SysTick_Config+0x40>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000e010 	.word	0xe000e010

08004128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff2d 	bl	8003f90 <__NVIC_SetPriorityGrouping>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004150:	f7ff ff42 	bl	8003fd8 <__NVIC_GetPriorityGrouping>
 8004154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff90 	bl	8004080 <NVIC_EncodePriority>
 8004160:	4602      	mov	r2, r0
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff5f 	bl	800402c <__NVIC_SetPriority>
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff35 	bl	8003ff4 <__NVIC_EnableIRQ>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffa2 	bl	80040e4 <SysTick_Config>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <HAL_FLASH_Program+0xd8>)
 80041c8:	7e1b      	ldrb	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_FLASH_Program+0x26>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e054      	b.n	800427c <HAL_FLASH_Program+0xd0>
 80041d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004284 <HAL_FLASH_Program+0xd8>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80041dc:	f000 f8a8 	bl	8004330 <FLASH_WaitForLastOperation>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d144      	bne.n	8004274 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	757b      	strb	r3, [r7, #21]
 80041f4:	e007      	b.n	8004206 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d102      	bne.n	8004202 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80041fc:	2302      	movs	r3, #2
 80041fe:	757b      	strb	r3, [r7, #21]
 8004200:	e001      	b.n	8004206 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004202:	2304      	movs	r3, #4
 8004204:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004206:	2300      	movs	r3, #0
 8004208:	75bb      	strb	r3, [r7, #22]
 800420a:	e02d      	b.n	8004268 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800420c:	7dbb      	ldrb	r3, [r7, #22]
 800420e:	005a      	lsls	r2, r3, #1
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	eb02 0c03 	add.w	ip, r2, r3
 8004216:	7dbb      	ldrb	r3, [r7, #22]
 8004218:	0119      	lsls	r1, r3, #4
 800421a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421e:	f1c1 0620 	rsb	r6, r1, #32
 8004222:	f1a1 0020 	sub.w	r0, r1, #32
 8004226:	fa22 f401 	lsr.w	r4, r2, r1
 800422a:	fa03 f606 	lsl.w	r6, r3, r6
 800422e:	4334      	orrs	r4, r6
 8004230:	fa23 f000 	lsr.w	r0, r3, r0
 8004234:	4304      	orrs	r4, r0
 8004236:	fa23 f501 	lsr.w	r5, r3, r1
 800423a:	b2a3      	uxth	r3, r4
 800423c:	4619      	mov	r1, r3
 800423e:	4660      	mov	r0, ip
 8004240:	f000 f85a 	bl	80042f8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004244:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004248:	f000 f872 	bl	8004330 <FLASH_WaitForLastOperation>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004250:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_FLASH_Program+0xdc>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_FLASH_Program+0xdc>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004262:	7dbb      	ldrb	r3, [r7, #22]
 8004264:	3301      	adds	r3, #1
 8004266:	75bb      	strb	r3, [r7, #22]
 8004268:	7dba      	ldrb	r2, [r7, #22]
 800426a:	7d7b      	ldrb	r3, [r7, #21]
 800426c:	429a      	cmp	r2, r3
 800426e:	d3cd      	bcc.n	800420c <HAL_FLASH_Program+0x60>
 8004270:	e000      	b.n	8004274 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004272:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_FLASH_Program+0xd8>)
 8004276:	2200      	movs	r2, #0
 8004278:	761a      	strb	r2, [r3, #24]

  return status;
 800427a:	7dfb      	ldrb	r3, [r7, #23]
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004284:	20000420 	.word	0x20000420
 8004288:	40022000 	.word	0x40022000

0800428c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <HAL_FLASH_Unlock+0x40>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_FLASH_Unlock+0x40>)
 80042a4:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <HAL_FLASH_Unlock+0x44>)
 80042a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <HAL_FLASH_Unlock+0x40>)
 80042aa:	4a0a      	ldr	r2, [pc, #40]	@ (80042d4 <HAL_FLASH_Unlock+0x48>)
 80042ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042ae:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <HAL_FLASH_Unlock+0x40>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80042be:	79fb      	ldrb	r3, [r7, #7]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40022000 	.word	0x40022000
 80042d0:	45670123 	.word	0x45670123
 80042d4:	cdef89ab 	.word	0xcdef89ab

080042d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_FLASH_Lock+0x1c>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <HAL_FLASH_Lock+0x1c>)
 80042e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000

080042f8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004304:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <FLASH_Program_HalfWord+0x30>)
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <FLASH_Program_HalfWord+0x34>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4a07      	ldr	r2, [pc, #28]	@ (800432c <FLASH_Program_HalfWord+0x34>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	887a      	ldrh	r2, [r7, #2]
 800431a:	801a      	strh	r2, [r3, #0]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000420 	.word	0x20000420
 800432c:	40022000 	.word	0x40022000

08004330 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004338:	f7ff fdfc 	bl	8003f34 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800433e:	e010      	b.n	8004362 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d00c      	beq.n	8004362 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <FLASH_WaitForLastOperation+0x2e>
 800434e:	f7ff fdf1 	bl	8003f34 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d201      	bcs.n	8004362 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e025      	b.n	80043ae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004362:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e8      	bne.n	8004340 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800437a:	4b0f      	ldr	r3, [pc, #60]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 800437c:	2220      	movs	r2, #32
 800437e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004380:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800438c:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004398:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <FLASH_WaitForLastOperation+0x88>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80043a4:	f000 f80a 	bl	80043bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000

080043bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80043c6:	4b23      	ldr	r3, [pc, #140]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043d2:	4b21      	ldr	r3, [pc, #132]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 80043dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80043f2:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 80043fc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004406:	4b13      	ldr	r3, [pc, #76]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004412:	4b11      	ldr	r3, [pc, #68]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <FLASH_SetErrorCode+0x9c>)
 800441c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f240 1201 	movw	r2, #257	@ 0x101
 8004430:	4293      	cmp	r3, r2
 8004432:	d106      	bne.n	8004442 <FLASH_SetErrorCode+0x86>
 8004434:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4a06      	ldr	r2, [pc, #24]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	61d3      	str	r3, [r2, #28]
}  
 8004440:	e002      	b.n	8004448 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004442:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <FLASH_SetErrorCode+0x98>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60d3      	str	r3, [r2, #12]
}  
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40022000 	.word	0x40022000
 8004458:	20000420 	.word	0x20000420

0800445c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800446e:	4b2f      	ldr	r3, [pc, #188]	@ (800452c <HAL_FLASHEx_Erase+0xd0>)
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_FLASHEx_Erase+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e053      	b.n	8004522 <HAL_FLASHEx_Erase+0xc6>
 800447a:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <HAL_FLASHEx_Erase+0xd0>)
 800447c:	2201      	movs	r2, #1
 800447e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d116      	bne.n	80044b6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004488:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800448c:	f7ff ff50 	bl	8004330 <FLASH_WaitForLastOperation>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d141      	bne.n	800451a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004496:	2001      	movs	r0, #1
 8004498:	f000 f84c 	bl	8004534 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800449c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80044a0:	f7ff ff46 	bl	8004330 <FLASH_WaitForLastOperation>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80044a8:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <HAL_FLASHEx_Erase+0xd4>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <HAL_FLASHEx_Erase+0xd4>)
 80044ae:	f023 0304 	bic.w	r3, r3, #4
 80044b2:	6113      	str	r3, [r2, #16]
 80044b4:	e031      	b.n	800451a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80044ba:	f7ff ff39 	bl	8004330 <FLASH_WaitForLastOperation>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d12a      	bne.n	800451a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	e019      	b.n	8004508 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	f000 f849 	bl	800456c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80044de:	f7ff ff27 	bl	8004330 <FLASH_WaitForLastOperation>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_FLASHEx_Erase+0xd4>)
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <HAL_FLASHEx_Erase+0xd4>)
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	601a      	str	r2, [r3, #0]
            break;
 80044fe:	e00c      	b.n	800451a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004506:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	029a      	lsls	r2, r3, #10
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4413      	add	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d3dc      	bcc.n	80044d4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800451a:	4b04      	ldr	r3, [pc, #16]	@ (800452c <HAL_FLASHEx_Erase+0xd0>)
 800451c:	2200      	movs	r2, #0
 800451e:	761a      	strb	r2, [r3, #24]

  return status;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000420 	.word	0x20000420
 8004530:	40022000 	.word	0x40022000

08004534 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <FLASH_MassErase+0x30>)
 800453e:	2200      	movs	r2, #0
 8004540:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <FLASH_MassErase+0x34>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <FLASH_MassErase+0x34>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <FLASH_MassErase+0x34>)
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <FLASH_MassErase+0x34>)
 8004554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004558:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	20000420 	.word	0x20000420
 8004568:	40022000 	.word	0x40022000

0800456c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <FLASH_PageErase+0x38>)
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <FLASH_PageErase+0x3c>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4a0a      	ldr	r2, [pc, #40]	@ (80045a8 <FLASH_PageErase+0x3c>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004586:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <FLASH_PageErase+0x3c>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <FLASH_PageErase+0x3c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4a05      	ldr	r2, [pc, #20]	@ (80045a8 <FLASH_PageErase+0x3c>)
 8004592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004596:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000420 	.word	0x20000420
 80045a8:	40022000 	.word	0x40022000

080045ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	@ 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045be:	e169      	b.n	8004894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045c0:	2201      	movs	r2, #1
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f040 8158 	bne.w	800488e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a9a      	ldr	r2, [pc, #616]	@ (800484c <HAL_GPIO_Init+0x2a0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d05e      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
 80045e8:	4a98      	ldr	r2, [pc, #608]	@ (800484c <HAL_GPIO_Init+0x2a0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d875      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 80045ee:	4a98      	ldr	r2, [pc, #608]	@ (8004850 <HAL_GPIO_Init+0x2a4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d058      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
 80045f4:	4a96      	ldr	r2, [pc, #600]	@ (8004850 <HAL_GPIO_Init+0x2a4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d86f      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 80045fa:	4a96      	ldr	r2, [pc, #600]	@ (8004854 <HAL_GPIO_Init+0x2a8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d052      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
 8004600:	4a94      	ldr	r2, [pc, #592]	@ (8004854 <HAL_GPIO_Init+0x2a8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d869      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 8004606:	4a94      	ldr	r2, [pc, #592]	@ (8004858 <HAL_GPIO_Init+0x2ac>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d04c      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
 800460c:	4a92      	ldr	r2, [pc, #584]	@ (8004858 <HAL_GPIO_Init+0x2ac>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d863      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 8004612:	4a92      	ldr	r2, [pc, #584]	@ (800485c <HAL_GPIO_Init+0x2b0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d046      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
 8004618:	4a90      	ldr	r2, [pc, #576]	@ (800485c <HAL_GPIO_Init+0x2b0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d85d      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 800461e:	2b12      	cmp	r3, #18
 8004620:	d82a      	bhi.n	8004678 <HAL_GPIO_Init+0xcc>
 8004622:	2b12      	cmp	r3, #18
 8004624:	d859      	bhi.n	80046da <HAL_GPIO_Init+0x12e>
 8004626:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <HAL_GPIO_Init+0x80>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	080046a7 	.word	0x080046a7
 8004630:	08004681 	.word	0x08004681
 8004634:	08004693 	.word	0x08004693
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046db 	.word	0x080046db
 8004640:	080046db 	.word	0x080046db
 8004644:	080046db 	.word	0x080046db
 8004648:	080046db 	.word	0x080046db
 800464c:	080046db 	.word	0x080046db
 8004650:	080046db 	.word	0x080046db
 8004654:	080046db 	.word	0x080046db
 8004658:	080046db 	.word	0x080046db
 800465c:	080046db 	.word	0x080046db
 8004660:	080046db 	.word	0x080046db
 8004664:	080046db 	.word	0x080046db
 8004668:	080046db 	.word	0x080046db
 800466c:	080046db 	.word	0x080046db
 8004670:	08004689 	.word	0x08004689
 8004674:	0800469d 	.word	0x0800469d
 8004678:	4a79      	ldr	r2, [pc, #484]	@ (8004860 <HAL_GPIO_Init+0x2b4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800467e:	e02c      	b.n	80046da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	623b      	str	r3, [r7, #32]
          break;
 8004686:	e029      	b.n	80046dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	623b      	str	r3, [r7, #32]
          break;
 8004690:	e024      	b.n	80046dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	3308      	adds	r3, #8
 8004698:	623b      	str	r3, [r7, #32]
          break;
 800469a:	e01f      	b.n	80046dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	330c      	adds	r3, #12
 80046a2:	623b      	str	r3, [r7, #32]
          break;
 80046a4:	e01a      	b.n	80046dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046ae:	2304      	movs	r3, #4
 80046b0:	623b      	str	r3, [r7, #32]
          break;
 80046b2:	e013      	b.n	80046dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046bc:	2308      	movs	r3, #8
 80046be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	611a      	str	r2, [r3, #16]
          break;
 80046c6:	e009      	b.n	80046dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046c8:	2308      	movs	r3, #8
 80046ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	615a      	str	r2, [r3, #20]
          break;
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
          break;
 80046d8:	e000      	b.n	80046dc <HAL_GPIO_Init+0x130>
          break;
 80046da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2bff      	cmp	r3, #255	@ 0xff
 80046e0:	d801      	bhi.n	80046e6 <HAL_GPIO_Init+0x13a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	e001      	b.n	80046ea <HAL_GPIO_Init+0x13e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2bff      	cmp	r3, #255	@ 0xff
 80046f0:	d802      	bhi.n	80046f8 <HAL_GPIO_Init+0x14c>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	e002      	b.n	80046fe <HAL_GPIO_Init+0x152>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	3b08      	subs	r3, #8
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	210f      	movs	r1, #15
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	401a      	ands	r2, r3
 8004710:	6a39      	ldr	r1, [r7, #32]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	fa01 f303 	lsl.w	r3, r1, r3
 8004718:	431a      	orrs	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80b1 	beq.w	800488e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800472c:	4b4d      	ldr	r3, [pc, #308]	@ (8004864 <HAL_GPIO_Init+0x2b8>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <HAL_GPIO_Init+0x2b8>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6193      	str	r3, [r2, #24]
 8004738:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_GPIO_Init+0x2b8>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004744:	4a48      	ldr	r2, [pc, #288]	@ (8004868 <HAL_GPIO_Init+0x2bc>)
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	3302      	adds	r3, #2
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a40      	ldr	r2, [pc, #256]	@ (800486c <HAL_GPIO_Init+0x2c0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_GPIO_Init+0x1ec>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3f      	ldr	r2, [pc, #252]	@ (8004870 <HAL_GPIO_Init+0x2c4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00d      	beq.n	8004794 <HAL_GPIO_Init+0x1e8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3e      	ldr	r2, [pc, #248]	@ (8004874 <HAL_GPIO_Init+0x2c8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <HAL_GPIO_Init+0x1e4>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3d      	ldr	r2, [pc, #244]	@ (8004878 <HAL_GPIO_Init+0x2cc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_GPIO_Init+0x1e0>
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <HAL_GPIO_Init+0x1ee>
 800478c:	2304      	movs	r3, #4
 800478e:	e004      	b.n	800479a <HAL_GPIO_Init+0x1ee>
 8004790:	2302      	movs	r3, #2
 8004792:	e002      	b.n	800479a <HAL_GPIO_Init+0x1ee>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_GPIO_Init+0x1ee>
 8004798:	2300      	movs	r3, #0
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	f002 0203 	and.w	r2, r2, #3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4093      	lsls	r3, r2
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047aa:	492f      	ldr	r1, [pc, #188]	@ (8004868 <HAL_GPIO_Init+0x2bc>)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3302      	adds	r3, #2
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047c4:	4b2d      	ldr	r3, [pc, #180]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	492c      	ldr	r1, [pc, #176]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047d2:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	43db      	mvns	r3, r3
 80047da:	4928      	ldr	r1, [pc, #160]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047dc:	4013      	ands	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047ec:	4b23      	ldr	r3, [pc, #140]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4922      	ldr	r1, [pc, #136]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047fa:	4b20      	ldr	r3, [pc, #128]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	43db      	mvns	r3, r3
 8004802:	491e      	ldr	r1, [pc, #120]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004804:	4013      	ands	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004814:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	4918      	ldr	r1, [pc, #96]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004822:	4b16      	ldr	r3, [pc, #88]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	43db      	mvns	r3, r3
 800482a:	4914      	ldr	r1, [pc, #80]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 800482c:	4013      	ands	r3, r2
 800482e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d021      	beq.n	8004880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800483c:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	490e      	ldr	r1, [pc, #56]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	60cb      	str	r3, [r1, #12]
 8004848:	e021      	b.n	800488e <HAL_GPIO_Init+0x2e2>
 800484a:	bf00      	nop
 800484c:	10320000 	.word	0x10320000
 8004850:	10310000 	.word	0x10310000
 8004854:	10220000 	.word	0x10220000
 8004858:	10210000 	.word	0x10210000
 800485c:	10120000 	.word	0x10120000
 8004860:	10110000 	.word	0x10110000
 8004864:	40021000 	.word	0x40021000
 8004868:	40010000 	.word	0x40010000
 800486c:	40010800 	.word	0x40010800
 8004870:	40010c00 	.word	0x40010c00
 8004874:	40011000 	.word	0x40011000
 8004878:	40011400 	.word	0x40011400
 800487c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_GPIO_Init+0x304>)
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	43db      	mvns	r3, r3
 8004888:	4909      	ldr	r1, [pc, #36]	@ (80048b0 <HAL_GPIO_Init+0x304>)
 800488a:	4013      	ands	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f47f ae8e 	bne.w	80045c0 <HAL_GPIO_Init+0x14>
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	372c      	adds	r7, #44	@ 0x2c
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40010400 	.word	0x40010400

080048b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e001      	b.n	80048d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	807b      	strh	r3, [r7, #2]
 80048ee:	4613      	mov	r3, r2
 80048f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f2:	787b      	ldrb	r3, [r7, #1]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048fe:	e003      	b.n	8004908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	041a      	lsls	r2, r3, #16
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	611a      	str	r2, [r3, #16]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
	...

08004914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800492a:	4a05      	ldr	r2, [pc, #20]	@ (8004940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f806 	bl	8004944 <HAL_GPIO_EXTI_Callback>
  }
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40010400 	.word	0x40010400

08004944 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e12b      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f8ce 	bl	8003b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	@ 0x24
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049bc:	f002 fb78 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 80049c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a81      	ldr	r2, [pc, #516]	@ (8004bcc <HAL_I2C_Init+0x274>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d807      	bhi.n	80049dc <HAL_I2C_Init+0x84>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a80      	ldr	r2, [pc, #512]	@ (8004bd0 <HAL_I2C_Init+0x278>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e006      	b.n	80049ea <HAL_I2C_Init+0x92>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a7d      	ldr	r2, [pc, #500]	@ (8004bd4 <HAL_I2C_Init+0x27c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bf94      	ite	ls
 80049e4:	2301      	movls	r3, #1
 80049e6:	2300      	movhi	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0e7      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a78      	ldr	r2, [pc, #480]	@ (8004bd8 <HAL_I2C_Init+0x280>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a6a      	ldr	r2, [pc, #424]	@ (8004bcc <HAL_I2C_Init+0x274>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d802      	bhi.n	8004a2c <HAL_I2C_Init+0xd4>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	e009      	b.n	8004a40 <HAL_I2C_Init+0xe8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	4a69      	ldr	r2, [pc, #420]	@ (8004bdc <HAL_I2C_Init+0x284>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	3301      	adds	r3, #1
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	495c      	ldr	r1, [pc, #368]	@ (8004bcc <HAL_I2C_Init+0x274>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d819      	bhi.n	8004a94 <HAL_I2C_Init+0x13c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e59      	subs	r1, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a74:	400b      	ands	r3, r1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_I2C_Init+0x138>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1e59      	subs	r1, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8e:	e051      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e04f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d111      	bne.n	8004ac0 <HAL_I2C_Init+0x168>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e58      	subs	r0, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e012      	b.n	8004ae6 <HAL_I2C_Init+0x18e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	0099      	lsls	r1, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Init+0x196>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e022      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_I2C_Init+0x1bc>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e58      	subs	r0, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	440b      	add	r3, r1
 8004b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b12:	e00f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e58      	subs	r0, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	0099      	lsls	r1, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	6809      	ldr	r1, [r1, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6911      	ldr	r1, [r2, #16]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	000186a0 	.word	0x000186a0
 8004bd0:	001e847f 	.word	0x001e847f
 8004bd4:	003d08ff 	.word	0x003d08ff
 8004bd8:	431bde83 	.word	0x431bde83
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	460b      	mov	r3, r1
 8004bee:	817b      	strh	r3, [r7, #10]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7ff f99e 	bl	8003f34 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 80e0 	bne.w	8004dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4970      	ldr	r1, [pc, #448]	@ (8004dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f964 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0d3      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2C_Master_Transmit+0x50>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0cc      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d007      	beq.n	8004c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2221      	movs	r2, #33	@ 0x21
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2210      	movs	r2, #16
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	893a      	ldrh	r2, [r7, #8]
 8004c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a50      	ldr	r2, [pc, #320]	@ (8004dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f89c 	bl	8004ddc <I2C_MasterRequestWrite>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e08d      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cc4:	e066      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f9de 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d107      	bne.n	8004cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e06b      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d11b      	bne.n	8004d68 <HAL_I2C_Master_Transmit+0x188>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d017      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	6a39      	ldr	r1, [r7, #32]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f9ce 	bl	800510e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00d      	beq.n	8004d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d107      	bne.n	8004d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e01a      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d194      	bne.n	8004cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	00100002 	.word	0x00100002
 8004dd8:	ffff0000 	.word	0xffff0000

08004ddc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	460b      	mov	r3, r1
 8004dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d006      	beq.n	8004e06 <I2C_MasterRequestWrite+0x2a>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d003      	beq.n	8004e06 <I2C_MasterRequestWrite+0x2a>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e04:	d108      	bne.n	8004e18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e00b      	b.n	8004e30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	2b12      	cmp	r3, #18
 8004e1e:	d107      	bne.n	8004e30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f84f 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e56:	d103      	bne.n	8004e60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e035      	b.n	8004ed0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e6c:	d108      	bne.n	8004e80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	e01b      	b.n	8004eb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e80:	897b      	ldrh	r3, [r7, #10]
 8004e82:	11db      	asrs	r3, r3, #7
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0306 	and.w	r3, r3, #6
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f063 030f 	orn	r3, r3, #15
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	490e      	ldr	r1, [pc, #56]	@ (8004ed8 <I2C_MasterRequestWrite+0xfc>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f875 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e010      	b.n	8004ed0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eae:	897b      	ldrh	r3, [r7, #10]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4907      	ldr	r1, [pc, #28]	@ (8004edc <I2C_MasterRequestWrite+0x100>)
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f865 	bl	8004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	00010008 	.word	0x00010008
 8004edc:	00010002 	.word	0x00010002

08004ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef0:	e025      	b.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d021      	beq.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efa:	f7ff f81b 	bl	8003f34 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d116      	bne.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e023      	b.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10d      	bne.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	e00c      	b.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0b6      	beq.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9c:	e051      	b.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fac:	d123      	bne.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e046      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d021      	beq.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fe ff99 	bl	8003f34 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e020      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10c      	bne.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	43da      	mvns	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	e00b      	b.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	43da      	mvns	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d18d      	bne.n	8004f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005098:	e02d      	b.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f878 	bl	8005190 <I2C_IsAcknowledgeFailed>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e02d      	b.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d021      	beq.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fe ff3f 	bl	8003f34 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e007      	b.n	8005106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b80      	cmp	r3, #128	@ 0x80
 8005102:	d1ca      	bne.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800511a:	e02d      	b.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f837 	bl	8005190 <I2C_IsAcknowledgeFailed>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e02d      	b.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d021      	beq.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005134:	f7fe fefe 	bl	8003f34 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e007      	b.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b04      	cmp	r3, #4
 8005184:	d1ca      	bne.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a6:	d11b      	bne.n	80051e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	f043 0204 	orr.w	r2, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ee:	b08b      	sub	sp, #44	@ 0x2c
 80051f0:	af06      	add	r7, sp, #24
 80051f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0fd      	b.n	80053fa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f007 fa0a 	bl	800c62c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2203      	movs	r2, #3
 800521c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f003 f981 	bl	800852c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	687e      	ldr	r6, [r7, #4]
 8005232:	466d      	mov	r5, sp
 8005234:	f106 0410 	add.w	r4, r6, #16
 8005238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	1d33      	adds	r3, r6, #4
 8005242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005244:	6838      	ldr	r0, [r7, #0]
 8005246:	f003 f94b 	bl	80084e0 <USB_CoreInit>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0ce      	b.n	80053fa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f003 f97c 	bl	8008560 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	e04c      	b.n	8005308 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3301      	adds	r3, #1
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	b298      	uxth	r0, r3
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3336      	adds	r3, #54	@ 0x36
 80052ac:	4602      	mov	r2, r0
 80052ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	3303      	adds	r3, #3
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	440b      	add	r3, r1
 80052d4:	3338      	adds	r3, #56	@ 0x38
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	333c      	adds	r3, #60	@ 0x3c
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3340      	adds	r3, #64	@ 0x40
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	3301      	adds	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3ad      	bcc.n	800526e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e044      	b.n	80053a2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	3301      	adds	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3b5      	bcc.n	8005318 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	687e      	ldr	r6, [r7, #4]
 80053b4:	466d      	mov	r5, sp
 80053b6:	f106 0410 	add.w	r4, r6, #16
 80053ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	1d33      	adds	r3, r6, #4
 80053c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c6:	6838      	ldr	r0, [r7, #0]
 80053c8:	f003 f8d6 	bl	8008578 <USB_DevInit>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e00d      	b.n	80053fa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f005 faf7 	bl	800a9e6 <USB_DevDisconnect>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_PCD_Start+0x16>
 8005414:	2302      	movs	r3, #2
 8005416:	e016      	b.n	8005446 <HAL_PCD_Start+0x44>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f003 f86b 	bl	8008500 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800542a:	2101      	movs	r1, #1
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f007 fb70 	bl	800cb12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f005 facb 	bl	800a9d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f005 facd 	bl	800a9fa <USB_ReadInterrupts>
 8005460:	4603      	mov	r3, r0
 8005462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800546a:	d102      	bne.n	8005472 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fb5f 	bl	8005b30 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f005 fabf 	bl	800a9fa <USB_ReadInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005486:	d112      	bne.n	80054ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549a:	b292      	uxth	r2, r2
 800549c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f007 f93e 	bl	800c722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80054a6:	2100      	movs	r1, #0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f923 	bl	80056f4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f005 faa1 	bl	800a9fa <USB_ReadInterrupts>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c2:	d10b      	bne.n	80054dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054d6:	b292      	uxth	r2, r2
 80054d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f005 fa8a 	bl	800a9fa <USB_ReadInterrupts>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f0:	d10b      	bne.n	800550a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005504:	b292      	uxth	r2, r2
 8005506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f005 fa73 	bl	800a9fa <USB_ReadInterrupts>
 8005514:	4603      	mov	r3, r0
 8005516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d126      	bne.n	800556e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	b292      	uxth	r2, r2
 8005534:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0208 	bic.w	r2, r2, #8
 800554a:	b292      	uxth	r2, r2
 800554c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f007 f91f 	bl	800c794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005568:	b292      	uxth	r2, r2
 800556a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f005 fa41 	bl	800a9fa <USB_ReadInterrupts>
 8005578:	4603      	mov	r3, r0
 800557a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005582:	f040 8082 	bne.w	800568a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005586:	2300      	movs	r3, #0
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e010      	b.n	80055ae <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	7ffb      	ldrb	r3, [r7, #31]
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	b292      	uxth	r2, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	3320      	adds	r3, #32
 80055a2:	443b      	add	r3, r7
 80055a4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
 80055aa:	3301      	adds	r3, #1
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2b07      	cmp	r3, #7
 80055b2:	d9eb      	bls.n	800558c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	b292      	uxth	r2, r2
 80055c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	b292      	uxth	r2, r2
 80055e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80055e4:	bf00      	nop
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f6      	beq.n	80055e6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800560a:	b292      	uxth	r2, r2
 800560c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e00f      	b.n	8005636 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005616:	7ffb      	ldrb	r3, [r7, #31]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	4611      	mov	r1, r2
 800561e:	7ffa      	ldrb	r2, [r7, #31]
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	440a      	add	r2, r1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	3320      	adds	r3, #32
 8005628:	443b      	add	r3, r7
 800562a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800562e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	3301      	adds	r3, #1
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b07      	cmp	r3, #7
 800563a:	d9ec      	bls.n	8005616 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0208 	orr.w	r2, r2, #8
 800564e:	b292      	uxth	r2, r2
 8005650:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005666:	b292      	uxth	r2, r2
 8005668:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0204 	orr.w	r2, r2, #4
 800567e:	b292      	uxth	r2, r2
 8005680:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f007 f86b 	bl	800c760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f005 f9b3 	bl	800a9fa <USB_ReadInterrupts>
 8005694:	4603      	mov	r3, r0
 8005696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800569a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800569e:	d10e      	bne.n	80056be <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80056b2:	b292      	uxth	r2, r2
 80056b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f007 f824 	bl	800c706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f005 f999 	bl	800a9fa <USB_ReadInterrupts>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d2:	d10b      	bne.n	80056ec <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e6:	b292      	uxth	r2, r2
 80056e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 80056ec:	bf00      	nop
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_PCD_SetAddress+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e013      	b.n	8005736 <HAL_PCD_SetAddress+0x42>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f005 f940 	bl	800a9ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	4608      	mov	r0, r1
 8005748:	4611      	mov	r1, r2
 800574a:	461a      	mov	r2, r3
 800574c:	4603      	mov	r3, r0
 800574e:	70fb      	strb	r3, [r7, #3]
 8005750:	460b      	mov	r3, r1
 8005752:	803b      	strh	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800575c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005760:	2b00      	cmp	r3, #0
 8005762:	da0e      	bge.n	8005782 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	705a      	strb	r2, [r3, #1]
 8005780:	e00e      	b.n	80057a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 0207 	and.w	r2, r3, #7
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057ac:	883a      	ldrh	r2, [r7, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	78ba      	ldrb	r2, [r7, #2]
 80057b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057ca:	78bb      	ldrb	r3, [r7, #2]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d102      	bne.n	80057d6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_PCD_EP_Open+0xa6>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e00e      	b.n	8005802 <HAL_PCD_EP_Open+0xc4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 fee0 	bl	80085b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005800:	7afb      	ldrb	r3, [r7, #11]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581a:	2b00      	cmp	r3, #0
 800581c:	da0e      	bge.n	800583c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	705a      	strb	r2, [r3, #1]
 800583a:	e00e      	b.n	800585a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 0207 	and.w	r2, r3, #7
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_PCD_EP_Close+0x6a>
 8005870:	2302      	movs	r3, #2
 8005872:	e00e      	b.n	8005892 <HAL_PCD_EP_Close+0x88>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f003 fa02 	bl	8008c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	460b      	mov	r3, r1
 80058a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058aa:	7afb      	ldrb	r3, [r7, #11]
 80058ac:	f003 0207 	and.w	r2, r3, #7
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2200      	movs	r2, #0
 80058d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 fbb4 	bl	8009064 <USB_EPStartXfer>
 80058fc:	e005      	b.n	800590a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	4618      	mov	r0, r3
 8005906:	f003 fbad 	bl	8009064 <USB_EPStartXfer>
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 0207 	and.w	r2, r3, #7
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	460b      	mov	r3, r1
 8005950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005952:	7afb      	ldrb	r3, [r7, #11]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2201      	movs	r2, #1
 800598c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	b2da      	uxtb	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 fb5a 	bl	8009064 <USB_EPStartXfer>
 80059b0:	e005      	b.n	80059be <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f003 fb53 	bl	8009064 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 0207 	and.w	r2, r3, #7
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d901      	bls.n	80059e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e04c      	b.n	8005a80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da0e      	bge.n	8005a0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	705a      	strb	r2, [r3, #1]
 8005a0a:	e00c      	b.n	8005a26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_PCD_EP_SetStall+0x7e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e01c      	b.n	8005a80 <HAL_PCD_EP_SetStall+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f004 feac 	bl	800a7b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d108      	bne.n	8005a76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f004 ffd1 	bl	800aa18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 020f 	and.w	r2, r3, #15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d901      	bls.n	8005aa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e040      	b.n	8005b28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da0e      	bge.n	8005acc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	705a      	strb	r2, [r3, #1]
 8005aca:	e00e      	b.n	8005aea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 0207 	and.w	r2, r3, #7
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_PCD_EP_ClrStall+0x82>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e00e      	b.n	8005b28 <HAL_PCD_EP_ClrStall+0xa0>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f004 fe9a 	bl	800a852 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08e      	sub	sp, #56	@ 0x38
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b38:	e2de      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8005b50:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 8157 	bne.w	8005e08 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005b5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d151      	bne.n	8005c08 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b74:	81fb      	strh	r3, [r7, #14]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3328      	adds	r3, #40	@ 0x28
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	441a      	add	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f006 fd81 	bl	800c6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 828d 	beq.w	80060f8 <PCD_EP_ISR_Handler+0x5c8>
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 8288 	bne.w	80060f8 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005c06:	e277      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d034      	beq.n	8005c8c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4413      	add	r3, r2
 8005c36:	3306      	adds	r3, #6
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f004 ff28 	bl	800aab6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005c72:	4013      	ands	r3, r2
 8005c74:	823b      	strh	r3, [r7, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	8a3a      	ldrh	r2, [r7, #16]
 8005c7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c80:	b292      	uxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f006 fcf7 	bl	800c678 <HAL_PCD_SetupStageCallback>
 8005c8a:	e235      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f280 8231 	bge.w	80060f8 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	83bb      	strh	r3, [r7, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	8bba      	ldrh	r2, [r7, #28]
 8005cac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3306      	adds	r3, #6
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <PCD_EP_ISR_Handler+0x1ec>
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	6959      	ldr	r1, [r3, #20]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f004 fed8 	bl	800aab6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	441a      	add	r2, r3
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d14:	2100      	movs	r1, #0
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f006 fcc0 	bl	800c69c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	4413      	add	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d112      	bne.n	8005d6a <PCD_EP_ISR_Handler+0x23a>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e02f      	b.n	8005dca <PCD_EP_ISR_Handler+0x29a>
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d70:	d813      	bhi.n	8005d9a <PCD_EP_ISR_Handler+0x26a>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <PCD_EP_ISR_Handler+0x25c>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	3301      	adds	r3, #1
 8005d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e017      	b.n	8005dca <PCD_EP_ISR_Handler+0x29a>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <PCD_EP_ISR_Handler+0x284>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	3b01      	subs	r3, #1
 8005db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dda:	827b      	strh	r3, [r7, #18]
 8005ddc:	8a7b      	ldrh	r3, [r7, #18]
 8005dde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005de2:	827b      	strh	r3, [r7, #18]
 8005de4:	8a7b      	ldrh	r3, [r7, #18]
 8005de6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005dea:	827b      	strh	r3, [r7, #18]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	8a7b      	ldrh	r3, [r7, #18]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	e177      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e1a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f280 80ea 	bge.w	8005ff8 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e52:	b292      	uxth	r2, r2
 8005e54:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e56:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	7b1b      	ldrb	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d122      	bne.n	8005eba <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4413      	add	r3, r2
 8005e88:	3306      	adds	r3, #6
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8005e9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8087 	beq.w	8005fb4 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	6959      	ldr	r1, [r3, #20]
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	88da      	ldrh	r2, [r3, #6]
 8005eb2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005eb4:	f004 fdff 	bl	800aab6 <USB_ReadPMA>
 8005eb8:	e07c      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d108      	bne.n	8005ed4 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ec2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f923 	bl	8006114 <HAL_PCD_EP_DB_Receive>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005ed2:	e06f      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d021      	beq.n	8005f72 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	3302      	adds	r3, #2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f56:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02a      	beq.n	8005fb4 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	6959      	ldr	r1, [r3, #20]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	891a      	ldrh	r2, [r3, #8]
 8005f6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f6c:	f004 fda3 	bl	800aab6 <USB_ReadPMA>
 8005f70:	e020      	b.n	8005fb4 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	3306      	adds	r3, #6
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005f9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	6959      	ldr	r1, [r3, #20]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	895a      	ldrh	r2, [r3, #10]
 8005fae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fb0:	f004 fd81 	bl	800aab6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fba:	441a      	add	r2, r3
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fc6:	441a      	add	r2, r3
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <PCD_EP_ISR_Handler+0x4ae>
 8005fd4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d206      	bcs.n	8005fec <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f006 fb59 	bl	800c69c <HAL_PCD_DataOutStageCallback>
 8005fea:	e005      	b.n	8005ff8 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 f836 	bl	8009064 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ff8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d07a      	beq.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8006002:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800602c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006030:	843b      	strh	r3, [r7, #32]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8c3b      	ldrh	r3, [r7, #32]
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d108      	bne.n	8006068 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800605a:	2b02      	cmp	r3, #2
 800605c:	d146      	bne.n	80060ec <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800605e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d141      	bne.n	80060ec <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	3302      	adds	r3, #2
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006090:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	8bfb      	ldrh	r3, [r7, #30]
 8006098:	429a      	cmp	r2, r3
 800609a:	d906      	bls.n	80060aa <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	8bfb      	ldrh	r3, [r7, #30]
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	619a      	str	r2, [r3, #24]
 80060a8:	e002      	b.n	80060b0 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	2200      	movs	r2, #0
 80060ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f006 fb07 	bl	800c6d2 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 80060c4:	e018      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	8bfb      	ldrh	r3, [r7, #30]
 80060cc:	441a      	add	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	69da      	ldr	r2, [r3, #28]
 80060d6:	8bfb      	ldrh	r3, [r7, #30]
 80060d8:	441a      	add	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f002 ffbd 	bl	8009064 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80060ea:	e005      	b.n	80060f8 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80060ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060ee:	461a      	mov	r2, r3
 80060f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f91b 	bl	800632e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006100:	b29b      	uxth	r3, r3
 8006102:	b21b      	sxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	f6ff ad18 	blt.w	8005b3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3738      	adds	r7, #56	@ 0x38
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d07e      	beq.n	800622a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006134:	b29b      	uxth	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	3302      	adds	r3, #2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006154:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	8b7b      	ldrh	r3, [r7, #26]
 800615c:	429a      	cmp	r2, r3
 800615e:	d306      	bcc.n	800616e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	8b7b      	ldrh	r3, [r7, #26]
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	619a      	str	r2, [r3, #24]
 800616c:	e002      	b.n	8006174 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d123      	bne.n	80061c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	833b      	strh	r3, [r7, #24]
 8006198:	8b3b      	ldrh	r3, [r7, #24]
 800619a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800619e:	833b      	strh	r3, [r7, #24]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	8b3b      	ldrh	r3, [r7, #24]
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01f      	beq.n	800620e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	82fb      	strh	r3, [r7, #22]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	441a      	add	r2, r3
 80061f8:	8afb      	ldrh	r3, [r7, #22]
 80061fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006206:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800620a:	b29b      	uxth	r3, r3
 800620c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800620e:	8b7b      	ldrh	r3, [r7, #26]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8087 	beq.w	8006324 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	891a      	ldrh	r2, [r3, #8]
 8006222:	8b7b      	ldrh	r3, [r7, #26]
 8006224:	f004 fc47 	bl	800aab6 <USB_ReadPMA>
 8006228:	e07c      	b.n	8006324 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	3306      	adds	r3, #6
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006252:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	8b7b      	ldrh	r3, [r7, #26]
 800625a:	429a      	cmp	r2, r3
 800625c:	d306      	bcc.n	800626c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	8b7b      	ldrh	r3, [r7, #26]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	619a      	str	r2, [r3, #24]
 800626a:	e002      	b.n	8006272 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d123      	bne.n	80062c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	83fb      	strh	r3, [r7, #30]
 8006296:	8bfb      	ldrh	r3, [r7, #30]
 8006298:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800629c:	83fb      	strh	r3, [r7, #30]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	8bfb      	ldrh	r3, [r7, #30]
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11f      	bne.n	800630c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e6:	83bb      	strh	r3, [r7, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	8bbb      	ldrh	r3, [r7, #28]
 80062f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006304:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800630c:	8b7b      	ldrh	r3, [r7, #26]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6959      	ldr	r1, [r3, #20]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	895a      	ldrh	r2, [r3, #10]
 800631e:	8b7b      	ldrh	r3, [r7, #26]
 8006320:	f004 fbc9 	bl	800aab6 <USB_ReadPMA>
    }
  }

  return count;
 8006324:	8b7b      	ldrh	r3, [r7, #26]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b094      	sub	sp, #80	@ 0x50
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	4613      	mov	r3, r2
 800633a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8138 	beq.w	80065b8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	3302      	adds	r3, #2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006370:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800637c:	429a      	cmp	r2, r3
 800637e:	d907      	bls.n	8006390 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006388:	1ad2      	subs	r2, r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	619a      	str	r2, [r3, #24]
 800638e:	e002      	b.n	8006396 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d12c      	bne.n	80063f8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f006 f994 	bl	800c6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 823a 	beq.w	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	82fb      	strh	r3, [r7, #22]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	8afb      	ldrh	r3, [r7, #22]
 80063e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	8013      	strh	r3, [r2, #0]
 80063f6:	e218      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01f      	beq.n	8006442 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800643a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 81ee 	bne.w	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006456:	441a      	add	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006464:	441a      	add	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6a1a      	ldr	r2, [r3, #32]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d309      	bcc.n	800648a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	621a      	str	r2, [r3, #32]
 8006488:	e015      	b.n	80064b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006492:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006496:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064a0:	e009      	b.n	80064b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d155      	bne.n	800656a <HAL_PCD_EP_DB_Transmit+0x23c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d112      	bne.n	8006512 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e047      	b.n	80065a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8006512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006514:	2b3e      	cmp	r3, #62	@ 0x3e
 8006516:	d811      	bhi.n	800653c <HAL_PCD_EP_DB_Transmit+0x20e>
 8006518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800651e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_PCD_EP_DB_Transmit+0x200>
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	3301      	adds	r3, #1
 800652c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29a      	uxth	r2, r3
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e032      	b.n	80065a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800653c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <HAL_PCD_EP_DB_Transmit+0x224>
 800654c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654e:	3b01      	subs	r3, #1
 8006550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006562:	b29a      	uxth	r2, r3
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e01b      	b.n	80065a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d117      	bne.n	80065a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006580:	b29b      	uxth	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	4413      	add	r3, r2
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	011a      	lsls	r2, r3, #4
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	4413      	add	r3, r2
 8006594:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659c:	b29a      	uxth	r2, r3
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6959      	ldr	r1, [r3, #20]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	891a      	ldrh	r2, [r3, #8]
 80065ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f004 fa3c 	bl	800aa2e <USB_WritePMA>
 80065b6:	e138      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	3306      	adds	r3, #6
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d307      	bcc.n	8006600 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	619a      	str	r2, [r3, #24]
 80065fe:	e002      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2200      	movs	r2, #0
 8006604:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d12e      	bne.n	800666c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f006 f85c 	bl	800c6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8102 	bne.w	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006640:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006666:	b29b      	uxth	r3, r3
 8006668:	8013      	strh	r3, [r2, #0]
 800666a:	e0de      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11f      	bne.n	80066b6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006690:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80b4 	bne.w	800682a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066ca:	441a      	add	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066d8:	441a      	add	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d309      	bcc.n	80066fe <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	621a      	str	r2, [r3, #32]
 80066fc:	e015      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006706:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006714:	e009      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d155      	bne.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	4413      	add	r3, r2
 800674e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	4413      	add	r3, r2
 800675a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006762:	2b00      	cmp	r3, #0
 8006764:	d112      	bne.n	800678c <HAL_PCD_EP_DB_Transmit+0x45e>
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006770:	b29a      	uxth	r2, r3
 8006772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006784:	b29a      	uxth	r2, r3
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e044      	b.n	8006816 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800678c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800678e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006790:	d811      	bhi.n	80067b6 <HAL_PCD_EP_DB_Transmit+0x488>
 8006792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80067a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067a4:	3301      	adds	r3, #1
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e02f      	b.n	8006816 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <HAL_PCD_EP_DB_Transmit+0x49e>
 80067c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c8:	3b01      	subs	r3, #1
 80067ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e018      	b.n	8006816 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d114      	bne.n	8006816 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067fa:	4413      	add	r3, r2
 80067fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	011a      	lsls	r2, r3, #4
 8006804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800680c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800680e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006810:	b29a      	uxth	r2, r3
 8006812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006814:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6959      	ldr	r1, [r3, #20]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	895a      	ldrh	r2, [r3, #10]
 8006822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006824:	b29b      	uxth	r3, r3
 8006826:	f004 f902 	bl	800aa2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006844:	82bb      	strh	r3, [r7, #20]
 8006846:	8abb      	ldrh	r3, [r7, #20]
 8006848:	f083 0310 	eor.w	r3, r3, #16
 800684c:	82bb      	strh	r3, [r7, #20]
 800684e:	8abb      	ldrh	r3, [r7, #20]
 8006850:	f083 0320 	eor.w	r3, r3, #32
 8006854:	82bb      	strh	r3, [r7, #20]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	8abb      	ldrh	r3, [r7, #20]
 8006866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800686a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3750      	adds	r7, #80	@ 0x50
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	817b      	strh	r3, [r7, #10]
 8006892:	4613      	mov	r3, r2
 8006894:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006896:	897b      	ldrh	r3, [r7, #10]
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068a2:	897b      	ldrh	r3, [r7, #10]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e009      	b.n	80068ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068ba:	897a      	ldrh	r2, [r7, #10]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80068ce:	893b      	ldrh	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	80da      	strh	r2, [r3, #6]
 80068e2:	e00b      	b.n	80068fc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2201      	movs	r2, #1
 80068e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e272      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8087 	beq.w	8006a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006928:	4b92      	ldr	r3, [pc, #584]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 030c 	and.w	r3, r3, #12
 8006930:	2b04      	cmp	r3, #4
 8006932:	d00c      	beq.n	800694e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006934:	4b8f      	ldr	r3, [pc, #572]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 030c 	and.w	r3, r3, #12
 800693c:	2b08      	cmp	r3, #8
 800693e:	d112      	bne.n	8006966 <HAL_RCC_OscConfig+0x5e>
 8006940:	4b8c      	ldr	r3, [pc, #560]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694c:	d10b      	bne.n	8006966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800694e:	4b89      	ldr	r3, [pc, #548]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d06c      	beq.n	8006a34 <HAL_RCC_OscConfig+0x12c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d168      	bne.n	8006a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e24c      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x76>
 8006970:	4b80      	ldr	r3, [pc, #512]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a7f      	ldr	r2, [pc, #508]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e02e      	b.n	80069dc <HAL_RCC_OscConfig+0xd4>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10c      	bne.n	80069a0 <HAL_RCC_OscConfig+0x98>
 8006986:	4b7b      	ldr	r3, [pc, #492]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a7a      	ldr	r2, [pc, #488]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 800698c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	4b78      	ldr	r3, [pc, #480]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a77      	ldr	r2, [pc, #476]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006998:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e01d      	b.n	80069dc <HAL_RCC_OscConfig+0xd4>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCC_OscConfig+0xbc>
 80069aa:	4b72      	ldr	r3, [pc, #456]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a71      	ldr	r2, [pc, #452]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e00b      	b.n	80069dc <HAL_RCC_OscConfig+0xd4>
 80069c4:	4b6b      	ldr	r3, [pc, #428]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6a      	ldr	r2, [pc, #424]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	4b68      	ldr	r3, [pc, #416]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a67      	ldr	r2, [pc, #412]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 80069d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d013      	beq.n	8006a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e4:	f7fd faa6 	bl	8003f34 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069ec:	f7fd faa2 	bl	8003f34 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b64      	cmp	r3, #100	@ 0x64
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e200      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fe:	4b5d      	ldr	r3, [pc, #372]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0xe4>
 8006a0a:	e014      	b.n	8006a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fd fa92 	bl	8003f34 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a14:	f7fd fa8e 	bl	8003f34 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b64      	cmp	r3, #100	@ 0x64
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e1ec      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a26:	4b53      	ldr	r3, [pc, #332]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x10c>
 8006a32:	e000      	b.n	8006a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d063      	beq.n	8006b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a42:	4b4c      	ldr	r3, [pc, #304]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a4e:	4b49      	ldr	r3, [pc, #292]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d11c      	bne.n	8006a94 <HAL_RCC_OscConfig+0x18c>
 8006a5a:	4b46      	ldr	r3, [pc, #280]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d116      	bne.n	8006a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a66:	4b43      	ldr	r3, [pc, #268]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_RCC_OscConfig+0x176>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e1c0      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4939      	ldr	r1, [pc, #228]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a92:	e03a      	b.n	8006b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d020      	beq.n	8006ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a9c:	4b36      	ldr	r3, [pc, #216]	@ (8006b78 <HAL_RCC_OscConfig+0x270>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa2:	f7fd fa47 	bl	8003f34 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aaa:	f7fd fa43 	bl	8003f34 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e1a1      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006abc:	4b2d      	ldr	r3, [pc, #180]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	4927      	ldr	r1, [pc, #156]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]
 8006adc:	e015      	b.n	8006b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ade:	4b26      	ldr	r3, [pc, #152]	@ (8006b78 <HAL_RCC_OscConfig+0x270>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fd fa26 	bl	8003f34 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aec:	f7fd fa22 	bl	8003f34 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e180      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006afe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f0      	bne.n	8006aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d03a      	beq.n	8006b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d019      	beq.n	8006b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b1e:	4b17      	ldr	r3, [pc, #92]	@ (8006b7c <HAL_RCC_OscConfig+0x274>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b24:	f7fd fa06 	bl	8003f34 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2c:	f7fd fa02 	bl	8003f34 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e160      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <HAL_RCC_OscConfig+0x26c>)
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f000 fad8 	bl	8007100 <RCC_Delay>
 8006b50:	e01c      	b.n	8006b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b52:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <HAL_RCC_OscConfig+0x274>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b58:	f7fd f9ec 	bl	8003f34 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b5e:	e00f      	b.n	8006b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b60:	f7fd f9e8 	bl	8003f34 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d908      	bls.n	8006b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e146      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
 8006b72:	bf00      	nop
 8006b74:	40021000 	.word	0x40021000
 8006b78:	42420000 	.word	0x42420000
 8006b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b80:	4b92      	ldr	r3, [pc, #584]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e9      	bne.n	8006b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80a6 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006baa:	4b88      	ldr	r3, [pc, #544]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	4a87      	ldr	r2, [pc, #540]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bb4:	61d3      	str	r3, [r2, #28]
 8006bb6:	4b85      	ldr	r3, [pc, #532]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	4b82      	ldr	r3, [pc, #520]	@ (8006dd0 <HAL_RCC_OscConfig+0x4c8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d118      	bne.n	8006c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8006dd0 <HAL_RCC_OscConfig+0x4c8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd0 <HAL_RCC_OscConfig+0x4c8>)
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bde:	f7fd f9a9 	bl	8003f34 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fd f9a5 	bl	8003f34 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b64      	cmp	r3, #100	@ 0x64
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e103      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf8:	4b75      	ldr	r3, [pc, #468]	@ (8006dd0 <HAL_RCC_OscConfig+0x4c8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCC_OscConfig+0x312>
 8006c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	4a6e      	ldr	r2, [pc, #440]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	6213      	str	r3, [r2, #32]
 8006c18:	e02d      	b.n	8006c76 <HAL_RCC_OscConfig+0x36e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x334>
 8006c22:	4b6a      	ldr	r3, [pc, #424]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	4a69      	ldr	r2, [pc, #420]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	6213      	str	r3, [r2, #32]
 8006c2e:	4b67      	ldr	r3, [pc, #412]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4a66      	ldr	r2, [pc, #408]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	6213      	str	r3, [r2, #32]
 8006c3a:	e01c      	b.n	8006c76 <HAL_RCC_OscConfig+0x36e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d10c      	bne.n	8006c5e <HAL_RCC_OscConfig+0x356>
 8006c44:	4b61      	ldr	r3, [pc, #388]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	4a60      	ldr	r2, [pc, #384]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	6213      	str	r3, [r2, #32]
 8006c50:	4b5e      	ldr	r3, [pc, #376]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	4a5d      	ldr	r2, [pc, #372]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	6213      	str	r3, [r2, #32]
 8006c5c:	e00b      	b.n	8006c76 <HAL_RCC_OscConfig+0x36e>
 8006c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	4a5a      	ldr	r2, [pc, #360]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	6213      	str	r3, [r2, #32]
 8006c6a:	4b58      	ldr	r3, [pc, #352]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	4a57      	ldr	r2, [pc, #348]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c70:	f023 0304 	bic.w	r3, r3, #4
 8006c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d015      	beq.n	8006caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7e:	f7fd f959 	bl	8003f34 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fd f955 	bl	8003f34 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e0b1      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ee      	beq.n	8006c86 <HAL_RCC_OscConfig+0x37e>
 8006ca8:	e014      	b.n	8006cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006caa:	f7fd f943 	bl	8003f34 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fd f93f 	bl	8003f34 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e09b      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc8:	4b40      	ldr	r3, [pc, #256]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ee      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cda:	4b3c      	ldr	r3, [pc, #240]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4a3b      	ldr	r2, [pc, #236]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8087 	beq.w	8006dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cf0:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d061      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d146      	bne.n	8006d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b33      	ldr	r3, [pc, #204]	@ (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0a:	f7fd f913 	bl	8003f34 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d12:	f7fd f90f 	bl	8003f34 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e06d      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d24:	4b29      	ldr	r3, [pc, #164]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d38:	d108      	bne.n	8006d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d3a:	4b24      	ldr	r3, [pc, #144]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	4921      	ldr	r1, [pc, #132]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a19      	ldr	r1, [r3, #32]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	491b      	ldr	r1, [pc, #108]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d64:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6a:	f7fd f8e3 	bl	8003f34 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d72:	f7fd f8df 	bl	8003f34 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e03d      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d84:	4b11      	ldr	r3, [pc, #68]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x46a>
 8006d90:	e035      	b.n	8006dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d92:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <HAL_RCC_OscConfig+0x4cc>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fd f8cc 	bl	8003f34 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da0:	f7fd f8c8 	bl	8003f34 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e026      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db2:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <HAL_RCC_OscConfig+0x4c4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x498>
 8006dbe:	e01e      	b.n	8006dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e019      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40007000 	.word	0x40007000
 8006dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <HAL_RCC_OscConfig+0x500>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d106      	bne.n	8006dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d001      	beq.n	8006dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40021000 	.word	0x40021000

08006e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0d0      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e20:	4b6a      	ldr	r3, [pc, #424]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d910      	bls.n	8006e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b67      	ldr	r3, [pc, #412]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 0207 	bic.w	r2, r3, #7
 8006e36:	4965      	ldr	r1, [pc, #404]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b63      	ldr	r3, [pc, #396]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0b8      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d020      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e68:	4b59      	ldr	r3, [pc, #356]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a58      	ldr	r2, [pc, #352]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e80:	4b53      	ldr	r3, [pc, #332]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4a52      	ldr	r2, [pc, #328]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e8c:	4b50      	ldr	r3, [pc, #320]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	494d      	ldr	r1, [pc, #308]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d040      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb2:	4b47      	ldr	r3, [pc, #284]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d115      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e07f      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eca:	4b41      	ldr	r3, [pc, #260]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e073      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eda:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e06b      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f023 0203 	bic.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4936      	ldr	r1, [pc, #216]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006efc:	f7fd f81a 	bl	8003f34 <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f04:	f7fd f816 	bl	8003f34 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e053      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f003 020c 	and.w	r2, r3, #12
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d1eb      	bne.n	8006f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d210      	bcs.n	8006f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b24      	ldr	r3, [pc, #144]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 0207 	bic.w	r2, r3, #7
 8006f42:	4922      	ldr	r1, [pc, #136]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e032      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f68:	4b19      	ldr	r3, [pc, #100]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4916      	ldr	r1, [pc, #88]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f86:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	490e      	ldr	r1, [pc, #56]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f9a:	f000 f821 	bl	8006fe0 <HAL_RCC_GetSysClockFreq>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	490a      	ldr	r1, [pc, #40]	@ (8006fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fac:	5ccb      	ldrb	r3, [r1, r3]
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8006fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fb6:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <HAL_RCC_ClockConfig+0x1d0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fc ff78 	bl	8003eb0 <HAL_InitTick>

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40022000 	.word	0x40022000
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	0800de3c 	.word	0x0800de3c
 8006fd8:	20000028 	.word	0x20000028
 8006fdc:	2000002c 	.word	0x2000002c

08006fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe0:	b490      	push	{r4, r7}
 8006fe2:	b08a      	sub	sp, #40	@ 0x28
 8006fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006fe6:	4b29      	ldr	r3, [pc, #164]	@ (800708c <HAL_RCC_GetSysClockFreq+0xac>)
 8006fe8:	1d3c      	adds	r4, r7, #4
 8006fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ff0:	f240 2301 	movw	r3, #513	@ 0x201
 8006ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	2300      	movs	r3, #0
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800700a:	4b21      	ldr	r3, [pc, #132]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f003 030c 	and.w	r3, r3, #12
 8007016:	2b04      	cmp	r3, #4
 8007018:	d002      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x40>
 800701a:	2b08      	cmp	r3, #8
 800701c:	d003      	beq.n	8007026 <HAL_RCC_GetSysClockFreq+0x46>
 800701e:	e02b      	b.n	8007078 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007020:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007022:	623b      	str	r3, [r7, #32]
      break;
 8007024:	e02b      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	0c9b      	lsrs	r3, r3, #18
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	3328      	adds	r3, #40	@ 0x28
 8007030:	443b      	add	r3, r7
 8007032:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007036:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	0c5b      	lsrs	r3, r3, #17
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	3328      	adds	r3, #40	@ 0x28
 800704e:	443b      	add	r3, r7
 8007050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	4a0e      	ldr	r2, [pc, #56]	@ (8007094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800705a:	fb03 f202 	mul.w	r2, r3, r2
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
 8007066:	e004      	b.n	8007072 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4a0b      	ldr	r2, [pc, #44]	@ (8007098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	623b      	str	r3, [r7, #32]
      break;
 8007076:	e002      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007078:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800707a:	623b      	str	r3, [r7, #32]
      break;
 800707c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800707e:	6a3b      	ldr	r3, [r7, #32]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3728      	adds	r7, #40	@ 0x28
 8007084:	46bd      	mov	sp, r7
 8007086:	bc90      	pop	{r4, r7}
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	0800ddd4 	.word	0x0800ddd4
 8007090:	40021000 	.word	0x40021000
 8007094:	007a1200 	.word	0x007a1200
 8007098:	003d0900 	.word	0x003d0900

0800709c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <HAL_RCC_GetHCLKFreq+0x10>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	20000028 	.word	0x20000028

080070b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070b4:	f7ff fff2 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4903      	ldr	r1, [pc, #12]	@ (80070d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40021000 	.word	0x40021000
 80070d4:	0800de4c 	.word	0x0800de4c

080070d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070dc:	f7ff ffde 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	0adb      	lsrs	r3, r3, #11
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	4903      	ldr	r1, [pc, #12]	@ (80070fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000
 80070fc:	0800de4c 	.word	0x0800de4c

08007100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007108:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <RCC_Delay+0x34>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a0a      	ldr	r2, [pc, #40]	@ (8007138 <RCC_Delay+0x38>)
 800710e:	fba2 2303 	umull	r2, r3, r2, r3
 8007112:	0a5b      	lsrs	r3, r3, #9
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800711c:	bf00      	nop
  }
  while (Delay --);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1e5a      	subs	r2, r3, #1
 8007122:	60fa      	str	r2, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1f9      	bne.n	800711c <RCC_Delay+0x1c>
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	20000028 	.word	0x20000028
 8007138:	10624dd3 	.word	0x10624dd3

0800713c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d07d      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007158:	2300      	movs	r3, #0
 800715a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800715c:	4b4f      	ldr	r3, [pc, #316]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007168:	4b4c      	ldr	r3, [pc, #304]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	4a4b      	ldr	r2, [pc, #300]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800716e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007172:	61d3      	str	r3, [r2, #28]
 8007174:	4b49      	ldr	r3, [pc, #292]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007184:	4b46      	ldr	r3, [pc, #280]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d118      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007190:	4b43      	ldr	r3, [pc, #268]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a42      	ldr	r2, [pc, #264]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800719a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800719c:	f7fc feca 	bl	8003f34 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a2:	e008      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a4:	f7fc fec6 	bl	8003f34 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b64      	cmp	r3, #100	@ 0x64
 80071b0:	d901      	bls.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e06d      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b6:	4b3a      	ldr	r3, [pc, #232]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c2:	4b36      	ldr	r3, [pc, #216]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02e      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d027      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e0:	4b2e      	ldr	r3, [pc, #184]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071ea:	4b2e      	ldr	r3, [pc, #184]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071f0:	4b2c      	ldr	r3, [pc, #176]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071f6:	4a29      	ldr	r2, [pc, #164]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d014      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007206:	f7fc fe95 	bl	8003f34 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720c:	e00a      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fc fe91 	bl	8003f34 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e036      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007224:	4b1d      	ldr	r3, [pc, #116]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0ee      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007230:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4917      	ldr	r1, [pc, #92]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	4313      	orrs	r3, r2
 8007240:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d105      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007248:	4b14      	ldr	r3, [pc, #80]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	4a13      	ldr	r2, [pc, #76]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007260:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	490b      	ldr	r1, [pc, #44]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800726e:	4313      	orrs	r3, r2
 8007270:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800727e:	4b07      	ldr	r3, [pc, #28]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	4904      	ldr	r1, [pc, #16]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728c:	4313      	orrs	r3, r2
 800728e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	40007000 	.word	0x40007000
 80072a4:	42420440 	.word	0x42420440

080072a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e076      	b.n	80073a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ca:	d009      	beq.n	80072e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
 80072d2:	e005      	b.n	80072e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fc fc50 	bl	8003ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007364:	ea42 0103 	orr.w	r1, r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	0c1a      	lsrs	r2, r3, #16
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f002 0204 	and.w	r2, r2, #4
 8007386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	@ 0x30
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073be:	2301      	movs	r3, #1
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x26>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e18a      	b.n	80076ec <HAL_SPI_TransmitReceive+0x33c>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073de:	f7fc fda9 	bl	8003f34 <HAL_GetTick>
 80073e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d00f      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x70>
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007406:	d107      	bne.n	8007418 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <HAL_SPI_TransmitReceive+0x68>
 8007410:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007414:	2b04      	cmp	r3, #4
 8007416:	d003      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007418:	2302      	movs	r3, #2
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800741e:	e15b      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_SPI_TransmitReceive+0x82>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_SPI_TransmitReceive+0x82>
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007438:	e14e      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b04      	cmp	r3, #4
 8007444:	d003      	beq.n	800744e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2205      	movs	r2, #5
 800744a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	887a      	ldrh	r2, [r7, #2]
 800745e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	887a      	ldrh	r2, [r7, #2]
 8007464:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	887a      	ldrh	r2, [r7, #2]
 8007470:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	887a      	ldrh	r2, [r7, #2]
 8007476:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d007      	beq.n	80074a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074aa:	d178      	bne.n	800759e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <HAL_SPI_TransmitReceive+0x10a>
 80074b4:	8b7b      	ldrh	r3, [r7, #26]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d166      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074be:	881a      	ldrh	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ca:	1c9a      	adds	r2, r3, #2
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074de:	e053      	b.n	8007588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d11b      	bne.n	8007526 <HAL_SPI_TransmitReceive+0x176>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d016      	beq.n	8007526 <HAL_SPI_TransmitReceive+0x176>
 80074f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d113      	bne.n	8007526 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007502:	881a      	ldrh	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	1c9a      	adds	r2, r3, #2
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d119      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x1b8>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007538:	b29b      	uxth	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d014      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	b292      	uxth	r2, r2
 800754a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	1c9a      	adds	r2, r3, #2
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007564:	2301      	movs	r3, #1
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007568:	f7fc fce4 	bl	8003f34 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007574:	429a      	cmp	r2, r3
 8007576:	d807      	bhi.n	8007588 <HAL_SPI_TransmitReceive+0x1d8>
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d003      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007586:	e0a7      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1a6      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0x130>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1a1      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0x130>
 800759c:	e07c      	b.n	8007698 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x1fc>
 80075a6:	8b7b      	ldrh	r3, [r7, #26]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d16b      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d2:	e057      	b.n	8007684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d11c      	bne.n	800761c <HAL_SPI_TransmitReceive+0x26c>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <HAL_SPI_TransmitReceive+0x26c>
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d114      	bne.n	800761c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d119      	bne.n	800765e <HAL_SPI_TransmitReceive+0x2ae>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d014      	beq.n	800765e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800765a:	2301      	movs	r3, #1
 800765c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800765e:	f7fc fc69 	bl	8003f34 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800766a:	429a      	cmp	r2, r3
 800766c:	d803      	bhi.n	8007676 <HAL_SPI_TransmitReceive+0x2c6>
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d102      	bne.n	800767c <HAL_SPI_TransmitReceive+0x2cc>
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007682:	e029      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1a2      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x224>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d19d      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f8b1 	bl	8007804 <SPI_EndRxTxTransaction>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80076b4:	e010      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	e000      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80076e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3730      	adds	r7, #48	@ 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007704:	f7fc fc16 	bl	8003f34 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4413      	add	r3, r2
 8007712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007714:	f7fc fc0e 	bl	8003f34 <HAL_GetTick>
 8007718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800771a:	4b39      	ldr	r3, [pc, #228]	@ (8007800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	015b      	lsls	r3, r3, #5
 8007720:	0d1b      	lsrs	r3, r3, #20
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	fb02 f303 	mul.w	r3, r2, r3
 8007728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800772a:	e054      	b.n	80077d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d050      	beq.n	80077d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007734:	f7fc fbfe 	bl	8003f34 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	429a      	cmp	r2, r3
 8007742:	d902      	bls.n	800774a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d13d      	bne.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007762:	d111      	bne.n	8007788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800776c:	d004      	beq.n	8007778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007776:	d107      	bne.n	8007788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007790:	d10f      	bne.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e017      	b.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4013      	ands	r3, r2
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	2300      	movne	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d19b      	bne.n	800772c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000028 	.word	0x20000028

08007804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	2180      	movs	r1, #128	@ 0x80
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff ff6a 	bl	80076f4 <SPI_WaitFlagStateUntilTimeout>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782a:	f043 0220 	orr.w	r2, r3, #32
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e000      	b.n	8007838 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e041      	b.n	80078d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fc f9e4 	bl	8003c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f000 fa70 	bl	8007d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d001      	beq.n	80078f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e03a      	b.n	800796e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a18      	ldr	r2, [pc, #96]	@ (8007978 <HAL_TIM_Base_Start_IT+0x98>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x58>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	d009      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x58>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a14      	ldr	r2, [pc, #80]	@ (800797c <HAL_TIM_Base_Start_IT+0x9c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x58>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a13      	ldr	r2, [pc, #76]	@ (8007980 <HAL_TIM_Base_Start_IT+0xa0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d111      	bne.n	800795c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b06      	cmp	r3, #6
 8007948:	d010      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795a:	e007      	b.n	800796c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800

08007984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	d122      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d11b      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f06f 0202 	mvn.w	r2, #2
 80079b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9b1 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 80079cc:	e005      	b.n	80079da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f9a4 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9b3 	bl	8007d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d122      	bne.n	8007a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d11b      	bne.n	8007a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f06f 0204 	mvn.w	r2, #4
 8007a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f987 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007a20:	e005      	b.n	8007a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f97a 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f989 	bl	8007d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d122      	bne.n	8007a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d11b      	bne.n	8007a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f06f 0208 	mvn.w	r2, #8
 8007a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f95d 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007a74:	e005      	b.n	8007a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f950 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f95f 	bl	8007d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d122      	bne.n	8007adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d11b      	bne.n	8007adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f06f 0210 	mvn.w	r2, #16
 8007aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f933 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007ac8:	e005      	b.n	8007ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f926 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f935 	bl	8007d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10e      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d107      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0201 	mvn.w	r2, #1
 8007b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7f9 f934 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b80      	cmp	r3, #128	@ 0x80
 8007b14:	d10e      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	2b80      	cmp	r3, #128	@ 0x80
 8007b22:	d107      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa77 	bl	8008022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d10e      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b40      	cmp	r3, #64	@ 0x40
 8007b4e:	d107      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8f9 	bl	8007d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d10e      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d107      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f06f 0220 	mvn.w	r2, #32
 8007b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa42 	bl	8008010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_TIM_ConfigClockSource+0x18>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e0b3      	b.n	8007d14 <HAL_TIM_ConfigClockSource+0x180>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be4:	d03e      	beq.n	8007c64 <HAL_TIM_ConfigClockSource+0xd0>
 8007be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bea:	f200 8087 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf2:	f000 8085 	beq.w	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfa:	d87f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007bfc:	2b70      	cmp	r3, #112	@ 0x70
 8007bfe:	d01a      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0xa2>
 8007c00:	2b70      	cmp	r3, #112	@ 0x70
 8007c02:	d87b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c04:	2b60      	cmp	r3, #96	@ 0x60
 8007c06:	d050      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0x116>
 8007c08:	2b60      	cmp	r3, #96	@ 0x60
 8007c0a:	d877      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c0c:	2b50      	cmp	r3, #80	@ 0x50
 8007c0e:	d03c      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0xf6>
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d873      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d058      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x136>
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d86f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c1c:	2b30      	cmp	r3, #48	@ 0x30
 8007c1e:	d064      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x156>
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d86b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d060      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x156>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d867      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d05c      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x156>
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d05a      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c34:	e062      	b.n	8007cfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6899      	ldr	r1, [r3, #8]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f000 f966 	bl	8007f16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	609a      	str	r2, [r3, #8]
      break;
 8007c62:	e04e      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6899      	ldr	r1, [r3, #8]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f000 f94f 	bl	8007f16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c86:	609a      	str	r2, [r3, #8]
      break;
 8007c88:	e03b      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	461a      	mov	r2, r3
 8007c98:	f000 f8c6 	bl	8007e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2150      	movs	r1, #80	@ 0x50
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f91d 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007ca8:	e02b      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f000 f8e4 	bl	8007e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2160      	movs	r1, #96	@ 0x60
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f90d 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007cc8:	e01b      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 f8a6 	bl	8007e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2140      	movs	r1, #64	@ 0x40
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f8fd 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e00b      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f000 f8f4 	bl	8007ee2 <TIM_ITRx_SetConfig>
        break;
 8007cfa:	e002      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr

08007d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a29      	ldr	r2, [pc, #164]	@ (8007e1c <TIM_Base_SetConfig+0xb8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00b      	beq.n	8007d94 <TIM_Base_SetConfig+0x30>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d82:	d007      	beq.n	8007d94 <TIM_Base_SetConfig+0x30>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <TIM_Base_SetConfig+0xbc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_Base_SetConfig+0x30>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a25      	ldr	r2, [pc, #148]	@ (8007e24 <TIM_Base_SetConfig+0xc0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d108      	bne.n	8007da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e1c <TIM_Base_SetConfig+0xb8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <TIM_Base_SetConfig+0x62>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db4:	d007      	beq.n	8007dc6 <TIM_Base_SetConfig+0x62>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <TIM_Base_SetConfig+0xbc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_Base_SetConfig+0x62>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a18      	ldr	r2, [pc, #96]	@ (8007e24 <TIM_Base_SetConfig+0xc0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d108      	bne.n	8007dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a07      	ldr	r2, [pc, #28]	@ (8007e1c <TIM_Base_SetConfig+0xb8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d103      	bne.n	8007e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	615a      	str	r2, [r3, #20]
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	40012c00 	.word	0x40012c00
 8007e20:	40000400 	.word	0x40000400
 8007e24:	40000800 	.word	0x40000800

08007e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	f023 0201 	bic.w	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f023 030a 	bic.w	r3, r3, #10
 8007e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr

08007e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	f023 0210 	bic.w	r2, r3, #16
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	031b      	lsls	r3, r3, #12
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	621a      	str	r2, [r3, #32]
}
 8007ed8:	bf00      	nop
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f043 0307 	orr.w	r3, r3, #7
 8007f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	609a      	str	r2, [r3, #8]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr

08007f16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	021a      	lsls	r2, r3, #8
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	609a      	str	r2, [r3, #8]
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e046      	b.n	8007ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a16      	ldr	r2, [pc, #88]	@ (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb8:	d009      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a12      	ldr	r2, [pc, #72]	@ (8008008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a10      	ldr	r2, [pc, #64]	@ (800800c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40000400 	.word	0x40000400
 800800c:	40000800 	.word	0x40000800

08008010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e03f      	b.n	80080c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fb fe0e 	bl	8003c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2224      	movs	r2, #36	@ 0x24
 8008064:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9a3 	bl	80083c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800808c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695a      	ldr	r2, [r3, #20]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800809c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b08a      	sub	sp, #40	@ 0x28
 80080d2:	af02      	add	r7, sp, #8
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d17c      	bne.n	80081e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <HAL_UART_Transmit+0x2c>
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e075      	b.n	80081ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_UART_Transmit+0x3e>
 8008108:	2302      	movs	r3, #2
 800810a:	e06e      	b.n	80081ea <HAL_UART_Transmit+0x11c>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2221      	movs	r2, #33	@ 0x21
 800811e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008122:	f7fb ff07 	bl	8003f34 <HAL_GetTick>
 8008126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800813c:	d108      	bne.n	8008150 <HAL_UART_Transmit+0x82>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e003      	b.n	8008158 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008160:	e02a      	b.n	80081b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2200      	movs	r2, #0
 800816a:	2180      	movs	r1, #128	@ 0x80
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f8df 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e036      	b.n	80081ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	3302      	adds	r3, #2
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e007      	b.n	80081aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1cf      	bne.n	8008162 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2200      	movs	r2, #0
 80081ca:	2140      	movs	r1, #64	@ 0x40
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f8af 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e006      	b.n	80081ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e000      	b.n	80081ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b08a      	sub	sp, #40	@ 0x28
 80081f6:	af02      	add	r7, sp, #8
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	603b      	str	r3, [r7, #0]
 80081fe:	4613      	mov	r3, r2
 8008200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b20      	cmp	r3, #32
 8008210:	f040 8089 	bne.w	8008326 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_UART_Receive+0x2e>
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e081      	b.n	8008328 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_UART_Receive+0x40>
 800822e:	2302      	movs	r3, #2
 8008230:	e07a      	b.n	8008328 <HAL_UART_Receive+0x136>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2222      	movs	r2, #34	@ 0x22
 8008244:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008248:	f7fb fe74 	bl	8003f34 <HAL_GetTick>
 800824c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008262:	d108      	bne.n	8008276 <HAL_UART_Receive+0x84>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	e003      	b.n	800827e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008286:	e043      	b.n	8008310 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	2120      	movs	r1, #32
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f84c 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e042      	b.n	8008328 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10c      	bne.n	80082c2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	3302      	adds	r3, #2
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	e01f      	b.n	8008302 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ca:	d007      	beq.n	80082dc <HAL_UART_Receive+0xea>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <HAL_UART_Receive+0xf8>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d106      	bne.n	80082ea <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e008      	b.n	80082fc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1b6      	bne.n	8008288 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	e000      	b.n	8008328 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008326:	2302      	movs	r3, #2
  }
}
 8008328:	4618      	mov	r0, r3
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008340:	e02c      	b.n	800839c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d028      	beq.n	800839c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <UART_WaitOnFlagUntilTimeout+0x30>
 8008350:	f7fb fdf0 	bl	8003f34 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	d21d      	bcs.n	800839c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800836e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0201 	bic.w	r2, r2, #1
 800837e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e00f      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4013      	ands	r3, r2
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	bf0c      	ite	eq
 80083ac:	2301      	moveq	r3, #1
 80083ae:	2300      	movne	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	461a      	mov	r2, r3
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d0c3      	beq.n	8008342 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80083fe:	f023 030c 	bic.w	r3, r3, #12
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6812      	ldr	r2, [r2, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	430b      	orrs	r3, r1
 800840a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2c      	ldr	r2, [pc, #176]	@ (80084d8 <UART_SetConfig+0x114>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d103      	bne.n	8008434 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800842c:	f7fe fe54 	bl	80070d8 <HAL_RCC_GetPCLK2Freq>
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	e002      	b.n	800843a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008434:	f7fe fe3c 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8008438:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009a      	lsls	r2, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008450:	4a22      	ldr	r2, [pc, #136]	@ (80084dc <UART_SetConfig+0x118>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	0119      	lsls	r1, r3, #4
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009a      	lsls	r2, r3, #2
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008470:	4b1a      	ldr	r3, [pc, #104]	@ (80084dc <UART_SetConfig+0x118>)
 8008472:	fba3 0302 	umull	r0, r3, r3, r2
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	2064      	movs	r0, #100	@ 0x64
 800847a:	fb00 f303 	mul.w	r3, r0, r3
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	3332      	adds	r3, #50	@ 0x32
 8008484:	4a15      	ldr	r2, [pc, #84]	@ (80084dc <UART_SetConfig+0x118>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	095b      	lsrs	r3, r3, #5
 800848c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008490:	4419      	add	r1, r3
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009a      	lsls	r2, r3, #2
 800849c:	441a      	add	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a8:	4b0c      	ldr	r3, [pc, #48]	@ (80084dc <UART_SetConfig+0x118>)
 80084aa:	fba3 0302 	umull	r0, r3, r3, r2
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	2064      	movs	r0, #100	@ 0x64
 80084b2:	fb00 f303 	mul.w	r3, r0, r3
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	3332      	adds	r3, #50	@ 0x32
 80084bc:	4a07      	ldr	r2, [pc, #28]	@ (80084dc <UART_SetConfig+0x118>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	440a      	add	r2, r1
 80084ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40013800 	.word	0x40013800
 80084dc:	51eb851f 	.word	0x51eb851f

080084e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80084e0:	b084      	sub	sp, #16
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	f107 0014 	add.w	r0, r7, #20
 80084ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	b004      	add	sp, #16
 80084fe:	4770      	bx	lr

08008500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008510:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008514:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	b29a      	uxth	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008534:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008538:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	b29b      	uxth	r3, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	4013      	ands	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008578:	b084      	sub	sp, #16
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	f107 0014 	add.w	r0, r7, #20
 8008586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	b004      	add	sp, #16
 80085b6:	4770      	bx	lr

080085b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b09b      	sub	sp, #108	@ 0x6c
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80085da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	78db      	ldrb	r3, [r3, #3]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d81f      	bhi.n	800862a <USB_ActivateEndpoint+0x72>
 80085ea:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <USB_ActivateEndpoint+0x38>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008601 	.word	0x08008601
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008633 	.word	0x08008633
 80085fc:	0800860f 	.word	0x0800860f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008600:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008608:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 800860c:	e012      	b.n	8008634 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800860e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008612:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008616:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 800861a:	e00b      	b.n	8008634 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800861c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008620:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008624:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008628:	e004      	b.n	8008634 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008630:	e000      	b.n	8008634 <USB_ActivateEndpoint+0x7c>
      break;
 8008632:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866c:	b29b      	uxth	r3, r3
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	4313      	orrs	r3, r2
 8008674:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	441a      	add	r2, r3
 8008682:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800868a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008696:	b29b      	uxth	r3, r3
 8008698:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	7b1b      	ldrb	r3, [r3, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f040 8149 	bne.w	8008936 <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8084 	beq.w	80087b6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4413      	add	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	81fb      	strh	r3, [r7, #14]
 80086f0:	89fb      	ldrh	r3, [r7, #14]
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01b      	beq.n	8008732 <USB_ActivateEndpoint+0x17a>
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800870c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008710:	81bb      	strh	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	89bb      	ldrh	r3, [r7, #12]
 800871e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800872a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d020      	beq.n	800877c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800874c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008750:	813b      	strh	r3, [r7, #8]
 8008752:	893b      	ldrh	r3, [r7, #8]
 8008754:	f083 0320 	eor.w	r3, r3, #32
 8008758:	813b      	strh	r3, [r7, #8]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800876a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008776:	b29b      	uxth	r3, r3
 8008778:	8013      	strh	r3, [r2, #0]
 800877a:	e27f      	b.n	8008c7c <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008792:	817b      	strh	r3, [r7, #10]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	897b      	ldrh	r3, [r7, #10]
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]
 80087b4:	e262      	b.n	8008c7c <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c6:	4413      	add	r3, r2
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	011a      	lsls	r2, r3, #4
 80087d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80087d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	4413      	add	r3, r2
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	011a      	lsls	r2, r3, #4
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	4413      	add	r3, r2
 8008808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800880c:	623b      	str	r3, [r7, #32]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d112      	bne.n	800883c <USB_ActivateEndpoint+0x284>
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008820:	b29a      	uxth	r2, r3
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008834:	b29a      	uxth	r2, r3
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	e02f      	b.n	800889c <USB_ActivateEndpoint+0x2e4>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b3e      	cmp	r3, #62	@ 0x3e
 8008842:	d813      	bhi.n	800886c <USB_ActivateEndpoint+0x2b4>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	663b      	str	r3, [r7, #96]	@ 0x60
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <USB_ActivateEndpoint+0x2a6>
 8008858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800885a:	3301      	adds	r3, #1
 800885c:	663b      	str	r3, [r7, #96]	@ 0x60
 800885e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008860:	b29b      	uxth	r3, r3
 8008862:	029b      	lsls	r3, r3, #10
 8008864:	b29a      	uxth	r2, r3
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	e017      	b.n	800889c <USB_ActivateEndpoint+0x2e4>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	663b      	str	r3, [r7, #96]	@ 0x60
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <USB_ActivateEndpoint+0x2ce>
 8008880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008882:	3b01      	subs	r3, #1
 8008884:	663b      	str	r3, [r7, #96]	@ 0x60
 8008886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008896:	b29a      	uxth	r2, r3
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	83fb      	strh	r3, [r7, #30]
 80088aa:	8bfb      	ldrh	r3, [r7, #30]
 80088ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01b      	beq.n	80088ec <USB_ActivateEndpoint+0x334>
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ca:	83bb      	strh	r3, [r7, #28]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	441a      	add	r2, r3
 80088d6:	8bbb      	ldrh	r3, [r7, #28]
 80088d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	837b      	strh	r3, [r7, #26]
 8008904:	8b7b      	ldrh	r3, [r7, #26]
 8008906:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800890a:	837b      	strh	r3, [r7, #26]
 800890c:	8b7b      	ldrh	r3, [r7, #26]
 800890e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008912:	837b      	strh	r3, [r7, #26]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	441a      	add	r2, r3
 800891e:	8b7b      	ldrh	r3, [r7, #26]
 8008920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800892c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008930:	b29b      	uxth	r3, r3
 8008932:	8013      	strh	r3, [r2, #0]
 8008934:	e1a2      	b.n	8008c7c <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800894c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008966:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800896a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800897c:	b29b      	uxth	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008982:	4413      	add	r3, r2
 8008984:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	011a      	lsls	r2, r3, #4
 800898c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800898e:	4413      	add	r3, r2
 8008990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008994:	657b      	str	r3, [r7, #84]	@ 0x54
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	891b      	ldrh	r3, [r3, #8]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089b6:	4413      	add	r3, r2
 80089b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	011a      	lsls	r2, r3, #4
 80089c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80089c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f040 8091 	bne.w	8008b06 <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80089f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80089f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <USB_ActivateEndpoint+0x47c>
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008a42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01b      	beq.n	8008a84 <USB_ActivateEndpoint+0x4cc>
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a62:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	441a      	add	r2, r3
 8008a6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008a9c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008aa2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008aa4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008aa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008aaa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	441a      	add	r2, r3
 8008ab6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae2:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	8013      	strh	r3, [r2, #0]
 8008b04:	e0ba      	b.n	8008c7c <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008b16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01d      	beq.n	8008b5e <USB_ActivateEndpoint+0x5a6>
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b38:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008b6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01d      	beq.n	8008bb6 <USB_ActivateEndpoint+0x5fe>
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b90:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d024      	beq.n	8008c08 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008bd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008bdc:	f083 0320 	eor.w	r3, r3, #32
 8008be0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	441a      	add	r2, r3
 8008bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	8013      	strh	r3, [r2, #0]
 8008c06:	e01d      	b.n	8008c44 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	441a      	add	r2, r3
 8008c66:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008c7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	376c      	adds	r7, #108	@ 0x6c
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop

08008c8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b08d      	sub	sp, #52	@ 0x34
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	7b1b      	ldrb	r3, [r3, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f040 808e 	bne.w	8008dbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d044      	beq.n	8008d32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	81bb      	strh	r3, [r7, #12]
 8008cb6:	89bb      	ldrh	r3, [r7, #12]
 8008cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01b      	beq.n	8008cf8 <USB_DeactivateEndpoint+0x6c>
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd6:	817b      	strh	r3, [r7, #10]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	441a      	add	r2, r3
 8008ce2:	897b      	ldrh	r3, [r7, #10]
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0e:	813b      	strh	r3, [r7, #8]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	893b      	ldrh	r3, [r7, #8]
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]
 8008d30:	e192      	b.n	8009058 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	827b      	strh	r3, [r7, #18]
 8008d40:	8a7b      	ldrh	r3, [r7, #18]
 8008d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01b      	beq.n	8008d82 <USB_DeactivateEndpoint+0xf6>
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d60:	823b      	strh	r3, [r7, #16]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	441a      	add	r2, r3
 8008d6c:	8a3b      	ldrh	r3, [r7, #16]
 8008d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d98:	81fb      	strh	r3, [r7, #14]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	89fb      	ldrh	r3, [r7, #14]
 8008da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	8013      	strh	r3, [r2, #0]
 8008dba:	e14d      	b.n	8009058 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 80a5 	bne.w	8008f10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	843b      	strh	r3, [r7, #32]
 8008dd4:	8c3b      	ldrh	r3, [r7, #32]
 8008dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d01b      	beq.n	8008e16 <USB_DeactivateEndpoint+0x18a>
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008df4:	83fb      	strh	r3, [r7, #30]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	441a      	add	r2, r3
 8008e00:	8bfb      	ldrh	r3, [r7, #30]
 8008e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	83bb      	strh	r3, [r7, #28]
 8008e24:	8bbb      	ldrh	r3, [r7, #28]
 8008e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01b      	beq.n	8008e66 <USB_DeactivateEndpoint+0x1da>
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e44:	837b      	strh	r3, [r7, #26]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	441a      	add	r2, r3
 8008e50:	8b7b      	ldrh	r3, [r7, #26]
 8008e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7c:	833b      	strh	r3, [r7, #24]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	8b3b      	ldrh	r3, [r7, #24]
 8008e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb4:	82fb      	strh	r3, [r7, #22]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	441a      	add	r2, r3
 8008ec0:	8afb      	ldrh	r3, [r7, #22]
 8008ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eec:	82bb      	strh	r3, [r7, #20]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	441a      	add	r2, r3
 8008ef8:	8abb      	ldrh	r3, [r7, #20]
 8008efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	8013      	strh	r3, [r2, #0]
 8008f0e:	e0a3      	b.n	8009058 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008f1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <USB_DeactivateEndpoint+0x2d4>
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008f6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01b      	beq.n	8008fb0 <USB_DeactivateEndpoint+0x324>
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	441a      	add	r2, r3
 8008f9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	441a      	add	r2, r3
 8008fd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ffe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	441a      	add	r2, r3
 800900a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800900c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901c:	b29b      	uxth	r3, r3
 800901e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	441a      	add	r2, r3
 8009042:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800904c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009054:	b29b      	uxth	r3, r3
 8009056:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3734      	adds	r7, #52	@ 0x34
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr

08009064 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b0c4      	sub	sp, #272	@ 0x110
 8009068:	af00      	add	r7, sp, #0
 800906a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800906e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009072:	6018      	str	r0, [r3, #0]
 8009074:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009078:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800907c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800907e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009082:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b01      	cmp	r3, #1
 800908c:	f040 86ec 	bne.w	8009e68 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009090:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009094:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d908      	bls.n	80090be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80090ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090bc:	e007      	b.n	80090ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80090be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80090ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	7b1b      	ldrb	r3, [r3, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d142      	bne.n	8009164 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80090de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6959      	ldr	r1, [r3, #20]
 80090ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	88da      	ldrh	r2, [r3, #6]
 80090f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009100:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009104:	6800      	ldr	r0, [r0, #0]
 8009106:	f001 fc92 	bl	800aa2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800910a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800910e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800911a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	4413      	add	r3, r2
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009132:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	011a      	lsls	r2, r3, #4
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	4413      	add	r3, r2
 8009140:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8009144:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009148:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009152:	b29a      	uxth	r2, r3
 8009154:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009158:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	f000 be34 	b.w	8009dcc <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009168:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	78db      	ldrb	r3, [r3, #3]
 8009170:	2b02      	cmp	r3, #2
 8009172:	f040 843b 	bne.w	80099ec <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009176:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800917a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a1a      	ldr	r2, [r3, #32]
 8009182:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009186:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	f240 83b8 	bls.w	8009904 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009198:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80091be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	441a      	add	r2, r3
 80091d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80091e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80091f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009200:	1ad2      	subs	r2, r2, r3
 8009202:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009206:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800920e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009212:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800921c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 81b4 	beq.w	800959e <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800923a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
 8009242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009246:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d16d      	bne.n	800932e <USB_EPStartXfer+0x2ca>
 8009252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009256:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800925e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009262:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800926c:	b29b      	uxth	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	4413      	add	r3, r2
 8009274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800927a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	011a      	lsls	r2, r3, #4
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	4413      	add	r3, r2
 8009288:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800928c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800928e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d112      	bne.n	80092bc <USB_EPStartXfer+0x258>
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b8:	801a      	strh	r2, [r3, #0]
 80092ba:	e05d      	b.n	8009378 <USB_EPStartXfer+0x314>
 80092bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80092c2:	d817      	bhi.n	80092f4 <USB_EPStartXfer+0x290>
 80092c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <USB_EPStartXfer+0x280>
 80092da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092de:	3301      	adds	r3, #1
 80092e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	029b      	lsls	r3, r3, #10
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e041      	b.n	8009378 <USB_EPStartXfer+0x314>
 80092f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f8:	095b      	lsrs	r3, r3, #5
 80092fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <USB_EPStartXfer+0x2b0>
 800930a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930e:	3b01      	subs	r3, #1
 8009310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009318:	b29b      	uxth	r3, r3
 800931a:	029b      	lsls	r3, r3, #10
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009326:	b29a      	uxth	r2, r3
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e024      	b.n	8009378 <USB_EPStartXfer+0x314>
 800932e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009332:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d11c      	bne.n	8009378 <USB_EPStartXfer+0x314>
 800933e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800934c:	b29b      	uxth	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	4413      	add	r3, r2
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
 8009356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800935a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	011a      	lsls	r2, r3, #4
 8009364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009366:	4413      	add	r3, r2
 8009368:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800936c:	633b      	str	r3, [r7, #48]	@ 0x30
 800936e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009372:	b29a      	uxth	r2, r3
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009378:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800937c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	895b      	ldrh	r3, [r3, #10]
 8009384:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800938c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6959      	ldr	r1, [r3, #20]
 8009394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009398:	b29b      	uxth	r3, r3
 800939a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800939e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80093a2:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	f001 fb41 	bl	800aa2e <USB_WritePMA>
            ep->xfer_buff += len;
 80093ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695a      	ldr	r2, [r3, #20]
 80093b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093bc:	441a      	add	r2, r3
 80093be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6a1a      	ldr	r2, [r3, #32]
 80093d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d90f      	bls.n	8009406 <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 80093e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093f6:	1ad2      	subs	r2, r2, r3
 80093f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	621a      	str	r2, [r3, #32]
 8009404:	e00e      	b.n	8009424 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009406:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800940a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800941a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2200      	movs	r2, #0
 8009422:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009428:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d16d      	bne.n	8009510 <USB_EPStartXfer+0x4ac>
 8009434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800944e:	b29b      	uxth	r3, r3
 8009450:	461a      	mov	r2, r3
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	61fb      	str	r3, [r7, #28]
 8009458:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800945c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	011a      	lsls	r2, r3, #4
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800946e:	61bb      	str	r3, [r7, #24]
 8009470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d112      	bne.n	800949e <USB_EPStartXfer+0x43a>
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009482:	b29a      	uxth	r2, r3
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009496:	b29a      	uxth	r2, r3
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	e063      	b.n	8009566 <USB_EPStartXfer+0x502>
 800949e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80094a4:	d817      	bhi.n	80094d6 <USB_EPStartXfer+0x472>
 80094a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094aa:	085b      	lsrs	r3, r3, #1
 80094ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <USB_EPStartXfer+0x462>
 80094bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094c0:	3301      	adds	r3, #1
 80094c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	029b      	lsls	r3, r3, #10
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	e047      	b.n	8009566 <USB_EPStartXfer+0x502>
 80094d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094da:	095b      	lsrs	r3, r3, #5
 80094dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e4:	f003 031f 	and.w	r3, r3, #31
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <USB_EPStartXfer+0x492>
 80094ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094f0:	3b01      	subs	r3, #1
 80094f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	029b      	lsls	r3, r3, #10
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009508:	b29a      	uxth	r2, r3
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e02a      	b.n	8009566 <USB_EPStartXfer+0x502>
 8009510:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009514:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d122      	bne.n	8009566 <USB_EPStartXfer+0x502>
 8009520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009524:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
 800952c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009530:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800953a:	b29b      	uxth	r3, r3
 800953c:	461a      	mov	r2, r3
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	4413      	add	r3, r2
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
 8009544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009548:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	011a      	lsls	r2, r3, #4
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	4413      	add	r3, r2
 8009556:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800955a:	623b      	str	r3, [r7, #32]
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	b29a      	uxth	r2, r3
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800956a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	891b      	ldrh	r3, [r3, #8]
 8009572:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800957a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6959      	ldr	r1, [r3, #20]
 8009582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009586:	b29b      	uxth	r3, r3
 8009588:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800958c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009590:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009594:	6800      	ldr	r0, [r0, #0]
 8009596:	f001 fa4a 	bl	800aa2e <USB_WritePMA>
 800959a:	f000 bc17 	b.w	8009dcc <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800959e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d16d      	bne.n	800968a <USB_EPStartXfer+0x626>
 80095ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ce:	4413      	add	r3, r2
 80095d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	011a      	lsls	r2, r3, #4
 80095e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d112      	bne.n	8009618 <USB_EPStartXfer+0x5b4>
 80095f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009610:	b29a      	uxth	r2, r3
 8009612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e063      	b.n	80096e0 <USB_EPStartXfer+0x67c>
 8009618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961c:	2b3e      	cmp	r3, #62	@ 0x3e
 800961e:	d817      	bhi.n	8009650 <USB_EPStartXfer+0x5ec>
 8009620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800962a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USB_EPStartXfer+0x5dc>
 8009636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800963a:	3301      	adds	r3, #1
 800963c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009644:	b29b      	uxth	r3, r3
 8009646:	029b      	lsls	r3, r3, #10
 8009648:	b29a      	uxth	r2, r3
 800964a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	e047      	b.n	80096e0 <USB_EPStartXfer+0x67c>
 8009650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009654:	095b      	lsrs	r3, r3, #5
 8009656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800965a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965e:	f003 031f 	and.w	r3, r3, #31
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <USB_EPStartXfer+0x60c>
 8009666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800966a:	3b01      	subs	r3, #1
 800966c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009674:	b29b      	uxth	r3, r3
 8009676:	029b      	lsls	r3, r3, #10
 8009678:	b29b      	uxth	r3, r3
 800967a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800967e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009682:	b29a      	uxth	r2, r3
 8009684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009686:	801a      	strh	r2, [r3, #0]
 8009688:	e02a      	b.n	80096e0 <USB_EPStartXfer+0x67c>
 800968a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800968e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d122      	bne.n	80096e0 <USB_EPStartXfer+0x67c>
 800969a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800969e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80096a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	461a      	mov	r2, r3
 80096b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ba:	4413      	add	r3, r2
 80096bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80096be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	011a      	lsls	r2, r3, #4
 80096cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ce:	4413      	add	r3, r2
 80096d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80096d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096da:	b29a      	uxth	r2, r3
 80096dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	891b      	ldrh	r3, [r3, #8]
 80096ec:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6959      	ldr	r1, [r3, #20]
 80096fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009700:	b29b      	uxth	r3, r3
 8009702:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009706:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800970a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800970e:	6800      	ldr	r0, [r0, #0]
 8009710:	f001 f98d 	bl	800aa2e <USB_WritePMA>
            ep->xfer_buff += len;
 8009714:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009718:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695a      	ldr	r2, [r3, #20]
 8009720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009724:	441a      	add	r2, r3
 8009726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800972a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009736:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6a1a      	ldr	r2, [r3, #32]
 800973e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009742:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	429a      	cmp	r2, r3
 800974c:	d90f      	bls.n	800976e <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 800974e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009752:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a1a      	ldr	r2, [r3, #32]
 800975a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009764:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	621a      	str	r2, [r3, #32]
 800976c:	e00e      	b.n	800978c <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 800976e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009772:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 800977e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009782:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2200      	movs	r2, #0
 800978a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800978c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009790:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	647b      	str	r3, [r7, #68]	@ 0x44
 8009798:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800979c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d16d      	bne.n	8009884 <USB_EPStartXfer+0x820>
 80097a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c8:	4413      	add	r3, r2
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	011a      	lsls	r2, r3, #4
 80097da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097dc:	4413      	add	r3, r2
 80097de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d112      	bne.n	8009812 <USB_EPStartXfer+0x7ae>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980a:	b29a      	uxth	r2, r3
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	e05d      	b.n	80098ce <USB_EPStartXfer+0x86a>
 8009812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009816:	2b3e      	cmp	r3, #62	@ 0x3e
 8009818:	d817      	bhi.n	800984a <USB_EPStartXfer+0x7e6>
 800981a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <USB_EPStartXfer+0x7d6>
 8009830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009834:	3301      	adds	r3, #1
 8009836:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800983a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800983e:	b29b      	uxth	r3, r3
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	b29a      	uxth	r2, r3
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	e041      	b.n	80098ce <USB_EPStartXfer+0x86a>
 800984a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <USB_EPStartXfer+0x806>
 8009860:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009864:	3b01      	subs	r3, #1
 8009866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800986a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800986e:	b29b      	uxth	r3, r3
 8009870:	029b      	lsls	r3, r3, #10
 8009872:	b29b      	uxth	r3, r3
 8009874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987c:	b29a      	uxth	r2, r3
 800987e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009880:	801a      	strh	r2, [r3, #0]
 8009882:	e024      	b.n	80098ce <USB_EPStartXfer+0x86a>
 8009884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009888:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d11c      	bne.n	80098ce <USB_EPStartXfer+0x86a>
 8009894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009898:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	461a      	mov	r2, r3
 80098a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a8:	4413      	add	r3, r2
 80098aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	011a      	lsls	r2, r3, #4
 80098ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098bc:	4413      	add	r3, r2
 80098be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80098c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	895b      	ldrh	r3, [r3, #10]
 80098da:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6959      	ldr	r1, [r3, #20]
 80098ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80098f4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80098f8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80098fc:	6800      	ldr	r0, [r0, #0]
 80098fe:	f001 f896 	bl	800aa2e <USB_WritePMA>
 8009902:	e263      	b.n	8009dcc <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009904:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009908:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009922:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800993a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800993e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800994c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	441a      	add	r2, r3
 8009958:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800995c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996c:	b29b      	uxth	r3, r3
 800996e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009974:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	663b      	str	r3, [r7, #96]	@ 0x60
 800997c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009980:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800998a:	b29b      	uxth	r3, r3
 800998c:	461a      	mov	r2, r3
 800998e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009990:	4413      	add	r3, r2
 8009992:	663b      	str	r3, [r7, #96]	@ 0x60
 8009994:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009998:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	011a      	lsls	r2, r3, #4
 80099a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099a4:	4413      	add	r3, r2
 80099a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	891b      	ldrh	r3, [r3, #8]
 80099c2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6959      	ldr	r1, [r3, #20]
 80099d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80099dc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80099e0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80099e4:	6800      	ldr	r0, [r0, #0]
 80099e6:	f001 f822 	bl	800aa2e <USB_WritePMA>
 80099ea:	e1ef      	b.n	8009dcc <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 80aa 	beq.w	8009b68 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d16d      	bne.n	8009b0c <USB_EPStartXfer+0xaa8>
 8009a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a50:	4413      	add	r3, r2
 8009a52:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	011a      	lsls	r2, r3, #4
 8009a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a64:	4413      	add	r3, r2
 8009a66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d112      	bne.n	8009a9a <USB_EPStartXfer+0xa36>
 8009a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a96:	801a      	strh	r2, [r3, #0]
 8009a98:	e05d      	b.n	8009b56 <USB_EPStartXfer+0xaf2>
 8009a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009aa0:	d817      	bhi.n	8009ad2 <USB_EPStartXfer+0xa6e>
 8009aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <USB_EPStartXfer+0xa5e>
 8009ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009abc:	3301      	adds	r3, #1
 8009abe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	029b      	lsls	r3, r3, #10
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	e041      	b.n	8009b56 <USB_EPStartXfer+0xaf2>
 8009ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad6:	095b      	lsrs	r3, r3, #5
 8009ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ae0:	f003 031f 	and.w	r3, r3, #31
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <USB_EPStartXfer+0xa8e>
 8009ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	029b      	lsls	r3, r3, #10
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	e024      	b.n	8009b56 <USB_EPStartXfer+0xaf2>
 8009b0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d11c      	bne.n	8009b56 <USB_EPStartXfer+0xaf2>
 8009b1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b30:	4413      	add	r3, r2
 8009b32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	011a      	lsls	r2, r3, #4
 8009b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b44:	4413      	add	r3, r2
 8009b46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	895b      	ldrh	r3, [r3, #10]
 8009b62:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8009b66:	e0b2      	b.n	8009cce <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d171      	bne.n	8009c5c <USB_EPStartXfer+0xbf8>
 8009b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	461a      	mov	r2, r3
 8009b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	011a      	lsls	r2, r3, #4
 8009bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d112      	bne.n	8009bea <USB_EPStartXfer+0xb86>
 8009bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009be6:	801a      	strh	r2, [r3, #0]
 8009be8:	e069      	b.n	8009cbe <USB_EPStartXfer+0xc5a>
 8009bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bee:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bf0:	d817      	bhi.n	8009c22 <USB_EPStartXfer+0xbbe>
 8009bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <USB_EPStartXfer+0xbae>
 8009c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	029b      	lsls	r3, r3, #10
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e04d      	b.n	8009cbe <USB_EPStartXfer+0xc5a>
 8009c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c26:	095b      	lsrs	r3, r3, #5
 8009c28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c30:	f003 031f 	and.w	r3, r3, #31
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <USB_EPStartXfer+0xbde>
 8009c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	029b      	lsls	r3, r3, #10
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e030      	b.n	8009cbe <USB_EPStartXfer+0xc5a>
 8009c5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	785b      	ldrb	r3, [r3, #1]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d128      	bne.n	8009cbe <USB_EPStartXfer+0xc5a>
 8009c6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c90:	4413      	add	r3, r2
 8009c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	011a      	lsls	r2, r3, #4
 8009ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	891b      	ldrh	r3, [r3, #8]
 8009cca:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6959      	ldr	r1, [r3, #20]
 8009cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009ce4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009ce8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009cec:	6800      	ldr	r0, [r0, #0]
 8009cee:	f000 fe9e 	bl	800aa2e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cf6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d12e      	bne.n	8009d60 <USB_EPStartXfer+0xcfc>
 8009d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d28:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009d2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	441a      	add	r2, r3
 8009d46:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	8013      	strh	r3, [r2, #0]
 8009d5e:	e035      	b.n	8009dcc <USB_EPStartXfer+0xd68>
 8009d60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d12d      	bne.n	8009dcc <USB_EPStartXfer+0xd68>
 8009d70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d96:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009da8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	441a      	add	r2, r3
 8009db4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009dcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009dee:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dfa:	8013      	strh	r3, [r2, #0]
 8009dfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e00:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009e04:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009e08:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009e0c:	8812      	ldrh	r2, [r2, #0]
 8009e0e:	f082 0210 	eor.w	r2, r2, #16
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e18:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009e1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009e20:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009e24:	8812      	ldrh	r2, [r2, #0]
 8009e26:	f082 0220 	eor.w	r2, r2, #32
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	441a      	add	r2, r3
 8009e46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e4a:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	8013      	strh	r3, [r2, #0]
 8009e64:	f000 bc9f 	b.w	800a7a6 <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	7b1b      	ldrb	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f040 80ae 	bne.w	8009fd6 <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d917      	bls.n	8009ec6 <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8009e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 8009ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ebc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	619a      	str	r2, [r3, #24]
 8009ec4:	e00e      	b.n	8009ee4 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8009ec6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 8009ed6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ee4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ef2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f08:	4413      	add	r3, r2
 8009f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	011a      	lsls	r2, r3, #4
 8009f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f20:	4413      	add	r3, r2
 8009f22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d116      	bne.n	8009f60 <USB_EPStartXfer+0xefc>
 8009f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f44:	801a      	strh	r2, [r3, #0]
 8009f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e3e8      	b.n	800a732 <USB_EPStartXfer+0x16ce>
 8009f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f66:	d818      	bhi.n	8009f9a <USB_EPStartXfer+0xf36>
 8009f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d004      	beq.n	8009f88 <USB_EPStartXfer+0xf24>
 8009f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f82:	3301      	adds	r3, #1
 8009f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	029b      	lsls	r3, r3, #10
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	e3cb      	b.n	800a732 <USB_EPStartXfer+0x16ce>
 8009f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9e:	095b      	lsrs	r3, r3, #5
 8009fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <USB_EPStartXfer+0xf56>
 8009fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	029b      	lsls	r3, r3, #10
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fd2:	801a      	strh	r2, [r3, #0]
 8009fd4:	e3ad      	b.n	800a732 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	78db      	ldrb	r3, [r3, #3]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	f040 8200 	bne.w	800a3e8 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009fe8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f040 8091 	bne.w	800a11c <USB_EPStartXfer+0x10b8>
 8009ffa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ffe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a008:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a00c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a016:	b29b      	uxth	r3, r3
 800a018:	461a      	mov	r2, r3
 800a01a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a01e:	4413      	add	r3, r2
 800a020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a028:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	011a      	lsls	r2, r3, #4
 800a032:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a036:	4413      	add	r3, r2
 800a038:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a03c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d116      	bne.n	800a07e <USB_EPStartXfer+0x101a>
 800a050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a074:	b29a      	uxth	r2, r3
 800a076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a07a:	801a      	strh	r2, [r3, #0]
 800a07c:	e083      	b.n	800a186 <USB_EPStartXfer+0x1122>
 800a07e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a082:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a08c:	d820      	bhi.n	800a0d0 <USB_EPStartXfer+0x106c>
 800a08e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a092:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <USB_EPStartXfer+0x105a>
 800a0b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	029b      	lsls	r3, r3, #10
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	e05a      	b.n	800a186 <USB_EPStartXfer+0x1122>
 800a0d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d104      	bne.n	800a100 <USB_EPStartXfer+0x109c>
 800a0f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a104:	b29b      	uxth	r3, r3
 800a106:	029b      	lsls	r3, r3, #10
 800a108:	b29b      	uxth	r3, r3
 800a10a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a112:	b29a      	uxth	r2, r3
 800a114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e034      	b.n	800a186 <USB_EPStartXfer+0x1122>
 800a11c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a120:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	785b      	ldrb	r3, [r3, #1]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d12c      	bne.n	800a186 <USB_EPStartXfer+0x1122>
 800a12c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a130:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a13a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a13e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a150:	4413      	add	r3, r2
 800a152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a15a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	011a      	lsls	r2, r3, #4
 800a164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a168:	4413      	add	r3, r2
 800a16a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a16e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a176:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	b29a      	uxth	r2, r3
 800a180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a18a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a198:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	785b      	ldrb	r3, [r3, #1]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 8091 	bne.w	800a2c8 <USB_EPStartXfer+0x1264>
 800a1a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	011a      	lsls	r2, r3, #4
 800a1de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d116      	bne.n	800a22a <USB_EPStartXfer+0x11c6>
 800a1fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a208:	b29a      	uxth	r2, r3
 800a20a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a220:	b29a      	uxth	r2, r3
 800a222:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a226:	801a      	strh	r2, [r3, #0]
 800a228:	e07c      	b.n	800a324 <USB_EPStartXfer+0x12c0>
 800a22a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a22e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	2b3e      	cmp	r3, #62	@ 0x3e
 800a238:	d820      	bhi.n	800a27c <USB_EPStartXfer+0x1218>
 800a23a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a23e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	085b      	lsrs	r3, r3, #1
 800a248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a24c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a250:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <USB_EPStartXfer+0x1206>
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a264:	3301      	adds	r3, #1
 800a266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a26e:	b29b      	uxth	r3, r3
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	b29a      	uxth	r2, r3
 800a274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	e053      	b.n	800a324 <USB_EPStartXfer+0x12c0>
 800a27c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a280:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	095b      	lsrs	r3, r3, #5
 800a28a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a28e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a292:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f003 031f 	and.w	r3, r3, #31
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d104      	bne.n	800a2ac <USB_EPStartXfer+0x1248>
 800a2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	029b      	lsls	r3, r3, #10
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	e02d      	b.n	800a324 <USB_EPStartXfer+0x12c0>
 800a2c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d125      	bne.n	800a324 <USB_EPStartXfer+0x12c0>
 800a2d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	011a      	lsls	r2, r3, #4
 800a302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a306:	4413      	add	r3, r2
 800a308:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a30c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a310:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a314:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a322:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a324:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a328:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 81fe 	beq.w	800a732 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a33a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a344:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a356:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a35a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <USB_EPStartXfer+0x130a>
 800a362:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10d      	bne.n	800a38a <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a36e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 81db 	bne.w	800a732 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a37c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	f040 81d4 	bne.w	800a732 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a38a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a38e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a398:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b0:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a3b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	441a      	add	r2, r3
 800a3ce:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]
 800a3e6:	e1a4      	b.n	800a732 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a3e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	78db      	ldrb	r3, [r3, #3]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	f040 819a 	bne.w	800a72e <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a3fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a40a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	429a      	cmp	r2, r3
 800a414:	d917      	bls.n	800a446 <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a41a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a42a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a436:	1ad2      	subs	r2, r2, r3
 800a438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a43c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	619a      	str	r2, [r3, #24]
 800a444:	e00e      	b.n	800a464 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a44a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a456:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a45a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2200      	movs	r2, #0
 800a462:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a468:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d178      	bne.n	800a566 <USB_EPStartXfer+0x1502>
 800a474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a478:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a482:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a486:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a490:	b29b      	uxth	r3, r3
 800a492:	461a      	mov	r2, r3
 800a494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a498:	4413      	add	r3, r2
 800a49a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a49e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	011a      	lsls	r2, r3, #4
 800a4ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d116      	bne.n	800a4f0 <USB_EPStartXfer+0x148c>
 800a4c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a4d4:	801a      	strh	r2, [r3, #0]
 800a4d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a4ec:	801a      	strh	r2, [r3, #0]
 800a4ee:	e06b      	b.n	800a5c8 <USB_EPStartXfer+0x1564>
 800a4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4f6:	d818      	bhi.n	800a52a <USB_EPStartXfer+0x14c6>
 800a4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <USB_EPStartXfer+0x14b4>
 800a50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a512:	3301      	adds	r3, #1
 800a514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	029b      	lsls	r3, r3, #10
 800a520:	b29a      	uxth	r2, r3
 800a522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	e04e      	b.n	800a5c8 <USB_EPStartXfer+0x1564>
 800a52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d104      	bne.n	800a54a <USB_EPStartXfer+0x14e6>
 800a540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a544:	3b01      	subs	r3, #1
 800a546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a54e:	b29b      	uxth	r3, r3
 800a550:	029b      	lsls	r3, r3, #10
 800a552:	b29b      	uxth	r3, r3
 800a554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a562:	801a      	strh	r2, [r3, #0]
 800a564:	e030      	b.n	800a5c8 <USB_EPStartXfer+0x1564>
 800a566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a56a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d128      	bne.n	800a5c8 <USB_EPStartXfer+0x1564>
 800a576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a57a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a592:	b29b      	uxth	r3, r3
 800a594:	461a      	mov	r2, r3
 800a596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a59a:	4413      	add	r3, r2
 800a59c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	011a      	lsls	r2, r3, #4
 800a5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a5b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a5c6:	801a      	strh	r2, [r3, #0]
 800a5c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d178      	bne.n	800a6d8 <USB_EPStartXfer+0x1674>
 800a5e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a602:	b29b      	uxth	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a60a:	4413      	add	r3, r2
 800a60c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a610:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a614:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	011a      	lsls	r2, r3, #4
 800a61e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a622:	4413      	add	r3, r2
 800a624:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a628:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d116      	bne.n	800a662 <USB_EPStartXfer+0x15fe>
 800a634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a640:	b29a      	uxth	r2, r3
 800a642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a646:	801a      	strh	r2, [r3, #0]
 800a648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a658:	b29a      	uxth	r2, r3
 800a65a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a65e:	801a      	strh	r2, [r3, #0]
 800a660:	e067      	b.n	800a732 <USB_EPStartXfer+0x16ce>
 800a662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a666:	2b3e      	cmp	r3, #62	@ 0x3e
 800a668:	d818      	bhi.n	800a69c <USB_EPStartXfer+0x1638>
 800a66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <USB_EPStartXfer+0x1626>
 800a680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a684:	3301      	adds	r3, #1
 800a686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a68a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a68e:	b29b      	uxth	r3, r3
 800a690:	029b      	lsls	r3, r3, #10
 800a692:	b29a      	uxth	r2, r3
 800a694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a698:	801a      	strh	r2, [r3, #0]
 800a69a:	e04a      	b.n	800a732 <USB_EPStartXfer+0x16ce>
 800a69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d104      	bne.n	800a6bc <USB_EPStartXfer+0x1658>
 800a6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	e02c      	b.n	800a732 <USB_EPStartXfer+0x16ce>
 800a6d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d124      	bne.n	800a732 <USB_EPStartXfer+0x16ce>
 800a6e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6fe:	4413      	add	r3, r2
 800a700:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a708:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	011a      	lsls	r2, r3, #4
 800a712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a716:	4413      	add	r3, r2
 800a718:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a71c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a724:	b29a      	uxth	r2, r3
 800a726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	e001      	b.n	800a732 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e03a      	b.n	800a7a8 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a736:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a740:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a758:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a75c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a760:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a764:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a768:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a76c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a770:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a782:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	441a      	add	r2, r3
 800a78e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d020      	beq.n	800a806 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7da:	81bb      	strh	r3, [r7, #12]
 800a7dc:	89bb      	ldrh	r3, [r7, #12]
 800a7de:	f083 0310 	eor.w	r3, r3, #16
 800a7e2:	81bb      	strh	r3, [r7, #12]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	441a      	add	r2, r3
 800a7ee:	89bb      	ldrh	r3, [r7, #12]
 800a7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a800:	b29b      	uxth	r3, r3
 800a802:	8013      	strh	r3, [r2, #0]
 800a804:	e01f      	b.n	800a846 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a81c:	81fb      	strh	r3, [r7, #14]
 800a81e:	89fb      	ldrh	r3, [r7, #14]
 800a820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a824:	81fb      	strh	r3, [r7, #14]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	441a      	add	r2, r3
 800a830:	89fb      	ldrh	r3, [r7, #14]
 800a832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a83a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a842:	b29b      	uxth	r3, r3
 800a844:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bc80      	pop	{r7}
 800a850:	4770      	bx	lr

0800a852 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a852:	b480      	push	{r7}
 800a854:	b087      	sub	sp, #28
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	7b1b      	ldrb	r3, [r3, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f040 809d 	bne.w	800a9a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d04c      	beq.n	800a908 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	823b      	strh	r3, [r7, #16]
 800a87c:	8a3b      	ldrh	r3, [r7, #16]
 800a87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01b      	beq.n	800a8be <USB_EPClearStall+0x6c>
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89c:	81fb      	strh	r3, [r7, #14]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	441a      	add	r2, r3
 800a8a8:	89fb      	ldrh	r3, [r7, #14]
 800a8aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	78db      	ldrb	r3, [r3, #3]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d06c      	beq.n	800a9a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8dc:	81bb      	strh	r3, [r7, #12]
 800a8de:	89bb      	ldrh	r3, [r7, #12]
 800a8e0:	f083 0320 	eor.w	r3, r3, #32
 800a8e4:	81bb      	strh	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	441a      	add	r2, r3
 800a8f0:	89bb      	ldrh	r3, [r7, #12]
 800a8f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a902:	b29b      	uxth	r3, r3
 800a904:	8013      	strh	r3, [r2, #0]
 800a906:	e04b      	b.n	800a9a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	82fb      	strh	r3, [r7, #22]
 800a916:	8afb      	ldrh	r3, [r7, #22]
 800a918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01b      	beq.n	800a958 <USB_EPClearStall+0x106>
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a936:	82bb      	strh	r3, [r7, #20]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	441a      	add	r2, r3
 800a942:	8abb      	ldrh	r3, [r7, #20]
 800a944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a94c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a954:	b29b      	uxth	r3, r3
 800a956:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29b      	uxth	r3, r3
 800a966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a96a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a96e:	827b      	strh	r3, [r7, #18]
 800a970:	8a7b      	ldrh	r3, [r7, #18]
 800a972:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a976:	827b      	strh	r3, [r7, #18]
 800a978:	8a7b      	ldrh	r3, [r7, #18]
 800a97a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a97e:	827b      	strh	r3, [r7, #18]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	441a      	add	r2, r3
 800a98a:	8a7b      	ldrh	r3, [r7, #18]
 800a98c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	371c      	adds	r7, #28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr

0800a9ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d103      	bne.n	800a9c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2280      	movs	r2, #128	@ 0x80
 800a9c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr

0800a9d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bc80      	pop	{r7}
 800a9e4:	4770      	bx	lr

0800a9e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bc80      	pop	{r7}
 800a9f8:	4770      	bx	lr

0800a9fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bc80      	pop	{r7}
 800aa16:	4770      	bx	lr

0800aa18 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr

0800aa2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b08d      	sub	sp, #52	@ 0x34
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	80fb      	strh	r3, [r7, #6]
 800aa40:	4613      	mov	r3, r2
 800aa42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa44:	88bb      	ldrh	r3, [r7, #4]
 800aa46:	3301      	adds	r3, #1
 800aa48:	085b      	lsrs	r3, r3, #1
 800aa4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa54:	88fb      	ldrh	r3, [r7, #6]
 800aa56:	005a      	lsls	r2, r3, #1
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa60:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa66:	e01d      	b.n	800aaa4 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa70:	3301      	adds	r3, #1
 800aa72:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8e:	3302      	adds	r3, #2
 800aa90:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800aa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa94:	3302      	adds	r3, #2
 800aa96:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800aa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1de      	bne.n	800aa68 <USB_WritePMA+0x3a>
  }
}
 800aaaa:	bf00      	nop
 800aaac:	bf00      	nop
 800aaae:	3734      	adds	r7, #52	@ 0x34
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr

0800aab6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b08b      	sub	sp, #44	@ 0x2c
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	4611      	mov	r1, r2
 800aac2:	461a      	mov	r2, r3
 800aac4:	460b      	mov	r3, r1
 800aac6:	80fb      	strh	r3, [r7, #6]
 800aac8:	4613      	mov	r3, r2
 800aaca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aacc:	88bb      	ldrh	r3, [r7, #4]
 800aace:	085b      	lsrs	r3, r3, #1
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aadc:	88fb      	ldrh	r3, [r7, #6]
 800aade:	005a      	lsls	r2, r3, #1
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aae8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaee:	e01b      	b.n	800ab28 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	3302      	adds	r3, #2
 800aafc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	0a1b      	lsrs	r3, r3, #8
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	3302      	adds	r3, #2
 800ab20:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	3b01      	subs	r3, #1
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e0      	bne.n	800aaf0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ab2e:	88bb      	ldrh	r3, [r7, #4]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	701a      	strb	r2, [r3, #0]
  }
}
 800ab4a:	bf00      	nop
 800ab4c:	372c      	adds	r7, #44	@ 0x2c
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bc80      	pop	{r7}
 800ab52:	4770      	bx	lr

0800ab54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7c1b      	ldrb	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d115      	bne.n	800ab98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab70:	2202      	movs	r2, #2
 800ab72:	2181      	movs	r1, #129	@ 0x81
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 fe90 	bl	800c89a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab84:	2202      	movs	r2, #2
 800ab86:	2101      	movs	r1, #1
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 fe86 	bl	800c89a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800ab96:	e012      	b.n	800abbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab98:	2340      	movs	r3, #64	@ 0x40
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	2181      	movs	r1, #129	@ 0x81
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 fe7b 	bl	800c89a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800abaa:	2340      	movs	r3, #64	@ 0x40
 800abac:	2202      	movs	r2, #2
 800abae:	2101      	movs	r1, #1
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f001 fe72 	bl	800c89a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800abbe:	2308      	movs	r3, #8
 800abc0:	2203      	movs	r2, #3
 800abc2:	2182      	movs	r1, #130	@ 0x82
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 fe68 	bl	800c89a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abd4:	f001 ff88 	bl	800cae8 <USBD_static_malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800abea:	2301      	movs	r3, #1
 800abec:	73fb      	strb	r3, [r7, #15]
 800abee:	e026      	b.n	800ac3e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7c1b      	ldrb	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d109      	bne.n	800ac2e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac24:	2101      	movs	r1, #1
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 ff28 	bl	800ca7c <USBD_LL_PrepareReceive>
 800ac2c:	e007      	b.n	800ac3e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac34:	2340      	movs	r3, #64	@ 0x40
 800ac36:	2101      	movs	r1, #1
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 ff1f 	bl	800ca7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac58:	2181      	movs	r1, #129	@ 0x81
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 fe43 	bl	800c8e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac66:	2101      	movs	r1, #1
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f001 fe3c 	bl	800c8e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ac76:	2182      	movs	r1, #130	@ 0x82
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 fe34 	bl	800c8e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00e      	beq.n	800acac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f001 ff2e 	bl	800cb00 <USBD_static_free>
    pdev->pClassData = NULL;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800acc8:	2300      	movs	r3, #0
 800acca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d039      	beq.n	800ad54 <USBD_CDC_Setup+0x9e>
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d17f      	bne.n	800ade4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	88db      	ldrh	r3, [r3, #6]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d029      	beq.n	800ad40 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	b25b      	sxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da11      	bge.n	800ad1a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ad02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	88d2      	ldrh	r2, [r2, #6]
 800ad08:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad0a:	6939      	ldr	r1, [r7, #16]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	88db      	ldrh	r3, [r3, #6]
 800ad10:	461a      	mov	r2, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 fa06 	bl	800c124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ad18:	e06b      	b.n	800adf2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	785a      	ldrb	r2, [r3, #1]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	88db      	ldrh	r3, [r3, #6]
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad30:	6939      	ldr	r1, [r7, #16]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	88db      	ldrh	r3, [r3, #6]
 800ad36:	461a      	mov	r2, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fa21 	bl	800c180 <USBD_CtlPrepareRx>
      break;
 800ad3e:	e058      	b.n	800adf2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	7850      	ldrb	r0, [r2, #1]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	4798      	blx	r3
      break;
 800ad52:	e04e      	b.n	800adf2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	785b      	ldrb	r3, [r3, #1]
 800ad58:	2b0b      	cmp	r3, #11
 800ad5a:	d02e      	beq.n	800adba <USBD_CDC_Setup+0x104>
 800ad5c:	2b0b      	cmp	r3, #11
 800ad5e:	dc38      	bgt.n	800add2 <USBD_CDC_Setup+0x11c>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <USBD_CDC_Setup+0xb4>
 800ad64:	2b0a      	cmp	r3, #10
 800ad66:	d014      	beq.n	800ad92 <USBD_CDC_Setup+0xdc>
 800ad68:	e033      	b.n	800add2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d107      	bne.n	800ad84 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	2202      	movs	r2, #2
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 f9d1 	bl	800c124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad82:	e02e      	b.n	800ade2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 f962 	bl	800c050 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	75fb      	strb	r3, [r7, #23]
          break;
 800ad90:	e027      	b.n	800ade2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d107      	bne.n	800adac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad9c:	f107 030f 	add.w	r3, r7, #15
 800ada0:	2201      	movs	r2, #1
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 f9bd 	bl	800c124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adaa:	e01a      	b.n	800ade2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 f94e 	bl	800c050 <USBD_CtlError>
            ret = USBD_FAIL;
 800adb4:	2302      	movs	r3, #2
 800adb6:	75fb      	strb	r3, [r7, #23]
          break;
 800adb8:	e013      	b.n	800ade2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d00d      	beq.n	800ade0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 f942 	bl	800c050 <USBD_CtlError>
            ret = USBD_FAIL;
 800adcc:	2302      	movs	r3, #2
 800adce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800add0:	e006      	b.n	800ade0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f93b 	bl	800c050 <USBD_CtlError>
          ret = USBD_FAIL;
 800adda:	2302      	movs	r3, #2
 800addc:	75fb      	strb	r3, [r7, #23]
          break;
 800adde:	e000      	b.n	800ade2 <USBD_CDC_Setup+0x12c>
          break;
 800ade0:	bf00      	nop
      }
      break;
 800ade2:	e006      	b.n	800adf2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 f932 	bl	800c050 <USBD_CtlError>
      ret = USBD_FAIL;
 800adec:	2302      	movs	r3, #2
 800adee:	75fb      	strb	r3, [r7, #23]
      break;
 800adf0:	bf00      	nop
  }

  return ret;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae0e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae16:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d03a      	beq.n	800ae98 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	440b      	add	r3, r1
 800ae30:	331c      	adds	r3, #28
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d029      	beq.n	800ae8c <USBD_CDC_DataIn+0x90>
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	440b      	add	r3, r1
 800ae46:	331c      	adds	r3, #28
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	78f9      	ldrb	r1, [r7, #3]
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	4403      	add	r3, r0
 800ae58:	3338      	adds	r3, #56	@ 0x38
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae60:	fb01 f303 	mul.w	r3, r1, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d110      	bne.n	800ae8c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	331c      	adds	r3, #28
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae7e:	78f9      	ldrb	r1, [r7, #3]
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fdd6 	bl	800ca36 <USBD_LL_Transmit>
 800ae8a:	e003      	b.n	800ae94 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e000      	b.n	800ae9a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ae98:	2302      	movs	r3, #2
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fe01 	bl	800cac2 <USBD_LL_GetRxDataSize>
 800aec0:	4602      	mov	r2, r0
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00d      	beq.n	800aeee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aee6:	4611      	mov	r1, r2
 800aee8:	4798      	blx	r3

    return USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e000      	b.n	800aef0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aeee:	2302      	movs	r3, #2
  }
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af06:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d014      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x44>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800af18:	2bff      	cmp	r3, #255	@ 0xff
 800af1a:	d00f      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800af2a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	22ff      	movs	r2, #255	@ 0xff
 800af38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2243      	movs	r2, #67	@ 0x43
 800af54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800af56:	4b03      	ldr	r3, [pc, #12]	@ (800af64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	200000bc 	.word	0x200000bc

0800af68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2243      	movs	r2, #67	@ 0x43
 800af74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800af76:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000078 	.word	0x20000078

0800af88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2243      	movs	r2, #67	@ 0x43
 800af94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800af96:	4b03      	ldr	r3, [pc, #12]	@ (800afa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000100 	.word	0x20000100

0800afa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	220a      	movs	r2, #10
 800afb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800afb6:	4b03      	ldr	r3, [pc, #12]	@ (800afc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bc80      	pop	{r7}
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	20000034 	.word	0x20000034

0800afc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800afd2:	2302      	movs	r3, #2
 800afd4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr

0800aff4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	4613      	mov	r3, r2
 800b000:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b012:	88fa      	ldrh	r2, [r7, #6]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	371c      	adds	r7, #28
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b036:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr

0800b04c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b05a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01c      	beq.n	800b0a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d115      	bne.n	800b09c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b08e:	b29b      	uxth	r3, r3
 800b090:	2181      	movs	r1, #129	@ 0x81
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 fccf 	bl	800ca36 <USBD_LL_Transmit>

      return USBD_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	e002      	b.n	800b0a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e000      	b.n	800b0a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b0a0:	2302      	movs	r3, #2
  }
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d017      	beq.n	800b0f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7c1b      	ldrb	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d109      	bne.n	800b0e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f001 fccf 	bl	800ca7c <USBD_LL_PrepareReceive>
 800b0de:	e007      	b.n	800b0f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0e6:	2340      	movs	r3, #64	@ 0x40
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 fcc6 	bl	800ca7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e000      	b.n	800b0f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b0f4:	2302      	movs	r3, #2
  }
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	4613      	mov	r3, r2
 800b10a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	e01a      	b.n	800b14c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	79fa      	ldrb	r2, [r7, #7]
 800b142:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f001 fb33 	bl	800c7b0 <USBD_LL_Init>

  return USBD_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
 800b174:	e001      	b.n	800b17a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b176:	2302      	movs	r3, #2
 800b178:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	bc80      	pop	{r7}
 800b184:	4770      	bx	lr

0800b186 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 fb68 	bl	800c864 <USBD_LL_Start>

  return USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr

0800b1b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00c      	beq.n	800b1e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	4611      	mov	r1, r2
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	4798      	blx	r3

  return USBD_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fed8 	bl	800bfde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b23c:	461a      	mov	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b24a:	f003 031f 	and.w	r3, r3, #31
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d016      	beq.n	800b280 <USBD_LL_SetupStage+0x6a>
 800b252:	2b02      	cmp	r3, #2
 800b254:	d81c      	bhi.n	800b290 <USBD_LL_SetupStage+0x7a>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <USBD_LL_SetupStage+0x4a>
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d008      	beq.n	800b270 <USBD_LL_SetupStage+0x5a>
 800b25e:	e017      	b.n	800b290 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9cb 	bl	800b604 <USBD_StdDevReq>
      break;
 800b26e:	e01a      	b.n	800b2a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fa2d 	bl	800b6d8 <USBD_StdItfReq>
      break;
 800b27e:	e012      	b.n	800b2a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fa6d 	bl	800b768 <USBD_StdEPReq>
      break;
 800b28e:	e00a      	b.n	800b2a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b296:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 fb40 	bl	800c924 <USBD_LL_StallEP>
      break;
 800b2a4:	bf00      	nop
  }

  return USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d14b      	bne.n	800b35c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b2ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d134      	bne.n	800b340 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d919      	bls.n	800b316 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	1ad2      	subs	r2, r2, r3
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	68da      	ldr	r2, [r3, #12]
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d203      	bcs.n	800b304 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b300:	b29b      	uxth	r3, r3
 800b302:	e002      	b.n	800b30a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b308:	b29b      	uxth	r3, r3
 800b30a:	461a      	mov	r2, r3
 800b30c:	6879      	ldr	r1, [r7, #4]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 ff54 	bl	800c1bc <USBD_CtlContinueRx>
 800b314:	e038      	b.n	800b388 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00a      	beq.n	800b338 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d105      	bne.n	800b338 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 ff51 	bl	800c1e0 <USBD_CtlSendStatus>
 800b33e:	e023      	b.n	800b388 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b346:	2b05      	cmp	r3, #5
 800b348:	d11e      	bne.n	800b388 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b352:	2100      	movs	r1, #0
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f001 fae5 	bl	800c924 <USBD_LL_StallEP>
 800b35a:	e015      	b.n	800b388 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00d      	beq.n	800b384 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d108      	bne.n	800b384 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	7afa      	ldrb	r2, [r7, #11]
 800b37c:	4611      	mov	r1, r2
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	4798      	blx	r3
 800b382:	e001      	b.n	800b388 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b384:	2302      	movs	r3, #2
 800b386:	e000      	b.n	800b38a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	460b      	mov	r3, r1
 800b39c:	607a      	str	r2, [r7, #4]
 800b39e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d17f      	bne.n	800b4a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3314      	adds	r3, #20
 800b3aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d15c      	bne.n	800b470 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d915      	bls.n	800b3ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	1ad2      	subs	r2, r2, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 febe 	bl	800c15c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f001 fb48 	bl	800ca7c <USBD_LL_PrepareReceive>
 800b3ec:	e04e      	b.n	800b48c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	6912      	ldr	r2, [r2, #16]
 800b3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3fa:	fb01 f202 	mul.w	r2, r1, r2
 800b3fe:	1a9b      	subs	r3, r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d11c      	bne.n	800b43e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	689a      	ldr	r2, [r3, #8]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d316      	bcc.n	800b43e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d20f      	bcs.n	800b43e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b41e:	2200      	movs	r2, #0
 800b420:	2100      	movs	r1, #0
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fe9a 	bl	800c15c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b430:	2300      	movs	r3, #0
 800b432:	2200      	movs	r2, #0
 800b434:	2100      	movs	r1, #0
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f001 fb20 	bl	800ca7c <USBD_LL_PrepareReceive>
 800b43c:	e026      	b.n	800b48c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b450:	2b03      	cmp	r3, #3
 800b452:	d105      	bne.n	800b460 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b460:	2180      	movs	r1, #128	@ 0x80
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f001 fa5e 	bl	800c924 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fecc 	bl	800c206 <USBD_CtlReceiveStatus>
 800b46e:	e00d      	b.n	800b48c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b476:	2b04      	cmp	r3, #4
 800b478:	d004      	beq.n	800b484 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b480:	2b00      	cmp	r3, #0
 800b482:	d103      	bne.n	800b48c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b484:	2180      	movs	r1, #128	@ 0x80
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f001 fa4c 	bl	800c924 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b492:	2b01      	cmp	r3, #1
 800b494:	d11d      	bne.n	800b4d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f7ff fe81 	bl	800b19e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b4a4:	e015      	b.n	800b4d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00d      	beq.n	800b4ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d108      	bne.n	800b4ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	7afa      	ldrb	r2, [r7, #11]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	4798      	blx	r3
 800b4cc:	e001      	b.n	800b4d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e000      	b.n	800b4d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4e4:	2340      	movs	r3, #64	@ 0x40
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 f9d5 	bl	800c89a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2240      	movs	r2, #64	@ 0x40
 800b4fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b500:	2340      	movs	r3, #64	@ 0x40
 800b502:	2200      	movs	r2, #0
 800b504:	2180      	movs	r1, #128	@ 0x80
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 f9c7 	bl	800c89a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2240      	movs	r2, #64	@ 0x40
 800b516:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	6852      	ldr	r2, [r2, #4]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	4611      	mov	r1, r2
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	4798      	blx	r3
  }

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	bc80      	pop	{r7}
 800b57a:	4770      	bx	lr

0800b57c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr

0800b5a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	d105      	bne.n	800b5c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bc80      	pop	{r7}
 800b5cc:	4770      	bx	lr

0800b5ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d10b      	bne.n	800b5f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b61a:	2b40      	cmp	r3, #64	@ 0x40
 800b61c:	d005      	beq.n	800b62a <USBD_StdDevReq+0x26>
 800b61e:	2b40      	cmp	r3, #64	@ 0x40
 800b620:	d84f      	bhi.n	800b6c2 <USBD_StdDevReq+0xbe>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <USBD_StdDevReq+0x36>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d14b      	bne.n	800b6c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	4798      	blx	r3
      break;
 800b638:	e048      	b.n	800b6cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	785b      	ldrb	r3, [r3, #1]
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d839      	bhi.n	800b6b6 <USBD_StdDevReq+0xb2>
 800b642:	a201      	add	r2, pc, #4	@ (adr r2, 800b648 <USBD_StdDevReq+0x44>)
 800b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b648:	0800b699 	.word	0x0800b699
 800b64c:	0800b6ad 	.word	0x0800b6ad
 800b650:	0800b6b7 	.word	0x0800b6b7
 800b654:	0800b6a3 	.word	0x0800b6a3
 800b658:	0800b6b7 	.word	0x0800b6b7
 800b65c:	0800b67b 	.word	0x0800b67b
 800b660:	0800b671 	.word	0x0800b671
 800b664:	0800b6b7 	.word	0x0800b6b7
 800b668:	0800b68f 	.word	0x0800b68f
 800b66c:	0800b685 	.word	0x0800b685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9dc 	bl	800ba30 <USBD_GetDescriptor>
          break;
 800b678:	e022      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fb3f 	bl	800bd00 <USBD_SetAddress>
          break;
 800b682:	e01d      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fb7e 	bl	800bd88 <USBD_SetConfig>
          break;
 800b68c:	e018      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fc07 	bl	800bea4 <USBD_GetConfig>
          break;
 800b696:	e013      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fc37 	bl	800bf0e <USBD_GetStatus>
          break;
 800b6a0:	e00e      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fc65 	bl	800bf74 <USBD_SetFeature>
          break;
 800b6aa:	e009      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fc74 	bl	800bf9c <USBD_ClrFeature>
          break;
 800b6b4:	e004      	b.n	800b6c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fcc9 	bl	800c050 <USBD_CtlError>
          break;
 800b6be:	bf00      	nop
      }
      break;
 800b6c0:	e004      	b.n	800b6cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fcc3 	bl	800c050 <USBD_CtlError>
      break;
 800b6ca:	bf00      	nop
  }

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop

0800b6d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6ee:	2b40      	cmp	r3, #64	@ 0x40
 800b6f0:	d005      	beq.n	800b6fe <USBD_StdItfReq+0x26>
 800b6f2:	2b40      	cmp	r3, #64	@ 0x40
 800b6f4:	d82e      	bhi.n	800b754 <USBD_StdItfReq+0x7c>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <USBD_StdItfReq+0x26>
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d12a      	bne.n	800b754 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b704:	3b01      	subs	r3, #1
 800b706:	2b02      	cmp	r3, #2
 800b708:	d81d      	bhi.n	800b746 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	889b      	ldrh	r3, [r3, #4]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b01      	cmp	r3, #1
 800b712:	d813      	bhi.n	800b73c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	88db      	ldrh	r3, [r3, #6]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d110      	bne.n	800b750 <USBD_StdItfReq+0x78>
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10d      	bne.n	800b750 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fd53 	bl	800c1e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b73a:	e009      	b.n	800b750 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fc86 	bl	800c050 <USBD_CtlError>
          break;
 800b744:	e004      	b.n	800b750 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fc81 	bl	800c050 <USBD_CtlError>
          break;
 800b74e:	e000      	b.n	800b752 <USBD_StdItfReq+0x7a>
          break;
 800b750:	bf00      	nop
      }
      break;
 800b752:	e004      	b.n	800b75e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fc7a 	bl	800c050 <USBD_CtlError>
      break;
 800b75c:	bf00      	nop
  }

  return USBD_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	889b      	ldrh	r3, [r3, #4]
 800b77a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b784:	2b40      	cmp	r3, #64	@ 0x40
 800b786:	d007      	beq.n	800b798 <USBD_StdEPReq+0x30>
 800b788:	2b40      	cmp	r3, #64	@ 0x40
 800b78a:	f200 8146 	bhi.w	800ba1a <USBD_StdEPReq+0x2b2>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <USBD_StdEPReq+0x40>
 800b792:	2b20      	cmp	r3, #32
 800b794:	f040 8141 	bne.w	800ba1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
      break;
 800b7a6:	e13d      	b.n	800ba24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	d10a      	bne.n	800b7ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	e12d      	b.n	800ba26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	785b      	ldrb	r3, [r3, #1]
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	d007      	beq.n	800b7e2 <USBD_StdEPReq+0x7a>
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	f300 811b 	bgt.w	800ba0e <USBD_StdEPReq+0x2a6>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d072      	beq.n	800b8c2 <USBD_StdEPReq+0x15a>
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d03a      	beq.n	800b856 <USBD_StdEPReq+0xee>
 800b7e0:	e115      	b.n	800ba0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d002      	beq.n	800b7f2 <USBD_StdEPReq+0x8a>
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d015      	beq.n	800b81c <USBD_StdEPReq+0xb4>
 800b7f0:	e02b      	b.n	800b84a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00c      	beq.n	800b812 <USBD_StdEPReq+0xaa>
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	2b80      	cmp	r3, #128	@ 0x80
 800b7fc:	d009      	beq.n	800b812 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 f88e 	bl	800c924 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b808:	2180      	movs	r1, #128	@ 0x80
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f001 f88a 	bl	800c924 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b810:	e020      	b.n	800b854 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fc1b 	bl	800c050 <USBD_CtlError>
              break;
 800b81a:	e01b      	b.n	800b854 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10e      	bne.n	800b842 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <USBD_StdEPReq+0xda>
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	2b80      	cmp	r3, #128	@ 0x80
 800b82e:	d008      	beq.n	800b842 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	88db      	ldrh	r3, [r3, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d104      	bne.n	800b842 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 f871 	bl	800c924 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fccc 	bl	800c1e0 <USBD_CtlSendStatus>

              break;
 800b848:	e004      	b.n	800b854 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fbff 	bl	800c050 <USBD_CtlError>
              break;
 800b852:	bf00      	nop
          }
          break;
 800b854:	e0e0      	b.n	800ba18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d002      	beq.n	800b866 <USBD_StdEPReq+0xfe>
 800b860:	2b03      	cmp	r3, #3
 800b862:	d015      	beq.n	800b890 <USBD_StdEPReq+0x128>
 800b864:	e026      	b.n	800b8b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b866:	7bbb      	ldrb	r3, [r7, #14]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00c      	beq.n	800b886 <USBD_StdEPReq+0x11e>
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b80      	cmp	r3, #128	@ 0x80
 800b870:	d009      	beq.n	800b886 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f001 f854 	bl	800c924 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b87c:	2180      	movs	r1, #128	@ 0x80
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 f850 	bl	800c924 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b884:	e01c      	b.n	800b8c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fbe1 	bl	800c050 <USBD_CtlError>
              break;
 800b88e:	e017      	b.n	800b8c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	885b      	ldrh	r3, [r3, #2]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d112      	bne.n	800b8be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 f85b 	bl	800c962 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fc97 	bl	800c1e0 <USBD_CtlSendStatus>
              }
              break;
 800b8b2:	e004      	b.n	800b8be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fbca 	bl	800c050 <USBD_CtlError>
              break;
 800b8bc:	e000      	b.n	800b8c0 <USBD_StdEPReq+0x158>
              break;
 800b8be:	bf00      	nop
          }
          break;
 800b8c0:	e0aa      	b.n	800ba18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d002      	beq.n	800b8d2 <USBD_StdEPReq+0x16a>
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d032      	beq.n	800b936 <USBD_StdEPReq+0x1ce>
 800b8d0:	e097      	b.n	800ba02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <USBD_StdEPReq+0x180>
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b80      	cmp	r3, #128	@ 0x80
 800b8dc:	d004      	beq.n	800b8e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fbb5 	bl	800c050 <USBD_CtlError>
                break;
 800b8e6:	e091      	b.n	800ba0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	da0b      	bge.n	800b908 <USBD_StdEPReq+0x1a0>
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	3310      	adds	r3, #16
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4413      	add	r3, r2
 800b904:	3304      	adds	r3, #4
 800b906:	e00b      	b.n	800b920 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	4413      	add	r3, r2
 800b91e:	3304      	adds	r3, #4
 800b920:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2202      	movs	r2, #2
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fbf8 	bl	800c124 <USBD_CtlSendData>
              break;
 800b934:	e06a      	b.n	800ba0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da11      	bge.n	800b962 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	f003 020f 	and.w	r2, r3, #15
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	440b      	add	r3, r1
 800b950:	3318      	adds	r3, #24
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d117      	bne.n	800b988 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fb78 	bl	800c050 <USBD_CtlError>
                  break;
 800b960:	e054      	b.n	800ba0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	f003 020f 	and.w	r2, r3, #15
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	440b      	add	r3, r1
 800b974:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d104      	bne.n	800b988 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fb65 	bl	800c050 <USBD_CtlError>
                  break;
 800b986:	e041      	b.n	800ba0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	da0b      	bge.n	800b9a8 <USBD_StdEPReq+0x240>
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	3310      	adds	r3, #16
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	e00b      	b.n	800b9c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	3304      	adds	r3, #4
 800b9c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <USBD_StdEPReq+0x266>
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	2b80      	cmp	r3, #128	@ 0x80
 800b9cc:	d103      	bne.n	800b9d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	e00e      	b.n	800b9f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 ffe0 	bl	800c9a0 <USBD_LL_IsStallEP>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e002      	b.n	800b9f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fb92 	bl	800c124 <USBD_CtlSendData>
              break;
 800ba00:	e004      	b.n	800ba0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fb23 	bl	800c050 <USBD_CtlError>
              break;
 800ba0a:	bf00      	nop
          }
          break;
 800ba0c:	e004      	b.n	800ba18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fb1d 	bl	800c050 <USBD_CtlError>
          break;
 800ba16:	bf00      	nop
      }
      break;
 800ba18:	e004      	b.n	800ba24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fb17 	bl	800c050 <USBD_CtlError>
      break;
 800ba22:	bf00      	nop
  }

  return ret;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	885b      	ldrh	r3, [r3, #2]
 800ba4a:	0a1b      	lsrs	r3, r3, #8
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	2b06      	cmp	r3, #6
 800ba52:	f200 8128 	bhi.w	800bca6 <USBD_GetDescriptor+0x276>
 800ba56:	a201      	add	r2, pc, #4	@ (adr r2, 800ba5c <USBD_GetDescriptor+0x2c>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba79 	.word	0x0800ba79
 800ba60:	0800ba91 	.word	0x0800ba91
 800ba64:	0800bad1 	.word	0x0800bad1
 800ba68:	0800bca7 	.word	0x0800bca7
 800ba6c:	0800bca7 	.word	0x0800bca7
 800ba70:	0800bc47 	.word	0x0800bc47
 800ba74:	0800bc73 	.word	0x0800bc73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	7c12      	ldrb	r2, [r2, #16]
 800ba84:	f107 0108 	add.w	r1, r7, #8
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4798      	blx	r3
 800ba8c:	60f8      	str	r0, [r7, #12]
      break;
 800ba8e:	e112      	b.n	800bcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	7c1b      	ldrb	r3, [r3, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10d      	bne.n	800bab4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa0:	f107 0208 	add.w	r2, r7, #8
 800baa4:	4610      	mov	r0, r2
 800baa6:	4798      	blx	r3
 800baa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3301      	adds	r3, #1
 800baae:	2202      	movs	r2, #2
 800bab0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bab2:	e100      	b.n	800bcb6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babc:	f107 0208 	add.w	r2, r7, #8
 800bac0:	4610      	mov	r0, r2
 800bac2:	4798      	blx	r3
 800bac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	2202      	movs	r2, #2
 800bacc:	701a      	strb	r2, [r3, #0]
      break;
 800bace:	e0f2      	b.n	800bcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	885b      	ldrh	r3, [r3, #2]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b05      	cmp	r3, #5
 800bad8:	f200 80ac 	bhi.w	800bc34 <USBD_GetDescriptor+0x204>
 800badc:	a201      	add	r2, pc, #4	@ (adr r2, 800bae4 <USBD_GetDescriptor+0xb4>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800bafd 	.word	0x0800bafd
 800bae8:	0800bb31 	.word	0x0800bb31
 800baec:	0800bb65 	.word	0x0800bb65
 800baf0:	0800bb99 	.word	0x0800bb99
 800baf4:	0800bbcd 	.word	0x0800bbcd
 800baf8:	0800bc01 	.word	0x0800bc01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00b      	beq.n	800bb20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	7c12      	ldrb	r2, [r2, #16]
 800bb14:	f107 0108 	add.w	r1, r7, #8
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4798      	blx	r3
 800bb1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb1e:	e091      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fa94 	bl	800c050 <USBD_CtlError>
            err++;
 800bb28:	7afb      	ldrb	r3, [r7, #11]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb2e:	e089      	b.n	800bc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00b      	beq.n	800bb54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	7c12      	ldrb	r2, [r2, #16]
 800bb48:	f107 0108 	add.w	r1, r7, #8
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	4798      	blx	r3
 800bb50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb52:	e077      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fa7a 	bl	800c050 <USBD_CtlError>
            err++;
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	72fb      	strb	r3, [r7, #11]
          break;
 800bb62:	e06f      	b.n	800bc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	7c12      	ldrb	r2, [r2, #16]
 800bb7c:	f107 0108 	add.w	r1, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb86:	e05d      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fa60 	bl	800c050 <USBD_CtlError>
            err++;
 800bb90:	7afb      	ldrb	r3, [r7, #11]
 800bb92:	3301      	adds	r3, #1
 800bb94:	72fb      	strb	r3, [r7, #11]
          break;
 800bb96:	e055      	b.n	800bc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00b      	beq.n	800bbbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	7c12      	ldrb	r2, [r2, #16]
 800bbb0:	f107 0108 	add.w	r1, r7, #8
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbba:	e043      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa46 	bl	800c050 <USBD_CtlError>
            err++;
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbca:	e03b      	b.n	800bc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	7c12      	ldrb	r2, [r2, #16]
 800bbe4:	f107 0108 	add.w	r1, r7, #8
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3
 800bbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbee:	e029      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fa2c 	bl	800c050 <USBD_CtlError>
            err++;
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfe:	e021      	b.n	800bc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	f107 0108 	add.w	r1, r7, #8
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc22:	e00f      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fa12 	bl	800c050 <USBD_CtlError>
            err++;
 800bc2c:	7afb      	ldrb	r3, [r7, #11]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	72fb      	strb	r3, [r7, #11]
          break;
 800bc32:	e007      	b.n	800bc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fa0a 	bl	800c050 <USBD_CtlError>
          err++;
 800bc3c:	7afb      	ldrb	r3, [r7, #11]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bc42:	e038      	b.n	800bcb6 <USBD_GetDescriptor+0x286>
 800bc44:	e037      	b.n	800bcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7c1b      	ldrb	r3, [r3, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d109      	bne.n	800bc62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc56:	f107 0208 	add.w	r2, r7, #8
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	4798      	blx	r3
 800bc5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc60:	e029      	b.n	800bcb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f9f3 	bl	800c050 <USBD_CtlError>
        err++;
 800bc6a:	7afb      	ldrb	r3, [r7, #11]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	72fb      	strb	r3, [r7, #11]
      break;
 800bc70:	e021      	b.n	800bcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7c1b      	ldrb	r3, [r3, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10d      	bne.n	800bc96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc82:	f107 0208 	add.w	r2, r7, #8
 800bc86:	4610      	mov	r0, r2
 800bc88:	4798      	blx	r3
 800bc8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	2207      	movs	r2, #7
 800bc92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc94:	e00f      	b.n	800bcb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc96:	6839      	ldr	r1, [r7, #0]
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 f9d9 	bl	800c050 <USBD_CtlError>
        err++;
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	3301      	adds	r3, #1
 800bca2:	72fb      	strb	r3, [r7, #11]
      break;
 800bca4:	e007      	b.n	800bcb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f9d1 	bl	800c050 <USBD_CtlError>
      err++;
 800bcae:	7afb      	ldrb	r3, [r7, #11]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	72fb      	strb	r3, [r7, #11]
      break;
 800bcb4:	bf00      	nop
  }

  if (err != 0U)
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d11c      	bne.n	800bcf6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bcbc:	893b      	ldrh	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d011      	beq.n	800bce6 <USBD_GetDescriptor+0x2b6>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	88db      	ldrh	r3, [r3, #6]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	88da      	ldrh	r2, [r3, #6]
 800bcce:	893b      	ldrh	r3, [r7, #8]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	bf28      	it	cs
 800bcd4:	4613      	movcs	r3, r2
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bcda:	893b      	ldrh	r3, [r7, #8]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	68f9      	ldr	r1, [r7, #12]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fa1f 	bl	800c124 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	88db      	ldrh	r3, [r3, #6]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa76 	bl	800c1e0 <USBD_CtlSendStatus>
 800bcf4:	e000      	b.n	800bcf8 <USBD_GetDescriptor+0x2c8>
    return;
 800bcf6:	bf00      	nop
    }
  }
}
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop

0800bd00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	889b      	ldrh	r3, [r3, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d130      	bne.n	800bd74 <USBD_SetAddress+0x74>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d12c      	bne.n	800bd74 <USBD_SetAddress+0x74>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	885b      	ldrh	r3, [r3, #2]
 800bd1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd20:	d828      	bhi.n	800bd74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	885b      	ldrh	r3, [r3, #2]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d104      	bne.n	800bd42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f988 	bl	800c050 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd40:	e01d      	b.n	800bd7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	7bfa      	ldrb	r2, [r7, #15]
 800bd46:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fe52 	bl	800c9f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fa43 	bl	800c1e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2202      	movs	r2, #2
 800bd64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd68:	e009      	b.n	800bd7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd72:	e004      	b.n	800bd7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f96a 	bl	800c050 <USBD_CtlError>
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	885b      	ldrh	r3, [r3, #2]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	4b41      	ldr	r3, [pc, #260]	@ (800bea0 <USBD_SetConfig+0x118>)
 800bd9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd9c:	4b40      	ldr	r3, [pc, #256]	@ (800bea0 <USBD_SetConfig+0x118>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d904      	bls.n	800bdae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f952 	bl	800c050 <USBD_CtlError>
 800bdac:	e075      	b.n	800be9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d002      	beq.n	800bdbe <USBD_SetConfig+0x36>
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d023      	beq.n	800be04 <USBD_SetConfig+0x7c>
 800bdbc:	e062      	b.n	800be84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bdbe:	4b38      	ldr	r3, [pc, #224]	@ (800bea0 <USBD_SetConfig+0x118>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d01a      	beq.n	800bdfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bdc6:	4b36      	ldr	r3, [pc, #216]	@ (800bea0 <USBD_SetConfig+0x118>)
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bdd8:	4b31      	ldr	r3, [pc, #196]	@ (800bea0 <USBD_SetConfig+0x118>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff f9e7 	bl	800b1b2 <USBD_SetClassConfig>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d104      	bne.n	800bdf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f92f 	bl	800c050 <USBD_CtlError>
            return;
 800bdf2:	e052      	b.n	800be9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f9f3 	bl	800c1e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bdfa:	e04e      	b.n	800be9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f9ef 	bl	800c1e0 <USBD_CtlSendStatus>
        break;
 800be02:	e04a      	b.n	800be9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800be04:	4b26      	ldr	r3, [pc, #152]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d112      	bne.n	800be32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2202      	movs	r2, #2
 800be10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800be14:	4b22      	ldr	r3, [pc, #136]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800be1e:	4b20      	ldr	r3, [pc, #128]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff f9e3 	bl	800b1f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f9d8 	bl	800c1e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be30:	e033      	b.n	800be9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800be32:	4b1b      	ldr	r3, [pc, #108]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d01d      	beq.n	800be7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff f9d1 	bl	800b1f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800be4e:	4b14      	ldr	r3, [pc, #80]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be58:	4b11      	ldr	r3, [pc, #68]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff f9a7 	bl	800b1b2 <USBD_SetClassConfig>
 800be64:	4603      	mov	r3, r0
 800be66:	2b02      	cmp	r3, #2
 800be68:	d104      	bne.n	800be74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f8ef 	bl	800c050 <USBD_CtlError>
            return;
 800be72:	e012      	b.n	800be9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9b3 	bl	800c1e0 <USBD_CtlSendStatus>
        break;
 800be7a:	e00e      	b.n	800be9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f9af 	bl	800c1e0 <USBD_CtlSendStatus>
        break;
 800be82:	e00a      	b.n	800be9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f8e2 	bl	800c050 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800be8c:	4b04      	ldr	r3, [pc, #16]	@ (800bea0 <USBD_SetConfig+0x118>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff f9ac 	bl	800b1f0 <USBD_ClrClassConfig>
        break;
 800be98:	bf00      	nop
    }
  }
}
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20000440 	.word	0x20000440

0800bea4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	88db      	ldrh	r3, [r3, #6]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d004      	beq.n	800bec0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f8c9 	bl	800c050 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bebe:	e022      	b.n	800bf06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	dc02      	bgt.n	800bed0 <USBD_GetConfig+0x2c>
 800beca:	2b00      	cmp	r3, #0
 800becc:	dc03      	bgt.n	800bed6 <USBD_GetConfig+0x32>
 800bece:	e015      	b.n	800befc <USBD_GetConfig+0x58>
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d00b      	beq.n	800beec <USBD_GetConfig+0x48>
 800bed4:	e012      	b.n	800befc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3308      	adds	r3, #8
 800bee0:	2201      	movs	r2, #1
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f91d 	bl	800c124 <USBD_CtlSendData>
        break;
 800beea:	e00c      	b.n	800bf06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3304      	adds	r3, #4
 800bef0:	2201      	movs	r2, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f915 	bl	800c124 <USBD_CtlSendData>
        break;
 800befa:	e004      	b.n	800bf06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f8a6 	bl	800c050 <USBD_CtlError>
        break;
 800bf04:	bf00      	nop
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d81e      	bhi.n	800bf62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	88db      	ldrh	r3, [r3, #6]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d004      	beq.n	800bf36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f88e 	bl	800c050 <USBD_CtlError>
        break;
 800bf34:	e01a      	b.n	800bf6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f043 0202 	orr.w	r2, r3, #2
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	330c      	adds	r3, #12
 800bf56:	2202      	movs	r2, #2
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f8e2 	bl	800c124 <USBD_CtlSendData>
      break;
 800bf60:	e004      	b.n	800bf6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f873 	bl	800c050 <USBD_CtlError>
      break;
 800bf6a:	bf00      	nop
  }
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	885b      	ldrh	r3, [r3, #2]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d106      	bne.n	800bf94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f926 	bl	800c1e0 <USBD_CtlSendStatus>
  }
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfac:	3b01      	subs	r3, #1
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d80b      	bhi.n	800bfca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	885b      	ldrh	r3, [r3, #2]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d10c      	bne.n	800bfd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f90c 	bl	800c1e0 <USBD_CtlSendStatus>
      }
      break;
 800bfc8:	e004      	b.n	800bfd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f83f 	bl	800c050 <USBD_CtlError>
      break;
 800bfd2:	e000      	b.n	800bfd6 <USBD_ClrFeature+0x3a>
      break;
 800bfd4:	bf00      	nop
  }
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	785a      	ldrb	r2, [r3, #1]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	3302      	adds	r3, #2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	3303      	adds	r3, #3
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	021b      	lsls	r3, r3, #8
 800c008:	b29b      	uxth	r3, r3
 800c00a:	4413      	add	r3, r2
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	3304      	adds	r3, #4
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	3305      	adds	r3, #5
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	021b      	lsls	r3, r3, #8
 800c022:	b29b      	uxth	r3, r3
 800c024:	4413      	add	r3, r2
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	3306      	adds	r3, #6
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	3307      	adds	r3, #7
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4413      	add	r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	80da      	strh	r2, [r3, #6]

}
 800c046:	bf00      	nop
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bc80      	pop	{r7}
 800c04e:	4770      	bx	lr

0800c050 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	2180      	movs	r1, #128	@ 0x80
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fc61 	bl	800c924 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c062:	2100      	movs	r1, #0
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fc5d 	bl	800c924 <USBD_LL_StallEP>
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b086      	sub	sp, #24
 800c076:	af00      	add	r7, sp, #0
 800c078:	60f8      	str	r0, [r7, #12]
 800c07a:	60b9      	str	r1, [r7, #8]
 800c07c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d032      	beq.n	800c0ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f834 	bl	800c0f6 <USBD_GetLen>
 800c08e:	4603      	mov	r3, r0
 800c090:	3301      	adds	r3, #1
 800c092:	b29b      	uxth	r3, r3
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	75fa      	strb	r2, [r7, #23]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	7812      	ldrb	r2, [r2, #0]
 800c0ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	75fa      	strb	r2, [r7, #23]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	2203      	movs	r2, #3
 800c0bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c0be:	e012      	b.n	800c0e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	60fa      	str	r2, [r7, #12]
 800c0c6:	7dfa      	ldrb	r2, [r7, #23]
 800c0c8:	1c51      	adds	r1, r2, #1
 800c0ca:	75f9      	strb	r1, [r7, #23]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	440a      	add	r2, r1
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	75fa      	strb	r2, [r7, #23]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e8      	bne.n	800c0c0 <USBD_GetString+0x4e>
    }
  }
}
 800c0ee:	bf00      	nop
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c102:	e005      	b.n	800c110 <USBD_GetLen+0x1a>
  {
    len++;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	3301      	adds	r3, #1
 800c108:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3301      	adds	r3, #1
 800c10e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f5      	bne.n	800c104 <USBD_GetLen+0xe>
  }

  return len;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	bc80      	pop	{r7}
 800c122:	4770      	bx	lr

0800c124 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2202      	movs	r2, #2
 800c136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c140:	88fa      	ldrh	r2, [r7, #6]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c146:	88fb      	ldrh	r3, [r7, #6]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	2100      	movs	r1, #0
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 fc72 	bl	800ca36 <USBD_LL_Transmit>

  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	4613      	mov	r3, r2
 800c168:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c16a:	88fb      	ldrh	r3, [r7, #6]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	2100      	movs	r1, #0
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f000 fc60 	bl	800ca36 <USBD_LL_Transmit>

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	4613      	mov	r3, r2
 800c18c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2203      	movs	r2, #3
 800c192:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c196:	88fa      	ldrh	r2, [r7, #6]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c19e:	88fa      	ldrh	r2, [r7, #6]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1a6:	88fb      	ldrh	r3, [r7, #6]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 fc65 	bl	800ca7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1ca:	88fb      	ldrh	r3, [r7, #6]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 fc53 	bl	800ca7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2204      	movs	r2, #4
 800c1ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fc1d 	bl	800ca36 <USBD_LL_Transmit>

  return USBD_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2205      	movs	r2, #5
 800c212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c216:	2300      	movs	r3, #0
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fc2d 	bl	800ca7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c230:	2200      	movs	r2, #0
 800c232:	4912      	ldr	r1, [pc, #72]	@ (800c27c <MX_USB_DEVICE_Init+0x50>)
 800c234:	4812      	ldr	r0, [pc, #72]	@ (800c280 <MX_USB_DEVICE_Init+0x54>)
 800c236:	f7fe ff62 	bl	800b0fe <USBD_Init>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c240:	f7f7 f998 	bl	8003574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c244:	490f      	ldr	r1, [pc, #60]	@ (800c284 <MX_USB_DEVICE_Init+0x58>)
 800c246:	480e      	ldr	r0, [pc, #56]	@ (800c280 <MX_USB_DEVICE_Init+0x54>)
 800c248:	f7fe ff84 	bl	800b154 <USBD_RegisterClass>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c252:	f7f7 f98f 	bl	8003574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c256:	490c      	ldr	r1, [pc, #48]	@ (800c288 <MX_USB_DEVICE_Init+0x5c>)
 800c258:	4809      	ldr	r0, [pc, #36]	@ (800c280 <MX_USB_DEVICE_Init+0x54>)
 800c25a:	f7fe feb5 	bl	800afc8 <USBD_CDC_RegisterInterface>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c264:	f7f7 f986 	bl	8003574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c268:	4805      	ldr	r0, [pc, #20]	@ (800c280 <MX_USB_DEVICE_Init+0x54>)
 800c26a:	f7fe ff8c 	bl	800b186 <USBD_Start>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c274:	f7f7 f97e 	bl	8003574 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c278:	bf00      	nop
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20000154 	.word	0x20000154
 800c280:	20000444 	.word	0x20000444
 800c284:	20000040 	.word	0x20000040
 800c288:	20000144 	.word	0x20000144

0800c28c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c290:	2200      	movs	r2, #0
 800c292:	4905      	ldr	r1, [pc, #20]	@ (800c2a8 <CDC_Init_FS+0x1c>)
 800c294:	4805      	ldr	r0, [pc, #20]	@ (800c2ac <CDC_Init_FS+0x20>)
 800c296:	f7fe fead 	bl	800aff4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c29a:	4905      	ldr	r1, [pc, #20]	@ (800c2b0 <CDC_Init_FS+0x24>)
 800c29c:	4803      	ldr	r0, [pc, #12]	@ (800c2ac <CDC_Init_FS+0x20>)
 800c29e:	f7fe fec2 	bl	800b026 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c2a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20000af0 	.word	0x20000af0
 800c2ac:	20000444 	.word	0x20000444
 800c2b0:	20000708 	.word	0x20000708

0800c2b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bc80      	pop	{r7}
 800c2c0:	4770      	bx	lr
	...

0800c2c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	6039      	str	r1, [r7, #0]
 800c2ce:	71fb      	strb	r3, [r7, #7]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	2b23      	cmp	r3, #35	@ 0x23
 800c2d8:	d84a      	bhi.n	800c370 <CDC_Control_FS+0xac>
 800c2da:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e0 <CDC_Control_FS+0x1c>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c371 	.word	0x0800c371
 800c2e4:	0800c371 	.word	0x0800c371
 800c2e8:	0800c371 	.word	0x0800c371
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c371 	.word	0x0800c371
 800c2f4:	0800c371 	.word	0x0800c371
 800c2f8:	0800c371 	.word	0x0800c371
 800c2fc:	0800c371 	.word	0x0800c371
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c371 	.word	0x0800c371
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c371 	.word	0x0800c371
 800c310:	0800c371 	.word	0x0800c371
 800c314:	0800c371 	.word	0x0800c371
 800c318:	0800c371 	.word	0x0800c371
 800c31c:	0800c371 	.word	0x0800c371
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c371 	.word	0x0800c371
 800c32c:	0800c371 	.word	0x0800c371
 800c330:	0800c371 	.word	0x0800c371
 800c334:	0800c371 	.word	0x0800c371
 800c338:	0800c371 	.word	0x0800c371
 800c33c:	0800c371 	.word	0x0800c371
 800c340:	0800c371 	.word	0x0800c371
 800c344:	0800c371 	.word	0x0800c371
 800c348:	0800c371 	.word	0x0800c371
 800c34c:	0800c371 	.word	0x0800c371
 800c350:	0800c371 	.word	0x0800c371
 800c354:	0800c371 	.word	0x0800c371
 800c358:	0800c371 	.word	0x0800c371
 800c35c:	0800c371 	.word	0x0800c371
 800c360:	0800c371 	.word	0x0800c371
 800c364:	0800c371 	.word	0x0800c371
 800c368:	0800c371 	.word	0x0800c371
 800c36c:	0800c371 	.word	0x0800c371
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c370:	bf00      	nop
  }

  return (USBD_OK);
 800c372:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c374:	4618      	mov	r0, r3
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	bc80      	pop	{r7}
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop

0800c380 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	480a      	ldr	r0, [pc, #40]	@ (800c3b8 <CDC_Receive_FS+0x38>)
 800c38e:	f7fe fe4a 	bl	800b026 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c392:	4809      	ldr	r0, [pc, #36]	@ (800c3b8 <CDC_Receive_FS+0x38>)
 800c394:	f7fe fe89 	bl	800b0aa <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d006      	beq.n	800c3ae <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4905      	ldr	r1, [pc, #20]	@ (800c3bc <CDC_Receive_FS+0x3c>)
 800c3a8:	4805      	ldr	r0, [pc, #20]	@ (800c3c0 <CDC_Receive_FS+0x40>)
 800c3aa:	f000 fcf9 	bl	800cda0 <memcpy>
  }
  return (USBD_OK);
 800c3ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	20000444 	.word	0x20000444
 800c3bc:	20000708 	.word	0x20000708
 800c3c0:	20000350 	.word	0x20000350

0800c3c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c40c <CDC_Transmit_FS+0x48>)
 800c3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e00b      	b.n	800c402 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c3ea:	887b      	ldrh	r3, [r7, #2]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	4806      	ldr	r0, [pc, #24]	@ (800c40c <CDC_Transmit_FS+0x48>)
 800c3f2:	f7fe fdff 	bl	800aff4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c3f6:	4805      	ldr	r0, [pc, #20]	@ (800c40c <CDC_Transmit_FS+0x48>)
 800c3f8:	f7fe fe28 	bl	800b04c <USBD_CDC_TransmitPacket>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000444 	.word	0x20000444

0800c410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2212      	movs	r2, #18
 800c420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c422:	4b03      	ldr	r3, [pc, #12]	@ (800c430 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	bc80      	pop	{r7}
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	20000170 	.word	0x20000170

0800c434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2204      	movs	r2, #4
 800c444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c446:	4b03      	ldr	r3, [pc, #12]	@ (800c454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	20000184 	.word	0x20000184

0800c458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c464:	79fb      	ldrb	r3, [r7, #7]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	4907      	ldr	r1, [pc, #28]	@ (800c48c <USBD_FS_ProductStrDescriptor+0x34>)
 800c46e:	4808      	ldr	r0, [pc, #32]	@ (800c490 <USBD_FS_ProductStrDescriptor+0x38>)
 800c470:	f7ff fdff 	bl	800c072 <USBD_GetString>
 800c474:	e004      	b.n	800c480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	4904      	ldr	r1, [pc, #16]	@ (800c48c <USBD_FS_ProductStrDescriptor+0x34>)
 800c47a:	4805      	ldr	r0, [pc, #20]	@ (800c490 <USBD_FS_ProductStrDescriptor+0x38>)
 800c47c:	f7ff fdf9 	bl	800c072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c480:	4b02      	ldr	r3, [pc, #8]	@ (800c48c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	20000ed8 	.word	0x20000ed8
 800c490:	0800dde4 	.word	0x0800dde4

0800c494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	6039      	str	r1, [r7, #0]
 800c49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4a0:	683a      	ldr	r2, [r7, #0]
 800c4a2:	4904      	ldr	r1, [pc, #16]	@ (800c4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4a4:	4804      	ldr	r0, [pc, #16]	@ (800c4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4a6:	f7ff fde4 	bl	800c072 <USBD_GetString>
  return USBD_StrDesc;
 800c4aa:	4b02      	ldr	r3, [pc, #8]	@ (800c4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	20000ed8 	.word	0x20000ed8
 800c4b8:	0800ddfc 	.word	0x0800ddfc

0800c4bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	6039      	str	r1, [r7, #0]
 800c4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	221a      	movs	r2, #26
 800c4cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4ce:	f000 f843 	bl	800c558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4d2:	4b02      	ldr	r3, [pc, #8]	@ (800c4dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000188 	.word	0x20000188

0800c4e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d105      	bne.n	800c4fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	4907      	ldr	r1, [pc, #28]	@ (800c514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4f6:	4808      	ldr	r0, [pc, #32]	@ (800c518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4f8:	f7ff fdbb 	bl	800c072 <USBD_GetString>
 800c4fc:	e004      	b.n	800c508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	4904      	ldr	r1, [pc, #16]	@ (800c514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c502:	4805      	ldr	r0, [pc, #20]	@ (800c518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c504:	f7ff fdb5 	bl	800c072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c508:	4b02      	ldr	r3, [pc, #8]	@ (800c514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	20000ed8 	.word	0x20000ed8
 800c518:	0800de10 	.word	0x0800de10

0800c51c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d105      	bne.n	800c53a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	4907      	ldr	r1, [pc, #28]	@ (800c550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c532:	4808      	ldr	r0, [pc, #32]	@ (800c554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c534:	f7ff fd9d 	bl	800c072 <USBD_GetString>
 800c538:	e004      	b.n	800c544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	4904      	ldr	r1, [pc, #16]	@ (800c550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c53e:	4805      	ldr	r0, [pc, #20]	@ (800c554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c540:	f7ff fd97 	bl	800c072 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c544:	4b02      	ldr	r3, [pc, #8]	@ (800c550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20000ed8 	.word	0x20000ed8
 800c554:	0800de1c 	.word	0x0800de1c

0800c558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c55e:	4b0f      	ldr	r3, [pc, #60]	@ (800c59c <Get_SerialNum+0x44>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c564:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a0 <Get_SerialNum+0x48>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c56a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a4 <Get_SerialNum+0x4c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c57e:	2208      	movs	r2, #8
 800c580:	4909      	ldr	r1, [pc, #36]	@ (800c5a8 <Get_SerialNum+0x50>)
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 f814 	bl	800c5b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c588:	2204      	movs	r2, #4
 800c58a:	4908      	ldr	r1, [pc, #32]	@ (800c5ac <Get_SerialNum+0x54>)
 800c58c:	68b8      	ldr	r0, [r7, #8]
 800c58e:	f000 f80f 	bl	800c5b0 <IntToUnicode>
  }
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	1ffff7e8 	.word	0x1ffff7e8
 800c5a0:	1ffff7ec 	.word	0x1ffff7ec
 800c5a4:	1ffff7f0 	.word	0x1ffff7f0
 800c5a8:	2000018a 	.word	0x2000018a
 800c5ac:	2000019a 	.word	0x2000019a

0800c5b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	75fb      	strb	r3, [r7, #23]
 800c5c6:	e027      	b.n	800c618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	0f1b      	lsrs	r3, r3, #28
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d80b      	bhi.n	800c5e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	0f1b      	lsrs	r3, r3, #28
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	440b      	add	r3, r1
 800c5e0:	3230      	adds	r2, #48	@ 0x30
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	e00a      	b.n	800c5fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	0f1b      	lsrs	r3, r3, #28
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	440b      	add	r3, r1
 800c5f8:	3237      	adds	r2, #55	@ 0x37
 800c5fa:	b2d2      	uxtb	r2, r2
 800c5fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	011b      	lsls	r3, r3, #4
 800c602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	3301      	adds	r3, #1
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	3301      	adds	r3, #1
 800c616:	75fb      	strb	r3, [r7, #23]
 800c618:	7dfa      	ldrb	r2, [r7, #23]
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d3d3      	bcc.n	800c5c8 <IntToUnicode+0x18>
  }
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	371c      	adds	r7, #28
 800c626:	46bd      	mov	sp, r7
 800c628:	bc80      	pop	{r7}
 800c62a:	4770      	bx	lr

0800c62c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a0d      	ldr	r2, [pc, #52]	@ (800c670 <HAL_PCD_MspInit+0x44>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d113      	bne.n	800c666 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c63e:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <HAL_PCD_MspInit+0x48>)
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	4a0c      	ldr	r2, [pc, #48]	@ (800c674 <HAL_PCD_MspInit+0x48>)
 800c644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c648:	61d3      	str	r3, [r2, #28]
 800c64a:	4b0a      	ldr	r3, [pc, #40]	@ (800c674 <HAL_PCD_MspInit+0x48>)
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c656:	2200      	movs	r2, #0
 800c658:	2100      	movs	r1, #0
 800c65a:	2014      	movs	r0, #20
 800c65c:	f7f7 fd6f 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c660:	2014      	movs	r0, #20
 800c662:	f7f7 fd88 	bl	8004176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c666:	bf00      	nop
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	40005c00 	.word	0x40005c00
 800c674:	40021000 	.word	0x40021000

0800c678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f7fe fdc1 	bl	800b216 <USBD_LL_SetupStage>
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	00db      	lsls	r3, r3, #3
 800c6ba:	440b      	add	r3, r1
 800c6bc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	f7fe fdf3 	bl	800b2b0 <USBD_LL_DataOutStage>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c6e4:	78fa      	ldrb	r2, [r7, #3]
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	440b      	add	r3, r1
 800c6f2:	333c      	adds	r3, #60	@ 0x3c
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	78fb      	ldrb	r3, [r7, #3]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	f7fe fe4a 	bl	800b392 <USBD_LL_DataInStage>
}
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe ff5a 	bl	800b5ce <USBD_LL_SOF>
}
 800c71a:	bf00      	nop
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c72a:	2301      	movs	r3, #1
 800c72c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	2b02      	cmp	r3, #2
 800c734:	d001      	beq.n	800c73a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c736:	f7f6 ff1d 	bl	8003574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c740:	7bfa      	ldrb	r2, [r7, #15]
 800c742:	4611      	mov	r1, r2
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe ff0a 	bl	800b55e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe fec3 	bl	800b4dc <USBD_LL_Reset>
}
 800c756:	bf00      	nop
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
	...

0800c760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe ff04 	bl	800b57c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c77c:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <HAL_PCD_SuspendCallback+0x30>)
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	4a03      	ldr	r2, [pc, #12]	@ (800c790 <HAL_PCD_SuspendCallback+0x30>)
 800c782:	f043 0306 	orr.w	r3, r3, #6
 800c786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	e000ed00 	.word	0xe000ed00

0800c794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe fefe 	bl	800b5a4 <USBD_LL_Resume>
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c7b8:	4a28      	ldr	r2, [pc, #160]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a26      	ldr	r2, [pc, #152]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7c4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c7c8:	4b24      	ldr	r3, [pc, #144]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7ca:	4a25      	ldr	r2, [pc, #148]	@ (800c860 <USBD_LL_Init+0xb0>)
 800c7cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c7ce:	4b23      	ldr	r3, [pc, #140]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7d0:	2208      	movs	r2, #8
 800c7d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c7d4:	4b21      	ldr	r3, [pc, #132]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c7da:	4b20      	ldr	r3, [pc, #128]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c7e0:	4b1e      	ldr	r3, [pc, #120]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c7e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c7ec:	481b      	ldr	r0, [pc, #108]	@ (800c85c <USBD_LL_Init+0xac>)
 800c7ee:	f7f8 fcfd 	bl	80051ec <HAL_PCD_Init>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c7f8:	f7f6 febc 	bl	8003574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c802:	2318      	movs	r3, #24
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	f7fa f83c 	bl	8006884 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c812:	2358      	movs	r3, #88	@ 0x58
 800c814:	2200      	movs	r2, #0
 800c816:	2180      	movs	r1, #128	@ 0x80
 800c818:	f7fa f834 	bl	8006884 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c822:	23c0      	movs	r3, #192	@ 0xc0
 800c824:	2200      	movs	r2, #0
 800c826:	2181      	movs	r1, #129	@ 0x81
 800c828:	f7fa f82c 	bl	8006884 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c832:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c836:	2200      	movs	r2, #0
 800c838:	2101      	movs	r1, #1
 800c83a:	f7fa f823 	bl	8006884 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c848:	2200      	movs	r2, #0
 800c84a:	2182      	movs	r1, #130	@ 0x82
 800c84c:	f7fa f81a 	bl	8006884 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	200010d8 	.word	0x200010d8
 800c860:	40005c00 	.word	0x40005c00

0800c864 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f8 fdc1 	bl	8005402 <HAL_PCD_Start>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f94e 	bl	800cb28 <USBD_Get_USB_Status>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c890:	7bbb      	ldrb	r3, [r7, #14]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	70fb      	strb	r3, [r7, #3]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70bb      	strb	r3, [r7, #2]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c8c2:	78bb      	ldrb	r3, [r7, #2]
 800c8c4:	883a      	ldrh	r2, [r7, #0]
 800c8c6:	78f9      	ldrb	r1, [r7, #3]
 800c8c8:	f7f8 ff39 	bl	800573e <HAL_PCD_EP_Open>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f928 	bl	800cb28 <USBD_Get_USB_Status>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b084      	sub	sp, #16
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c900:	78fa      	ldrb	r2, [r7, #3]
 800c902:	4611      	mov	r1, r2
 800c904:	4618      	mov	r0, r3
 800c906:	f7f8 ff80 	bl	800580a <HAL_PCD_EP_Close>
 800c90a:	4603      	mov	r3, r0
 800c90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f909 	bl	800cb28 <USBD_Get_USB_Status>
 800c916:	4603      	mov	r3, r0
 800c918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	4611      	mov	r1, r2
 800c942:	4618      	mov	r0, r3
 800c944:	f7f9 f840 	bl	80059c8 <HAL_PCD_EP_SetStall>
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 f8ea 	bl	800cb28 <USBD_Get_USB_Status>
 800c954:	4603      	mov	r3, r0
 800c956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c958:	7bbb      	ldrb	r3, [r7, #14]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b084      	sub	sp, #16
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f7f9 f881 	bl	8005a88 <HAL_PCD_EP_ClrStall>
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f8cb 	bl	800cb28 <USBD_Get_USB_Status>
 800c992:	4603      	mov	r3, r0
 800c994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c996:	7bbb      	ldrb	r3, [r7, #14]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da0c      	bge.n	800c9d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9bc:	78fb      	ldrb	r3, [r7, #3]
 800c9be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c2:	68f9      	ldr	r1, [r7, #12]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	440b      	add	r3, r1
 800c9d0:	3302      	adds	r3, #2
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	e00b      	b.n	800c9ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9dc:	68f9      	ldr	r1, [r7, #12]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	440b      	add	r3, r1
 800c9e8:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800c9ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bc80      	pop	{r7}
 800c9f6:	4770      	bx	lr

0800c9f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca12:	78fa      	ldrb	r2, [r7, #3]
 800ca14:	4611      	mov	r1, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f8 fe6c 	bl	80056f4 <HAL_PCD_SetAddress>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 f880 	bl	800cb28 <USBD_Get_USB_Status>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b086      	sub	sp, #24
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	60f8      	str	r0, [r7, #12]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	461a      	mov	r2, r3
 800ca42:	460b      	mov	r3, r1
 800ca44:	72fb      	strb	r3, [r7, #11]
 800ca46:	4613      	mov	r3, r2
 800ca48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ca58:	893b      	ldrh	r3, [r7, #8]
 800ca5a:	7af9      	ldrb	r1, [r7, #11]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	f7f8 ff70 	bl	8005942 <HAL_PCD_EP_Transmit>
 800ca62:	4603      	mov	r3, r0
 800ca64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f85d 	bl	800cb28 <USBD_Get_USB_Status>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	461a      	mov	r2, r3
 800ca88:	460b      	mov	r3, r1
 800ca8a:	72fb      	strb	r3, [r7, #11]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ca9e:	893b      	ldrh	r3, [r7, #8]
 800caa0:	7af9      	ldrb	r1, [r7, #11]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	f7f8 fef9 	bl	800589a <HAL_PCD_EP_Receive>
 800caa8:	4603      	mov	r3, r0
 800caaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 f83a 	bl	800cb28 <USBD_Get_USB_Status>
 800cab4:	4603      	mov	r3, r0
 800cab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cab8:	7dbb      	ldrb	r3, [r7, #22]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b082      	sub	sp, #8
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	460b      	mov	r3, r1
 800cacc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cad4:	78fa      	ldrb	r2, [r7, #3]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f8 ff1b 	bl	8005914 <HAL_PCD_EP_GetRxCount>
 800cade:	4603      	mov	r3, r0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800caf0:	4b02      	ldr	r3, [pc, #8]	@ (800cafc <USBD_static_malloc+0x14>)
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bc80      	pop	{r7}
 800cafa:	4770      	bx	lr
 800cafc:	200013c4 	.word	0x200013c4

0800cb00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]

}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bc80      	pop	{r7}
 800cb10:	4770      	bx	lr

0800cb12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb12:	b480      	push	{r7}
 800cb14:	b083      	sub	sp, #12
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bc80      	pop	{r7}
 800cb26:	4770      	bx	lr

0800cb28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d817      	bhi.n	800cb6c <USBD_Get_USB_Status+0x44>
 800cb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb44 <USBD_Get_USB_Status+0x1c>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb5b 	.word	0x0800cb5b
 800cb4c:	0800cb61 	.word	0x0800cb61
 800cb50:	0800cb67 	.word	0x0800cb67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e00b      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e008      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb60:	2301      	movs	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	e005      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb66:	2302      	movs	r3, #2
 800cb68:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6a:	e002      	b.n	800cb72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	bf00      	nop
  }
  return usb_status;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bc80      	pop	{r7}
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop

0800cb80 <atoi>:
 800cb80:	220a      	movs	r2, #10
 800cb82:	2100      	movs	r1, #0
 800cb84:	f000 b87a 	b.w	800cc7c <strtol>

0800cb88 <_strtol_l.constprop.0>:
 800cb88:	2b24      	cmp	r3, #36	@ 0x24
 800cb8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8e:	4686      	mov	lr, r0
 800cb90:	4690      	mov	r8, r2
 800cb92:	d801      	bhi.n	800cb98 <_strtol_l.constprop.0+0x10>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d106      	bne.n	800cba6 <_strtol_l.constprop.0+0x1e>
 800cb98:	f000 f8d6 	bl	800cd48 <__errno>
 800cb9c:	2316      	movs	r3, #22
 800cb9e:	6003      	str	r3, [r0, #0]
 800cba0:	2000      	movs	r0, #0
 800cba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba6:	460d      	mov	r5, r1
 800cba8:	4833      	ldr	r0, [pc, #204]	@ (800cc78 <_strtol_l.constprop.0+0xf0>)
 800cbaa:	462a      	mov	r2, r5
 800cbac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbb0:	5d06      	ldrb	r6, [r0, r4]
 800cbb2:	f016 0608 	ands.w	r6, r6, #8
 800cbb6:	d1f8      	bne.n	800cbaa <_strtol_l.constprop.0+0x22>
 800cbb8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbba:	d12d      	bne.n	800cc18 <_strtol_l.constprop.0+0x90>
 800cbbc:	2601      	movs	r6, #1
 800cbbe:	782c      	ldrb	r4, [r5, #0]
 800cbc0:	1c95      	adds	r5, r2, #2
 800cbc2:	f033 0210 	bics.w	r2, r3, #16
 800cbc6:	d109      	bne.n	800cbdc <_strtol_l.constprop.0+0x54>
 800cbc8:	2c30      	cmp	r4, #48	@ 0x30
 800cbca:	d12a      	bne.n	800cc22 <_strtol_l.constprop.0+0x9a>
 800cbcc:	782a      	ldrb	r2, [r5, #0]
 800cbce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbd2:	2a58      	cmp	r2, #88	@ 0x58
 800cbd4:	d125      	bne.n	800cc22 <_strtol_l.constprop.0+0x9a>
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	786c      	ldrb	r4, [r5, #1]
 800cbda:	3502      	adds	r5, #2
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbe2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cbe6:	fbbc f9f3 	udiv	r9, ip, r3
 800cbea:	4610      	mov	r0, r2
 800cbec:	fb03 ca19 	mls	sl, r3, r9, ip
 800cbf0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cbf4:	2f09      	cmp	r7, #9
 800cbf6:	d81b      	bhi.n	800cc30 <_strtol_l.constprop.0+0xa8>
 800cbf8:	463c      	mov	r4, r7
 800cbfa:	42a3      	cmp	r3, r4
 800cbfc:	dd27      	ble.n	800cc4e <_strtol_l.constprop.0+0xc6>
 800cbfe:	1c57      	adds	r7, r2, #1
 800cc00:	d007      	beq.n	800cc12 <_strtol_l.constprop.0+0x8a>
 800cc02:	4581      	cmp	r9, r0
 800cc04:	d320      	bcc.n	800cc48 <_strtol_l.constprop.0+0xc0>
 800cc06:	d101      	bne.n	800cc0c <_strtol_l.constprop.0+0x84>
 800cc08:	45a2      	cmp	sl, r4
 800cc0a:	db1d      	blt.n	800cc48 <_strtol_l.constprop.0+0xc0>
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	fb00 4003 	mla	r0, r0, r3, r4
 800cc12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc16:	e7eb      	b.n	800cbf0 <_strtol_l.constprop.0+0x68>
 800cc18:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc1a:	bf04      	itt	eq
 800cc1c:	782c      	ldrbeq	r4, [r5, #0]
 800cc1e:	1c95      	addeq	r5, r2, #2
 800cc20:	e7cf      	b.n	800cbc2 <_strtol_l.constprop.0+0x3a>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1da      	bne.n	800cbdc <_strtol_l.constprop.0+0x54>
 800cc26:	2c30      	cmp	r4, #48	@ 0x30
 800cc28:	bf0c      	ite	eq
 800cc2a:	2308      	moveq	r3, #8
 800cc2c:	230a      	movne	r3, #10
 800cc2e:	e7d5      	b.n	800cbdc <_strtol_l.constprop.0+0x54>
 800cc30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc34:	2f19      	cmp	r7, #25
 800cc36:	d801      	bhi.n	800cc3c <_strtol_l.constprop.0+0xb4>
 800cc38:	3c37      	subs	r4, #55	@ 0x37
 800cc3a:	e7de      	b.n	800cbfa <_strtol_l.constprop.0+0x72>
 800cc3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc40:	2f19      	cmp	r7, #25
 800cc42:	d804      	bhi.n	800cc4e <_strtol_l.constprop.0+0xc6>
 800cc44:	3c57      	subs	r4, #87	@ 0x57
 800cc46:	e7d8      	b.n	800cbfa <_strtol_l.constprop.0+0x72>
 800cc48:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4c:	e7e1      	b.n	800cc12 <_strtol_l.constprop.0+0x8a>
 800cc4e:	1c53      	adds	r3, r2, #1
 800cc50:	d108      	bne.n	800cc64 <_strtol_l.constprop.0+0xdc>
 800cc52:	2322      	movs	r3, #34	@ 0x22
 800cc54:	4660      	mov	r0, ip
 800cc56:	f8ce 3000 	str.w	r3, [lr]
 800cc5a:	f1b8 0f00 	cmp.w	r8, #0
 800cc5e:	d0a0      	beq.n	800cba2 <_strtol_l.constprop.0+0x1a>
 800cc60:	1e69      	subs	r1, r5, #1
 800cc62:	e006      	b.n	800cc72 <_strtol_l.constprop.0+0xea>
 800cc64:	b106      	cbz	r6, 800cc68 <_strtol_l.constprop.0+0xe0>
 800cc66:	4240      	negs	r0, r0
 800cc68:	f1b8 0f00 	cmp.w	r8, #0
 800cc6c:	d099      	beq.n	800cba2 <_strtol_l.constprop.0+0x1a>
 800cc6e:	2a00      	cmp	r2, #0
 800cc70:	d1f6      	bne.n	800cc60 <_strtol_l.constprop.0+0xd8>
 800cc72:	f8c8 1000 	str.w	r1, [r8]
 800cc76:	e794      	b.n	800cba2 <_strtol_l.constprop.0+0x1a>
 800cc78:	0800de55 	.word	0x0800de55

0800cc7c <strtol>:
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	460a      	mov	r2, r1
 800cc80:	4601      	mov	r1, r0
 800cc82:	4802      	ldr	r0, [pc, #8]	@ (800cc8c <strtol+0x10>)
 800cc84:	6800      	ldr	r0, [r0, #0]
 800cc86:	f7ff bf7f 	b.w	800cb88 <_strtol_l.constprop.0>
 800cc8a:	bf00      	nop
 800cc8c:	200001a4 	.word	0x200001a4

0800cc90 <sniprintf>:
 800cc90:	b40c      	push	{r2, r3}
 800cc92:	b530      	push	{r4, r5, lr}
 800cc94:	4b17      	ldr	r3, [pc, #92]	@ (800ccf4 <sniprintf+0x64>)
 800cc96:	1e0c      	subs	r4, r1, #0
 800cc98:	681d      	ldr	r5, [r3, #0]
 800cc9a:	b09d      	sub	sp, #116	@ 0x74
 800cc9c:	da08      	bge.n	800ccb0 <sniprintf+0x20>
 800cc9e:	238b      	movs	r3, #139	@ 0x8b
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	b01d      	add	sp, #116	@ 0x74
 800cca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccac:	b002      	add	sp, #8
 800ccae:	4770      	bx	lr
 800ccb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ccb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccb8:	bf0c      	ite	eq
 800ccba:	4623      	moveq	r3, r4
 800ccbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ccc0:	9304      	str	r3, [sp, #16]
 800ccc2:	9307      	str	r3, [sp, #28]
 800ccc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccc8:	9002      	str	r0, [sp, #8]
 800ccca:	9006      	str	r0, [sp, #24]
 800cccc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	ab21      	add	r3, sp, #132	@ 0x84
 800ccd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ccd6:	a902      	add	r1, sp, #8
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	f000 f9c1 	bl	800d060 <_svfiprintf_r>
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	bfbc      	itt	lt
 800cce2:	238b      	movlt	r3, #139	@ 0x8b
 800cce4:	602b      	strlt	r3, [r5, #0]
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	d0dd      	beq.n	800cca6 <sniprintf+0x16>
 800ccea:	2200      	movs	r2, #0
 800ccec:	9b02      	ldr	r3, [sp, #8]
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	e7d9      	b.n	800cca6 <sniprintf+0x16>
 800ccf2:	bf00      	nop
 800ccf4:	200001a4 	.word	0x200001a4

0800ccf8 <siprintf>:
 800ccf8:	b40e      	push	{r1, r2, r3}
 800ccfa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ccfe:	b500      	push	{lr}
 800cd00:	b09c      	sub	sp, #112	@ 0x70
 800cd02:	ab1d      	add	r3, sp, #116	@ 0x74
 800cd04:	9002      	str	r0, [sp, #8]
 800cd06:	9006      	str	r0, [sp, #24]
 800cd08:	9107      	str	r1, [sp, #28]
 800cd0a:	9104      	str	r1, [sp, #16]
 800cd0c:	4808      	ldr	r0, [pc, #32]	@ (800cd30 <siprintf+0x38>)
 800cd0e:	4909      	ldr	r1, [pc, #36]	@ (800cd34 <siprintf+0x3c>)
 800cd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd14:	9105      	str	r1, [sp, #20]
 800cd16:	6800      	ldr	r0, [r0, #0]
 800cd18:	a902      	add	r1, sp, #8
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	f000 f9a0 	bl	800d060 <_svfiprintf_r>
 800cd20:	2200      	movs	r2, #0
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	701a      	strb	r2, [r3, #0]
 800cd26:	b01c      	add	sp, #112	@ 0x70
 800cd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd2c:	b003      	add	sp, #12
 800cd2e:	4770      	bx	lr
 800cd30:	200001a4 	.word	0x200001a4
 800cd34:	ffff0208 	.word	0xffff0208

0800cd38 <memset>:
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4402      	add	r2, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <__errno>:
 800cd48:	4b01      	ldr	r3, [pc, #4]	@ (800cd50 <__errno+0x8>)
 800cd4a:	6818      	ldr	r0, [r3, #0]
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	200001a4 	.word	0x200001a4

0800cd54 <__libc_init_array>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	2600      	movs	r6, #0
 800cd58:	4d0c      	ldr	r5, [pc, #48]	@ (800cd8c <__libc_init_array+0x38>)
 800cd5a:	4c0d      	ldr	r4, [pc, #52]	@ (800cd90 <__libc_init_array+0x3c>)
 800cd5c:	1b64      	subs	r4, r4, r5
 800cd5e:	10a4      	asrs	r4, r4, #2
 800cd60:	42a6      	cmp	r6, r4
 800cd62:	d109      	bne.n	800cd78 <__libc_init_array+0x24>
 800cd64:	f000 fc78 	bl	800d658 <_init>
 800cd68:	2600      	movs	r6, #0
 800cd6a:	4d0a      	ldr	r5, [pc, #40]	@ (800cd94 <__libc_init_array+0x40>)
 800cd6c:	4c0a      	ldr	r4, [pc, #40]	@ (800cd98 <__libc_init_array+0x44>)
 800cd6e:	1b64      	subs	r4, r4, r5
 800cd70:	10a4      	asrs	r4, r4, #2
 800cd72:	42a6      	cmp	r6, r4
 800cd74:	d105      	bne.n	800cd82 <__libc_init_array+0x2e>
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd7c:	4798      	blx	r3
 800cd7e:	3601      	adds	r6, #1
 800cd80:	e7ee      	b.n	800cd60 <__libc_init_array+0xc>
 800cd82:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd86:	4798      	blx	r3
 800cd88:	3601      	adds	r6, #1
 800cd8a:	e7f2      	b.n	800cd72 <__libc_init_array+0x1e>
 800cd8c:	0800df90 	.word	0x0800df90
 800cd90:	0800df90 	.word	0x0800df90
 800cd94:	0800df90 	.word	0x0800df90
 800cd98:	0800df94 	.word	0x0800df94

0800cd9c <__retarget_lock_acquire_recursive>:
 800cd9c:	4770      	bx	lr

0800cd9e <__retarget_lock_release_recursive>:
 800cd9e:	4770      	bx	lr

0800cda0 <memcpy>:
 800cda0:	440a      	add	r2, r1
 800cda2:	4291      	cmp	r1, r2
 800cda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cda8:	d100      	bne.n	800cdac <memcpy+0xc>
 800cdaa:	4770      	bx	lr
 800cdac:	b510      	push	{r4, lr}
 800cdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb2:	4291      	cmp	r1, r2
 800cdb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdb8:	d1f9      	bne.n	800cdae <memcpy+0xe>
 800cdba:	bd10      	pop	{r4, pc}

0800cdbc <_free_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	2900      	cmp	r1, #0
 800cdc2:	d040      	beq.n	800ce46 <_free_r+0x8a>
 800cdc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc8:	1f0c      	subs	r4, r1, #4
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	bfb8      	it	lt
 800cdce:	18e4      	addlt	r4, r4, r3
 800cdd0:	f000 f8de 	bl	800cf90 <__malloc_lock>
 800cdd4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce48 <_free_r+0x8c>)
 800cdd6:	6813      	ldr	r3, [r2, #0]
 800cdd8:	b933      	cbnz	r3, 800cde8 <_free_r+0x2c>
 800cdda:	6063      	str	r3, [r4, #4]
 800cddc:	6014      	str	r4, [r2, #0]
 800cdde:	4628      	mov	r0, r5
 800cde0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde4:	f000 b8da 	b.w	800cf9c <__malloc_unlock>
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	d908      	bls.n	800cdfe <_free_r+0x42>
 800cdec:	6820      	ldr	r0, [r4, #0]
 800cdee:	1821      	adds	r1, r4, r0
 800cdf0:	428b      	cmp	r3, r1
 800cdf2:	bf01      	itttt	eq
 800cdf4:	6819      	ldreq	r1, [r3, #0]
 800cdf6:	685b      	ldreq	r3, [r3, #4]
 800cdf8:	1809      	addeq	r1, r1, r0
 800cdfa:	6021      	streq	r1, [r4, #0]
 800cdfc:	e7ed      	b.n	800cdda <_free_r+0x1e>
 800cdfe:	461a      	mov	r2, r3
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	b10b      	cbz	r3, 800ce08 <_free_r+0x4c>
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	d9fa      	bls.n	800cdfe <_free_r+0x42>
 800ce08:	6811      	ldr	r1, [r2, #0]
 800ce0a:	1850      	adds	r0, r2, r1
 800ce0c:	42a0      	cmp	r0, r4
 800ce0e:	d10b      	bne.n	800ce28 <_free_r+0x6c>
 800ce10:	6820      	ldr	r0, [r4, #0]
 800ce12:	4401      	add	r1, r0
 800ce14:	1850      	adds	r0, r2, r1
 800ce16:	4283      	cmp	r3, r0
 800ce18:	6011      	str	r1, [r2, #0]
 800ce1a:	d1e0      	bne.n	800cdde <_free_r+0x22>
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	4408      	add	r0, r1
 800ce22:	6010      	str	r0, [r2, #0]
 800ce24:	6053      	str	r3, [r2, #4]
 800ce26:	e7da      	b.n	800cdde <_free_r+0x22>
 800ce28:	d902      	bls.n	800ce30 <_free_r+0x74>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	602b      	str	r3, [r5, #0]
 800ce2e:	e7d6      	b.n	800cdde <_free_r+0x22>
 800ce30:	6820      	ldr	r0, [r4, #0]
 800ce32:	1821      	adds	r1, r4, r0
 800ce34:	428b      	cmp	r3, r1
 800ce36:	bf01      	itttt	eq
 800ce38:	6819      	ldreq	r1, [r3, #0]
 800ce3a:	685b      	ldreq	r3, [r3, #4]
 800ce3c:	1809      	addeq	r1, r1, r0
 800ce3e:	6021      	streq	r1, [r4, #0]
 800ce40:	6063      	str	r3, [r4, #4]
 800ce42:	6054      	str	r4, [r2, #4]
 800ce44:	e7cb      	b.n	800cdde <_free_r+0x22>
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20001728 	.word	0x20001728

0800ce4c <sbrk_aligned>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ce8c <sbrk_aligned+0x40>)
 800ce50:	460c      	mov	r4, r1
 800ce52:	6831      	ldr	r1, [r6, #0]
 800ce54:	4605      	mov	r5, r0
 800ce56:	b911      	cbnz	r1, 800ce5e <sbrk_aligned+0x12>
 800ce58:	f000 fbaa 	bl	800d5b0 <_sbrk_r>
 800ce5c:	6030      	str	r0, [r6, #0]
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4628      	mov	r0, r5
 800ce62:	f000 fba5 	bl	800d5b0 <_sbrk_r>
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d103      	bne.n	800ce72 <sbrk_aligned+0x26>
 800ce6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ce6e:	4620      	mov	r0, r4
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	1cc4      	adds	r4, r0, #3
 800ce74:	f024 0403 	bic.w	r4, r4, #3
 800ce78:	42a0      	cmp	r0, r4
 800ce7a:	d0f8      	beq.n	800ce6e <sbrk_aligned+0x22>
 800ce7c:	1a21      	subs	r1, r4, r0
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f000 fb96 	bl	800d5b0 <_sbrk_r>
 800ce84:	3001      	adds	r0, #1
 800ce86:	d1f2      	bne.n	800ce6e <sbrk_aligned+0x22>
 800ce88:	e7ef      	b.n	800ce6a <sbrk_aligned+0x1e>
 800ce8a:	bf00      	nop
 800ce8c:	20001724 	.word	0x20001724

0800ce90 <_malloc_r>:
 800ce90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	1ccd      	adds	r5, r1, #3
 800ce96:	f025 0503 	bic.w	r5, r5, #3
 800ce9a:	3508      	adds	r5, #8
 800ce9c:	2d0c      	cmp	r5, #12
 800ce9e:	bf38      	it	cc
 800cea0:	250c      	movcc	r5, #12
 800cea2:	2d00      	cmp	r5, #0
 800cea4:	4606      	mov	r6, r0
 800cea6:	db01      	blt.n	800ceac <_malloc_r+0x1c>
 800cea8:	42a9      	cmp	r1, r5
 800ceaa:	d904      	bls.n	800ceb6 <_malloc_r+0x26>
 800ceac:	230c      	movs	r3, #12
 800ceae:	6033      	str	r3, [r6, #0]
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf8c <_malloc_r+0xfc>
 800ceba:	f000 f869 	bl	800cf90 <__malloc_lock>
 800cebe:	f8d8 3000 	ldr.w	r3, [r8]
 800cec2:	461c      	mov	r4, r3
 800cec4:	bb44      	cbnz	r4, 800cf18 <_malloc_r+0x88>
 800cec6:	4629      	mov	r1, r5
 800cec8:	4630      	mov	r0, r6
 800ceca:	f7ff ffbf 	bl	800ce4c <sbrk_aligned>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	4604      	mov	r4, r0
 800ced2:	d158      	bne.n	800cf86 <_malloc_r+0xf6>
 800ced4:	f8d8 4000 	ldr.w	r4, [r8]
 800ced8:	4627      	mov	r7, r4
 800ceda:	2f00      	cmp	r7, #0
 800cedc:	d143      	bne.n	800cf66 <_malloc_r+0xd6>
 800cede:	2c00      	cmp	r4, #0
 800cee0:	d04b      	beq.n	800cf7a <_malloc_r+0xea>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	4639      	mov	r1, r7
 800cee6:	4630      	mov	r0, r6
 800cee8:	eb04 0903 	add.w	r9, r4, r3
 800ceec:	f000 fb60 	bl	800d5b0 <_sbrk_r>
 800cef0:	4581      	cmp	r9, r0
 800cef2:	d142      	bne.n	800cf7a <_malloc_r+0xea>
 800cef4:	6821      	ldr	r1, [r4, #0]
 800cef6:	4630      	mov	r0, r6
 800cef8:	1a6d      	subs	r5, r5, r1
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7ff ffa6 	bl	800ce4c <sbrk_aligned>
 800cf00:	3001      	adds	r0, #1
 800cf02:	d03a      	beq.n	800cf7a <_malloc_r+0xea>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	442b      	add	r3, r5
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	bb62      	cbnz	r2, 800cf6c <_malloc_r+0xdc>
 800cf12:	f8c8 7000 	str.w	r7, [r8]
 800cf16:	e00f      	b.n	800cf38 <_malloc_r+0xa8>
 800cf18:	6822      	ldr	r2, [r4, #0]
 800cf1a:	1b52      	subs	r2, r2, r5
 800cf1c:	d420      	bmi.n	800cf60 <_malloc_r+0xd0>
 800cf1e:	2a0b      	cmp	r2, #11
 800cf20:	d917      	bls.n	800cf52 <_malloc_r+0xc2>
 800cf22:	1961      	adds	r1, r4, r5
 800cf24:	42a3      	cmp	r3, r4
 800cf26:	6025      	str	r5, [r4, #0]
 800cf28:	bf18      	it	ne
 800cf2a:	6059      	strne	r1, [r3, #4]
 800cf2c:	6863      	ldr	r3, [r4, #4]
 800cf2e:	bf08      	it	eq
 800cf30:	f8c8 1000 	streq.w	r1, [r8]
 800cf34:	5162      	str	r2, [r4, r5]
 800cf36:	604b      	str	r3, [r1, #4]
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f000 f82f 	bl	800cf9c <__malloc_unlock>
 800cf3e:	f104 000b 	add.w	r0, r4, #11
 800cf42:	1d23      	adds	r3, r4, #4
 800cf44:	f020 0007 	bic.w	r0, r0, #7
 800cf48:	1ac2      	subs	r2, r0, r3
 800cf4a:	bf1c      	itt	ne
 800cf4c:	1a1b      	subne	r3, r3, r0
 800cf4e:	50a3      	strne	r3, [r4, r2]
 800cf50:	e7af      	b.n	800ceb2 <_malloc_r+0x22>
 800cf52:	6862      	ldr	r2, [r4, #4]
 800cf54:	42a3      	cmp	r3, r4
 800cf56:	bf0c      	ite	eq
 800cf58:	f8c8 2000 	streq.w	r2, [r8]
 800cf5c:	605a      	strne	r2, [r3, #4]
 800cf5e:	e7eb      	b.n	800cf38 <_malloc_r+0xa8>
 800cf60:	4623      	mov	r3, r4
 800cf62:	6864      	ldr	r4, [r4, #4]
 800cf64:	e7ae      	b.n	800cec4 <_malloc_r+0x34>
 800cf66:	463c      	mov	r4, r7
 800cf68:	687f      	ldr	r7, [r7, #4]
 800cf6a:	e7b6      	b.n	800ceda <_malloc_r+0x4a>
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	d1fb      	bne.n	800cf6c <_malloc_r+0xdc>
 800cf74:	2300      	movs	r3, #0
 800cf76:	6053      	str	r3, [r2, #4]
 800cf78:	e7de      	b.n	800cf38 <_malloc_r+0xa8>
 800cf7a:	230c      	movs	r3, #12
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	6033      	str	r3, [r6, #0]
 800cf80:	f000 f80c 	bl	800cf9c <__malloc_unlock>
 800cf84:	e794      	b.n	800ceb0 <_malloc_r+0x20>
 800cf86:	6005      	str	r5, [r0, #0]
 800cf88:	e7d6      	b.n	800cf38 <_malloc_r+0xa8>
 800cf8a:	bf00      	nop
 800cf8c:	20001728 	.word	0x20001728

0800cf90 <__malloc_lock>:
 800cf90:	4801      	ldr	r0, [pc, #4]	@ (800cf98 <__malloc_lock+0x8>)
 800cf92:	f7ff bf03 	b.w	800cd9c <__retarget_lock_acquire_recursive>
 800cf96:	bf00      	nop
 800cf98:	20001720 	.word	0x20001720

0800cf9c <__malloc_unlock>:
 800cf9c:	4801      	ldr	r0, [pc, #4]	@ (800cfa4 <__malloc_unlock+0x8>)
 800cf9e:	f7ff befe 	b.w	800cd9e <__retarget_lock_release_recursive>
 800cfa2:	bf00      	nop
 800cfa4:	20001720 	.word	0x20001720

0800cfa8 <__ssputs_r>:
 800cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfac:	461f      	mov	r7, r3
 800cfae:	688e      	ldr	r6, [r1, #8]
 800cfb0:	4682      	mov	sl, r0
 800cfb2:	42be      	cmp	r6, r7
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	4690      	mov	r8, r2
 800cfb8:	680b      	ldr	r3, [r1, #0]
 800cfba:	d82d      	bhi.n	800d018 <__ssputs_r+0x70>
 800cfbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cfc4:	d026      	beq.n	800d014 <__ssputs_r+0x6c>
 800cfc6:	6965      	ldr	r5, [r4, #20]
 800cfc8:	6909      	ldr	r1, [r1, #16]
 800cfca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfce:	eba3 0901 	sub.w	r9, r3, r1
 800cfd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfd6:	1c7b      	adds	r3, r7, #1
 800cfd8:	444b      	add	r3, r9
 800cfda:	106d      	asrs	r5, r5, #1
 800cfdc:	429d      	cmp	r5, r3
 800cfde:	bf38      	it	cc
 800cfe0:	461d      	movcc	r5, r3
 800cfe2:	0553      	lsls	r3, r2, #21
 800cfe4:	d527      	bpl.n	800d036 <__ssputs_r+0x8e>
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	f7ff ff52 	bl	800ce90 <_malloc_r>
 800cfec:	4606      	mov	r6, r0
 800cfee:	b360      	cbz	r0, 800d04a <__ssputs_r+0xa2>
 800cff0:	464a      	mov	r2, r9
 800cff2:	6921      	ldr	r1, [r4, #16]
 800cff4:	f7ff fed4 	bl	800cda0 <memcpy>
 800cff8:	89a3      	ldrh	r3, [r4, #12]
 800cffa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d002:	81a3      	strh	r3, [r4, #12]
 800d004:	6126      	str	r6, [r4, #16]
 800d006:	444e      	add	r6, r9
 800d008:	6026      	str	r6, [r4, #0]
 800d00a:	463e      	mov	r6, r7
 800d00c:	6165      	str	r5, [r4, #20]
 800d00e:	eba5 0509 	sub.w	r5, r5, r9
 800d012:	60a5      	str	r5, [r4, #8]
 800d014:	42be      	cmp	r6, r7
 800d016:	d900      	bls.n	800d01a <__ssputs_r+0x72>
 800d018:	463e      	mov	r6, r7
 800d01a:	4632      	mov	r2, r6
 800d01c:	4641      	mov	r1, r8
 800d01e:	6820      	ldr	r0, [r4, #0]
 800d020:	f000 faac 	bl	800d57c <memmove>
 800d024:	2000      	movs	r0, #0
 800d026:	68a3      	ldr	r3, [r4, #8]
 800d028:	1b9b      	subs	r3, r3, r6
 800d02a:	60a3      	str	r3, [r4, #8]
 800d02c:	6823      	ldr	r3, [r4, #0]
 800d02e:	4433      	add	r3, r6
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d036:	462a      	mov	r2, r5
 800d038:	f000 fad8 	bl	800d5ec <_realloc_r>
 800d03c:	4606      	mov	r6, r0
 800d03e:	2800      	cmp	r0, #0
 800d040:	d1e0      	bne.n	800d004 <__ssputs_r+0x5c>
 800d042:	4650      	mov	r0, sl
 800d044:	6921      	ldr	r1, [r4, #16]
 800d046:	f7ff feb9 	bl	800cdbc <_free_r>
 800d04a:	230c      	movs	r3, #12
 800d04c:	f8ca 3000 	str.w	r3, [sl]
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f04f 30ff 	mov.w	r0, #4294967295
 800d056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	e7e9      	b.n	800d032 <__ssputs_r+0x8a>
	...

0800d060 <_svfiprintf_r>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	4698      	mov	r8, r3
 800d066:	898b      	ldrh	r3, [r1, #12]
 800d068:	4607      	mov	r7, r0
 800d06a:	061b      	lsls	r3, r3, #24
 800d06c:	460d      	mov	r5, r1
 800d06e:	4614      	mov	r4, r2
 800d070:	b09d      	sub	sp, #116	@ 0x74
 800d072:	d510      	bpl.n	800d096 <_svfiprintf_r+0x36>
 800d074:	690b      	ldr	r3, [r1, #16]
 800d076:	b973      	cbnz	r3, 800d096 <_svfiprintf_r+0x36>
 800d078:	2140      	movs	r1, #64	@ 0x40
 800d07a:	f7ff ff09 	bl	800ce90 <_malloc_r>
 800d07e:	6028      	str	r0, [r5, #0]
 800d080:	6128      	str	r0, [r5, #16]
 800d082:	b930      	cbnz	r0, 800d092 <_svfiprintf_r+0x32>
 800d084:	230c      	movs	r3, #12
 800d086:	603b      	str	r3, [r7, #0]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295
 800d08c:	b01d      	add	sp, #116	@ 0x74
 800d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d092:	2340      	movs	r3, #64	@ 0x40
 800d094:	616b      	str	r3, [r5, #20]
 800d096:	2300      	movs	r3, #0
 800d098:	9309      	str	r3, [sp, #36]	@ 0x24
 800d09a:	2320      	movs	r3, #32
 800d09c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0a0:	2330      	movs	r3, #48	@ 0x30
 800d0a2:	f04f 0901 	mov.w	r9, #1
 800d0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d244 <_svfiprintf_r+0x1e4>
 800d0ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0b2:	4623      	mov	r3, r4
 800d0b4:	469a      	mov	sl, r3
 800d0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ba:	b10a      	cbz	r2, 800d0c0 <_svfiprintf_r+0x60>
 800d0bc:	2a25      	cmp	r2, #37	@ 0x25
 800d0be:	d1f9      	bne.n	800d0b4 <_svfiprintf_r+0x54>
 800d0c0:	ebba 0b04 	subs.w	fp, sl, r4
 800d0c4:	d00b      	beq.n	800d0de <_svfiprintf_r+0x7e>
 800d0c6:	465b      	mov	r3, fp
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	f7ff ff6b 	bl	800cfa8 <__ssputs_r>
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f000 80a7 	beq.w	800d226 <_svfiprintf_r+0x1c6>
 800d0d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0da:	445a      	add	r2, fp
 800d0dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0de:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 809f 	beq.w	800d226 <_svfiprintf_r+0x1c6>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0f2:	f10a 0a01 	add.w	sl, sl, #1
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800d100:	4654      	mov	r4, sl
 800d102:	2205      	movs	r2, #5
 800d104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d108:	484e      	ldr	r0, [pc, #312]	@ (800d244 <_svfiprintf_r+0x1e4>)
 800d10a:	f000 fa61 	bl	800d5d0 <memchr>
 800d10e:	9a04      	ldr	r2, [sp, #16]
 800d110:	b9d8      	cbnz	r0, 800d14a <_svfiprintf_r+0xea>
 800d112:	06d0      	lsls	r0, r2, #27
 800d114:	bf44      	itt	mi
 800d116:	2320      	movmi	r3, #32
 800d118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d11c:	0711      	lsls	r1, r2, #28
 800d11e:	bf44      	itt	mi
 800d120:	232b      	movmi	r3, #43	@ 0x2b
 800d122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d126:	f89a 3000 	ldrb.w	r3, [sl]
 800d12a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d12c:	d015      	beq.n	800d15a <_svfiprintf_r+0xfa>
 800d12e:	4654      	mov	r4, sl
 800d130:	2000      	movs	r0, #0
 800d132:	f04f 0c0a 	mov.w	ip, #10
 800d136:	9a07      	ldr	r2, [sp, #28]
 800d138:	4621      	mov	r1, r4
 800d13a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d13e:	3b30      	subs	r3, #48	@ 0x30
 800d140:	2b09      	cmp	r3, #9
 800d142:	d94b      	bls.n	800d1dc <_svfiprintf_r+0x17c>
 800d144:	b1b0      	cbz	r0, 800d174 <_svfiprintf_r+0x114>
 800d146:	9207      	str	r2, [sp, #28]
 800d148:	e014      	b.n	800d174 <_svfiprintf_r+0x114>
 800d14a:	eba0 0308 	sub.w	r3, r0, r8
 800d14e:	fa09 f303 	lsl.w	r3, r9, r3
 800d152:	4313      	orrs	r3, r2
 800d154:	46a2      	mov	sl, r4
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	e7d2      	b.n	800d100 <_svfiprintf_r+0xa0>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	1d19      	adds	r1, r3, #4
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	9103      	str	r1, [sp, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	bfbb      	ittet	lt
 800d166:	425b      	neglt	r3, r3
 800d168:	f042 0202 	orrlt.w	r2, r2, #2
 800d16c:	9307      	strge	r3, [sp, #28]
 800d16e:	9307      	strlt	r3, [sp, #28]
 800d170:	bfb8      	it	lt
 800d172:	9204      	strlt	r2, [sp, #16]
 800d174:	7823      	ldrb	r3, [r4, #0]
 800d176:	2b2e      	cmp	r3, #46	@ 0x2e
 800d178:	d10a      	bne.n	800d190 <_svfiprintf_r+0x130>
 800d17a:	7863      	ldrb	r3, [r4, #1]
 800d17c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d17e:	d132      	bne.n	800d1e6 <_svfiprintf_r+0x186>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	3402      	adds	r4, #2
 800d184:	1d1a      	adds	r2, r3, #4
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	9203      	str	r2, [sp, #12]
 800d18a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d18e:	9305      	str	r3, [sp, #20]
 800d190:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d248 <_svfiprintf_r+0x1e8>
 800d194:	2203      	movs	r2, #3
 800d196:	4650      	mov	r0, sl
 800d198:	7821      	ldrb	r1, [r4, #0]
 800d19a:	f000 fa19 	bl	800d5d0 <memchr>
 800d19e:	b138      	cbz	r0, 800d1b0 <_svfiprintf_r+0x150>
 800d1a0:	2240      	movs	r2, #64	@ 0x40
 800d1a2:	9b04      	ldr	r3, [sp, #16]
 800d1a4:	eba0 000a 	sub.w	r0, r0, sl
 800d1a8:	4082      	lsls	r2, r0
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	3401      	adds	r4, #1
 800d1ae:	9304      	str	r3, [sp, #16]
 800d1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b4:	2206      	movs	r2, #6
 800d1b6:	4825      	ldr	r0, [pc, #148]	@ (800d24c <_svfiprintf_r+0x1ec>)
 800d1b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1bc:	f000 fa08 	bl	800d5d0 <memchr>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d036      	beq.n	800d232 <_svfiprintf_r+0x1d2>
 800d1c4:	4b22      	ldr	r3, [pc, #136]	@ (800d250 <_svfiprintf_r+0x1f0>)
 800d1c6:	bb1b      	cbnz	r3, 800d210 <_svfiprintf_r+0x1b0>
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	3307      	adds	r3, #7
 800d1cc:	f023 0307 	bic.w	r3, r3, #7
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	9303      	str	r3, [sp, #12]
 800d1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d6:	4433      	add	r3, r6
 800d1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1da:	e76a      	b.n	800d0b2 <_svfiprintf_r+0x52>
 800d1dc:	460c      	mov	r4, r1
 800d1de:	2001      	movs	r0, #1
 800d1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1e4:	e7a8      	b.n	800d138 <_svfiprintf_r+0xd8>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f04f 0c0a 	mov.w	ip, #10
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	3401      	adds	r4, #1
 800d1f0:	9305      	str	r3, [sp, #20]
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1f8:	3a30      	subs	r2, #48	@ 0x30
 800d1fa:	2a09      	cmp	r2, #9
 800d1fc:	d903      	bls.n	800d206 <_svfiprintf_r+0x1a6>
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0c6      	beq.n	800d190 <_svfiprintf_r+0x130>
 800d202:	9105      	str	r1, [sp, #20]
 800d204:	e7c4      	b.n	800d190 <_svfiprintf_r+0x130>
 800d206:	4604      	mov	r4, r0
 800d208:	2301      	movs	r3, #1
 800d20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d20e:	e7f0      	b.n	800d1f2 <_svfiprintf_r+0x192>
 800d210:	ab03      	add	r3, sp, #12
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	462a      	mov	r2, r5
 800d216:	4638      	mov	r0, r7
 800d218:	4b0e      	ldr	r3, [pc, #56]	@ (800d254 <_svfiprintf_r+0x1f4>)
 800d21a:	a904      	add	r1, sp, #16
 800d21c:	f3af 8000 	nop.w
 800d220:	1c42      	adds	r2, r0, #1
 800d222:	4606      	mov	r6, r0
 800d224:	d1d6      	bne.n	800d1d4 <_svfiprintf_r+0x174>
 800d226:	89ab      	ldrh	r3, [r5, #12]
 800d228:	065b      	lsls	r3, r3, #25
 800d22a:	f53f af2d 	bmi.w	800d088 <_svfiprintf_r+0x28>
 800d22e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d230:	e72c      	b.n	800d08c <_svfiprintf_r+0x2c>
 800d232:	ab03      	add	r3, sp, #12
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	462a      	mov	r2, r5
 800d238:	4638      	mov	r0, r7
 800d23a:	4b06      	ldr	r3, [pc, #24]	@ (800d254 <_svfiprintf_r+0x1f4>)
 800d23c:	a904      	add	r1, sp, #16
 800d23e:	f000 f87d 	bl	800d33c <_printf_i>
 800d242:	e7ed      	b.n	800d220 <_svfiprintf_r+0x1c0>
 800d244:	0800df55 	.word	0x0800df55
 800d248:	0800df5b 	.word	0x0800df5b
 800d24c:	0800df5f 	.word	0x0800df5f
 800d250:	00000000 	.word	0x00000000
 800d254:	0800cfa9 	.word	0x0800cfa9

0800d258 <_printf_common>:
 800d258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d25c:	4616      	mov	r6, r2
 800d25e:	4698      	mov	r8, r3
 800d260:	688a      	ldr	r2, [r1, #8]
 800d262:	690b      	ldr	r3, [r1, #16]
 800d264:	4607      	mov	r7, r0
 800d266:	4293      	cmp	r3, r2
 800d268:	bfb8      	it	lt
 800d26a:	4613      	movlt	r3, r2
 800d26c:	6033      	str	r3, [r6, #0]
 800d26e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d272:	460c      	mov	r4, r1
 800d274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d278:	b10a      	cbz	r2, 800d27e <_printf_common+0x26>
 800d27a:	3301      	adds	r3, #1
 800d27c:	6033      	str	r3, [r6, #0]
 800d27e:	6823      	ldr	r3, [r4, #0]
 800d280:	0699      	lsls	r1, r3, #26
 800d282:	bf42      	ittt	mi
 800d284:	6833      	ldrmi	r3, [r6, #0]
 800d286:	3302      	addmi	r3, #2
 800d288:	6033      	strmi	r3, [r6, #0]
 800d28a:	6825      	ldr	r5, [r4, #0]
 800d28c:	f015 0506 	ands.w	r5, r5, #6
 800d290:	d106      	bne.n	800d2a0 <_printf_common+0x48>
 800d292:	f104 0a19 	add.w	sl, r4, #25
 800d296:	68e3      	ldr	r3, [r4, #12]
 800d298:	6832      	ldr	r2, [r6, #0]
 800d29a:	1a9b      	subs	r3, r3, r2
 800d29c:	42ab      	cmp	r3, r5
 800d29e:	dc2b      	bgt.n	800d2f8 <_printf_common+0xa0>
 800d2a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2a4:	6822      	ldr	r2, [r4, #0]
 800d2a6:	3b00      	subs	r3, #0
 800d2a8:	bf18      	it	ne
 800d2aa:	2301      	movne	r3, #1
 800d2ac:	0692      	lsls	r2, r2, #26
 800d2ae:	d430      	bmi.n	800d312 <_printf_common+0xba>
 800d2b0:	4641      	mov	r1, r8
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2b8:	47c8      	blx	r9
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	d023      	beq.n	800d306 <_printf_common+0xae>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	6922      	ldr	r2, [r4, #16]
 800d2c2:	f003 0306 	and.w	r3, r3, #6
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	bf14      	ite	ne
 800d2ca:	2500      	movne	r5, #0
 800d2cc:	6833      	ldreq	r3, [r6, #0]
 800d2ce:	f04f 0600 	mov.w	r6, #0
 800d2d2:	bf08      	it	eq
 800d2d4:	68e5      	ldreq	r5, [r4, #12]
 800d2d6:	f104 041a 	add.w	r4, r4, #26
 800d2da:	bf08      	it	eq
 800d2dc:	1aed      	subeq	r5, r5, r3
 800d2de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d2e2:	bf08      	it	eq
 800d2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	bfc4      	itt	gt
 800d2ec:	1a9b      	subgt	r3, r3, r2
 800d2ee:	18ed      	addgt	r5, r5, r3
 800d2f0:	42b5      	cmp	r5, r6
 800d2f2:	d11a      	bne.n	800d32a <_printf_common+0xd2>
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	e008      	b.n	800d30a <_printf_common+0xb2>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	4652      	mov	r2, sl
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	4638      	mov	r0, r7
 800d300:	47c8      	blx	r9
 800d302:	3001      	adds	r0, #1
 800d304:	d103      	bne.n	800d30e <_printf_common+0xb6>
 800d306:	f04f 30ff 	mov.w	r0, #4294967295
 800d30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30e:	3501      	adds	r5, #1
 800d310:	e7c1      	b.n	800d296 <_printf_common+0x3e>
 800d312:	2030      	movs	r0, #48	@ 0x30
 800d314:	18e1      	adds	r1, r4, r3
 800d316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d320:	4422      	add	r2, r4
 800d322:	3302      	adds	r3, #2
 800d324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d328:	e7c2      	b.n	800d2b0 <_printf_common+0x58>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4622      	mov	r2, r4
 800d32e:	4641      	mov	r1, r8
 800d330:	4638      	mov	r0, r7
 800d332:	47c8      	blx	r9
 800d334:	3001      	adds	r0, #1
 800d336:	d0e6      	beq.n	800d306 <_printf_common+0xae>
 800d338:	3601      	adds	r6, #1
 800d33a:	e7d9      	b.n	800d2f0 <_printf_common+0x98>

0800d33c <_printf_i>:
 800d33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	7e0f      	ldrb	r7, [r1, #24]
 800d342:	4691      	mov	r9, r2
 800d344:	2f78      	cmp	r7, #120	@ 0x78
 800d346:	4680      	mov	r8, r0
 800d348:	460c      	mov	r4, r1
 800d34a:	469a      	mov	sl, r3
 800d34c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d34e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d352:	d807      	bhi.n	800d364 <_printf_i+0x28>
 800d354:	2f62      	cmp	r7, #98	@ 0x62
 800d356:	d80a      	bhi.n	800d36e <_printf_i+0x32>
 800d358:	2f00      	cmp	r7, #0
 800d35a:	f000 80d3 	beq.w	800d504 <_printf_i+0x1c8>
 800d35e:	2f58      	cmp	r7, #88	@ 0x58
 800d360:	f000 80ba 	beq.w	800d4d8 <_printf_i+0x19c>
 800d364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d36c:	e03a      	b.n	800d3e4 <_printf_i+0xa8>
 800d36e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d372:	2b15      	cmp	r3, #21
 800d374:	d8f6      	bhi.n	800d364 <_printf_i+0x28>
 800d376:	a101      	add	r1, pc, #4	@ (adr r1, 800d37c <_printf_i+0x40>)
 800d378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d37c:	0800d3d5 	.word	0x0800d3d5
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d365 	.word	0x0800d365
 800d388:	0800d365 	.word	0x0800d365
 800d38c:	0800d365 	.word	0x0800d365
 800d390:	0800d365 	.word	0x0800d365
 800d394:	0800d3e9 	.word	0x0800d3e9
 800d398:	0800d365 	.word	0x0800d365
 800d39c:	0800d365 	.word	0x0800d365
 800d3a0:	0800d365 	.word	0x0800d365
 800d3a4:	0800d365 	.word	0x0800d365
 800d3a8:	0800d4eb 	.word	0x0800d4eb
 800d3ac:	0800d413 	.word	0x0800d413
 800d3b0:	0800d4a5 	.word	0x0800d4a5
 800d3b4:	0800d365 	.word	0x0800d365
 800d3b8:	0800d365 	.word	0x0800d365
 800d3bc:	0800d50d 	.word	0x0800d50d
 800d3c0:	0800d365 	.word	0x0800d365
 800d3c4:	0800d413 	.word	0x0800d413
 800d3c8:	0800d365 	.word	0x0800d365
 800d3cc:	0800d365 	.word	0x0800d365
 800d3d0:	0800d4ad 	.word	0x0800d4ad
 800d3d4:	6833      	ldr	r3, [r6, #0]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6032      	str	r2, [r6, #0]
 800d3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e09e      	b.n	800d526 <_printf_i+0x1ea>
 800d3e8:	6833      	ldr	r3, [r6, #0]
 800d3ea:	6820      	ldr	r0, [r4, #0]
 800d3ec:	1d19      	adds	r1, r3, #4
 800d3ee:	6031      	str	r1, [r6, #0]
 800d3f0:	0606      	lsls	r6, r0, #24
 800d3f2:	d501      	bpl.n	800d3f8 <_printf_i+0xbc>
 800d3f4:	681d      	ldr	r5, [r3, #0]
 800d3f6:	e003      	b.n	800d400 <_printf_i+0xc4>
 800d3f8:	0645      	lsls	r5, r0, #25
 800d3fa:	d5fb      	bpl.n	800d3f4 <_printf_i+0xb8>
 800d3fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d400:	2d00      	cmp	r5, #0
 800d402:	da03      	bge.n	800d40c <_printf_i+0xd0>
 800d404:	232d      	movs	r3, #45	@ 0x2d
 800d406:	426d      	negs	r5, r5
 800d408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d40c:	230a      	movs	r3, #10
 800d40e:	4859      	ldr	r0, [pc, #356]	@ (800d574 <_printf_i+0x238>)
 800d410:	e011      	b.n	800d436 <_printf_i+0xfa>
 800d412:	6821      	ldr	r1, [r4, #0]
 800d414:	6833      	ldr	r3, [r6, #0]
 800d416:	0608      	lsls	r0, r1, #24
 800d418:	f853 5b04 	ldr.w	r5, [r3], #4
 800d41c:	d402      	bmi.n	800d424 <_printf_i+0xe8>
 800d41e:	0649      	lsls	r1, r1, #25
 800d420:	bf48      	it	mi
 800d422:	b2ad      	uxthmi	r5, r5
 800d424:	2f6f      	cmp	r7, #111	@ 0x6f
 800d426:	6033      	str	r3, [r6, #0]
 800d428:	bf14      	ite	ne
 800d42a:	230a      	movne	r3, #10
 800d42c:	2308      	moveq	r3, #8
 800d42e:	4851      	ldr	r0, [pc, #324]	@ (800d574 <_printf_i+0x238>)
 800d430:	2100      	movs	r1, #0
 800d432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d436:	6866      	ldr	r6, [r4, #4]
 800d438:	2e00      	cmp	r6, #0
 800d43a:	bfa8      	it	ge
 800d43c:	6821      	ldrge	r1, [r4, #0]
 800d43e:	60a6      	str	r6, [r4, #8]
 800d440:	bfa4      	itt	ge
 800d442:	f021 0104 	bicge.w	r1, r1, #4
 800d446:	6021      	strge	r1, [r4, #0]
 800d448:	b90d      	cbnz	r5, 800d44e <_printf_i+0x112>
 800d44a:	2e00      	cmp	r6, #0
 800d44c:	d04b      	beq.n	800d4e6 <_printf_i+0x1aa>
 800d44e:	4616      	mov	r6, r2
 800d450:	fbb5 f1f3 	udiv	r1, r5, r3
 800d454:	fb03 5711 	mls	r7, r3, r1, r5
 800d458:	5dc7      	ldrb	r7, [r0, r7]
 800d45a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d45e:	462f      	mov	r7, r5
 800d460:	42bb      	cmp	r3, r7
 800d462:	460d      	mov	r5, r1
 800d464:	d9f4      	bls.n	800d450 <_printf_i+0x114>
 800d466:	2b08      	cmp	r3, #8
 800d468:	d10b      	bne.n	800d482 <_printf_i+0x146>
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	07df      	lsls	r7, r3, #31
 800d46e:	d508      	bpl.n	800d482 <_printf_i+0x146>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	6861      	ldr	r1, [r4, #4]
 800d474:	4299      	cmp	r1, r3
 800d476:	bfde      	ittt	le
 800d478:	2330      	movle	r3, #48	@ 0x30
 800d47a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d47e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d482:	1b92      	subs	r2, r2, r6
 800d484:	6122      	str	r2, [r4, #16]
 800d486:	464b      	mov	r3, r9
 800d488:	4621      	mov	r1, r4
 800d48a:	4640      	mov	r0, r8
 800d48c:	f8cd a000 	str.w	sl, [sp]
 800d490:	aa03      	add	r2, sp, #12
 800d492:	f7ff fee1 	bl	800d258 <_printf_common>
 800d496:	3001      	adds	r0, #1
 800d498:	d14a      	bne.n	800d530 <_printf_i+0x1f4>
 800d49a:	f04f 30ff 	mov.w	r0, #4294967295
 800d49e:	b004      	add	sp, #16
 800d4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	f043 0320 	orr.w	r3, r3, #32
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	2778      	movs	r7, #120	@ 0x78
 800d4ae:	4832      	ldr	r0, [pc, #200]	@ (800d578 <_printf_i+0x23c>)
 800d4b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	6831      	ldr	r1, [r6, #0]
 800d4b8:	061f      	lsls	r7, r3, #24
 800d4ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4be:	d402      	bmi.n	800d4c6 <_printf_i+0x18a>
 800d4c0:	065f      	lsls	r7, r3, #25
 800d4c2:	bf48      	it	mi
 800d4c4:	b2ad      	uxthmi	r5, r5
 800d4c6:	6031      	str	r1, [r6, #0]
 800d4c8:	07d9      	lsls	r1, r3, #31
 800d4ca:	bf44      	itt	mi
 800d4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d4d0:	6023      	strmi	r3, [r4, #0]
 800d4d2:	b11d      	cbz	r5, 800d4dc <_printf_i+0x1a0>
 800d4d4:	2310      	movs	r3, #16
 800d4d6:	e7ab      	b.n	800d430 <_printf_i+0xf4>
 800d4d8:	4826      	ldr	r0, [pc, #152]	@ (800d574 <_printf_i+0x238>)
 800d4da:	e7e9      	b.n	800d4b0 <_printf_i+0x174>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	f023 0320 	bic.w	r3, r3, #32
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	e7f6      	b.n	800d4d4 <_printf_i+0x198>
 800d4e6:	4616      	mov	r6, r2
 800d4e8:	e7bd      	b.n	800d466 <_printf_i+0x12a>
 800d4ea:	6833      	ldr	r3, [r6, #0]
 800d4ec:	6825      	ldr	r5, [r4, #0]
 800d4ee:	1d18      	adds	r0, r3, #4
 800d4f0:	6961      	ldr	r1, [r4, #20]
 800d4f2:	6030      	str	r0, [r6, #0]
 800d4f4:	062e      	lsls	r6, r5, #24
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	d501      	bpl.n	800d4fe <_printf_i+0x1c2>
 800d4fa:	6019      	str	r1, [r3, #0]
 800d4fc:	e002      	b.n	800d504 <_printf_i+0x1c8>
 800d4fe:	0668      	lsls	r0, r5, #25
 800d500:	d5fb      	bpl.n	800d4fa <_printf_i+0x1be>
 800d502:	8019      	strh	r1, [r3, #0]
 800d504:	2300      	movs	r3, #0
 800d506:	4616      	mov	r6, r2
 800d508:	6123      	str	r3, [r4, #16]
 800d50a:	e7bc      	b.n	800d486 <_printf_i+0x14a>
 800d50c:	6833      	ldr	r3, [r6, #0]
 800d50e:	2100      	movs	r1, #0
 800d510:	1d1a      	adds	r2, r3, #4
 800d512:	6032      	str	r2, [r6, #0]
 800d514:	681e      	ldr	r6, [r3, #0]
 800d516:	6862      	ldr	r2, [r4, #4]
 800d518:	4630      	mov	r0, r6
 800d51a:	f000 f859 	bl	800d5d0 <memchr>
 800d51e:	b108      	cbz	r0, 800d524 <_printf_i+0x1e8>
 800d520:	1b80      	subs	r0, r0, r6
 800d522:	6060      	str	r0, [r4, #4]
 800d524:	6863      	ldr	r3, [r4, #4]
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	2300      	movs	r3, #0
 800d52a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d52e:	e7aa      	b.n	800d486 <_printf_i+0x14a>
 800d530:	4632      	mov	r2, r6
 800d532:	4649      	mov	r1, r9
 800d534:	4640      	mov	r0, r8
 800d536:	6923      	ldr	r3, [r4, #16]
 800d538:	47d0      	blx	sl
 800d53a:	3001      	adds	r0, #1
 800d53c:	d0ad      	beq.n	800d49a <_printf_i+0x15e>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	079b      	lsls	r3, r3, #30
 800d542:	d413      	bmi.n	800d56c <_printf_i+0x230>
 800d544:	68e0      	ldr	r0, [r4, #12]
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	4298      	cmp	r0, r3
 800d54a:	bfb8      	it	lt
 800d54c:	4618      	movlt	r0, r3
 800d54e:	e7a6      	b.n	800d49e <_printf_i+0x162>
 800d550:	2301      	movs	r3, #1
 800d552:	4632      	mov	r2, r6
 800d554:	4649      	mov	r1, r9
 800d556:	4640      	mov	r0, r8
 800d558:	47d0      	blx	sl
 800d55a:	3001      	adds	r0, #1
 800d55c:	d09d      	beq.n	800d49a <_printf_i+0x15e>
 800d55e:	3501      	adds	r5, #1
 800d560:	68e3      	ldr	r3, [r4, #12]
 800d562:	9903      	ldr	r1, [sp, #12]
 800d564:	1a5b      	subs	r3, r3, r1
 800d566:	42ab      	cmp	r3, r5
 800d568:	dcf2      	bgt.n	800d550 <_printf_i+0x214>
 800d56a:	e7eb      	b.n	800d544 <_printf_i+0x208>
 800d56c:	2500      	movs	r5, #0
 800d56e:	f104 0619 	add.w	r6, r4, #25
 800d572:	e7f5      	b.n	800d560 <_printf_i+0x224>
 800d574:	0800df66 	.word	0x0800df66
 800d578:	0800df77 	.word	0x0800df77

0800d57c <memmove>:
 800d57c:	4288      	cmp	r0, r1
 800d57e:	b510      	push	{r4, lr}
 800d580:	eb01 0402 	add.w	r4, r1, r2
 800d584:	d902      	bls.n	800d58c <memmove+0x10>
 800d586:	4284      	cmp	r4, r0
 800d588:	4623      	mov	r3, r4
 800d58a:	d807      	bhi.n	800d59c <memmove+0x20>
 800d58c:	1e43      	subs	r3, r0, #1
 800d58e:	42a1      	cmp	r1, r4
 800d590:	d008      	beq.n	800d5a4 <memmove+0x28>
 800d592:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d59a:	e7f8      	b.n	800d58e <memmove+0x12>
 800d59c:	4601      	mov	r1, r0
 800d59e:	4402      	add	r2, r0
 800d5a0:	428a      	cmp	r2, r1
 800d5a2:	d100      	bne.n	800d5a6 <memmove+0x2a>
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5ae:	e7f7      	b.n	800d5a0 <memmove+0x24>

0800d5b0 <_sbrk_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4d05      	ldr	r5, [pc, #20]	@ (800d5cc <_sbrk_r+0x1c>)
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	602b      	str	r3, [r5, #0]
 800d5bc:	f7f6 fc00 	bl	8003dc0 <_sbrk>
 800d5c0:	1c43      	adds	r3, r0, #1
 800d5c2:	d102      	bne.n	800d5ca <_sbrk_r+0x1a>
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	b103      	cbz	r3, 800d5ca <_sbrk_r+0x1a>
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	2000171c 	.word	0x2000171c

0800d5d0 <memchr>:
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	b510      	push	{r4, lr}
 800d5d4:	b2c9      	uxtb	r1, r1
 800d5d6:	4402      	add	r2, r0
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	d101      	bne.n	800d5e2 <memchr+0x12>
 800d5de:	2000      	movs	r0, #0
 800d5e0:	e003      	b.n	800d5ea <memchr+0x1a>
 800d5e2:	7804      	ldrb	r4, [r0, #0]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	428c      	cmp	r4, r1
 800d5e8:	d1f6      	bne.n	800d5d8 <memchr+0x8>
 800d5ea:	bd10      	pop	{r4, pc}

0800d5ec <_realloc_r>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4615      	mov	r5, r2
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	b921      	cbnz	r1, 800d602 <_realloc_r+0x16>
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fe:	f7ff bc47 	b.w	800ce90 <_malloc_r>
 800d602:	b92a      	cbnz	r2, 800d610 <_realloc_r+0x24>
 800d604:	f7ff fbda 	bl	800cdbc <_free_r>
 800d608:	2400      	movs	r4, #0
 800d60a:	4620      	mov	r0, r4
 800d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d610:	f000 f81a 	bl	800d648 <_malloc_usable_size_r>
 800d614:	4285      	cmp	r5, r0
 800d616:	4606      	mov	r6, r0
 800d618:	d802      	bhi.n	800d620 <_realloc_r+0x34>
 800d61a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d61e:	d8f4      	bhi.n	800d60a <_realloc_r+0x1e>
 800d620:	4629      	mov	r1, r5
 800d622:	4640      	mov	r0, r8
 800d624:	f7ff fc34 	bl	800ce90 <_malloc_r>
 800d628:	4607      	mov	r7, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0ec      	beq.n	800d608 <_realloc_r+0x1c>
 800d62e:	42b5      	cmp	r5, r6
 800d630:	462a      	mov	r2, r5
 800d632:	4621      	mov	r1, r4
 800d634:	bf28      	it	cs
 800d636:	4632      	movcs	r2, r6
 800d638:	f7ff fbb2 	bl	800cda0 <memcpy>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4640      	mov	r0, r8
 800d640:	f7ff fbbc 	bl	800cdbc <_free_r>
 800d644:	463c      	mov	r4, r7
 800d646:	e7e0      	b.n	800d60a <_realloc_r+0x1e>

0800d648 <_malloc_usable_size_r>:
 800d648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64c:	1f18      	subs	r0, r3, #4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bfbc      	itt	lt
 800d652:	580b      	ldrlt	r3, [r1, r0]
 800d654:	18c0      	addlt	r0, r0, r3
 800d656:	4770      	bx	lr

0800d658 <_init>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr

0800d664 <_fini>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	bf00      	nop
 800d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66a:	bc08      	pop	{r3}
 800d66c:	469e      	mov	lr, r3
 800d66e:	4770      	bx	lr


FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d044  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  0800d150  0800d150  0000e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da5c  0800da5c  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800da5c  0800da5c  0000f1f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da5c  0800da5c  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da5c  0800da5c  0000ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da60  0800da60  0000ea60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800da64  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800dc58  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800dc58  0000f724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a73a  00000000  00000000  0000f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c9  00000000  00000000  00029957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b7  00000000  00000000  0002fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c735  00000000  00000000  0003116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e8c  00000000  00000000  0004d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948ad  00000000  00000000  0006e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00103020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0010a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d138 	.word	0x0800d138

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d138 	.word	0x0800d138

0800014c <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f003 fd21 	bl	8003ba0 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	4619      	mov	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f004 fb16 	bl	8004838 <HAL_I2C_Master_Transmit>
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	@ 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	@ 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	@ 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	@ 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	@ 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	@ 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3314      	adds	r3, #20
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3354      	adds	r3, #84	@ 0x54
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff fefa 	bl	8000166 <CLCD_WriteI2C>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	460b      	mov	r3, r1
 8000384:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f7ff feea 	bl	8000166 <CLCD_WriteI2C>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003a4:	e007      	b.n	80003b6 <CLCD_I2C_WriteString+0x1c>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	1c5a      	adds	r2, r3, #1
 80003aa:	603a      	str	r2, [r7, #0]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ffe2 	bl	800037a <CLCD_I2C_WriteChar>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f3      	bne.n	80003a6 <CLCD_I2C_WriteString+0xc>
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff fec6 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003da:	2005      	movs	r0, #5
 80003dc:	f7ff feb6 	bl	800014c <CLCD_Delay>
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	f7ff ffe7 	bl	80003c8 <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	f7ff ff78 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f7ff ffc7 	bl	800039a <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2100      	movs	r1, #0
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff6f 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffbe 	bl	800039a <CLCD_I2C_WriteString>
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000430:	2204      	movs	r2, #4
 8000432:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000436:	2204      	movs	r2, #4
 8000438:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	75fb      	strb	r3, [r7, #23]
 800043e:	e022      	b.n	8000486 <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 800044c:	7dfb      	ldrb	r3, [r7, #23]
 800044e:	4a23      	ldr	r2, [pc, #140]	@ (80004dc <KeyPad_Init+0xb4>)
 8000450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000454:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 8000456:	7dfb      	ldrb	r3, [r7, #23]
 8000458:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <KeyPad_Init+0xb8>)
 800045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fece 	bl	8004204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	4a1d      	ldr	r2, [pc, #116]	@ (80004e0 <KeyPad_Init+0xb8>)
 800046c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	4a1a      	ldr	r2, [pc, #104]	@ (80004dc <KeyPad_Init+0xb4>)
 8000474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 f85d 	bl	800453a <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	3301      	adds	r3, #1
 8000484:	75fb      	strb	r3, [r7, #23]
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	7dfa      	ldrb	r2, [r7, #23]
 800048c:	429a      	cmp	r2, r3
 800048e:	d3d7      	bcc.n	8000440 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000490:	2300      	movs	r3, #0
 8000492:	75bb      	strb	r3, [r7, #22]
 8000494:	e016      	b.n	80004c4 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004a2:	7dbb      	ldrb	r3, [r7, #22]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <KeyPad_Init+0xbc>)
 80004a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004aa:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004ac:	7dbb      	ldrb	r3, [r7, #22]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <KeyPad_Init+0xc0>)
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	1d3a      	adds	r2, r7, #4
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fea3 	bl	8004204 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004be:	7dbb      	ldrb	r3, [r7, #22]
 80004c0:	3301      	adds	r3, #1
 80004c2:	75bb      	strb	r3, [r7, #22]
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <KeyPad_Init+0xb0>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	7dba      	ldrb	r2, [r7, #22]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3e3      	bcc.n	8000496 <KeyPad_Init+0x6e>
  }
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000214 	.word	0x20000214
 80004dc:	0800da00 	.word	0x0800da00
 80004e0:	20000000 	.word	0x20000000
 80004e4:	0800da08 	.word	0x0800da08
 80004e8:	20000010 	.word	0x20000010

080004ec <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	e07e      	b.n	80005fa <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	e00e      	b.n	8000520 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	4a42      	ldr	r2, [pc, #264]	@ (8000610 <KeyPad_Scan+0x124>)
 8000506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4a41      	ldr	r2, [pc, #260]	@ (8000614 <KeyPad_Scan+0x128>)
 800050e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	f004 f810 	bl	800453a <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	3301      	adds	r3, #1
 800051e:	71bb      	strb	r3, [r7, #6]
 8000520:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <KeyPad_Scan+0x12c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	79ba      	ldrb	r2, [r7, #6]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3eb      	bcc.n	8000502 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4a38      	ldr	r2, [pc, #224]	@ (8000610 <KeyPad_Scan+0x124>)
 800052e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a37      	ldr	r2, [pc, #220]	@ (8000614 <KeyPad_Scan+0x128>)
 8000536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	f003 fffc 	bl	800453a <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000542:	2005      	movs	r0, #5
 8000544:	f003 fb2c 	bl	8003ba0 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000548:	2300      	movs	r3, #0
 800054a:	717b      	strb	r3, [r7, #5]
 800054c:	e04d      	b.n	80005ea <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 800054e:	797b      	ldrb	r3, [r7, #5]
 8000550:	4a32      	ldr	r2, [pc, #200]	@ (800061c <KeyPad_Scan+0x130>)
 8000552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	4931      	ldr	r1, [pc, #196]	@ (8000620 <KeyPad_Scan+0x134>)
 800055a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f003 ffd3 	bl	800450c <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d13b      	bne.n	80005e4 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800056c:	2014      	movs	r0, #20
 800056e:	f003 fb17 	bl	8003ba0 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <KeyPad_Scan+0x130>)
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	4928      	ldr	r1, [pc, #160]	@ (8000620 <KeyPad_Scan+0x134>)
 800057e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f003 ffc1 	bl	800450c <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d129      	bne.n	80005e4 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2201      	movs	r2, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	b21a      	sxth	r2, r3
 800059a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	3308      	adds	r3, #8
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ba:	e002      	b.n	80005c2 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005bc:	2005      	movs	r0, #5
 80005be:	f003 faef 	bl	8003ba0 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <KeyPad_Scan+0x130>)
 80005c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ca:	797b      	ldrb	r3, [r7, #5]
 80005cc:	4914      	ldr	r1, [pc, #80]	@ (8000620 <KeyPad_Scan+0x134>)
 80005ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4610      	mov	r0, r2
 80005d6:	f003 ff99 	bl	800450c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0ed      	beq.n	80005bc <KeyPad_Scan+0xd0>
          return key;
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	e011      	b.n	8000608 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	3301      	adds	r3, #1
 80005e8:	717b      	strb	r3, [r7, #5]
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	797a      	ldrb	r2, [r7, #5]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ac      	bcc.n	800054e <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3301      	adds	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	429a      	cmp	r2, r3
 8000602:	f4ff af7b 	bcc.w	80004fc <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 8000606:	887b      	ldrh	r3, [r7, #2]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	0800da00 	.word	0x0800da00
 8000618:	20000214 	.word	0x20000214
 800061c:	20000010 	.word	0x20000010
 8000620:	0800da08 	.word	0x0800da08

08000624 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 800062c:	e00e      	b.n	800064c <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 800062e:	f7ff ff5d 	bl	80004ec <KeyPad_Scan>
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000636:	897b      	ldrh	r3, [r7, #10]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 800063c:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800063e:	897b      	ldrh	r3, [r7, #10]
 8000640:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	e024      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000646:	2014      	movs	r0, #20
 8000648:	f003 faaa 	bl	8003ba0 <HAL_Delay>
  while(Timeout_ms==0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0ed      	beq.n	800062e <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000652:	f003 fa9b 	bl	8003b8c <HAL_GetTick>
 8000656:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000658:	e00e      	b.n	8000678 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800065a:	f7ff ff47 	bl	80004ec <KeyPad_Scan>
 800065e:	4603      	mov	r3, r0
 8000660:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	8053      	strh	r3, [r2, #2]
			return keyRead;
 800066e:	897b      	ldrh	r3, [r7, #10]
 8000670:	e00e      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000672:	2014      	movs	r0, #20
 8000674:	f003 fa94 	bl	8003ba0 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000678:	f003 fa88 	bl	8003b8c <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e8      	bhi.n	800065a <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	805a      	strh	r2, [r3, #2]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000214 	.word	0x20000214

0800069c <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffbd 	bl	8000624 <KeyPad_WaitForKey>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f640 0208 	movw	r2, #2056	@ 0x808
 80006b0:	4293      	cmp	r3, r2
 80006b2:	f300 809f 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ba:	dc1a      	bgt.n	80006f2 <KeyPad_WaitForKeyGetChar+0x56>
 80006bc:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006c0:	f300 8098 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006c8:	dc2a      	bgt.n	8000720 <KeyPad_WaitForKeyGetChar+0x84>
 80006ca:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006ce:	f300 8091 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006d6:	dc3b      	bgt.n	8000750 <KeyPad_WaitForKeyGetChar+0xb4>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d069      	beq.n	80007b0 <KeyPad_WaitForKeyGetChar+0x114>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f2c0 8089 	blt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006e2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006e6:	f300 8085 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006ee:	dc47      	bgt.n	8000780 <KeyPad_WaitForKeyGetChar+0xe4>
 80006f0:	e080      	b.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006f2:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d87c      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <KeyPad_WaitForKeyGetChar+0x64>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	080007c1 	.word	0x080007c1
 8000704:	080007d1 	.word	0x080007d1
 8000708:	080007f5 	.word	0x080007f5
 800070c:	080007e1 	.word	0x080007e1
 8000710:	080007f5 	.word	0x080007f5
 8000714:	080007f5 	.word	0x080007f5
 8000718:	080007f5 	.word	0x080007f5
 800071c:	080007f1 	.word	0x080007f1
 8000720:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000724:	2b07      	cmp	r3, #7
 8000726:	d865      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000728:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <KeyPad_WaitForKeyGetChar+0x94>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007cd 	.word	0x080007cd
 8000738:	080007f5 	.word	0x080007f5
 800073c:	080007dd 	.word	0x080007dd
 8000740:	080007f5 	.word	0x080007f5
 8000744:	080007f5 	.word	0x080007f5
 8000748:	080007f5 	.word	0x080007f5
 800074c:	080007ed 	.word	0x080007ed
 8000750:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000754:	2b07      	cmp	r3, #7
 8000756:	d84d      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000758:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <KeyPad_WaitForKeyGetChar+0xc4>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007c9 	.word	0x080007c9
 8000768:	080007f5 	.word	0x080007f5
 800076c:	080007d9 	.word	0x080007d9
 8000770:	080007f5 	.word	0x080007f5
 8000774:	080007f5 	.word	0x080007f5
 8000778:	080007f5 	.word	0x080007f5
 800077c:	080007e9 	.word	0x080007e9
 8000780:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000784:	2b07      	cmp	r3, #7
 8000786:	d835      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000788:	a201      	add	r2, pc, #4	@ (adr r2, 8000790 <KeyPad_WaitForKeyGetChar+0xf4>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007f5 	.word	0x080007f5
 800079c:	080007d5 	.word	0x080007d5
 80007a0:	080007f5 	.word	0x080007f5
 80007a4:	080007f5 	.word	0x080007f5
 80007a8:	080007f5 	.word	0x080007f5
 80007ac:	080007e5 	.word	0x080007e5
  {
    case 0x0000:
      return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e020      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007b4:	2331      	movs	r3, #49	@ 0x31
 80007b6:	e01e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007b8:	2332      	movs	r3, #50	@ 0x32
 80007ba:	e01c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007bc:	2333      	movs	r3, #51	@ 0x33
 80007be:	e01a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007c0:	2341      	movs	r3, #65	@ 0x41
 80007c2:	e018      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007c4:	2334      	movs	r3, #52	@ 0x34
 80007c6:	e016      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007c8:	2335      	movs	r3, #53	@ 0x35
 80007ca:	e014      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007cc:	2336      	movs	r3, #54	@ 0x36
 80007ce:	e012      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007d0:	2342      	movs	r3, #66	@ 0x42
 80007d2:	e010      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007d4:	2337      	movs	r3, #55	@ 0x37
 80007d6:	e00e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007d8:	2338      	movs	r3, #56	@ 0x38
 80007da:	e00c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007dc:	2339      	movs	r3, #57	@ 0x39
 80007de:	e00a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007e0:	2343      	movs	r3, #67	@ 0x43
 80007e2:	e008      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007e4:	232a      	movs	r3, #42	@ 0x2a
 80007e6:	e006      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007e8:	2330      	movs	r3, #48	@ 0x30
 80007ea:	e004      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 80007ec:	2323      	movs	r3, #35	@ 0x23
 80007ee:	e002      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 80007f0:	2344      	movs	r3, #68	@ 0x44
 80007f2:	e000      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 80007f4:	2300      	movs	r3, #0
	}
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop

08000800 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800080a:	1df9      	adds	r1, r7, #7
 800080c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000810:	2201      	movs	r2, #1
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <USART_SendByte+0x20>)
 8000814:	f007 fa87 	bl	8007d26 <HAL_UART_Transmit>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000310 	.word	0x20000310

08000824 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 800082e:	bf00      	nop
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	b29a      	uxth	r2, r3
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <receive_finger+0x3c>)
 800083e:	f007 fb04 	bl	8007e4a <HAL_UART_Receive>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f3      	beq.n	8000830 <receive_finger+0xc>
	//HAL_UART_Receive(&huart1,D,len,500);
	p=D[len-3];
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	3b03      	subs	r3, #3
 800084c:	3318      	adds	r3, #24
 800084e:	443b      	add	r3, r7
 8000850:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000854:	75fb      	strb	r3, [r7, #23]
	return p;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000310 	.word	0x20000310

08000864 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,1000);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b29a      	uxth	r2, r3
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <receive_finger_match+0x34>)
 800087c:	f007 fae5 	bl	8007e4a <HAL_UART_Receive>
	p=D[len-5];
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b05      	subs	r3, #5
 8000884:	3318      	adds	r3, #24
 8000886:	443b      	add	r3, r7
 8000888:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800088c:	75fb      	strb	r3, [r7, #23]
	return p;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000310 	.word	0x20000310

0800089c <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,200);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	23c8      	movs	r3, #200	@ 0xc8
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <receive_finger_search+0x38>)
 80008b2:	f007 faca 	bl	8007e4a <HAL_UART_Receive>
	p=D[len-7];
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3b07      	subs	r3, #7
 80008ba:	3320      	adds	r3, #32
 80008bc:	443b      	add	r3, r7
 80008be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008c2:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008c4:	7dfa      	ldrb	r2, [r7, #23]
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <receive_finger_search+0x3c>)
 80008c8:	701a      	strb	r2, [r3, #0]

	return p;
 80008ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000310 	.word	0x20000310
 80008d8:	20000218 	.word	0x20000218

080008dc <collect_finger>:
int collect_finger(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008e0:	20ef      	movs	r0, #239	@ 0xef
 80008e2:	f7ff ff8d 	bl	8000800 <USART_SendByte>
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff8a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80008ec:	20ff      	movs	r0, #255	@ 0xff
 80008ee:	f7ff ff87 	bl	8000800 <USART_SendByte>
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	f7ff ff84 	bl	8000800 <USART_SendByte>
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	f7ff ff81 	bl	8000800 <USART_SendByte>
 80008fe:	20ff      	movs	r0, #255	@ 0xff
 8000900:	f7ff ff7e 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff ff7b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff78 	bl	8000800 <USART_SendByte>
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff75 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff ff72 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff6f 	bl	8000800 <USART_SendByte>
 8000922:	2005      	movs	r0, #5
 8000924:	f7ff ff6c 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff7b 	bl	8000824 <receive_finger>
 800092e:	4603      	mov	r3, r0
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}

08000934 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3307      	adds	r3, #7
 8000946:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000948:	20ef      	movs	r0, #239	@ 0xef
 800094a:	f7ff ff59 	bl	8000800 <USART_SendByte>
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff56 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000954:	20ff      	movs	r0, #255	@ 0xff
 8000956:	f7ff ff53 	bl	8000800 <USART_SendByte>
 800095a:	20ff      	movs	r0, #255	@ 0xff
 800095c:	f7ff ff50 	bl	8000800 <USART_SendByte>
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	f7ff ff4d 	bl	8000800 <USART_SendByte>
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	f7ff ff4a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff47 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff44 	bl	8000800 <USART_SendByte>
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff ff41 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x02);
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff3e 	bl	8000800 <USART_SendByte>
   USART_SendByte(local);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff3a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff37 	bl	8000800 <USART_SendByte>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff32 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 800099c:	200c      	movs	r0, #12
 800099e:	f7ff ff41 	bl	8000824 <receive_finger>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009b0:	20ef      	movs	r0, #239	@ 0xef
 80009b2:	f7ff ff25 	bl	8000800 <USART_SendByte>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff22 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	f7ff ff1f 	bl	8000800 <USART_SendByte>
 80009c2:	20ff      	movs	r0, #255	@ 0xff
 80009c4:	f7ff ff1c 	bl	8000800 <USART_SendByte>
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	f7ff ff19 	bl	8000800 <USART_SendByte>
 80009ce:	20ff      	movs	r0, #255	@ 0xff
 80009d0:	f7ff ff16 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff13 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ff10 	bl	8000800 <USART_SendByte>
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff ff0d 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x03);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff ff0a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ff07 	bl	8000800 <USART_SendByte>
 80009f2:	2007      	movs	r0, #7
 80009f4:	f7ff ff04 	bl	8000800 <USART_SendByte>
   return receive_finger_match(14);
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff33 	bl	8000864 <receive_finger_match>
 80009fe:	4603      	mov	r3, r0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a08:	20ef      	movs	r0, #239	@ 0xef
 8000a0a:	f7ff fef9 	bl	8000800 <USART_SendByte>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef6 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a14:	20ff      	movs	r0, #255	@ 0xff
 8000a16:	f7ff fef3 	bl	8000800 <USART_SendByte>
 8000a1a:	20ff      	movs	r0, #255	@ 0xff
 8000a1c:	f7ff fef0 	bl	8000800 <USART_SendByte>
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	f7ff feed 	bl	8000800 <USART_SendByte>
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	f7ff feea 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fee7 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fee4 	bl	8000800 <USART_SendByte>
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fee1 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x05);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f7ff fede 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fedb 	bl	8000800 <USART_SendByte>
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f7ff fed8 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000a50:	200c      	movs	r0, #12
 8000a52:	f7ff fee7 	bl	8000824 <receive_finger>
 8000a56:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	330e      	adds	r3, #14
 8000a6a:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a6c:	20ef      	movs	r0, #239	@ 0xef
 8000a6e:	f7ff fec7 	bl	8000800 <USART_SendByte>
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fec4 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a78:	20ff      	movs	r0, #255	@ 0xff
 8000a7a:	f7ff fec1 	bl	8000800 <USART_SendByte>
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	f7ff febe 	bl	8000800 <USART_SendByte>
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	f7ff febb 	bl	8000800 <USART_SendByte>
 8000a8a:	20ff      	movs	r0, #255	@ 0xff
 8000a8c:	f7ff feb8 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff feb5 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff feb2 	bl	8000800 <USART_SendByte>
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff feaf 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x06);
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f7ff feac 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fea9 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fea6 	bl	8000800 <USART_SendByte>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fea2 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe9f 	bl	8000800 <USART_SendByte>
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe9b 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f7ff feaa 	bl	8000824 <receive_finger>
 8000ad0:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000ade:	20ef      	movs	r0, #239	@ 0xef
 8000ae0:	f7ff fe8e 	bl	8000800 <USART_SendByte>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe8b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000aea:	20ff      	movs	r0, #255	@ 0xff
 8000aec:	f7ff fe88 	bl	8000800 <USART_SendByte>
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	f7ff fe85 	bl	8000800 <USART_SendByte>
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	f7ff fe82 	bl	8000800 <USART_SendByte>
 8000afc:	20ff      	movs	r0, #255	@ 0xff
 8000afe:	f7ff fe7f 	bl	8000800 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe7c 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe79 	bl	8000800 <USART_SendByte>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	f7ff fe76 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x04);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fe73 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fe70 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fe6d 	bl	8000800 <USART_SendByte>
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe6a 	bl	8000800 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fe67 	bl	8000800 <USART_SendByte>
 8000b32:	20ff      	movs	r0, #255	@ 0xff
 8000b34:	f7ff fe64 	bl	8000800 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fe61 	bl	8000800 <USART_SendByte>
 8000b3e:	200d      	movs	r0, #13
 8000b40:	f7ff fe5e 	bl	8000800 <USART_SendByte>
   return receive_finger_search(16);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f7ff fea9 	bl	800089c <receive_finger_search>
 8000b4a:	4603      	mov	r3, r0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b58:	f003 f9c4 	bl	8003ee4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000b6c:	f107 020c 	add.w	r2, r7, #12
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fa9c 	bl	80040b4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000b7c:	f003 f9d8 	bl	8003f30 <HAL_FLASH_Lock>
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000b94:	f003 f9a6 	bl	8003ee4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f003 f92c 	bl	8003e04 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000bac:	f003 f9c0 	bl	8003f30 <HAL_FLASH_Lock>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}

08000bb8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000bc6:	f003 f98d 	bl	8003ee4 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	e00c      	b.n	8000bea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000bd0:	8afa      	ldrh	r2, [r7, #22]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	18d0      	adds	r0, r2, r3
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff ffd2 	bl	8000b88 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	3302      	adds	r3, #2
 8000be8:	82fb      	strh	r3, [r7, #22]
 8000bea:	8afa      	ldrh	r2, [r7, #22]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3ee      	bcc.n	8000bd0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000bf2:	f003 f99d 	bl	8003f30 <HAL_FLASH_Lock>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
 8000c5a:	e00c      	b.n	8000c76 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000c5c:	8afa      	ldrh	r2, [r7, #22]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	8afb      	ldrh	r3, [r7, #22]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	780a      	ldrb	r2, [r1, #0]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3ee      	bcc.n	8000c5c <Flash_Read_Array+0x14>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000ca8:	e002      	b.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000020 	.word	0x20000020

08000cc0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000cc6:	f7ff fe09 	bl	80008dc <collect_finger>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <check_fingerprint_status+0x24>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    }
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000409 	.word	0x20000409

08000ce8 <process_fingerprint>:
void process_fingerprint()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000cfa:	f002 f90b 	bl	8002f14 <read_finger>
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000409 	.word	0x20000409

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f002 fee5 	bl	8003adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f8d3 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 fa09 	bl	800112c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d1a:	f000 f959 	bl	8000fd0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d1e:	f000 f929 	bl	8000f74 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d22:	f000 f9d9 	bl	80010d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d26:	f000 f989 	bl	800103c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d2a:	f00b f8ab 	bl	800be84 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000d2e:	f002 fa7b 	bl	8003228 <TM_MFRC522_Init>
  KeyPad_Init();
 8000d32:	f7ff fb79 	bl	8000428 <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000d36:	2302      	movs	r3, #2
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	224e      	movs	r2, #78	@ 0x4e
 8000d3e:	4955      	ldr	r1, [pc, #340]	@ (8000e94 <main+0x18c>)
 8000d40:	4855      	ldr	r0, [pc, #340]	@ (8000e98 <main+0x190>)
 8000d42:	f7ff fa67 	bl	8000214 <CLCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 8000d46:	4855      	ldr	r0, [pc, #340]	@ (8000e9c <main+0x194>)
 8000d48:	f006 fbf6 	bl	8007538 <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 8000d4c:	f001 fdb8 	bl	80028c0 <checkcountUID>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <main+0x52>
	{
		startadd();
 8000d56:	f001 ff3f 	bl	8002bd8 <startadd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	484e      	ldr	r0, [pc, #312]	@ (8000e98 <main+0x190>)
 8000d60:	f7ff fac8 	bl	80002f4 <CLCD_I2C_SetCursor>
      CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000d64:	494e      	ldr	r1, [pc, #312]	@ (8000ea0 <main+0x198>)
 8000d66:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <main+0x190>)
 8000d68:	f7ff fb17 	bl	800039a <CLCD_I2C_WriteString>

      char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f7ff fc95 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71bb      	strb	r3, [r7, #6]

      if (selected_key != 0)
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d056      	beq.n	8000e2a <main+0x122>
      {
          uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
          exitmenu = 15;
 8000d80:	4b48      	ldr	r3, [pc, #288]	@ (8000ea4 <main+0x19c>)
 8000d82:	220f      	movs	r2, #15
 8000d84:	701a      	strb	r2, [r3, #0]

          switch (selected_key)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	3b41      	subs	r3, #65	@ 0x41
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d87b      	bhi.n	8000e86 <main+0x17e>
          {
          case 'A': // RFID
          case 'B': // FACEID
          case 'C': // FINGER
          case 'D': // PASSWORD
              CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2100      	movs	r1, #0
 8000d92:	4841      	ldr	r0, [pc, #260]	@ (8000e98 <main+0x190>)
 8000d94:	f7ff faae 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000d98:	4943      	ldr	r1, [pc, #268]	@ (8000ea8 <main+0x1a0>)
 8000d9a:	483f      	ldr	r0, [pc, #252]	@ (8000e98 <main+0x190>)
 8000d9c:	f7ff fafd 	bl	800039a <CLCD_I2C_WriteString>

              while (exitmenu)
 8000da0:	e00e      	b.n	8000dc0 <main+0xb8>
              {
                  if (TM_MFRC522_Check(CardID) == MI_OK)
 8000da2:	4842      	ldr	r0, [pc, #264]	@ (8000eac <main+0x1a4>)
 8000da4:	f002 fa64 	bl	8003270 <TM_MFRC522_Check>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <main+0xb8>
                  {
                      key = CheckListUID(CardID);
 8000dae:	483f      	ldr	r0, [pc, #252]	@ (8000eac <main+0x1a4>)
 8000db0:	f001 fd56 	bl	8002860 <CheckListUID>
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
                      key = key >> 4;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	71fb      	strb	r3, [r7, #7]
                      break;
 8000dbe:	e003      	b.n	8000dc8 <main+0xc0>
              while (exitmenu)
 8000dc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <main+0x19c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1ec      	bne.n	8000da2 <main+0x9a>
                  }
              }

              switch (key)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d117      	bne.n	8000dfe <main+0xf6>
              {
              case 1:
                  if (selected_key == 'A')
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b41      	cmp	r3, #65	@ 0x41
 8000dd2:	d102      	bne.n	8000dda <main+0xd2>
                      RFID();
 8000dd4:	f000 fa58 	bl	8001288 <RFID>
                      FACEID();
                  else if (selected_key == 'C')
                      FINGER();
                  else if (selected_key == 'D')
                      PASSWORD();
                  break;
 8000dd8:	e025      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'B')
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	2b42      	cmp	r3, #66	@ 0x42
 8000dde:	d102      	bne.n	8000de6 <main+0xde>
                      FACEID();
 8000de0:	f001 f944 	bl	800206c <FACEID>
                  break;
 8000de4:	e01f      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'C')
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b43      	cmp	r3, #67	@ 0x43
 8000dea:	d102      	bne.n	8000df2 <main+0xea>
                      FINGER();
 8000dec:	f001 fd00 	bl	80027f0 <FINGER>
                  break;
 8000df0:	e019      	b.n	8000e26 <main+0x11e>
                  else if (selected_key == 'D')
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b44      	cmp	r3, #68	@ 0x44
 8000df6:	d116      	bne.n	8000e26 <main+0x11e>
                      PASSWORD();
 8000df8:	f001 fd00 	bl	80027fc <PASSWORD>
                  break;
 8000dfc:	e013      	b.n	8000e26 <main+0x11e>
              default:
                  CLCD_I2C_Clear(&LCD1);
 8000dfe:	4826      	ldr	r0, [pc, #152]	@ (8000e98 <main+0x190>)
 8000e00:	f7ff fae2 	bl	80003c8 <CLCD_I2C_Clear>
                  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	4823      	ldr	r0, [pc, #140]	@ (8000e98 <main+0x190>)
 8000e0a:	f7ff fa73 	bl	80002f4 <CLCD_I2C_SetCursor>
                  CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8000e0e:	4928      	ldr	r1, [pc, #160]	@ (8000eb0 <main+0x1a8>)
 8000e10:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <main+0x190>)
 8000e12:	f7ff fac2 	bl	800039a <CLCD_I2C_WriteString>
                  HAL_Delay(2000);
 8000e16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e1a:	f002 fec1 	bl	8003ba0 <HAL_Delay>
                  CLCD_I2C_Clear(&LCD1);
 8000e1e:	481e      	ldr	r0, [pc, #120]	@ (8000e98 <main+0x190>)
 8000e20:	f7ff fad2 	bl	80003c8 <CLCD_I2C_Clear>
                  break;
 8000e24:	e000      	b.n	8000e28 <main+0x120>
                  break;
 8000e26:	bf00      	nop
              }
              break;
 8000e28:	e02e      	b.n	8000e88 <main+0x180>

          default:
              break;
          }
      }
      else if (TM_MFRC522_Check(CardID) == MI_OK)
 8000e2a:	4820      	ldr	r0, [pc, #128]	@ (8000eac <main+0x1a4>)
 8000e2c:	f002 fa20 	bl	8003270 <TM_MFRC522_Check>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d128      	bne.n	8000e88 <main+0x180>
      {
          if (CheckListUID(CardID) != 0)
 8000e36:	481d      	ldr	r0, [pc, #116]	@ (8000eac <main+0x1a4>)
 8000e38:	f001 fd12 	bl	8002860 <CheckListUID>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <main+0x15c>
          {
              CLCD_I2C_Clear(&LCD1);
 8000e42:	4815      	ldr	r0, [pc, #84]	@ (8000e98 <main+0x190>)
 8000e44:	f7ff fac0 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <main+0x190>)
 8000e4e:	f7ff fa51 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8000e52:	4918      	ldr	r1, [pc, #96]	@ (8000eb4 <main+0x1ac>)
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <main+0x190>)
 8000e56:	f7ff faa0 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(500);
 8000e5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e5e:	f002 fe9f 	bl	8003ba0 <HAL_Delay>
 8000e62:	e011      	b.n	8000e88 <main+0x180>
          }
          else
          {
              CLCD_I2C_Clear(&LCD1);
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <main+0x190>)
 8000e66:	f7ff faaf 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <main+0x190>)
 8000e70:	f7ff fa40 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <main+0x1b0>)
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <main+0x190>)
 8000e78:	f7ff fa8f 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(3000);
 8000e7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e80:	f002 fe8e 	bl	8003ba0 <HAL_Delay>
 8000e84:	e000      	b.n	8000e88 <main+0x180>
              break;
 8000e86:	bf00      	nop
          }
      }

      // Kiểm tra trạng thái vân tay định kỳ
      check_fingerprint_status();
 8000e88:	f7ff ff1a 	bl	8000cc0 <check_fingerprint_status>

      // Xử lý vân tay nếu phát hiện
      process_fingerprint();
 8000e8c:	f7ff ff2c 	bl	8000ce8 <process_fingerprint>
  {
 8000e90:	e763      	b.n	8000d5a <main+0x52>
 8000e92:	bf00      	nop
 8000e94:	2000021c 	.word	0x2000021c
 8000e98:	200003d8 	.word	0x200003d8
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	0800d150 	.word	0x0800d150
 8000ea4:	20000020 	.word	0x20000020
 8000ea8:	0800d160 	.word	0x0800d160
 8000eac:	200003e4 	.word	0x200003e4
 8000eb0:	0800d170 	.word	0x0800d170
 8000eb4:	0800d180 	.word	0x0800d180
 8000eb8:	0800d18c 	.word	0x0800d18c

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec6:	2228      	movs	r2, #40	@ 0x28
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00b fca4 	bl	800c818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efa:	2301      	movs	r3, #1
 8000efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fb24 	bl	8006560 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f1e:	f002 f955 	bl	80031cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fd90 	bl	8006a64 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f4a:	f002 f93f 	bl	80031cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 ff1a 	bl	8006d94 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f66:	f002 f931 	bl	80031cc <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	@ 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f003 fafd 	bl	80045b0 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f002 f906 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_SPI1_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001004:	2230      	movs	r2, #48	@ 0x30
 8001006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001022:	f005 ff6d 	bl	8006f00 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800102c:	f002 f8ce 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000270 	.word	0x20000270
 8001038:	40013000 	.word	0x40013000

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001062:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001070:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001084:	f006 fa08 	bl	8007498 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800108e:	f002 f89d 	bl	80031cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010a0:	f006 fba4 	bl	80077ec <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010aa:	f002 f88f 	bl	80031cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010bc:	f006 fd76 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f002 f881 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002c8 	.word	0x200002c8

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART1_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001110:	f006 fdbc 	bl	8007c8c <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f002 f857 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000310 	.word	0x20000310
 8001128:	40013800 	.word	0x40013800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b4c      	ldr	r3, [pc, #304]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a4b      	ldr	r2, [pc, #300]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b49      	ldr	r3, [pc, #292]	@ (8001274 <MX_GPIO_Init+0x148>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <MX_GPIO_Init+0x148>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a45      	ldr	r2, [pc, #276]	@ (8001274 <MX_GPIO_Init+0x148>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b40      	ldr	r3, [pc, #256]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a3f      	ldr	r2, [pc, #252]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <MX_GPIO_Init+0x148>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <MX_GPIO_Init+0x148>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a39      	ldr	r2, [pc, #228]	@ (8001274 <MX_GPIO_Init+0x148>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <MX_GPIO_Init+0x148>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|buzzer_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80011a6:	4834      	ldr	r0, [pc, #208]	@ (8001278 <MX_GPIO_Init+0x14c>)
 80011a8:	f003 f9c7 	bl	800453a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24f 0108 	movw	r1, #61448	@ 0xf008
 80011b2:	4832      	ldr	r0, [pc, #200]	@ (800127c <MX_GPIO_Init+0x150>)
 80011b4:	f003 f9c1 	bl	800453a <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 80011b8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	482c      	ldr	r0, [pc, #176]	@ (8001280 <MX_GPIO_Init+0x154>)
 80011ce:	f003 f819 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 80011d2:	2303      	movs	r3, #3
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <MX_GPIO_Init+0x14c>)
 80011e6:	f003 f80d 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = CS_Pin|buzzer_Pin;
 80011ea:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	481d      	ldr	r0, [pc, #116]	@ (8001278 <MX_GPIO_Init+0x14c>)
 8001204:	f002 fffe 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001208:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <MX_GPIO_Init+0x150>)
 8001222:	f002 ffef 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <MX_GPIO_Init+0x150>)
 800123e:	f002 ffe1 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_GPIO_Init+0x158>)
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4809      	ldr	r0, [pc, #36]	@ (800127c <MX_GPIO_Init+0x150>)
 8001258:	f002 ffd4 	bl	8004204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	2017      	movs	r0, #23
 8001262:	f002 fd98 	bl	8003d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001266:	2017      	movs	r0, #23
 8001268:	f002 fdb1 	bl	8003dce <HAL_NVIC_EnableIRQ>

}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	10110000 	.word	0x10110000

08001288 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
	exitmenu = 15;
 800128e:	4ba3      	ldr	r3, [pc, #652]	@ (800151c <RFID+0x294>)
 8001290:	220f      	movs	r2, #15
 8001292:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8001294:	23ff      	movs	r3, #255	@ 0xff
 8001296:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 8001298:	4aa1      	ldr	r2, [pc, #644]	@ (8001520 <RFID+0x298>)
 800129a:	49a2      	ldr	r1, [pc, #648]	@ (8001524 <RFID+0x29c>)
 800129c:	48a2      	ldr	r0, [pc, #648]	@ (8001528 <RFID+0x2a0>)
 800129e:	f7ff f8a3 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80012a2:	f000 beaa 	b.w	8001ffa <RFID+0xd72>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f7ff f9f8 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80012ac:	4603      	mov	r3, r0
 80012ae:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012b4:	d12e      	bne.n	8001314 <RFID+0x8c>
		{
			exitmenu = 15;
 80012b6:	4b99      	ldr	r3, [pc, #612]	@ (800151c <RFID+0x294>)
 80012b8:	220f      	movs	r2, #15
 80012ba:	701a      	strb	r2, [r3, #0]
			status++;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	3301      	adds	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d801      	bhi.n	80012cc <RFID+0x44>
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	e000      	b.n	80012ce <RFID+0x46>
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d012      	beq.n	80012fc <RFID+0x74>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc16      	bgt.n	8001308 <RFID+0x80>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <RFID+0x5c>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d006      	beq.n	80012f0 <RFID+0x68>
 80012e2:	e011      	b.n	8001308 <RFID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80012e4:	4a91      	ldr	r2, [pc, #580]	@ (800152c <RFID+0x2a4>)
 80012e6:	498f      	ldr	r1, [pc, #572]	@ (8001524 <RFID+0x29c>)
 80012e8:	488f      	ldr	r0, [pc, #572]	@ (8001528 <RFID+0x2a0>)
 80012ea:	f7ff f87d 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80012ee:	e011      	b.n	8001314 <RFID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80012f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001530 <RFID+0x2a8>)
 80012f2:	498c      	ldr	r1, [pc, #560]	@ (8001524 <RFID+0x29c>)
 80012f4:	488c      	ldr	r0, [pc, #560]	@ (8001528 <RFID+0x2a0>)
 80012f6:	f7ff f877 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80012fa:	e00b      	b.n	8001314 <RFID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80012fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001534 <RFID+0x2ac>)
 80012fe:	4989      	ldr	r1, [pc, #548]	@ (8001524 <RFID+0x29c>)
 8001300:	4889      	ldr	r0, [pc, #548]	@ (8001528 <RFID+0x2a0>)
 8001302:	f7ff f871 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001306:	e005      	b.n	8001314 <RFID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 8001308:	4a8b      	ldr	r2, [pc, #556]	@ (8001538 <RFID+0x2b0>)
 800130a:	4986      	ldr	r1, [pc, #536]	@ (8001524 <RFID+0x29c>)
 800130c:	4886      	ldr	r0, [pc, #536]	@ (8001528 <RFID+0x2a0>)
 800130e:	f7ff f86b 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001312:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	2b23      	cmp	r3, #35	@ 0x23
 8001318:	f040 866f 	bne.w	8001ffa <RFID+0xd72>
		{
			exitmenu = 15;
 800131c:	4b7f      	ldr	r3, [pc, #508]	@ (800151c <RFID+0x294>)
 800131e:	220f      	movs	r2, #15
 8001320:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b02      	cmp	r3, #2
 8001326:	f000 865c 	beq.w	8001fe2 <RFID+0xd5a>
 800132a:	2b02      	cmp	r3, #2
 800132c:	f300 8661 	bgt.w	8001ff2 <RFID+0xd6a>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <RFID+0xb6>
 8001334:	2b01      	cmp	r3, #1
 8001336:	f000 8231 	beq.w	800179c <RFID+0x514>
 800133a:	f000 be5a 	b.w	8001ff2 <RFID+0xd6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800133e:	4a7f      	ldr	r2, [pc, #508]	@ (800153c <RFID+0x2b4>)
 8001340:	497f      	ldr	r1, [pc, #508]	@ (8001540 <RFID+0x2b8>)
 8001342:	4879      	ldr	r0, [pc, #484]	@ (8001528 <RFID+0x2a0>)
 8001344:	f7ff f850 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001350:	e219      	b.n	8001786 <RFID+0x4fe>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f7ff f9a2 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001358:	4603      	mov	r3, r0
 800135a:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800135c:	4b6f      	ldr	r3, [pc, #444]	@ (800151c <RFID+0x294>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <RFID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 8001364:	4870      	ldr	r0, [pc, #448]	@ (8001528 <RFID+0x2a0>)
 8001366:	f7ff f82f 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136e:	f002 fc17 	bl	8003ba0 <HAL_Delay>
						return;
 8001372:	f000 be4a 	b.w	800200a <RFID+0xd82>
					}
					if (key_pressed =='*')
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	2b2a      	cmp	r3, #42	@ 0x2a
 800137a:	d124      	bne.n	80013c6 <RFID+0x13e>
					{
						exitmenu = 15;
 800137c:	4b67      	ldr	r3, [pc, #412]	@ (800151c <RFID+0x294>)
 800137e:	220f      	movs	r2, #15
 8001380:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	3301      	adds	r3, #1
 8001386:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d801      	bhi.n	8001392 <RFID+0x10a>
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	e000      	b.n	8001394 <RFID+0x10c>
 8001392:	2300      	movs	r3, #0
 8001394:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001396:	7dbb      	ldrb	r3, [r7, #22]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d002      	beq.n	80013a2 <RFID+0x11a>
 800139c:	2b02      	cmp	r3, #2
 800139e:	d006      	beq.n	80013ae <RFID+0x126>
 80013a0:	e00b      	b.n	80013ba <RFID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80013a2:	4a68      	ldr	r2, [pc, #416]	@ (8001544 <RFID+0x2bc>)
 80013a4:	4968      	ldr	r1, [pc, #416]	@ (8001548 <RFID+0x2c0>)
 80013a6:	4860      	ldr	r0, [pc, #384]	@ (8001528 <RFID+0x2a0>)
 80013a8:	f7ff f81e 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013ac:	e00b      	b.n	80013c6 <RFID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80013ae:	4a67      	ldr	r2, [pc, #412]	@ (800154c <RFID+0x2c4>)
 80013b0:	4965      	ldr	r1, [pc, #404]	@ (8001548 <RFID+0x2c0>)
 80013b2:	485d      	ldr	r0, [pc, #372]	@ (8001528 <RFID+0x2a0>)
 80013b4:	f7ff f818 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013b8:	e005      	b.n	80013c6 <RFID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80013ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001538 <RFID+0x2b0>)
 80013bc:	4962      	ldr	r1, [pc, #392]	@ (8001548 <RFID+0x2c0>)
 80013be:	485a      	ldr	r0, [pc, #360]	@ (8001528 <RFID+0x2a0>)
 80013c0:	f7ff f812 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013c4:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	2b23      	cmp	r3, #35	@ 0x23
 80013ca:	f040 81dc 	bne.w	8001786 <RFID+0x4fe>
					{
						exitmenu = 15;
 80013ce:	4b53      	ldr	r3, [pc, #332]	@ (800151c <RFID+0x294>)
 80013d0:	220f      	movs	r2, #15
 80013d2:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d003      	beq.n	80013e2 <RFID+0x15a>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	f000 80ff 	beq.w	80015de <RFID+0x356>
 80013e0:	e1ce      	b.n	8001780 <RFID+0x4f8>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80013e2:	4a56      	ldr	r2, [pc, #344]	@ (800153c <RFID+0x2b4>)
 80013e4:	4956      	ldr	r1, [pc, #344]	@ (8001540 <RFID+0x2b8>)
 80013e6:	4850      	ldr	r0, [pc, #320]	@ (8001528 <RFID+0x2a0>)
 80013e8:	f7fe fffe 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80013f4:	e0e9      	b.n	80015ca <RFID+0x342>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80013f6:	200a      	movs	r0, #10
 80013f8:	f7ff f950 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80013fc:	4603      	mov	r3, r0
 80013fe:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001400:	4b46      	ldr	r3, [pc, #280]	@ (800151c <RFID+0x294>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <RFID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 8001408:	4847      	ldr	r0, [pc, #284]	@ (8001528 <RFID+0x2a0>)
 800140a:	f7fe ffdd 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001412:	f002 fbc5 	bl	8003ba0 <HAL_Delay>
									return;
 8001416:	f000 bdf8 	b.w	800200a <RFID+0xd82>
								}
								if (key_pressed =='*')
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	2b2a      	cmp	r3, #42	@ 0x2a
 800141e:	d12e      	bne.n	800147e <RFID+0x1f6>
								{
									exitmenu = 15;
 8001420:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <RFID+0x294>)
 8001422:	220f      	movs	r2, #15
 8001424:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001426:	7d3b      	ldrb	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d801      	bhi.n	8001436 <RFID+0x1ae>
 8001432:	7d3b      	ldrb	r3, [r7, #20]
 8001434:	e000      	b.n	8001438 <RFID+0x1b0>
 8001436:	2300      	movs	r3, #0
 8001438:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d012      	beq.n	8001466 <RFID+0x1de>
 8001440:	2b03      	cmp	r3, #3
 8001442:	dc16      	bgt.n	8001472 <RFID+0x1ea>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <RFID+0x1c6>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d006      	beq.n	800145a <RFID+0x1d2>
 800144c:	e011      	b.n	8001472 <RFID+0x1ea>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 800144e:	4a40      	ldr	r2, [pc, #256]	@ (8001550 <RFID+0x2c8>)
 8001450:	4940      	ldr	r1, [pc, #256]	@ (8001554 <RFID+0x2cc>)
 8001452:	4835      	ldr	r0, [pc, #212]	@ (8001528 <RFID+0x2a0>)
 8001454:	f7fe ffc8 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001458:	e011      	b.n	800147e <RFID+0x1f6>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800145a:	4a3f      	ldr	r2, [pc, #252]	@ (8001558 <RFID+0x2d0>)
 800145c:	493d      	ldr	r1, [pc, #244]	@ (8001554 <RFID+0x2cc>)
 800145e:	4832      	ldr	r0, [pc, #200]	@ (8001528 <RFID+0x2a0>)
 8001460:	f7fe ffc2 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001464:	e00b      	b.n	800147e <RFID+0x1f6>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001466:	4a3d      	ldr	r2, [pc, #244]	@ (800155c <RFID+0x2d4>)
 8001468:	493a      	ldr	r1, [pc, #232]	@ (8001554 <RFID+0x2cc>)
 800146a:	482f      	ldr	r0, [pc, #188]	@ (8001528 <RFID+0x2a0>)
 800146c:	f7fe ffbc 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001470:	e005      	b.n	800147e <RFID+0x1f6>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 8001472:	4a31      	ldr	r2, [pc, #196]	@ (8001538 <RFID+0x2b0>)
 8001474:	4937      	ldr	r1, [pc, #220]	@ (8001554 <RFID+0x2cc>)
 8001476:	482c      	ldr	r0, [pc, #176]	@ (8001528 <RFID+0x2a0>)
 8001478:	f7fe ffb6 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800147c:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	2b23      	cmp	r3, #35	@ 0x23
 8001482:	f040 80a2 	bne.w	80015ca <RFID+0x342>
								{
									exitmenu = 15;
 8001486:	4b25      	ldr	r3, [pc, #148]	@ (800151c <RFID+0x294>)
 8001488:	220f      	movs	r2, #15
 800148a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800148c:	7dbb      	ldrb	r3, [r7, #22]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b2da      	uxtb	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 8001498:	7d3b      	ldrb	r3, [r7, #20]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d072      	beq.n	8001584 <RFID+0x2fc>
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f300 8090 	bgt.w	80015c4 <RFID+0x33c>
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <RFID+0x226>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d020      	beq.n	80014ee <RFID+0x266>
 80014ac:	e08a      	b.n	80015c4 <RFID+0x33c>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fb55 	bl	8002b60 <CheckKey>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00e      	beq.n	80014da <RFID+0x252>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80014bc:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <RFID+0x2d8>)
 80014be:	4929      	ldr	r1, [pc, #164]	@ (8001564 <RFID+0x2dc>)
 80014c0:	4819      	ldr	r0, [pc, #100]	@ (8001528 <RFID+0x2a0>)
 80014c2:	f7fe ff91 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ca:	f002 fb69 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014ce:	4a20      	ldr	r2, [pc, #128]	@ (8001550 <RFID+0x2c8>)
 80014d0:	4920      	ldr	r1, [pc, #128]	@ (8001554 <RFID+0x2cc>)
 80014d2:	4815      	ldr	r0, [pc, #84]	@ (8001528 <RFID+0x2a0>)
 80014d4:	f7fe ff88 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80014d8:	e077      	b.n	80015ca <RFID+0x342>
											adduid(keyadd1);
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fa21 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <RFID+0x2c8>)
 80014e4:	491b      	ldr	r1, [pc, #108]	@ (8001554 <RFID+0x2cc>)
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <RFID+0x2a0>)
 80014e8:	f7fe ff7e 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80014ec:	e06d      	b.n	80015ca <RFID+0x342>
									case 2:
										if (CheckKey(keyadd1) != 0)
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fb35 	bl	8002b60 <CheckKey>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d039      	beq.n	8001570 <RFID+0x2e8>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 80014fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <RFID+0x2e0>)
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <RFID+0x2e4>)
 8001500:	4809      	ldr	r0, [pc, #36]	@ (8001528 <RFID+0x2a0>)
 8001502:	f7fe ff71 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150a:	f002 fb49 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <RFID+0x2d0>)
 8001510:	4910      	ldr	r1, [pc, #64]	@ (8001554 <RFID+0x2cc>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <RFID+0x2a0>)
 8001514:	f7fe ff68 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001518:	e057      	b.n	80015ca <RFID+0x342>
 800151a:	bf00      	nop
 800151c:	20000020 	.word	0x20000020
 8001520:	0800d19c 	.word	0x0800d19c
 8001524:	0800d1ac 	.word	0x0800d1ac
 8001528:	200003d8 	.word	0x200003d8
 800152c:	0800d1bc 	.word	0x0800d1bc
 8001530:	0800d1c8 	.word	0x0800d1c8
 8001534:	0800d1d8 	.word	0x0800d1d8
 8001538:	0800d1e8 	.word	0x0800d1e8
 800153c:	0800d1f0 	.word	0x0800d1f0
 8001540:	0800d1fc 	.word	0x0800d1fc
 8001544:	0800d20c 	.word	0x0800d20c
 8001548:	0800d21c 	.word	0x0800d21c
 800154c:	0800d228 	.word	0x0800d228
 8001550:	0800d238 	.word	0x0800d238
 8001554:	0800d24c 	.word	0x0800d24c
 8001558:	0800d25c 	.word	0x0800d25c
 800155c:	0800d270 	.word	0x0800d270
 8001560:	0800d284 	.word	0x0800d284
 8001564:	0800d298 	.word	0x0800d298
 8001568:	0800d2a4 	.word	0x0800d2a4
 800156c:	0800d2b8 	.word	0x0800d2b8
											adduid(keyadd1);
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f9d6 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001578:	4aa5      	ldr	r2, [pc, #660]	@ (8001810 <RFID+0x588>)
 800157a:	49a6      	ldr	r1, [pc, #664]	@ (8001814 <RFID+0x58c>)
 800157c:	48a6      	ldr	r0, [pc, #664]	@ (8001818 <RFID+0x590>)
 800157e:	f7fe ff33 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001582:	e022      	b.n	80015ca <RFID+0x342>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 faea 	bl	8002b60 <CheckKey>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <RFID+0x328>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 8001592:	4aa2      	ldr	r2, [pc, #648]	@ (800181c <RFID+0x594>)
 8001594:	49a2      	ldr	r1, [pc, #648]	@ (8001820 <RFID+0x598>)
 8001596:	48a0      	ldr	r0, [pc, #640]	@ (8001818 <RFID+0x590>)
 8001598:	f7fe ff26 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800159c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015a0:	f002 fafe 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001824 <RFID+0x59c>)
 80015a6:	499b      	ldr	r1, [pc, #620]	@ (8001814 <RFID+0x58c>)
 80015a8:	489b      	ldr	r0, [pc, #620]	@ (8001818 <RFID+0x590>)
 80015aa:	f7fe ff1d 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80015ae:	e00c      	b.n	80015ca <RFID+0x342>
											adduid(keyadd1);
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 f9b6 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015b8:	4a9a      	ldr	r2, [pc, #616]	@ (8001824 <RFID+0x59c>)
 80015ba:	4996      	ldr	r1, [pc, #600]	@ (8001814 <RFID+0x58c>)
 80015bc:	4896      	ldr	r0, [pc, #600]	@ (8001818 <RFID+0x590>)
 80015be:	f7fe ff13 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80015c2:	e002      	b.n	80015ca <RFID+0x342>
									default:
										back11 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	74fb      	strb	r3, [r7, #19]
										break;
 80015c8:	bf00      	nop
							while (back11 == 1)
 80015ca:	7cfb      	ldrb	r3, [r7, #19]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	f43f af12 	beq.w	80013f6 <RFID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80015d2:	4a95      	ldr	r2, [pc, #596]	@ (8001828 <RFID+0x5a0>)
 80015d4:	4995      	ldr	r1, [pc, #596]	@ (800182c <RFID+0x5a4>)
 80015d6:	4890      	ldr	r0, [pc, #576]	@ (8001818 <RFID+0x590>)
 80015d8:	f7fe ff06 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80015dc:	e0d3      	b.n	8001786 <RFID+0x4fe>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80015de:	4a94      	ldr	r2, [pc, #592]	@ (8001830 <RFID+0x5a8>)
 80015e0:	4994      	ldr	r1, [pc, #592]	@ (8001834 <RFID+0x5ac>)
 80015e2:	488d      	ldr	r0, [pc, #564]	@ (8001818 <RFID+0x590>)
 80015e4:	f7fe ff00 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80015f0:	e0bc      	b.n	800176c <RFID+0x4e4>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80015f2:	200a      	movs	r0, #10
 80015f4:	f7ff f852 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80015fc:	4b8e      	ldr	r3, [pc, #568]	@ (8001838 <RFID+0x5b0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d108      	bne.n	8001616 <RFID+0x38e>
								{
									CLCD_I2C_Clear(&LCD1);
 8001604:	4884      	ldr	r0, [pc, #528]	@ (8001818 <RFID+0x590>)
 8001606:	f7fe fedf 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800160a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160e:	f002 fac7 	bl	8003ba0 <HAL_Delay>
									return;
 8001612:	f000 bcfa 	b.w	800200a <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001616:	797b      	ldrb	r3, [r7, #5]
 8001618:	2b2a      	cmp	r3, #42	@ 0x2a
 800161a:	d12e      	bne.n	800167a <RFID+0x3f2>
								{
									exitmenu = 15;
 800161c:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <RFID+0x5b0>)
 800161e:	220f      	movs	r2, #15
 8001620:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8001622:	7cbb      	ldrb	r3, [r7, #18]
 8001624:	3301      	adds	r3, #1
 8001626:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001628:	7cbb      	ldrb	r3, [r7, #18]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d801      	bhi.n	8001632 <RFID+0x3aa>
 800162e:	7cbb      	ldrb	r3, [r7, #18]
 8001630:	e000      	b.n	8001634 <RFID+0x3ac>
 8001632:	2300      	movs	r3, #0
 8001634:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001636:	7cbb      	ldrb	r3, [r7, #18]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d012      	beq.n	8001662 <RFID+0x3da>
 800163c:	2b03      	cmp	r3, #3
 800163e:	dc16      	bgt.n	800166e <RFID+0x3e6>
 8001640:	2b01      	cmp	r3, #1
 8001642:	d002      	beq.n	800164a <RFID+0x3c2>
 8001644:	2b02      	cmp	r3, #2
 8001646:	d006      	beq.n	8001656 <RFID+0x3ce>
 8001648:	e011      	b.n	800166e <RFID+0x3e6>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 800164a:	4a7c      	ldr	r2, [pc, #496]	@ (800183c <RFID+0x5b4>)
 800164c:	497c      	ldr	r1, [pc, #496]	@ (8001840 <RFID+0x5b8>)
 800164e:	4872      	ldr	r0, [pc, #456]	@ (8001818 <RFID+0x590>)
 8001650:	f7fe feca 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001654:	e011      	b.n	800167a <RFID+0x3f2>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001656:	4a7b      	ldr	r2, [pc, #492]	@ (8001844 <RFID+0x5bc>)
 8001658:	4979      	ldr	r1, [pc, #484]	@ (8001840 <RFID+0x5b8>)
 800165a:	486f      	ldr	r0, [pc, #444]	@ (8001818 <RFID+0x590>)
 800165c:	f7fe fec4 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001660:	e00b      	b.n	800167a <RFID+0x3f2>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001662:	4a79      	ldr	r2, [pc, #484]	@ (8001848 <RFID+0x5c0>)
 8001664:	4976      	ldr	r1, [pc, #472]	@ (8001840 <RFID+0x5b8>)
 8001666:	486c      	ldr	r0, [pc, #432]	@ (8001818 <RFID+0x590>)
 8001668:	f7fe febe 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800166c:	e005      	b.n	800167a <RFID+0x3f2>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 800166e:	4a77      	ldr	r2, [pc, #476]	@ (800184c <RFID+0x5c4>)
 8001670:	4973      	ldr	r1, [pc, #460]	@ (8001840 <RFID+0x5b8>)
 8001672:	4869      	ldr	r0, [pc, #420]	@ (8001818 <RFID+0x590>)
 8001674:	f7fe feb8 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001678:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800167a:	797b      	ldrb	r3, [r7, #5]
 800167c:	2b23      	cmp	r3, #35	@ 0x23
 800167e:	d175      	bne.n	800176c <RFID+0x4e4>
								{
									exitmenu = 15;
 8001680:	4b6d      	ldr	r3, [pc, #436]	@ (8001838 <RFID+0x5b0>)
 8001682:	220f      	movs	r2, #15
 8001684:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7cbb      	ldrb	r3, [r7, #18]
 800168e:	4413      	add	r3, r2
 8001690:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 8001692:	7cbb      	ldrb	r3, [r7, #18]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d046      	beq.n	8001726 <RFID+0x49e>
 8001698:	2b03      	cmp	r3, #3
 800169a:	dc64      	bgt.n	8001766 <RFID+0x4de>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d002      	beq.n	80016a6 <RFID+0x41e>
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d020      	beq.n	80016e6 <RFID+0x45e>
 80016a4:	e05f      	b.n	8001766 <RFID+0x4de>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80016a6:	78bb      	ldrb	r3, [r7, #2]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fa59 	bl	8002b60 <CheckKey>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <RFID+0x44a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80016b4:	4a66      	ldr	r2, [pc, #408]	@ (8001850 <RFID+0x5c8>)
 80016b6:	4967      	ldr	r1, [pc, #412]	@ (8001854 <RFID+0x5cc>)
 80016b8:	4857      	ldr	r0, [pc, #348]	@ (8001818 <RFID+0x590>)
 80016ba:	f7fe fe95 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f002 fa6d 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016c6:	4a5d      	ldr	r2, [pc, #372]	@ (800183c <RFID+0x5b4>)
 80016c8:	495d      	ldr	r1, [pc, #372]	@ (8001840 <RFID+0x5b8>)
 80016ca:	4853      	ldr	r0, [pc, #332]	@ (8001818 <RFID+0x590>)
 80016cc:	f7fe fe8c 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80016d0:	e04c      	b.n	800176c <RFID+0x4e4>
											adduid(keyadd2);
 80016d2:	78bb      	ldrb	r3, [r7, #2]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 f925 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016da:	4a58      	ldr	r2, [pc, #352]	@ (800183c <RFID+0x5b4>)
 80016dc:	4958      	ldr	r1, [pc, #352]	@ (8001840 <RFID+0x5b8>)
 80016de:	484e      	ldr	r0, [pc, #312]	@ (8001818 <RFID+0x590>)
 80016e0:	f7fe fe82 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80016e4:	e042      	b.n	800176c <RFID+0x4e4>
									case 2:
										if (CheckKey(keyadd2) != 0)
 80016e6:	78bb      	ldrb	r3, [r7, #2]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fa39 	bl	8002b60 <CheckKey>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00e      	beq.n	8001712 <RFID+0x48a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 80016f4:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <RFID+0x5d0>)
 80016f6:	4959      	ldr	r1, [pc, #356]	@ (800185c <RFID+0x5d4>)
 80016f8:	4847      	ldr	r0, [pc, #284]	@ (8001818 <RFID+0x590>)
 80016fa:	f7fe fe75 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001702:	f002 fa4d 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001706:	4a4f      	ldr	r2, [pc, #316]	@ (8001844 <RFID+0x5bc>)
 8001708:	494d      	ldr	r1, [pc, #308]	@ (8001840 <RFID+0x5b8>)
 800170a:	4843      	ldr	r0, [pc, #268]	@ (8001818 <RFID+0x590>)
 800170c:	f7fe fe6c 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001710:	e02c      	b.n	800176c <RFID+0x4e4>
											adduid(keyadd2);
 8001712:	78bb      	ldrb	r3, [r7, #2]
 8001714:	4618      	mov	r0, r3
 8001716:	f001 f905 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 800171a:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <RFID+0x5bc>)
 800171c:	4948      	ldr	r1, [pc, #288]	@ (8001840 <RFID+0x5b8>)
 800171e:	483e      	ldr	r0, [pc, #248]	@ (8001818 <RFID+0x590>)
 8001720:	f7fe fe62 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001724:	e022      	b.n	800176c <RFID+0x4e4>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001726:	78bb      	ldrb	r3, [r7, #2]
 8001728:	4618      	mov	r0, r3
 800172a:	f001 fa19 	bl	8002b60 <CheckKey>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00e      	beq.n	8001752 <RFID+0x4ca>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001734:	4a39      	ldr	r2, [pc, #228]	@ (800181c <RFID+0x594>)
 8001736:	494a      	ldr	r1, [pc, #296]	@ (8001860 <RFID+0x5d8>)
 8001738:	4837      	ldr	r0, [pc, #220]	@ (8001818 <RFID+0x590>)
 800173a:	f7fe fe55 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800173e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001742:	f002 fa2d 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001746:	4a40      	ldr	r2, [pc, #256]	@ (8001848 <RFID+0x5c0>)
 8001748:	493d      	ldr	r1, [pc, #244]	@ (8001840 <RFID+0x5b8>)
 800174a:	4833      	ldr	r0, [pc, #204]	@ (8001818 <RFID+0x590>)
 800174c:	f7fe fe4c 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001750:	e00c      	b.n	800176c <RFID+0x4e4>
											adduid(keyadd2);
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	4618      	mov	r0, r3
 8001756:	f001 f8e5 	bl	8002924 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800175a:	4a3b      	ldr	r2, [pc, #236]	@ (8001848 <RFID+0x5c0>)
 800175c:	4938      	ldr	r1, [pc, #224]	@ (8001840 <RFID+0x5b8>)
 800175e:	482e      	ldr	r0, [pc, #184]	@ (8001818 <RFID+0x590>)
 8001760:	f7fe fe42 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001764:	e002      	b.n	800176c <RFID+0x4e4>
									default:
										back12 = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	747b      	strb	r3, [r7, #17]
										break;
 800176a:	bf00      	nop
							while (back12 == 1)
 800176c:	7c7b      	ldrb	r3, [r7, #17]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f43f af3f 	beq.w	80015f2 <RFID+0x36a>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001774:	4a3b      	ldr	r2, [pc, #236]	@ (8001864 <RFID+0x5dc>)
 8001776:	492d      	ldr	r1, [pc, #180]	@ (800182c <RFID+0x5a4>)
 8001778:	4827      	ldr	r0, [pc, #156]	@ (8001818 <RFID+0x590>)
 800177a:	f7fe fe35 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800177e:	e002      	b.n	8001786 <RFID+0x4fe>
						default:
							back = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	757b      	strb	r3, [r7, #21]
							break;
 8001784:	bf00      	nop
				while (back == 1)
 8001786:	7d7b      	ldrb	r3, [r7, #21]
 8001788:	2b01      	cmp	r3, #1
 800178a:	f43f ade2 	beq.w	8001352 <RFID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 800178e:	4a36      	ldr	r2, [pc, #216]	@ (8001868 <RFID+0x5e0>)
 8001790:	4936      	ldr	r1, [pc, #216]	@ (800186c <RFID+0x5e4>)
 8001792:	4821      	ldr	r0, [pc, #132]	@ (8001818 <RFID+0x590>)
 8001794:	f7fe fe28 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001798:	f000 bc2f 	b.w	8001ffa <RFID+0xd72>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800179c:	4a24      	ldr	r2, [pc, #144]	@ (8001830 <RFID+0x5a8>)
 800179e:	4925      	ldr	r1, [pc, #148]	@ (8001834 <RFID+0x5ac>)
 80017a0:	481d      	ldr	r0, [pc, #116]	@ (8001818 <RFID+0x590>)
 80017a2:	f7fe fe21 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 80017a6:	23ff      	movs	r3, #255	@ 0xff
 80017a8:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80017ae:	f000 bc0e 	b.w	8001fce <RFID+0xd46>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7fe ff72 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80017b8:	4603      	mov	r3, r0
 80017ba:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <RFID+0x5b0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <RFID+0x54e>
					{
						CLCD_I2C_Clear(&LCD1);
 80017c4:	4814      	ldr	r0, [pc, #80]	@ (8001818 <RFID+0x590>)
 80017c6:	f7fe fdff 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80017ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ce:	f002 f9e7 	bl	8003ba0 <HAL_Delay>
						return;
 80017d2:	f000 bc1a 	b.w	800200a <RFID+0xd82>
					}
					if (key_pressed =='*')
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80017da:	d159      	bne.n	8001890 <RFID+0x608>
					{
						exitmenu = 15;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <RFID+0x5b0>)
 80017de:	220f      	movs	r2, #15
 80017e0:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 80017e8:	7c3b      	ldrb	r3, [r7, #16]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d801      	bhi.n	80017f2 <RFID+0x56a>
 80017ee:	7c3b      	ldrb	r3, [r7, #16]
 80017f0:	e000      	b.n	80017f4 <RFID+0x56c>
 80017f2:	2300      	movs	r3, #0
 80017f4:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 80017f6:	7c3b      	ldrb	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <RFID+0x57a>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d03b      	beq.n	8001878 <RFID+0x5f0>
 8001800:	e040      	b.n	8001884 <RFID+0x5fc>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001802:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <RFID+0x5e8>)
 8001804:	491b      	ldr	r1, [pc, #108]	@ (8001874 <RFID+0x5ec>)
 8001806:	4804      	ldr	r0, [pc, #16]	@ (8001818 <RFID+0x590>)
 8001808:	f7fe fdee 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800180c:	e040      	b.n	8001890 <RFID+0x608>
 800180e:	bf00      	nop
 8001810:	0800d25c 	.word	0x0800d25c
 8001814:	0800d24c 	.word	0x0800d24c
 8001818:	200003d8 	.word	0x200003d8
 800181c:	0800d2c4 	.word	0x0800d2c4
 8001820:	0800d2d8 	.word	0x0800d2d8
 8001824:	0800d270 	.word	0x0800d270
 8001828:	0800d20c 	.word	0x0800d20c
 800182c:	0800d21c 	.word	0x0800d21c
 8001830:	0800d1f0 	.word	0x0800d1f0
 8001834:	0800d1fc 	.word	0x0800d1fc
 8001838:	20000020 	.word	0x20000020
 800183c:	0800d2e4 	.word	0x0800d2e4
 8001840:	0800d2f4 	.word	0x0800d2f4
 8001844:	0800d304 	.word	0x0800d304
 8001848:	0800d314 	.word	0x0800d314
 800184c:	0800d1e8 	.word	0x0800d1e8
 8001850:	0800d284 	.word	0x0800d284
 8001854:	0800d324 	.word	0x0800d324
 8001858:	0800d2a4 	.word	0x0800d2a4
 800185c:	0800d330 	.word	0x0800d330
 8001860:	0800d33c 	.word	0x0800d33c
 8001864:	0800d228 	.word	0x0800d228
 8001868:	0800d1bc 	.word	0x0800d1bc
 800186c:	0800d1ac 	.word	0x0800d1ac
 8001870:	0800d348 	.word	0x0800d348
 8001874:	0800d35c 	.word	0x0800d35c
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001878:	4a9a      	ldr	r2, [pc, #616]	@ (8001ae4 <RFID+0x85c>)
 800187a:	499b      	ldr	r1, [pc, #620]	@ (8001ae8 <RFID+0x860>)
 800187c:	489b      	ldr	r0, [pc, #620]	@ (8001aec <RFID+0x864>)
 800187e:	f7fe fdb3 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001882:	e005      	b.n	8001890 <RFID+0x608>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001884:	4a9a      	ldr	r2, [pc, #616]	@ (8001af0 <RFID+0x868>)
 8001886:	4998      	ldr	r1, [pc, #608]	@ (8001ae8 <RFID+0x860>)
 8001888:	4898      	ldr	r0, [pc, #608]	@ (8001aec <RFID+0x864>)
 800188a:	f7fe fdad 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800188e:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	2b23      	cmp	r3, #35	@ 0x23
 8001894:	f040 839b 	bne.w	8001fce <RFID+0xd46>
					{
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001898:	4a96      	ldr	r2, [pc, #600]	@ (8001af4 <RFID+0x86c>)
 800189a:	4997      	ldr	r1, [pc, #604]	@ (8001af8 <RFID+0x870>)
 800189c:	4893      	ldr	r0, [pc, #588]	@ (8001aec <RFID+0x864>)
 800189e:	f7fe fda3 	bl	80003e8 <CLCD_I2C_Display>
						exitmenu = 15;
 80018a2:	4b96      	ldr	r3, [pc, #600]	@ (8001afc <RFID+0x874>)
 80018a4:	220f      	movs	r2, #15
 80018a6:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 80018a8:	7c3b      	ldrb	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <RFID+0x62e>
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	f000 8382 	beq.w	8001fb8 <RFID+0xd30>
 80018b4:	e388      	b.n	8001fc8 <RFID+0xd40>
						{
						case 0:
							uint8_t statusrm1 = -1;
 80018b6:	23ff      	movs	r3, #255	@ 0xff
 80018b8:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 80018be:	e371      	b.n	8001fa4 <RFID+0xd1c>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f7fe feeb 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80018c6:	4603      	mov	r3, r0
 80018c8:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80018ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <RFID+0x874>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d107      	bne.n	80018e2 <RFID+0x65a>
								{
									CLCD_I2C_Clear(&LCD1);
 80018d2:	4886      	ldr	r0, [pc, #536]	@ (8001aec <RFID+0x864>)
 80018d4:	f7fe fd78 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80018d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018dc:	f002 f960 	bl	8003ba0 <HAL_Delay>
									return;
 80018e0:	e393      	b.n	800200a <RFID+0xd82>
								}
								if (key_pressed =='*')
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80018e6:	d121      	bne.n	800192c <RFID+0x6a4>
								{
									statusrm1++;
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	3301      	adds	r3, #1
 80018ec:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d801      	bhi.n	80018f8 <RFID+0x670>
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	e000      	b.n	80018fa <RFID+0x672>
 80018f8:	2300      	movs	r3, #0
 80018fa:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <RFID+0x680>
 8001902:	2b01      	cmp	r3, #1
 8001904:	d006      	beq.n	8001914 <RFID+0x68c>
 8001906:	e00b      	b.n	8001920 <RFID+0x698>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001908:	4a7d      	ldr	r2, [pc, #500]	@ (8001b00 <RFID+0x878>)
 800190a:	497e      	ldr	r1, [pc, #504]	@ (8001b04 <RFID+0x87c>)
 800190c:	4877      	ldr	r0, [pc, #476]	@ (8001aec <RFID+0x864>)
 800190e:	f7fe fd6b 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001912:	e00b      	b.n	800192c <RFID+0x6a4>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001914:	4a7c      	ldr	r2, [pc, #496]	@ (8001b08 <RFID+0x880>)
 8001916:	497b      	ldr	r1, [pc, #492]	@ (8001b04 <RFID+0x87c>)
 8001918:	4874      	ldr	r0, [pc, #464]	@ (8001aec <RFID+0x864>)
 800191a:	f7fe fd65 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800191e:	e005      	b.n	800192c <RFID+0x6a4>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001920:	4a73      	ldr	r2, [pc, #460]	@ (8001af0 <RFID+0x868>)
 8001922:	4978      	ldr	r1, [pc, #480]	@ (8001b04 <RFID+0x87c>)
 8001924:	4871      	ldr	r0, [pc, #452]	@ (8001aec <RFID+0x864>)
 8001926:	f7fe fd5f 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800192a:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	2b23      	cmp	r3, #35	@ 0x23
 8001930:	f040 8338 	bne.w	8001fa4 <RFID+0xd1c>
								{
									exitmenu = 15;
 8001934:	4b71      	ldr	r3, [pc, #452]	@ (8001afc <RFID+0x874>)
 8001936:	220f      	movs	r2, #15
 8001938:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <RFID+0x6c0>
 8001940:	2b01      	cmp	r3, #1
 8001942:	f000 82d0 	beq.w	8001ee6 <RFID+0xc5e>
 8001946:	e32a      	b.n	8001f9e <RFID+0xd16>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001948:	4a6a      	ldr	r2, [pc, #424]	@ (8001af4 <RFID+0x86c>)
 800194a:	496b      	ldr	r1, [pc, #428]	@ (8001af8 <RFID+0x870>)
 800194c:	4867      	ldr	r0, [pc, #412]	@ (8001aec <RFID+0x864>)
 800194e:	f7fe fd4b 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001956:	2301      	movs	r3, #1
 8001958:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 800195a:	e2ba      	b.n	8001ed2 <RFID+0xc4a>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 800195c:	200a      	movs	r0, #10
 800195e:	f7fe fe9d 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001962:	4603      	mov	r3, r0
 8001964:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001966:	4b65      	ldr	r3, [pc, #404]	@ (8001afc <RFID+0x874>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <RFID+0x6f6>
											{
												CLCD_I2C_Clear(&LCD1);
 800196e:	485f      	ldr	r0, [pc, #380]	@ (8001aec <RFID+0x864>)
 8001970:	f7fe fd2a 	bl	80003c8 <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001978:	f002 f912 	bl	8003ba0 <HAL_Delay>
												return;
 800197c:	e345      	b.n	800200a <RFID+0xd82>
											}
											if (key_pressed =='*')
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	2b2a      	cmp	r3, #42	@ 0x2a
 8001982:	d124      	bne.n	80019ce <RFID+0x746>
											{
												exitmenu = 15;
 8001984:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <RFID+0x874>)
 8001986:	220f      	movs	r2, #15
 8001988:	701a      	strb	r2, [r3, #0]
												statusadd++;
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001990:	7b3b      	ldrb	r3, [r7, #12]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d801      	bhi.n	800199a <RFID+0x712>
 8001996:	7b3b      	ldrb	r3, [r7, #12]
 8001998:	e000      	b.n	800199c <RFID+0x714>
 800199a:	2300      	movs	r3, #0
 800199c:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 800199e:	7b3b      	ldrb	r3, [r7, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d002      	beq.n	80019aa <RFID+0x722>
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d006      	beq.n	80019b6 <RFID+0x72e>
 80019a8:	e00b      	b.n	80019c2 <RFID+0x73a>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 80019aa:	4a58      	ldr	r2, [pc, #352]	@ (8001b0c <RFID+0x884>)
 80019ac:	4958      	ldr	r1, [pc, #352]	@ (8001b10 <RFID+0x888>)
 80019ae:	484f      	ldr	r0, [pc, #316]	@ (8001aec <RFID+0x864>)
 80019b0:	f7fe fd1a 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019b4:	e00b      	b.n	80019ce <RFID+0x746>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 80019b6:	4a57      	ldr	r2, [pc, #348]	@ (8001b14 <RFID+0x88c>)
 80019b8:	4955      	ldr	r1, [pc, #340]	@ (8001b10 <RFID+0x888>)
 80019ba:	484c      	ldr	r0, [pc, #304]	@ (8001aec <RFID+0x864>)
 80019bc:	f7fe fd14 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019c0:	e005      	b.n	80019ce <RFID+0x746>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 80019c2:	4a4b      	ldr	r2, [pc, #300]	@ (8001af0 <RFID+0x868>)
 80019c4:	4952      	ldr	r1, [pc, #328]	@ (8001b10 <RFID+0x888>)
 80019c6:	4849      	ldr	r0, [pc, #292]	@ (8001aec <RFID+0x864>)
 80019c8:	f7fe fd0e 	bl	80003e8 <CLCD_I2C_Display>
 80019cc:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	2b23      	cmp	r3, #35	@ 0x23
 80019d2:	f040 827e 	bne.w	8001ed2 <RFID+0xc4a>
											{
												exitmenu = 15;
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <RFID+0x874>)
 80019d8:	220f      	movs	r2, #15
 80019da:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d003      	beq.n	80019ea <RFID+0x762>
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f000 8143 	beq.w	8001c6e <RFID+0x9e6>
 80019e8:	e270      	b.n	8001ecc <RFID+0xc44>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80019ea:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <RFID+0x86c>)
 80019ec:	4942      	ldr	r1, [pc, #264]	@ (8001af8 <RFID+0x870>)
 80019ee:	483f      	ldr	r0, [pc, #252]	@ (8001aec <RFID+0x864>)
 80019f0:	f7fe fcfa 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 80019fc:	e12d      	b.n	8001c5a <RFID+0x9d2>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f7fe fe4c 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001a04:	4603      	mov	r3, r0
 8001a06:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001a08:	4b3c      	ldr	r3, [pc, #240]	@ (8001afc <RFID+0x874>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d107      	bne.n	8001a20 <RFID+0x798>
														{
															CLCD_I2C_Clear(&LCD1);
 8001a10:	4836      	ldr	r0, [pc, #216]	@ (8001aec <RFID+0x864>)
 8001a12:	f7fe fcd9 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1a:	f002 f8c1 	bl	8003ba0 <HAL_Delay>
															return;
 8001a1e:	e2f4      	b.n	800200a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a24:	d12e      	bne.n	8001a84 <RFID+0x7fc>
														{
															exitmenu = 15;
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <RFID+0x874>)
 8001a28:	220f      	movs	r2, #15
 8001a2a:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001a32:	7abb      	ldrb	r3, [r7, #10]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d801      	bhi.n	8001a3c <RFID+0x7b4>
 8001a38:	7abb      	ldrb	r3, [r7, #10]
 8001a3a:	e000      	b.n	8001a3e <RFID+0x7b6>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001a40:	7abb      	ldrb	r3, [r7, #10]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d012      	beq.n	8001a6c <RFID+0x7e4>
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	dc16      	bgt.n	8001a78 <RFID+0x7f0>
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d002      	beq.n	8001a54 <RFID+0x7cc>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d006      	beq.n	8001a60 <RFID+0x7d8>
 8001a52:	e011      	b.n	8001a78 <RFID+0x7f0>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <RFID+0x890>)
 8001a56:	4931      	ldr	r1, [pc, #196]	@ (8001b1c <RFID+0x894>)
 8001a58:	4824      	ldr	r0, [pc, #144]	@ (8001aec <RFID+0x864>)
 8001a5a:	f7fe fcc5 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a5e:	e011      	b.n	8001a84 <RFID+0x7fc>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001a60:	4a2f      	ldr	r2, [pc, #188]	@ (8001b20 <RFID+0x898>)
 8001a62:	492e      	ldr	r1, [pc, #184]	@ (8001b1c <RFID+0x894>)
 8001a64:	4821      	ldr	r0, [pc, #132]	@ (8001aec <RFID+0x864>)
 8001a66:	f7fe fcbf 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a6a:	e00b      	b.n	8001a84 <RFID+0x7fc>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b24 <RFID+0x89c>)
 8001a6e:	492b      	ldr	r1, [pc, #172]	@ (8001b1c <RFID+0x894>)
 8001a70:	481e      	ldr	r0, [pc, #120]	@ (8001aec <RFID+0x864>)
 8001a72:	f7fe fcb9 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a76:	e005      	b.n	8001a84 <RFID+0x7fc>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001a78:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <RFID+0x868>)
 8001a7a:	4928      	ldr	r1, [pc, #160]	@ (8001b1c <RFID+0x894>)
 8001a7c:	481b      	ldr	r0, [pc, #108]	@ (8001aec <RFID+0x864>)
 8001a7e:	f7fe fcb3 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a82:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b23      	cmp	r3, #35	@ 0x23
 8001a88:	f040 80e7 	bne.w	8001c5a <RFID+0x9d2>
														{
															exitmenu = 15;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <RFID+0x874>)
 8001a8e:	220f      	movs	r2, #15
 8001a90:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001a92:	7b3b      	ldrb	r3, [r7, #12]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7abb      	ldrb	r3, [r7, #10]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	f000 809f 	beq.w	8001be4 <RFID+0x95c>
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	f300 80d4 	bgt.w	8001c54 <RFID+0x9cc>
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d002      	beq.n	8001ab6 <RFID+0x82e>
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d05f      	beq.n	8001b74 <RFID+0x8ec>
 8001ab4:	e0ce      	b.n	8001c54 <RFID+0x9cc>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 f851 	bl	8002b60 <CheckKey>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d135      	bne.n	8001b30 <RFID+0x8a8>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "Do Not Exist");
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <RFID+0x8a0>)
 8001ac6:	4919      	ldr	r1, [pc, #100]	@ (8001b2c <RFID+0x8a4>)
 8001ac8:	4808      	ldr	r0, [pc, #32]	@ (8001aec <RFID+0x864>)
 8001aca:	f7fe fc8d 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad2:	f002 f865 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001ad6:	4a10      	ldr	r2, [pc, #64]	@ (8001b18 <RFID+0x890>)
 8001ad8:	4910      	ldr	r1, [pc, #64]	@ (8001b1c <RFID+0x894>)
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <RFID+0x864>)
 8001adc:	f7fe fc84 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001ae0:	e0bb      	b.n	8001c5a <RFID+0x9d2>
 8001ae2:	bf00      	nop
 8001ae4:	0800d36c 	.word	0x0800d36c
 8001ae8:	0800d35c 	.word	0x0800d35c
 8001aec:	200003d8 	.word	0x200003d8
 8001af0:	0800d1e8 	.word	0x0800d1e8
 8001af4:	0800d1f0 	.word	0x0800d1f0
 8001af8:	0800d1fc 	.word	0x0800d1fc
 8001afc:	20000020 	.word	0x20000020
 8001b00:	0800d37c 	.word	0x0800d37c
 8001b04:	0800d38c 	.word	0x0800d38c
 8001b08:	0800d39c 	.word	0x0800d39c
 8001b0c:	0800d3ac 	.word	0x0800d3ac
 8001b10:	0800d3c0 	.word	0x0800d3c0
 8001b14:	0800d3d0 	.word	0x0800d3d0
 8001b18:	0800d3e0 	.word	0x0800d3e0
 8001b1c:	0800d3f0 	.word	0x0800d3f0
 8001b20:	0800d400 	.word	0x0800d400
 8001b24:	0800d410 	.word	0x0800d410
 8001b28:	0800d420 	.word	0x0800d420
 8001b2c:	0800d298 	.word	0x0800d298
																	removeuid(CheckKey(keyadd1));
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f814 	bl	8002b60 <CheckKey>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 f83e 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001b40:	4aab      	ldr	r2, [pc, #684]	@ (8001df0 <RFID+0xb68>)
 8001b42:	49ac      	ldr	r1, [pc, #688]	@ (8001df4 <RFID+0xb6c>)
 8001b44:	48ac      	ldr	r0, [pc, #688]	@ (8001df8 <RFID+0xb70>)
 8001b46:	f7fe fc4f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001b4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b4e:	f002 f827 	bl	8003ba0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001b52:	f000 feb5 	bl	80028c0 <checkcountUID>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <RFID+0x8e0>
																		startadd();
 8001b5c:	f001 f83c 	bl	8002bd8 <startadd>
																		exitmenu = 0;
 8001b60:	4ba6      	ldr	r3, [pc, #664]	@ (8001dfc <RFID+0xb74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
																break;
 8001b66:	e078      	b.n	8001c5a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001b68:	4aa5      	ldr	r2, [pc, #660]	@ (8001e00 <RFID+0xb78>)
 8001b6a:	49a6      	ldr	r1, [pc, #664]	@ (8001e04 <RFID+0xb7c>)
 8001b6c:	48a2      	ldr	r0, [pc, #648]	@ (8001df8 <RFID+0xb70>)
 8001b6e:	f7fe fc3b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001b72:	e072      	b.n	8001c5a <RFID+0x9d2>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fff2 	bl	8002b60 <CheckKey>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <RFID+0x918>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "Do Not Exist");
 8001b82:	4aa1      	ldr	r2, [pc, #644]	@ (8001e08 <RFID+0xb80>)
 8001b84:	49a1      	ldr	r1, [pc, #644]	@ (8001e0c <RFID+0xb84>)
 8001b86:	489c      	ldr	r0, [pc, #624]	@ (8001df8 <RFID+0xb70>)
 8001b88:	f7fe fc2e 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001b8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b90:	f002 f806 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001b94:	4a9e      	ldr	r2, [pc, #632]	@ (8001e10 <RFID+0xb88>)
 8001b96:	499b      	ldr	r1, [pc, #620]	@ (8001e04 <RFID+0xb7c>)
 8001b98:	4897      	ldr	r0, [pc, #604]	@ (8001df8 <RFID+0xb70>)
 8001b9a:	f7fe fc25 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001b9e:	e05c      	b.n	8001c5a <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 ffdc 	bl	8002b60 <CheckKey>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 f806 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001bb0:	4a8f      	ldr	r2, [pc, #572]	@ (8001df0 <RFID+0xb68>)
 8001bb2:	4998      	ldr	r1, [pc, #608]	@ (8001e14 <RFID+0xb8c>)
 8001bb4:	4890      	ldr	r0, [pc, #576]	@ (8001df8 <RFID+0xb70>)
 8001bb6:	f7fe fc17 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bbe:	f001 ffef 	bl	8003ba0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001bc2:	f000 fe7d 	bl	80028c0 <checkcountUID>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <RFID+0x950>
																		startadd();
 8001bcc:	f001 f804 	bl	8002bd8 <startadd>
																		exitmenu = 0;
 8001bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8001dfc <RFID+0xb74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
																break;
 8001bd6:	e040      	b.n	8001c5a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001bd8:	4a8d      	ldr	r2, [pc, #564]	@ (8001e10 <RFID+0xb88>)
 8001bda:	498a      	ldr	r1, [pc, #552]	@ (8001e04 <RFID+0xb7c>)
 8001bdc:	4886      	ldr	r0, [pc, #536]	@ (8001df8 <RFID+0xb70>)
 8001bde:	f7fe fc03 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001be2:	e03a      	b.n	8001c5a <RFID+0x9d2>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 ffba 	bl	8002b60 <CheckKey>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <RFID+0x988>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "Do Not Exist");
 8001bf2:	4a85      	ldr	r2, [pc, #532]	@ (8001e08 <RFID+0xb80>)
 8001bf4:	4988      	ldr	r1, [pc, #544]	@ (8001e18 <RFID+0xb90>)
 8001bf6:	4880      	ldr	r0, [pc, #512]	@ (8001df8 <RFID+0xb70>)
 8001bf8:	f7fe fbf6 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c00:	f001 ffce 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c04:	4a85      	ldr	r2, [pc, #532]	@ (8001e1c <RFID+0xb94>)
 8001c06:	497f      	ldr	r1, [pc, #508]	@ (8001e04 <RFID+0xb7c>)
 8001c08:	487b      	ldr	r0, [pc, #492]	@ (8001df8 <RFID+0xb70>)
 8001c0a:	f7fe fbed 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001c0e:	e024      	b.n	8001c5a <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 ffa4 	bl	8002b60 <CheckKey>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 ffce 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001c20:	4a73      	ldr	r2, [pc, #460]	@ (8001df0 <RFID+0xb68>)
 8001c22:	497f      	ldr	r1, [pc, #508]	@ (8001e20 <RFID+0xb98>)
 8001c24:	4874      	ldr	r0, [pc, #464]	@ (8001df8 <RFID+0xb70>)
 8001c26:	f7fe fbdf 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c2e:	f001 ffb7 	bl	8003ba0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001c32:	f000 fe45 	bl	80028c0 <checkcountUID>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <RFID+0x9c0>
																		startadd();
 8001c3c:	f000 ffcc 	bl	8002bd8 <startadd>
																		exitmenu = 0;
 8001c40:	4b6e      	ldr	r3, [pc, #440]	@ (8001dfc <RFID+0xb74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
																break;
 8001c46:	e008      	b.n	8001c5a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c48:	4a74      	ldr	r2, [pc, #464]	@ (8001e1c <RFID+0xb94>)
 8001c4a:	496e      	ldr	r1, [pc, #440]	@ (8001e04 <RFID+0xb7c>)
 8001c4c:	486a      	ldr	r0, [pc, #424]	@ (8001df8 <RFID+0xb70>)
 8001c4e:	f7fe fbcb 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001c52:	e002      	b.n	8001c5a <RFID+0x9d2>
															default:
																back11 = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	727b      	strb	r3, [r7, #9]
																break;
 8001c58:	bf00      	nop
													while (back11 == 1)
 8001c5a:	7a7b      	ldrb	r3, [r7, #9]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f43f aece 	beq.w	80019fe <RFID+0x776>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001c62:	4a70      	ldr	r2, [pc, #448]	@ (8001e24 <RFID+0xb9c>)
 8001c64:	4970      	ldr	r1, [pc, #448]	@ (8001e28 <RFID+0xba0>)
 8001c66:	4864      	ldr	r0, [pc, #400]	@ (8001df8 <RFID+0xb70>)
 8001c68:	f7fe fbbe 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001c6c:	e131      	b.n	8001ed2 <RFID+0xc4a>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e2c <RFID+0xba4>)
 8001c70:	496f      	ldr	r1, [pc, #444]	@ (8001e30 <RFID+0xba8>)
 8001c72:	4861      	ldr	r0, [pc, #388]	@ (8001df8 <RFID+0xb70>)
 8001c74:	f7fe fbb8 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001c80:	e11a      	b.n	8001eb8 <RFID+0xc30>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001c82:	200a      	movs	r0, #10
 8001c84:	f7fe fd0a 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <RFID+0xb74>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <RFID+0xa1c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001c94:	4858      	ldr	r0, [pc, #352]	@ (8001df8 <RFID+0xb70>)
 8001c96:	f7fe fb97 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001c9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c9e:	f001 ff7f 	bl	8003ba0 <HAL_Delay>
															return;
 8001ca2:	e1b2      	b.n	800200a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ca8:	d12e      	bne.n	8001d08 <RFID+0xa80>
														{
															exitmenu = 15;
 8001caa:	4b54      	ldr	r3, [pc, #336]	@ (8001dfc <RFID+0xb74>)
 8001cac:	220f      	movs	r2, #15
 8001cae:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001cb0:	7a3b      	ldrb	r3, [r7, #8]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001cb6:	7a3b      	ldrb	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d801      	bhi.n	8001cc0 <RFID+0xa38>
 8001cbc:	7a3b      	ldrb	r3, [r7, #8]
 8001cbe:	e000      	b.n	8001cc2 <RFID+0xa3a>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001cc4:	7a3b      	ldrb	r3, [r7, #8]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d012      	beq.n	8001cf0 <RFID+0xa68>
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	dc16      	bgt.n	8001cfc <RFID+0xa74>
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <RFID+0xa50>
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d006      	beq.n	8001ce4 <RFID+0xa5c>
 8001cd6:	e011      	b.n	8001cfc <RFID+0xa74>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001cd8:	4a56      	ldr	r2, [pc, #344]	@ (8001e34 <RFID+0xbac>)
 8001cda:	4957      	ldr	r1, [pc, #348]	@ (8001e38 <RFID+0xbb0>)
 8001cdc:	4846      	ldr	r0, [pc, #280]	@ (8001df8 <RFID+0xb70>)
 8001cde:	f7fe fb83 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001ce2:	e011      	b.n	8001d08 <RFID+0xa80>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001ce4:	4a55      	ldr	r2, [pc, #340]	@ (8001e3c <RFID+0xbb4>)
 8001ce6:	4954      	ldr	r1, [pc, #336]	@ (8001e38 <RFID+0xbb0>)
 8001ce8:	4843      	ldr	r0, [pc, #268]	@ (8001df8 <RFID+0xb70>)
 8001cea:	f7fe fb7d 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cee:	e00b      	b.n	8001d08 <RFID+0xa80>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001cf0:	4a53      	ldr	r2, [pc, #332]	@ (8001e40 <RFID+0xbb8>)
 8001cf2:	4951      	ldr	r1, [pc, #324]	@ (8001e38 <RFID+0xbb0>)
 8001cf4:	4840      	ldr	r0, [pc, #256]	@ (8001df8 <RFID+0xb70>)
 8001cf6:	f7fe fb77 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cfa:	e005      	b.n	8001d08 <RFID+0xa80>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8001cfc:	4a51      	ldr	r2, [pc, #324]	@ (8001e44 <RFID+0xbbc>)
 8001cfe:	494e      	ldr	r1, [pc, #312]	@ (8001e38 <RFID+0xbb0>)
 8001d00:	483d      	ldr	r0, [pc, #244]	@ (8001df8 <RFID+0xb70>)
 8001d02:	f7fe fb71 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d06:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	2b23      	cmp	r3, #35	@ 0x23
 8001d0c:	f040 80d4 	bne.w	8001eb8 <RFID+0xc30>
														{
															exitmenu = 15;
 8001d10:	4b3a      	ldr	r3, [pc, #232]	@ (8001dfc <RFID+0xb74>)
 8001d12:	220f      	movs	r2, #15
 8001d14:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001d16:	7b3b      	ldrb	r3, [r7, #12]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	7a3b      	ldrb	r3, [r7, #8]
 8001d1e:	4413      	add	r3, r2
 8001d20:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8001d22:	7a3b      	ldrb	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	f000 8097 	beq.w	8001e58 <RFID+0xbd0>
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	f300 80c1 	bgt.w	8001eb2 <RFID+0xc2a>
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d002      	beq.n	8001d3a <RFID+0xab2>
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d02d      	beq.n	8001d94 <RFID+0xb0c>
 8001d38:	e0bb      	b.n	8001eb2 <RFID+0xc2a>
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001d3a:	793b      	ldrb	r3, [r7, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 ff0f 	bl	8002b60 <CheckKey>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10e      	bne.n	8001d66 <RFID+0xade>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","Do Not Exist");
 8001d48:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <RFID+0xb80>)
 8001d4a:	493f      	ldr	r1, [pc, #252]	@ (8001e48 <RFID+0xbc0>)
 8001d4c:	482a      	ldr	r0, [pc, #168]	@ (8001df8 <RFID+0xb70>)
 8001d4e:	f7fe fb4b 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d56:	f001 ff23 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001d5a:	4a36      	ldr	r2, [pc, #216]	@ (8001e34 <RFID+0xbac>)
 8001d5c:	4936      	ldr	r1, [pc, #216]	@ (8001e38 <RFID+0xbb0>)
 8001d5e:	4826      	ldr	r0, [pc, #152]	@ (8001df8 <RFID+0xb70>)
 8001d60:	f7fe fb42 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8001d64:	e0a8      	b.n	8001eb8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001d66:	793b      	ldrb	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fef9 	bl	8002b60 <CheckKey>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 ff23 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8001d76:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <RFID+0xb68>)
 8001d78:	4934      	ldr	r1, [pc, #208]	@ (8001e4c <RFID+0xbc4>)
 8001d7a:	481f      	ldr	r0, [pc, #124]	@ (8001df8 <RFID+0xb70>)
 8001d7c:	f7fe fb34 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d84:	f001 ff0c 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001d88:	4a2a      	ldr	r2, [pc, #168]	@ (8001e34 <RFID+0xbac>)
 8001d8a:	492b      	ldr	r1, [pc, #172]	@ (8001e38 <RFID+0xbb0>)
 8001d8c:	481a      	ldr	r0, [pc, #104]	@ (8001df8 <RFID+0xb70>)
 8001d8e:	f7fe fb2b 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d92:	e091      	b.n	8001eb8 <RFID+0xc30>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8001d94:	793b      	ldrb	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fee2 	bl	8002b60 <CheckKey>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10e      	bne.n	8001dc0 <RFID+0xb38>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 2","Do Not Exist");
 8001da2:	4a19      	ldr	r2, [pc, #100]	@ (8001e08 <RFID+0xb80>)
 8001da4:	492a      	ldr	r1, [pc, #168]	@ (8001e50 <RFID+0xbc8>)
 8001da6:	4814      	ldr	r0, [pc, #80]	@ (8001df8 <RFID+0xb70>)
 8001da8:	f7fe fb1e 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db0:	f001 fef6 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001db4:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <RFID+0xbb4>)
 8001db6:	4920      	ldr	r1, [pc, #128]	@ (8001e38 <RFID+0xbb0>)
 8001db8:	480f      	ldr	r0, [pc, #60]	@ (8001df8 <RFID+0xb70>)
 8001dba:	f7fe fb15 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8001dbe:	e07b      	b.n	8001eb8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001dc0:	793b      	ldrb	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fecc 	bl	8002b60 <CheckKey>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fef6 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <RFID+0xb68>)
 8001dd2:	4920      	ldr	r1, [pc, #128]	@ (8001e54 <RFID+0xbcc>)
 8001dd4:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <RFID+0xb70>)
 8001dd6:	f7fe fb07 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dde:	f001 fedf 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001de2:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <RFID+0xbb4>)
 8001de4:	4914      	ldr	r1, [pc, #80]	@ (8001e38 <RFID+0xbb0>)
 8001de6:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <RFID+0xb70>)
 8001de8:	f7fe fafe 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001dec:	e064      	b.n	8001eb8 <RFID+0xc30>
 8001dee:	bf00      	nop
 8001df0:	0800d430 	.word	0x0800d430
 8001df4:	0800d440 	.word	0x0800d440
 8001df8:	200003d8 	.word	0x200003d8
 8001dfc:	20000020 	.word	0x20000020
 8001e00:	0800d3e0 	.word	0x0800d3e0
 8001e04:	0800d3f0 	.word	0x0800d3f0
 8001e08:	0800d420 	.word	0x0800d420
 8001e0c:	0800d2b8 	.word	0x0800d2b8
 8001e10:	0800d400 	.word	0x0800d400
 8001e14:	0800d454 	.word	0x0800d454
 8001e18:	0800d2d8 	.word	0x0800d2d8
 8001e1c:	0800d410 	.word	0x0800d410
 8001e20:	0800d468 	.word	0x0800d468
 8001e24:	0800d3ac 	.word	0x0800d3ac
 8001e28:	0800d3c0 	.word	0x0800d3c0
 8001e2c:	0800d1f0 	.word	0x0800d1f0
 8001e30:	0800d1fc 	.word	0x0800d1fc
 8001e34:	0800d47c 	.word	0x0800d47c
 8001e38:	0800d48c 	.word	0x0800d48c
 8001e3c:	0800d49c 	.word	0x0800d49c
 8001e40:	0800d4ac 	.word	0x0800d4ac
 8001e44:	0800d1e8 	.word	0x0800d1e8
 8001e48:	0800d324 	.word	0x0800d324
 8001e4c:	0800d4bc 	.word	0x0800d4bc
 8001e50:	0800d330 	.word	0x0800d330
 8001e54:	0800d4d0 	.word	0x0800d4d0
															case 3:
																if (CheckKey(keyadd2) == 0)
 8001e58:	793b      	ldrb	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fe80 	bl	8002b60 <CheckKey>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10e      	bne.n	8001e84 <RFID+0xbfc>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","Do Not Exist");
 8001e66:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <RFID+0xd88>)
 8001e68:	496a      	ldr	r1, [pc, #424]	@ (8002014 <RFID+0xd8c>)
 8001e6a:	486b      	ldr	r0, [pc, #428]	@ (8002018 <RFID+0xd90>)
 8001e6c:	f7fe fabc 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e74:	f001 fe94 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001e78:	4a68      	ldr	r2, [pc, #416]	@ (800201c <RFID+0xd94>)
 8001e7a:	4969      	ldr	r1, [pc, #420]	@ (8002020 <RFID+0xd98>)
 8001e7c:	4866      	ldr	r0, [pc, #408]	@ (8002018 <RFID+0xd90>)
 8001e7e:	f7fe fab3 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8001e82:	e019      	b.n	8001eb8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001e84:	793b      	ldrb	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fe6a 	bl	8002b60 <CheckKey>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fe94 	bl	8002bbc <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8001e94:	4a63      	ldr	r2, [pc, #396]	@ (8002024 <RFID+0xd9c>)
 8001e96:	4964      	ldr	r1, [pc, #400]	@ (8002028 <RFID+0xda0>)
 8001e98:	485f      	ldr	r0, [pc, #380]	@ (8002018 <RFID+0xd90>)
 8001e9a:	f7fe faa5 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea2:	f001 fe7d 	bl	8003ba0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800201c <RFID+0xd94>)
 8001ea8:	495d      	ldr	r1, [pc, #372]	@ (8002020 <RFID+0xd98>)
 8001eaa:	485b      	ldr	r0, [pc, #364]	@ (8002018 <RFID+0xd90>)
 8001eac:	f7fe fa9c 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001eb0:	e002      	b.n	8001eb8 <RFID+0xc30>
															default:
																back12 = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	71fb      	strb	r3, [r7, #7]
																break;
 8001eb6:	bf00      	nop
													while (back12 == 1)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f43f aee1 	beq.w	8001c82 <RFID+0x9fa>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800202c <RFID+0xda4>)
 8001ec2:	495b      	ldr	r1, [pc, #364]	@ (8002030 <RFID+0xda8>)
 8001ec4:	4854      	ldr	r0, [pc, #336]	@ (8002018 <RFID+0xd90>)
 8001ec6:	f7fe fa8f 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001eca:	e002      	b.n	8001ed2 <RFID+0xc4a>
												default:
													backrm10 = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	72fb      	strb	r3, [r7, #11]
													break;
 8001ed0:	bf00      	nop
										while (backrm10 == 1)
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f43f ad41 	beq.w	800195c <RFID+0x6d4>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001eda:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <RFID+0xdac>)
 8001edc:	4956      	ldr	r1, [pc, #344]	@ (8002038 <RFID+0xdb0>)
 8001ede:	484e      	ldr	r0, [pc, #312]	@ (8002018 <RFID+0xd90>)
 8001ee0:	f7fe fa82 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001ee4:	e05e      	b.n	8001fa4 <RFID+0xd1c>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001ee6:	4a55      	ldr	r2, [pc, #340]	@ (800203c <RFID+0xdb4>)
 8001ee8:	4955      	ldr	r1, [pc, #340]	@ (8002040 <RFID+0xdb8>)
 8001eea:	484b      	ldr	r0, [pc, #300]	@ (8002018 <RFID+0xd90>)
 8001eec:	f7fe fa7c 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001ef4:	e04a      	b.n	8001f8c <RFID+0xd04>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ef6:	200a      	movs	r0, #10
 8001ef8:	f7fe fbd0 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001efc:	4603      	mov	r3, r0
 8001efe:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001f00:	4850      	ldr	r0, [pc, #320]	@ (8002044 <RFID+0xdbc>)
 8001f02:	f001 f9b5 	bl	8003270 <TM_MFRC522_Check>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d13a      	bne.n	8001f82 <RFID+0xcfa>
											{
												if (CheckListUID(CardID) != 0)
 8001f0c:	484d      	ldr	r0, [pc, #308]	@ (8002044 <RFID+0xdbc>)
 8001f0e:	f000 fca7 	bl	8002860 <CheckListUID>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d026      	beq.n	8001f66 <RFID+0xcde>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001f18:	484a      	ldr	r0, [pc, #296]	@ (8002044 <RFID+0xdbc>)
 8001f1a:	f000 fca1 	bl	8002860 <CheckListUID>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fe1d 	bl	8002b60 <CheckKey>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fe47 	bl	8002bbc <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002024 <RFID+0xd9c>)
 8001f30:	4945      	ldr	r1, [pc, #276]	@ (8002048 <RFID+0xdc0>)
 8001f32:	4839      	ldr	r0, [pc, #228]	@ (8002018 <RFID+0xd90>)
 8001f34:	f7fe fa58 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f3c:	f001 fe30 	bl	8003ba0 <HAL_Delay>
													if (checkcountUID() == 0)
 8001f40:	f000 fcbe 	bl	80028c0 <checkcountUID>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <RFID+0xcd2>
													{
														startadd();
 8001f4a:	f000 fe45 	bl	8002bd8 <startadd>
														rmquet = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8001f52:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <RFID+0xdc4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
														return;
 8001f58:	e057      	b.n	800200a <RFID+0xd82>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f5a:	4a38      	ldr	r2, [pc, #224]	@ (800203c <RFID+0xdb4>)
 8001f5c:	4938      	ldr	r1, [pc, #224]	@ (8002040 <RFID+0xdb8>)
 8001f5e:	482e      	ldr	r0, [pc, #184]	@ (8002018 <RFID+0xd90>)
 8001f60:	f7fe fa42 	bl	80003e8 <CLCD_I2C_Display>
 8001f64:	e00d      	b.n	8001f82 <RFID+0xcfa>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","Do Not Exist");
 8001f66:	4a2a      	ldr	r2, [pc, #168]	@ (8002010 <RFID+0xd88>)
 8001f68:	4939      	ldr	r1, [pc, #228]	@ (8002050 <RFID+0xdc8>)
 8001f6a:	482b      	ldr	r0, [pc, #172]	@ (8002018 <RFID+0xd90>)
 8001f6c:	f7fe fa3c 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f74:	f001 fe14 	bl	8003ba0 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f78:	4a30      	ldr	r2, [pc, #192]	@ (800203c <RFID+0xdb4>)
 8001f7a:	4931      	ldr	r1, [pc, #196]	@ (8002040 <RFID+0xdb8>)
 8001f7c:	4826      	ldr	r0, [pc, #152]	@ (8002018 <RFID+0xd90>)
 8001f7e:	f7fe fa33 	bl	80003e8 <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	2b23      	cmp	r3, #35	@ 0x23
 8001f86:	d101      	bne.n	8001f8c <RFID+0xd04>
											{
												rmquet = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1b1      	bne.n	8001ef6 <RFID+0xc6e>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001f92:	4a30      	ldr	r2, [pc, #192]	@ (8002054 <RFID+0xdcc>)
 8001f94:	4928      	ldr	r1, [pc, #160]	@ (8002038 <RFID+0xdb0>)
 8001f96:	4820      	ldr	r0, [pc, #128]	@ (8002018 <RFID+0xd90>)
 8001f98:	f7fe fa26 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001f9c:	e002      	b.n	8001fa4 <RFID+0xd1c>
									default:
										backrm1 = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	737b      	strb	r3, [r7, #13]
										break;
 8001fa2:	bf00      	nop
							while (backrm1 == 1)
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f43f ac8a 	beq.w	80018c0 <RFID+0x638>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001fac:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <RFID+0xdd0>)
 8001fae:	492b      	ldr	r1, [pc, #172]	@ (800205c <RFID+0xdd4>)
 8001fb0:	4819      	ldr	r0, [pc, #100]	@ (8002018 <RFID+0xd90>)
 8001fb2:	f7fe fa19 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001fb6:	e00a      	b.n	8001fce <RFID+0xd46>
						case 1:
							remoall();
 8001fb8:	f000 fe7e 	bl	8002cb8 <remoall>
							startadd();
 8001fbc:	f000 fe0c 	bl	8002bd8 <startadd>
							exitmenu = 0;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	@ (800204c <RFID+0xdc4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
							break;
 8001fc6:	e002      	b.n	8001fce <RFID+0xd46>
						default:
							backrm = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
							break;
 8001fcc:	bf00      	nop
				while (backrm == 1)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f43f abee 	beq.w	80017b2 <RFID+0x52a>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001fd6:	4a22      	ldr	r2, [pc, #136]	@ (8002060 <RFID+0xdd8>)
 8001fd8:	4922      	ldr	r1, [pc, #136]	@ (8002064 <RFID+0xddc>)
 8001fda:	480f      	ldr	r0, [pc, #60]	@ (8002018 <RFID+0xd90>)
 8001fdc:	f7fe fa04 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001fe0:	e00b      	b.n	8001ffa <RFID+0xd72>
			case 2:
				checkthe();
 8001fe2:	f000 fd0f 	bl	8002a04 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <RFID+0xde0>)
 8001fe8:	491e      	ldr	r1, [pc, #120]	@ (8002064 <RFID+0xddc>)
 8001fea:	480b      	ldr	r0, [pc, #44]	@ (8002018 <RFID+0xd90>)
 8001fec:	f7fe f9fc 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001ff0:	e003      	b.n	8001ffa <RFID+0xd72>
			default:
				exitmenu = 0;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <RFID+0xdc4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
				break;
 8001ff8:	bf00      	nop
	while (exitmenu )
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <RFID+0xdc4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f a951 	bne.w	80012a6 <RFID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002004:	4804      	ldr	r0, [pc, #16]	@ (8002018 <RFID+0xd90>)
 8002006:	f7fe f9df 	bl	80003c8 <CLCD_I2C_Clear>
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	0800d420 	.word	0x0800d420
 8002014:	0800d33c 	.word	0x0800d33c
 8002018:	200003d8 	.word	0x200003d8
 800201c:	0800d4ac 	.word	0x0800d4ac
 8002020:	0800d48c 	.word	0x0800d48c
 8002024:	0800d430 	.word	0x0800d430
 8002028:	0800d4e4 	.word	0x0800d4e4
 800202c:	0800d3d0 	.word	0x0800d3d0
 8002030:	0800d3c0 	.word	0x0800d3c0
 8002034:	0800d37c 	.word	0x0800d37c
 8002038:	0800d38c 	.word	0x0800d38c
 800203c:	0800d1e8 	.word	0x0800d1e8
 8002040:	0800d4f8 	.word	0x0800d4f8
 8002044:	200003e4 	.word	0x200003e4
 8002048:	0800d508 	.word	0x0800d508
 800204c:	20000020 	.word	0x20000020
 8002050:	0800d518 	.word	0x0800d518
 8002054:	0800d39c 	.word	0x0800d39c
 8002058:	0800d348 	.word	0x0800d348
 800205c:	0800d35c 	.word	0x0800d35c
 8002060:	0800d1c8 	.word	0x0800d1c8
 8002064:	0800d1ac 	.word	0x0800d1ac
 8002068:	0800d1d8 	.word	0x0800d1d8

0800206c <FACEID>:
void FACEID(void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8002072:	4ba8      	ldr	r3, [pc, #672]	@ (8002314 <FACEID+0x2a8>)
 8002074:	2214      	movs	r2, #20
 8002076:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002078:	23ff      	movs	r3, #255	@ 0xff
 800207a:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 800207c:	4aa6      	ldr	r2, [pc, #664]	@ (8002318 <FACEID+0x2ac>)
 800207e:	49a7      	ldr	r1, [pc, #668]	@ (800231c <FACEID+0x2b0>)
 8002080:	48a7      	ldr	r0, [pc, #668]	@ (8002320 <FACEID+0x2b4>)
 8002082:	f7fe f9b1 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 8002086:	e384      	b.n	8002792 <FACEID+0x726>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002088:	200a      	movs	r0, #10
 800208a:	f7fe fb07 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800208e:	4603      	mov	r3, r0
 8002090:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 8002092:	7a3b      	ldrb	r3, [r7, #8]
 8002094:	2b2a      	cmp	r3, #42	@ 0x2a
 8002096:	d124      	bne.n	80020e2 <FACEID+0x76>
		{
			exitmenu = Delaymenu;
 8002098:	4b9e      	ldr	r3, [pc, #632]	@ (8002314 <FACEID+0x2a8>)
 800209a:	2214      	movs	r2, #20
 800209c:	701a      	strb	r2, [r3, #0]
			status++;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	3301      	adds	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d801      	bhi.n	80020ae <FACEID+0x42>
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	e000      	b.n	80020b0 <FACEID+0x44>
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
			switch (status)
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <FACEID+0x52>
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d006      	beq.n	80020ca <FACEID+0x5e>
 80020bc:	e00b      	b.n	80020d6 <FACEID+0x6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80020be:	4a99      	ldr	r2, [pc, #612]	@ (8002324 <FACEID+0x2b8>)
 80020c0:	4996      	ldr	r1, [pc, #600]	@ (800231c <FACEID+0x2b0>)
 80020c2:	4897      	ldr	r0, [pc, #604]	@ (8002320 <FACEID+0x2b4>)
 80020c4:	f7fe f990 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020c8:	e00b      	b.n	80020e2 <FACEID+0x76>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 80020ca:	4a97      	ldr	r2, [pc, #604]	@ (8002328 <FACEID+0x2bc>)
 80020cc:	4993      	ldr	r1, [pc, #588]	@ (800231c <FACEID+0x2b0>)
 80020ce:	4894      	ldr	r0, [pc, #592]	@ (8002320 <FACEID+0x2b4>)
 80020d0:	f7fe f98a 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020d4:	e005      	b.n	80020e2 <FACEID+0x76>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 80020d6:	4a95      	ldr	r2, [pc, #596]	@ (800232c <FACEID+0x2c0>)
 80020d8:	4990      	ldr	r1, [pc, #576]	@ (800231c <FACEID+0x2b0>)
 80020da:	4891      	ldr	r0, [pc, #580]	@ (8002320 <FACEID+0x2b4>)
 80020dc:	f7fe f984 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020e0:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	2b23      	cmp	r3, #35	@ 0x23
 80020e6:	f040 8354 	bne.w	8002792 <FACEID+0x726>
		{
			exitmenu = Delaymenu;
 80020ea:	4b8a      	ldr	r3, [pc, #552]	@ (8002314 <FACEID+0x2a8>)
 80020ec:	2214      	movs	r2, #20
 80020ee:	701a      	strb	r2, [r3, #0]
			switch (status)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <FACEID+0x92>
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f000 8101 	beq.w	80022fe <FACEID+0x292>
 80020fc:	e345      	b.n	800278a <FACEID+0x71e>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80020fe:	4a8c      	ldr	r2, [pc, #560]	@ (8002330 <FACEID+0x2c4>)
 8002100:	498c      	ldr	r1, [pc, #560]	@ (8002334 <FACEID+0x2c8>)
 8002102:	4887      	ldr	r0, [pc, #540]	@ (8002320 <FACEID+0x2b4>)
 8002104:	f7fe f970 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 800210c:	2301      	movs	r3, #1
 800210e:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 8002110:	e0eb      	b.n	80022ea <FACEID+0x27e>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002112:	200a      	movs	r0, #10
 8002114:	f7fe fac2 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002118:	4603      	mov	r3, r0
 800211a:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800211c:	4b7d      	ldr	r3, [pc, #500]	@ (8002314 <FACEID+0x2a8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <FACEID+0xc8>
					{
						CLCD_I2C_Clear(&LCD1);
 8002124:	487e      	ldr	r0, [pc, #504]	@ (8002320 <FACEID+0x2b4>)
 8002126:	f7fe f94f 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800212a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800212e:	f001 fd37 	bl	8003ba0 <HAL_Delay>
						return;
 8002132:	e336      	b.n	80027a2 <FACEID+0x736>
					}
					if (key_pressed == '*')
 8002134:	7a3b      	ldrb	r3, [r7, #8]
 8002136:	2b2a      	cmp	r3, #42	@ 0x2a
 8002138:	d13a      	bne.n	80021b0 <FACEID+0x144>
					{
						exitmenu = Delaymenu;
 800213a:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <FACEID+0x2a8>)
 800213c:	2214      	movs	r2, #20
 800213e:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8002140:	7bbb      	ldrb	r3, [r7, #14]
 8002142:	3301      	adds	r3, #1
 8002144:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d801      	bhi.n	8002150 <FACEID+0xe4>
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	e000      	b.n	8002152 <FACEID+0xe6>
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	3b01      	subs	r3, #1
 8002158:	2b03      	cmp	r3, #3
 800215a:	d823      	bhi.n	80021a4 <FACEID+0x138>
 800215c:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <FACEID+0xf8>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	08002175 	.word	0x08002175
 8002168:	08002181 	.word	0x08002181
 800216c:	0800218d 	.word	0x0800218d
 8002170:	08002199 	.word	0x08002199
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002174:	4a70      	ldr	r2, [pc, #448]	@ (8002338 <FACEID+0x2cc>)
 8002176:	4971      	ldr	r1, [pc, #452]	@ (800233c <FACEID+0x2d0>)
 8002178:	4869      	ldr	r0, [pc, #420]	@ (8002320 <FACEID+0x2b4>)
 800217a:	f7fe f935 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800217e:	e017      	b.n	80021b0 <FACEID+0x144>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002180:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <FACEID+0x2d4>)
 8002182:	496e      	ldr	r1, [pc, #440]	@ (800233c <FACEID+0x2d0>)
 8002184:	4866      	ldr	r0, [pc, #408]	@ (8002320 <FACEID+0x2b4>)
 8002186:	f7fe f92f 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800218a:	e011      	b.n	80021b0 <FACEID+0x144>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800218c:	4a6d      	ldr	r2, [pc, #436]	@ (8002344 <FACEID+0x2d8>)
 800218e:	496b      	ldr	r1, [pc, #428]	@ (800233c <FACEID+0x2d0>)
 8002190:	4863      	ldr	r0, [pc, #396]	@ (8002320 <FACEID+0x2b4>)
 8002192:	f7fe f929 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002196:	e00b      	b.n	80021b0 <FACEID+0x144>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002198:	4a6b      	ldr	r2, [pc, #428]	@ (8002348 <FACEID+0x2dc>)
 800219a:	4968      	ldr	r1, [pc, #416]	@ (800233c <FACEID+0x2d0>)
 800219c:	4860      	ldr	r0, [pc, #384]	@ (8002320 <FACEID+0x2b4>)
 800219e:	f7fe f923 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021a2:	e005      	b.n	80021b0 <FACEID+0x144>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 80021a4:	4a61      	ldr	r2, [pc, #388]	@ (800232c <FACEID+0x2c0>)
 80021a6:	4965      	ldr	r1, [pc, #404]	@ (800233c <FACEID+0x2d0>)
 80021a8:	485d      	ldr	r0, [pc, #372]	@ (8002320 <FACEID+0x2b4>)
 80021aa:	f7fe f91d 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021ae:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80021b0:	7a3b      	ldrb	r3, [r7, #8]
 80021b2:	2b23      	cmp	r3, #35	@ 0x23
 80021b4:	f040 8099 	bne.w	80022ea <FACEID+0x27e>
					{
						exitmenu = Delaymenu;
 80021b8:	4b56      	ldr	r3, [pc, #344]	@ (8002314 <FACEID+0x2a8>)
 80021ba:	2214      	movs	r2, #20
 80021bc:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 80021be:	7bbb      	ldrb	r3, [r7, #14]
 80021c0:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	f200 808c 	bhi.w	80022e4 <FACEID+0x278>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <FACEID+0x168>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	08002225 	.word	0x08002225
 80021dc:	08002265 	.word	0x08002265
 80021e0:	080022a5 	.word	0x080022a5
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 ffba 	bl	8003160 <checkfaceid>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00e      	beq.n	8002210 <FACEID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 80021f2:	4a56      	ldr	r2, [pc, #344]	@ (800234c <FACEID+0x2e0>)
 80021f4:	4956      	ldr	r1, [pc, #344]	@ (8002350 <FACEID+0x2e4>)
 80021f6:	484a      	ldr	r0, [pc, #296]	@ (8002320 <FACEID+0x2b4>)
 80021f8:	f7fe f8f6 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 80021fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002200:	f001 fcce 	bl	8003ba0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <FACEID+0x2cc>)
 8002206:	494d      	ldr	r1, [pc, #308]	@ (800233c <FACEID+0x2d0>)
 8002208:	4845      	ldr	r0, [pc, #276]	@ (8002320 <FACEID+0x2b4>)
 800220a:	f7fe f8ed 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 800220e:	e06c      	b.n	80022ea <FACEID+0x27e>
								addface(keyadd1);
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 ff08 	bl	8003028 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002218:	4a47      	ldr	r2, [pc, #284]	@ (8002338 <FACEID+0x2cc>)
 800221a:	4948      	ldr	r1, [pc, #288]	@ (800233c <FACEID+0x2d0>)
 800221c:	4840      	ldr	r0, [pc, #256]	@ (8002320 <FACEID+0x2b4>)
 800221e:	f7fe f8e3 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002222:	e062      	b.n	80022ea <FACEID+0x27e>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff9a 	bl	8003160 <checkfaceid>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00e      	beq.n	8002250 <FACEID+0x1e4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 8002232:	4a48      	ldr	r2, [pc, #288]	@ (8002354 <FACEID+0x2e8>)
 8002234:	4948      	ldr	r1, [pc, #288]	@ (8002358 <FACEID+0x2ec>)
 8002236:	483a      	ldr	r0, [pc, #232]	@ (8002320 <FACEID+0x2b4>)
 8002238:	f7fe f8d6 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 800223c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002240:	f001 fcae 	bl	8003ba0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002244:	4a3e      	ldr	r2, [pc, #248]	@ (8002340 <FACEID+0x2d4>)
 8002246:	493d      	ldr	r1, [pc, #244]	@ (800233c <FACEID+0x2d0>)
 8002248:	4835      	ldr	r0, [pc, #212]	@ (8002320 <FACEID+0x2b4>)
 800224a:	f7fe f8cd 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800224e:	e04c      	b.n	80022ea <FACEID+0x27e>
								addface(keyadd1);
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fee8 	bl	8003028 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002258:	4a39      	ldr	r2, [pc, #228]	@ (8002340 <FACEID+0x2d4>)
 800225a:	4938      	ldr	r1, [pc, #224]	@ (800233c <FACEID+0x2d0>)
 800225c:	4830      	ldr	r0, [pc, #192]	@ (8002320 <FACEID+0x2b4>)
 800225e:	f7fe f8c3 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8002262:	e042      	b.n	80022ea <FACEID+0x27e>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 ff7a 	bl	8003160 <checkfaceid>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <FACEID+0x224>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 8002272:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <FACEID+0x2f0>)
 8002274:	493a      	ldr	r1, [pc, #232]	@ (8002360 <FACEID+0x2f4>)
 8002276:	482a      	ldr	r0, [pc, #168]	@ (8002320 <FACEID+0x2b4>)
 8002278:	f7fe f8b6 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 800227c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002280:	f001 fc8e 	bl	8003ba0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002284:	4a2f      	ldr	r2, [pc, #188]	@ (8002344 <FACEID+0x2d8>)
 8002286:	492d      	ldr	r1, [pc, #180]	@ (800233c <FACEID+0x2d0>)
 8002288:	4825      	ldr	r0, [pc, #148]	@ (8002320 <FACEID+0x2b4>)
 800228a:	f7fe f8ad 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 800228e:	e02c      	b.n	80022ea <FACEID+0x27e>
								addface(keyadd1);
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fec8 	bl	8003028 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002298:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <FACEID+0x2d8>)
 800229a:	4928      	ldr	r1, [pc, #160]	@ (800233c <FACEID+0x2d0>)
 800229c:	4820      	ldr	r0, [pc, #128]	@ (8002320 <FACEID+0x2b4>)
 800229e:	f7fe f8a3 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80022a2:	e022      	b.n	80022ea <FACEID+0x27e>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ff5a 	bl	8003160 <checkfaceid>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00e      	beq.n	80022d0 <FACEID+0x264>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 80022b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <FACEID+0x2f8>)
 80022b4:	492c      	ldr	r1, [pc, #176]	@ (8002368 <FACEID+0x2fc>)
 80022b6:	481a      	ldr	r0, [pc, #104]	@ (8002320 <FACEID+0x2b4>)
 80022b8:	f7fe f896 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 80022bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c0:	f001 fc6e 	bl	8003ba0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80022c4:	4a20      	ldr	r2, [pc, #128]	@ (8002348 <FACEID+0x2dc>)
 80022c6:	491d      	ldr	r1, [pc, #116]	@ (800233c <FACEID+0x2d0>)
 80022c8:	4815      	ldr	r0, [pc, #84]	@ (8002320 <FACEID+0x2b4>)
 80022ca:	f7fe f88d 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80022ce:	e00c      	b.n	80022ea <FACEID+0x27e>
								addface(keyadd1);
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fea8 	bl	8003028 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <FACEID+0x2dc>)
 80022da:	4918      	ldr	r1, [pc, #96]	@ (800233c <FACEID+0x2d0>)
 80022dc:	4810      	ldr	r0, [pc, #64]	@ (8002320 <FACEID+0x2b4>)
 80022de:	f7fe f883 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80022e2:	e002      	b.n	80022ea <FACEID+0x27e>
						default:
							back = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	737b      	strb	r3, [r7, #13]
							break;
 80022e8:	bf00      	nop
				while (back == 1)
 80022ea:	7b7b      	ldrb	r3, [r7, #13]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f43f af10 	beq.w	8002112 <FACEID+0xa6>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <FACEID+0x2b8>)
 80022f4:	4909      	ldr	r1, [pc, #36]	@ (800231c <FACEID+0x2b0>)
 80022f6:	480a      	ldr	r0, [pc, #40]	@ (8002320 <FACEID+0x2b4>)
 80022f8:	f7fe f876 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80022fc:	e249      	b.n	8002792 <FACEID+0x726>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <FACEID+0x2c4>)
 8002300:	490c      	ldr	r1, [pc, #48]	@ (8002334 <FACEID+0x2c8>)
 8002302:	4807      	ldr	r0, [pc, #28]	@ (8002320 <FACEID+0x2b4>)
 8002304:	f7fe f870 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002310:	e231      	b.n	8002776 <FACEID+0x70a>
 8002312:	bf00      	nop
 8002314:	20000020 	.word	0x20000020
 8002318:	0800d19c 	.word	0x0800d19c
 800231c:	0800d528 	.word	0x0800d528
 8002320:	200003d8 	.word	0x200003d8
 8002324:	0800d53c 	.word	0x0800d53c
 8002328:	0800d54c 	.word	0x0800d54c
 800232c:	0800d1e8 	.word	0x0800d1e8
 8002330:	0800d1f0 	.word	0x0800d1f0
 8002334:	0800d1fc 	.word	0x0800d1fc
 8002338:	0800d560 	.word	0x0800d560
 800233c:	0800d56c 	.word	0x0800d56c
 8002340:	0800d578 	.word	0x0800d578
 8002344:	0800d584 	.word	0x0800d584
 8002348:	0800d590 	.word	0x0800d590
 800234c:	0800d59c 	.word	0x0800d59c
 8002350:	0800d5b0 	.word	0x0800d5b0
 8002354:	0800d5c0 	.word	0x0800d5c0
 8002358:	0800d5d4 	.word	0x0800d5d4
 800235c:	0800d5e4 	.word	0x0800d5e4
 8002360:	0800d5f8 	.word	0x0800d5f8
 8002364:	0800d608 	.word	0x0800d608
 8002368:	0800d61c 	.word	0x0800d61c
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800236c:	200a      	movs	r0, #10
 800236e:	f7fe f995 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002372:	4603      	mov	r3, r0
 8002374:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002376:	4bae      	ldr	r3, [pc, #696]	@ (8002630 <FACEID+0x5c4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <FACEID+0x322>
					{
						CLCD_I2C_Clear(&LCD1);
 800237e:	48ad      	ldr	r0, [pc, #692]	@ (8002634 <FACEID+0x5c8>)
 8002380:	f7fe f822 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002388:	f001 fc0a 	bl	8003ba0 <HAL_Delay>
						return;
 800238c:	e209      	b.n	80027a2 <FACEID+0x736>
					}
					if (key_pressed == '*')
 800238e:	7a3b      	ldrb	r3, [r7, #8]
 8002390:	2b2a      	cmp	r3, #42	@ 0x2a
 8002392:	d124      	bne.n	80023de <FACEID+0x372>
					{
						exitmenu = Delaymenu;
 8002394:	4ba6      	ldr	r3, [pc, #664]	@ (8002630 <FACEID+0x5c4>)
 8002396:	2214      	movs	r2, #20
 8002398:	701a      	strb	r2, [r3, #0]
						statusrm++;
 800239a:	7b3b      	ldrb	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80023a0:	7b3b      	ldrb	r3, [r7, #12]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d801      	bhi.n	80023aa <FACEID+0x33e>
 80023a6:	7b3b      	ldrb	r3, [r7, #12]
 80023a8:	e000      	b.n	80023ac <FACEID+0x340>
 80023aa:	2300      	movs	r3, #0
 80023ac:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 80023ae:	7b3b      	ldrb	r3, [r7, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d002      	beq.n	80023ba <FACEID+0x34e>
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d006      	beq.n	80023c6 <FACEID+0x35a>
 80023b8:	e00b      	b.n	80023d2 <FACEID+0x366>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 80023ba:	4a9f      	ldr	r2, [pc, #636]	@ (8002638 <FACEID+0x5cc>)
 80023bc:	499f      	ldr	r1, [pc, #636]	@ (800263c <FACEID+0x5d0>)
 80023be:	489d      	ldr	r0, [pc, #628]	@ (8002634 <FACEID+0x5c8>)
 80023c0:	f7fe f812 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023c4:	e00b      	b.n	80023de <FACEID+0x372>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80023c6:	4a9e      	ldr	r2, [pc, #632]	@ (8002640 <FACEID+0x5d4>)
 80023c8:	499c      	ldr	r1, [pc, #624]	@ (800263c <FACEID+0x5d0>)
 80023ca:	489a      	ldr	r0, [pc, #616]	@ (8002634 <FACEID+0x5c8>)
 80023cc:	f7fe f80c 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023d0:	e005      	b.n	80023de <FACEID+0x372>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80023d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002644 <FACEID+0x5d8>)
 80023d4:	4999      	ldr	r1, [pc, #612]	@ (800263c <FACEID+0x5d0>)
 80023d6:	4897      	ldr	r0, [pc, #604]	@ (8002634 <FACEID+0x5c8>)
 80023d8:	f7fe f806 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023dc:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80023de:	7a3b      	ldrb	r3, [r7, #8]
 80023e0:	2b23      	cmp	r3, #35	@ 0x23
 80023e2:	f040 81c8 	bne.w	8002776 <FACEID+0x70a>
					{
						exitmenu = Delaymenu;
 80023e6:	4b92      	ldr	r3, [pc, #584]	@ (8002630 <FACEID+0x5c4>)
 80023e8:	2214      	movs	r2, #20
 80023ea:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 80023ec:	7b3b      	ldrb	r3, [r7, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d003      	beq.n	80023fa <FACEID+0x38e>
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f000 8193 	beq.w	800271e <FACEID+0x6b2>
 80023f8:	e1ba      	b.n	8002770 <FACEID+0x704>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80023fa:	4a93      	ldr	r2, [pc, #588]	@ (8002648 <FACEID+0x5dc>)
 80023fc:	4993      	ldr	r1, [pc, #588]	@ (800264c <FACEID+0x5e0>)
 80023fe:	488d      	ldr	r0, [pc, #564]	@ (8002634 <FACEID+0x5c8>)
 8002400:	f7fd fff2 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 800240c:	e17d      	b.n	800270a <FACEID+0x69e>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800240e:	200a      	movs	r0, #10
 8002410:	f7fe f944 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002414:	4603      	mov	r3, r0
 8002416:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 8002418:	4b85      	ldr	r3, [pc, #532]	@ (8002630 <FACEID+0x5c4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <FACEID+0x3c4>
								{
									CLCD_I2C_Clear(&LCD1);
 8002420:	4884      	ldr	r0, [pc, #528]	@ (8002634 <FACEID+0x5c8>)
 8002422:	f7fd ffd1 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8002426:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800242a:	f001 fbb9 	bl	8003ba0 <HAL_Delay>
									return;
 800242e:	e1b8      	b.n	80027a2 <FACEID+0x736>
								}
								if (key_pressed == '*')
 8002430:	7a3b      	ldrb	r3, [r7, #8]
 8002432:	2b2a      	cmp	r3, #42	@ 0x2a
 8002434:	d13a      	bne.n	80024ac <FACEID+0x440>
								{
									exitmenu = Delaymenu;
 8002436:	4b7e      	ldr	r3, [pc, #504]	@ (8002630 <FACEID+0x5c4>)
 8002438:	2214      	movs	r2, #20
 800243a:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 800243c:	7abb      	ldrb	r3, [r7, #10]
 800243e:	3301      	adds	r3, #1
 8002440:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 8002442:	7abb      	ldrb	r3, [r7, #10]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d801      	bhi.n	800244c <FACEID+0x3e0>
 8002448:	7abb      	ldrb	r3, [r7, #10]
 800244a:	e000      	b.n	800244e <FACEID+0x3e2>
 800244c:	2300      	movs	r3, #0
 800244e:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 8002450:	7abb      	ldrb	r3, [r7, #10]
 8002452:	3b01      	subs	r3, #1
 8002454:	2b03      	cmp	r3, #3
 8002456:	d823      	bhi.n	80024a0 <FACEID+0x434>
 8002458:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <FACEID+0x3f4>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002471 	.word	0x08002471
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002489 	.word	0x08002489
 800246c:	08002495 	.word	0x08002495
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove FACE 1");
 8002470:	4a77      	ldr	r2, [pc, #476]	@ (8002650 <FACEID+0x5e4>)
 8002472:	4978      	ldr	r1, [pc, #480]	@ (8002654 <FACEID+0x5e8>)
 8002474:	486f      	ldr	r0, [pc, #444]	@ (8002634 <FACEID+0x5c8>)
 8002476:	f7fd ffb7 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800247a:	e017      	b.n	80024ac <FACEID+0x440>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove FACE 2");
 800247c:	4a76      	ldr	r2, [pc, #472]	@ (8002658 <FACEID+0x5ec>)
 800247e:	4975      	ldr	r1, [pc, #468]	@ (8002654 <FACEID+0x5e8>)
 8002480:	486c      	ldr	r0, [pc, #432]	@ (8002634 <FACEID+0x5c8>)
 8002482:	f7fd ffb1 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002486:	e011      	b.n	80024ac <FACEID+0x440>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove FACE 3");
 8002488:	4a74      	ldr	r2, [pc, #464]	@ (800265c <FACEID+0x5f0>)
 800248a:	4972      	ldr	r1, [pc, #456]	@ (8002654 <FACEID+0x5e8>)
 800248c:	4869      	ldr	r0, [pc, #420]	@ (8002634 <FACEID+0x5c8>)
 800248e:	f7fd ffab 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002492:	e00b      	b.n	80024ac <FACEID+0x440>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove FACE 4");
 8002494:	4a72      	ldr	r2, [pc, #456]	@ (8002660 <FACEID+0x5f4>)
 8002496:	496f      	ldr	r1, [pc, #444]	@ (8002654 <FACEID+0x5e8>)
 8002498:	4866      	ldr	r0, [pc, #408]	@ (8002634 <FACEID+0x5c8>)
 800249a:	f7fd ffa5 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800249e:	e005      	b.n	80024ac <FACEID+0x440>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 80024a0:	4a70      	ldr	r2, [pc, #448]	@ (8002664 <FACEID+0x5f8>)
 80024a2:	496c      	ldr	r1, [pc, #432]	@ (8002654 <FACEID+0x5e8>)
 80024a4:	4863      	ldr	r0, [pc, #396]	@ (8002634 <FACEID+0x5c8>)
 80024a6:	f7fd ff9f 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024aa:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 80024ac:	7a3b      	ldrb	r3, [r7, #8]
 80024ae:	2b23      	cmp	r3, #35	@ 0x23
 80024b0:	f040 812b 	bne.w	800270a <FACEID+0x69e>
								{
									exitmenu = Delaymenu;
 80024b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002630 <FACEID+0x5c4>)
 80024b6:	2214      	movs	r2, #20
 80024b8:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80024ba:	7abb      	ldrb	r3, [r7, #10]
 80024bc:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f200 811e 	bhi.w	8002704 <FACEID+0x698>
 80024c8:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <FACEID+0x464>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	08002551 	.word	0x08002551
 80024d8:	080025c1 	.word	0x080025c1
 80024dc:	08002695 	.word	0x08002695
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fe3c 	bl	8003160 <checkfaceid>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <FACEID+0x4a0>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "Do Not Exist");
 80024ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002668 <FACEID+0x5fc>)
 80024f0:	495e      	ldr	r1, [pc, #376]	@ (800266c <FACEID+0x600>)
 80024f2:	4850      	ldr	r0, [pc, #320]	@ (8002634 <FACEID+0x5c8>)
 80024f4:	f7fd ff78 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80024f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024fc:	f001 fb50 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002500:	4a5b      	ldr	r2, [pc, #364]	@ (8002670 <FACEID+0x604>)
 8002502:	4954      	ldr	r1, [pc, #336]	@ (8002654 <FACEID+0x5e8>)
 8002504:	484b      	ldr	r0, [pc, #300]	@ (8002634 <FACEID+0x5c8>)
 8002506:	f7fd ff6f 	bl	80003e8 <CLCD_I2C_Display>
											else
											{
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
											}
										}
										break;
 800250a:	e0fe      	b.n	800270a <FACEID+0x69e>
											removeface(checkfaceid(keyrm1));
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fe26 	bl	8003160 <checkfaceid>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fdd4 	bl	80030c4 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 800251c:	4a55      	ldr	r2, [pc, #340]	@ (8002674 <FACEID+0x608>)
 800251e:	4956      	ldr	r1, [pc, #344]	@ (8002678 <FACEID+0x60c>)
 8002520:	4844      	ldr	r0, [pc, #272]	@ (8002634 <FACEID+0x5c8>)
 8002522:	f7fd ff61 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800252a:	f001 fb39 	bl	8003ba0 <HAL_Delay>
											if (checkcountUID() == 0)
 800252e:	f000 f9c7 	bl	80028c0 <checkcountUID>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <FACEID+0x4d8>
												startadd();
 8002538:	f000 fb4e 	bl	8002bd8 <startadd>
												exitmenu = 0;
 800253c:	4b3c      	ldr	r3, [pc, #240]	@ (8002630 <FACEID+0x5c4>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
										break;
 8002542:	e0e2      	b.n	800270a <FACEID+0x69e>
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002544:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <FACEID+0x604>)
 8002546:	4943      	ldr	r1, [pc, #268]	@ (8002654 <FACEID+0x5e8>)
 8002548:	483a      	ldr	r0, [pc, #232]	@ (8002634 <FACEID+0x5c8>)
 800254a:	f7fd ff4d 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800254e:	e0dc      	b.n	800270a <FACEID+0x69e>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fe04 	bl	8003160 <checkfaceid>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10e      	bne.n	800257c <FACEID+0x510>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "Do Not Exist");
 800255e:	4a42      	ldr	r2, [pc, #264]	@ (8002668 <FACEID+0x5fc>)
 8002560:	4946      	ldr	r1, [pc, #280]	@ (800267c <FACEID+0x610>)
 8002562:	4834      	ldr	r0, [pc, #208]	@ (8002634 <FACEID+0x5c8>)
 8002564:	f7fd ff40 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800256c:	f001 fb18 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002570:	4a43      	ldr	r2, [pc, #268]	@ (8002680 <FACEID+0x614>)
 8002572:	4938      	ldr	r1, [pc, #224]	@ (8002654 <FACEID+0x5e8>)
 8002574:	482f      	ldr	r0, [pc, #188]	@ (8002634 <FACEID+0x5c8>)
 8002576:	f7fd ff37 	bl	80003e8 <CLCD_I2C_Display>
											else
											{
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
											}
										}
										break;
 800257a:	e0c6      	b.n	800270a <FACEID+0x69e>
											removeface(checkfaceid(keyrm1));
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fdee 	bl	8003160 <checkfaceid>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fd9c 	bl	80030c4 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 800258c:	4a39      	ldr	r2, [pc, #228]	@ (8002674 <FACEID+0x608>)
 800258e:	493d      	ldr	r1, [pc, #244]	@ (8002684 <FACEID+0x618>)
 8002590:	4828      	ldr	r0, [pc, #160]	@ (8002634 <FACEID+0x5c8>)
 8002592:	f7fd ff29 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002596:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800259a:	f001 fb01 	bl	8003ba0 <HAL_Delay>
											if (checkcountUID() == 0)
 800259e:	f000 f98f 	bl	80028c0 <checkcountUID>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <FACEID+0x548>
												startadd();
 80025a8:	f000 fb16 	bl	8002bd8 <startadd>
												exitmenu = 0;
 80025ac:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <FACEID+0x5c4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
										break;
 80025b2:	e0aa      	b.n	800270a <FACEID+0x69e>
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80025b4:	4a32      	ldr	r2, [pc, #200]	@ (8002680 <FACEID+0x614>)
 80025b6:	4927      	ldr	r1, [pc, #156]	@ (8002654 <FACEID+0x5e8>)
 80025b8:	481e      	ldr	r0, [pc, #120]	@ (8002634 <FACEID+0x5c8>)
 80025ba:	f7fd ff15 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80025be:	e0a4      	b.n	800270a <FACEID+0x69e>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fdcc 	bl	8003160 <checkfaceid>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <FACEID+0x580>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "Do Not Exist");
 80025ce:	4a26      	ldr	r2, [pc, #152]	@ (8002668 <FACEID+0x5fc>)
 80025d0:	492d      	ldr	r1, [pc, #180]	@ (8002688 <FACEID+0x61c>)
 80025d2:	4818      	ldr	r0, [pc, #96]	@ (8002634 <FACEID+0x5c8>)
 80025d4:	f7fd ff08 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80025d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025dc:	f001 fae0 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80025e0:	4a2a      	ldr	r2, [pc, #168]	@ (800268c <FACEID+0x620>)
 80025e2:	491c      	ldr	r1, [pc, #112]	@ (8002654 <FACEID+0x5e8>)
 80025e4:	4813      	ldr	r0, [pc, #76]	@ (8002634 <FACEID+0x5c8>)
 80025e6:	f7fd feff 	bl	80003e8 <CLCD_I2C_Display>
											else
											{
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
											}
										}
										break;
 80025ea:	e08e      	b.n	800270a <FACEID+0x69e>
											removeface(checkfaceid(keyrm1));
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fdb6 	bl	8003160 <checkfaceid>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fd64 	bl	80030c4 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <FACEID+0x608>)
 80025fe:	4924      	ldr	r1, [pc, #144]	@ (8002690 <FACEID+0x624>)
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <FACEID+0x5c8>)
 8002602:	f7fd fef1 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260a:	f001 fac9 	bl	8003ba0 <HAL_Delay>
											if (checkcountUID() == 0)
 800260e:	f000 f957 	bl	80028c0 <checkcountUID>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <FACEID+0x5b8>
												startadd();
 8002618:	f000 fade 	bl	8002bd8 <startadd>
												exitmenu = 0;
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <FACEID+0x5c4>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
										break;
 8002622:	e072      	b.n	800270a <FACEID+0x69e>
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <FACEID+0x620>)
 8002626:	490b      	ldr	r1, [pc, #44]	@ (8002654 <FACEID+0x5e8>)
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <FACEID+0x5c8>)
 800262a:	f7fd fedd 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800262e:	e06c      	b.n	800270a <FACEID+0x69e>
 8002630:	20000020 	.word	0x20000020
 8002634:	200003d8 	.word	0x200003d8
 8002638:	0800d62c 	.word	0x0800d62c
 800263c:	0800d640 	.word	0x0800d640
 8002640:	0800d36c 	.word	0x0800d36c
 8002644:	0800d1e8 	.word	0x0800d1e8
 8002648:	0800d1f0 	.word	0x0800d1f0
 800264c:	0800d1fc 	.word	0x0800d1fc
 8002650:	0800d650 	.word	0x0800d650
 8002654:	0800d38c 	.word	0x0800d38c
 8002658:	0800d664 	.word	0x0800d664
 800265c:	0800d678 	.word	0x0800d678
 8002660:	0800d68c 	.word	0x0800d68c
 8002664:	0800d6a0 	.word	0x0800d6a0
 8002668:	0800d420 	.word	0x0800d420
 800266c:	0800d6ac 	.word	0x0800d6ac
 8002670:	0800d6bc 	.word	0x0800d6bc
 8002674:	0800d430 	.word	0x0800d430
 8002678:	0800d6d0 	.word	0x0800d6d0
 800267c:	0800d6e0 	.word	0x0800d6e0
 8002680:	0800d6f0 	.word	0x0800d6f0
 8002684:	0800d704 	.word	0x0800d704
 8002688:	0800d714 	.word	0x0800d714
 800268c:	0800d724 	.word	0x0800d724
 8002690:	0800d738 	.word	0x0800d738
									case 4:
										if (checkfaceid(keyrm1) == 0)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fd62 	bl	8003160 <checkfaceid>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10e      	bne.n	80026c0 <FACEID+0x654>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "Do Not Exist");
 80026a2:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <FACEID+0x73c>)
 80026a4:	4941      	ldr	r1, [pc, #260]	@ (80027ac <FACEID+0x740>)
 80026a6:	4842      	ldr	r0, [pc, #264]	@ (80027b0 <FACEID+0x744>)
 80026a8:	f7fd fe9e 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80026ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026b0:	f001 fa76 	bl	8003ba0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80026b4:	4a3f      	ldr	r2, [pc, #252]	@ (80027b4 <FACEID+0x748>)
 80026b6:	4940      	ldr	r1, [pc, #256]	@ (80027b8 <FACEID+0x74c>)
 80026b8:	483d      	ldr	r0, [pc, #244]	@ (80027b0 <FACEID+0x744>)
 80026ba:	f7fd fe95 	bl	80003e8 <CLCD_I2C_Display>
											else
											{
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
											}
										}
										break;
 80026be:	e024      	b.n	800270a <FACEID+0x69e>
											removeface(checkfaceid(keyrm1));
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd4c 	bl	8003160 <checkfaceid>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fcfa 	bl	80030c4 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 80026d0:	4a3a      	ldr	r2, [pc, #232]	@ (80027bc <FACEID+0x750>)
 80026d2:	493b      	ldr	r1, [pc, #236]	@ (80027c0 <FACEID+0x754>)
 80026d4:	4836      	ldr	r0, [pc, #216]	@ (80027b0 <FACEID+0x744>)
 80026d6:	f7fd fe87 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80026da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026de:	f001 fa5f 	bl	8003ba0 <HAL_Delay>
											if (checkcountUID() == 0)
 80026e2:	f000 f8ed 	bl	80028c0 <checkcountUID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <FACEID+0x68c>
												startadd();
 80026ec:	f000 fa74 	bl	8002bd8 <startadd>
												exitmenu = 0;
 80026f0:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <FACEID+0x758>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
										break;
 80026f6:	e008      	b.n	800270a <FACEID+0x69e>
												CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80026f8:	4a2e      	ldr	r2, [pc, #184]	@ (80027b4 <FACEID+0x748>)
 80026fa:	492f      	ldr	r1, [pc, #188]	@ (80027b8 <FACEID+0x74c>)
 80026fc:	482c      	ldr	r0, [pc, #176]	@ (80027b0 <FACEID+0x744>)
 80026fe:	f7fd fe73 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002702:	e002      	b.n	800270a <FACEID+0x69e>
									default:
										backrm1 = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	727b      	strb	r3, [r7, #9]
										break;
 8002708:	bf00      	nop
							while (backrm1 == 1)
 800270a:	7a7b      	ldrb	r3, [r7, #9]
 800270c:	2b01      	cmp	r3, #1
 800270e:	f43f ae7e 	beq.w	800240e <FACEID+0x3a2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002712:	4a2d      	ldr	r2, [pc, #180]	@ (80027c8 <FACEID+0x75c>)
 8002714:	492d      	ldr	r1, [pc, #180]	@ (80027cc <FACEID+0x760>)
 8002716:	4826      	ldr	r0, [pc, #152]	@ (80027b0 <FACEID+0x744>)
 8002718:	f7fd fe66 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800271c:	e02b      	b.n	8002776 <FACEID+0x70a>
						case 2:
							sprintf(Tx_Buffer , "Rem.99" );
 800271e:	492c      	ldr	r1, [pc, #176]	@ (80027d0 <FACEID+0x764>)
 8002720:	482c      	ldr	r0, [pc, #176]	@ (80027d4 <FACEID+0x768>)
 8002722:	f00a f859 	bl	800c7d8 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 6);
 8002726:	2106      	movs	r1, #6
 8002728:	482a      	ldr	r0, [pc, #168]	@ (80027d4 <FACEID+0x768>)
 800272a:	f009 fc77 	bl	800c01c <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 800272e:	4a2a      	ldr	r2, [pc, #168]	@ (80027d8 <FACEID+0x76c>)
 8002730:	492a      	ldr	r1, [pc, #168]	@ (80027dc <FACEID+0x770>)
 8002732:	481f      	ldr	r0, [pc, #124]	@ (80027b0 <FACEID+0x744>)
 8002734:	f7fd fe58 	bl	80003e8 <CLCD_I2C_Display>
							exitmenu = 60;
 8002738:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <FACEID+0x758>)
 800273a:	223c      	movs	r2, #60	@ 0x3c
 800273c:	701a      	strb	r2, [r3, #0]
							while(exitmenu != 0){
 800273e:	e00f      	b.n	8002760 <FACEID+0x6f4>
								if(Rx_Buffer[0] == 'T'){
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <FACEID+0x774>)
 8002742:	f993 3000 	ldrsb.w	r3, [r3]
 8002746:	2b54      	cmp	r3, #84	@ 0x54
 8002748:	d10a      	bne.n	8002760 <FACEID+0x6f4>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 800274a:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <FACEID+0x750>)
 800274c:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <FACEID+0x778>)
 800274e:	4818      	ldr	r0, [pc, #96]	@ (80027b0 <FACEID+0x744>)
 8002750:	f7fd fe4a 	bl	80003e8 <CLCD_I2C_Display>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	2100      	movs	r1, #0
 8002758:	4821      	ldr	r0, [pc, #132]	@ (80027e0 <FACEID+0x774>)
 800275a:	f00a f85d 	bl	800c818 <memset>
									break;
 800275e:	e003      	b.n	8002768 <FACEID+0x6fc>
							while(exitmenu != 0){
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <FACEID+0x758>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1eb      	bne.n	8002740 <FACEID+0x6d4>
								}
							}
							exitmenu = 0;
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <FACEID+0x758>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 800276e:	e002      	b.n	8002776 <FACEID+0x70a>
						default:
							backrm=0;
 8002770:	2300      	movs	r3, #0
 8002772:	72fb      	strb	r3, [r7, #11]
							break;
 8002774:	bf00      	nop
				while (backrm == 1)
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	2b01      	cmp	r3, #1
 800277a:	f43f adf7 	beq.w	800236c <FACEID+0x300>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800277e:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <FACEID+0x77c>)
 8002780:	491a      	ldr	r1, [pc, #104]	@ (80027ec <FACEID+0x780>)
 8002782:	480b      	ldr	r0, [pc, #44]	@ (80027b0 <FACEID+0x744>)
 8002784:	f7fd fe30 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8002788:	e003      	b.n	8002792 <FACEID+0x726>
			default:
				exitmenu=0;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <FACEID+0x758>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
				break;
 8002790:	bf00      	nop
	while (exitmenu )
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <FACEID+0x758>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f ac76 	bne.w	8002088 <FACEID+0x1c>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800279c:	4804      	ldr	r0, [pc, #16]	@ (80027b0 <FACEID+0x744>)
 800279e:	f7fd fe13 	bl	80003c8 <CLCD_I2C_Clear>
}
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	0800d420 	.word	0x0800d420
 80027ac:	0800d748 	.word	0x0800d748
 80027b0:	200003d8 	.word	0x200003d8
 80027b4:	0800d758 	.word	0x0800d758
 80027b8:	0800d38c 	.word	0x0800d38c
 80027bc:	0800d430 	.word	0x0800d430
 80027c0:	0800d76c 	.word	0x0800d76c
 80027c4:	20000020 	.word	0x20000020
 80027c8:	0800d62c 	.word	0x0800d62c
 80027cc:	0800d640 	.word	0x0800d640
 80027d0:	0800d77c 	.word	0x0800d77c
 80027d4:	200003d0 	.word	0x200003d0
 80027d8:	0800d784 	.word	0x0800d784
 80027dc:	0800d788 	.word	0x0800d788
 80027e0:	20000350 	.word	0x20000350
 80027e4:	0800d794 	.word	0x0800d794
 80027e8:	0800d54c 	.word	0x0800d54c
 80027ec:	0800d528 	.word	0x0800d528

080027f0 <FINGER>:
void FINGER()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	add_finger();
 80027f4:	f000 fa86 	bl	8002d04 <add_finger>
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <PASSWORD>:
void PASSWORD(){}
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2208      	movs	r2, #8
 8002818:	4619      	mov	r1, r3
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f7fe fa14 	bl	8000c48 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002820:	7cbb      	ldrb	r3, [r7, #18]
 8002822:	2bff      	cmp	r3, #255	@ 0xff
 8002824:	d001      	beq.n	800282a <CheckUID+0x22>
		return 0;
 8002826:	2300      	movs	r3, #0
 8002828:	e016      	b.n	8002858 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
 800282e:	e00f      	b.n	8002850 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	3318      	adds	r3, #24
 800283c:	443b      	add	r3, r7
 800283e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <CheckUID+0x42>
			return 0;
 8002846:	2300      	movs	r3, #0
 8002848:	e006      	b.n	8002858 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	3301      	adds	r3, #1
 800284e:	75fb      	strb	r3, [r7, #23]
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d9ec      	bls.n	8002830 <CheckUID+0x28>
	}
	return 1;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <CheckListUID+0x5c>)
 800286a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800286c:	e018      	b.n	80028a0 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3306      	adds	r3, #6
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f9cf 	bl	8000c16 <Flash_Read_2Byte>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002880:	429a      	cmp	r2, r3
 8002882:	d10a      	bne.n	800289a <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffbe 	bl	8002808 <CheckUID>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d103      	bne.n	800289a <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3305      	adds	r3, #5
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	e00b      	b.n	80028b2 <CheckListUID+0x52>
		}
		pt = pt + 8;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3308      	adds	r3, #8
 800289e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3305      	adds	r3, #5
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe f9aa 	bl	8000bfe <Flash_Read_Byte>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d1de      	bne.n	800286e <CheckListUID+0xe>
	}
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	0800f000 	.word	0x0800f000

080028c0 <checkcountUID>:

uint8_t checkcountUID(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80028c6:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <checkcountUID+0x60>)
 80028c8:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80028ce:	e01a      	b.n	8002906 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3306      	adds	r3, #6
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe f99e 	bl	8000c16 <Flash_Read_2Byte>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d10c      	bne.n	8002900 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3305      	adds	r3, #5
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f987 	bl	8000bfe <Flash_Read_Byte>
 80028f0:	4603      	mov	r3, r0
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <checkcountUID+0x40>
			{
				count++;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	3301      	adds	r3, #1
 80028fe:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3308      	adds	r3, #8
 8002904:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3305      	adds	r3, #5
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f977 	bl	8000bfe <Flash_Read_Byte>
 8002910:	4603      	mov	r3, r0
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	d1dc      	bne.n	80028d0 <checkcountUID+0x10>
	}
	return count;
 8002916:	78fb      	ldrb	r3, [r7, #3]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0800f000 	.word	0x0800f000

08002924 <adduid>:

void adduid(uint8_t key)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
	setaddress();
 800292e:	f000 f9a7 	bl	8002c80 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002932:	4a2c      	ldr	r2, [pc, #176]	@ (80029e4 <adduid+0xc0>)
 8002934:	492c      	ldr	r1, [pc, #176]	@ (80029e8 <adduid+0xc4>)
 8002936:	482d      	ldr	r0, [pc, #180]	@ (80029ec <adduid+0xc8>)
 8002938:	f7fd fd56 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu)
 800293c:	e049      	b.n	80029d2 <adduid+0xae>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 800293e:	482c      	ldr	r0, [pc, #176]	@ (80029f0 <adduid+0xcc>)
 8002940:	f000 fc96 	bl	8003270 <TM_MFRC522_Check>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13d      	bne.n	80029c6 <adduid+0xa2>
		{
			HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	@ 0x64
 800294c:	f001 f928 	bl	8003ba0 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002950:	4827      	ldr	r0, [pc, #156]	@ (80029f0 <adduid+0xcc>)
 8002952:	f7ff ff85 	bl	8002860 <CheckListUID>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11f      	bne.n	800299c <adduid+0x78>
			{
				CardID[5] = key;
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <adduid+0xcc>)
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002962:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <adduid+0xd0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2206      	movs	r2, #6
 8002968:	4921      	ldr	r1, [pc, #132]	@ (80029f0 <adduid+0xcc>)
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe f924 	bl	8000bb8 <Flash_Write_Array>
				AddressUID += 8;
 8002970:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <adduid+0xd0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3308      	adds	r3, #8
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <adduid+0xd0>)
 8002978:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 800297a:	481c      	ldr	r0, [pc, #112]	@ (80029ec <adduid+0xc8>)
 800297c:	f7fd fd24 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	4819      	ldr	r0, [pc, #100]	@ (80029ec <adduid+0xc8>)
 8002986:	f7fd fcb5 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 800298a:	491b      	ldr	r1, [pc, #108]	@ (80029f8 <adduid+0xd4>)
 800298c:	4817      	ldr	r0, [pc, #92]	@ (80029ec <adduid+0xc8>)
 800298e:	f7fd fd04 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002996:	f001 f903 	bl	8003ba0 <HAL_Delay>
				return;
 800299a:	e020      	b.n	80029de <adduid+0xba>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 800299c:	4813      	ldr	r0, [pc, #76]	@ (80029ec <adduid+0xc8>)
 800299e:	f7fd fd13 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	4811      	ldr	r0, [pc, #68]	@ (80029ec <adduid+0xc8>)
 80029a8:	f7fd fca4 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 80029ac:	4913      	ldr	r1, [pc, #76]	@ (80029fc <adduid+0xd8>)
 80029ae:	480f      	ldr	r0, [pc, #60]	@ (80029ec <adduid+0xc8>)
 80029b0:	f7fd fcf3 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 80029b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b8:	f001 f8f2 	bl	8003ba0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80029bc:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <adduid+0xc0>)
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <adduid+0xc4>)
 80029c0:	480a      	ldr	r0, [pc, #40]	@ (80029ec <adduid+0xc8>)
 80029c2:	f7fd fd11 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 80029c6:	2064      	movs	r0, #100	@ 0x64
 80029c8:	f7fd fe68 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b23      	cmp	r3, #35	@ 0x23
 80029d0:	d004      	beq.n	80029dc <adduid+0xb8>
	while (exitmenu)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <adduid+0xdc>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1b1      	bne.n	800293e <adduid+0x1a>
 80029da:	e000      	b.n	80029de <adduid+0xba>
		{
			return;
 80029dc:	bf00      	nop
		}
	}
}
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	0800d1e8 	.word	0x0800d1e8
 80029e8:	0800d7a4 	.word	0x0800d7a4
 80029ec:	200003d8 	.word	0x200003d8
 80029f0:	200003e4 	.word	0x200003e4
 80029f4:	20000024 	.word	0x20000024
 80029f8:	0800d7b0 	.word	0x0800d7b0
 80029fc:	0800d7c0 	.word	0x0800d7c0
 8002a00:	20000020 	.word	0x20000020

08002a04 <checkthe>:

void checkthe(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002a0a:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <checkthe+0x12c>)
 8002a0c:	221e      	movs	r2, #30
 8002a0e:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002a10:	4a48      	ldr	r2, [pc, #288]	@ (8002b34 <checkthe+0x130>)
 8002a12:	4949      	ldr	r1, [pc, #292]	@ (8002b38 <checkthe+0x134>)
 8002a14:	4849      	ldr	r0, [pc, #292]	@ (8002b3c <checkthe+0x138>)
 8002a16:	f7fd fce7 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 8002a1a:	e07e      	b.n	8002b1a <checkthe+0x116>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002a1c:	4848      	ldr	r0, [pc, #288]	@ (8002b40 <checkthe+0x13c>)
 8002a1e:	f000 fc27 	bl	8003270 <TM_MFRC522_Check>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d172      	bne.n	8002b0e <checkthe+0x10a>
		{
			if (CheckListUID(CardID) == 0)
 8002a28:	4845      	ldr	r0, [pc, #276]	@ (8002b40 <checkthe+0x13c>)
 8002a2a:	f7ff ff19 	bl	8002860 <CheckListUID>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d119      	bne.n	8002a68 <checkthe+0x64>
			{
				CLCD_I2C_Clear(&LCD1);
 8002a34:	4841      	ldr	r0, [pc, #260]	@ (8002b3c <checkthe+0x138>)
 8002a36:	f7fd fcc7 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	483f      	ldr	r0, [pc, #252]	@ (8002b3c <checkthe+0x138>)
 8002a40:	f7fd fc58 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002a44:	493f      	ldr	r1, [pc, #252]	@ (8002b44 <checkthe+0x140>)
 8002a46:	483d      	ldr	r0, [pc, #244]	@ (8002b3c <checkthe+0x138>)
 8002a48:	f7fd fca7 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a50:	f001 f8a6 	bl	8003ba0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002a54:	4a37      	ldr	r2, [pc, #220]	@ (8002b34 <checkthe+0x130>)
 8002a56:	4938      	ldr	r1, [pc, #224]	@ (8002b38 <checkthe+0x134>)
 8002a58:	4838      	ldr	r0, [pc, #224]	@ (8002b3c <checkthe+0x138>)
 8002a5a:	f7fd fcc5 	bl	80003e8 <CLCD_I2C_Display>
				HAL_Delay(1000);
 8002a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a62:	f001 f89d 	bl	8003ba0 <HAL_Delay>
 8002a66:	e052      	b.n	8002b0e <checkthe+0x10a>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002a68:	4835      	ldr	r0, [pc, #212]	@ (8002b40 <checkthe+0x13c>)
 8002a6a:	f7ff fef9 	bl	8002860 <CheckListUID>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8002a80:	482e      	ldr	r0, [pc, #184]	@ (8002b3c <checkthe+0x138>)
 8002a82:	f7fd fca1 	bl	80003c8 <CLCD_I2C_Clear>
				switch (key1)
 8002a86:	797b      	ldrb	r3, [r7, #5]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d109      	bne.n	8002aa0 <checkthe+0x9c>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	482a      	ldr	r0, [pc, #168]	@ (8002b3c <checkthe+0x138>)
 8002a92:	f7fd fc2f 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8002a96:	492c      	ldr	r1, [pc, #176]	@ (8002b48 <checkthe+0x144>)
 8002a98:	4828      	ldr	r0, [pc, #160]	@ (8002b3c <checkthe+0x138>)
 8002a9a:	f7fd fc7e 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a9e:	e009      	b.n	8002ab4 <checkthe+0xb0>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4825      	ldr	r0, [pc, #148]	@ (8002b3c <checkthe+0x138>)
 8002aa6:	f7fd fc25 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8002aaa:	4928      	ldr	r1, [pc, #160]	@ (8002b4c <checkthe+0x148>)
 8002aac:	4823      	ldr	r0, [pc, #140]	@ (8002b3c <checkthe+0x138>)
 8002aae:	f7fd fc74 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002ab2:	bf00      	nop
				}
				switch (key2)
 8002ab4:	79bb      	ldrb	r3, [r7, #6]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d002      	beq.n	8002ac0 <checkthe+0xbc>
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d00a      	beq.n	8002ad4 <checkthe+0xd0>
 8002abe:	e013      	b.n	8002ae8 <checkthe+0xe4>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	481d      	ldr	r0, [pc, #116]	@ (8002b3c <checkthe+0x138>)
 8002ac6:	f7fd fc15 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8002aca:	4921      	ldr	r1, [pc, #132]	@ (8002b50 <checkthe+0x14c>)
 8002acc:	481b      	ldr	r0, [pc, #108]	@ (8002b3c <checkthe+0x138>)
 8002ace:	f7fd fc64 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002ad2:	e013      	b.n	8002afc <checkthe+0xf8>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4818      	ldr	r0, [pc, #96]	@ (8002b3c <checkthe+0x138>)
 8002ada:	f7fd fc0b 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8002ade:	491d      	ldr	r1, [pc, #116]	@ (8002b54 <checkthe+0x150>)
 8002ae0:	4816      	ldr	r0, [pc, #88]	@ (8002b3c <checkthe+0x138>)
 8002ae2:	f7fd fc5a 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002ae6:	e009      	b.n	8002afc <checkthe+0xf8>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2100      	movs	r1, #0
 8002aec:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <checkthe+0x138>)
 8002aee:	f7fd fc01 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 8002af2:	4919      	ldr	r1, [pc, #100]	@ (8002b58 <checkthe+0x154>)
 8002af4:	4811      	ldr	r0, [pc, #68]	@ (8002b3c <checkthe+0x138>)
 8002af6:	f7fd fc50 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002afa:	bf00      	nop
				}
				HAL_Delay(1000);
 8002afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b00:	f001 f84e 	bl	8003ba0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <checkthe+0x130>)
 8002b06:	4915      	ldr	r1, [pc, #84]	@ (8002b5c <checkthe+0x158>)
 8002b08:	480c      	ldr	r0, [pc, #48]	@ (8002b3c <checkthe+0x138>)
 8002b0a:	f7fd fc6d 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002b0e:	2064      	movs	r0, #100	@ 0x64
 8002b10:	f7fd fdc4 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b23      	cmp	r3, #35	@ 0x23
 8002b18:	d005      	beq.n	8002b26 <checkthe+0x122>
	while (exitmenu )
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <checkthe+0x12c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f47f af7c 	bne.w	8002a1c <checkthe+0x18>
 8002b24:	e000      	b.n	8002b28 <checkthe+0x124>
		{
			return;
 8002b26:	bf00      	nop
		}
	}
}
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000020 	.word	0x20000020
 8002b34:	0800d1e8 	.word	0x0800d1e8
 8002b38:	0800d7a4 	.word	0x0800d7a4
 8002b3c:	200003d8 	.word	0x200003d8
 8002b40:	200003e4 	.word	0x200003e4
 8002b44:	0800d7d0 	.word	0x0800d7d0
 8002b48:	0800d7e0 	.word	0x0800d7e0
 8002b4c:	0800d7ec 	.word	0x0800d7ec
 8002b50:	0800d7f8 	.word	0x0800d7f8
 8002b54:	0800d800 	.word	0x0800d800
 8002b58:	0800d808 	.word	0x0800d808
 8002b5c:	0800d4f8 	.word	0x0800d4f8

08002b60 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002b6a:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <CheckKey+0x58>)
 8002b6c:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b6e:	e015      	b.n	8002b9c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3306      	adds	r3, #6
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe f84e 	bl	8000c16 <Flash_Read_2Byte>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d107      	bne.n	8002b96 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3305      	adds	r3, #5
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	79fa      	ldrb	r2, [r7, #7]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d101      	bne.n	8002b96 <CheckKey+0x36>
				return pt;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	e00b      	b.n	8002bae <CheckKey+0x4e>
		}
		pt = pt + 8;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3305      	adds	r3, #5
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f82c 	bl	8000bfe <Flash_Read_Byte>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2bff      	cmp	r3, #255	@ 0xff
 8002baa:	d1e1      	bne.n	8002b70 <CheckKey+0x10>
	}
	return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	0800f000 	.word	0x0800f000

08002bbc <removeuid>:
void removeuid(uint32_t addressrm)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3306      	adds	r3, #6
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd ffdc 	bl	8000b88 <Flash_Write_2Byte>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <startadd>:
void startadd(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <startadd+0x84>)
 8002bde:	4920      	ldr	r1, [pc, #128]	@ (8002c60 <startadd+0x88>)
 8002be0:	4820      	ldr	r0, [pc, #128]	@ (8002c64 <startadd+0x8c>)
 8002be2:	f7fd fc01 	bl	80003e8 <CLCD_I2C_Display>
	setaddress();
 8002be6:	f000 f84b 	bl	8002c80 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002bea:	481f      	ldr	r0, [pc, #124]	@ (8002c68 <startadd+0x90>)
 8002bec:	f000 fb40 	bl	8003270 <TM_MFRC522_Check>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f9      	bne.n	8002bea <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002bf6:	481c      	ldr	r0, [pc, #112]	@ (8002c68 <startadd+0x90>)
 8002bf8:	f7ff fe32 	bl	8002860 <CheckListUID>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <startadd+0x90>)
 8002c04:	2211      	movs	r2, #17
 8002c06:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002c08:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <startadd+0x94>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	4916      	ldr	r1, [pc, #88]	@ (8002c68 <startadd+0x90>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd ffd1 	bl	8000bb8 <Flash_Write_Array>
					AddressUID += 8;
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <startadd+0x94>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <startadd+0x94>)
 8002c1e:	6013      	str	r3, [r2, #0]
					break;
 8002c20:	e00e      	b.n	8002c40 <startadd+0x68>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002c22:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <startadd+0x98>)
 8002c24:	4913      	ldr	r1, [pc, #76]	@ (8002c74 <startadd+0x9c>)
 8002c26:	480f      	ldr	r0, [pc, #60]	@ (8002c64 <startadd+0x8c>)
 8002c28:	f7fd fbde 	bl	80003e8 <CLCD_I2C_Display>
					HAL_Delay(1000);
 8002c2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c30:	f000 ffb6 	bl	8003ba0 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002c34:	4a09      	ldr	r2, [pc, #36]	@ (8002c5c <startadd+0x84>)
 8002c36:	490a      	ldr	r1, [pc, #40]	@ (8002c60 <startadd+0x88>)
 8002c38:	480a      	ldr	r0, [pc, #40]	@ (8002c64 <startadd+0x8c>)
 8002c3a:	f7fd fbd5 	bl	80003e8 <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c3e:	e7d4      	b.n	8002bea <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <startadd+0xa0>)
 8002c42:	490e      	ldr	r1, [pc, #56]	@ (8002c7c <startadd+0xa4>)
 8002c44:	4807      	ldr	r0, [pc, #28]	@ (8002c64 <startadd+0x8c>)
 8002c46:	f7fd fbcf 	bl	80003e8 <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c4e:	f000 ffa7 	bl	8003ba0 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002c52:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <startadd+0x8c>)
 8002c54:	f7fd fbb8 	bl	80003c8 <CLCD_I2C_Clear>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	0800d810 	.word	0x0800d810
 8002c60:	0800d4f8 	.word	0x0800d4f8
 8002c64:	200003d8 	.word	0x200003d8
 8002c68:	200003e4 	.word	0x200003e4
 8002c6c:	20000024 	.word	0x20000024
 8002c70:	0800d824 	.word	0x0800d824
 8002c74:	0800d838 	.word	0x0800d838
 8002c78:	0800d848 	.word	0x0800d848
 8002c7c:	0800d858 	.word	0x0800d858

08002c80 <setaddress>:
void setaddress(void){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <setaddress+0x30>)
 8002c88:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c8a:	e002      	b.n	8002c92 <setaddress+0x12>
	{
		pt = pt + 8;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3305      	adds	r3, #5
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd ffb1 	bl	8000bfe <Flash_Read_Byte>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ca0:	d1f4      	bne.n	8002c8c <setaddress+0xc>
	}
	AddressUID = pt;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	@ (8002cb4 <setaddress+0x34>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	0800f000 	.word	0x0800f000
 8002cb4:	20000024 	.word	0x20000024

08002cb8 <remoall>:

void remoall(){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <remoall+0x44>)
 8002cc0:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002cc2:	e00a      	b.n	8002cda <remoall+0x22>
		Flash_Erase(pt);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fd ff43 	bl	8000b50 <Flash_Erase>
		pt = pt + 0x400;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cd0:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <remoall+0x48>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fd ffa7 	bl	8000c2e <Flash_Read_8Byte>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	bf08      	it	eq
 8002cea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002cee:	d1e9      	bne.n	8002cc4 <remoall+0xc>
			break;
	}
}
 8002cf0:	e000      	b.n	8002cf4 <remoall+0x3c>
			break;
 8002cf2:	bf00      	nop
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0800f000 	.word	0x0800f000
 8002d00:	0800fc00 	.word	0x0800fc00

08002d04 <add_finger>:
	}
}

//---------- them van tay---------------
void add_finger()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	vitri2:
	while(1)
	{
		collect_finger();
 8002d08:	f7fd fde8 	bl	80008dc <collect_finger>
		CLCD_I2C_Display(&LCD1, "  Them Van Tay!!     ", "Dat Van Tay!!     ");
 8002d0c:	4a76      	ldr	r2, [pc, #472]	@ (8002ee8 <add_finger+0x1e4>)
 8002d0e:	4977      	ldr	r1, [pc, #476]	@ (8002eec <add_finger+0x1e8>)
 8002d10:	4877      	ldr	r0, [pc, #476]	@ (8002ef0 <add_finger+0x1ec>)
 8002d12:	f7fd fb69 	bl	80003e8 <CLCD_I2C_Display>
		HAL_Delay(1000);
 8002d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d1a:	f000 ff41 	bl	8003ba0 <HAL_Delay>
	// dat tay vao
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2100      	movs	r1, #0
 8002d22:	4873      	ldr	r0, [pc, #460]	@ (8002ef0 <add_finger+0x1ec>)
 8002d24:	f7fd fae6 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002d28:	4972      	ldr	r1, [pc, #456]	@ (8002ef4 <add_finger+0x1f0>)
 8002d2a:	4871      	ldr	r0, [pc, #452]	@ (8002ef0 <add_finger+0x1ec>)
 8002d2c:	f7fd fb35 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002d30:	4b71      	ldr	r3, [pc, #452]	@ (8002ef8 <add_finger+0x1f4>)
 8002d32:	22ff      	movs	r2, #255	@ 0xff
 8002d34:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 8002d36:	e008      	b.n	8002d4a <add_finger+0x46>
			collect_finger();
 8002d38:	f7fd fdd0 	bl	80008dc <collect_finger>
			collect_finger();
 8002d3c:	f7fd fdce 	bl	80008dc <collect_finger>
			tmp= collect_finger();
 8002d40:	f7fd fdcc 	bl	80008dc <collect_finger>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a6c      	ldr	r2, [pc, #432]	@ (8002ef8 <add_finger+0x1f4>)
 8002d48:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 8002d4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <add_finger+0x1f4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f2      	bne.n	8002d38 <add_finger+0x34>
		}
		tmp=0xff;
 8002d52:	4b69      	ldr	r3, [pc, #420]	@ (8002ef8 <add_finger+0x1f4>)
 8002d54:	22ff      	movs	r2, #255	@ 0xff
 8002d56:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4864      	ldr	r0, [pc, #400]	@ (8002ef0 <add_finger+0x1ec>)
 8002d5e:	f7fd fac9 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002d62:	4966      	ldr	r1, [pc, #408]	@ (8002efc <add_finger+0x1f8>)
 8002d64:	4862      	ldr	r0, [pc, #392]	@ (8002ef0 <add_finger+0x1ec>)
 8002d66:	f7fd fb18 	bl	800039a <CLCD_I2C_WriteString>
 8002d6a:	2064      	movs	r0, #100	@ 0x64
 8002d6c:	f000 ff18 	bl	8003ba0 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2100      	movs	r1, #0
 8002d74:	485e      	ldr	r0, [pc, #376]	@ (8002ef0 <add_finger+0x1ec>)
 8002d76:	f7fd fabd 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002d7a:	4961      	ldr	r1, [pc, #388]	@ (8002f00 <add_finger+0x1fc>)
 8002d7c:	485c      	ldr	r0, [pc, #368]	@ (8002ef0 <add_finger+0x1ec>)
 8002d7e:	f7fd fb0c 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002d82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef8 <add_finger+0x1f4>)
 8002d84:	22ff      	movs	r2, #255	@ 0xff
 8002d86:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 8002d88:	e005      	b.n	8002d96 <add_finger+0x92>
		tmp=img2tz(0x01);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fd fdd2 	bl	8000934 <img2tz>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a59      	ldr	r2, [pc, #356]	@ (8002ef8 <add_finger+0x1f4>)
 8002d94:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 8002d96:	4b58      	ldr	r3, [pc, #352]	@ (8002ef8 <add_finger+0x1f4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f5      	bne.n	8002d8a <add_finger+0x86>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2100      	movs	r1, #0
 8002da2:	4853      	ldr	r0, [pc, #332]	@ (8002ef0 <add_finger+0x1ec>)
 8002da4:	f7fd faa6 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"dat lai van tay !!   ");HAL_Delay(100);
 8002da8:	4956      	ldr	r1, [pc, #344]	@ (8002f04 <add_finger+0x200>)
 8002daa:	4851      	ldr	r0, [pc, #324]	@ (8002ef0 <add_finger+0x1ec>)
 8002dac:	f7fd faf5 	bl	800039a <CLCD_I2C_WriteString>
 8002db0:	2064      	movs	r0, #100	@ 0x64
 8002db2:	f000 fef5 	bl	8003ba0 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002db6:	2201      	movs	r2, #1
 8002db8:	2100      	movs	r1, #0
 8002dba:	484d      	ldr	r0, [pc, #308]	@ (8002ef0 <add_finger+0x1ec>)
 8002dbc:	f7fd fa9a 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002dc0:	494c      	ldr	r1, [pc, #304]	@ (8002ef4 <add_finger+0x1f0>)
 8002dc2:	484b      	ldr	r0, [pc, #300]	@ (8002ef0 <add_finger+0x1ec>)
 8002dc4:	f7fd fae9 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <add_finger+0x1f4>)
 8002dca:	22ff      	movs	r2, #255	@ 0xff
 8002dcc:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00)	{
 8002dce:	e008      	b.n	8002de2 <add_finger+0xde>
			collect_finger();
 8002dd0:	f7fd fd84 	bl	80008dc <collect_finger>
			collect_finger();
 8002dd4:	f7fd fd82 	bl	80008dc <collect_finger>
			tmp=collect_finger();
 8002dd8:	f7fd fd80 	bl	80008dc <collect_finger>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a46      	ldr	r2, [pc, #280]	@ (8002ef8 <add_finger+0x1f4>)
 8002de0:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00)	{
 8002de2:	4b45      	ldr	r3, [pc, #276]	@ (8002ef8 <add_finger+0x1f4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f2      	bne.n	8002dd0 <add_finger+0xcc>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002dea:	2201      	movs	r2, #1
 8002dec:	2100      	movs	r1, #0
 8002dee:	4840      	ldr	r0, [pc, #256]	@ (8002ef0 <add_finger+0x1ec>)
 8002df0:	f7fd fa80 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002df4:	4941      	ldr	r1, [pc, #260]	@ (8002efc <add_finger+0x1f8>)
 8002df6:	483e      	ldr	r0, [pc, #248]	@ (8002ef0 <add_finger+0x1ec>)
 8002df8:	f7fd facf 	bl	800039a <CLCD_I2C_WriteString>
 8002dfc:	2064      	movs	r0, #100	@ 0x64
 8002dfe:	f000 fecf 	bl	8003ba0 <HAL_Delay>
		tmp=0xff;
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <add_finger+0x1f4>)
 8002e04:	22ff      	movs	r2, #255	@ 0xff
 8002e06:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4838      	ldr	r0, [pc, #224]	@ (8002ef0 <add_finger+0x1ec>)
 8002e0e:	f7fd fa71 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002e12:	493b      	ldr	r1, [pc, #236]	@ (8002f00 <add_finger+0x1fc>)
 8002e14:	4836      	ldr	r0, [pc, #216]	@ (8002ef0 <add_finger+0x1ec>)
 8002e16:	f7fd fac0 	bl	800039a <CLCD_I2C_WriteString>
		while(tmp!=0x00)	{tmp=img2tz(0x02);}
 8002e1a:	e005      	b.n	8002e28 <add_finger+0x124>
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f7fd fd89 	bl	8000934 <img2tz>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <add_finger+0x1f4>)
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <add_finger+0x1f4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f5      	bne.n	8002e1c <add_finger+0x118>
		tmp=0xff;
 8002e30:	4b31      	ldr	r3, [pc, #196]	@ (8002ef8 <add_finger+0x1f4>)
 8002e32:	22ff      	movs	r2, #255	@ 0xff
 8002e34:	601a      	str	r2, [r3, #0]
		// kiem tra 2 buff co trung nhau khong
		while(tmp!=0x00)
 8002e36:	e01a      	b.n	8002e6e <add_finger+0x16a>
		{
			tmp=match();	//HAL_Delay(100);
 8002e38:	f7fd fdb8 	bl	80009ac <match>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef8 <add_finger+0x1f4>)
 8002e40:	6013      	str	r3, [r2, #0]
			if(tmp==0x08||tmp==0x01)
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <add_finger+0x1f4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d003      	beq.n	8002e52 <add_finger+0x14e>
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <add_finger+0x1f4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <add_finger+0x16a>
			{
				// loi, lam lai
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e52:	2201      	movs	r2, #1
 8002e54:	2100      	movs	r1, #0
 8002e56:	4826      	ldr	r0, [pc, #152]	@ (8002ef0 <add_finger+0x1ec>)
 8002e58:	f7fd fa4c 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1,"LOI, Lam Lai!!   ");HAL_Delay(1500);
 8002e5c:	492a      	ldr	r1, [pc, #168]	@ (8002f08 <add_finger+0x204>)
 8002e5e:	4824      	ldr	r0, [pc, #144]	@ (8002ef0 <add_finger+0x1ec>)
 8002e60:	f7fd fa9b 	bl	800039a <CLCD_I2C_WriteString>
 8002e64:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002e68:	f000 fe9a 	bl	8003ba0 <HAL_Delay>
				goto vitri2;
 8002e6c:	e74c      	b.n	8002d08 <add_finger+0x4>
		while(tmp!=0x00)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <add_finger+0x1f4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e0      	bne.n	8002e38 <add_finger+0x134>
			}
		}
		tmp=0xff;
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <add_finger+0x1f4>)
 8002e78:	22ff      	movs	r2, #255	@ 0xff
 8002e7a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 8002e7c:	e007      	b.n	8002e8e <add_finger+0x18a>
 8002e7e:	f7fd fdc1 	bl	8000a04 <regmodel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <add_finger+0x1f4>)
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	2064      	movs	r0, #100	@ 0x64
 8002e8a:	f000 fe89 	bl	8003ba0 <HAL_Delay>
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <add_finger+0x1f4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f3      	bne.n	8002e7e <add_finger+0x17a>
		tmp=0xff;
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <add_finger+0x1f4>)
 8002e98:	22ff      	movs	r2, #255	@ 0xff
 8002e9a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}			// luu id
 8002e9c:	e00a      	b.n	8002eb4 <add_finger+0x1b0>
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <add_finger+0x208>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fdda 	bl	8000a5c <store>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <add_finger+0x1f4>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	2064      	movs	r0, #100	@ 0x64
 8002eb0:	f000 fe76 	bl	8003ba0 <HAL_Delay>
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <add_finger+0x1f4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <add_finger+0x19a>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	480b      	ldr	r0, [pc, #44]	@ (8002ef0 <add_finger+0x1ec>)
 8002ec2:	f7fd fa17 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8002ec6:	4912      	ldr	r1, [pc, #72]	@ (8002f10 <add_finger+0x20c>)
 8002ec8:	4809      	ldr	r0, [pc, #36]	@ (8002ef0 <add_finger+0x1ec>)
 8002eca:	f7fd fa66 	bl	800039a <CLCD_I2C_WriteString>
				/***************** DA LUU XONG**************************/
		HAL_Delay(1500);
 8002ece:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002ed2:	f000 fe65 	bl	8003ba0 <HAL_Delay>
		tmp=0xff;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <add_finger+0x1f4>)
 8002ed8:	22ff      	movs	r2, #255	@ 0xff
 8002eda:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Clear(&LCD1);
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <add_finger+0x1ec>)
 8002ede:	f7fd fa73 	bl	80003c8 <CLCD_I2C_Clear>
		break;
 8002ee2:	bf00      	nop
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	0800d868 	.word	0x0800d868
 8002eec:	0800d87c 	.word	0x0800d87c
 8002ef0:	200003d8 	.word	0x200003d8
 8002ef4:	0800d894 	.word	0x0800d894
 8002ef8:	20000404 	.word	0x20000404
 8002efc:	0800d8b0 	.word	0x0800d8b0
 8002f00:	0800d8c4 	.word	0x0800d8c4
 8002f04:	0800d8dc 	.word	0x0800d8dc
 8002f08:	0800d8f4 	.word	0x0800d8f4
 8002f0c:	20000408 	.word	0x20000408
 8002f10:	0800d908 	.word	0x0800d908

08002f14 <read_finger>:
						//----------end them van tay---------------
void read_finger()
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <read_finger+0xf4>)
 8002f1a:	22ff      	movs	r2, #255	@ 0xff
 8002f1c:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8002f1e:	f000 fe35 	bl	8003b8c <HAL_GetTick>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a39      	ldr	r2, [pc, #228]	@ (800300c <read_finger+0xf8>)
 8002f26:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8002f28:	e013      	b.n	8002f52 <read_finger+0x3e>
		tmp=collect_finger();
 8002f2a:	f7fd fcd7 	bl	80008dc <collect_finger>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a35      	ldr	r2, [pc, #212]	@ (8003008 <read_finger+0xf4>)
 8002f32:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8002f34:	f000 fe2a 	bl	8003b8c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <read_finger+0xf8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002f44:	d305      	bcc.n	8002f52 <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8002f46:	f000 fe21 	bl	8003b8c <HAL_GetTick>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <read_finger+0xf8>)
 8002f4e:	6013      	str	r3, [r2, #0]
		return;}
 8002f50:	e059      	b.n	8003006 <read_finger+0xf2>
	while(tmp!=0x00){
 8002f52:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <read_finger+0xf4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1e7      	bne.n	8002f2a <read_finger+0x16>

	}
	tmp=0xff;
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <read_finger+0xf4>)
 8002f5c:	22ff      	movs	r2, #255	@ 0xff
 8002f5e:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8002f60:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <read_finger+0xf4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <read_finger+0x60>
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fd fce3 	bl	8000934 <img2tz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a25      	ldr	r2, [pc, #148]	@ (8003008 <read_finger+0xf4>)
 8002f72:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8002f74:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <read_finger+0xf4>)
 8002f76:	22ff      	movs	r2, #255	@ 0xff
 8002f78:	601a      	str	r2, [r3, #0]
	tmp=search();
 8002f7a:	f7fd fdae 	bl	8000ada <search>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <read_finger+0xf4>)
 8002f82:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8002f84:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <read_finger+0xf4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <read_finger+0xb4>
	{
		tmp=0xff;	// co van tay
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <read_finger+0xf4>)
 8002f8e:	22ff      	movs	r2, #255	@ 0xff
 8002f90:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f92:	2201      	movs	r2, #1
 8002f94:	2100      	movs	r1, #0
 8002f96:	481e      	ldr	r0, [pc, #120]	@ (8003010 <read_finger+0xfc>)
 8002f98:	f7fd f9ac 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Mo Cua!");
 8002f9c:	491d      	ldr	r1, [pc, #116]	@ (8003014 <read_finger+0x100>)
 8002f9e:	481c      	ldr	r0, [pc, #112]	@ (8003010 <read_finger+0xfc>)
 8002fa0:	f7fd f9fb 	bl	800039a <CLCD_I2C_WriteString>
		sprintf(mess," #id = %c  ",pID);
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <read_finger+0x104>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	491c      	ldr	r1, [pc, #112]	@ (800301c <read_finger+0x108>)
 8002fac:	481c      	ldr	r0, [pc, #112]	@ (8003020 <read_finger+0x10c>)
 8002fae:	f009 fc13 	bl	800c7d8 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002fb2:	491b      	ldr	r1, [pc, #108]	@ (8003020 <read_finger+0x10c>)
 8002fb4:	4816      	ldr	r0, [pc, #88]	@ (8003010 <read_finger+0xfc>)
 8002fb6:	f7fd f9f0 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8002fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fbe:	f000 fdef 	bl	8003ba0 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8002fc2:	4813      	ldr	r0, [pc, #76]	@ (8003010 <read_finger+0xfc>)
 8002fc4:	f7fd fa00 	bl	80003c8 <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <read_finger+0xf4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d11a      	bne.n	8003006 <read_finger+0xf2>
	{
		tmp=0xff;
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <read_finger+0xf4>)
 8002fd2:	22ff      	movs	r2, #255	@ 0xff
 8002fd4:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2100      	movs	r1, #0
 8002fda:	480d      	ldr	r0, [pc, #52]	@ (8003010 <read_finger+0xfc>)
 8002fdc:	f7fd f98a 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1," Van Tay Sai!!     "); HAL_Delay(1000);
 8002fe0:	4910      	ldr	r1, [pc, #64]	@ (8003024 <read_finger+0x110>)
 8002fe2:	480b      	ldr	r0, [pc, #44]	@ (8003010 <read_finger+0xfc>)
 8002fe4:	f7fd f9d9 	bl	800039a <CLCD_I2C_WriteString>
 8002fe8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fec:	f000 fdd8 	bl	8003ba0 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002ff0:	490b      	ldr	r1, [pc, #44]	@ (8003020 <read_finger+0x10c>)
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <read_finger+0xfc>)
 8002ff4:	f7fd f9d1 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8002ff8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ffc:	f000 fdd0 	bl	8003ba0 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003000:	4803      	ldr	r0, [pc, #12]	@ (8003010 <read_finger+0xfc>)
 8003002:	f7fd f9e1 	bl	80003c8 <CLCD_I2C_Clear>
	}
}
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000404 	.word	0x20000404
 800300c:	200003f4 	.word	0x200003f4
 8003010:	200003d8 	.word	0x200003d8
 8003014:	0800d91c 	.word	0x0800d91c
 8003018:	20000218 	.word	0x20000218
 800301c:	0800d924 	.word	0x0800d924
 8003020:	200003f8 	.word	0x200003f8
 8003024:	0800d930 	.word	0x0800d930

08003028 <addface>:
        CLCD_I2C_WriteString(&LCD1, "FALSE FACE");
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
}
void addface(uint8_t key)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Add.%d", key );
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	461a      	mov	r2, r3
 8003036:	491a      	ldr	r1, [pc, #104]	@ (80030a0 <addface+0x78>)
 8003038:	481a      	ldr	r0, [pc, #104]	@ (80030a4 <addface+0x7c>)
 800303a:	f009 fbcd 	bl	800c7d8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 800303e:	2106      	movs	r1, #6
 8003040:	4818      	ldr	r0, [pc, #96]	@ (80030a4 <addface+0x7c>)
 8003042:	f008 ffeb 	bl	800c01c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8003046:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <addface+0x80>)
 8003048:	4918      	ldr	r1, [pc, #96]	@ (80030ac <addface+0x84>)
 800304a:	4819      	ldr	r0, [pc, #100]	@ (80030b0 <addface+0x88>)
 800304c:	f7fd f9cc 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 8003050:	4b18      	ldr	r3, [pc, #96]	@ (80030b4 <addface+0x8c>)
 8003052:	223c      	movs	r2, #60	@ 0x3c
 8003054:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003056:	e015      	b.n	8003084 <addface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <addface+0x90>)
 800305a:	f993 3000 	ldrsb.w	r3, [r3]
 800305e:	2b54      	cmp	r3, #84	@ 0x54
 8003060:	d105      	bne.n	800306e <addface+0x46>
			CLCD_I2C_Display(&LCD1, "THEM THANH CONG", "");
 8003062:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <addface+0x80>)
 8003064:	4915      	ldr	r1, [pc, #84]	@ (80030bc <addface+0x94>)
 8003066:	4812      	ldr	r0, [pc, #72]	@ (80030b0 <addface+0x88>)
 8003068:	f7fd f9be 	bl	80003e8 <CLCD_I2C_Display>
			break;
 800306c:	e00e      	b.n	800308c <addface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <addface+0x90>)
 8003070:	f993 3000 	ldrsb.w	r3, [r3]
 8003074:	2b46      	cmp	r3, #70	@ 0x46
 8003076:	d105      	bne.n	8003084 <addface+0x5c>
			CLCD_I2C_Display(&LCD1, "FACE DA TON TAI", "");
 8003078:	4a0b      	ldr	r2, [pc, #44]	@ (80030a8 <addface+0x80>)
 800307a:	4911      	ldr	r1, [pc, #68]	@ (80030c0 <addface+0x98>)
 800307c:	480c      	ldr	r0, [pc, #48]	@ (80030b0 <addface+0x88>)
 800307e:	f7fd f9b3 	bl	80003e8 <CLCD_I2C_Display>
			break;
 8003082:	e003      	b.n	800308c <addface+0x64>
	while(exitmenu != 0){
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <addface+0x8c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <addface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	2100      	movs	r1, #0
 8003090:	4809      	ldr	r0, [pc, #36]	@ (80030b8 <addface+0x90>)
 8003092:	f009 fbc1 	bl	800c818 <memset>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	0800d950 	.word	0x0800d950
 80030a4:	200003d0 	.word	0x200003d0
 80030a8:	0800d784 	.word	0x0800d784
 80030ac:	0800d788 	.word	0x0800d788
 80030b0:	200003d8 	.word	0x200003d8
 80030b4:	20000020 	.word	0x20000020
 80030b8:	20000350 	.word	0x20000350
 80030bc:	0800d958 	.word	0x0800d958
 80030c0:	0800d968 	.word	0x0800d968

080030c4 <removeface>:
void removeface(uint8_t key)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Rem.%2d", key );
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	461a      	mov	r2, r3
 80030d2:	491a      	ldr	r1, [pc, #104]	@ (800313c <removeface+0x78>)
 80030d4:	481a      	ldr	r0, [pc, #104]	@ (8003140 <removeface+0x7c>)
 80030d6:	f009 fb7f 	bl	800c7d8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 80030da:	2106      	movs	r1, #6
 80030dc:	4818      	ldr	r0, [pc, #96]	@ (8003140 <removeface+0x7c>)
 80030de:	f008 ff9d 	bl	800c01c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80030e2:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <removeface+0x80>)
 80030e4:	4918      	ldr	r1, [pc, #96]	@ (8003148 <removeface+0x84>)
 80030e6:	4819      	ldr	r0, [pc, #100]	@ (800314c <removeface+0x88>)
 80030e8:	f7fd f97e 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 80030ec:	4b18      	ldr	r3, [pc, #96]	@ (8003150 <removeface+0x8c>)
 80030ee:	223c      	movs	r2, #60	@ 0x3c
 80030f0:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80030f2:	e015      	b.n	8003120 <removeface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 80030f4:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <removeface+0x90>)
 80030f6:	f993 3000 	ldrsb.w	r3, [r3]
 80030fa:	2b54      	cmp	r3, #84	@ 0x54
 80030fc:	d105      	bne.n	800310a <removeface+0x46>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 80030fe:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <removeface+0x80>)
 8003100:	4915      	ldr	r1, [pc, #84]	@ (8003158 <removeface+0x94>)
 8003102:	4812      	ldr	r0, [pc, #72]	@ (800314c <removeface+0x88>)
 8003104:	f7fd f970 	bl	80003e8 <CLCD_I2C_Display>
			break;
 8003108:	e00e      	b.n	8003128 <removeface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <removeface+0x90>)
 800310c:	f993 3000 	ldrsb.w	r3, [r3]
 8003110:	2b46      	cmp	r3, #70	@ 0x46
 8003112:	d105      	bne.n	8003120 <removeface+0x5c>
			CLCD_I2C_Display(&LCD1, "FACE CHUA THEM", "");
 8003114:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <removeface+0x80>)
 8003116:	4911      	ldr	r1, [pc, #68]	@ (800315c <removeface+0x98>)
 8003118:	480c      	ldr	r0, [pc, #48]	@ (800314c <removeface+0x88>)
 800311a:	f7fd f965 	bl	80003e8 <CLCD_I2C_Display>
			break;
 800311e:	e003      	b.n	8003128 <removeface+0x64>
	while(exitmenu != 0){
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <removeface+0x8c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <removeface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	2100      	movs	r1, #0
 800312c:	4809      	ldr	r0, [pc, #36]	@ (8003154 <removeface+0x90>)
 800312e:	f009 fb73 	bl	800c818 <memset>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0800d978 	.word	0x0800d978
 8003140:	200003d0 	.word	0x200003d0
 8003144:	0800d784 	.word	0x0800d784
 8003148:	0800d788 	.word	0x0800d788
 800314c:	200003d8 	.word	0x200003d8
 8003150:	20000020 	.word	0x20000020
 8003154:	20000350 	.word	0x20000350
 8003158:	0800d980 	.word	0x0800d980
 800315c:	0800d990 	.word	0x0800d990

08003160 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Che.%2d", key );
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	461a      	mov	r2, r3
 800316e:	4912      	ldr	r1, [pc, #72]	@ (80031b8 <checkfaceid+0x58>)
 8003170:	4812      	ldr	r0, [pc, #72]	@ (80031bc <checkfaceid+0x5c>)
 8003172:	f009 fb31 	bl	800c7d8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 8003176:	2106      	movs	r1, #6
 8003178:	4810      	ldr	r0, [pc, #64]	@ (80031bc <checkfaceid+0x5c>)
 800317a:	f008 ff4f 	bl	800c01c <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 800317e:	e000      	b.n	8003182 <checkfaceid+0x22>
		continue;
 8003180:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <checkfaceid+0x60>)
 8003184:	f993 3000 	ldrsb.w	r3, [r3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f9      	beq.n	8003180 <checkfaceid+0x20>
	}
	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
 800318c:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <checkfaceid+0x64>)
 800318e:	490c      	ldr	r1, [pc, #48]	@ (80031c0 <checkfaceid+0x60>)
 8003190:	480d      	ldr	r0, [pc, #52]	@ (80031c8 <checkfaceid+0x68>)
 8003192:	f7fd f929 	bl	80003e8 <CLCD_I2C_Display>
	HAL_Delay(1000);
 8003196:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800319a:	f000 fd01 	bl	8003ba0 <HAL_Delay>
	if(Rx_Buffer[0] == '0'){
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <checkfaceid+0x60>)
 80031a0:	f993 3000 	ldrsb.w	r3, [r3]
 80031a4:	2b30      	cmp	r3, #48	@ 0x30
 80031a6:	d101      	bne.n	80031ac <checkfaceid+0x4c>
		return 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <checkfaceid+0x4e>
	}
	return key;
 80031ac:	79fb      	ldrb	r3, [r7, #7]

}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	0800d9a0 	.word	0x0800d9a0
 80031bc:	200003d0 	.word	0x200003d0
 80031c0:	20000350 	.word	0x20000350
 80031c4:	0800d784 	.word	0x0800d784
 80031c8:	200003d8 	.word	0x200003d8

080031cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d0:	b672      	cpsid	i
}
 80031d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <Error_Handler+0x8>

080031d8 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 80031e6:	bf00      	nop
 80031e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <TM_SPI_Send+0x4c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d1f8      	bne.n	80031e8 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	f107 010c 	add.w	r1, r7, #12
 80031fe:	230a      	movs	r3, #10
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2301      	movs	r3, #1
 8003204:	4807      	ldr	r0, [pc, #28]	@ (8003224 <TM_SPI_Send+0x4c>)
 8003206:	f003 feff 	bl	8007008 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 800320a:	bf00      	nop
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <TM_SPI_Send+0x4c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d0f8      	beq.n	800320c <TM_SPI_Send+0x34>
	return data_re[0];
 800321a:	7a3b      	ldrb	r3, [r7, #8]

}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000270 	.word	0x20000270

08003228 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 800322c:	f000 f8d5 	bl	80033da <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003230:	218d      	movs	r1, #141	@ 0x8d
 8003232:	202a      	movs	r0, #42	@ 0x2a
 8003234:	f000 f836 	bl	80032a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003238:	213e      	movs	r1, #62	@ 0x3e
 800323a:	202b      	movs	r0, #43	@ 0x2b
 800323c:	f000 f832 	bl	80032a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003240:	211e      	movs	r1, #30
 8003242:	202d      	movs	r0, #45	@ 0x2d
 8003244:	f000 f82e 	bl	80032a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003248:	2100      	movs	r1, #0
 800324a:	202c      	movs	r0, #44	@ 0x2c
 800324c:	f000 f82a 	bl	80032a4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003250:	2170      	movs	r1, #112	@ 0x70
 8003252:	2026      	movs	r0, #38	@ 0x26
 8003254:	f000 f826 	bl	80032a4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	2015      	movs	r0, #21
 800325c:	f000 f822 	bl	80032a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003260:	213d      	movs	r1, #61	@ 0x3d
 8003262:	2011      	movs	r0, #17
 8003264:	f000 f81e 	bl	80032a4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003268:	f000 f8a2 	bl	80033b0 <TM_MFRC522_AntennaOn>
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}

08003270 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	2026      	movs	r0, #38	@ 0x26
 800327c:	f000 f8b5 	bl	80033ea <TM_MFRC522_Request>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9a1 	bl	80035d2 <TM_MFRC522_Anticoll>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003294:	f000 fa23 	bl	80036de <TM_MFRC522_Halt>
	return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	460a      	mov	r2, r1
 80032ae:	71fb      	strb	r3, [r7, #7]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80032b4:	2200      	movs	r2, #0
 80032b6:	2110      	movs	r1, #16
 80032b8:	480c      	ldr	r0, [pc, #48]	@ (80032ec <TM_MFRC522_WriteRegister+0x48>)
 80032ba:	f001 f93e 	bl	800453a <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff84 	bl	80031d8 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff80 	bl	80031d8 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 80032d8:	2201      	movs	r2, #1
 80032da:	2110      	movs	r1, #16
 80032dc:	4803      	ldr	r0, [pc, #12]	@ (80032ec <TM_MFRC522_WriteRegister+0x48>)
 80032de:	f001 f92c 	bl	800453a <HAL_GPIO_WritePin>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40010800 	.word	0x40010800

080032f0 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80032fa:	2200      	movs	r2, #0
 80032fc:	2110      	movs	r1, #16
 80032fe:	480f      	ldr	r0, [pc, #60]	@ (800333c <TM_MFRC522_ReadRegister+0x4c>)
 8003300:	f001 f91b 	bl	800453a <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003314:	b25b      	sxtb	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5d 	bl	80031d8 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800331e:	2000      	movs	r0, #0
 8003320:	f7ff ff5a 	bl	80031d8 <TM_SPI_Send>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003328:	2201      	movs	r2, #1
 800332a:	2110      	movs	r1, #16
 800332c:	4803      	ldr	r0, [pc, #12]	@ (800333c <TM_MFRC522_ReadRegister+0x4c>)
 800332e:	f001 f904 	bl	800453a <HAL_GPIO_WritePin>

	return val;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010800 	.word	0x40010800

08003340 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	460a      	mov	r2, r1
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	4613      	mov	r3, r2
 800334e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ffcc 	bl	80032f0 <TM_MFRC522_ReadRegister>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	79bb      	ldrb	r3, [r7, #6]
 800335e:	4313      	orrs	r3, r2
 8003360:	b2da      	uxtb	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff9c 	bl	80032a4 <TM_MFRC522_WriteRegister>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	460a      	mov	r2, r1
 800337e:	71fb      	strb	r3, [r7, #7]
 8003380:	4613      	mov	r3, r2
 8003382:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ffb2 	bl	80032f0 <TM_MFRC522_ReadRegister>
 800338c:	4603      	mov	r3, r0
 800338e:	b25a      	sxtb	r2, r3
 8003390:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003394:	43db      	mvns	r3, r3
 8003396:	b25b      	sxtb	r3, r3
 8003398:	4013      	ands	r3, r2
 800339a:	b25b      	sxtb	r3, r3
 800339c:	b2da      	uxtb	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff7e 	bl	80032a4 <TM_MFRC522_WriteRegister>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80033b6:	2014      	movs	r0, #20
 80033b8:	f7ff ff9a 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80033ca:	2103      	movs	r1, #3
 80033cc:	2014      	movs	r0, #20
 80033ce:	f7ff ffb7 	bl	8003340 <TM_MFRC522_SetBitMask>
	}
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80033de:	210f      	movs	r1, #15
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7ff ff5f 	bl	80032a4 <TM_MFRC522_WriteRegister>
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}

080033ea <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af02      	add	r7, sp, #8
 80033f0:	4603      	mov	r3, r0
 80033f2:	6039      	str	r1, [r7, #0]
 80033f4:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80033f6:	2107      	movs	r1, #7
 80033f8:	200d      	movs	r0, #13
 80033fa:	f7ff ff53 	bl	80032a4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	79fa      	ldrb	r2, [r7, #7]
 8003402:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	200c      	movs	r0, #12
 8003412:	f000 f80f 	bl	8003434 <TM_MFRC522_ToCard>
 8003416:	4603      	mov	r3, r0
 8003418:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <TM_MFRC522_Request+0x3c>
 8003420:	89bb      	ldrh	r3, [r7, #12]
 8003422:	2b10      	cmp	r3, #16
 8003424:	d001      	beq.n	800342a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003426:	2302      	movs	r3, #2
 8003428:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	4613      	mov	r3, r2
 8003444:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003446:	2302      	movs	r3, #2
 8003448:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800344e:	2300      	movs	r3, #0
 8003450:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d006      	beq.n	8003466 <TM_MFRC522_ToCard+0x32>
 8003458:	2b0e      	cmp	r3, #14
 800345a:	d109      	bne.n	8003470 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800345c:	2312      	movs	r3, #18
 800345e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003460:	2310      	movs	r3, #16
 8003462:	757b      	strb	r3, [r7, #21]
			break;
 8003464:	e005      	b.n	8003472 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003466:	2377      	movs	r3, #119	@ 0x77
 8003468:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800346a:	2330      	movs	r3, #48	@ 0x30
 800346c:	757b      	strb	r3, [r7, #21]
			break;
 800346e:	e000      	b.n	8003472 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003470:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003472:	7dbb      	ldrb	r3, [r7, #22]
 8003474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003478:	b2db      	uxtb	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	2002      	movs	r0, #2
 800347e:	f7ff ff11 	bl	80032a4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003482:	2180      	movs	r1, #128	@ 0x80
 8003484:	2004      	movs	r0, #4
 8003486:	f7ff ff75 	bl	8003374 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	200a      	movs	r0, #10
 800348e:	f7ff ff57 	bl	8003340 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003492:	2100      	movs	r1, #0
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff ff05 	bl	80032a4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 800349a:	2300      	movs	r3, #0
 800349c:	827b      	strh	r3, [r7, #18]
 800349e:	e00a      	b.n	80034b6 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80034a0:	8a7b      	ldrh	r3, [r7, #18]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4413      	add	r3, r2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2009      	movs	r0, #9
 80034ac:	f7ff fefa 	bl	80032a4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80034b0:	8a7b      	ldrh	r3, [r7, #18]
 80034b2:	3301      	adds	r3, #1
 80034b4:	827b      	strh	r3, [r7, #18]
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8a7a      	ldrh	r2, [r7, #18]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3ef      	bcc.n	80034a0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	4619      	mov	r1, r3
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7ff feed 	bl	80032a4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d103      	bne.n	80034d8 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	200d      	movs	r0, #13
 80034d4:	f7ff ff34 	bl	8003340 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80034d8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80034dc:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80034de:	2004      	movs	r0, #4
 80034e0:	f7ff ff06 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80034e4:	4603      	mov	r3, r0
 80034e6:	753b      	strb	r3, [r7, #20]
		i--;
 80034e8:	8a7b      	ldrh	r3, [r7, #18]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80034ee:	8a7b      	ldrh	r3, [r7, #18]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <TM_MFRC522_ToCard+0xd6>
 80034f4:	7d3b      	ldrb	r3, [r7, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <TM_MFRC522_ToCard+0xd6>
 80034fe:	7d3a      	ldrb	r2, [r7, #20]
 8003500:	7d7b      	ldrb	r3, [r7, #21]
 8003502:	4013      	ands	r3, r2
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0e9      	beq.n	80034de <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800350a:	2180      	movs	r1, #128	@ 0x80
 800350c:	200d      	movs	r0, #13
 800350e:	f7ff ff31 	bl	8003374 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003512:	8a7b      	ldrh	r3, [r7, #18]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d057      	beq.n	80035c8 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003518:	2006      	movs	r0, #6
 800351a:	f7ff fee9 	bl	80032f0 <TM_MFRC522_ReadRegister>
 800351e:	4603      	mov	r3, r0
 8003520:	f003 031b 	and.w	r3, r3, #27
 8003524:	2b00      	cmp	r3, #0
 8003526:	d14d      	bne.n	80035c4 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800352c:	7d3a      	ldrb	r2, [r7, #20]
 800352e:	7dbb      	ldrb	r3, [r7, #22]
 8003530:	4013      	ands	r3, r2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d140      	bne.n	80035c8 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003546:	200a      	movs	r0, #10
 8003548:	f7ff fed2 	bl	80032f0 <TM_MFRC522_ReadRegister>
 800354c:	4603      	mov	r3, r0
 800354e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003550:	200c      	movs	r0, #12
 8003552:	f7ff fecd 	bl	80032f0 <TM_MFRC522_ReadRegister>
 8003556:	4603      	mov	r3, r0
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 800355e:	7c7b      	ldrb	r3, [r7, #17]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003564:	7d3b      	ldrb	r3, [r7, #20]
 8003566:	3b01      	subs	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	b29a      	uxth	r2, r3
 800356e:	7c7b      	ldrb	r3, [r7, #17]
 8003570:	b29b      	uxth	r3, r3
 8003572:	4413      	add	r3, r2
 8003574:	b29a      	uxth	r2, r3
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	e005      	b.n	8003588 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 800357c:	7d3b      	ldrb	r3, [r7, #20]
 800357e:	b29b      	uxth	r3, r3
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	b29a      	uxth	r2, r3
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003588:	7d3b      	ldrb	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003592:	7d3b      	ldrb	r3, [r7, #20]
 8003594:	2b10      	cmp	r3, #16
 8003596:	d901      	bls.n	800359c <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003598:	2310      	movs	r3, #16
 800359a:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800359c:	2300      	movs	r3, #0
 800359e:	827b      	strh	r3, [r7, #18]
 80035a0:	e00a      	b.n	80035b8 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	18d4      	adds	r4, r2, r3
 80035a8:	2009      	movs	r0, #9
 80035aa:	f7ff fea1 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80035ae:	4603      	mov	r3, r0
 80035b0:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80035b2:	8a7b      	ldrh	r3, [r7, #18]
 80035b4:	3301      	adds	r3, #1
 80035b6:	827b      	strh	r3, [r7, #18]
 80035b8:	7d3b      	ldrb	r3, [r7, #20]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	8a7a      	ldrh	r2, [r7, #18]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3ef      	bcc.n	80035a2 <TM_MFRC522_ToCard+0x16e>
 80035c2:	e001      	b.n	80035c8 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 80035c4:	2302      	movs	r3, #2
 80035c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd90      	pop	{r4, r7, pc}

080035d2 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af02      	add	r7, sp, #8
 80035d8:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80035de:	2100      	movs	r1, #0
 80035e0:	200d      	movs	r0, #13
 80035e2:	f7ff fe5f 	bl	80032a4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2293      	movs	r2, #147	@ 0x93
 80035ea:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	2220      	movs	r2, #32
 80035f2:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80035f4:	f107 030a 	add.w	r3, r7, #10
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	200c      	movs	r0, #12
 8003602:	f7ff ff17 	bl	8003434 <TM_MFRC522_ToCard>
 8003606:	4603      	mov	r3, r0
 8003608:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d118      	bne.n	8003642 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003610:	2300      	movs	r3, #0
 8003612:	73bb      	strb	r3, [r7, #14]
 8003614:	e009      	b.n	800362a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003616:	7bbb      	ldrb	r3, [r7, #14]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	4053      	eors	r3, r2
 8003622:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003624:	7bbb      	ldrb	r3, [r7, #14]
 8003626:	3301      	adds	r3, #1
 8003628:	73bb      	strb	r3, [r7, #14]
 800362a:	7bbb      	ldrb	r3, [r7, #14]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d9f2      	bls.n	8003616 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	7b7a      	ldrb	r2, [r7, #13]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800363e:	2302      	movs	r3, #2
 8003640:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	460b      	mov	r3, r1
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800365a:	2104      	movs	r1, #4
 800365c:	2005      	movs	r0, #5
 800365e:	f7ff fe89 	bl	8003374 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003662:	2180      	movs	r1, #128	@ 0x80
 8003664:	200a      	movs	r0, #10
 8003666:	f7ff fe6b 	bl	8003340 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
 800366e:	e00a      	b.n	8003686 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	2009      	movs	r0, #9
 800367c:	f7ff fe12 	bl	80032a4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	3301      	adds	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
 8003686:	7dfa      	ldrb	r2, [r7, #23]
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3f0      	bcc.n	8003670 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800368e:	2103      	movs	r1, #3
 8003690:	2001      	movs	r0, #1
 8003692:	f7ff fe07 	bl	80032a4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003696:	23ff      	movs	r3, #255	@ 0xff
 8003698:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800369a:	2005      	movs	r0, #5
 800369c:	f7ff fe28 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75bb      	strb	r3, [r7, #22]
		i--;
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <TM_MFRC522_CalculateCRC+0x6e>
 80036b0:	7dbb      	ldrb	r3, [r7, #22]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ef      	beq.n	800369a <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80036ba:	2022      	movs	r0, #34	@ 0x22
 80036bc:	f7ff fe18 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1c5c      	adds	r4, r3, #1
 80036cc:	2021      	movs	r0, #33	@ 0x21
 80036ce:	f7ff fe0f 	bl	80032f0 <TM_MFRC522_ReadRegister>
 80036d2:	4603      	mov	r3, r0
 80036d4:	7023      	strb	r3, [r4, #0]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}

080036de <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80036e4:	2350      	movs	r3, #80	@ 0x50
 80036e6:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80036ec:	463b      	mov	r3, r7
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	463b      	mov	r3, r7
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ffa9 	bl	800364c <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80036fa:	463a      	mov	r2, r7
 80036fc:	4639      	mov	r1, r7
 80036fe:	1dbb      	adds	r3, r7, #6
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	2204      	movs	r2, #4
 8003706:	200c      	movs	r0, #12
 8003708:	f7ff fe94 	bl	8003434 <TM_MFRC522_ToCard>



}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_MspInit+0x5c>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <HAL_MspInit+0x5c>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6193      	str	r3, [r2, #24]
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_MspInit+0x5c>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <HAL_MspInit+0x5c>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a0e      	ldr	r2, [pc, #56]	@ (8003770 <HAL_MspInit+0x5c>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	61d3      	str	r3, [r2, #28]
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_MspInit+0x5c>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800374a:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_MspInit+0x60>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	4a04      	ldr	r2, [pc, #16]	@ (8003774 <HAL_MspInit+0x60>)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	40010000 	.word	0x40010000

08003778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_I2C_MspInit+0x74>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d124      	bne.n	80037e2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6193      	str	r3, [r2, #24]
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b6:	2312      	movs	r3, #18
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4619      	mov	r1, r3
 80037c4:	480b      	ldr	r0, [pc, #44]	@ (80037f4 <HAL_I2C_MspInit+0x7c>)
 80037c6:	f000 fd1d 	bl	8004204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_I2C_MspInit+0x78>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037e2:	bf00      	nop
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40005800 	.word	0x40005800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010c00 	.word	0x40010c00

080037f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_SPI_MspInit+0x88>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d12f      	bne.n	8003878 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003818:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 800381e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003822:	6193      	str	r3, [r2, #24]
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6193      	str	r3, [r2, #24]
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_SPI_MspInit+0x8c>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003848:	23a0      	movs	r3, #160	@ 0xa0
 800384a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	4619      	mov	r1, r3
 800385a:	480b      	ldr	r0, [pc, #44]	@ (8003888 <HAL_SPI_MspInit+0x90>)
 800385c:	f000 fcd2 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003860:	2340      	movs	r3, #64	@ 0x40
 8003862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386c:	f107 0310 	add.w	r3, r7, #16
 8003870:	4619      	mov	r1, r3
 8003872:	4805      	ldr	r0, [pc, #20]	@ (8003888 <HAL_SPI_MspInit+0x90>)
 8003874:	f000 fcc6 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40013000 	.word	0x40013000
 8003884:	40021000 	.word	0x40021000
 8003888:	40010800 	.word	0x40010800

0800388c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389c:	d113      	bne.n	80038c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800389e:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <HAL_TIM_Base_MspInit+0x44>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4a0b      	ldr	r2, [pc, #44]	@ (80038d0 <HAL_TIM_Base_MspInit+0x44>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	61d3      	str	r3, [r2, #28]
 80038aa:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <HAL_TIM_Base_MspInit+0x44>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	201c      	movs	r0, #28
 80038bc:	f000 fa6b 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038c0:	201c      	movs	r0, #28
 80038c2:	f000 fa84 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000

080038d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	@ 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a22      	ldr	r2, [pc, #136]	@ (8003978 <HAL_UART_MspInit+0xa4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d13d      	bne.n	8003970 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038f4:	4b21      	ldr	r3, [pc, #132]	@ (800397c <HAL_UART_MspInit+0xa8>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a20      	ldr	r2, [pc, #128]	@ (800397c <HAL_UART_MspInit+0xa8>)
 80038fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_UART_MspInit+0xa8>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_UART_MspInit+0xa8>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4a1a      	ldr	r2, [pc, #104]	@ (800397c <HAL_UART_MspInit+0xa8>)
 8003912:	f043 0308 	orr.w	r3, r3, #8
 8003916:	6193      	str	r3, [r2, #24]
 8003918:	4b18      	ldr	r3, [pc, #96]	@ (800397c <HAL_UART_MspInit+0xa8>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003924:	2340      	movs	r3, #64	@ 0x40
 8003926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4619      	mov	r1, r3
 8003936:	4812      	ldr	r0, [pc, #72]	@ (8003980 <HAL_UART_MspInit+0xac>)
 8003938:	f000 fc64 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4619      	mov	r1, r3
 800394e:	480c      	ldr	r0, [pc, #48]	@ (8003980 <HAL_UART_MspInit+0xac>)
 8003950:	f000 fc58 	bl	8004204 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_UART_MspInit+0xb0>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	4a06      	ldr	r2, [pc, #24]	@ (8003984 <HAL_UART_MspInit+0xb0>)
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003970:	bf00      	nop
 8003972:	3728      	adds	r7, #40	@ 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40013800 	.word	0x40013800
 800397c:	40021000 	.word	0x40021000
 8003980:	40010c00 	.word	0x40010c00
 8003984:	40010000 	.word	0x40010000

08003988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <NMI_Handler+0x4>

08003990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <HardFault_Handler+0x4>

08003998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <MemManage_Handler+0x4>

080039a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <BusFault_Handler+0x4>

080039a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <UsageFault_Handler+0x4>

080039b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039d8:	f000 f8c6 	bl	8003b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80039e4:	4802      	ldr	r0, [pc, #8]	@ (80039f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80039e6:	f001 fb5e 	bl	80050a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200010d0 	.word	0x200010d0

080039f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80039f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80039fc:	f000 fdb6 	bl	800456c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a08:	4802      	ldr	r0, [pc, #8]	@ (8003a14 <TIM2_IRQHandler+0x10>)
 8003a0a:	f003 fde7 	bl	80075dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200002c8 	.word	0x200002c8

08003a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <_sbrk+0x5c>)
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <_sbrk+0x60>)
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a2c:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <_sbrk+0x64>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <_sbrk+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3a:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <_sbrk+0x64>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d207      	bcs.n	8003a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a48:	f008 feee 	bl	800c828 <__errno>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e009      	b.n	8003a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a05      	ldr	r2, [pc, #20]	@ (8003a7c <_sbrk+0x64>)
 8003a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20005000 	.word	0x20005000
 8003a78:	00000400 	.word	0x00000400
 8003a7c:	2000040c 	.word	0x2000040c
 8003a80:	20001728 	.word	0x20001728

08003a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a92:	e003      	b.n	8003a9c <LoopCopyDataInit>

08003a94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a9a:	3104      	adds	r1, #4

08003a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a9c:	480a      	ldr	r0, [pc, #40]	@ (8003ac8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003aa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003aa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003aa4:	d3f6      	bcc.n	8003a94 <CopyDataInit>
  ldr r2, =_sbss
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003aa8:	e002      	b.n	8003ab0 <LoopFillZerobss>

08003aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003aac:	f842 3b04 	str.w	r3, [r2], #4

08003ab0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003ab2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003ab4:	d3f9      	bcc.n	8003aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ab6:	f7ff ffe5 	bl	8003a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aba:	f008 febb 	bl	800c834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003abe:	f7fd f923 	bl	8000d08 <main>
  bx lr
 8003ac2:	4770      	bx	lr
  ldr r3, =_sidata
 8003ac4:	0800da64 	.word	0x0800da64
  ldr r0, =_sdata
 8003ac8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003acc:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003ad0:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003ad4:	20001724 	.word	0x20001724

08003ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ad8:	e7fe      	b.n	8003ad8 <ADC1_2_IRQHandler>
	...

08003adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <HAL_Init+0x28>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <HAL_Init+0x28>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aec:	2003      	movs	r0, #3
 8003aee:	f000 f947 	bl	8003d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f000 f808 	bl	8003b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af8:	f7ff fe0c 	bl	8003714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40022000 	.word	0x40022000

08003b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b10:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_InitTick+0x54>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <HAL_InitTick+0x58>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f95f 	bl	8003dea <HAL_SYSTICK_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00e      	b.n	8003b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d80a      	bhi.n	8003b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f000 f927 	bl	8003d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b48:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <HAL_InitTick+0x5c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000028 	.word	0x20000028
 8003b60:	20000030 	.word	0x20000030
 8003b64:	2000002c 	.word	0x2000002c

08003b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_IncTick+0x1c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <HAL_IncTick+0x20>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	4a03      	ldr	r2, [pc, #12]	@ (8003b88 <HAL_IncTick+0x20>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000030 	.word	0x20000030
 8003b88:	20000410 	.word	0x20000410

08003b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b90:	4b02      	ldr	r3, [pc, #8]	@ (8003b9c <HAL_GetTick+0x10>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	20000410 	.word	0x20000410

08003ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffe0 	bl	8003b8c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000030 	.word	0x20000030

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4906      	ldr	r1, [pc, #24]	@ (8003c80 <__NVIC_EnableIRQ+0x34>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100

08003c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	db0a      	blt.n	8003cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	490c      	ldr	r1, [pc, #48]	@ (8003cd0 <__NVIC_SetPriority+0x4c>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cac:	e00a      	b.n	8003cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4908      	ldr	r1, [pc, #32]	@ (8003cd4 <__NVIC_SetPriority+0x50>)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	0112      	lsls	r2, r2, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	761a      	strb	r2, [r3, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	@ 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf28      	it	cs
 8003cf6:	2304      	movcs	r3, #4
 8003cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d902      	bls.n	8003d08 <NVIC_EncodePriority+0x30>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3b03      	subs	r3, #3
 8003d06:	e000      	b.n	8003d0a <NVIC_EncodePriority+0x32>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	43d9      	mvns	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	4313      	orrs	r3, r2
         );
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	@ 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d4c:	d301      	bcc.n	8003d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00f      	b.n	8003d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d52:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <SysTick_Config+0x40>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d60:	f7ff ff90 	bl	8003c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <SysTick_Config+0x40>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6a:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <SysTick_Config+0x40>)
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff2d 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da8:	f7ff ff42 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f7ff ff90 	bl	8003cd8 <NVIC_EncodePriority>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff5f 	bl	8003c84 <__NVIC_SetPriority>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff35 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffa2 	bl	8003d3c <SysTick_Config>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_FLASH_Program+0xd8>)
 8003e20:	7e1b      	ldrb	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_FLASH_Program+0x26>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e054      	b.n	8003ed4 <HAL_FLASH_Program+0xd0>
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <HAL_FLASH_Program+0xd8>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e34:	f000 f8a8 	bl	8003f88 <FLASH_WaitForLastOperation>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d144      	bne.n	8003ecc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d102      	bne.n	8003e4e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	757b      	strb	r3, [r7, #21]
 8003e4c:	e007      	b.n	8003e5e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d102      	bne.n	8003e5a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003e54:	2302      	movs	r3, #2
 8003e56:	757b      	strb	r3, [r7, #21]
 8003e58:	e001      	b.n	8003e5e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75bb      	strb	r3, [r7, #22]
 8003e62:	e02d      	b.n	8003ec0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e64:	7dbb      	ldrb	r3, [r7, #22]
 8003e66:	005a      	lsls	r2, r3, #1
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	eb02 0c03 	add.w	ip, r2, r3
 8003e6e:	7dbb      	ldrb	r3, [r7, #22]
 8003e70:	0119      	lsls	r1, r3, #4
 8003e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e76:	f1c1 0620 	rsb	r6, r1, #32
 8003e7a:	f1a1 0020 	sub.w	r0, r1, #32
 8003e7e:	fa22 f401 	lsr.w	r4, r2, r1
 8003e82:	fa03 f606 	lsl.w	r6, r3, r6
 8003e86:	4334      	orrs	r4, r6
 8003e88:	fa23 f000 	lsr.w	r0, r3, r0
 8003e8c:	4304      	orrs	r4, r0
 8003e8e:	fa23 f501 	lsr.w	r5, r3, r1
 8003e92:	b2a3      	uxth	r3, r4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4660      	mov	r0, ip
 8003e98:	f000 f85a 	bl	8003f50 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ea0:	f000 f872 	bl	8003f88 <FLASH_WaitForLastOperation>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <HAL_FLASH_Program+0xdc>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <HAL_FLASH_Program+0xdc>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003eba:	7dbb      	ldrb	r3, [r7, #22]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	75bb      	strb	r3, [r7, #22]
 8003ec0:	7dba      	ldrb	r2, [r7, #22]
 8003ec2:	7d7b      	ldrb	r3, [r7, #21]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3cd      	bcc.n	8003e64 <HAL_FLASH_Program+0x60>
 8003ec8:	e000      	b.n	8003ecc <HAL_FLASH_Program+0xc8>
      {
        break;
 8003eca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ecc:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <HAL_FLASH_Program+0xd8>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	761a      	strb	r2, [r3, #24]

  return status;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003edc:	20000418 	.word	0x20000418
 8003ee0:	40022000 	.word	0x40022000

08003ee4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <HAL_FLASH_Unlock+0x40>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_FLASH_Unlock+0x40>)
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_FLASH_Unlock+0x44>)
 8003efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f00:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <HAL_FLASH_Unlock+0x40>)
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <HAL_FLASH_Unlock+0x48>)
 8003f04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f06:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <HAL_FLASH_Unlock+0x40>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003f16:	79fb      	ldrb	r3, [r7, #7]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40022000 	.word	0x40022000
 8003f28:	45670123 	.word	0x45670123
 8003f2c:	cdef89ab 	.word	0xcdef89ab

08003f30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_FLASH_Lock+0x1c>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <HAL_FLASH_Lock+0x1c>)
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40022000 	.word	0x40022000

08003f50 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <FLASH_Program_HalfWord+0x30>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <FLASH_Program_HalfWord+0x34>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	4a07      	ldr	r2, [pc, #28]	@ (8003f84 <FLASH_Program_HalfWord+0x34>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	801a      	strh	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000418 	.word	0x20000418
 8003f84:	40022000 	.word	0x40022000

08003f88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff fdfc 	bl	8003b8c <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f96:	e010      	b.n	8003fba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d00c      	beq.n	8003fba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <FLASH_WaitForLastOperation+0x2e>
 8003fa6:	f7ff fdf1 	bl	8003b8c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d201      	bcs.n	8003fba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e025      	b.n	8004006 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e8      	bne.n	8003f98 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ff0:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <FLASH_WaitForLastOperation+0x88>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ffc:	f000 f80a 	bl	8004014 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40022000 	.word	0x40022000

08004014 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800401e:	4b23      	ldr	r3, [pc, #140]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800402a:	4b21      	ldr	r3, [pc, #132]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 8004034:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800403e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800404a:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 8004054:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800405e:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	4a0f      	ldr	r2, [pc, #60]	@ (80040b0 <FLASH_SetErrorCode+0x9c>)
 8004074:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4a0c      	ldr	r2, [pc, #48]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f240 1201 	movw	r2, #257	@ 0x101
 8004088:	4293      	cmp	r3, r2
 800408a:	d106      	bne.n	800409a <FLASH_SetErrorCode+0x86>
 800408c:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4a06      	ldr	r2, [pc, #24]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	61d3      	str	r3, [r2, #28]
}  
 8004098:	e002      	b.n	80040a0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800409a:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <FLASH_SetErrorCode+0x98>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60d3      	str	r3, [r2, #12]
}  
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40022000 	.word	0x40022000
 80040b0:	20000418 	.word	0x20000418

080040b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <HAL_FLASHEx_Erase+0xd0>)
 80040c8:	7e1b      	ldrb	r3, [r3, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_FLASHEx_Erase+0x1e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e053      	b.n	800417a <HAL_FLASHEx_Erase+0xc6>
 80040d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <HAL_FLASHEx_Erase+0xd0>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d116      	bne.n	800410e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80040e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040e4:	f7ff ff50 	bl	8003f88 <FLASH_WaitForLastOperation>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d141      	bne.n	8004172 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 f84c 	bl	800418c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040f8:	f7ff ff46 	bl	8003f88 <FLASH_WaitForLastOperation>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004100:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <HAL_FLASHEx_Erase+0xd4>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_FLASHEx_Erase+0xd4>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6113      	str	r3, [r2, #16]
 800410c:	e031      	b.n	8004172 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800410e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004112:	f7ff ff39 	bl	8003f88 <FLASH_WaitForLastOperation>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d12a      	bne.n	8004172 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f04f 32ff 	mov.w	r2, #4294967295
 8004122:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	e019      	b.n	8004160 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800412c:	68b8      	ldr	r0, [r7, #8]
 800412e:	f000 f849 	bl	80041c4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004132:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004136:	f7ff ff27 	bl	8003f88 <FLASH_WaitForLastOperation>
 800413a:	4603      	mov	r3, r0
 800413c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_FLASHEx_Erase+0xd4>)
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <HAL_FLASHEx_Erase+0xd4>)
 8004144:	f023 0302 	bic.w	r3, r3, #2
 8004148:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	601a      	str	r2, [r3, #0]
            break;
 8004156:	e00c      	b.n	8004172 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800415e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	029a      	lsls	r2, r3, #10
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4413      	add	r3, r2
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d3dc      	bcc.n	800412c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004172:	4b04      	ldr	r3, [pc, #16]	@ (8004184 <HAL_FLASHEx_Erase+0xd0>)
 8004174:	2200      	movs	r2, #0
 8004176:	761a      	strb	r2, [r3, #24]

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000418 	.word	0x20000418
 8004188:	40022000 	.word	0x40022000

0800418c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <FLASH_MassErase+0x30>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800419a:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <FLASH_MassErase+0x34>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	4a08      	ldr	r2, [pc, #32]	@ (80041c0 <FLASH_MassErase+0x34>)
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <FLASH_MassErase+0x34>)
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	4a05      	ldr	r2, [pc, #20]	@ (80041c0 <FLASH_MassErase+0x34>)
 80041ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000418 	.word	0x20000418
 80041c0:	40022000 	.word	0x40022000

080041c4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041cc:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <FLASH_PageErase+0x38>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <FLASH_PageErase+0x3c>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <FLASH_PageErase+0x3c>)
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <FLASH_PageErase+0x3c>)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <FLASH_PageErase+0x3c>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	4a05      	ldr	r2, [pc, #20]	@ (8004200 <FLASH_PageErase+0x3c>)
 80041ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000418 	.word	0x20000418
 8004200:	40022000 	.word	0x40022000

08004204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004204:	b480      	push	{r7}
 8004206:	b08b      	sub	sp, #44	@ 0x2c
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004216:	e169      	b.n	80044ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004218:	2201      	movs	r2, #1
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	f040 8158 	bne.w	80044e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a9a      	ldr	r2, [pc, #616]	@ (80044a4 <HAL_GPIO_Init+0x2a0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d05e      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
 8004240:	4a98      	ldr	r2, [pc, #608]	@ (80044a4 <HAL_GPIO_Init+0x2a0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d875      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 8004246:	4a98      	ldr	r2, [pc, #608]	@ (80044a8 <HAL_GPIO_Init+0x2a4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d058      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
 800424c:	4a96      	ldr	r2, [pc, #600]	@ (80044a8 <HAL_GPIO_Init+0x2a4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d86f      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 8004252:	4a96      	ldr	r2, [pc, #600]	@ (80044ac <HAL_GPIO_Init+0x2a8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d052      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
 8004258:	4a94      	ldr	r2, [pc, #592]	@ (80044ac <HAL_GPIO_Init+0x2a8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d869      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 800425e:	4a94      	ldr	r2, [pc, #592]	@ (80044b0 <HAL_GPIO_Init+0x2ac>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04c      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
 8004264:	4a92      	ldr	r2, [pc, #584]	@ (80044b0 <HAL_GPIO_Init+0x2ac>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d863      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 800426a:	4a92      	ldr	r2, [pc, #584]	@ (80044b4 <HAL_GPIO_Init+0x2b0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d046      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
 8004270:	4a90      	ldr	r2, [pc, #576]	@ (80044b4 <HAL_GPIO_Init+0x2b0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d85d      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 8004276:	2b12      	cmp	r3, #18
 8004278:	d82a      	bhi.n	80042d0 <HAL_GPIO_Init+0xcc>
 800427a:	2b12      	cmp	r3, #18
 800427c:	d859      	bhi.n	8004332 <HAL_GPIO_Init+0x12e>
 800427e:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <HAL_GPIO_Init+0x80>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042ff 	.word	0x080042ff
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042eb 	.word	0x080042eb
 8004290:	0800432d 	.word	0x0800432d
 8004294:	08004333 	.word	0x08004333
 8004298:	08004333 	.word	0x08004333
 800429c:	08004333 	.word	0x08004333
 80042a0:	08004333 	.word	0x08004333
 80042a4:	08004333 	.word	0x08004333
 80042a8:	08004333 	.word	0x08004333
 80042ac:	08004333 	.word	0x08004333
 80042b0:	08004333 	.word	0x08004333
 80042b4:	08004333 	.word	0x08004333
 80042b8:	08004333 	.word	0x08004333
 80042bc:	08004333 	.word	0x08004333
 80042c0:	08004333 	.word	0x08004333
 80042c4:	08004333 	.word	0x08004333
 80042c8:	080042e1 	.word	0x080042e1
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	4a79      	ldr	r2, [pc, #484]	@ (80044b8 <HAL_GPIO_Init+0x2b4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042d6:	e02c      	b.n	8004332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	623b      	str	r3, [r7, #32]
          break;
 80042de:	e029      	b.n	8004334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	623b      	str	r3, [r7, #32]
          break;
 80042e8:	e024      	b.n	8004334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	3308      	adds	r3, #8
 80042f0:	623b      	str	r3, [r7, #32]
          break;
 80042f2:	e01f      	b.n	8004334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	330c      	adds	r3, #12
 80042fa:	623b      	str	r3, [r7, #32]
          break;
 80042fc:	e01a      	b.n	8004334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004306:	2304      	movs	r3, #4
 8004308:	623b      	str	r3, [r7, #32]
          break;
 800430a:	e013      	b.n	8004334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004314:	2308      	movs	r3, #8
 8004316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	611a      	str	r2, [r3, #16]
          break;
 800431e:	e009      	b.n	8004334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004320:	2308      	movs	r3, #8
 8004322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	615a      	str	r2, [r3, #20]
          break;
 800432a:	e003      	b.n	8004334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
          break;
 8004330:	e000      	b.n	8004334 <HAL_GPIO_Init+0x130>
          break;
 8004332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2bff      	cmp	r3, #255	@ 0xff
 8004338:	d801      	bhi.n	800433e <HAL_GPIO_Init+0x13a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	e001      	b.n	8004342 <HAL_GPIO_Init+0x13e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2bff      	cmp	r3, #255	@ 0xff
 8004348:	d802      	bhi.n	8004350 <HAL_GPIO_Init+0x14c>
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	e002      	b.n	8004356 <HAL_GPIO_Init+0x152>
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	3b08      	subs	r3, #8
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	210f      	movs	r1, #15
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	431a      	orrs	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80b1 	beq.w	80044e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004384:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <HAL_GPIO_Init+0x2b8>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	4a4c      	ldr	r2, [pc, #304]	@ (80044bc <HAL_GPIO_Init+0x2b8>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6193      	str	r3, [r2, #24]
 8004390:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_GPIO_Init+0x2b8>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800439c:	4a48      	ldr	r2, [pc, #288]	@ (80044c0 <HAL_GPIO_Init+0x2bc>)
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3302      	adds	r3, #2
 80043a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	220f      	movs	r2, #15
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4013      	ands	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <HAL_GPIO_Init+0x2c0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_GPIO_Init+0x1ec>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_GPIO_Init+0x2c4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00d      	beq.n	80043ec <HAL_GPIO_Init+0x1e8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3e      	ldr	r2, [pc, #248]	@ (80044cc <HAL_GPIO_Init+0x2c8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <HAL_GPIO_Init+0x1e4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3d      	ldr	r2, [pc, #244]	@ (80044d0 <HAL_GPIO_Init+0x2cc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_GPIO_Init+0x1e0>
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <HAL_GPIO_Init+0x1ee>
 80043e4:	2304      	movs	r3, #4
 80043e6:	e004      	b.n	80043f2 <HAL_GPIO_Init+0x1ee>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e002      	b.n	80043f2 <HAL_GPIO_Init+0x1ee>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_GPIO_Init+0x1ee>
 80043f0:	2300      	movs	r3, #0
 80043f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004402:	492f      	ldr	r1, [pc, #188]	@ (80044c0 <HAL_GPIO_Init+0x2bc>)
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800441c:	4b2d      	ldr	r3, [pc, #180]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	492c      	ldr	r1, [pc, #176]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
 8004428:	e006      	b.n	8004438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800442a:	4b2a      	ldr	r3, [pc, #168]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	43db      	mvns	r3, r3
 8004432:	4928      	ldr	r1, [pc, #160]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004434:	4013      	ands	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004444:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4922      	ldr	r1, [pc, #136]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	e006      	b.n	8004460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004452:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	43db      	mvns	r3, r3
 800445a:	491e      	ldr	r1, [pc, #120]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800445c:	4013      	ands	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d006      	beq.n	800447a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	4918      	ldr	r1, [pc, #96]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
 8004478:	e006      	b.n	8004488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800447a:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	43db      	mvns	r3, r3
 8004482:	4914      	ldr	r1, [pc, #80]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004484:	4013      	ands	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d021      	beq.n	80044d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004494:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	490e      	ldr	r1, [pc, #56]	@ (80044d4 <HAL_GPIO_Init+0x2d0>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
 80044a0:	e021      	b.n	80044e6 <HAL_GPIO_Init+0x2e2>
 80044a2:	bf00      	nop
 80044a4:	10320000 	.word	0x10320000
 80044a8:	10310000 	.word	0x10310000
 80044ac:	10220000 	.word	0x10220000
 80044b0:	10210000 	.word	0x10210000
 80044b4:	10120000 	.word	0x10120000
 80044b8:	10110000 	.word	0x10110000
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010800 	.word	0x40010800
 80044c8:	40010c00 	.word	0x40010c00
 80044cc:	40011000 	.word	0x40011000
 80044d0:	40011400 	.word	0x40011400
 80044d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <HAL_GPIO_Init+0x304>)
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	43db      	mvns	r3, r3
 80044e0:	4909      	ldr	r1, [pc, #36]	@ (8004508 <HAL_GPIO_Init+0x304>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	3301      	adds	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	fa22 f303 	lsr.w	r3, r2, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f ae8e 	bne.w	8004218 <HAL_GPIO_Init+0x14>
  }
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	372c      	adds	r7, #44	@ 0x2c
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e001      	b.n	800452e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	807b      	strh	r3, [r7, #2]
 8004546:	4613      	mov	r3, r2
 8004548:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454a:	787b      	ldrb	r3, [r7, #1]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004550:	887a      	ldrh	r2, [r7, #2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004556:	e003      	b.n	8004560 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	041a      	lsls	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	611a      	str	r2, [r3, #16]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
	...

0800456c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004582:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f806 	bl	800459c <HAL_GPIO_EXTI_Callback>
  }
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40010400 	.word	0x40010400

0800459c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12b      	b.n	800481a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff f8ce 	bl	8003778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004614:	f002 fb78 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8004618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a81      	ldr	r2, [pc, #516]	@ (8004824 <HAL_I2C_Init+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d807      	bhi.n	8004634 <HAL_I2C_Init+0x84>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a80      	ldr	r2, [pc, #512]	@ (8004828 <HAL_I2C_Init+0x278>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e006      	b.n	8004642 <HAL_I2C_Init+0x92>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a7d      	ldr	r2, [pc, #500]	@ (800482c <HAL_I2C_Init+0x27c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0e7      	b.n	800481a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a78      	ldr	r2, [pc, #480]	@ (8004830 <HAL_I2C_Init+0x280>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a6a      	ldr	r2, [pc, #424]	@ (8004824 <HAL_I2C_Init+0x274>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d802      	bhi.n	8004684 <HAL_I2C_Init+0xd4>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	e009      	b.n	8004698 <HAL_I2C_Init+0xe8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a69      	ldr	r2, [pc, #420]	@ (8004834 <HAL_I2C_Init+0x284>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	3301      	adds	r3, #1
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430b      	orrs	r3, r1
 800469e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	495c      	ldr	r1, [pc, #368]	@ (8004824 <HAL_I2C_Init+0x274>)
 80046b4:	428b      	cmp	r3, r1
 80046b6:	d819      	bhi.n	80046ec <HAL_I2C_Init+0x13c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e59      	subs	r1, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046cc:	400b      	ands	r3, r1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_I2C_Init+0x138>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e59      	subs	r1, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	e051      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046e8:	2304      	movs	r3, #4
 80046ea:	e04f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <HAL_I2C_Init+0x168>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e012      	b.n	800473e <HAL_I2C_Init+0x18e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	0099      	lsls	r1, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x196>
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <HAL_I2C_Init+0x1dc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_I2C_Init+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e58      	subs	r0, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	440b      	add	r3, r1
 800475c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004760:	3301      	adds	r3, #1
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800476a:	e00f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6809      	ldr	r1, [r1, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6911      	ldr	r1, [r2, #16]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	000186a0 	.word	0x000186a0
 8004828:	001e847f 	.word	0x001e847f
 800482c:	003d08ff 	.word	0x003d08ff
 8004830:	431bde83 	.word	0x431bde83
 8004834:	10624dd3 	.word	0x10624dd3

08004838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	461a      	mov	r2, r3
 8004844:	460b      	mov	r3, r1
 8004846:	817b      	strh	r3, [r7, #10]
 8004848:	4613      	mov	r3, r2
 800484a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800484c:	f7ff f99e 	bl	8003b8c <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	f040 80e0 	bne.w	8004a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2319      	movs	r3, #25
 8004866:	2201      	movs	r2, #1
 8004868:	4970      	ldr	r1, [pc, #448]	@ (8004a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f964 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
 8004878:	e0d3      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_I2C_Master_Transmit+0x50>
 8004884:	2302      	movs	r3, #2
 8004886:	e0cc      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d007      	beq.n	80048ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2221      	movs	r2, #33	@ 0x21
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2210      	movs	r2, #16
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	893a      	ldrh	r2, [r7, #8]
 80048de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a50      	ldr	r2, [pc, #320]	@ (8004a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048f0:	8979      	ldrh	r1, [r7, #10]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f89c 	bl	8004a34 <I2C_MasterRequestWrite>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e08d      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800491c:	e066      	b.n	80049ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	6a39      	ldr	r1, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f9de 	bl	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e06b      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_I2C_Master_Transmit+0x188>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6a39      	ldr	r1, [r7, #32]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f9ce 	bl	8004d66 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d107      	bne.n	80049e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e01a      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d194      	bne.n	800491e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	00100002 	.word	0x00100002
 8004a30:	ffff0000 	.word	0xffff0000

08004a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	460b      	mov	r3, r1
 8004a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d006      	beq.n	8004a5e <I2C_MasterRequestWrite+0x2a>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <I2C_MasterRequestWrite+0x2a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a5c:	d108      	bne.n	8004a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00b      	b.n	8004a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	2b12      	cmp	r3, #18
 8004a76:	d107      	bne.n	8004a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f84f 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aae:	d103      	bne.n	8004ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e035      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ad4:	611a      	str	r2, [r3, #16]
 8004ad6:	e01b      	b.n	8004b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	11db      	asrs	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f063 030f 	orn	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <I2C_MasterRequestWrite+0xfc>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f875 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e010      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <I2C_MasterRequestWrite+0x100>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f865 	bl	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	00010008 	.word	0x00010008
 8004b34:	00010002 	.word	0x00010002

08004b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b48:	e025      	b.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d021      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7ff f81b 	bl	8003b8c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e023      	b.n	8004bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10d      	bne.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	e00c      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0b6      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bf4:	e051      	b.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c04:	d123      	bne.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e046      	b.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d021      	beq.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fe ff99 	bl	8003b8c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d116      	bne.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e020      	b.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10c      	bne.n	8004cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	e00b      	b.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d18d      	bne.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf0:	e02d      	b.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f878 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e02d      	b.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d021      	beq.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fe ff3f 	bl	8003b8c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d116      	bne.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d58:	2b80      	cmp	r3, #128	@ 0x80
 8004d5a:	d1ca      	bne.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d72:	e02d      	b.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f837 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e02d      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d021      	beq.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8c:	f7fe fefe 	bl	8003b8c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e007      	b.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d1ca      	bne.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d11b      	bne.n	8004e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b08b      	sub	sp, #44	@ 0x2c
 8004e48:	af06      	add	r7, sp, #24
 8004e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0fd      	b.n	8005052 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f007 fa0a 	bl	800c284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2203      	movs	r2, #3
 8004e74:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f003 f981 	bl	8008184 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	687e      	ldr	r6, [r7, #4]
 8004e8a:	466d      	mov	r5, sp
 8004e8c:	f106 0410 	add.w	r4, r6, #16
 8004e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	602b      	str	r3, [r5, #0]
 8004e98:	1d33      	adds	r3, r6, #4
 8004e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9c:	6838      	ldr	r0, [r7, #0]
 8004e9e:	f003 f94b 	bl	8008138 <USB_CoreInit>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0ce      	b.n	8005052 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 f97c 	bl	80081b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e04c      	b.n	8004f60 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	2201      	movs	r2, #1
 8004eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	b298      	uxth	r0, r3
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	3336      	adds	r3, #54	@ 0x36
 8004f04:	4602      	mov	r2, r0
 8004f06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	3303      	adds	r3, #3
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3338      	adds	r3, #56	@ 0x38
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	333c      	adds	r3, #60	@ 0x3c
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	440b      	add	r3, r1
 8004f54:	3340      	adds	r3, #64	@ 0x40
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	7bfa      	ldrb	r2, [r7, #15]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3ad      	bcc.n	8004ec6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e044      	b.n	8004ffa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	440b      	add	r3, r1
 8004faa:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	440b      	add	r3, r1
 8004fc0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fde:	7bfa      	ldrb	r2, [r7, #15]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	440b      	add	r3, r1
 8004fec:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d3b5      	bcc.n	8004f70 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	687e      	ldr	r6, [r7, #4]
 800500c:	466d      	mov	r5, sp
 800500e:	f106 0410 	add.w	r4, r6, #16
 8005012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	1d33      	adds	r3, r6, #4
 800501c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501e:	6838      	ldr	r0, [r7, #0]
 8005020:	f003 f8d6 	bl	80081d0 <USB_DevInit>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e00d      	b.n	8005052 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f005 faf7 	bl	800a63e <USB_DevDisconnect>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800505a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_PCD_Start+0x16>
 800506c:	2302      	movs	r3, #2
 800506e:	e016      	b.n	800509e <HAL_PCD_Start+0x44>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f003 f86b 	bl	8008158 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005082:	2101      	movs	r1, #1
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f007 fb70 	bl	800c76a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f005 facb 	bl	800a62a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b088      	sub	sp, #32
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f005 facd 	bl	800a652 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c2:	d102      	bne.n	80050ca <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb5f 	bl	8005788 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f005 fabf 	bl	800a652 <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050de:	d112      	bne.n	8005106 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f2:	b292      	uxth	r2, r2
 80050f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f007 f93e 	bl	800c37a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050fe:	2100      	movs	r1, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f923 	bl	800534c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 faa1 	bl	800a652 <USB_ReadInterrupts>
 8005110:	4603      	mov	r3, r0
 8005112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800511a:	d10b      	bne.n	8005134 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800512e:	b292      	uxth	r2, r2
 8005130:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f005 fa8a 	bl	800a652 <USB_ReadInterrupts>
 800513e:	4603      	mov	r3, r0
 8005140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005148:	d10b      	bne.n	8005162 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800515c:	b292      	uxth	r2, r2
 800515e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f005 fa73 	bl	800a652 <USB_ReadInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005176:	d126      	bne.n	80051c6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	b292      	uxth	r2, r2
 800518c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0208 	bic.w	r2, r2, #8
 80051a2:	b292      	uxth	r2, r2
 80051a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f007 f91f 	bl	800c3ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051c0:	b292      	uxth	r2, r2
 80051c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f005 fa41 	bl	800a652 <USB_ReadInterrupts>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051da:	f040 8082 	bne.w	80052e2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80051de:	2300      	movs	r3, #0
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e010      	b.n	8005206 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	7ffb      	ldrb	r3, [r7, #31]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	7ffb      	ldrb	r3, [r7, #31]
 80051f2:	8812      	ldrh	r2, [r2, #0]
 80051f4:	b292      	uxth	r2, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	3320      	adds	r3, #32
 80051fa:	443b      	add	r3, r7
 80051fc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005200:	7ffb      	ldrb	r3, [r7, #31]
 8005202:	3301      	adds	r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d9eb      	bls.n	80051e4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	b292      	uxth	r2, r2
 8005220:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	b292      	uxth	r2, r2
 8005238:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800523c:	bf00      	nop
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005246:	b29b      	uxth	r3, r3
 8005248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f6      	beq.n	800523e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005262:	b292      	uxth	r2, r2
 8005264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e00f      	b.n	800528e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	4611      	mov	r1, r2
 8005276:	7ffa      	ldrb	r2, [r7, #31]
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	440a      	add	r2, r1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	3320      	adds	r3, #32
 8005280:	443b      	add	r3, r7
 8005282:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005286:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005288:	7ffb      	ldrb	r3, [r7, #31]
 800528a:	3301      	adds	r3, #1
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	7ffb      	ldrb	r3, [r7, #31]
 8005290:	2b07      	cmp	r3, #7
 8005292:	d9ec      	bls.n	800526e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0208 	orr.w	r2, r2, #8
 80052a6:	b292      	uxth	r2, r2
 80052a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052be:	b292      	uxth	r2, r2
 80052c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0204 	orr.w	r2, r2, #4
 80052d6:	b292      	uxth	r2, r2
 80052d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f007 f86b 	bl	800c3b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f005 f9b3 	bl	800a652 <USB_ReadInterrupts>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f6:	d10e      	bne.n	8005316 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005300:	b29a      	uxth	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800530a:	b292      	uxth	r2, r2
 800530c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f007 f824 	bl	800c35e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f005 f999 	bl	800a652 <USB_ReadInterrupts>
 8005320:	4603      	mov	r3, r0
 8005322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532a:	d10b      	bne.n	8005344 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800533e:	b292      	uxth	r2, r2
 8005340:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005344:	bf00      	nop
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_PCD_SetAddress+0x1a>
 8005362:	2302      	movs	r3, #2
 8005364:	e013      	b.n	800538e <HAL_PCD_SetAddress+0x42>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f005 f940 	bl	800a604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	4608      	mov	r0, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	461a      	mov	r2, r3
 80053a4:	4603      	mov	r3, r0
 80053a6:	70fb      	strb	r3, [r7, #3]
 80053a8:	460b      	mov	r3, r1
 80053aa:	803b      	strh	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0e      	bge.n	80053da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	705a      	strb	r2, [r3, #1]
 80053d8:	e00e      	b.n	80053f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	f003 0207 	and.w	r2, r3, #7
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005404:	883a      	ldrh	r2, [r7, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	78ba      	ldrb	r2, [r7, #2]
 800540e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005422:	78bb      	ldrb	r3, [r7, #2]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d102      	bne.n	800542e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_EP_Open+0xa6>
 8005438:	2302      	movs	r3, #2
 800543a:	e00e      	b.n	800545a <HAL_PCD_EP_Open+0xc4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	f002 fee0 	bl	8008210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005458:	7afb      	ldrb	r3, [r7, #11]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800546e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005472:	2b00      	cmp	r3, #0
 8005474:	da0e      	bge.n	8005494 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	705a      	strb	r2, [r3, #1]
 8005492:	e00e      	b.n	80054b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 0207 	and.w	r2, r3, #7
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_PCD_EP_Close+0x6a>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e00e      	b.n	80054ea <HAL_PCD_EP_Close+0x88>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	4618      	mov	r0, r3
 80054dc:	f003 fa02 	bl	80088e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	460b      	mov	r3, r1
 8005500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f003 0207 	and.w	r2, r3, #7
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	b2da      	uxtb	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	4618      	mov	r0, r3
 8005550:	f003 fbb4 	bl	8008cbc <USB_EPStartXfer>
 8005554:	e005      	b.n	8005562 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	4618      	mov	r0, r3
 800555e:	f003 fbad 	bl	8008cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	f003 0207 	and.w	r2, r3, #7
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	440b      	add	r3, r1
 800558a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	460b      	mov	r3, r1
 80055a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2201      	movs	r2, #1
 80055e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6979      	ldr	r1, [r7, #20]
 8005602:	4618      	mov	r0, r3
 8005604:	f003 fb5a 	bl	8008cbc <USB_EPStartXfer>
 8005608:	e005      	b.n	8005616 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	4618      	mov	r0, r3
 8005612:	f003 fb53 	bl	8008cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	f003 0207 	and.w	r2, r3, #7
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d901      	bls.n	800563e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e04c      	b.n	80056d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800563e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da0e      	bge.n	8005664 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	705a      	strb	r2, [r3, #1]
 8005662:	e00c      	b.n	800567e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4413      	add	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	b2da      	uxtb	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_PCD_EP_SetStall+0x7e>
 800569a:	2302      	movs	r3, #2
 800569c:	e01c      	b.n	80056d8 <HAL_PCD_EP_SetStall+0xb8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f004 feac 	bl	800a40a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f004 ffd1 	bl	800a670 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d901      	bls.n	80056fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e040      	b.n	8005780 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da0e      	bge.n	8005724 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	705a      	strb	r2, [r3, #1]
 8005722:	e00e      	b.n	8005742 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 0207 	and.w	r2, r3, #7
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	b2da      	uxtb	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_PCD_EP_ClrStall+0x82>
 800575e:	2302      	movs	r3, #2
 8005760:	e00e      	b.n	8005780 <HAL_PCD_EP_ClrStall+0xa0>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	4618      	mov	r0, r3
 8005772:	f004 fe9a 	bl	800a4aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08e      	sub	sp, #56	@ 0x38
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005790:	e2de      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800579a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800579c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 80057a8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 8157 	bne.w	8005a60 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80057b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d151      	bne.n	8005860 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80057c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057cc:	81fb      	strh	r3, [r7, #14]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	89fb      	ldrh	r3, [r7, #14]
 80057d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3328      	adds	r3, #40	@ 0x28
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	3302      	adds	r3, #2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	441a      	add	r2, r3
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f006 fd81 	bl	800c32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 828d 	beq.w	8005d50 <PCD_EP_ISR_Handler+0x5c8>
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 8288 	bne.w	8005d50 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800584c:	b2da      	uxtb	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800585e:	e277      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005870:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005876:	2b00      	cmp	r3, #0
 8005878:	d034      	beq.n	80058e4 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	3306      	adds	r3, #6
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f004 ff28 	bl	800a70e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80058ca:	4013      	ands	r3, r2
 80058cc:	823b      	strh	r3, [r7, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	8a3a      	ldrh	r2, [r7, #16]
 80058d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058d8:	b292      	uxth	r2, r2
 80058da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f006 fcf7 	bl	800c2d0 <HAL_PCD_SetupStageCallback>
 80058e2:	e235      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f280 8231 	bge.w	8005d50 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80058fa:	4013      	ands	r3, r2
 80058fc:	83bb      	strh	r3, [r7, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	8bba      	ldrh	r2, [r7, #28]
 8005904:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005908:	b292      	uxth	r2, r2
 800590a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	3306      	adds	r3, #6
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d019      	beq.n	8005974 <PCD_EP_ISR_Handler+0x1ec>
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	6959      	ldr	r1, [r3, #20]
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005958:	b29b      	uxth	r3, r3
 800595a:	f004 fed8 	bl	800a70e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	441a      	add	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800596c:	2100      	movs	r1, #0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f006 fcc0 	bl	800c2f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005982:	b29b      	uxth	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	4413      	add	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d112      	bne.n	80059c2 <PCD_EP_ISR_Handler+0x23a>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e02f      	b.n	8005a22 <PCD_EP_ISR_Handler+0x29a>
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80059c8:	d813      	bhi.n	80059f2 <PCD_EP_ISR_Handler+0x26a>
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <PCD_EP_ISR_Handler+0x25c>
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	3301      	adds	r3, #1
 80059e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e017      	b.n	8005a22 <PCD_EP_ISR_Handler+0x29a>
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <PCD_EP_ISR_Handler+0x284>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	029b      	lsls	r3, r3, #10
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	827b      	strh	r3, [r7, #18]
 8005a34:	8a7b      	ldrh	r3, [r7, #18]
 8005a36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a3a:	827b      	strh	r3, [r7, #18]
 8005a3c:	8a7b      	ldrh	r3, [r7, #18]
 8005a3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a42:	827b      	strh	r3, [r7, #18]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	8a7b      	ldrh	r3, [r7, #18]
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
 8005a5e:	e177      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a72:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f280 80ea 	bge.w	8005c50 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005a92:	4013      	ands	r3, r2
 8005a94:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005aae:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	7b1b      	ldrb	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d122      	bne.n	8005b12 <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	3306      	adds	r3, #6
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8005af6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8087 	beq.w	8005c0c <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	6959      	ldr	r1, [r3, #20]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	88da      	ldrh	r2, [r3, #6]
 8005b0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b0c:	f004 fdff 	bl	800a70e <USB_ReadPMA>
 8005b10:	e07c      	b.n	8005c0c <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d108      	bne.n	8005b2c <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005b1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f923 	bl	8005d6c <HAL_PCD_EP_DB_Receive>
 8005b26:	4603      	mov	r3, r0
 8005b28:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b2a:	e06f      	b.n	8005c0c <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d021      	beq.n	8005bca <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005bb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02a      	beq.n	8005c0c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	6959      	ldr	r1, [r3, #20]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	891a      	ldrh	r2, [r3, #8]
 8005bc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bc4:	f004 fda3 	bl	800a70e <USB_ReadPMA>
 8005bc8:	e020      	b.n	8005c0c <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	3306      	adds	r3, #6
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf2:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005bf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	6959      	ldr	r1, [r3, #20]
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	895a      	ldrh	r2, [r3, #10]
 8005c06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c08:	f004 fd81 	bl	800a70e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c12:	441a      	add	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c1e:	441a      	add	r2, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <PCD_EP_ISR_Handler+0x4ae>
 8005c2c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d206      	bcs.n	8005c44 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f006 fb59 	bl	800c2f4 <HAL_PCD_DataOutStageCallback>
 8005c42:	e005      	b.n	8005c50 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f003 f836 	bl	8008cbc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d07a      	beq.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c5a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c88:	843b      	strh	r3, [r7, #32]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	8c3b      	ldrh	r3, [r7, #32]
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d108      	bne.n	8005cc0 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d146      	bne.n	8005d44 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005cb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d141      	bne.n	8005d44 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	8bfb      	ldrh	r3, [r7, #30]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d906      	bls.n	8005d02 <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	8bfb      	ldrh	r3, [r7, #30]
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	619a      	str	r2, [r3, #24]
 8005d00:	e002      	b.n	8005d08 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	2200      	movs	r2, #0
 8005d06:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f006 fb07 	bl	800c32a <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8005d1c:	e018      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	8bfb      	ldrh	r3, [r7, #30]
 8005d24:	441a      	add	r2, r3
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	8bfb      	ldrh	r3, [r7, #30]
 8005d30:	441a      	add	r2, r3
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 ffbd 	bl	8008cbc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005d42:	e005      	b.n	8005d50 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d46:	461a      	mov	r2, r3
 8005d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f91b 	bl	8005f86 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f6ff ad18 	blt.w	8005792 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3738      	adds	r7, #56	@ 0x38
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d07e      	beq.n	8005e82 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	3302      	adds	r3, #2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	8b7b      	ldrh	r3, [r7, #26]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d306      	bcc.n	8005dc6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	8b7b      	ldrh	r3, [r7, #26]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	619a      	str	r2, [r3, #24]
 8005dc4:	e002      	b.n	8005dcc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d123      	bne.n	8005e1c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dee:	833b      	strh	r3, [r7, #24]
 8005df0:	8b3b      	ldrh	r3, [r7, #24]
 8005df2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005df6:	833b      	strh	r3, [r7, #24]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	8b3b      	ldrh	r3, [r7, #24]
 8005e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e40:	82fb      	strh	r3, [r7, #22]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8afb      	ldrh	r3, [r7, #22]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e66:	8b7b      	ldrh	r3, [r7, #26]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8087 	beq.w	8005f7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6959      	ldr	r1, [r3, #20]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	891a      	ldrh	r2, [r3, #8]
 8005e7a:	8b7b      	ldrh	r3, [r7, #26]
 8005e7c:	f004 fc47 	bl	800a70e <USB_ReadPMA>
 8005e80:	e07c      	b.n	8005f7c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	3306      	adds	r3, #6
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eaa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	8b7b      	ldrh	r3, [r7, #26]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d306      	bcc.n	8005ec4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	8b7b      	ldrh	r3, [r7, #26]
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	e002      	b.n	8005eca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d123      	bne.n	8005f1a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eec:	83fb      	strh	r3, [r7, #30]
 8005eee:	8bfb      	ldrh	r3, [r7, #30]
 8005ef0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ef4:	83fb      	strh	r3, [r7, #30]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	8bfb      	ldrh	r3, [r7, #30]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11f      	bne.n	8005f64 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3e:	83bb      	strh	r3, [r7, #28]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	8bbb      	ldrh	r3, [r7, #28]
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f64:	8b7b      	ldrh	r3, [r7, #26]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6959      	ldr	r1, [r3, #20]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	895a      	ldrh	r2, [r3, #10]
 8005f76:	8b7b      	ldrh	r3, [r7, #26]
 8005f78:	f004 fbc9 	bl	800a70e <USB_ReadPMA>
    }
  }

  return count;
 8005f7c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b094      	sub	sp, #80	@ 0x50
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8138 	beq.w	8006210 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fc8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d907      	bls.n	8005fe8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005fe0:	1ad2      	subs	r2, r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	619a      	str	r2, [r3, #24]
 8005fe6:	e002      	b.n	8005fee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12c      	bne.n	8006050 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f006 f994 	bl	800c32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 823a 	beq.w	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006028:	82fb      	strh	r3, [r7, #22]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
 800604e:	e218      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01f      	beq.n	800609a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006074:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 81ee 	bne.w	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80060ae:	441a      	add	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80060bc:	441a      	add	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d309      	bcc.n	80060e2 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	621a      	str	r2, [r3, #32]
 80060e0:	e015      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80060ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060f8:	e009      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d155      	bne.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x23c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006140:	2b00      	cmp	r3, #0
 8006142:	d112      	bne.n	800616a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800614e:	b29a      	uxth	r2, r3
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e047      	b.n	80061fa <HAL_PCD_EP_DB_Transmit+0x274>
 800616a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616c:	2b3e      	cmp	r3, #62	@ 0x3e
 800616e:	d811      	bhi.n	8006194 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_PCD_EP_DB_Transmit+0x200>
 8006180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006182:	3301      	adds	r3, #1
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29a      	uxth	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e032      	b.n	80061fa <HAL_PCD_EP_DB_Transmit+0x274>
 8006194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800619a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_PCD_EP_DB_Transmit+0x224>
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	3b01      	subs	r3, #1
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	029b      	lsls	r3, r3, #10
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e01b      	b.n	80061fa <HAL_PCD_EP_DB_Transmit+0x274>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d117      	bne.n	80061fa <HAL_PCD_EP_DB_Transmit+0x274>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d8:	b29b      	uxth	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	4413      	add	r3, r2
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	011a      	lsls	r2, r3, #4
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6959      	ldr	r1, [r3, #20]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	891a      	ldrh	r2, [r3, #8]
 8006206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006208:	b29b      	uxth	r3, r3
 800620a:	f004 fa3c 	bl	800a686 <USB_WritePMA>
 800620e:	e138      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4413      	add	r3, r2
 8006224:	3306      	adds	r3, #6
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006238:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006244:	429a      	cmp	r2, r3
 8006246:	d307      	bcc.n	8006258 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	619a      	str	r2, [r3, #24]
 8006256:	e002      	b.n	800625e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d12e      	bne.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f006 f85c 	bl	800c32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8102 	bne.w	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006298:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]
 80062c2:	e0de      	b.n	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11f      	bne.n	800630e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 80b4 	bne.w	8006482 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	695a      	ldr	r2, [r3, #20]
 800631e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006322:	441a      	add	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006330:	441a      	add	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a1a      	ldr	r2, [r3, #32]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d309      	bcc.n	8006356 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	621a      	str	r2, [r3, #32]
 8006354:	e015      	b.n	8006382 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800635e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006362:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800636c:	e009      	b.n	8006382 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	643b      	str	r3, [r7, #64]	@ 0x40
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d155      	bne.n	800643c <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	4413      	add	r3, r2
 80063a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	4413      	add	r3, r2
 80063b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d112      	bne.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x45e>
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e044      	b.n	800646e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80063e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e8:	d811      	bhi.n	800640e <HAL_PCD_EP_DB_Transmit+0x488>
 80063ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_PCD_EP_DB_Transmit+0x47a>
 80063fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fc:	3301      	adds	r3, #1
 80063fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29a      	uxth	r2, r3
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e02f      	b.n	800646e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800640e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <HAL_PCD_EP_DB_Transmit+0x49e>
 800641e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006420:	3b01      	subs	r3, #1
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006434:	b29a      	uxth	r2, r3
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e018      	b.n	800646e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d114      	bne.n	800646e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006452:	4413      	add	r3, r2
 8006454:	643b      	str	r3, [r7, #64]	@ 0x40
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645e:	4413      	add	r3, r2
 8006460:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006468:	b29a      	uxth	r2, r3
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6959      	ldr	r1, [r3, #20]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	895a      	ldrh	r2, [r3, #10]
 800647a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647c:	b29b      	uxth	r3, r3
 800647e:	f004 f902 	bl	800a686 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800649c:	82bb      	strh	r3, [r7, #20]
 800649e:	8abb      	ldrh	r3, [r7, #20]
 80064a0:	f083 0310 	eor.w	r3, r3, #16
 80064a4:	82bb      	strh	r3, [r7, #20]
 80064a6:	8abb      	ldrh	r3, [r7, #20]
 80064a8:	f083 0320 	eor.w	r3, r3, #32
 80064ac:	82bb      	strh	r3, [r7, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	8abb      	ldrh	r3, [r7, #20]
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3750      	adds	r7, #80	@ 0x50
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	817b      	strh	r3, [r7, #10]
 80064ea:	4613      	mov	r3, r2
 80064ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e009      	b.n	8006526 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006512:	897a      	ldrh	r2, [r7, #10]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d107      	bne.n	800653c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	b29a      	uxth	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	80da      	strh	r2, [r3, #6]
 800653a:	e00b      	b.n	8006554 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2201      	movs	r2, #1
 8006540:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	b29a      	uxth	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	b29a      	uxth	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e272      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8087 	beq.w	800668e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006580:	4b92      	ldr	r3, [pc, #584]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	2b04      	cmp	r3, #4
 800658a:	d00c      	beq.n	80065a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800658c:	4b8f      	ldr	r3, [pc, #572]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 030c 	and.w	r3, r3, #12
 8006594:	2b08      	cmp	r3, #8
 8006596:	d112      	bne.n	80065be <HAL_RCC_OscConfig+0x5e>
 8006598:	4b8c      	ldr	r3, [pc, #560]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a4:	d10b      	bne.n	80065be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a6:	4b89      	ldr	r3, [pc, #548]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d06c      	beq.n	800668c <HAL_RCC_OscConfig+0x12c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d168      	bne.n	800668c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e24c      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c6:	d106      	bne.n	80065d6 <HAL_RCC_OscConfig+0x76>
 80065c8:	4b80      	ldr	r3, [pc, #512]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7f      	ldr	r2, [pc, #508]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e02e      	b.n	8006634 <HAL_RCC_OscConfig+0xd4>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCC_OscConfig+0x98>
 80065de:	4b7b      	ldr	r3, [pc, #492]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7a      	ldr	r2, [pc, #488]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4b78      	ldr	r3, [pc, #480]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a77      	ldr	r2, [pc, #476]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80065f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e01d      	b.n	8006634 <HAL_RCC_OscConfig+0xd4>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0xbc>
 8006602:	4b72      	ldr	r3, [pc, #456]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a71      	ldr	r2, [pc, #452]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4b6f      	ldr	r3, [pc, #444]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6e      	ldr	r2, [pc, #440]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0xd4>
 800661c:	4b6b      	ldr	r3, [pc, #428]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6a      	ldr	r2, [pc, #424]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	4b68      	ldr	r3, [pc, #416]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a67      	ldr	r2, [pc, #412]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800662e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fd faa6 	bl	8003b8c <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006644:	f7fd faa2 	bl	8003b8c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b64      	cmp	r3, #100	@ 0x64
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e200      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b5d      	ldr	r3, [pc, #372]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0xe4>
 8006662:	e014      	b.n	800668e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fd fa92 	bl	8003b8c <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fd fa8e 	bl	8003b8c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1ec      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	4b53      	ldr	r3, [pc, #332]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x10c>
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d063      	beq.n	8006762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800669a:	4b4c      	ldr	r3, [pc, #304]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066a6:	4b49      	ldr	r3, [pc, #292]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d11c      	bne.n	80066ec <HAL_RCC_OscConfig+0x18c>
 80066b2:	4b46      	ldr	r3, [pc, #280]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d116      	bne.n	80066ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	4b43      	ldr	r3, [pc, #268]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x176>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1c0      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b3d      	ldr	r3, [pc, #244]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4939      	ldr	r1, [pc, #228]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	e03a      	b.n	8006762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f4:	4b36      	ldr	r3, [pc, #216]	@ (80067d0 <HAL_RCC_OscConfig+0x270>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fa:	f7fd fa47 	bl	8003b8c <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006702:	f7fd fa43 	bl	8003b8c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1a1      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	4b2d      	ldr	r3, [pc, #180]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b2a      	ldr	r3, [pc, #168]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4927      	ldr	r1, [pc, #156]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]
 8006734:	e015      	b.n	8006762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b26      	ldr	r3, [pc, #152]	@ (80067d0 <HAL_RCC_OscConfig+0x270>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fd fa26 	bl	8003b8c <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006744:	f7fd fa22 	bl	8003b8c <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e180      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03a      	beq.n	80067e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d019      	beq.n	80067aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b17      	ldr	r3, [pc, #92]	@ (80067d4 <HAL_RCC_OscConfig+0x274>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800677c:	f7fd fa06 	bl	8003b8c <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fd fa02 	bl	8003b8c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e160      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <HAL_RCC_OscConfig+0x26c>)
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067a2:	2001      	movs	r0, #1
 80067a4:	f000 fad8 	bl	8006d58 <RCC_Delay>
 80067a8:	e01c      	b.n	80067e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067aa:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <HAL_RCC_OscConfig+0x274>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b0:	f7fd f9ec 	bl	8003b8c <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b6:	e00f      	b.n	80067d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b8:	f7fd f9e8 	bl	8003b8c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d908      	bls.n	80067d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e146      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000
 80067d0:	42420000 	.word	0x42420000
 80067d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	4b92      	ldr	r3, [pc, #584]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e9      	bne.n	80067b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a6 	beq.w	800693e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	4b88      	ldr	r3, [pc, #544]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4a87      	ldr	r2, [pc, #540]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680c:	61d3      	str	r3, [r2, #28]
 800680e:	4b85      	ldr	r3, [pc, #532]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681e:	4b82      	ldr	r3, [pc, #520]	@ (8006a28 <HAL_RCC_OscConfig+0x4c8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d118      	bne.n	800685c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800682a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a28 <HAL_RCC_OscConfig+0x4c8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a28 <HAL_RCC_OscConfig+0x4c8>)
 8006830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006836:	f7fd f9a9 	bl	8003b8c <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683e:	f7fd f9a5 	bl	8003b8c <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b64      	cmp	r3, #100	@ 0x64
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e103      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006850:	4b75      	ldr	r3, [pc, #468]	@ (8006a28 <HAL_RCC_OscConfig+0x4c8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d106      	bne.n	8006872 <HAL_RCC_OscConfig+0x312>
 8006864:	4b6f      	ldr	r3, [pc, #444]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	4a6e      	ldr	r2, [pc, #440]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800686a:	f043 0301 	orr.w	r3, r3, #1
 800686e:	6213      	str	r3, [r2, #32]
 8006870:	e02d      	b.n	80068ce <HAL_RCC_OscConfig+0x36e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10c      	bne.n	8006894 <HAL_RCC_OscConfig+0x334>
 800687a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4a69      	ldr	r2, [pc, #420]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	6213      	str	r3, [r2, #32]
 8006886:	4b67      	ldr	r3, [pc, #412]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	4a66      	ldr	r2, [pc, #408]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	6213      	str	r3, [r2, #32]
 8006892:	e01c      	b.n	80068ce <HAL_RCC_OscConfig+0x36e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b05      	cmp	r3, #5
 800689a:	d10c      	bne.n	80068b6 <HAL_RCC_OscConfig+0x356>
 800689c:	4b61      	ldr	r3, [pc, #388]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	4a60      	ldr	r2, [pc, #384]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068a2:	f043 0304 	orr.w	r3, r3, #4
 80068a6:	6213      	str	r3, [r2, #32]
 80068a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	6213      	str	r3, [r2, #32]
 80068b4:	e00b      	b.n	80068ce <HAL_RCC_OscConfig+0x36e>
 80068b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	4a5a      	ldr	r2, [pc, #360]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	6213      	str	r3, [r2, #32]
 80068c2:	4b58      	ldr	r3, [pc, #352]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	4a57      	ldr	r2, [pc, #348]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068c8:	f023 0304 	bic.w	r3, r3, #4
 80068cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d015      	beq.n	8006902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d6:	f7fd f959 	bl	8003b8c <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068dc:	e00a      	b.n	80068f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068de:	f7fd f955 	bl	8003b8c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e0b1      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0ee      	beq.n	80068de <HAL_RCC_OscConfig+0x37e>
 8006900:	e014      	b.n	800692c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006902:	f7fd f943 	bl	8003b8c <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006908:	e00a      	b.n	8006920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690a:	f7fd f93f 	bl	8003b8c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006918:	4293      	cmp	r3, r2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e09b      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006920:	4b40      	ldr	r3, [pc, #256]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ee      	bne.n	800690a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006932:	4b3c      	ldr	r3, [pc, #240]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	4a3b      	ldr	r2, [pc, #236]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8087 	beq.w	8006a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006948:	4b36      	ldr	r3, [pc, #216]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b08      	cmp	r3, #8
 8006952:	d061      	beq.n	8006a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d146      	bne.n	80069ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695c:	4b33      	ldr	r3, [pc, #204]	@ (8006a2c <HAL_RCC_OscConfig+0x4cc>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006962:	f7fd f913 	bl	8003b8c <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696a:	f7fd f90f 	bl	8003b8c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e06d      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800697c:	4b29      	ldr	r3, [pc, #164]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f0      	bne.n	800696a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006990:	d108      	bne.n	80069a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006992:	4b24      	ldr	r3, [pc, #144]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4921      	ldr	r1, [pc, #132]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a19      	ldr	r1, [r3, #32]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	430b      	orrs	r3, r1
 80069b6:	491b      	ldr	r1, [pc, #108]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a2c <HAL_RCC_OscConfig+0x4cc>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fd f8e3 	bl	8003b8c <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fd f8df 	bl	8003b8c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e03d      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069dc:	4b11      	ldr	r3, [pc, #68]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x46a>
 80069e8:	e035      	b.n	8006a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <HAL_RCC_OscConfig+0x4cc>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fd f8cc 	bl	8003b8c <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fd f8c8 	bl	8003b8c <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e026      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <HAL_RCC_OscConfig+0x4c4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x498>
 8006a16:	e01e      	b.n	8006a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e019      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
 8006a24:	40021000 	.word	0x40021000
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a30:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <HAL_RCC_OscConfig+0x500>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d106      	bne.n	8006a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d001      	beq.n	8006a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40021000 	.word	0x40021000

08006a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0d0      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a78:	4b6a      	ldr	r3, [pc, #424]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d910      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b67      	ldr	r3, [pc, #412]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 0207 	bic.w	r2, r3, #7
 8006a8e:	4965      	ldr	r1, [pc, #404]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b63      	ldr	r3, [pc, #396]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d001      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0b8      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d020      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac0:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a58      	ldr	r2, [pc, #352]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad8:	4b53      	ldr	r3, [pc, #332]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a52      	ldr	r2, [pc, #328]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ade:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae4:	4b50      	ldr	r3, [pc, #320]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	494d      	ldr	r1, [pc, #308]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d040      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d115      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e07f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b22:	4b41      	ldr	r3, [pc, #260]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e073      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b32:	4b3d      	ldr	r3, [pc, #244]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06b      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b42:	4b39      	ldr	r3, [pc, #228]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f023 0203 	bic.w	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4936      	ldr	r1, [pc, #216]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b54:	f7fd f81a 	bl	8003b8c <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fd f816 	bl	8003b8c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e053      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	4b2d      	ldr	r3, [pc, #180]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f003 020c 	and.w	r2, r3, #12
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d1eb      	bne.n	8006b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b84:	4b27      	ldr	r3, [pc, #156]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d210      	bcs.n	8006bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 0207 	bic.w	r2, r3, #7
 8006b9a:	4922      	ldr	r1, [pc, #136]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e032      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc0:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4916      	ldr	r1, [pc, #88]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	490e      	ldr	r1, [pc, #56]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bf2:	f000 f821 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	490a      	ldr	r1, [pc, #40]	@ (8006c2c <HAL_RCC_ClockConfig+0x1c8>)
 8006c04:	5ccb      	ldrb	r3, [r1, r3]
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	4a09      	ldr	r2, [pc, #36]	@ (8006c30 <HAL_RCC_ClockConfig+0x1cc>)
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c0e:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_ClockConfig+0x1d0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fc ff78 	bl	8003b08 <HAL_InitTick>

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40022000 	.word	0x40022000
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	0800da10 	.word	0x0800da10
 8006c30:	20000028 	.word	0x20000028
 8006c34:	2000002c 	.word	0x2000002c

08006c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c38:	b490      	push	{r4, r7}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006c40:	1d3c      	adds	r4, r7, #4
 8006c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c48:	f240 2301 	movw	r3, #513	@ 0x201
 8006c4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c62:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d002      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x40>
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d003      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0x46>
 8006c76:	e02b      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c78:	4b1c      	ldr	r3, [pc, #112]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8006c7a:	623b      	str	r3, [r7, #32]
      break;
 8006c7c:	e02b      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	0c9b      	lsrs	r3, r3, #18
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	3328      	adds	r3, #40	@ 0x28
 8006c88:	443b      	add	r3, r7
 8006c8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c9a:	4b13      	ldr	r3, [pc, #76]	@ (8006ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	0c5b      	lsrs	r3, r3, #17
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	3328      	adds	r3, #40	@ 0x28
 8006ca6:	443b      	add	r3, r7
 8006ca8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006cac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cb2:	fb03 f202 	mul.w	r2, r3, r2
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbe:	e004      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	623b      	str	r3, [r7, #32]
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cd0:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cd2:	623b      	str	r3, [r7, #32]
      break;
 8006cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	@ 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc90      	pop	{r4, r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	0800d9a8 	.word	0x0800d9a8
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	007a1200 	.word	0x007a1200
 8006cf0:	003d0900 	.word	0x003d0900

08006cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf8:	4b02      	ldr	r3, [pc, #8]	@ (8006d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	20000028 	.word	0x20000028

08006d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d0c:	f7ff fff2 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d10:	4602      	mov	r2, r0
 8006d12:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	4903      	ldr	r1, [pc, #12]	@ (8006d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d1e:	5ccb      	ldrb	r3, [r1, r3]
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	0800da20 	.word	0x0800da20

08006d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d34:	f7ff ffde 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4b05      	ldr	r3, [pc, #20]	@ (8006d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	0adb      	lsrs	r3, r3, #11
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	4903      	ldr	r1, [pc, #12]	@ (8006d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d46:	5ccb      	ldrb	r3, [r1, r3]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40021000 	.word	0x40021000
 8006d54:	0800da20 	.word	0x0800da20

08006d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d60:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <RCC_Delay+0x34>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0a      	ldr	r2, [pc, #40]	@ (8006d90 <RCC_Delay+0x38>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	0a5b      	lsrs	r3, r3, #9
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d74:	bf00      	nop
  }
  while (Delay --);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	60fa      	str	r2, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f9      	bne.n	8006d74 <RCC_Delay+0x1c>
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	20000028 	.word	0x20000028
 8006d90:	10624dd3 	.word	0x10624dd3

08006d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d07d      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006db0:	2300      	movs	r3, #0
 8006db2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db4:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	61d3      	str	r3, [r2, #28]
 8006dcc:	4b49      	ldr	r3, [pc, #292]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ddc:	4b46      	ldr	r3, [pc, #280]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d118      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006de8:	4b43      	ldr	r3, [pc, #268]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a42      	ldr	r2, [pc, #264]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df4:	f7fc feca 	bl	8003b8c <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfa:	e008      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfc:	f7fc fec6 	bl	8003b8c <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b64      	cmp	r3, #100	@ 0x64
 8006e08:	d901      	bls.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e06d      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e1a:	4b36      	ldr	r3, [pc, #216]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02e      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d027      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e38:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e42:	4b2e      	ldr	r3, [pc, #184]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e48:	4b2c      	ldr	r3, [pc, #176]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e4e:	4a29      	ldr	r2, [pc, #164]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d014      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fc fe95 	bl	8003b8c <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e64:	e00a      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fc fe91 	bl	8003b8c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e036      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0ee      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4917      	ldr	r1, [pc, #92]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d105      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea0:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	4a13      	ldr	r2, [pc, #76]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	490b      	ldr	r1, [pc, #44]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4904      	ldr	r1, [pc, #16]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	40007000 	.word	0x40007000
 8006efc:	42420440 	.word	0x42420440

08006f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e076      	b.n	8007000 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f22:	d009      	beq.n	8006f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
 8006f2a:	e005      	b.n	8006f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fc fc50 	bl	80037f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbc:	ea42 0103 	orr.w	r1, r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	0c1a      	lsrs	r2, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f002 0204 	and.w	r2, r2, #4
 8006fde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08c      	sub	sp, #48	@ 0x30
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007016:	2301      	movs	r3, #1
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_SPI_TransmitReceive+0x26>
 800702a:	2302      	movs	r3, #2
 800702c:	e18a      	b.n	8007344 <HAL_SPI_TransmitReceive+0x33c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007036:	f7fc fda9 	bl	8003b8c <HAL_GetTick>
 800703a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800704c:	887b      	ldrh	r3, [r7, #2]
 800704e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007054:	2b01      	cmp	r3, #1
 8007056:	d00f      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x70>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800705e:	d107      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d103      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x68>
 8007068:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800706c:	2b04      	cmp	r3, #4
 800706e:	d003      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007070:	2302      	movs	r3, #2
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007076:	e15b      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_SPI_TransmitReceive+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_TransmitReceive+0x82>
 8007084:	887b      	ldrh	r3, [r7, #2]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007090:	e14e      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b04      	cmp	r3, #4
 800709c:	d003      	beq.n	80070a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2205      	movs	r2, #5
 80070a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	887a      	ldrh	r2, [r7, #2]
 80070b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	887a      	ldrh	r2, [r7, #2]
 80070bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	887a      	ldrh	r2, [r7, #2]
 80070c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	887a      	ldrh	r2, [r7, #2]
 80070ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e6:	2b40      	cmp	r3, #64	@ 0x40
 80070e8:	d007      	beq.n	80070fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007102:	d178      	bne.n	80071f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x10a>
 800710c:	8b7b      	ldrh	r3, [r7, #26]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d166      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007136:	e053      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b02      	cmp	r3, #2
 8007144:	d11b      	bne.n	800717e <HAL_SPI_TransmitReceive+0x176>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <HAL_SPI_TransmitReceive+0x176>
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d113      	bne.n	800717e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b01      	cmp	r3, #1
 800718a:	d119      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x1b8>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d014      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	b292      	uxth	r2, r2
 80071a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a8:	1c9a      	adds	r2, r3, #2
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071bc:	2301      	movs	r3, #1
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071c0:	f7fc fce4 	bl	8003b8c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d807      	bhi.n	80071e0 <HAL_SPI_TransmitReceive+0x1d8>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d003      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80071de:	e0a7      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1a6      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x130>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1a1      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x130>
 80071f4:	e07c      	b.n	80072f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x1fc>
 80071fe:	8b7b      	ldrh	r3, [r7, #26]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d16b      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722a:	e057      	b.n	80072dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b02      	cmp	r3, #2
 8007238:	d11c      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x26c>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d017      	beq.n	8007274 <HAL_SPI_TransmitReceive+0x26c>
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d114      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b01      	cmp	r3, #1
 8007280:	d119      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2ae>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d014      	beq.n	80072b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072b2:	2301      	movs	r3, #1
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072b6:	f7fc fc69 	bl	8003b8c <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d803      	bhi.n	80072ce <HAL_SPI_TransmitReceive+0x2c6>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d102      	bne.n	80072d4 <HAL_SPI_TransmitReceive+0x2cc>
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80072da:	e029      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1a2      	bne.n	800722c <HAL_SPI_TransmitReceive+0x224>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d19d      	bne.n	800722c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f8b1 	bl	800745c <SPI_EndRxTxTransaction>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800730c:	e010      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	e000      	b.n	8007330 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800732e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007340:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007344:	4618      	mov	r0, r3
 8007346:	3730      	adds	r7, #48	@ 0x30
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800735c:	f7fc fc16 	bl	8003b8c <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	4413      	add	r3, r2
 800736a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800736c:	f7fc fc0e 	bl	8003b8c <HAL_GetTick>
 8007370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007372:	4b39      	ldr	r3, [pc, #228]	@ (8007458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	015b      	lsls	r3, r3, #5
 8007378:	0d1b      	lsrs	r3, r3, #20
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007382:	e054      	b.n	800742e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d050      	beq.n	800742e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800738c:	f7fc fbfe 	bl	8003b8c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	429a      	cmp	r2, r3
 800739a:	d902      	bls.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d13d      	bne.n	800741e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073ba:	d111      	bne.n	80073e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c4:	d004      	beq.n	80073d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ce:	d107      	bne.n	80073e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e8:	d10f      	bne.n	800740a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e017      	b.n	800744e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	3b01      	subs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d19b      	bne.n	8007384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000028 	.word	0x20000028

0800745c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	2180      	movs	r1, #128	@ 0x80
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff ff6a 	bl	800734c <SPI_WaitFlagStateUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e000      	b.n	8007490 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e041      	b.n	800752e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fc f9e4 	bl	800388c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f000 fa70 	bl	80079bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e03a      	b.n	80075c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a18      	ldr	r2, [pc, #96]	@ (80075d0 <HAL_TIM_Base_Start_IT+0x98>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00e      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x58>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757a:	d009      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x58>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a14      	ldr	r2, [pc, #80]	@ (80075d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_TIM_Base_Start_IT+0x58>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a13      	ldr	r2, [pc, #76]	@ (80075d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d010      	beq.n	80075c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e007      	b.n	80075c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800

080075dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d122      	bne.n	8007638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d11b      	bne.n	8007638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0202 	mvn.w	r2, #2
 8007608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9b1 	bl	8007986 <HAL_TIM_IC_CaptureCallback>
 8007624:	e005      	b.n	8007632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9a4 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f9b3 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b04      	cmp	r3, #4
 8007644:	d122      	bne.n	800768c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d11b      	bne.n	800768c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0204 	mvn.w	r2, #4
 800765c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f987 	bl	8007986 <HAL_TIM_IC_CaptureCallback>
 8007678:	e005      	b.n	8007686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f97a 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f989 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b08      	cmp	r3, #8
 8007698:	d122      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d11b      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0208 	mvn.w	r2, #8
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2204      	movs	r2, #4
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f95d 	bl	8007986 <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f950 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f95f 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d122      	bne.n	8007734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0210 	mvn.w	r2, #16
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2208      	movs	r2, #8
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f933 	bl	8007986 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f926 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f935 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10e      	bne.n	8007760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d107      	bne.n	8007760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0201 	mvn.w	r2, #1
 8007758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7f9 fa96 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d10e      	bne.n	800778c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007778:	2b80      	cmp	r3, #128	@ 0x80
 800777a:	d107      	bne.n	800778c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa77 	bl	8007c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d10e      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a4:	2b40      	cmp	r3, #64	@ 0x40
 80077a6:	d107      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8f9 	bl	80079aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d10e      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d107      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0220 	mvn.w	r2, #32
 80077dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa42 	bl	8007c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIM_ConfigClockSource+0x18>
 8007800:	2302      	movs	r3, #2
 8007802:	e0b3      	b.n	800796c <HAL_TIM_ConfigClockSource+0x180>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800782a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800783c:	d03e      	beq.n	80078bc <HAL_TIM_ConfigClockSource+0xd0>
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007842:	f200 8087 	bhi.w	8007954 <HAL_TIM_ConfigClockSource+0x168>
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784a:	f000 8085 	beq.w	8007958 <HAL_TIM_ConfigClockSource+0x16c>
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007852:	d87f      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 8007854:	2b70      	cmp	r3, #112	@ 0x70
 8007856:	d01a      	beq.n	800788e <HAL_TIM_ConfigClockSource+0xa2>
 8007858:	2b70      	cmp	r3, #112	@ 0x70
 800785a:	d87b      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 800785c:	2b60      	cmp	r3, #96	@ 0x60
 800785e:	d050      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0x116>
 8007860:	2b60      	cmp	r3, #96	@ 0x60
 8007862:	d877      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 8007864:	2b50      	cmp	r3, #80	@ 0x50
 8007866:	d03c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0xf6>
 8007868:	2b50      	cmp	r3, #80	@ 0x50
 800786a:	d873      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	d058      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x136>
 8007870:	2b40      	cmp	r3, #64	@ 0x40
 8007872:	d86f      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 8007874:	2b30      	cmp	r3, #48	@ 0x30
 8007876:	d064      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x156>
 8007878:	2b30      	cmp	r3, #48	@ 0x30
 800787a:	d86b      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 800787c:	2b20      	cmp	r3, #32
 800787e:	d060      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x156>
 8007880:	2b20      	cmp	r3, #32
 8007882:	d867      	bhi.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05c      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x156>
 8007888:	2b10      	cmp	r3, #16
 800788a:	d05a      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800788c:	e062      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	6899      	ldr	r1, [r3, #8]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f000 f966 	bl	8007b6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	609a      	str	r2, [r3, #8]
      break;
 80078ba:	e04e      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6899      	ldr	r1, [r3, #8]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f000 f94f 	bl	8007b6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078de:	609a      	str	r2, [r3, #8]
      break;
 80078e0:	e03b      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6859      	ldr	r1, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f000 f8c6 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2150      	movs	r1, #80	@ 0x50
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f91d 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007900:	e02b      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	461a      	mov	r2, r3
 8007910:	f000 f8e4 	bl	8007adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2160      	movs	r1, #96	@ 0x60
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f90d 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007920:	e01b      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	461a      	mov	r2, r3
 8007930:	f000 f8a6 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2140      	movs	r1, #64	@ 0x40
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f8fd 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007940:	e00b      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f000 f8f4 	bl	8007b3a <TIM_ITRx_SetConfig>
        break;
 8007952:	e002      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007958:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr

08007986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr

080079aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a29      	ldr	r2, [pc, #164]	@ (8007a74 <TIM_Base_SetConfig+0xb8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00b      	beq.n	80079ec <TIM_Base_SetConfig+0x30>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079da:	d007      	beq.n	80079ec <TIM_Base_SetConfig+0x30>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a26      	ldr	r2, [pc, #152]	@ (8007a78 <TIM_Base_SetConfig+0xbc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_Base_SetConfig+0x30>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a25      	ldr	r2, [pc, #148]	@ (8007a7c <TIM_Base_SetConfig+0xc0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d108      	bne.n	80079fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1c      	ldr	r2, [pc, #112]	@ (8007a74 <TIM_Base_SetConfig+0xb8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_Base_SetConfig+0x62>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0c:	d007      	beq.n	8007a1e <TIM_Base_SetConfig+0x62>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a19      	ldr	r2, [pc, #100]	@ (8007a78 <TIM_Base_SetConfig+0xbc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_Base_SetConfig+0x62>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a18      	ldr	r2, [pc, #96]	@ (8007a7c <TIM_Base_SetConfig+0xc0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a07      	ldr	r2, [pc, #28]	@ (8007a74 <TIM_Base_SetConfig+0xb8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	615a      	str	r2, [r3, #20]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800

08007a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	f023 0210 	bic.w	r2, r3, #16
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	031b      	lsls	r3, r3, #12
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr

08007b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f043 0307 	orr.w	r3, r3, #7
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	609a      	str	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b087      	sub	sp, #28
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	021a      	lsls	r2, r3, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	609a      	str	r2, [r3, #8]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e046      	b.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a16      	ldr	r2, [pc, #88]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00e      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c10:	d009      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a12      	ldr	r2, [pc, #72]	@ (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a10      	ldr	r2, [pc, #64]	@ (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d10c      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800

08007c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr

08007c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e03f      	b.n	8007d1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fb fe0e 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2224      	movs	r2, #36	@ 0x24
 8007cbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9a3 	bl	800801c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	695a      	ldr	r2, [r3, #20]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b08a      	sub	sp, #40	@ 0x28
 8007d2a:	af02      	add	r7, sp, #8
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	603b      	str	r3, [r7, #0]
 8007d32:	4613      	mov	r3, r2
 8007d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d17c      	bne.n	8007e40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_Transmit+0x2c>
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e075      	b.n	8007e42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Transmit+0x3e>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e06e      	b.n	8007e42 <HAL_UART_Transmit+0x11c>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2221      	movs	r2, #33	@ 0x21
 8007d76:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007d7a:	f7fb ff07 	bl	8003b8c <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	88fa      	ldrh	r2, [r7, #6]
 8007d8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d94:	d108      	bne.n	8007da8 <HAL_UART_Transmit+0x82>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	e003      	b.n	8007db0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8007db8:	e02a      	b.n	8007e10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2180      	movs	r1, #128	@ 0x80
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f8df 	bl	8007f88 <UART_WaitOnFlagUntilTimeout>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e036      	b.n	8007e42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	3302      	adds	r3, #2
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	e007      	b.n	8007e02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1cf      	bne.n	8007dba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2140      	movs	r1, #64	@ 0x40
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f8af 	bl	8007f88 <UART_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e006      	b.n	8007e42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
  }
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b08a      	sub	sp, #40	@ 0x28
 8007e4e:	af02      	add	r7, sp, #8
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	603b      	str	r3, [r7, #0]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	f040 8089 	bne.w	8007f7e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_UART_Receive+0x2e>
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e081      	b.n	8007f80 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_UART_Receive+0x40>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e07a      	b.n	8007f80 <HAL_UART_Receive+0x136>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2222      	movs	r2, #34	@ 0x22
 8007e9c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ea0:	f7fb fe74 	bl	8003b8c <HAL_GetTick>
 8007ea4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d108      	bne.n	8007ece <HAL_UART_Receive+0x84>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	e003      	b.n	8007ed6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007ede:	e043      	b.n	8007f68 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2120      	movs	r1, #32
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f84c 	bl	8007f88 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e042      	b.n	8007f80 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	3302      	adds	r3, #2
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	e01f      	b.n	8007f5a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f22:	d007      	beq.n	8007f34 <HAL_UART_Receive+0xea>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <HAL_UART_Receive+0xf8>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	e008      	b.n	8007f54 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	3301      	adds	r3, #1
 8007f58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1b6      	bne.n	8007ee0 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e000      	b.n	8007f80 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007f7e:	2302      	movs	r3, #2
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f98:	e02c      	b.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa0:	d028      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa8:	f7fb fdf0 	bl	8003b8c <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d21d      	bcs.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8007fc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e00f      	b.n	8008014 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	429a      	cmp	r2, r3
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	429a      	cmp	r2, r3
 8008010:	d0c3      	beq.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008056:	f023 030c 	bic.w	r3, r3, #12
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	430b      	orrs	r3, r1
 8008062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a2c      	ldr	r2, [pc, #176]	@ (8008130 <UART_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d103      	bne.n	800808c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe fe54 	bl	8006d30 <HAL_RCC_GetPCLK2Freq>
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	e002      	b.n	8008092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fe fe3c 	bl	8006d08 <HAL_RCC_GetPCLK1Freq>
 8008090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009a      	lsls	r2, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a8:	4a22      	ldr	r2, [pc, #136]	@ (8008134 <UART_SetConfig+0x118>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	0119      	lsls	r1, r3, #4
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009a      	lsls	r2, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008134 <UART_SetConfig+0x118>)
 80080ca:	fba3 0302 	umull	r0, r3, r3, r2
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	2064      	movs	r0, #100	@ 0x64
 80080d2:	fb00 f303 	mul.w	r3, r0, r3
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	3332      	adds	r3, #50	@ 0x32
 80080dc:	4a15      	ldr	r2, [pc, #84]	@ (8008134 <UART_SetConfig+0x118>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e8:	4419      	add	r1, r3
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009a      	lsls	r2, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008100:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <UART_SetConfig+0x118>)
 8008102:	fba3 0302 	umull	r0, r3, r3, r2
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	2064      	movs	r0, #100	@ 0x64
 800810a:	fb00 f303 	mul.w	r3, r0, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	3332      	adds	r3, #50	@ 0x32
 8008114:	4a07      	ldr	r2, [pc, #28]	@ (8008134 <UART_SetConfig+0x118>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	440a      	add	r2, r1
 8008126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40013800 	.word	0x40013800
 8008134:	51eb851f 	.word	0x51eb851f

08008138 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008138:	b084      	sub	sp, #16
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	f107 0014 	add.w	r0, r7, #20
 8008146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	b004      	add	sp, #16
 8008156:	4770      	bx	lr

08008158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008168:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800816c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800818c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008190:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	b29b      	uxth	r3, r3
 800819e:	43db      	mvns	r3, r3
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4013      	ands	r3, r2
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081d0:	b084      	sub	sp, #16
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	f107 0014 	add.w	r0, r7, #20
 80081de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr

08008210 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008210:	b480      	push	{r7}
 8008212:	b09b      	sub	sp, #108	@ 0x6c
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008236:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	78db      	ldrb	r3, [r3, #3]
 800823e:	2b03      	cmp	r3, #3
 8008240:	d81f      	bhi.n	8008282 <USB_ActivateEndpoint+0x72>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <USB_ActivateEndpoint+0x38>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008259 	.word	0x08008259
 800824c:	08008275 	.word	0x08008275
 8008250:	0800828b 	.word	0x0800828b
 8008254:	08008267 	.word	0x08008267
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008258:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800825c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008260:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008264:	e012      	b.n	800828c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008266:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800826a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800826e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008272:	e00b      	b.n	800828c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008274:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008278:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800827c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008280:	e004      	b.n	800828c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008288:	e000      	b.n	800828c <USB_ActivateEndpoint+0x7c>
      break;
 800828a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	441a      	add	r2, r3
 8008296:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800829a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80082de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	7b1b      	ldrb	r3, [r3, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 8149 	bne.w	800858e <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8084 	beq.w	800840e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008310:	b29b      	uxth	r3, r3
 8008312:	461a      	mov	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	4413      	add	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	011a      	lsls	r2, r3, #4
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	88db      	ldrh	r3, [r3, #6]
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	b29b      	uxth	r3, r3
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	81fb      	strh	r3, [r7, #14]
 8008348:	89fb      	ldrh	r3, [r7, #14]
 800834a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <USB_ActivateEndpoint+0x17a>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008368:	81bb      	strh	r3, [r7, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	441a      	add	r2, r3
 8008374:	89bb      	ldrh	r3, [r7, #12]
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800837e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008382:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	78db      	ldrb	r3, [r3, #3]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d020      	beq.n	80083d4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a8:	813b      	strh	r3, [r7, #8]
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	f083 0320 	eor.w	r3, r3, #32
 80083b0:	813b      	strh	r3, [r7, #8]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	441a      	add	r2, r3
 80083bc:	893b      	ldrh	r3, [r7, #8]
 80083be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	8013      	strh	r3, [r2, #0]
 80083d2:	e27f      	b.n	80088d4 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ea:	817b      	strh	r3, [r7, #10]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008408:	b29b      	uxth	r3, r3
 800840a:	8013      	strh	r3, [r2, #0]
 800840c:	e262      	b.n	80088d4 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	4413      	add	r3, r2
 8008420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	011a      	lsls	r2, r3, #4
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	4413      	add	r3, r2
 800842c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	88db      	ldrh	r3, [r3, #6]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800844c:	b29b      	uxth	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	4413      	add	r3, r2
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	011a      	lsls	r2, r3, #4
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	4413      	add	r3, r2
 8008460:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008464:	623b      	str	r3, [r7, #32]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d112      	bne.n	8008494 <USB_ActivateEndpoint+0x284>
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008478:	b29a      	uxth	r2, r3
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	801a      	strh	r2, [r3, #0]
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800848c:	b29a      	uxth	r2, r3
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	801a      	strh	r2, [r3, #0]
 8008492:	e02f      	b.n	80084f4 <USB_ActivateEndpoint+0x2e4>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b3e      	cmp	r3, #62	@ 0x3e
 800849a:	d813      	bhi.n	80084c4 <USB_ActivateEndpoint+0x2b4>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <USB_ActivateEndpoint+0x2a6>
 80084b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b2:	3301      	adds	r3, #1
 80084b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80084b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	029b      	lsls	r3, r3, #10
 80084bc:	b29a      	uxth	r2, r3
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	e017      	b.n	80084f4 <USB_ActivateEndpoint+0x2e4>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <USB_ActivateEndpoint+0x2ce>
 80084d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084da:	3b01      	subs	r3, #1
 80084dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80084de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	83fb      	strh	r3, [r7, #30]
 8008502:	8bfb      	ldrh	r3, [r7, #30]
 8008504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01b      	beq.n	8008544 <USB_ActivateEndpoint+0x334>
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008522:	83bb      	strh	r3, [r7, #28]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	8bbb      	ldrh	r3, [r7, #28]
 8008530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800853c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008540:	b29b      	uxth	r3, r3
 8008542:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855a:	837b      	strh	r3, [r7, #26]
 800855c:	8b7b      	ldrh	r3, [r7, #26]
 800855e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008562:	837b      	strh	r3, [r7, #26]
 8008564:	8b7b      	ldrh	r3, [r7, #26]
 8008566:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800856a:	837b      	strh	r3, [r7, #26]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	441a      	add	r2, r3
 8008576:	8b7b      	ldrh	r3, [r7, #26]
 8008578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]
 800858c:	e1a2      	b.n	80088d4 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	441a      	add	r2, r3
 80085b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80085b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80085c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085da:	4413      	add	r3, r2
 80085dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	011a      	lsls	r2, r3, #4
 80085e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	891b      	ldrh	r3, [r3, #8]
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	653b      	str	r3, [r7, #80]	@ 0x50
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800860e:	4413      	add	r3, r2
 8008610:	653b      	str	r3, [r7, #80]	@ 0x50
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	011a      	lsls	r2, r3, #4
 8008618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800861a:	4413      	add	r3, r2
 800861c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	895b      	ldrh	r3, [r3, #10]
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008630:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8091 	bne.w	800875e <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800864a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800864c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <USB_ActivateEndpoint+0x47c>
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	873b      	strh	r3, [r7, #56]	@ 0x38
 800869a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800869c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01b      	beq.n	80086dc <USB_ActivateEndpoint+0x4cc>
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	441a      	add	r2, r3
 80086c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80086f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80086f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80086fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80086fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008702:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	441a      	add	r2, r3
 800870e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800871c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008720:	b29b      	uxth	r3, r3
 8008722:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]
 800875c:	e0ba      	b.n	80088d4 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800876e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01d      	beq.n	80087b6 <USB_ActivateEndpoint+0x5a6>
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008790:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80087c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80087ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01d      	beq.n	800880e <USB_ActivateEndpoint+0x5fe>
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80087fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008806:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d024      	beq.n	8008860 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800882c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008834:	f083 0320 	eor.w	r3, r3, #32
 8008838:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]
 800885e:	e01d      	b.n	800889c <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008876:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008898:	b29b      	uxth	r3, r3
 800889a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80088c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80088d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80088d8:	4618      	mov	r0, r3
 80088da:	376c      	adds	r7, #108	@ 0x6c
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop

080088e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b08d      	sub	sp, #52	@ 0x34
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	7b1b      	ldrb	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f040 808e 	bne.w	8008a14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d044      	beq.n	800898a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	81bb      	strh	r3, [r7, #12]
 800890e:	89bb      	ldrh	r3, [r7, #12]
 8008910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <USB_DeactivateEndpoint+0x6c>
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892e:	817b      	strh	r3, [r7, #10]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008948:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800894c:	b29b      	uxth	r3, r3
 800894e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008966:	813b      	strh	r3, [r7, #8]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	893b      	ldrh	r3, [r7, #8]
 8008974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800897c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008984:	b29b      	uxth	r3, r3
 8008986:	8013      	strh	r3, [r2, #0]
 8008988:	e192      	b.n	8008cb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	827b      	strh	r3, [r7, #18]
 8008998:	8a7b      	ldrh	r3, [r7, #18]
 800899a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01b      	beq.n	80089da <USB_DeactivateEndpoint+0xf6>
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b8:	823b      	strh	r3, [r7, #16]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	441a      	add	r2, r3
 80089c4:	8a3b      	ldrh	r3, [r7, #16]
 80089c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f0:	81fb      	strh	r3, [r7, #14]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	441a      	add	r2, r3
 80089fc:	89fb      	ldrh	r3, [r7, #14]
 80089fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8013      	strh	r3, [r2, #0]
 8008a12:	e14d      	b.n	8008cb0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 80a5 	bne.w	8008b68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	843b      	strh	r3, [r7, #32]
 8008a2c:	8c3b      	ldrh	r3, [r7, #32]
 8008a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01b      	beq.n	8008a6e <USB_DeactivateEndpoint+0x18a>
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4c:	83fb      	strh	r3, [r7, #30]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	441a      	add	r2, r3
 8008a58:	8bfb      	ldrh	r3, [r7, #30]
 8008a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	83bb      	strh	r3, [r7, #28]
 8008a7c:	8bbb      	ldrh	r3, [r7, #28]
 8008a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01b      	beq.n	8008abe <USB_DeactivateEndpoint+0x1da>
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9c:	837b      	strh	r3, [r7, #26]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8b7b      	ldrh	r3, [r7, #26]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ab6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad4:	833b      	strh	r3, [r7, #24]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	441a      	add	r2, r3
 8008ae0:	8b3b      	ldrh	r3, [r7, #24]
 8008ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0c:	82fb      	strh	r3, [r7, #22]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	441a      	add	r2, r3
 8008b18:	8afb      	ldrh	r3, [r7, #22]
 8008b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b44:	82bb      	strh	r3, [r7, #20]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	441a      	add	r2, r3
 8008b50:	8abb      	ldrh	r3, [r7, #20]
 8008b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	8013      	strh	r3, [r2, #0]
 8008b66:	e0a3      	b.n	8008cb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008b76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01b      	beq.n	8008bb8 <USB_DeactivateEndpoint+0x2d4>
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	441a      	add	r2, r3
 8008ba2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008bc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <USB_DeactivateEndpoint+0x324>
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	441a      	add	r2, r3
 8008bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	441a      	add	r2, r3
 8008c2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	441a      	add	r2, r3
 8008c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	441a      	add	r2, r3
 8008c9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3734      	adds	r7, #52	@ 0x34
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b0c4      	sub	sp, #272	@ 0x110
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cca:	6018      	str	r0, [r3, #0]
 8008ccc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cd4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	785b      	ldrb	r3, [r3, #1]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	f040 86ec 	bne.w	8009ac0 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699a      	ldr	r2, [r3, #24]
 8008cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d908      	bls.n	8008d16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008d14:	e007      	b.n	8008d26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	7b1b      	ldrb	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d142      	bne.n	8008dbc <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6959      	ldr	r1, [r3, #20]
 8008d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d46:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	88da      	ldrh	r2, [r3, #6]
 8008d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8008d58:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f001 fc92 	bl	800a686 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	461a      	mov	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	4413      	add	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	011a      	lsls	r2, r3, #4
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4413      	add	r3, r2
 8008d98:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8008d9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008da0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008db0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	f000 be34 	b.w	8009a24 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008dbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	78db      	ldrb	r3, [r3, #3]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	f040 843b 	bne.w	8009644 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	f240 83b8 	bls.w	800955c <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e12:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	441a      	add	r2, r3
 8008e30:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e3c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 81b4 	beq.w	80091f6 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d16d      	bne.n	8008f86 <USB_EPStartXfer+0x2ca>
 8008eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	4413      	add	r3, r2
 8008ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ed2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	011a      	lsls	r2, r3, #4
 8008edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ede:	4413      	add	r3, r2
 8008ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d112      	bne.n	8008f14 <USB_EPStartXfer+0x258>
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	e05d      	b.n	8008fd0 <USB_EPStartXfer+0x314>
 8008f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f18:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f1a:	d817      	bhi.n	8008f4c <USB_EPStartXfer+0x290>
 8008f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <USB_EPStartXfer+0x280>
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	029b      	lsls	r3, r3, #10
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e041      	b.n	8008fd0 <USB_EPStartXfer+0x314>
 8008f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <USB_EPStartXfer+0x2b0>
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f66:	3b01      	subs	r3, #1
 8008f68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	029b      	lsls	r3, r3, #10
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	e024      	b.n	8008fd0 <USB_EPStartXfer+0x314>
 8008f86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d11c      	bne.n	8008fd0 <USB_EPStartXfer+0x314>
 8008f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	4413      	add	r3, r2
 8008fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fb2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	011a      	lsls	r2, r3, #4
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008fd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	895b      	ldrh	r3, [r3, #10]
 8008fdc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fe4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6959      	ldr	r1, [r3, #20]
 8008fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8008ff6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8008ffa:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	f001 fb41 	bl	800a686 <USB_WritePMA>
            ep->xfer_buff += len;
 8009004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009008:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695a      	ldr	r2, [r3, #20]
 8009010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009014:	441a      	add	r2, r3
 8009016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800901a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009026:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009032:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	429a      	cmp	r2, r3
 800903c:	d90f      	bls.n	800905e <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 800903e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009042:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a1a      	ldr	r2, [r3, #32]
 800904a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009054:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	621a      	str	r2, [r3, #32]
 800905c:	e00e      	b.n	800907c <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 800905e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009062:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 800906e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009072:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2200      	movs	r2, #0
 800907a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800907c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009080:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d16d      	bne.n	8009168 <USB_EPStartXfer+0x4ac>
 800908c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800909c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	011a      	lsls	r2, r3, #4
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d112      	bne.n	80090f6 <USB_EPStartXfer+0x43a>
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80090da:	b29a      	uxth	r2, r3
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	e063      	b.n	80091be <USB_EPStartXfer+0x502>
 80090f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80090fc:	d817      	bhi.n	800912e <USB_EPStartXfer+0x472>
 80090fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d004      	beq.n	800911e <USB_EPStartXfer+0x462>
 8009114:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009118:	3301      	adds	r3, #1
 800911a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800911e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009122:	b29b      	uxth	r3, r3
 8009124:	029b      	lsls	r3, r3, #10
 8009126:	b29a      	uxth	r2, r3
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	801a      	strh	r2, [r3, #0]
 800912c:	e047      	b.n	80091be <USB_EPStartXfer+0x502>
 800912e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <USB_EPStartXfer+0x492>
 8009144:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009148:	3b01      	subs	r3, #1
 800914a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800914e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009152:	b29b      	uxth	r3, r3
 8009154:	029b      	lsls	r3, r3, #10
 8009156:	b29b      	uxth	r3, r3
 8009158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009160:	b29a      	uxth	r2, r3
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	e02a      	b.n	80091be <USB_EPStartXfer+0x502>
 8009168:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800916c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d122      	bne.n	80091be <USB_EPStartXfer+0x502>
 8009178:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800917c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	627b      	str	r3, [r7, #36]	@ 0x24
 8009184:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009192:	b29b      	uxth	r3, r3
 8009194:	461a      	mov	r2, r3
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	4413      	add	r3, r2
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
 800919c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	011a      	lsls	r2, r3, #4
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	4413      	add	r3, r2
 80091ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091b2:	623b      	str	r3, [r7, #32]
 80091b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	891b      	ldrh	r3, [r3, #8]
 80091ca:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6959      	ldr	r1, [r3, #20]
 80091da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091de:	b29b      	uxth	r3, r3
 80091e0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80091e4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80091e8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80091ec:	6800      	ldr	r0, [r0, #0]
 80091ee:	f001 fa4a 	bl	800a686 <USB_WritePMA>
 80091f2:	f000 bc17 	b.w	8009a24 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d16d      	bne.n	80092e2 <USB_EPStartXfer+0x626>
 8009206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800920a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009212:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009220:	b29b      	uxth	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009226:	4413      	add	r3, r2
 8009228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800922a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800922e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	011a      	lsls	r2, r3, #4
 8009238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800923a:	4413      	add	r3, r2
 800923c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d112      	bne.n	8009270 <USB_EPStartXfer+0x5b4>
 800924a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009254:	b29a      	uxth	r2, r3
 8009256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009268:	b29a      	uxth	r2, r3
 800926a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	e063      	b.n	8009338 <USB_EPStartXfer+0x67c>
 8009270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009274:	2b3e      	cmp	r3, #62	@ 0x3e
 8009276:	d817      	bhi.n	80092a8 <USB_EPStartXfer+0x5ec>
 8009278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <USB_EPStartXfer+0x5dc>
 800928e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009292:	3301      	adds	r3, #1
 8009294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800929c:	b29b      	uxth	r3, r3
 800929e:	029b      	lsls	r3, r3, #10
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	e047      	b.n	8009338 <USB_EPStartXfer+0x67c>
 80092a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b6:	f003 031f 	and.w	r3, r3, #31
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d104      	bne.n	80092c8 <USB_EPStartXfer+0x60c>
 80092be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092c2:	3b01      	subs	r3, #1
 80092c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	029b      	lsls	r3, r3, #10
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092da:	b29a      	uxth	r2, r3
 80092dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092de:	801a      	strh	r2, [r3, #0]
 80092e0:	e02a      	b.n	8009338 <USB_EPStartXfer+0x67c>
 80092e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d122      	bne.n	8009338 <USB_EPStartXfer+0x67c>
 80092f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80092fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009302:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800930c:	b29b      	uxth	r3, r3
 800930e:	461a      	mov	r2, r3
 8009310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009312:	4413      	add	r3, r2
 8009314:	657b      	str	r3, [r7, #84]	@ 0x54
 8009316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800931a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	011a      	lsls	r2, r3, #4
 8009324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009326:	4413      	add	r3, r2
 8009328:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800932c:	653b      	str	r3, [r7, #80]	@ 0x50
 800932e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009332:	b29a      	uxth	r2, r3
 8009334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009336:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009338:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800933c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	891b      	ldrh	r3, [r3, #8]
 8009344:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009348:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800934c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6959      	ldr	r1, [r3, #20]
 8009354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009358:	b29b      	uxth	r3, r3
 800935a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800935e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009362:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	f001 f98d 	bl	800a686 <USB_WritePMA>
            ep->xfer_buff += len;
 800936c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009370:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695a      	ldr	r2, [r3, #20]
 8009378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937c:	441a      	add	r2, r3
 800937e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009382:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800938a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800938e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6a1a      	ldr	r2, [r3, #32]
 8009396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800939a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d90f      	bls.n	80093c6 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 80093a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	621a      	str	r2, [r3, #32]
 80093c4:	e00e      	b.n	80093e4 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 80093c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 80093d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d16d      	bne.n	80094dc <USB_EPStartXfer+0x820>
 8009400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009404:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800940c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009410:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800941a:	b29b      	uxth	r3, r3
 800941c:	461a      	mov	r2, r3
 800941e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009420:	4413      	add	r3, r2
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009428:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	011a      	lsls	r2, r3, #4
 8009432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009434:	4413      	add	r3, r2
 8009436:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800943a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800943c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d112      	bne.n	800946a <USB_EPStartXfer+0x7ae>
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800944e:	b29a      	uxth	r2, r3
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29b      	uxth	r3, r3
 800945a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009462:	b29a      	uxth	r2, r3
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	801a      	strh	r2, [r3, #0]
 8009468:	e05d      	b.n	8009526 <USB_EPStartXfer+0x86a>
 800946a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800946e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009470:	d817      	bhi.n	80094a2 <USB_EPStartXfer+0x7e6>
 8009472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800947c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <USB_EPStartXfer+0x7d6>
 8009488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800948c:	3301      	adds	r3, #1
 800948e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009496:	b29b      	uxth	r3, r3
 8009498:	029b      	lsls	r3, r3, #10
 800949a:	b29a      	uxth	r2, r3
 800949c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	e041      	b.n	8009526 <USB_EPStartXfer+0x86a>
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d104      	bne.n	80094c2 <USB_EPStartXfer+0x806>
 80094b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094bc:	3b01      	subs	r3, #1
 80094be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	029b      	lsls	r3, r3, #10
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	e024      	b.n	8009526 <USB_EPStartXfer+0x86a>
 80094dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d11c      	bne.n	8009526 <USB_EPStartXfer+0x86a>
 80094ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009500:	4413      	add	r3, r2
 8009502:	647b      	str	r3, [r7, #68]	@ 0x44
 8009504:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009508:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	011a      	lsls	r2, r3, #4
 8009512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009514:	4413      	add	r3, r2
 8009516:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800951a:	643b      	str	r3, [r7, #64]	@ 0x40
 800951c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009520:	b29a      	uxth	r2, r3
 8009522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009524:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800952a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	895b      	ldrh	r3, [r3, #10]
 8009532:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009536:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800953a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6959      	ldr	r1, [r3, #20]
 8009542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009546:	b29b      	uxth	r3, r3
 8009548:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800954c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009550:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009554:	6800      	ldr	r0, [r0, #0]
 8009556:	f001 f896 	bl	800a686 <USB_WritePMA>
 800955a:	e263      	b.n	8009a24 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800955c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800956c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800957a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800958e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009592:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800959a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	441a      	add	r2, r3
 80095b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80095b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80095d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095e8:	4413      	add	r3, r2
 80095ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80095ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	011a      	lsls	r2, r3, #4
 80095fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095fc:	4413      	add	r3, r2
 80095fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009608:	b29a      	uxth	r2, r3
 800960a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800960c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800960e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009612:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	891b      	ldrh	r3, [r3, #8]
 800961a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800961e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009622:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6959      	ldr	r1, [r3, #20]
 800962a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962e:	b29b      	uxth	r3, r3
 8009630:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009634:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009638:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800963c:	6800      	ldr	r0, [r0, #0]
 800963e:	f001 f822 	bl	800a686 <USB_WritePMA>
 8009642:	e1ef      	b.n	8009a24 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009648:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009652:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80aa 	beq.w	80097c0 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800966c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009670:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009678:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d16d      	bne.n	8009764 <USB_EPStartXfer+0xaa8>
 8009688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800968c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	673b      	str	r3, [r7, #112]	@ 0x70
 8009694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009698:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	461a      	mov	r2, r3
 80096a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096a8:	4413      	add	r3, r2
 80096aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80096ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	011a      	lsls	r2, r3, #4
 80096ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096bc:	4413      	add	r3, r2
 80096be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d112      	bne.n	80096f2 <USB_EPStartXfer+0xa36>
 80096cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ee:	801a      	strh	r2, [r3, #0]
 80096f0:	e05d      	b.n	80097ae <USB_EPStartXfer+0xaf2>
 80096f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80096f8:	d817      	bhi.n	800972a <USB_EPStartXfer+0xa6e>
 80096fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <USB_EPStartXfer+0xa5e>
 8009710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009714:	3301      	adds	r3, #1
 8009716:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800971e:	b29b      	uxth	r3, r3
 8009720:	029b      	lsls	r3, r3, #10
 8009722:	b29a      	uxth	r2, r3
 8009724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e041      	b.n	80097ae <USB_EPStartXfer+0xaf2>
 800972a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <USB_EPStartXfer+0xa8e>
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009744:	3b01      	subs	r3, #1
 8009746:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974e:	b29b      	uxth	r3, r3
 8009750:	029b      	lsls	r3, r3, #10
 8009752:	b29b      	uxth	r3, r3
 8009754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800975c:	b29a      	uxth	r2, r3
 800975e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009760:	801a      	strh	r2, [r3, #0]
 8009762:	e024      	b.n	80097ae <USB_EPStartXfer+0xaf2>
 8009764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d11c      	bne.n	80097ae <USB_EPStartXfer+0xaf2>
 8009774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009782:	b29b      	uxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009788:	4413      	add	r3, r2
 800978a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800978c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009790:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	011a      	lsls	r2, r3, #4
 800979a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979c:	4413      	add	r3, r2
 800979e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80097a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	895b      	ldrh	r3, [r3, #10]
 80097ba:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80097be:	e0b2      	b.n	8009926 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d171      	bne.n	80098b4 <USB_EPStartXfer+0xbf8>
 80097d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097f4:	4413      	add	r3, r2
 80097f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	011a      	lsls	r2, r3, #4
 8009808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800980c:	4413      	add	r3, r2
 800980e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009812:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d112      	bne.n	8009842 <USB_EPStartXfer+0xb86>
 800981c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b29b      	uxth	r3, r3
 8009822:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009826:	b29a      	uxth	r2, r3
 8009828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	b29b      	uxth	r3, r3
 8009832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983a:	b29a      	uxth	r2, r3
 800983c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e069      	b.n	8009916 <USB_EPStartXfer+0xc5a>
 8009842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009846:	2b3e      	cmp	r3, #62	@ 0x3e
 8009848:	d817      	bhi.n	800987a <USB_EPStartXfer+0xbbe>
 800984a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <USB_EPStartXfer+0xbae>
 8009860:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009864:	3301      	adds	r3, #1
 8009866:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800986a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800986e:	b29b      	uxth	r3, r3
 8009870:	029b      	lsls	r3, r3, #10
 8009872:	b29a      	uxth	r2, r3
 8009874:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009876:	801a      	strh	r2, [r3, #0]
 8009878:	e04d      	b.n	8009916 <USB_EPStartXfer+0xc5a>
 800987a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009888:	f003 031f 	and.w	r3, r3, #31
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <USB_EPStartXfer+0xbde>
 8009890:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009894:	3b01      	subs	r3, #1
 8009896:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800989a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800989e:	b29b      	uxth	r3, r3
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	e030      	b.n	8009916 <USB_EPStartXfer+0xc5a>
 80098b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d128      	bne.n	8009916 <USB_EPStartXfer+0xc5a>
 80098c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	461a      	mov	r2, r3
 80098e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098e8:	4413      	add	r3, r2
 80098ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	011a      	lsls	r2, r3, #4
 80098fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009900:	4413      	add	r3, r2
 8009902:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800990a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990e:	b29a      	uxth	r2, r3
 8009910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009914:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009916:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800991a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009926:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800992a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6959      	ldr	r1, [r3, #20]
 8009932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009936:	b29b      	uxth	r3, r3
 8009938:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800993c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009940:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009944:	6800      	ldr	r0, [r0, #0]
 8009946:	f000 fe9e 	bl	800a686 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800994a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800994e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d12e      	bne.n	80099b8 <USB_EPStartXfer+0xcfc>
 800995a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800995e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009968:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009980:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009992:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	441a      	add	r2, r3
 800999e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80099a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	8013      	strh	r3, [r2, #0]
 80099b6:	e035      	b.n	8009a24 <USB_EPStartXfer+0xd68>
 80099b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	785b      	ldrb	r3, [r3, #1]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d12d      	bne.n	8009a24 <USB_EPStartXfer+0xd68>
 80099c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ee:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80099f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	441a      	add	r2, r3
 8009a0c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009a46:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a52:	8013      	strh	r3, [r2, #0]
 8009a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a58:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009a5c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009a60:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009a64:	8812      	ldrh	r2, [r2, #0]
 8009a66:	f082 0210 	eor.w	r2, r2, #16
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a70:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009a74:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009a78:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009a7c:	8812      	ldrh	r2, [r2, #0]
 8009a7e:	f082 0220 	eor.w	r2, r2, #32
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	441a      	add	r2, r3
 8009a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aa2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	8013      	strh	r3, [r2, #0]
 8009abc:	f000 bc9f 	b.w	800a3fe <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ac0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	7b1b      	ldrb	r3, [r3, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 80ae 	bne.w	8009c2e <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ad2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699a      	ldr	r2, [r3, #24]
 8009ade:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d917      	bls.n	8009b1e <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8009aee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 8009afe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	619a      	str	r2, [r3, #24]
 8009b1c:	e00e      	b.n	8009b3c <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8009b1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 8009b2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b60:	4413      	add	r3, r2
 8009b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	011a      	lsls	r2, r3, #4
 8009b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b78:	4413      	add	r3, r2
 8009b7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d116      	bne.n	8009bb8 <USB_EPStartXfer+0xefc>
 8009b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bb4:	801a      	strh	r2, [r3, #0]
 8009bb6:	e3e8      	b.n	800a38a <USB_EPStartXfer+0x16ce>
 8009bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bbe:	d818      	bhi.n	8009bf2 <USB_EPStartXfer+0xf36>
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <USB_EPStartXfer+0xf24>
 8009bd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009bda:	3301      	adds	r3, #1
 8009bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009be0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	029b      	lsls	r3, r3, #10
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	e3cb      	b.n	800a38a <USB_EPStartXfer+0x16ce>
 8009bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c00:	f003 031f 	and.w	r3, r3, #31
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d104      	bne.n	8009c12 <USB_EPStartXfer+0xf56>
 8009c08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	029b      	lsls	r3, r3, #10
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	e3ad      	b.n	800a38a <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	78db      	ldrb	r3, [r3, #3]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	f040 8200 	bne.w	800a040 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 8091 	bne.w	8009d74 <USB_EPStartXfer+0x10b8>
 8009c52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c76:	4413      	add	r3, r2
 8009c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	011a      	lsls	r2, r3, #4
 8009c8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c8e:	4413      	add	r3, r2
 8009c90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d116      	bne.n	8009cd6 <USB_EPStartXfer+0x101a>
 8009ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e083      	b.n	8009dde <USB_EPStartXfer+0x1122>
 8009cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ce4:	d820      	bhi.n	8009d28 <USB_EPStartXfer+0x106c>
 8009ce6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009cf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <USB_EPStartXfer+0x105a>
 8009d0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d10:	3301      	adds	r3, #1
 8009d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	029b      	lsls	r3, r3, #10
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e05a      	b.n	8009dde <USB_EPStartXfer+0x1122>
 8009d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	095b      	lsrs	r3, r3, #5
 8009d36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 031f 	and.w	r3, r3, #31
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d104      	bne.n	8009d58 <USB_EPStartXfer+0x109c>
 8009d4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d52:	3b01      	subs	r3, #1
 8009d54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	029b      	lsls	r3, r3, #10
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	e034      	b.n	8009dde <USB_EPStartXfer+0x1122>
 8009d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d12c      	bne.n	8009dde <USB_EPStartXfer+0x1122>
 8009d84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	461a      	mov	r2, r3
 8009da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009da8:	4413      	add	r3, r2
 8009daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009db2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	011a      	lsls	r2, r3, #4
 8009dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ddc:	801a      	strh	r2, [r3, #0]
 8009dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 8091 	bne.w	8009f20 <USB_EPStartXfer+0x1264>
 8009dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e22:	4413      	add	r3, r2
 8009e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	011a      	lsls	r2, r3, #4
 8009e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d116      	bne.n	8009e82 <USB_EPStartXfer+0x11c6>
 8009e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e66:	801a      	strh	r2, [r3, #0]
 8009e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e7e:	801a      	strh	r2, [r3, #0]
 8009e80:	e07c      	b.n	8009f7c <USB_EPStartXfer+0x12c0>
 8009e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e90:	d820      	bhi.n	8009ed4 <USB_EPStartXfer+0x1218>
 8009e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	085b      	lsrs	r3, r3, #1
 8009ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ea4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ea8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d004      	beq.n	8009ec2 <USB_EPStartXfer+0x1206>
 8009eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	e053      	b.n	8009f7c <USB_EPStartXfer+0x12c0>
 8009ed4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <USB_EPStartXfer+0x1248>
 8009efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009efe:	3b01      	subs	r3, #1
 8009f00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	029b      	lsls	r3, r3, #10
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	e02d      	b.n	8009f7c <USB_EPStartXfer+0x12c0>
 8009f20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d125      	bne.n	8009f7c <USB_EPStartXfer+0x12c0>
 8009f30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f46:	4413      	add	r3, r2
 8009f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	011a      	lsls	r2, r3, #4
 8009f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f5e:	4413      	add	r3, r2
 8009f60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 81fe 	beq.w	800a38a <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <USB_EPStartXfer+0x130a>
 8009fba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10d      	bne.n	8009fe2 <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f040 81db 	bne.w	800a38a <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fd4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 81d4 	bne.w	800a38a <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ff0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a008:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a00c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a01a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	441a      	add	r2, r3
 800a026:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a02a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a02e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a036:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	8013      	strh	r3, [r2, #0]
 800a03e:	e1a4      	b.n	800a38a <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	78db      	ldrb	r3, [r3, #3]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f040 819a 	bne.w	800a386 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a056:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	699a      	ldr	r2, [r3, #24]
 800a05e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a062:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d917      	bls.n	800a09e <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a06e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a072:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a07e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a082:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a094:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	619a      	str	r2, [r3, #24]
 800a09c:	e00e      	b.n	800a0bc <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a09e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a0ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d178      	bne.n	800a1be <USB_EPStartXfer+0x1502>
 800a0cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	011a      	lsls	r2, r3, #4
 800a104:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a108:	4413      	add	r3, r2
 800a10a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a10e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d116      	bne.n	800a148 <USB_EPStartXfer+0x148c>
 800a11a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a126:	b29a      	uxth	r2, r3
 800a128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a12c:	801a      	strh	r2, [r3, #0]
 800a12e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13e:	b29a      	uxth	r2, r3
 800a140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	e06b      	b.n	800a220 <USB_EPStartXfer+0x1564>
 800a148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a14c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a14e:	d818      	bhi.n	800a182 <USB_EPStartXfer+0x14c6>
 800a150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <USB_EPStartXfer+0x14b4>
 800a166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16a:	3301      	adds	r3, #1
 800a16c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a174:	b29b      	uxth	r3, r3
 800a176:	029b      	lsls	r3, r3, #10
 800a178:	b29a      	uxth	r2, r3
 800a17a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e04e      	b.n	800a220 <USB_EPStartXfer+0x1564>
 800a182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a190:	f003 031f 	and.w	r3, r3, #31
 800a194:	2b00      	cmp	r3, #0
 800a196:	d104      	bne.n	800a1a2 <USB_EPStartXfer+0x14e6>
 800a198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19c:	3b01      	subs	r3, #1
 800a19e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	029b      	lsls	r3, r3, #10
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a1ba:	801a      	strh	r2, [r3, #0]
 800a1bc:	e030      	b.n	800a220 <USB_EPStartXfer+0x1564>
 800a1be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d128      	bne.n	800a220 <USB_EPStartXfer+0x1564>
 800a1ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	011a      	lsls	r2, r3, #4
 800a206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a20a:	4413      	add	r3, r2
 800a20c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a210:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a218:	b29a      	uxth	r2, r3
 800a21a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a224:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a22e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a232:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d178      	bne.n	800a330 <USB_EPStartXfer+0x1674>
 800a23e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a242:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a24c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a250:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	461a      	mov	r2, r3
 800a25e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a262:	4413      	add	r3, r2
 800a264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a268:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a26c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	011a      	lsls	r2, r3, #4
 800a276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a27a:	4413      	add	r3, r2
 800a27c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a280:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d116      	bne.n	800a2ba <USB_EPStartXfer+0x15fe>
 800a28c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a298:	b29a      	uxth	r2, r3
 800a29a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a29e:	801a      	strh	r2, [r3, #0]
 800a2a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2b6:	801a      	strh	r2, [r3, #0]
 800a2b8:	e067      	b.n	800a38a <USB_EPStartXfer+0x16ce>
 800a2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2be:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2c0:	d818      	bhi.n	800a2f4 <USB_EPStartXfer+0x1638>
 800a2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a2cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <USB_EPStartXfer+0x1626>
 800a2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2dc:	3301      	adds	r3, #1
 800a2de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a2e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	029b      	lsls	r3, r3, #10
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2f0:	801a      	strh	r2, [r3, #0]
 800a2f2:	e04a      	b.n	800a38a <USB_EPStartXfer+0x16ce>
 800a2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2f8:	095b      	lsrs	r3, r3, #5
 800a2fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a302:	f003 031f 	and.w	r3, r3, #31
 800a306:	2b00      	cmp	r3, #0
 800a308:	d104      	bne.n	800a314 <USB_EPStartXfer+0x1658>
 800a30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a30e:	3b01      	subs	r3, #1
 800a310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a318:	b29b      	uxth	r3, r3
 800a31a:	029b      	lsls	r3, r3, #10
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a326:	b29a      	uxth	r2, r3
 800a328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a32c:	801a      	strh	r2, [r3, #0]
 800a32e:	e02c      	b.n	800a38a <USB_EPStartXfer+0x16ce>
 800a330:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a334:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d124      	bne.n	800a38a <USB_EPStartXfer+0x16ce>
 800a340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a34e:	b29b      	uxth	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a356:	4413      	add	r3, r2
 800a358:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a35c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a360:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	011a      	lsls	r2, r3, #4
 800a36a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a36e:	4413      	add	r3, r2
 800a370:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	e001      	b.n	800a38a <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e03a      	b.n	800a400 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a38a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a38e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a398:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a3b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a3c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3c8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a3cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	441a      	add	r2, r3
 800a3e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b085      	sub	sp, #20
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d020      	beq.n	800a45e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a42e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a432:	81bb      	strh	r3, [r7, #12]
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	f083 0310 	eor.w	r3, r3, #16
 800a43a:	81bb      	strh	r3, [r7, #12]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	441a      	add	r2, r3
 800a446:	89bb      	ldrh	r3, [r7, #12]
 800a448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a44c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a458:	b29b      	uxth	r3, r3
 800a45a:	8013      	strh	r3, [r2, #0]
 800a45c:	e01f      	b.n	800a49e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a474:	81fb      	strh	r3, [r7, #14]
 800a476:	89fb      	ldrh	r3, [r7, #14]
 800a478:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a47c:	81fb      	strh	r3, [r7, #14]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	441a      	add	r2, r3
 800a488:	89fb      	ldrh	r3, [r7, #14]
 800a48a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a48e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr

0800a4aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	7b1b      	ldrb	r3, [r3, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f040 809d 	bne.w	800a5f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	785b      	ldrb	r3, [r3, #1]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d04c      	beq.n	800a560 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	823b      	strh	r3, [r7, #16]
 800a4d4:	8a3b      	ldrh	r3, [r7, #16]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d01b      	beq.n	800a516 <USB_EPClearStall+0x6c>
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f4:	81fb      	strh	r3, [r7, #14]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	441a      	add	r2, r3
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a50a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a512:	b29b      	uxth	r3, r3
 800a514:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	78db      	ldrb	r3, [r3, #3]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d06c      	beq.n	800a5f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a534:	81bb      	strh	r3, [r7, #12]
 800a536:	89bb      	ldrh	r3, [r7, #12]
 800a538:	f083 0320 	eor.w	r3, r3, #32
 800a53c:	81bb      	strh	r3, [r7, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	441a      	add	r2, r3
 800a548:	89bb      	ldrh	r3, [r7, #12]
 800a54a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	8013      	strh	r3, [r2, #0]
 800a55e:	e04b      	b.n	800a5f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	82fb      	strh	r3, [r7, #22]
 800a56e:	8afb      	ldrh	r3, [r7, #22]
 800a570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d01b      	beq.n	800a5b0 <USB_EPClearStall+0x106>
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b29b      	uxth	r3, r3
 800a586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a58e:	82bb      	strh	r3, [r7, #20]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	441a      	add	r2, r3
 800a59a:	8abb      	ldrh	r3, [r7, #20]
 800a59c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5c6:	827b      	strh	r3, [r7, #18]
 800a5c8:	8a7b      	ldrh	r3, [r7, #18]
 800a5ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a5ce:	827b      	strh	r3, [r7, #18]
 800a5d0:	8a7b      	ldrh	r3, [r7, #18]
 800a5d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a5d6:	827b      	strh	r3, [r7, #18]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	8a7b      	ldrh	r3, [r7, #18]
 800a5e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr

0800a604 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d103      	bne.n	800a61e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2280      	movs	r2, #128	@ 0x80
 800a61a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr

0800a62a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr

0800a63e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a63e:	b480      	push	{r7}
 800a640:	b083      	sub	sp, #12
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bc80      	pop	{r7}
 800a650:	4770      	bx	lr

0800a652 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a652:	b480      	push	{r7}
 800a654:	b085      	sub	sp, #20
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a660:	b29b      	uxth	r3, r3
 800a662:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a664:	68fb      	ldr	r3, [r7, #12]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bc80      	pop	{r7}
 800a66e:	4770      	bx	lr

0800a670 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	bc80      	pop	{r7}
 800a684:	4770      	bx	lr

0800a686 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a686:	b480      	push	{r7}
 800a688:	b08d      	sub	sp, #52	@ 0x34
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	4611      	mov	r1, r2
 800a692:	461a      	mov	r2, r3
 800a694:	460b      	mov	r3, r1
 800a696:	80fb      	strh	r3, [r7, #6]
 800a698:	4613      	mov	r3, r2
 800a69a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a69c:	88bb      	ldrh	r3, [r7, #4]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6ac:	88fb      	ldrh	r3, [r7, #6]
 800a6ae:	005a      	lsls	r2, r3, #1
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6be:	e01d      	b.n	800a6fc <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e6:	3302      	adds	r3, #2
 800a6e8:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ec:	3302      	adds	r3, #2
 800a6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800a6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1de      	bne.n	800a6c0 <USB_WritePMA+0x3a>
  }
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	3734      	adds	r7, #52	@ 0x34
 800a708:	46bd      	mov	sp, r7
 800a70a:	bc80      	pop	{r7}
 800a70c:	4770      	bx	lr

0800a70e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a70e:	b480      	push	{r7}
 800a710:	b08b      	sub	sp, #44	@ 0x2c
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	4611      	mov	r1, r2
 800a71a:	461a      	mov	r2, r3
 800a71c:	460b      	mov	r3, r1
 800a71e:	80fb      	strh	r3, [r7, #6]
 800a720:	4613      	mov	r3, r2
 800a722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a724:	88bb      	ldrh	r3, [r7, #4]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	b29b      	uxth	r3, r3
 800a72a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	005a      	lsls	r2, r3, #1
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a740:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
 800a746:	e01b      	b.n	800a780 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	3302      	adds	r3, #2
 800a754:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	3301      	adds	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3301      	adds	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	3302      	adds	r3, #2
 800a778:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77c:	3b01      	subs	r3, #1
 800a77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e0      	bne.n	800a748 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a786:	88bb      	ldrh	r3, [r7, #4]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7a2:	bf00      	nop
 800a7a4:	372c      	adds	r7, #44	@ 0x2c
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7c1b      	ldrb	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d115      	bne.n	800a7f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	2181      	movs	r1, #129	@ 0x81
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 fe90 	bl	800c4f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7dc:	2202      	movs	r2, #2
 800a7de:	2101      	movs	r1, #1
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fe86 	bl	800c4f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a7ee:	e012      	b.n	800a816 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7f0:	2340      	movs	r3, #64	@ 0x40
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	2181      	movs	r1, #129	@ 0x81
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 fe7b 	bl	800c4f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a802:	2340      	movs	r3, #64	@ 0x40
 800a804:	2202      	movs	r2, #2
 800a806:	2101      	movs	r1, #1
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 fe72 	bl	800c4f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a816:	2308      	movs	r3, #8
 800a818:	2203      	movs	r2, #3
 800a81a:	2182      	movs	r1, #130	@ 0x82
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fe68 	bl	800c4f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a828:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a82c:	f001 ff88 	bl	800c740 <USBD_static_malloc>
 800a830:	4602      	mov	r2, r0
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a842:	2301      	movs	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]
 800a846:	e026      	b.n	800a896 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a84e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7c1b      	ldrb	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a87c:	2101      	movs	r1, #1
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 ff28 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800a884:	e007      	b.n	800a896 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a88c:	2340      	movs	r3, #64	@ 0x40
 800a88e:	2101      	movs	r1, #1
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 ff1f 	bl	800c6d4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8b0:	2181      	movs	r1, #129	@ 0x81
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 fe43 	bl	800c53e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 fe3c 	bl	800c53e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8ce:	2182      	movs	r1, #130	@ 0x82
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fe34 	bl	800c53e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00e      	beq.n	800a904 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 ff2e 	bl	800c758 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a91e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a934:	2b00      	cmp	r3, #0
 800a936:	d039      	beq.n	800a9ac <USBD_CDC_Setup+0x9e>
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d17f      	bne.n	800aa3c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	88db      	ldrh	r3, [r3, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d029      	beq.n	800a998 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	b25b      	sxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da11      	bge.n	800a972 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a95a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	88d2      	ldrh	r2, [r2, #6]
 800a960:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a962:	6939      	ldr	r1, [r7, #16]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	88db      	ldrh	r3, [r3, #6]
 800a968:	461a      	mov	r2, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 fa06 	bl	800bd7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a970:	e06b      	b.n	800aa4a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	785a      	ldrb	r2, [r3, #1]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	b2da      	uxtb	r2, r3
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a988:	6939      	ldr	r1, [r7, #16]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	461a      	mov	r2, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 fa21 	bl	800bdd8 <USBD_CtlPrepareRx>
      break;
 800a996:	e058      	b.n	800aa4a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	7850      	ldrb	r0, [r2, #1]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	4798      	blx	r3
      break;
 800a9aa:	e04e      	b.n	800aa4a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b0b      	cmp	r3, #11
 800a9b2:	d02e      	beq.n	800aa12 <USBD_CDC_Setup+0x104>
 800a9b4:	2b0b      	cmp	r3, #11
 800a9b6:	dc38      	bgt.n	800aa2a <USBD_CDC_Setup+0x11c>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <USBD_CDC_Setup+0xb4>
 800a9bc:	2b0a      	cmp	r3, #10
 800a9be:	d014      	beq.n	800a9ea <USBD_CDC_Setup+0xdc>
 800a9c0:	e033      	b.n	800aa2a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d107      	bne.n	800a9dc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9cc:	f107 030c 	add.w	r3, r7, #12
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 f9d1 	bl	800bd7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9da:	e02e      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 f962 	bl	800bca8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	75fb      	strb	r3, [r7, #23]
          break;
 800a9e8:	e027      	b.n	800aa3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d107      	bne.n	800aa04 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9f4:	f107 030f 	add.w	r3, r7, #15
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 f9bd 	bl	800bd7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa02:	e01a      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 f94e 	bl	800bca8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa10:	e013      	b.n	800aa3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d00d      	beq.n	800aa38 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 f942 	bl	800bca8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa24:	2302      	movs	r3, #2
 800aa26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa28:	e006      	b.n	800aa38 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f93b 	bl	800bca8 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa32:	2302      	movs	r3, #2
 800aa34:	75fb      	strb	r3, [r7, #23]
          break;
 800aa36:	e000      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
          break;
 800aa38:	bf00      	nop
      }
      break;
 800aa3a:	e006      	b.n	800aa4a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f932 	bl	800bca8 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa44:	2302      	movs	r3, #2
 800aa46:	75fb      	strb	r3, [r7, #23]
      break;
 800aa48:	bf00      	nop
  }

  return ret;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa6e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d03a      	beq.n	800aaf0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	331c      	adds	r3, #28
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d029      	beq.n	800aae4 <USBD_CDC_DataIn+0x90>
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	440b      	add	r3, r1
 800aa9e:	331c      	adds	r3, #28
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	78f9      	ldrb	r1, [r7, #3]
 800aaa4:	68b8      	ldr	r0, [r7, #8]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	440b      	add	r3, r1
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	4403      	add	r3, r0
 800aab0:	3338      	adds	r3, #56	@ 0x38
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d110      	bne.n	800aae4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aac2:	78fa      	ldrb	r2, [r7, #3]
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	331c      	adds	r3, #28
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aad6:	78f9      	ldrb	r1, [r7, #3]
 800aad8:	2300      	movs	r3, #0
 800aada:	2200      	movs	r2, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fdd6 	bl	800c68e <USBD_LL_Transmit>
 800aae2:	e003      	b.n	800aaec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e000      	b.n	800aaf2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aaf0:	2302      	movs	r3, #2
  }
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fe01 	bl	800c71a <USBD_LL_GetRxDataSize>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00d      	beq.n	800ab46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4798      	blx	r3

    return USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e000      	b.n	800ab48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab46:	2302      	movs	r3, #2
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d014      	beq.n	800ab94 <USBD_CDC_EP0_RxReady+0x44>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab70:	2bff      	cmp	r3, #255	@ 0xff
 800ab72:	d00f      	beq.n	800ab94 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	22ff      	movs	r2, #255	@ 0xff
 800ab90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
	...

0800aba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2243      	movs	r2, #67	@ 0x43
 800abac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abae:	4b03      	ldr	r3, [pc, #12]	@ (800abbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bc80      	pop	{r7}
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	200000bc 	.word	0x200000bc

0800abc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2243      	movs	r2, #67	@ 0x43
 800abcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abce:	4b03      	ldr	r3, [pc, #12]	@ (800abdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000078 	.word	0x20000078

0800abe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2243      	movs	r2, #67	@ 0x43
 800abec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800abee:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000100 	.word	0x20000100

0800ac00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac0e:	4b03      	ldr	r3, [pc, #12]	@ (800ac1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000034 	.word	0x20000034

0800ac20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr

0800ac4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ac6a:	88fa      	ldrh	r2, [r7, #6]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr

0800ac7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bc80      	pop	{r7}
 800aca2:	4770      	bx	lr

0800aca4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d01c      	beq.n	800acf8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d115      	bne.n	800acf4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2181      	movs	r1, #129	@ 0x81
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 fccf 	bl	800c68e <USBD_LL_Transmit>

      return USBD_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	e002      	b.n	800acfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e000      	b.n	800acfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800acf8:	2302      	movs	r3, #2
  }
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d017      	beq.n	800ad4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad2e:	2101      	movs	r1, #1
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 fccf 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800ad36:	e007      	b.n	800ad48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad3e:	2340      	movs	r3, #64	@ 0x40
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 fcc6 	bl	800c6d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e000      	b.n	800ad4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad4c:	2302      	movs	r3, #2
  }
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	4613      	mov	r3, r2
 800ad62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e01a      	b.n	800ada4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	79fa      	ldrb	r2, [r7, #7]
 800ad9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f001 fb33 	bl	800c408 <USBD_LL_Init>

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d006      	beq.n	800adce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
 800adcc:	e001      	b.n	800add2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800adce:	2302      	movs	r3, #2
 800add0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800add2:	7bfb      	ldrb	r3, [r7, #15]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	bc80      	pop	{r7}
 800addc:	4770      	bx	lr

0800adde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 fb68 	bl	800c4bc <USBD_LL_Start>

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bc80      	pop	{r7}
 800ae08:	4770      	bx	lr

0800ae0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae16:	2302      	movs	r3, #2
 800ae18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	4798      	blx	r3

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 fed8 	bl	800bc36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae94:	461a      	mov	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aea2:	f003 031f 	and.w	r3, r3, #31
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d016      	beq.n	800aed8 <USBD_LL_SetupStage+0x6a>
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d81c      	bhi.n	800aee8 <USBD_LL_SetupStage+0x7a>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <USBD_LL_SetupStage+0x4a>
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d008      	beq.n	800aec8 <USBD_LL_SetupStage+0x5a>
 800aeb6:	e017      	b.n	800aee8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f9cb 	bl	800b25c <USBD_StdDevReq>
      break;
 800aec6:	e01a      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fa2d 	bl	800b330 <USBD_StdItfReq>
      break;
 800aed6:	e012      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fa6d 	bl	800b3c0 <USBD_StdEPReq>
      break;
 800aee6:	e00a      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aeee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fb40 	bl	800c57c <USBD_LL_StallEP>
      break;
 800aefc:	bf00      	nop
  }

  return USBD_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	460b      	mov	r3, r1
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d14b      	bne.n	800afb4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d134      	bne.n	800af98 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	429a      	cmp	r2, r3
 800af38:	d919      	bls.n	800af6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af50:	429a      	cmp	r2, r3
 800af52:	d203      	bcs.n	800af5c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af58:	b29b      	uxth	r3, r3
 800af5a:	e002      	b.n	800af62 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af60:	b29b      	uxth	r3, r3
 800af62:	461a      	mov	r2, r3
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 ff54 	bl	800be14 <USBD_CtlContinueRx>
 800af6c:	e038      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af80:	2b03      	cmp	r3, #3
 800af82:	d105      	bne.n	800af90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 ff51 	bl	800be38 <USBD_CtlSendStatus>
 800af96:	e023      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af9e:	2b05      	cmp	r3, #5
 800afa0:	d11e      	bne.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afaa:	2100      	movs	r1, #0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f001 fae5 	bl	800c57c <USBD_LL_StallEP>
 800afb2:	e015      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00d      	beq.n	800afdc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d108      	bne.n	800afdc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	7afa      	ldrb	r2, [r7, #11]
 800afd4:	4611      	mov	r1, r2
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	4798      	blx	r3
 800afda:	e001      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800afdc:	2302      	movs	r3, #2
 800afde:	e000      	b.n	800afe2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b086      	sub	sp, #24
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	460b      	mov	r3, r1
 800aff4:	607a      	str	r2, [r7, #4]
 800aff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d17f      	bne.n	800b0fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3314      	adds	r3, #20
 800b002:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d15c      	bne.n	800b0c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	429a      	cmp	r2, r3
 800b018:	d915      	bls.n	800b046 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f000 febe 	bl	800bdb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b038:	2300      	movs	r3, #0
 800b03a:	2200      	movs	r2, #0
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f001 fb48 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800b044:	e04e      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	6912      	ldr	r2, [r2, #16]
 800b04e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b052:	fb01 f202 	mul.w	r2, r1, r2
 800b056:	1a9b      	subs	r3, r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d11c      	bne.n	800b096 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b064:	429a      	cmp	r2, r3
 800b066:	d316      	bcc.n	800b096 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b072:	429a      	cmp	r2, r3
 800b074:	d20f      	bcs.n	800b096 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b076:	2200      	movs	r2, #0
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fe9a 	bl	800bdb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b088:	2300      	movs	r3, #0
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f001 fb20 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800b094:	e026      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d105      	bne.n	800b0b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0b8:	2180      	movs	r1, #128	@ 0x80
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f001 fa5e 	bl	800c57c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fecc 	bl	800be5e <USBD_CtlReceiveStatus>
 800b0c6:	e00d      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d004      	beq.n	800b0dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d103      	bne.n	800b0e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0dc:	2180      	movs	r1, #128	@ 0x80
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f001 fa4c 	bl	800c57c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d11d      	bne.n	800b12a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fe81 	bl	800adf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b0fc:	e015      	b.n	800b12a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00d      	beq.n	800b126 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b110:	2b03      	cmp	r3, #3
 800b112:	d108      	bne.n	800b126 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	7afa      	ldrb	r2, [r7, #11]
 800b11e:	4611      	mov	r1, r2
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	4798      	blx	r3
 800b124:	e001      	b.n	800b12a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b126:	2302      	movs	r3, #2
 800b128:	e000      	b.n	800b12c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b13c:	2340      	movs	r3, #64	@ 0x40
 800b13e:	2200      	movs	r2, #0
 800b140:	2100      	movs	r1, #0
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f9d5 	bl	800c4f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2240      	movs	r2, #64	@ 0x40
 800b154:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b158:	2340      	movs	r3, #64	@ 0x40
 800b15a:	2200      	movs	r2, #0
 800b15c:	2180      	movs	r1, #128	@ 0x80
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 f9c7 	bl	800c4f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2240      	movs	r2, #64	@ 0x40
 800b16e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d009      	beq.n	800b1ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6852      	ldr	r2, [r2, #4]
 800b1a4:	b2d2      	uxtb	r2, r2
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	4798      	blx	r3
  }

  return USBD_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bc80      	pop	{r7}
 800b1d2:	4770      	bx	lr

0800b1d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bc80      	pop	{r7}
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d105      	bne.n	800b21a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b234:	2b03      	cmp	r3, #3
 800b236:	d10b      	bne.n	800b250 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d005      	beq.n	800b250 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b272:	2b40      	cmp	r3, #64	@ 0x40
 800b274:	d005      	beq.n	800b282 <USBD_StdDevReq+0x26>
 800b276:	2b40      	cmp	r3, #64	@ 0x40
 800b278:	d84f      	bhi.n	800b31a <USBD_StdDevReq+0xbe>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <USBD_StdDevReq+0x36>
 800b27e:	2b20      	cmp	r3, #32
 800b280:	d14b      	bne.n	800b31a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	4798      	blx	r3
      break;
 800b290:	e048      	b.n	800b324 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b09      	cmp	r3, #9
 800b298:	d839      	bhi.n	800b30e <USBD_StdDevReq+0xb2>
 800b29a:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a0 <USBD_StdDevReq+0x44>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b305 	.word	0x0800b305
 800b2a8:	0800b30f 	.word	0x0800b30f
 800b2ac:	0800b2fb 	.word	0x0800b2fb
 800b2b0:	0800b30f 	.word	0x0800b30f
 800b2b4:	0800b2d3 	.word	0x0800b2d3
 800b2b8:	0800b2c9 	.word	0x0800b2c9
 800b2bc:	0800b30f 	.word	0x0800b30f
 800b2c0:	0800b2e7 	.word	0x0800b2e7
 800b2c4:	0800b2dd 	.word	0x0800b2dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9dc 	bl	800b688 <USBD_GetDescriptor>
          break;
 800b2d0:	e022      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fb3f 	bl	800b958 <USBD_SetAddress>
          break;
 800b2da:	e01d      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fb7e 	bl	800b9e0 <USBD_SetConfig>
          break;
 800b2e4:	e018      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fc07 	bl	800bafc <USBD_GetConfig>
          break;
 800b2ee:	e013      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fc37 	bl	800bb66 <USBD_GetStatus>
          break;
 800b2f8:	e00e      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc65 	bl	800bbcc <USBD_SetFeature>
          break;
 800b302:	e009      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc74 	bl	800bbf4 <USBD_ClrFeature>
          break;
 800b30c:	e004      	b.n	800b318 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fcc9 	bl	800bca8 <USBD_CtlError>
          break;
 800b316:	bf00      	nop
      }
      break;
 800b318:	e004      	b.n	800b324 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fcc3 	bl	800bca8 <USBD_CtlError>
      break;
 800b322:	bf00      	nop
  }

  return ret;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop

0800b330 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b346:	2b40      	cmp	r3, #64	@ 0x40
 800b348:	d005      	beq.n	800b356 <USBD_StdItfReq+0x26>
 800b34a:	2b40      	cmp	r3, #64	@ 0x40
 800b34c:	d82e      	bhi.n	800b3ac <USBD_StdItfReq+0x7c>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <USBD_StdItfReq+0x26>
 800b352:	2b20      	cmp	r3, #32
 800b354:	d12a      	bne.n	800b3ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35c:	3b01      	subs	r3, #1
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d81d      	bhi.n	800b39e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	889b      	ldrh	r3, [r3, #4]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d813      	bhi.n	800b394 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	88db      	ldrh	r3, [r3, #6]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d110      	bne.n	800b3a8 <USBD_StdItfReq+0x78>
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10d      	bne.n	800b3a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fd53 	bl	800be38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b392:	e009      	b.n	800b3a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fc86 	bl	800bca8 <USBD_CtlError>
          break;
 800b39c:	e004      	b.n	800b3a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fc81 	bl	800bca8 <USBD_CtlError>
          break;
 800b3a6:	e000      	b.n	800b3aa <USBD_StdItfReq+0x7a>
          break;
 800b3a8:	bf00      	nop
      }
      break;
 800b3aa:	e004      	b.n	800b3b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fc7a 	bl	800bca8 <USBD_CtlError>
      break;
 800b3b4:	bf00      	nop
  }

  return USBD_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	889b      	ldrh	r3, [r3, #4]
 800b3d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3dc:	2b40      	cmp	r3, #64	@ 0x40
 800b3de:	d007      	beq.n	800b3f0 <USBD_StdEPReq+0x30>
 800b3e0:	2b40      	cmp	r3, #64	@ 0x40
 800b3e2:	f200 8146 	bhi.w	800b672 <USBD_StdEPReq+0x2b2>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <USBD_StdEPReq+0x40>
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	f040 8141 	bne.w	800b672 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      break;
 800b3fe:	e13d      	b.n	800b67c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b408:	2b20      	cmp	r3, #32
 800b40a:	d10a      	bne.n	800b422 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	e12d      	b.n	800b67e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b03      	cmp	r3, #3
 800b428:	d007      	beq.n	800b43a <USBD_StdEPReq+0x7a>
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	f300 811b 	bgt.w	800b666 <USBD_StdEPReq+0x2a6>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d072      	beq.n	800b51a <USBD_StdEPReq+0x15a>
 800b434:	2b01      	cmp	r3, #1
 800b436:	d03a      	beq.n	800b4ae <USBD_StdEPReq+0xee>
 800b438:	e115      	b.n	800b666 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b440:	2b02      	cmp	r3, #2
 800b442:	d002      	beq.n	800b44a <USBD_StdEPReq+0x8a>
 800b444:	2b03      	cmp	r3, #3
 800b446:	d015      	beq.n	800b474 <USBD_StdEPReq+0xb4>
 800b448:	e02b      	b.n	800b4a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00c      	beq.n	800b46a <USBD_StdEPReq+0xaa>
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b80      	cmp	r3, #128	@ 0x80
 800b454:	d009      	beq.n	800b46a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 f88e 	bl	800c57c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b460:	2180      	movs	r1, #128	@ 0x80
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f88a 	bl	800c57c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b468:	e020      	b.n	800b4ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc1b 	bl	800bca8 <USBD_CtlError>
              break;
 800b472:	e01b      	b.n	800b4ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	885b      	ldrh	r3, [r3, #2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10e      	bne.n	800b49a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00b      	beq.n	800b49a <USBD_StdEPReq+0xda>
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b80      	cmp	r3, #128	@ 0x80
 800b486:	d008      	beq.n	800b49a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	88db      	ldrh	r3, [r3, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 f871 	bl	800c57c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fccc 	bl	800be38 <USBD_CtlSendStatus>

              break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fbff 	bl	800bca8 <USBD_CtlError>
              break;
 800b4aa:	bf00      	nop
          }
          break;
 800b4ac:	e0e0      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d002      	beq.n	800b4be <USBD_StdEPReq+0xfe>
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d015      	beq.n	800b4e8 <USBD_StdEPReq+0x128>
 800b4bc:	e026      	b.n	800b50c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00c      	beq.n	800b4de <USBD_StdEPReq+0x11e>
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	2b80      	cmp	r3, #128	@ 0x80
 800b4c8:	d009      	beq.n	800b4de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 f854 	bl	800c57c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4d4:	2180      	movs	r1, #128	@ 0x80
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 f850 	bl	800c57c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4dc:	e01c      	b.n	800b518 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fbe1 	bl	800bca8 <USBD_CtlError>
              break;
 800b4e6:	e017      	b.n	800b518 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	885b      	ldrh	r3, [r3, #2]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d112      	bne.n	800b516 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 f85b 	bl	800c5ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fc97 	bl	800be38 <USBD_CtlSendStatus>
              }
              break;
 800b50a:	e004      	b.n	800b516 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fbca 	bl	800bca8 <USBD_CtlError>
              break;
 800b514:	e000      	b.n	800b518 <USBD_StdEPReq+0x158>
              break;
 800b516:	bf00      	nop
          }
          break;
 800b518:	e0aa      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b520:	2b02      	cmp	r3, #2
 800b522:	d002      	beq.n	800b52a <USBD_StdEPReq+0x16a>
 800b524:	2b03      	cmp	r3, #3
 800b526:	d032      	beq.n	800b58e <USBD_StdEPReq+0x1ce>
 800b528:	e097      	b.n	800b65a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d007      	beq.n	800b540 <USBD_StdEPReq+0x180>
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b80      	cmp	r3, #128	@ 0x80
 800b534:	d004      	beq.n	800b540 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fbb5 	bl	800bca8 <USBD_CtlError>
                break;
 800b53e:	e091      	b.n	800b664 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b544:	2b00      	cmp	r3, #0
 800b546:	da0b      	bge.n	800b560 <USBD_StdEPReq+0x1a0>
 800b548:	7bbb      	ldrb	r3, [r7, #14]
 800b54a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b54e:	4613      	mov	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	3310      	adds	r3, #16
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	4413      	add	r3, r2
 800b55c:	3304      	adds	r3, #4
 800b55e:	e00b      	b.n	800b578 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	4413      	add	r3, r2
 800b576:	3304      	adds	r3, #4
 800b578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2202      	movs	r2, #2
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fbf8 	bl	800bd7c <USBD_CtlSendData>
              break;
 800b58c:	e06a      	b.n	800b664 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	da11      	bge.n	800b5ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	f003 020f 	and.w	r2, r3, #15
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	3318      	adds	r3, #24
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d117      	bne.n	800b5e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fb78 	bl	800bca8 <USBD_CtlError>
                  break;
 800b5b8:	e054      	b.n	800b664 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d104      	bne.n	800b5e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fb65 	bl	800bca8 <USBD_CtlError>
                  break;
 800b5de:	e041      	b.n	800b664 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	da0b      	bge.n	800b600 <USBD_StdEPReq+0x240>
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	3310      	adds	r3, #16
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	e00b      	b.n	800b618 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	3304      	adds	r3, #4
 800b618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <USBD_StdEPReq+0x266>
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b80      	cmp	r3, #128	@ 0x80
 800b624:	d103      	bne.n	800b62e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	e00e      	b.n	800b64c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 ffe0 	bl	800c5f8 <USBD_LL_IsStallEP>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e002      	b.n	800b64c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2202      	movs	r2, #2
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fb92 	bl	800bd7c <USBD_CtlSendData>
              break;
 800b658:	e004      	b.n	800b664 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fb23 	bl	800bca8 <USBD_CtlError>
              break;
 800b662:	bf00      	nop
          }
          break;
 800b664:	e004      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fb1d 	bl	800bca8 <USBD_CtlError>
          break;
 800b66e:	bf00      	nop
      }
      break;
 800b670:	e004      	b.n	800b67c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fb17 	bl	800bca8 <USBD_CtlError>
      break;
 800b67a:	bf00      	nop
  }

  return ret;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	885b      	ldrh	r3, [r3, #2]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b06      	cmp	r3, #6
 800b6aa:	f200 8128 	bhi.w	800b8fe <USBD_GetDescriptor+0x276>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <USBD_GetDescriptor+0x2c>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6d1 	.word	0x0800b6d1
 800b6b8:	0800b6e9 	.word	0x0800b6e9
 800b6bc:	0800b729 	.word	0x0800b729
 800b6c0:	0800b8ff 	.word	0x0800b8ff
 800b6c4:	0800b8ff 	.word	0x0800b8ff
 800b6c8:	0800b89f 	.word	0x0800b89f
 800b6cc:	0800b8cb 	.word	0x0800b8cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	7c12      	ldrb	r2, [r2, #16]
 800b6dc:	f107 0108 	add.w	r1, r7, #8
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	4798      	blx	r3
 800b6e4:	60f8      	str	r0, [r7, #12]
      break;
 800b6e6:	e112      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7c1b      	ldrb	r3, [r3, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10d      	bne.n	800b70c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	f107 0208 	add.w	r2, r7, #8
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	2202      	movs	r2, #2
 800b708:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b70a:	e100      	b.n	800b90e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b714:	f107 0208 	add.w	r2, r7, #8
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
 800b71c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3301      	adds	r3, #1
 800b722:	2202      	movs	r2, #2
 800b724:	701a      	strb	r2, [r3, #0]
      break;
 800b726:	e0f2      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	885b      	ldrh	r3, [r3, #2]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b05      	cmp	r3, #5
 800b730:	f200 80ac 	bhi.w	800b88c <USBD_GetDescriptor+0x204>
 800b734:	a201      	add	r2, pc, #4	@ (adr r2, 800b73c <USBD_GetDescriptor+0xb4>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b755 	.word	0x0800b755
 800b740:	0800b789 	.word	0x0800b789
 800b744:	0800b7bd 	.word	0x0800b7bd
 800b748:	0800b7f1 	.word	0x0800b7f1
 800b74c:	0800b825 	.word	0x0800b825
 800b750:	0800b859 	.word	0x0800b859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b776:	e091      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa94 	bl	800bca8 <USBD_CtlError>
            err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
          break;
 800b786:	e089      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7aa:	e077      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa7a 	bl	800bca8 <USBD_CtlError>
            err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ba:	e06f      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7de:	e05d      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa60 	bl	800bca8 <USBD_CtlError>
            err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ee:	e055      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7c12      	ldrb	r2, [r2, #16]
 800b808:	f107 0108 	add.w	r1, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b812:	e043      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa46 	bl	800bca8 <USBD_CtlError>
            err++;
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3301      	adds	r3, #1
 800b820:	72fb      	strb	r3, [r7, #11]
          break;
 800b822:	e03b      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	7c12      	ldrb	r2, [r2, #16]
 800b83c:	f107 0108 	add.w	r1, r7, #8
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b846:	e029      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fa2c 	bl	800bca8 <USBD_CtlError>
            err++;
 800b850:	7afb      	ldrb	r3, [r7, #11]
 800b852:	3301      	adds	r3, #1
 800b854:	72fb      	strb	r3, [r7, #11]
          break;
 800b856:	e021      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	7c12      	ldrb	r2, [r2, #16]
 800b870:	f107 0108 	add.w	r1, r7, #8
 800b874:	4610      	mov	r0, r2
 800b876:	4798      	blx	r3
 800b878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b87a:	e00f      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa12 	bl	800bca8 <USBD_CtlError>
            err++;
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	3301      	adds	r3, #1
 800b888:	72fb      	strb	r3, [r7, #11]
          break;
 800b88a:	e007      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa0a 	bl	800bca8 <USBD_CtlError>
          err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b89a:	e038      	b.n	800b90e <USBD_GetDescriptor+0x286>
 800b89c:	e037      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	7c1b      	ldrb	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ae:	f107 0208 	add.w	r2, r7, #8
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	4798      	blx	r3
 800b8b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8b8:	e029      	b.n	800b90e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f9f3 	bl	800bca8 <USBD_CtlError>
        err++;
 800b8c2:	7afb      	ldrb	r3, [r7, #11]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8c8:	e021      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7c1b      	ldrb	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10d      	bne.n	800b8ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8da:	f107 0208 	add.w	r2, r7, #8
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4798      	blx	r3
 800b8e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	2207      	movs	r2, #7
 800b8ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8ec:	e00f      	b.n	800b90e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9d9 	bl	800bca8 <USBD_CtlError>
        err++;
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8fc:	e007      	b.n	800b90e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f9d1 	bl	800bca8 <USBD_CtlError>
      err++;
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	3301      	adds	r3, #1
 800b90a:	72fb      	strb	r3, [r7, #11]
      break;
 800b90c:	bf00      	nop
  }

  if (err != 0U)
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d11c      	bne.n	800b94e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b914:	893b      	ldrh	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d011      	beq.n	800b93e <USBD_GetDescriptor+0x2b6>
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	88db      	ldrh	r3, [r3, #6]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00d      	beq.n	800b93e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	88da      	ldrh	r2, [r3, #6]
 800b926:	893b      	ldrh	r3, [r7, #8]
 800b928:	4293      	cmp	r3, r2
 800b92a:	bf28      	it	cs
 800b92c:	4613      	movcs	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b932:	893b      	ldrh	r3, [r7, #8]
 800b934:	461a      	mov	r2, r3
 800b936:	68f9      	ldr	r1, [r7, #12]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fa1f 	bl	800bd7c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	88db      	ldrh	r3, [r3, #6]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fa76 	bl	800be38 <USBD_CtlSendStatus>
 800b94c:	e000      	b.n	800b950 <USBD_GetDescriptor+0x2c8>
    return;
 800b94e:	bf00      	nop
    }
  }
}
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop

0800b958 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d130      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d12c      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	2b7f      	cmp	r3, #127	@ 0x7f
 800b978:	d828      	bhi.n	800b9cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	885b      	ldrh	r3, [r3, #2]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d104      	bne.n	800b99a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f988 	bl	800bca8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b998:	e01d      	b.n	800b9d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7bfa      	ldrb	r2, [r7, #15]
 800b99e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fe52 	bl	800c650 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa43 	bl	800be38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c0:	e009      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	e004      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f96a 	bl	800bca8 <USBD_CtlError>
  }
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	885b      	ldrh	r3, [r3, #2]
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	4b41      	ldr	r3, [pc, #260]	@ (800baf8 <USBD_SetConfig+0x118>)
 800b9f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9f4:	4b40      	ldr	r3, [pc, #256]	@ (800baf8 <USBD_SetConfig+0x118>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d904      	bls.n	800ba06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f952 	bl	800bca8 <USBD_CtlError>
 800ba04:	e075      	b.n	800baf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d002      	beq.n	800ba16 <USBD_SetConfig+0x36>
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d023      	beq.n	800ba5c <USBD_SetConfig+0x7c>
 800ba14:	e062      	b.n	800badc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba16:	4b38      	ldr	r3, [pc, #224]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d01a      	beq.n	800ba54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba1e:	4b36      	ldr	r3, [pc, #216]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba30:	4b31      	ldr	r3, [pc, #196]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff f9e7 	bl	800ae0a <USBD_SetClassConfig>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d104      	bne.n	800ba4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f92f 	bl	800bca8 <USBD_CtlError>
            return;
 800ba4a:	e052      	b.n	800baf2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f9f3 	bl	800be38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba52:	e04e      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9ef 	bl	800be38 <USBD_CtlSendStatus>
        break;
 800ba5a:	e04a      	b.n	800baf2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba5c:	4b26      	ldr	r3, [pc, #152]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d112      	bne.n	800ba8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ba6c:	4b22      	ldr	r3, [pc, #136]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	461a      	mov	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba76:	4b20      	ldr	r3, [pc, #128]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff f9e3 	bl	800ae48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f9d8 	bl	800be38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba88:	e033      	b.n	800baf2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba8a:	4b1b      	ldr	r3, [pc, #108]	@ (800baf8 <USBD_SetConfig+0x118>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d01d      	beq.n	800bad4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff f9d1 	bl	800ae48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800baa6:	4b14      	ldr	r3, [pc, #80]	@ (800baf8 <USBD_SetConfig+0x118>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bab0:	4b11      	ldr	r3, [pc, #68]	@ (800baf8 <USBD_SetConfig+0x118>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff f9a7 	bl	800ae0a <USBD_SetClassConfig>
 800babc:	4603      	mov	r3, r0
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d104      	bne.n	800bacc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f8ef 	bl	800bca8 <USBD_CtlError>
            return;
 800baca:	e012      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f9b3 	bl	800be38 <USBD_CtlSendStatus>
        break;
 800bad2:	e00e      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f9af 	bl	800be38 <USBD_CtlSendStatus>
        break;
 800bada:	e00a      	b.n	800baf2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8e2 	bl	800bca8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <USBD_SetConfig+0x118>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff f9ac 	bl	800ae48 <USBD_ClrClassConfig>
        break;
 800baf0:	bf00      	nop
    }
  }
}
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000438 	.word	0x20000438

0800bafc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d004      	beq.n	800bb18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f8c9 	bl	800bca8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb16:	e022      	b.n	800bb5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	dc02      	bgt.n	800bb28 <USBD_GetConfig+0x2c>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc03      	bgt.n	800bb2e <USBD_GetConfig+0x32>
 800bb26:	e015      	b.n	800bb54 <USBD_GetConfig+0x58>
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d00b      	beq.n	800bb44 <USBD_GetConfig+0x48>
 800bb2c:	e012      	b.n	800bb54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3308      	adds	r3, #8
 800bb38:	2201      	movs	r2, #1
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f91d 	bl	800bd7c <USBD_CtlSendData>
        break;
 800bb42:	e00c      	b.n	800bb5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	2201      	movs	r2, #1
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f915 	bl	800bd7c <USBD_CtlSendData>
        break;
 800bb52:	e004      	b.n	800bb5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f8a6 	bl	800bca8 <USBD_CtlError>
        break;
 800bb5c:	bf00      	nop
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb76:	3b01      	subs	r3, #1
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d81e      	bhi.n	800bbba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	88db      	ldrh	r3, [r3, #6]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d004      	beq.n	800bb8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f88e 	bl	800bca8 <USBD_CtlError>
        break;
 800bb8c:	e01a      	b.n	800bbc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f043 0202 	orr.w	r2, r3, #2
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	330c      	adds	r3, #12
 800bbae:	2202      	movs	r2, #2
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f8e2 	bl	800bd7c <USBD_CtlSendData>
      break;
 800bbb8:	e004      	b.n	800bbc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f873 	bl	800bca8 <USBD_CtlError>
      break;
 800bbc2:	bf00      	nop
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d106      	bne.n	800bbec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f926 	bl	800be38 <USBD_CtlSendStatus>
  }
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc04:	3b01      	subs	r3, #1
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d80b      	bhi.n	800bc22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	885b      	ldrh	r3, [r3, #2]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d10c      	bne.n	800bc2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f90c 	bl	800be38 <USBD_CtlSendStatus>
      }
      break;
 800bc20:	e004      	b.n	800bc2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f83f 	bl	800bca8 <USBD_CtlError>
      break;
 800bc2a:	e000      	b.n	800bc2e <USBD_ClrFeature+0x3a>
      break;
 800bc2c:	bf00      	nop
  }
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	785a      	ldrb	r2, [r3, #1]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3302      	adds	r3, #2
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	021b      	lsls	r3, r3, #8
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	4413      	add	r3, r2
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	3305      	adds	r3, #5
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	021b      	lsls	r3, r3, #8
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3306      	adds	r3, #6
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	3307      	adds	r3, #7
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	4413      	add	r3, r2
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	80da      	strh	r2, [r3, #6]

}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr

0800bca8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcb2:	2180      	movs	r1, #128	@ 0x80
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fc61 	bl	800c57c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcba:	2100      	movs	r1, #0
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fc5d 	bl	800c57c <USBD_LL_StallEP>
}
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b086      	sub	sp, #24
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	60f8      	str	r0, [r7, #12]
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d032      	beq.n	800bd46 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f834 	bl	800bd4e <USBD_GetLen>
 800bce6:	4603      	mov	r3, r0
 800bce8:	3301      	adds	r3, #1
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	75fa      	strb	r2, [r7, #23]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4413      	add	r3, r2
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7812      	ldrb	r2, [r2, #0]
 800bd04:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	75fa      	strb	r2, [r7, #23]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	2203      	movs	r2, #3
 800bd14:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd16:	e012      	b.n	800bd3e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	60fa      	str	r2, [r7, #12]
 800bd1e:	7dfa      	ldrb	r2, [r7, #23]
 800bd20:	1c51      	adds	r1, r2, #1
 800bd22:	75f9      	strb	r1, [r7, #23]
 800bd24:	4611      	mov	r1, r2
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	440a      	add	r2, r1
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	75fa      	strb	r2, [r7, #23]
 800bd34:	461a      	mov	r2, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e8      	bne.n	800bd18 <USBD_GetString+0x4e>
    }
  }
}
 800bd46:	bf00      	nop
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd5a:	e005      	b.n	800bd68 <USBD_GetLen+0x1a>
  {
    len++;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3301      	adds	r3, #1
 800bd66:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1f5      	bne.n	800bd5c <USBD_GetLen+0xe>
  }

  return len;
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bc80      	pop	{r7}
 800bd7a:	4770      	bx	lr

0800bd7c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd92:	88fa      	ldrh	r2, [r7, #6]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bd98:	88fa      	ldrh	r2, [r7, #6]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd9e:	88fb      	ldrh	r3, [r7, #6]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	2100      	movs	r1, #0
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 fc72 	bl	800c68e <USBD_LL_Transmit>

  return USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdc2:	88fb      	ldrh	r3, [r7, #6]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fc60 	bl	800c68e <USBD_LL_Transmit>

  return USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2203      	movs	r2, #3
 800bdea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bdee:	88fa      	ldrh	r2, [r7, #6]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bdf6:	88fa      	ldrh	r2, [r7, #6]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdfe:	88fb      	ldrh	r3, [r7, #6]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	2100      	movs	r1, #0
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fc65 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4613      	mov	r3, r2
 800be20:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	2100      	movs	r1, #0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 fc53 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2204      	movs	r2, #4
 800be44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be48:	2300      	movs	r3, #0
 800be4a:	2200      	movs	r2, #0
 800be4c:	2100      	movs	r1, #0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fc1d 	bl	800c68e <USBD_LL_Transmit>

  return USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2205      	movs	r2, #5
 800be6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be6e:	2300      	movs	r3, #0
 800be70:	2200      	movs	r2, #0
 800be72:	2100      	movs	r1, #0
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fc2d 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be88:	2200      	movs	r2, #0
 800be8a:	4912      	ldr	r1, [pc, #72]	@ (800bed4 <MX_USB_DEVICE_Init+0x50>)
 800be8c:	4812      	ldr	r0, [pc, #72]	@ (800bed8 <MX_USB_DEVICE_Init+0x54>)
 800be8e:	f7fe ff62 	bl	800ad56 <USBD_Init>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be98:	f7f7 f998 	bl	80031cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be9c:	490f      	ldr	r1, [pc, #60]	@ (800bedc <MX_USB_DEVICE_Init+0x58>)
 800be9e:	480e      	ldr	r0, [pc, #56]	@ (800bed8 <MX_USB_DEVICE_Init+0x54>)
 800bea0:	f7fe ff84 	bl	800adac <USBD_RegisterClass>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800beaa:	f7f7 f98f 	bl	80031cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beae:	490c      	ldr	r1, [pc, #48]	@ (800bee0 <MX_USB_DEVICE_Init+0x5c>)
 800beb0:	4809      	ldr	r0, [pc, #36]	@ (800bed8 <MX_USB_DEVICE_Init+0x54>)
 800beb2:	f7fe feb5 	bl	800ac20 <USBD_CDC_RegisterInterface>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bebc:	f7f7 f986 	bl	80031cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bec0:	4805      	ldr	r0, [pc, #20]	@ (800bed8 <MX_USB_DEVICE_Init+0x54>)
 800bec2:	f7fe ff8c 	bl	800adde <USBD_Start>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800becc:	f7f7 f97e 	bl	80031cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bed0:	bf00      	nop
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	20000154 	.word	0x20000154
 800bed8:	2000043c 	.word	0x2000043c
 800bedc:	20000040 	.word	0x20000040
 800bee0:	20000144 	.word	0x20000144

0800bee4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bee8:	2200      	movs	r2, #0
 800beea:	4905      	ldr	r1, [pc, #20]	@ (800bf00 <CDC_Init_FS+0x1c>)
 800beec:	4805      	ldr	r0, [pc, #20]	@ (800bf04 <CDC_Init_FS+0x20>)
 800beee:	f7fe fead 	bl	800ac4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bef2:	4905      	ldr	r1, [pc, #20]	@ (800bf08 <CDC_Init_FS+0x24>)
 800bef4:	4803      	ldr	r0, [pc, #12]	@ (800bf04 <CDC_Init_FS+0x20>)
 800bef6:	f7fe fec2 	bl	800ac7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800befa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800befc:	4618      	mov	r0, r3
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	20000ae8 	.word	0x20000ae8
 800bf04:	2000043c 	.word	0x2000043c
 800bf08:	20000700 	.word	0x20000700

0800bf0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc80      	pop	{r7}
 800bf18:	4770      	bx	lr
	...

0800bf1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	6039      	str	r1, [r7, #0]
 800bf26:	71fb      	strb	r3, [r7, #7]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b23      	cmp	r3, #35	@ 0x23
 800bf30:	d84a      	bhi.n	800bfc8 <CDC_Control_FS+0xac>
 800bf32:	a201      	add	r2, pc, #4	@ (adr r2, 800bf38 <CDC_Control_FS+0x1c>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800bfc9 	.word	0x0800bfc9
 800bf3c:	0800bfc9 	.word	0x0800bfc9
 800bf40:	0800bfc9 	.word	0x0800bfc9
 800bf44:	0800bfc9 	.word	0x0800bfc9
 800bf48:	0800bfc9 	.word	0x0800bfc9
 800bf4c:	0800bfc9 	.word	0x0800bfc9
 800bf50:	0800bfc9 	.word	0x0800bfc9
 800bf54:	0800bfc9 	.word	0x0800bfc9
 800bf58:	0800bfc9 	.word	0x0800bfc9
 800bf5c:	0800bfc9 	.word	0x0800bfc9
 800bf60:	0800bfc9 	.word	0x0800bfc9
 800bf64:	0800bfc9 	.word	0x0800bfc9
 800bf68:	0800bfc9 	.word	0x0800bfc9
 800bf6c:	0800bfc9 	.word	0x0800bfc9
 800bf70:	0800bfc9 	.word	0x0800bfc9
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800bfc9 	.word	0x0800bfc9
 800bf7c:	0800bfc9 	.word	0x0800bfc9
 800bf80:	0800bfc9 	.word	0x0800bfc9
 800bf84:	0800bfc9 	.word	0x0800bfc9
 800bf88:	0800bfc9 	.word	0x0800bfc9
 800bf8c:	0800bfc9 	.word	0x0800bfc9
 800bf90:	0800bfc9 	.word	0x0800bfc9
 800bf94:	0800bfc9 	.word	0x0800bfc9
 800bf98:	0800bfc9 	.word	0x0800bfc9
 800bf9c:	0800bfc9 	.word	0x0800bfc9
 800bfa0:	0800bfc9 	.word	0x0800bfc9
 800bfa4:	0800bfc9 	.word	0x0800bfc9
 800bfa8:	0800bfc9 	.word	0x0800bfc9
 800bfac:	0800bfc9 	.word	0x0800bfc9
 800bfb0:	0800bfc9 	.word	0x0800bfc9
 800bfb4:	0800bfc9 	.word	0x0800bfc9
 800bfb8:	0800bfc9 	.word	0x0800bfc9
 800bfbc:	0800bfc9 	.word	0x0800bfc9
 800bfc0:	0800bfc9 	.word	0x0800bfc9
 800bfc4:	0800bfc9 	.word	0x0800bfc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfc8:	bf00      	nop
  }

  return (USBD_OK);
 800bfca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bc80      	pop	{r7}
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop

0800bfd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bfe2:	6879      	ldr	r1, [r7, #4]
 800bfe4:	480a      	ldr	r0, [pc, #40]	@ (800c010 <CDC_Receive_FS+0x38>)
 800bfe6:	f7fe fe4a 	bl	800ac7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bfea:	4809      	ldr	r0, [pc, #36]	@ (800c010 <CDC_Receive_FS+0x38>)
 800bfec:	f7fe fe89 	bl	800ad02 <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	461a      	mov	r2, r3
 800bffe:	4905      	ldr	r1, [pc, #20]	@ (800c014 <CDC_Receive_FS+0x3c>)
 800c000:	4805      	ldr	r0, [pc, #20]	@ (800c018 <CDC_Receive_FS+0x40>)
 800c002:	f000 fc3d 	bl	800c880 <memcpy>
  }
  return (USBD_OK);
 800c006:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	2000043c 	.word	0x2000043c
 800c014:	20000700 	.word	0x20000700
 800c018:	20000350 	.word	0x20000350

0800c01c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c02c:	4b0d      	ldr	r3, [pc, #52]	@ (800c064 <CDC_Transmit_FS+0x48>)
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c032:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c03e:	2301      	movs	r3, #1
 800c040:	e00b      	b.n	800c05a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c042:	887b      	ldrh	r3, [r7, #2]
 800c044:	461a      	mov	r2, r3
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	4806      	ldr	r0, [pc, #24]	@ (800c064 <CDC_Transmit_FS+0x48>)
 800c04a:	f7fe fdff 	bl	800ac4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c04e:	4805      	ldr	r0, [pc, #20]	@ (800c064 <CDC_Transmit_FS+0x48>)
 800c050:	f7fe fe28 	bl	800aca4 <USBD_CDC_TransmitPacket>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c058:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	2000043c 	.word	0x2000043c

0800c068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	6039      	str	r1, [r7, #0]
 800c072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2212      	movs	r2, #18
 800c078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c07a:	4b03      	ldr	r3, [pc, #12]	@ (800c088 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	20000170 	.word	0x20000170

0800c08c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	6039      	str	r1, [r7, #0]
 800c096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	2204      	movs	r2, #4
 800c09c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c09e:	4b03      	ldr	r3, [pc, #12]	@ (800c0ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bc80      	pop	{r7}
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	20000184 	.word	0x20000184

0800c0b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	6039      	str	r1, [r7, #0]
 800c0ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d105      	bne.n	800c0ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	4907      	ldr	r1, [pc, #28]	@ (800c0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0c6:	4808      	ldr	r0, [pc, #32]	@ (800c0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0c8:	f7ff fdff 	bl	800bcca <USBD_GetString>
 800c0cc:	e004      	b.n	800c0d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4904      	ldr	r1, [pc, #16]	@ (800c0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0d2:	4805      	ldr	r0, [pc, #20]	@ (800c0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0d4:	f7ff fdf9 	bl	800bcca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0d8:	4b02      	ldr	r3, [pc, #8]	@ (800c0e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20000ed0 	.word	0x20000ed0
 800c0e8:	0800d9b8 	.word	0x0800d9b8

0800c0ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	6039      	str	r1, [r7, #0]
 800c0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	4904      	ldr	r1, [pc, #16]	@ (800c10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0fc:	4804      	ldr	r0, [pc, #16]	@ (800c110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0fe:	f7ff fde4 	bl	800bcca <USBD_GetString>
  return USBD_StrDesc;
 800c102:	4b02      	ldr	r3, [pc, #8]	@ (800c10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20000ed0 	.word	0x20000ed0
 800c110:	0800d9d0 	.word	0x0800d9d0

0800c114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	6039      	str	r1, [r7, #0]
 800c11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	221a      	movs	r2, #26
 800c124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c126:	f000 f843 	bl	800c1b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c12a:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20000188 	.word	0x20000188

0800c138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	6039      	str	r1, [r7, #0]
 800c142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c144:	79fb      	ldrb	r3, [r7, #7]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d105      	bne.n	800c156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	4907      	ldr	r1, [pc, #28]	@ (800c16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c14e:	4808      	ldr	r0, [pc, #32]	@ (800c170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c150:	f7ff fdbb 	bl	800bcca <USBD_GetString>
 800c154:	e004      	b.n	800c160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	4904      	ldr	r1, [pc, #16]	@ (800c16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c15a:	4805      	ldr	r0, [pc, #20]	@ (800c170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c15c:	f7ff fdb5 	bl	800bcca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c160:	4b02      	ldr	r3, [pc, #8]	@ (800c16c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000ed0 	.word	0x20000ed0
 800c170:	0800d9e4 	.word	0x0800d9e4

0800c174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	6039      	str	r1, [r7, #0]
 800c17e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c180:	79fb      	ldrb	r3, [r7, #7]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d105      	bne.n	800c192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	4907      	ldr	r1, [pc, #28]	@ (800c1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c18a:	4808      	ldr	r0, [pc, #32]	@ (800c1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c18c:	f7ff fd9d 	bl	800bcca <USBD_GetString>
 800c190:	e004      	b.n	800c19c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	4904      	ldr	r1, [pc, #16]	@ (800c1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c196:	4805      	ldr	r0, [pc, #20]	@ (800c1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c198:	f7ff fd97 	bl	800bcca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c19c:	4b02      	ldr	r3, [pc, #8]	@ (800c1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20000ed0 	.word	0x20000ed0
 800c1ac:	0800d9f0 	.word	0x0800d9f0

0800c1b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f4 <Get_SerialNum+0x44>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800c1f8 <Get_SerialNum+0x48>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c1fc <Get_SerialNum+0x4c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	4909      	ldr	r1, [pc, #36]	@ (800c200 <Get_SerialNum+0x50>)
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 f814 	bl	800c208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	4908      	ldr	r1, [pc, #32]	@ (800c204 <Get_SerialNum+0x54>)
 800c1e4:	68b8      	ldr	r0, [r7, #8]
 800c1e6:	f000 f80f 	bl	800c208 <IntToUnicode>
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	1ffff7e8 	.word	0x1ffff7e8
 800c1f8:	1ffff7ec 	.word	0x1ffff7ec
 800c1fc:	1ffff7f0 	.word	0x1ffff7f0
 800c200:	2000018a 	.word	0x2000018a
 800c204:	2000019a 	.word	0x2000019a

0800c208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4613      	mov	r3, r2
 800c214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c21a:	2300      	movs	r3, #0
 800c21c:	75fb      	strb	r3, [r7, #23]
 800c21e:	e027      	b.n	800c270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	0f1b      	lsrs	r3, r3, #28
 800c224:	2b09      	cmp	r3, #9
 800c226:	d80b      	bhi.n	800c240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	0f1b      	lsrs	r3, r3, #28
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4619      	mov	r1, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	440b      	add	r3, r1
 800c238:	3230      	adds	r2, #48	@ 0x30
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]
 800c23e:	e00a      	b.n	800c256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	0f1b      	lsrs	r3, r3, #28
 800c244:	b2da      	uxtb	r2, r3
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4619      	mov	r1, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	440b      	add	r3, r1
 800c250:	3237      	adds	r2, #55	@ 0x37
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	011b      	lsls	r3, r3, #4
 800c25a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	3301      	adds	r3, #1
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4413      	add	r3, r2
 800c266:	2200      	movs	r2, #0
 800c268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	3301      	adds	r3, #1
 800c26e:	75fb      	strb	r3, [r7, #23]
 800c270:	7dfa      	ldrb	r2, [r7, #23]
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	429a      	cmp	r2, r3
 800c276:	d3d3      	bcc.n	800c220 <IntToUnicode+0x18>
  }
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	bc80      	pop	{r7}
 800c282:	4770      	bx	lr

0800c284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0d      	ldr	r2, [pc, #52]	@ (800c2c8 <HAL_PCD_MspInit+0x44>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d113      	bne.n	800c2be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c296:	4b0d      	ldr	r3, [pc, #52]	@ (800c2cc <HAL_PCD_MspInit+0x48>)
 800c298:	69db      	ldr	r3, [r3, #28]
 800c29a:	4a0c      	ldr	r2, [pc, #48]	@ (800c2cc <HAL_PCD_MspInit+0x48>)
 800c29c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c2a0:	61d3      	str	r3, [r2, #28]
 800c2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2cc <HAL_PCD_MspInit+0x48>)
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	2014      	movs	r0, #20
 800c2b4:	f7f7 fd6f 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2b8:	2014      	movs	r0, #20
 800c2ba:	f7f7 fd88 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c2be:	bf00      	nop
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	40005c00 	.word	0x40005c00
 800c2cc:	40021000 	.word	0x40021000

0800c2d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	f7fe fdc1 	bl	800ae6e <USBD_LL_SetupStage>
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	4613      	mov	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	440b      	add	r3, r1
 800c314:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	4619      	mov	r1, r3
 800c31e:	f7fe fdf3 	bl	800af08 <USBD_LL_DataOutStage>
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	460b      	mov	r3, r1
 800c334:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c33c:	78fa      	ldrb	r2, [r7, #3]
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	440b      	add	r3, r1
 800c34a:	333c      	adds	r3, #60	@ 0x3c
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	4619      	mov	r1, r3
 800c352:	f7fe fe4a 	bl	800afea <USBD_LL_DataInStage>
}
 800c356:	bf00      	nop
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b082      	sub	sp, #8
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe ff5a 	bl	800b226 <USBD_LL_SOF>
}
 800c372:	bf00      	nop
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c382:	2301      	movs	r3, #1
 800c384:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d001      	beq.n	800c392 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c38e:	f7f6 ff1d 	bl	80031cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c398:	7bfa      	ldrb	r2, [r7, #15]
 800c39a:	4611      	mov	r1, r2
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe ff0a 	bl	800b1b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe fec3 	bl	800b134 <USBD_LL_Reset>
}
 800c3ae:	bf00      	nop
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe ff04 	bl	800b1d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <HAL_PCD_SuspendCallback+0x30>)
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	4a03      	ldr	r2, [pc, #12]	@ (800c3e8 <HAL_PCD_SuspendCallback+0x30>)
 800c3da:	f043 0306 	orr.w	r3, r3, #6
 800c3de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	e000ed00 	.word	0xe000ed00

0800c3ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fefe 	bl	800b1fc <USBD_LL_Resume>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c410:	4a28      	ldr	r2, [pc, #160]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a26      	ldr	r2, [pc, #152]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c41c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c420:	4b24      	ldr	r3, [pc, #144]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c422:	4a25      	ldr	r2, [pc, #148]	@ (800c4b8 <USBD_LL_Init+0xb0>)
 800c424:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c426:	4b23      	ldr	r3, [pc, #140]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c428:	2208      	movs	r2, #8
 800c42a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c42c:	4b21      	ldr	r3, [pc, #132]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c42e:	2202      	movs	r2, #2
 800c430:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c432:	4b20      	ldr	r3, [pc, #128]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c434:	2200      	movs	r2, #0
 800c436:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c438:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c43e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c440:	2200      	movs	r2, #0
 800c442:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c444:	481b      	ldr	r0, [pc, #108]	@ (800c4b4 <USBD_LL_Init+0xac>)
 800c446:	f7f8 fcfd 	bl	8004e44 <HAL_PCD_Init>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c450:	f7f6 febc 	bl	80031cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c45a:	2318      	movs	r3, #24
 800c45c:	2200      	movs	r2, #0
 800c45e:	2100      	movs	r1, #0
 800c460:	f7fa f83c 	bl	80064dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c46a:	2358      	movs	r3, #88	@ 0x58
 800c46c:	2200      	movs	r2, #0
 800c46e:	2180      	movs	r1, #128	@ 0x80
 800c470:	f7fa f834 	bl	80064dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c47a:	23c0      	movs	r3, #192	@ 0xc0
 800c47c:	2200      	movs	r2, #0
 800c47e:	2181      	movs	r1, #129	@ 0x81
 800c480:	f7fa f82c 	bl	80064dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c48a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c48e:	2200      	movs	r2, #0
 800c490:	2101      	movs	r1, #1
 800c492:	f7fa f823 	bl	80064dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c49c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2182      	movs	r1, #130	@ 0x82
 800c4a4:	f7fa f81a 	bl	80064dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	200010d0 	.word	0x200010d0
 800c4b8:	40005c00 	.word	0x40005c00

0800c4bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f8 fdc1 	bl	800505a <HAL_PCD_Start>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 f94e 	bl	800c780 <USBD_Get_USB_Status>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	461a      	mov	r2, r3
 800c500:	4603      	mov	r3, r0
 800c502:	70fb      	strb	r3, [r7, #3]
 800c504:	460b      	mov	r3, r1
 800c506:	70bb      	strb	r3, [r7, #2]
 800c508:	4613      	mov	r3, r2
 800c50a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c51a:	78bb      	ldrb	r3, [r7, #2]
 800c51c:	883a      	ldrh	r2, [r7, #0]
 800c51e:	78f9      	ldrb	r1, [r7, #3]
 800c520:	f7f8 ff39 	bl	8005396 <HAL_PCD_EP_Open>
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f000 f928 	bl	800c780 <USBD_Get_USB_Status>
 800c530:	4603      	mov	r3, r0
 800c532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c534:	7bbb      	ldrb	r3, [r7, #14]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	460b      	mov	r3, r1
 800c548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c558:	78fa      	ldrb	r2, [r7, #3]
 800c55a:	4611      	mov	r1, r2
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7f8 ff80 	bl	8005462 <HAL_PCD_EP_Close>
 800c562:	4603      	mov	r3, r0
 800c564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c566:	7bfb      	ldrb	r3, [r7, #15]
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 f909 	bl	800c780 <USBD_Get_USB_Status>
 800c56e:	4603      	mov	r3, r0
 800c570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c572:	7bbb      	ldrb	r3, [r7, #14]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c596:	78fa      	ldrb	r2, [r7, #3]
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7f9 f840 	bl	8005620 <HAL_PCD_EP_SetStall>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f8ea 	bl	800c780 <USBD_Get_USB_Status>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b084      	sub	sp, #16
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5d4:	78fa      	ldrb	r2, [r7, #3]
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f9 f881 	bl	80056e0 <HAL_PCD_EP_ClrStall>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 f8cb 	bl	800c780 <USBD_Get_USB_Status>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c60a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c60c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c610:	2b00      	cmp	r3, #0
 800c612:	da0c      	bge.n	800c62e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c614:	78fb      	ldrb	r3, [r7, #3]
 800c616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c61a:	68f9      	ldr	r1, [r7, #12]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	440b      	add	r3, r1
 800c628:	3302      	adds	r3, #2
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	e00b      	b.n	800c646 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c634:	68f9      	ldr	r1, [r7, #12]
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	440b      	add	r3, r1
 800c640:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800c644:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bc80      	pop	{r7}
 800c64e:	4770      	bx	lr

0800c650 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c66a:	78fa      	ldrb	r2, [r7, #3]
 800c66c:	4611      	mov	r1, r2
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f8 fe6c 	bl	800534c <HAL_PCD_SetAddress>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f880 	bl	800c780 <USBD_Get_USB_Status>
 800c680:	4603      	mov	r3, r0
 800c682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c684:	7bbb      	ldrb	r3, [r7, #14]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b086      	sub	sp, #24
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	461a      	mov	r2, r3
 800c69a:	460b      	mov	r3, r1
 800c69c:	72fb      	strb	r3, [r7, #11]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c6b0:	893b      	ldrh	r3, [r7, #8]
 800c6b2:	7af9      	ldrb	r1, [r7, #11]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	f7f8 ff70 	bl	800559a <HAL_PCD_EP_Transmit>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 f85d 	bl	800c780 <USBD_Get_USB_Status>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	607a      	str	r2, [r7, #4]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	72fb      	strb	r3, [r7, #11]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c6f6:	893b      	ldrh	r3, [r7, #8]
 800c6f8:	7af9      	ldrb	r1, [r7, #11]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	f7f8 fef9 	bl	80054f2 <HAL_PCD_EP_Receive>
 800c700:	4603      	mov	r3, r0
 800c702:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f83a 	bl	800c780 <USBD_Get_USB_Status>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c710:	7dbb      	ldrb	r3, [r7, #22]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	460b      	mov	r3, r1
 800c724:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c72c:	78fa      	ldrb	r2, [r7, #3]
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f7f8 ff1b 	bl	800556c <HAL_PCD_EP_GetRxCount>
 800c736:	4603      	mov	r3, r0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c748:	4b02      	ldr	r3, [pc, #8]	@ (800c754 <USBD_static_malloc+0x14>)
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	370c      	adds	r7, #12
 800c74e:	46bd      	mov	sp, r7
 800c750:	bc80      	pop	{r7}
 800c752:	4770      	bx	lr
 800c754:	200013bc 	.word	0x200013bc

0800c758 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]

}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	bc80      	pop	{r7}
 800c768:	4770      	bx	lr

0800c76a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	460b      	mov	r3, r1
 800c774:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bc80      	pop	{r7}
 800c77e:	4770      	bx	lr

0800c780 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c78e:	79fb      	ldrb	r3, [r7, #7]
 800c790:	2b03      	cmp	r3, #3
 800c792:	d817      	bhi.n	800c7c4 <USBD_Get_USB_Status+0x44>
 800c794:	a201      	add	r2, pc, #4	@ (adr r2, 800c79c <USBD_Get_USB_Status+0x1c>)
 800c796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79a:	bf00      	nop
 800c79c:	0800c7ad 	.word	0x0800c7ad
 800c7a0:	0800c7b3 	.word	0x0800c7b3
 800c7a4:	0800c7b9 	.word	0x0800c7b9
 800c7a8:	0800c7bf 	.word	0x0800c7bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b0:	e00b      	b.n	800c7ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b6:	e008      	b.n	800c7ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c7bc:	e005      	b.n	800c7ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7be:	2302      	movs	r3, #2
 800c7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c2:	e002      	b.n	800c7ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c8:	bf00      	nop
  }
  return usb_status;
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bc80      	pop	{r7}
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop

0800c7d8 <siprintf>:
 800c7d8:	b40e      	push	{r1, r2, r3}
 800c7da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c7de:	b500      	push	{lr}
 800c7e0:	b09c      	sub	sp, #112	@ 0x70
 800c7e2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7e4:	9002      	str	r0, [sp, #8]
 800c7e6:	9006      	str	r0, [sp, #24]
 800c7e8:	9107      	str	r1, [sp, #28]
 800c7ea:	9104      	str	r1, [sp, #16]
 800c7ec:	4808      	ldr	r0, [pc, #32]	@ (800c810 <siprintf+0x38>)
 800c7ee:	4909      	ldr	r1, [pc, #36]	@ (800c814 <siprintf+0x3c>)
 800c7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f4:	9105      	str	r1, [sp, #20]
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	a902      	add	r1, sp, #8
 800c7fa:	9301      	str	r3, [sp, #4]
 800c7fc:	f000 f9a0 	bl	800cb40 <_svfiprintf_r>
 800c800:	2200      	movs	r2, #0
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	b01c      	add	sp, #112	@ 0x70
 800c808:	f85d eb04 	ldr.w	lr, [sp], #4
 800c80c:	b003      	add	sp, #12
 800c80e:	4770      	bx	lr
 800c810:	200001a4 	.word	0x200001a4
 800c814:	ffff0208 	.word	0xffff0208

0800c818 <memset>:
 800c818:	4603      	mov	r3, r0
 800c81a:	4402      	add	r2, r0
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d100      	bne.n	800c822 <memset+0xa>
 800c820:	4770      	bx	lr
 800c822:	f803 1b01 	strb.w	r1, [r3], #1
 800c826:	e7f9      	b.n	800c81c <memset+0x4>

0800c828 <__errno>:
 800c828:	4b01      	ldr	r3, [pc, #4]	@ (800c830 <__errno+0x8>)
 800c82a:	6818      	ldr	r0, [r3, #0]
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	200001a4 	.word	0x200001a4

0800c834 <__libc_init_array>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	2600      	movs	r6, #0
 800c838:	4d0c      	ldr	r5, [pc, #48]	@ (800c86c <__libc_init_array+0x38>)
 800c83a:	4c0d      	ldr	r4, [pc, #52]	@ (800c870 <__libc_init_array+0x3c>)
 800c83c:	1b64      	subs	r4, r4, r5
 800c83e:	10a4      	asrs	r4, r4, #2
 800c840:	42a6      	cmp	r6, r4
 800c842:	d109      	bne.n	800c858 <__libc_init_array+0x24>
 800c844:	f000 fc78 	bl	800d138 <_init>
 800c848:	2600      	movs	r6, #0
 800c84a:	4d0a      	ldr	r5, [pc, #40]	@ (800c874 <__libc_init_array+0x40>)
 800c84c:	4c0a      	ldr	r4, [pc, #40]	@ (800c878 <__libc_init_array+0x44>)
 800c84e:	1b64      	subs	r4, r4, r5
 800c850:	10a4      	asrs	r4, r4, #2
 800c852:	42a6      	cmp	r6, r4
 800c854:	d105      	bne.n	800c862 <__libc_init_array+0x2e>
 800c856:	bd70      	pop	{r4, r5, r6, pc}
 800c858:	f855 3b04 	ldr.w	r3, [r5], #4
 800c85c:	4798      	blx	r3
 800c85e:	3601      	adds	r6, #1
 800c860:	e7ee      	b.n	800c840 <__libc_init_array+0xc>
 800c862:	f855 3b04 	ldr.w	r3, [r5], #4
 800c866:	4798      	blx	r3
 800c868:	3601      	adds	r6, #1
 800c86a:	e7f2      	b.n	800c852 <__libc_init_array+0x1e>
 800c86c:	0800da5c 	.word	0x0800da5c
 800c870:	0800da5c 	.word	0x0800da5c
 800c874:	0800da5c 	.word	0x0800da5c
 800c878:	0800da60 	.word	0x0800da60

0800c87c <__retarget_lock_acquire_recursive>:
 800c87c:	4770      	bx	lr

0800c87e <__retarget_lock_release_recursive>:
 800c87e:	4770      	bx	lr

0800c880 <memcpy>:
 800c880:	440a      	add	r2, r1
 800c882:	4291      	cmp	r1, r2
 800c884:	f100 33ff 	add.w	r3, r0, #4294967295
 800c888:	d100      	bne.n	800c88c <memcpy+0xc>
 800c88a:	4770      	bx	lr
 800c88c:	b510      	push	{r4, lr}
 800c88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c892:	4291      	cmp	r1, r2
 800c894:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c898:	d1f9      	bne.n	800c88e <memcpy+0xe>
 800c89a:	bd10      	pop	{r4, pc}

0800c89c <_free_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4605      	mov	r5, r0
 800c8a0:	2900      	cmp	r1, #0
 800c8a2:	d040      	beq.n	800c926 <_free_r+0x8a>
 800c8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a8:	1f0c      	subs	r4, r1, #4
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfb8      	it	lt
 800c8ae:	18e4      	addlt	r4, r4, r3
 800c8b0:	f000 f8de 	bl	800ca70 <__malloc_lock>
 800c8b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c928 <_free_r+0x8c>)
 800c8b6:	6813      	ldr	r3, [r2, #0]
 800c8b8:	b933      	cbnz	r3, 800c8c8 <_free_r+0x2c>
 800c8ba:	6063      	str	r3, [r4, #4]
 800c8bc:	6014      	str	r4, [r2, #0]
 800c8be:	4628      	mov	r0, r5
 800c8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c4:	f000 b8da 	b.w	800ca7c <__malloc_unlock>
 800c8c8:	42a3      	cmp	r3, r4
 800c8ca:	d908      	bls.n	800c8de <_free_r+0x42>
 800c8cc:	6820      	ldr	r0, [r4, #0]
 800c8ce:	1821      	adds	r1, r4, r0
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf01      	itttt	eq
 800c8d4:	6819      	ldreq	r1, [r3, #0]
 800c8d6:	685b      	ldreq	r3, [r3, #4]
 800c8d8:	1809      	addeq	r1, r1, r0
 800c8da:	6021      	streq	r1, [r4, #0]
 800c8dc:	e7ed      	b.n	800c8ba <_free_r+0x1e>
 800c8de:	461a      	mov	r2, r3
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	b10b      	cbz	r3, 800c8e8 <_free_r+0x4c>
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	d9fa      	bls.n	800c8de <_free_r+0x42>
 800c8e8:	6811      	ldr	r1, [r2, #0]
 800c8ea:	1850      	adds	r0, r2, r1
 800c8ec:	42a0      	cmp	r0, r4
 800c8ee:	d10b      	bne.n	800c908 <_free_r+0x6c>
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	4401      	add	r1, r0
 800c8f4:	1850      	adds	r0, r2, r1
 800c8f6:	4283      	cmp	r3, r0
 800c8f8:	6011      	str	r1, [r2, #0]
 800c8fa:	d1e0      	bne.n	800c8be <_free_r+0x22>
 800c8fc:	6818      	ldr	r0, [r3, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4408      	add	r0, r1
 800c902:	6010      	str	r0, [r2, #0]
 800c904:	6053      	str	r3, [r2, #4]
 800c906:	e7da      	b.n	800c8be <_free_r+0x22>
 800c908:	d902      	bls.n	800c910 <_free_r+0x74>
 800c90a:	230c      	movs	r3, #12
 800c90c:	602b      	str	r3, [r5, #0]
 800c90e:	e7d6      	b.n	800c8be <_free_r+0x22>
 800c910:	6820      	ldr	r0, [r4, #0]
 800c912:	1821      	adds	r1, r4, r0
 800c914:	428b      	cmp	r3, r1
 800c916:	bf01      	itttt	eq
 800c918:	6819      	ldreq	r1, [r3, #0]
 800c91a:	685b      	ldreq	r3, [r3, #4]
 800c91c:	1809      	addeq	r1, r1, r0
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	6063      	str	r3, [r4, #4]
 800c922:	6054      	str	r4, [r2, #4]
 800c924:	e7cb      	b.n	800c8be <_free_r+0x22>
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20001720 	.word	0x20001720

0800c92c <sbrk_aligned>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4e0f      	ldr	r6, [pc, #60]	@ (800c96c <sbrk_aligned+0x40>)
 800c930:	460c      	mov	r4, r1
 800c932:	6831      	ldr	r1, [r6, #0]
 800c934:	4605      	mov	r5, r0
 800c936:	b911      	cbnz	r1, 800c93e <sbrk_aligned+0x12>
 800c938:	f000 fbaa 	bl	800d090 <_sbrk_r>
 800c93c:	6030      	str	r0, [r6, #0]
 800c93e:	4621      	mov	r1, r4
 800c940:	4628      	mov	r0, r5
 800c942:	f000 fba5 	bl	800d090 <_sbrk_r>
 800c946:	1c43      	adds	r3, r0, #1
 800c948:	d103      	bne.n	800c952 <sbrk_aligned+0x26>
 800c94a:	f04f 34ff 	mov.w	r4, #4294967295
 800c94e:	4620      	mov	r0, r4
 800c950:	bd70      	pop	{r4, r5, r6, pc}
 800c952:	1cc4      	adds	r4, r0, #3
 800c954:	f024 0403 	bic.w	r4, r4, #3
 800c958:	42a0      	cmp	r0, r4
 800c95a:	d0f8      	beq.n	800c94e <sbrk_aligned+0x22>
 800c95c:	1a21      	subs	r1, r4, r0
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 fb96 	bl	800d090 <_sbrk_r>
 800c964:	3001      	adds	r0, #1
 800c966:	d1f2      	bne.n	800c94e <sbrk_aligned+0x22>
 800c968:	e7ef      	b.n	800c94a <sbrk_aligned+0x1e>
 800c96a:	bf00      	nop
 800c96c:	2000171c 	.word	0x2000171c

0800c970 <_malloc_r>:
 800c970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c974:	1ccd      	adds	r5, r1, #3
 800c976:	f025 0503 	bic.w	r5, r5, #3
 800c97a:	3508      	adds	r5, #8
 800c97c:	2d0c      	cmp	r5, #12
 800c97e:	bf38      	it	cc
 800c980:	250c      	movcc	r5, #12
 800c982:	2d00      	cmp	r5, #0
 800c984:	4606      	mov	r6, r0
 800c986:	db01      	blt.n	800c98c <_malloc_r+0x1c>
 800c988:	42a9      	cmp	r1, r5
 800c98a:	d904      	bls.n	800c996 <_malloc_r+0x26>
 800c98c:	230c      	movs	r3, #12
 800c98e:	6033      	str	r3, [r6, #0]
 800c990:	2000      	movs	r0, #0
 800c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca6c <_malloc_r+0xfc>
 800c99a:	f000 f869 	bl	800ca70 <__malloc_lock>
 800c99e:	f8d8 3000 	ldr.w	r3, [r8]
 800c9a2:	461c      	mov	r4, r3
 800c9a4:	bb44      	cbnz	r4, 800c9f8 <_malloc_r+0x88>
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff ffbf 	bl	800c92c <sbrk_aligned>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	d158      	bne.n	800ca66 <_malloc_r+0xf6>
 800c9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c9b8:	4627      	mov	r7, r4
 800c9ba:	2f00      	cmp	r7, #0
 800c9bc:	d143      	bne.n	800ca46 <_malloc_r+0xd6>
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d04b      	beq.n	800ca5a <_malloc_r+0xea>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	eb04 0903 	add.w	r9, r4, r3
 800c9cc:	f000 fb60 	bl	800d090 <_sbrk_r>
 800c9d0:	4581      	cmp	r9, r0
 800c9d2:	d142      	bne.n	800ca5a <_malloc_r+0xea>
 800c9d4:	6821      	ldr	r1, [r4, #0]
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	1a6d      	subs	r5, r5, r1
 800c9da:	4629      	mov	r1, r5
 800c9dc:	f7ff ffa6 	bl	800c92c <sbrk_aligned>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d03a      	beq.n	800ca5a <_malloc_r+0xea>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	442b      	add	r3, r5
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	bb62      	cbnz	r2, 800ca4c <_malloc_r+0xdc>
 800c9f2:	f8c8 7000 	str.w	r7, [r8]
 800c9f6:	e00f      	b.n	800ca18 <_malloc_r+0xa8>
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	1b52      	subs	r2, r2, r5
 800c9fc:	d420      	bmi.n	800ca40 <_malloc_r+0xd0>
 800c9fe:	2a0b      	cmp	r2, #11
 800ca00:	d917      	bls.n	800ca32 <_malloc_r+0xc2>
 800ca02:	1961      	adds	r1, r4, r5
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	6025      	str	r5, [r4, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	6059      	strne	r1, [r3, #4]
 800ca0c:	6863      	ldr	r3, [r4, #4]
 800ca0e:	bf08      	it	eq
 800ca10:	f8c8 1000 	streq.w	r1, [r8]
 800ca14:	5162      	str	r2, [r4, r5]
 800ca16:	604b      	str	r3, [r1, #4]
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 f82f 	bl	800ca7c <__malloc_unlock>
 800ca1e:	f104 000b 	add.w	r0, r4, #11
 800ca22:	1d23      	adds	r3, r4, #4
 800ca24:	f020 0007 	bic.w	r0, r0, #7
 800ca28:	1ac2      	subs	r2, r0, r3
 800ca2a:	bf1c      	itt	ne
 800ca2c:	1a1b      	subne	r3, r3, r0
 800ca2e:	50a3      	strne	r3, [r4, r2]
 800ca30:	e7af      	b.n	800c992 <_malloc_r+0x22>
 800ca32:	6862      	ldr	r2, [r4, #4]
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	bf0c      	ite	eq
 800ca38:	f8c8 2000 	streq.w	r2, [r8]
 800ca3c:	605a      	strne	r2, [r3, #4]
 800ca3e:	e7eb      	b.n	800ca18 <_malloc_r+0xa8>
 800ca40:	4623      	mov	r3, r4
 800ca42:	6864      	ldr	r4, [r4, #4]
 800ca44:	e7ae      	b.n	800c9a4 <_malloc_r+0x34>
 800ca46:	463c      	mov	r4, r7
 800ca48:	687f      	ldr	r7, [r7, #4]
 800ca4a:	e7b6      	b.n	800c9ba <_malloc_r+0x4a>
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	42a3      	cmp	r3, r4
 800ca52:	d1fb      	bne.n	800ca4c <_malloc_r+0xdc>
 800ca54:	2300      	movs	r3, #0
 800ca56:	6053      	str	r3, [r2, #4]
 800ca58:	e7de      	b.n	800ca18 <_malloc_r+0xa8>
 800ca5a:	230c      	movs	r3, #12
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	6033      	str	r3, [r6, #0]
 800ca60:	f000 f80c 	bl	800ca7c <__malloc_unlock>
 800ca64:	e794      	b.n	800c990 <_malloc_r+0x20>
 800ca66:	6005      	str	r5, [r0, #0]
 800ca68:	e7d6      	b.n	800ca18 <_malloc_r+0xa8>
 800ca6a:	bf00      	nop
 800ca6c:	20001720 	.word	0x20001720

0800ca70 <__malloc_lock>:
 800ca70:	4801      	ldr	r0, [pc, #4]	@ (800ca78 <__malloc_lock+0x8>)
 800ca72:	f7ff bf03 	b.w	800c87c <__retarget_lock_acquire_recursive>
 800ca76:	bf00      	nop
 800ca78:	20001718 	.word	0x20001718

0800ca7c <__malloc_unlock>:
 800ca7c:	4801      	ldr	r0, [pc, #4]	@ (800ca84 <__malloc_unlock+0x8>)
 800ca7e:	f7ff befe 	b.w	800c87e <__retarget_lock_release_recursive>
 800ca82:	bf00      	nop
 800ca84:	20001718 	.word	0x20001718

0800ca88 <__ssputs_r>:
 800ca88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	461f      	mov	r7, r3
 800ca8e:	688e      	ldr	r6, [r1, #8]
 800ca90:	4682      	mov	sl, r0
 800ca92:	42be      	cmp	r6, r7
 800ca94:	460c      	mov	r4, r1
 800ca96:	4690      	mov	r8, r2
 800ca98:	680b      	ldr	r3, [r1, #0]
 800ca9a:	d82d      	bhi.n	800caf8 <__ssputs_r+0x70>
 800ca9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800caa4:	d026      	beq.n	800caf4 <__ssputs_r+0x6c>
 800caa6:	6965      	ldr	r5, [r4, #20]
 800caa8:	6909      	ldr	r1, [r1, #16]
 800caaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caae:	eba3 0901 	sub.w	r9, r3, r1
 800cab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cab6:	1c7b      	adds	r3, r7, #1
 800cab8:	444b      	add	r3, r9
 800caba:	106d      	asrs	r5, r5, #1
 800cabc:	429d      	cmp	r5, r3
 800cabe:	bf38      	it	cc
 800cac0:	461d      	movcc	r5, r3
 800cac2:	0553      	lsls	r3, r2, #21
 800cac4:	d527      	bpl.n	800cb16 <__ssputs_r+0x8e>
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7ff ff52 	bl	800c970 <_malloc_r>
 800cacc:	4606      	mov	r6, r0
 800cace:	b360      	cbz	r0, 800cb2a <__ssputs_r+0xa2>
 800cad0:	464a      	mov	r2, r9
 800cad2:	6921      	ldr	r1, [r4, #16]
 800cad4:	f7ff fed4 	bl	800c880 <memcpy>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	6126      	str	r6, [r4, #16]
 800cae6:	444e      	add	r6, r9
 800cae8:	6026      	str	r6, [r4, #0]
 800caea:	463e      	mov	r6, r7
 800caec:	6165      	str	r5, [r4, #20]
 800caee:	eba5 0509 	sub.w	r5, r5, r9
 800caf2:	60a5      	str	r5, [r4, #8]
 800caf4:	42be      	cmp	r6, r7
 800caf6:	d900      	bls.n	800cafa <__ssputs_r+0x72>
 800caf8:	463e      	mov	r6, r7
 800cafa:	4632      	mov	r2, r6
 800cafc:	4641      	mov	r1, r8
 800cafe:	6820      	ldr	r0, [r4, #0]
 800cb00:	f000 faac 	bl	800d05c <memmove>
 800cb04:	2000      	movs	r0, #0
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	1b9b      	subs	r3, r3, r6
 800cb0a:	60a3      	str	r3, [r4, #8]
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	4433      	add	r3, r6
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb16:	462a      	mov	r2, r5
 800cb18:	f000 fad8 	bl	800d0cc <_realloc_r>
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1e0      	bne.n	800cae4 <__ssputs_r+0x5c>
 800cb22:	4650      	mov	r0, sl
 800cb24:	6921      	ldr	r1, [r4, #16]
 800cb26:	f7ff feb9 	bl	800c89c <_free_r>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	f8ca 3000 	str.w	r3, [sl]
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	f04f 30ff 	mov.w	r0, #4294967295
 800cb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb3a:	81a3      	strh	r3, [r4, #12]
 800cb3c:	e7e9      	b.n	800cb12 <__ssputs_r+0x8a>
	...

0800cb40 <_svfiprintf_r>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	4698      	mov	r8, r3
 800cb46:	898b      	ldrh	r3, [r1, #12]
 800cb48:	4607      	mov	r7, r0
 800cb4a:	061b      	lsls	r3, r3, #24
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	4614      	mov	r4, r2
 800cb50:	b09d      	sub	sp, #116	@ 0x74
 800cb52:	d510      	bpl.n	800cb76 <_svfiprintf_r+0x36>
 800cb54:	690b      	ldr	r3, [r1, #16]
 800cb56:	b973      	cbnz	r3, 800cb76 <_svfiprintf_r+0x36>
 800cb58:	2140      	movs	r1, #64	@ 0x40
 800cb5a:	f7ff ff09 	bl	800c970 <_malloc_r>
 800cb5e:	6028      	str	r0, [r5, #0]
 800cb60:	6128      	str	r0, [r5, #16]
 800cb62:	b930      	cbnz	r0, 800cb72 <_svfiprintf_r+0x32>
 800cb64:	230c      	movs	r3, #12
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	b01d      	add	sp, #116	@ 0x74
 800cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb72:	2340      	movs	r3, #64	@ 0x40
 800cb74:	616b      	str	r3, [r5, #20]
 800cb76:	2300      	movs	r3, #0
 800cb78:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb7a:	2320      	movs	r3, #32
 800cb7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb80:	2330      	movs	r3, #48	@ 0x30
 800cb82:	f04f 0901 	mov.w	r9, #1
 800cb86:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb8a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cd24 <_svfiprintf_r+0x1e4>
 800cb8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb92:	4623      	mov	r3, r4
 800cb94:	469a      	mov	sl, r3
 800cb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb9a:	b10a      	cbz	r2, 800cba0 <_svfiprintf_r+0x60>
 800cb9c:	2a25      	cmp	r2, #37	@ 0x25
 800cb9e:	d1f9      	bne.n	800cb94 <_svfiprintf_r+0x54>
 800cba0:	ebba 0b04 	subs.w	fp, sl, r4
 800cba4:	d00b      	beq.n	800cbbe <_svfiprintf_r+0x7e>
 800cba6:	465b      	mov	r3, fp
 800cba8:	4622      	mov	r2, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4638      	mov	r0, r7
 800cbae:	f7ff ff6b 	bl	800ca88 <__ssputs_r>
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	f000 80a7 	beq.w	800cd06 <_svfiprintf_r+0x1c6>
 800cbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbba:	445a      	add	r2, fp
 800cbbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 809f 	beq.w	800cd06 <_svfiprintf_r+0x1c6>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f04f 32ff 	mov.w	r2, #4294967295
 800cbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbd2:	f10a 0a01 	add.w	sl, sl, #1
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	9307      	str	r3, [sp, #28]
 800cbda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbde:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbe0:	4654      	mov	r4, sl
 800cbe2:	2205      	movs	r2, #5
 800cbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe8:	484e      	ldr	r0, [pc, #312]	@ (800cd24 <_svfiprintf_r+0x1e4>)
 800cbea:	f000 fa61 	bl	800d0b0 <memchr>
 800cbee:	9a04      	ldr	r2, [sp, #16]
 800cbf0:	b9d8      	cbnz	r0, 800cc2a <_svfiprintf_r+0xea>
 800cbf2:	06d0      	lsls	r0, r2, #27
 800cbf4:	bf44      	itt	mi
 800cbf6:	2320      	movmi	r3, #32
 800cbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbfc:	0711      	lsls	r1, r2, #28
 800cbfe:	bf44      	itt	mi
 800cc00:	232b      	movmi	r3, #43	@ 0x2b
 800cc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc06:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc0c:	d015      	beq.n	800cc3a <_svfiprintf_r+0xfa>
 800cc0e:	4654      	mov	r4, sl
 800cc10:	2000      	movs	r0, #0
 800cc12:	f04f 0c0a 	mov.w	ip, #10
 800cc16:	9a07      	ldr	r2, [sp, #28]
 800cc18:	4621      	mov	r1, r4
 800cc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc1e:	3b30      	subs	r3, #48	@ 0x30
 800cc20:	2b09      	cmp	r3, #9
 800cc22:	d94b      	bls.n	800ccbc <_svfiprintf_r+0x17c>
 800cc24:	b1b0      	cbz	r0, 800cc54 <_svfiprintf_r+0x114>
 800cc26:	9207      	str	r2, [sp, #28]
 800cc28:	e014      	b.n	800cc54 <_svfiprintf_r+0x114>
 800cc2a:	eba0 0308 	sub.w	r3, r0, r8
 800cc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc32:	4313      	orrs	r3, r2
 800cc34:	46a2      	mov	sl, r4
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	e7d2      	b.n	800cbe0 <_svfiprintf_r+0xa0>
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	1d19      	adds	r1, r3, #4
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	9103      	str	r1, [sp, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfbb      	ittet	lt
 800cc46:	425b      	neglt	r3, r3
 800cc48:	f042 0202 	orrlt.w	r2, r2, #2
 800cc4c:	9307      	strge	r3, [sp, #28]
 800cc4e:	9307      	strlt	r3, [sp, #28]
 800cc50:	bfb8      	it	lt
 800cc52:	9204      	strlt	r2, [sp, #16]
 800cc54:	7823      	ldrb	r3, [r4, #0]
 800cc56:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc58:	d10a      	bne.n	800cc70 <_svfiprintf_r+0x130>
 800cc5a:	7863      	ldrb	r3, [r4, #1]
 800cc5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc5e:	d132      	bne.n	800ccc6 <_svfiprintf_r+0x186>
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	3402      	adds	r4, #2
 800cc64:	1d1a      	adds	r2, r3, #4
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	9203      	str	r2, [sp, #12]
 800cc6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc6e:	9305      	str	r3, [sp, #20]
 800cc70:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cd28 <_svfiprintf_r+0x1e8>
 800cc74:	2203      	movs	r2, #3
 800cc76:	4650      	mov	r0, sl
 800cc78:	7821      	ldrb	r1, [r4, #0]
 800cc7a:	f000 fa19 	bl	800d0b0 <memchr>
 800cc7e:	b138      	cbz	r0, 800cc90 <_svfiprintf_r+0x150>
 800cc80:	2240      	movs	r2, #64	@ 0x40
 800cc82:	9b04      	ldr	r3, [sp, #16]
 800cc84:	eba0 000a 	sub.w	r0, r0, sl
 800cc88:	4082      	lsls	r2, r0
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	9304      	str	r3, [sp, #16]
 800cc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc94:	2206      	movs	r2, #6
 800cc96:	4825      	ldr	r0, [pc, #148]	@ (800cd2c <_svfiprintf_r+0x1ec>)
 800cc98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc9c:	f000 fa08 	bl	800d0b0 <memchr>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d036      	beq.n	800cd12 <_svfiprintf_r+0x1d2>
 800cca4:	4b22      	ldr	r3, [pc, #136]	@ (800cd30 <_svfiprintf_r+0x1f0>)
 800cca6:	bb1b      	cbnz	r3, 800ccf0 <_svfiprintf_r+0x1b0>
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	3307      	adds	r3, #7
 800ccac:	f023 0307 	bic.w	r3, r3, #7
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	9303      	str	r3, [sp, #12]
 800ccb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb6:	4433      	add	r3, r6
 800ccb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccba:	e76a      	b.n	800cb92 <_svfiprintf_r+0x52>
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccc4:	e7a8      	b.n	800cc18 <_svfiprintf_r+0xd8>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f04f 0c0a 	mov.w	ip, #10
 800cccc:	4619      	mov	r1, r3
 800ccce:	3401      	adds	r4, #1
 800ccd0:	9305      	str	r3, [sp, #20]
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccd8:	3a30      	subs	r2, #48	@ 0x30
 800ccda:	2a09      	cmp	r2, #9
 800ccdc:	d903      	bls.n	800cce6 <_svfiprintf_r+0x1a6>
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0c6      	beq.n	800cc70 <_svfiprintf_r+0x130>
 800cce2:	9105      	str	r1, [sp, #20]
 800cce4:	e7c4      	b.n	800cc70 <_svfiprintf_r+0x130>
 800cce6:	4604      	mov	r4, r0
 800cce8:	2301      	movs	r3, #1
 800ccea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccee:	e7f0      	b.n	800ccd2 <_svfiprintf_r+0x192>
 800ccf0:	ab03      	add	r3, sp, #12
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	462a      	mov	r2, r5
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd34 <_svfiprintf_r+0x1f4>)
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	f3af 8000 	nop.w
 800cd00:	1c42      	adds	r2, r0, #1
 800cd02:	4606      	mov	r6, r0
 800cd04:	d1d6      	bne.n	800ccb4 <_svfiprintf_r+0x174>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	065b      	lsls	r3, r3, #25
 800cd0a:	f53f af2d 	bmi.w	800cb68 <_svfiprintf_r+0x28>
 800cd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd10:	e72c      	b.n	800cb6c <_svfiprintf_r+0x2c>
 800cd12:	ab03      	add	r3, sp, #12
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	462a      	mov	r2, r5
 800cd18:	4638      	mov	r0, r7
 800cd1a:	4b06      	ldr	r3, [pc, #24]	@ (800cd34 <_svfiprintf_r+0x1f4>)
 800cd1c:	a904      	add	r1, sp, #16
 800cd1e:	f000 f87d 	bl	800ce1c <_printf_i>
 800cd22:	e7ed      	b.n	800cd00 <_svfiprintf_r+0x1c0>
 800cd24:	0800da28 	.word	0x0800da28
 800cd28:	0800da2e 	.word	0x0800da2e
 800cd2c:	0800da32 	.word	0x0800da32
 800cd30:	00000000 	.word	0x00000000
 800cd34:	0800ca89 	.word	0x0800ca89

0800cd38 <_printf_common>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	4616      	mov	r6, r2
 800cd3e:	4698      	mov	r8, r3
 800cd40:	688a      	ldr	r2, [r1, #8]
 800cd42:	690b      	ldr	r3, [r1, #16]
 800cd44:	4607      	mov	r7, r0
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bfb8      	it	lt
 800cd4a:	4613      	movlt	r3, r2
 800cd4c:	6033      	str	r3, [r6, #0]
 800cd4e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd52:	460c      	mov	r4, r1
 800cd54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd58:	b10a      	cbz	r2, 800cd5e <_printf_common+0x26>
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	6033      	str	r3, [r6, #0]
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	0699      	lsls	r1, r3, #26
 800cd62:	bf42      	ittt	mi
 800cd64:	6833      	ldrmi	r3, [r6, #0]
 800cd66:	3302      	addmi	r3, #2
 800cd68:	6033      	strmi	r3, [r6, #0]
 800cd6a:	6825      	ldr	r5, [r4, #0]
 800cd6c:	f015 0506 	ands.w	r5, r5, #6
 800cd70:	d106      	bne.n	800cd80 <_printf_common+0x48>
 800cd72:	f104 0a19 	add.w	sl, r4, #25
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	6832      	ldr	r2, [r6, #0]
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dc2b      	bgt.n	800cdd8 <_printf_common+0xa0>
 800cd80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd84:	6822      	ldr	r2, [r4, #0]
 800cd86:	3b00      	subs	r3, #0
 800cd88:	bf18      	it	ne
 800cd8a:	2301      	movne	r3, #1
 800cd8c:	0692      	lsls	r2, r2, #26
 800cd8e:	d430      	bmi.n	800cdf2 <_printf_common+0xba>
 800cd90:	4641      	mov	r1, r8
 800cd92:	4638      	mov	r0, r7
 800cd94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd98:	47c8      	blx	r9
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d023      	beq.n	800cde6 <_printf_common+0xae>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	6922      	ldr	r2, [r4, #16]
 800cda2:	f003 0306 	and.w	r3, r3, #6
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	bf14      	ite	ne
 800cdaa:	2500      	movne	r5, #0
 800cdac:	6833      	ldreq	r3, [r6, #0]
 800cdae:	f04f 0600 	mov.w	r6, #0
 800cdb2:	bf08      	it	eq
 800cdb4:	68e5      	ldreq	r5, [r4, #12]
 800cdb6:	f104 041a 	add.w	r4, r4, #26
 800cdba:	bf08      	it	eq
 800cdbc:	1aed      	subeq	r5, r5, r3
 800cdbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cdc2:	bf08      	it	eq
 800cdc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	bfc4      	itt	gt
 800cdcc:	1a9b      	subgt	r3, r3, r2
 800cdce:	18ed      	addgt	r5, r5, r3
 800cdd0:	42b5      	cmp	r5, r6
 800cdd2:	d11a      	bne.n	800ce0a <_printf_common+0xd2>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e008      	b.n	800cdea <_printf_common+0xb2>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4652      	mov	r2, sl
 800cddc:	4641      	mov	r1, r8
 800cdde:	4638      	mov	r0, r7
 800cde0:	47c8      	blx	r9
 800cde2:	3001      	adds	r0, #1
 800cde4:	d103      	bne.n	800cdee <_printf_common+0xb6>
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdee:	3501      	adds	r5, #1
 800cdf0:	e7c1      	b.n	800cd76 <_printf_common+0x3e>
 800cdf2:	2030      	movs	r0, #48	@ 0x30
 800cdf4:	18e1      	adds	r1, r4, r3
 800cdf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce00:	4422      	add	r2, r4
 800ce02:	3302      	adds	r3, #2
 800ce04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce08:	e7c2      	b.n	800cd90 <_printf_common+0x58>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4641      	mov	r1, r8
 800ce10:	4638      	mov	r0, r7
 800ce12:	47c8      	blx	r9
 800ce14:	3001      	adds	r0, #1
 800ce16:	d0e6      	beq.n	800cde6 <_printf_common+0xae>
 800ce18:	3601      	adds	r6, #1
 800ce1a:	e7d9      	b.n	800cdd0 <_printf_common+0x98>

0800ce1c <_printf_i>:
 800ce1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce20:	7e0f      	ldrb	r7, [r1, #24]
 800ce22:	4691      	mov	r9, r2
 800ce24:	2f78      	cmp	r7, #120	@ 0x78
 800ce26:	4680      	mov	r8, r0
 800ce28:	460c      	mov	r4, r1
 800ce2a:	469a      	mov	sl, r3
 800ce2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce32:	d807      	bhi.n	800ce44 <_printf_i+0x28>
 800ce34:	2f62      	cmp	r7, #98	@ 0x62
 800ce36:	d80a      	bhi.n	800ce4e <_printf_i+0x32>
 800ce38:	2f00      	cmp	r7, #0
 800ce3a:	f000 80d3 	beq.w	800cfe4 <_printf_i+0x1c8>
 800ce3e:	2f58      	cmp	r7, #88	@ 0x58
 800ce40:	f000 80ba 	beq.w	800cfb8 <_printf_i+0x19c>
 800ce44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce4c:	e03a      	b.n	800cec4 <_printf_i+0xa8>
 800ce4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce52:	2b15      	cmp	r3, #21
 800ce54:	d8f6      	bhi.n	800ce44 <_printf_i+0x28>
 800ce56:	a101      	add	r1, pc, #4	@ (adr r1, 800ce5c <_printf_i+0x40>)
 800ce58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce5c:	0800ceb5 	.word	0x0800ceb5
 800ce60:	0800cec9 	.word	0x0800cec9
 800ce64:	0800ce45 	.word	0x0800ce45
 800ce68:	0800ce45 	.word	0x0800ce45
 800ce6c:	0800ce45 	.word	0x0800ce45
 800ce70:	0800ce45 	.word	0x0800ce45
 800ce74:	0800cec9 	.word	0x0800cec9
 800ce78:	0800ce45 	.word	0x0800ce45
 800ce7c:	0800ce45 	.word	0x0800ce45
 800ce80:	0800ce45 	.word	0x0800ce45
 800ce84:	0800ce45 	.word	0x0800ce45
 800ce88:	0800cfcb 	.word	0x0800cfcb
 800ce8c:	0800cef3 	.word	0x0800cef3
 800ce90:	0800cf85 	.word	0x0800cf85
 800ce94:	0800ce45 	.word	0x0800ce45
 800ce98:	0800ce45 	.word	0x0800ce45
 800ce9c:	0800cfed 	.word	0x0800cfed
 800cea0:	0800ce45 	.word	0x0800ce45
 800cea4:	0800cef3 	.word	0x0800cef3
 800cea8:	0800ce45 	.word	0x0800ce45
 800ceac:	0800ce45 	.word	0x0800ce45
 800ceb0:	0800cf8d 	.word	0x0800cf8d
 800ceb4:	6833      	ldr	r3, [r6, #0]
 800ceb6:	1d1a      	adds	r2, r3, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6032      	str	r2, [r6, #0]
 800cebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cec4:	2301      	movs	r3, #1
 800cec6:	e09e      	b.n	800d006 <_printf_i+0x1ea>
 800cec8:	6833      	ldr	r3, [r6, #0]
 800ceca:	6820      	ldr	r0, [r4, #0]
 800cecc:	1d19      	adds	r1, r3, #4
 800cece:	6031      	str	r1, [r6, #0]
 800ced0:	0606      	lsls	r6, r0, #24
 800ced2:	d501      	bpl.n	800ced8 <_printf_i+0xbc>
 800ced4:	681d      	ldr	r5, [r3, #0]
 800ced6:	e003      	b.n	800cee0 <_printf_i+0xc4>
 800ced8:	0645      	lsls	r5, r0, #25
 800ceda:	d5fb      	bpl.n	800ced4 <_printf_i+0xb8>
 800cedc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	da03      	bge.n	800ceec <_printf_i+0xd0>
 800cee4:	232d      	movs	r3, #45	@ 0x2d
 800cee6:	426d      	negs	r5, r5
 800cee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceec:	230a      	movs	r3, #10
 800ceee:	4859      	ldr	r0, [pc, #356]	@ (800d054 <_printf_i+0x238>)
 800cef0:	e011      	b.n	800cf16 <_printf_i+0xfa>
 800cef2:	6821      	ldr	r1, [r4, #0]
 800cef4:	6833      	ldr	r3, [r6, #0]
 800cef6:	0608      	lsls	r0, r1, #24
 800cef8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cefc:	d402      	bmi.n	800cf04 <_printf_i+0xe8>
 800cefe:	0649      	lsls	r1, r1, #25
 800cf00:	bf48      	it	mi
 800cf02:	b2ad      	uxthmi	r5, r5
 800cf04:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf06:	6033      	str	r3, [r6, #0]
 800cf08:	bf14      	ite	ne
 800cf0a:	230a      	movne	r3, #10
 800cf0c:	2308      	moveq	r3, #8
 800cf0e:	4851      	ldr	r0, [pc, #324]	@ (800d054 <_printf_i+0x238>)
 800cf10:	2100      	movs	r1, #0
 800cf12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf16:	6866      	ldr	r6, [r4, #4]
 800cf18:	2e00      	cmp	r6, #0
 800cf1a:	bfa8      	it	ge
 800cf1c:	6821      	ldrge	r1, [r4, #0]
 800cf1e:	60a6      	str	r6, [r4, #8]
 800cf20:	bfa4      	itt	ge
 800cf22:	f021 0104 	bicge.w	r1, r1, #4
 800cf26:	6021      	strge	r1, [r4, #0]
 800cf28:	b90d      	cbnz	r5, 800cf2e <_printf_i+0x112>
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d04b      	beq.n	800cfc6 <_printf_i+0x1aa>
 800cf2e:	4616      	mov	r6, r2
 800cf30:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf34:	fb03 5711 	mls	r7, r3, r1, r5
 800cf38:	5dc7      	ldrb	r7, [r0, r7]
 800cf3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf3e:	462f      	mov	r7, r5
 800cf40:	42bb      	cmp	r3, r7
 800cf42:	460d      	mov	r5, r1
 800cf44:	d9f4      	bls.n	800cf30 <_printf_i+0x114>
 800cf46:	2b08      	cmp	r3, #8
 800cf48:	d10b      	bne.n	800cf62 <_printf_i+0x146>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	07df      	lsls	r7, r3, #31
 800cf4e:	d508      	bpl.n	800cf62 <_printf_i+0x146>
 800cf50:	6923      	ldr	r3, [r4, #16]
 800cf52:	6861      	ldr	r1, [r4, #4]
 800cf54:	4299      	cmp	r1, r3
 800cf56:	bfde      	ittt	le
 800cf58:	2330      	movle	r3, #48	@ 0x30
 800cf5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf62:	1b92      	subs	r2, r2, r6
 800cf64:	6122      	str	r2, [r4, #16]
 800cf66:	464b      	mov	r3, r9
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f8cd a000 	str.w	sl, [sp]
 800cf70:	aa03      	add	r2, sp, #12
 800cf72:	f7ff fee1 	bl	800cd38 <_printf_common>
 800cf76:	3001      	adds	r0, #1
 800cf78:	d14a      	bne.n	800d010 <_printf_i+0x1f4>
 800cf7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7e:	b004      	add	sp, #16
 800cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	f043 0320 	orr.w	r3, r3, #32
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	2778      	movs	r7, #120	@ 0x78
 800cf8e:	4832      	ldr	r0, [pc, #200]	@ (800d058 <_printf_i+0x23c>)
 800cf90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	6831      	ldr	r1, [r6, #0]
 800cf98:	061f      	lsls	r7, r3, #24
 800cf9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf9e:	d402      	bmi.n	800cfa6 <_printf_i+0x18a>
 800cfa0:	065f      	lsls	r7, r3, #25
 800cfa2:	bf48      	it	mi
 800cfa4:	b2ad      	uxthmi	r5, r5
 800cfa6:	6031      	str	r1, [r6, #0]
 800cfa8:	07d9      	lsls	r1, r3, #31
 800cfaa:	bf44      	itt	mi
 800cfac:	f043 0320 	orrmi.w	r3, r3, #32
 800cfb0:	6023      	strmi	r3, [r4, #0]
 800cfb2:	b11d      	cbz	r5, 800cfbc <_printf_i+0x1a0>
 800cfb4:	2310      	movs	r3, #16
 800cfb6:	e7ab      	b.n	800cf10 <_printf_i+0xf4>
 800cfb8:	4826      	ldr	r0, [pc, #152]	@ (800d054 <_printf_i+0x238>)
 800cfba:	e7e9      	b.n	800cf90 <_printf_i+0x174>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	f023 0320 	bic.w	r3, r3, #32
 800cfc2:	6023      	str	r3, [r4, #0]
 800cfc4:	e7f6      	b.n	800cfb4 <_printf_i+0x198>
 800cfc6:	4616      	mov	r6, r2
 800cfc8:	e7bd      	b.n	800cf46 <_printf_i+0x12a>
 800cfca:	6833      	ldr	r3, [r6, #0]
 800cfcc:	6825      	ldr	r5, [r4, #0]
 800cfce:	1d18      	adds	r0, r3, #4
 800cfd0:	6961      	ldr	r1, [r4, #20]
 800cfd2:	6030      	str	r0, [r6, #0]
 800cfd4:	062e      	lsls	r6, r5, #24
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	d501      	bpl.n	800cfde <_printf_i+0x1c2>
 800cfda:	6019      	str	r1, [r3, #0]
 800cfdc:	e002      	b.n	800cfe4 <_printf_i+0x1c8>
 800cfde:	0668      	lsls	r0, r5, #25
 800cfe0:	d5fb      	bpl.n	800cfda <_printf_i+0x1be>
 800cfe2:	8019      	strh	r1, [r3, #0]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4616      	mov	r6, r2
 800cfe8:	6123      	str	r3, [r4, #16]
 800cfea:	e7bc      	b.n	800cf66 <_printf_i+0x14a>
 800cfec:	6833      	ldr	r3, [r6, #0]
 800cfee:	2100      	movs	r1, #0
 800cff0:	1d1a      	adds	r2, r3, #4
 800cff2:	6032      	str	r2, [r6, #0]
 800cff4:	681e      	ldr	r6, [r3, #0]
 800cff6:	6862      	ldr	r2, [r4, #4]
 800cff8:	4630      	mov	r0, r6
 800cffa:	f000 f859 	bl	800d0b0 <memchr>
 800cffe:	b108      	cbz	r0, 800d004 <_printf_i+0x1e8>
 800d000:	1b80      	subs	r0, r0, r6
 800d002:	6060      	str	r0, [r4, #4]
 800d004:	6863      	ldr	r3, [r4, #4]
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	2300      	movs	r3, #0
 800d00a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d00e:	e7aa      	b.n	800cf66 <_printf_i+0x14a>
 800d010:	4632      	mov	r2, r6
 800d012:	4649      	mov	r1, r9
 800d014:	4640      	mov	r0, r8
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	47d0      	blx	sl
 800d01a:	3001      	adds	r0, #1
 800d01c:	d0ad      	beq.n	800cf7a <_printf_i+0x15e>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	079b      	lsls	r3, r3, #30
 800d022:	d413      	bmi.n	800d04c <_printf_i+0x230>
 800d024:	68e0      	ldr	r0, [r4, #12]
 800d026:	9b03      	ldr	r3, [sp, #12]
 800d028:	4298      	cmp	r0, r3
 800d02a:	bfb8      	it	lt
 800d02c:	4618      	movlt	r0, r3
 800d02e:	e7a6      	b.n	800cf7e <_printf_i+0x162>
 800d030:	2301      	movs	r3, #1
 800d032:	4632      	mov	r2, r6
 800d034:	4649      	mov	r1, r9
 800d036:	4640      	mov	r0, r8
 800d038:	47d0      	blx	sl
 800d03a:	3001      	adds	r0, #1
 800d03c:	d09d      	beq.n	800cf7a <_printf_i+0x15e>
 800d03e:	3501      	adds	r5, #1
 800d040:	68e3      	ldr	r3, [r4, #12]
 800d042:	9903      	ldr	r1, [sp, #12]
 800d044:	1a5b      	subs	r3, r3, r1
 800d046:	42ab      	cmp	r3, r5
 800d048:	dcf2      	bgt.n	800d030 <_printf_i+0x214>
 800d04a:	e7eb      	b.n	800d024 <_printf_i+0x208>
 800d04c:	2500      	movs	r5, #0
 800d04e:	f104 0619 	add.w	r6, r4, #25
 800d052:	e7f5      	b.n	800d040 <_printf_i+0x224>
 800d054:	0800da39 	.word	0x0800da39
 800d058:	0800da4a 	.word	0x0800da4a

0800d05c <memmove>:
 800d05c:	4288      	cmp	r0, r1
 800d05e:	b510      	push	{r4, lr}
 800d060:	eb01 0402 	add.w	r4, r1, r2
 800d064:	d902      	bls.n	800d06c <memmove+0x10>
 800d066:	4284      	cmp	r4, r0
 800d068:	4623      	mov	r3, r4
 800d06a:	d807      	bhi.n	800d07c <memmove+0x20>
 800d06c:	1e43      	subs	r3, r0, #1
 800d06e:	42a1      	cmp	r1, r4
 800d070:	d008      	beq.n	800d084 <memmove+0x28>
 800d072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d07a:	e7f8      	b.n	800d06e <memmove+0x12>
 800d07c:	4601      	mov	r1, r0
 800d07e:	4402      	add	r2, r0
 800d080:	428a      	cmp	r2, r1
 800d082:	d100      	bne.n	800d086 <memmove+0x2a>
 800d084:	bd10      	pop	{r4, pc}
 800d086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d08e:	e7f7      	b.n	800d080 <memmove+0x24>

0800d090 <_sbrk_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	2300      	movs	r3, #0
 800d094:	4d05      	ldr	r5, [pc, #20]	@ (800d0ac <_sbrk_r+0x1c>)
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	f7f6 fcbc 	bl	8003a18 <_sbrk>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_sbrk_r+0x1a>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_sbrk_r+0x1a>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	20001714 	.word	0x20001714

0800d0b0 <memchr>:
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	b2c9      	uxtb	r1, r1
 800d0b6:	4402      	add	r2, r0
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	d101      	bne.n	800d0c2 <memchr+0x12>
 800d0be:	2000      	movs	r0, #0
 800d0c0:	e003      	b.n	800d0ca <memchr+0x1a>
 800d0c2:	7804      	ldrb	r4, [r0, #0]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	428c      	cmp	r4, r1
 800d0c8:	d1f6      	bne.n	800d0b8 <memchr+0x8>
 800d0ca:	bd10      	pop	{r4, pc}

0800d0cc <_realloc_r>:
 800d0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	4615      	mov	r5, r2
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	b921      	cbnz	r1, 800d0e2 <_realloc_r+0x16>
 800d0d8:	4611      	mov	r1, r2
 800d0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0de:	f7ff bc47 	b.w	800c970 <_malloc_r>
 800d0e2:	b92a      	cbnz	r2, 800d0f0 <_realloc_r+0x24>
 800d0e4:	f7ff fbda 	bl	800c89c <_free_r>
 800d0e8:	2400      	movs	r4, #0
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f0:	f000 f81a 	bl	800d128 <_malloc_usable_size_r>
 800d0f4:	4285      	cmp	r5, r0
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	d802      	bhi.n	800d100 <_realloc_r+0x34>
 800d0fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0fe:	d8f4      	bhi.n	800d0ea <_realloc_r+0x1e>
 800d100:	4629      	mov	r1, r5
 800d102:	4640      	mov	r0, r8
 800d104:	f7ff fc34 	bl	800c970 <_malloc_r>
 800d108:	4607      	mov	r7, r0
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d0ec      	beq.n	800d0e8 <_realloc_r+0x1c>
 800d10e:	42b5      	cmp	r5, r6
 800d110:	462a      	mov	r2, r5
 800d112:	4621      	mov	r1, r4
 800d114:	bf28      	it	cs
 800d116:	4632      	movcs	r2, r6
 800d118:	f7ff fbb2 	bl	800c880 <memcpy>
 800d11c:	4621      	mov	r1, r4
 800d11e:	4640      	mov	r0, r8
 800d120:	f7ff fbbc 	bl	800c89c <_free_r>
 800d124:	463c      	mov	r4, r7
 800d126:	e7e0      	b.n	800d0ea <_realloc_r+0x1e>

0800d128 <_malloc_usable_size_r>:
 800d128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d12c:	1f18      	subs	r0, r3, #4
 800d12e:	2b00      	cmp	r3, #0
 800d130:	bfbc      	itt	lt
 800d132:	580b      	ldrlt	r3, [r1, r0]
 800d134:	18c0      	addlt	r0, r0, r3
 800d136:	4770      	bx	lr

0800d138 <_init>:
 800d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13a:	bf00      	nop
 800d13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13e:	bc08      	pop	{r3}
 800d140:	469e      	mov	lr, r3
 800d142:	4770      	bx	lr

0800d144 <_fini>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	bf00      	nop
 800d148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14a:	bc08      	pop	{r3}
 800d14c:	469e      	mov	lr, r3
 800d14e:	4770      	bx	lr
